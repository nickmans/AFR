
AFR_WAYPOINTER_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c40  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  08112ee0  08112ee0  00013ee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08113420  08113420  00014420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08113428  08113428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0811342c  0811342c  0001442c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000230  10000000  08113430  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ec0  10000230  08113660  00015230  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  100050f0  08113660  000160f0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00015230  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ef53  00000000  00000000  00015260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004460  00000000  00000000  000341b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016e0  00000000  00000000  00038618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000011a4  00000000  00000000  00039cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d4c2  00000000  00000000  0003ae9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e546  00000000  00000000  0007835e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018a2e4  00000000  00000000  000968a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00220b88  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007490  00000000  00000000  00220bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  0022805c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000230 	.word	0x10000230
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08112ec8 	.word	0x08112ec8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000234 	.word	0x10000234
 81002dc:	08112ec8 	.word	0x08112ec8

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9be 	b.w	810112c <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	@ (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	468e      	mov	lr, r1
 8100e3c:	4604      	mov	r4, r0
 8100e3e:	4688      	mov	r8, r1
 8100e40:	2b00      	cmp	r3, #0
 8100e42:	d14a      	bne.n	8100eda <__udivmoddi4+0xa6>
 8100e44:	428a      	cmp	r2, r1
 8100e46:	4617      	mov	r7, r2
 8100e48:	d962      	bls.n	8100f10 <__udivmoddi4+0xdc>
 8100e4a:	fab2 f682 	clz	r6, r2
 8100e4e:	b14e      	cbz	r6, 8100e64 <__udivmoddi4+0x30>
 8100e50:	f1c6 0320 	rsb	r3, r6, #32
 8100e54:	fa01 f806 	lsl.w	r8, r1, r6
 8100e58:	fa20 f303 	lsr.w	r3, r0, r3
 8100e5c:	40b7      	lsls	r7, r6
 8100e5e:	ea43 0808 	orr.w	r8, r3, r8
 8100e62:	40b4      	lsls	r4, r6
 8100e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100e68:	fa1f fc87 	uxth.w	ip, r7
 8100e6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8100e70:	0c23      	lsrs	r3, r4, #16
 8100e72:	fb0e 8811 	mls	r8, lr, r1, r8
 8100e76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100e7a:	fb01 f20c 	mul.w	r2, r1, ip
 8100e7e:	429a      	cmp	r2, r3
 8100e80:	d909      	bls.n	8100e96 <__udivmoddi4+0x62>
 8100e82:	18fb      	adds	r3, r7, r3
 8100e84:	f101 30ff 	add.w	r0, r1, #4294967295
 8100e88:	f080 80ea 	bcs.w	8101060 <__udivmoddi4+0x22c>
 8100e8c:	429a      	cmp	r2, r3
 8100e8e:	f240 80e7 	bls.w	8101060 <__udivmoddi4+0x22c>
 8100e92:	3902      	subs	r1, #2
 8100e94:	443b      	add	r3, r7
 8100e96:	1a9a      	subs	r2, r3, r2
 8100e98:	b2a3      	uxth	r3, r4
 8100e9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8100e9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8100ea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8100ea6:	fb00 fc0c 	mul.w	ip, r0, ip
 8100eaa:	459c      	cmp	ip, r3
 8100eac:	d909      	bls.n	8100ec2 <__udivmoddi4+0x8e>
 8100eae:	18fb      	adds	r3, r7, r3
 8100eb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8100eb4:	f080 80d6 	bcs.w	8101064 <__udivmoddi4+0x230>
 8100eb8:	459c      	cmp	ip, r3
 8100eba:	f240 80d3 	bls.w	8101064 <__udivmoddi4+0x230>
 8100ebe:	443b      	add	r3, r7
 8100ec0:	3802      	subs	r0, #2
 8100ec2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100ec6:	eba3 030c 	sub.w	r3, r3, ip
 8100eca:	2100      	movs	r1, #0
 8100ecc:	b11d      	cbz	r5, 8100ed6 <__udivmoddi4+0xa2>
 8100ece:	40f3      	lsrs	r3, r6
 8100ed0:	2200      	movs	r2, #0
 8100ed2:	e9c5 3200 	strd	r3, r2, [r5]
 8100ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eda:	428b      	cmp	r3, r1
 8100edc:	d905      	bls.n	8100eea <__udivmoddi4+0xb6>
 8100ede:	b10d      	cbz	r5, 8100ee4 <__udivmoddi4+0xb0>
 8100ee0:	e9c5 0100 	strd	r0, r1, [r5]
 8100ee4:	2100      	movs	r1, #0
 8100ee6:	4608      	mov	r0, r1
 8100ee8:	e7f5      	b.n	8100ed6 <__udivmoddi4+0xa2>
 8100eea:	fab3 f183 	clz	r1, r3
 8100eee:	2900      	cmp	r1, #0
 8100ef0:	d146      	bne.n	8100f80 <__udivmoddi4+0x14c>
 8100ef2:	4573      	cmp	r3, lr
 8100ef4:	d302      	bcc.n	8100efc <__udivmoddi4+0xc8>
 8100ef6:	4282      	cmp	r2, r0
 8100ef8:	f200 8105 	bhi.w	8101106 <__udivmoddi4+0x2d2>
 8100efc:	1a84      	subs	r4, r0, r2
 8100efe:	eb6e 0203 	sbc.w	r2, lr, r3
 8100f02:	2001      	movs	r0, #1
 8100f04:	4690      	mov	r8, r2
 8100f06:	2d00      	cmp	r5, #0
 8100f08:	d0e5      	beq.n	8100ed6 <__udivmoddi4+0xa2>
 8100f0a:	e9c5 4800 	strd	r4, r8, [r5]
 8100f0e:	e7e2      	b.n	8100ed6 <__udivmoddi4+0xa2>
 8100f10:	2a00      	cmp	r2, #0
 8100f12:	f000 8090 	beq.w	8101036 <__udivmoddi4+0x202>
 8100f16:	fab2 f682 	clz	r6, r2
 8100f1a:	2e00      	cmp	r6, #0
 8100f1c:	f040 80a4 	bne.w	8101068 <__udivmoddi4+0x234>
 8100f20:	1a8a      	subs	r2, r1, r2
 8100f22:	0c03      	lsrs	r3, r0, #16
 8100f24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100f28:	b280      	uxth	r0, r0
 8100f2a:	b2bc      	uxth	r4, r7
 8100f2c:	2101      	movs	r1, #1
 8100f2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8100f32:	fb0e 221c 	mls	r2, lr, ip, r2
 8100f36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8100f3a:	fb04 f20c 	mul.w	r2, r4, ip
 8100f3e:	429a      	cmp	r2, r3
 8100f40:	d907      	bls.n	8100f52 <__udivmoddi4+0x11e>
 8100f42:	18fb      	adds	r3, r7, r3
 8100f44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8100f48:	d202      	bcs.n	8100f50 <__udivmoddi4+0x11c>
 8100f4a:	429a      	cmp	r2, r3
 8100f4c:	f200 80e0 	bhi.w	8101110 <__udivmoddi4+0x2dc>
 8100f50:	46c4      	mov	ip, r8
 8100f52:	1a9b      	subs	r3, r3, r2
 8100f54:	fbb3 f2fe 	udiv	r2, r3, lr
 8100f58:	fb0e 3312 	mls	r3, lr, r2, r3
 8100f5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8100f60:	fb02 f404 	mul.w	r4, r2, r4
 8100f64:	429c      	cmp	r4, r3
 8100f66:	d907      	bls.n	8100f78 <__udivmoddi4+0x144>
 8100f68:	18fb      	adds	r3, r7, r3
 8100f6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8100f6e:	d202      	bcs.n	8100f76 <__udivmoddi4+0x142>
 8100f70:	429c      	cmp	r4, r3
 8100f72:	f200 80ca 	bhi.w	810110a <__udivmoddi4+0x2d6>
 8100f76:	4602      	mov	r2, r0
 8100f78:	1b1b      	subs	r3, r3, r4
 8100f7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8100f7e:	e7a5      	b.n	8100ecc <__udivmoddi4+0x98>
 8100f80:	f1c1 0620 	rsb	r6, r1, #32
 8100f84:	408b      	lsls	r3, r1
 8100f86:	fa22 f706 	lsr.w	r7, r2, r6
 8100f8a:	431f      	orrs	r7, r3
 8100f8c:	fa0e f401 	lsl.w	r4, lr, r1
 8100f90:	fa20 f306 	lsr.w	r3, r0, r6
 8100f94:	fa2e fe06 	lsr.w	lr, lr, r6
 8100f98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8100f9c:	4323      	orrs	r3, r4
 8100f9e:	fa00 f801 	lsl.w	r8, r0, r1
 8100fa2:	fa1f fc87 	uxth.w	ip, r7
 8100fa6:	fbbe f0f9 	udiv	r0, lr, r9
 8100faa:	0c1c      	lsrs	r4, r3, #16
 8100fac:	fb09 ee10 	mls	lr, r9, r0, lr
 8100fb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8100fb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8100fb8:	45a6      	cmp	lr, r4
 8100fba:	fa02 f201 	lsl.w	r2, r2, r1
 8100fbe:	d909      	bls.n	8100fd4 <__udivmoddi4+0x1a0>
 8100fc0:	193c      	adds	r4, r7, r4
 8100fc2:	f100 3aff 	add.w	sl, r0, #4294967295
 8100fc6:	f080 809c 	bcs.w	8101102 <__udivmoddi4+0x2ce>
 8100fca:	45a6      	cmp	lr, r4
 8100fcc:	f240 8099 	bls.w	8101102 <__udivmoddi4+0x2ce>
 8100fd0:	3802      	subs	r0, #2
 8100fd2:	443c      	add	r4, r7
 8100fd4:	eba4 040e 	sub.w	r4, r4, lr
 8100fd8:	fa1f fe83 	uxth.w	lr, r3
 8100fdc:	fbb4 f3f9 	udiv	r3, r4, r9
 8100fe0:	fb09 4413 	mls	r4, r9, r3, r4
 8100fe4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8100fe8:	fb03 fc0c 	mul.w	ip, r3, ip
 8100fec:	45a4      	cmp	ip, r4
 8100fee:	d908      	bls.n	8101002 <__udivmoddi4+0x1ce>
 8100ff0:	193c      	adds	r4, r7, r4
 8100ff2:	f103 3eff 	add.w	lr, r3, #4294967295
 8100ff6:	f080 8082 	bcs.w	81010fe <__udivmoddi4+0x2ca>
 8100ffa:	45a4      	cmp	ip, r4
 8100ffc:	d97f      	bls.n	81010fe <__udivmoddi4+0x2ca>
 8100ffe:	3b02      	subs	r3, #2
 8101000:	443c      	add	r4, r7
 8101002:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8101006:	eba4 040c 	sub.w	r4, r4, ip
 810100a:	fba0 ec02 	umull	lr, ip, r0, r2
 810100e:	4564      	cmp	r4, ip
 8101010:	4673      	mov	r3, lr
 8101012:	46e1      	mov	r9, ip
 8101014:	d362      	bcc.n	81010dc <__udivmoddi4+0x2a8>
 8101016:	d05f      	beq.n	81010d8 <__udivmoddi4+0x2a4>
 8101018:	b15d      	cbz	r5, 8101032 <__udivmoddi4+0x1fe>
 810101a:	ebb8 0203 	subs.w	r2, r8, r3
 810101e:	eb64 0409 	sbc.w	r4, r4, r9
 8101022:	fa04 f606 	lsl.w	r6, r4, r6
 8101026:	fa22 f301 	lsr.w	r3, r2, r1
 810102a:	431e      	orrs	r6, r3
 810102c:	40cc      	lsrs	r4, r1
 810102e:	e9c5 6400 	strd	r6, r4, [r5]
 8101032:	2100      	movs	r1, #0
 8101034:	e74f      	b.n	8100ed6 <__udivmoddi4+0xa2>
 8101036:	fbb1 fcf2 	udiv	ip, r1, r2
 810103a:	0c01      	lsrs	r1, r0, #16
 810103c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8101040:	b280      	uxth	r0, r0
 8101042:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8101046:	463b      	mov	r3, r7
 8101048:	4638      	mov	r0, r7
 810104a:	463c      	mov	r4, r7
 810104c:	46b8      	mov	r8, r7
 810104e:	46be      	mov	lr, r7
 8101050:	2620      	movs	r6, #32
 8101052:	fbb1 f1f7 	udiv	r1, r1, r7
 8101056:	eba2 0208 	sub.w	r2, r2, r8
 810105a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 810105e:	e766      	b.n	8100f2e <__udivmoddi4+0xfa>
 8101060:	4601      	mov	r1, r0
 8101062:	e718      	b.n	8100e96 <__udivmoddi4+0x62>
 8101064:	4610      	mov	r0, r2
 8101066:	e72c      	b.n	8100ec2 <__udivmoddi4+0x8e>
 8101068:	f1c6 0220 	rsb	r2, r6, #32
 810106c:	fa2e f302 	lsr.w	r3, lr, r2
 8101070:	40b7      	lsls	r7, r6
 8101072:	40b1      	lsls	r1, r6
 8101074:	fa20 f202 	lsr.w	r2, r0, r2
 8101078:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810107c:	430a      	orrs	r2, r1
 810107e:	fbb3 f8fe 	udiv	r8, r3, lr
 8101082:	b2bc      	uxth	r4, r7
 8101084:	fb0e 3318 	mls	r3, lr, r8, r3
 8101088:	0c11      	lsrs	r1, r2, #16
 810108a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810108e:	fb08 f904 	mul.w	r9, r8, r4
 8101092:	40b0      	lsls	r0, r6
 8101094:	4589      	cmp	r9, r1
 8101096:	ea4f 4310 	mov.w	r3, r0, lsr #16
 810109a:	b280      	uxth	r0, r0
 810109c:	d93e      	bls.n	810111c <__udivmoddi4+0x2e8>
 810109e:	1879      	adds	r1, r7, r1
 81010a0:	f108 3cff 	add.w	ip, r8, #4294967295
 81010a4:	d201      	bcs.n	81010aa <__udivmoddi4+0x276>
 81010a6:	4589      	cmp	r9, r1
 81010a8:	d81f      	bhi.n	81010ea <__udivmoddi4+0x2b6>
 81010aa:	eba1 0109 	sub.w	r1, r1, r9
 81010ae:	fbb1 f9fe 	udiv	r9, r1, lr
 81010b2:	fb09 f804 	mul.w	r8, r9, r4
 81010b6:	fb0e 1119 	mls	r1, lr, r9, r1
 81010ba:	b292      	uxth	r2, r2
 81010bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 81010c0:	4542      	cmp	r2, r8
 81010c2:	d229      	bcs.n	8101118 <__udivmoddi4+0x2e4>
 81010c4:	18ba      	adds	r2, r7, r2
 81010c6:	f109 31ff 	add.w	r1, r9, #4294967295
 81010ca:	d2c4      	bcs.n	8101056 <__udivmoddi4+0x222>
 81010cc:	4542      	cmp	r2, r8
 81010ce:	d2c2      	bcs.n	8101056 <__udivmoddi4+0x222>
 81010d0:	f1a9 0102 	sub.w	r1, r9, #2
 81010d4:	443a      	add	r2, r7
 81010d6:	e7be      	b.n	8101056 <__udivmoddi4+0x222>
 81010d8:	45f0      	cmp	r8, lr
 81010da:	d29d      	bcs.n	8101018 <__udivmoddi4+0x1e4>
 81010dc:	ebbe 0302 	subs.w	r3, lr, r2
 81010e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 81010e4:	3801      	subs	r0, #1
 81010e6:	46e1      	mov	r9, ip
 81010e8:	e796      	b.n	8101018 <__udivmoddi4+0x1e4>
 81010ea:	eba7 0909 	sub.w	r9, r7, r9
 81010ee:	4449      	add	r1, r9
 81010f0:	f1a8 0c02 	sub.w	ip, r8, #2
 81010f4:	fbb1 f9fe 	udiv	r9, r1, lr
 81010f8:	fb09 f804 	mul.w	r8, r9, r4
 81010fc:	e7db      	b.n	81010b6 <__udivmoddi4+0x282>
 81010fe:	4673      	mov	r3, lr
 8101100:	e77f      	b.n	8101002 <__udivmoddi4+0x1ce>
 8101102:	4650      	mov	r0, sl
 8101104:	e766      	b.n	8100fd4 <__udivmoddi4+0x1a0>
 8101106:	4608      	mov	r0, r1
 8101108:	e6fd      	b.n	8100f06 <__udivmoddi4+0xd2>
 810110a:	443b      	add	r3, r7
 810110c:	3a02      	subs	r2, #2
 810110e:	e733      	b.n	8100f78 <__udivmoddi4+0x144>
 8101110:	f1ac 0c02 	sub.w	ip, ip, #2
 8101114:	443b      	add	r3, r7
 8101116:	e71c      	b.n	8100f52 <__udivmoddi4+0x11e>
 8101118:	4649      	mov	r1, r9
 810111a:	e79c      	b.n	8101056 <__udivmoddi4+0x222>
 810111c:	eba1 0109 	sub.w	r1, r1, r9
 8101120:	46c4      	mov	ip, r8
 8101122:	fbb1 f9fe 	udiv	r9, r1, lr
 8101126:	fb09 f804 	mul.w	r8, r9, r4
 810112a:	e7c4      	b.n	81010b6 <__udivmoddi4+0x282>

0810112c <__aeabi_idiv0>:
 810112c:	4770      	bx	lr
 810112e:	bf00      	nop

08101130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101130:	b480      	push	{r7}
 8101132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101134:	4b09      	ldr	r3, [pc, #36]	@ (810115c <SystemInit+0x2c>)
 8101136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810113a:	4a08      	ldr	r2, [pc, #32]	@ (810115c <SystemInit+0x2c>)
 810113c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101140:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101144:	4b05      	ldr	r3, [pc, #20]	@ (810115c <SystemInit+0x2c>)
 8101146:	691b      	ldr	r3, [r3, #16]
 8101148:	4a04      	ldr	r2, [pc, #16]	@ (810115c <SystemInit+0x2c>)
 810114a:	f043 0310 	orr.w	r3, r3, #16
 810114e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101150:	bf00      	nop
 8101152:	46bd      	mov	sp, r7
 8101154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101158:	4770      	bx	lr
 810115a:	bf00      	nop
 810115c:	e000ed00 	.word	0xe000ed00

08101160 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8101160:	b480      	push	{r7}
 8101162:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8101164:	4b09      	ldr	r3, [pc, #36]	@ (810118c <ExitRun0Mode+0x2c>)
 8101166:	68db      	ldr	r3, [r3, #12]
 8101168:	4a08      	ldr	r2, [pc, #32]	@ (810118c <ExitRun0Mode+0x2c>)
 810116a:	f023 0302 	bic.w	r3, r3, #2
 810116e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8101170:	bf00      	nop
 8101172:	4b06      	ldr	r3, [pc, #24]	@ (810118c <ExitRun0Mode+0x2c>)
 8101174:	685b      	ldr	r3, [r3, #4]
 8101176:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810117a:	2b00      	cmp	r3, #0
 810117c:	d0f9      	beq.n	8101172 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 810117e:	bf00      	nop
 8101180:	bf00      	nop
 8101182:	46bd      	mov	sp, r7
 8101184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101188:	4770      	bx	lr
 810118a:	bf00      	nop
 810118c:	58024800 	.word	0x58024800

08101190 <cmdlinego>:

/* ---------------------------------------------------------------------- */
/* background task: forward BU-01 data to PC over UART2                   */
/* ---------------------------------------------------------------------- */
void cmdlinego(void *argument)
{
 8101190:	b5b0      	push	{r4, r5, r7, lr}
 8101192:	b088      	sub	sp, #32
 8101194:	af04      	add	r7, sp, #16
 8101196:	6078      	str	r0, [r7, #4]
    (void)argument;
    for (;;)
    {
        // === BU-01 direct parsing ===
    	if (bu01_rx_read_idx != bu01_rx_write_idx)
 8101198:	4b79      	ldr	r3, [pc, #484]	@ (8101380 <cmdlinego+0x1f0>)
 810119a:	881b      	ldrh	r3, [r3, #0]
 810119c:	b29a      	uxth	r2, r3
 810119e:	4b79      	ldr	r3, [pc, #484]	@ (8101384 <cmdlinego+0x1f4>)
 81011a0:	881b      	ldrh	r3, [r3, #0]
 81011a2:	b29b      	uxth	r3, r3
 81011a4:	429a      	cmp	r2, r3
 81011a6:	d035      	beq.n	8101214 <cmdlinego+0x84>
		{
			char c = bu01_rx_buffer[bu01_rx_read_idx++];
 81011a8:	4b75      	ldr	r3, [pc, #468]	@ (8101380 <cmdlinego+0x1f0>)
 81011aa:	881b      	ldrh	r3, [r3, #0]
 81011ac:	b29b      	uxth	r3, r3
 81011ae:	1c5a      	adds	r2, r3, #1
 81011b0:	b291      	uxth	r1, r2
 81011b2:	4a73      	ldr	r2, [pc, #460]	@ (8101380 <cmdlinego+0x1f0>)
 81011b4:	8011      	strh	r1, [r2, #0]
 81011b6:	461a      	mov	r2, r3
 81011b8:	4b73      	ldr	r3, [pc, #460]	@ (8101388 <cmdlinego+0x1f8>)
 81011ba:	5c9b      	ldrb	r3, [r3, r2]
 81011bc:	73fb      	strb	r3, [r7, #15]
			if (bu01_rx_read_idx >= BU01_BUF_SIZE)
 81011be:	4b70      	ldr	r3, [pc, #448]	@ (8101380 <cmdlinego+0x1f0>)
 81011c0:	881b      	ldrh	r3, [r3, #0]
 81011c2:	b29b      	uxth	r3, r3
 81011c4:	2bff      	cmp	r3, #255	@ 0xff
 81011c6:	d902      	bls.n	81011ce <cmdlinego+0x3e>
				bu01_rx_read_idx = 0;
 81011c8:	4b6d      	ldr	r3, [pc, #436]	@ (8101380 <cmdlinego+0x1f0>)
 81011ca:	2200      	movs	r2, #0
 81011cc:	801a      	strh	r2, [r3, #0]

			line_buf[line_pos++] = c;
 81011ce:	4b6f      	ldr	r3, [pc, #444]	@ (810138c <cmdlinego+0x1fc>)
 81011d0:	781b      	ldrb	r3, [r3, #0]
 81011d2:	1c5a      	adds	r2, r3, #1
 81011d4:	b2d1      	uxtb	r1, r2
 81011d6:	4a6d      	ldr	r2, [pc, #436]	@ (810138c <cmdlinego+0x1fc>)
 81011d8:	7011      	strb	r1, [r2, #0]
 81011da:	4619      	mov	r1, r3
 81011dc:	4a6c      	ldr	r2, [pc, #432]	@ (8101390 <cmdlinego+0x200>)
 81011de:	7bfb      	ldrb	r3, [r7, #15]
 81011e0:	5453      	strb	r3, [r2, r1]
			if (c == '\n' || line_pos >= sizeof(line_buf) - 1)
 81011e2:	7bfb      	ldrb	r3, [r7, #15]
 81011e4:	2b0a      	cmp	r3, #10
 81011e6:	d003      	beq.n	81011f0 <cmdlinego+0x60>
 81011e8:	4b68      	ldr	r3, [pc, #416]	@ (810138c <cmdlinego+0x1fc>)
 81011ea:	781b      	ldrb	r3, [r3, #0]
 81011ec:	2b3e      	cmp	r3, #62	@ 0x3e
 81011ee:	d911      	bls.n	8101214 <cmdlinego+0x84>
			{
				line_buf[line_pos] = '\0';
 81011f0:	4b66      	ldr	r3, [pc, #408]	@ (810138c <cmdlinego+0x1fc>)
 81011f2:	781b      	ldrb	r3, [r3, #0]
 81011f4:	461a      	mov	r2, r3
 81011f6:	4b66      	ldr	r3, [pc, #408]	@ (8101390 <cmdlinego+0x200>)
 81011f8:	2100      	movs	r1, #0
 81011fa:	5499      	strb	r1, [r3, r2]
				HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)line_buf, line_pos, HAL_MAX_DELAY);
 81011fc:	4b63      	ldr	r3, [pc, #396]	@ (810138c <cmdlinego+0x1fc>)
 81011fe:	781b      	ldrb	r3, [r3, #0]
 8101200:	461a      	mov	r2, r3
 8101202:	f04f 33ff 	mov.w	r3, #4294967295
 8101206:	4962      	ldr	r1, [pc, #392]	@ (8101390 <cmdlinego+0x200>)
 8101208:	4862      	ldr	r0, [pc, #392]	@ (8101394 <cmdlinego+0x204>)
 810120a:	f007 ff73 	bl	81090f4 <HAL_UART_Transmit>
				line_pos = 0;
 810120e:	4b5f      	ldr	r3, [pc, #380]	@ (810138c <cmdlinego+0x1fc>)
 8101210:	2200      	movs	r2, #0
 8101212:	701a      	strb	r2, [r3, #0]
			}
		}

        // === HC-05 Bluetooth parsing ===
        if (hc05_rx_read_idx != hc05_rx_write_idx)
 8101214:	4b60      	ldr	r3, [pc, #384]	@ (8101398 <cmdlinego+0x208>)
 8101216:	881b      	ldrh	r3, [r3, #0]
 8101218:	b29a      	uxth	r2, r3
 810121a:	4b60      	ldr	r3, [pc, #384]	@ (810139c <cmdlinego+0x20c>)
 810121c:	881b      	ldrh	r3, [r3, #0]
 810121e:	b29b      	uxth	r3, r3
 8101220:	429a      	cmp	r2, r3
 8101222:	f000 80a8 	beq.w	8101376 <cmdlinego+0x1e6>
        {

            char c = hc05_rx_buffer[hc05_rx_read_idx++];
 8101226:	4b5c      	ldr	r3, [pc, #368]	@ (8101398 <cmdlinego+0x208>)
 8101228:	881b      	ldrh	r3, [r3, #0]
 810122a:	b29b      	uxth	r3, r3
 810122c:	1c5a      	adds	r2, r3, #1
 810122e:	b291      	uxth	r1, r2
 8101230:	4a59      	ldr	r2, [pc, #356]	@ (8101398 <cmdlinego+0x208>)
 8101232:	8011      	strh	r1, [r2, #0]
 8101234:	461a      	mov	r2, r3
 8101236:	4b5a      	ldr	r3, [pc, #360]	@ (81013a0 <cmdlinego+0x210>)
 8101238:	5c9b      	ldrb	r3, [r3, r2]
 810123a:	73bb      	strb	r3, [r7, #14]
            if (hc05_rx_read_idx >= HC05_BUF_SIZE)
 810123c:	4b56      	ldr	r3, [pc, #344]	@ (8101398 <cmdlinego+0x208>)
 810123e:	881b      	ldrh	r3, [r3, #0]
 8101240:	b29b      	uxth	r3, r3
 8101242:	2bff      	cmp	r3, #255	@ 0xff
 8101244:	d902      	bls.n	810124c <cmdlinego+0xbc>
                hc05_rx_read_idx = 0;
 8101246:	4b54      	ldr	r3, [pc, #336]	@ (8101398 <cmdlinego+0x208>)
 8101248:	2200      	movs	r2, #0
 810124a:	801a      	strh	r2, [r3, #0]

            if (hc05_line_pos < sizeof(hc05_line_buf) - 1)
 810124c:	4b55      	ldr	r3, [pc, #340]	@ (81013a4 <cmdlinego+0x214>)
 810124e:	781b      	ldrb	r3, [r3, #0]
 8101250:	2b3e      	cmp	r3, #62	@ 0x3e
 8101252:	d809      	bhi.n	8101268 <cmdlinego+0xd8>
                hc05_line_buf[hc05_line_pos++] = c;
 8101254:	4b53      	ldr	r3, [pc, #332]	@ (81013a4 <cmdlinego+0x214>)
 8101256:	781b      	ldrb	r3, [r3, #0]
 8101258:	1c5a      	adds	r2, r3, #1
 810125a:	b2d1      	uxtb	r1, r2
 810125c:	4a51      	ldr	r2, [pc, #324]	@ (81013a4 <cmdlinego+0x214>)
 810125e:	7011      	strb	r1, [r2, #0]
 8101260:	4619      	mov	r1, r3
 8101262:	4a51      	ldr	r2, [pc, #324]	@ (81013a8 <cmdlinego+0x218>)
 8101264:	7bbb      	ldrb	r3, [r7, #14]
 8101266:	5453      	strb	r3, [r2, r1]

            if (c == '\n' || hc05_line_pos >= sizeof(hc05_line_buf) - 1)
 8101268:	7bbb      	ldrb	r3, [r7, #14]
 810126a:	2b0a      	cmp	r3, #10
 810126c:	d003      	beq.n	8101276 <cmdlinego+0xe6>
 810126e:	4b4d      	ldr	r3, [pc, #308]	@ (81013a4 <cmdlinego+0x214>)
 8101270:	781b      	ldrb	r3, [r3, #0]
 8101272:	2b3e      	cmp	r3, #62	@ 0x3e
 8101274:	d97f      	bls.n	8101376 <cmdlinego+0x1e6>
            {
                hc05_line_buf[hc05_line_pos] = '\0';
 8101276:	4b4b      	ldr	r3, [pc, #300]	@ (81013a4 <cmdlinego+0x214>)
 8101278:	781b      	ldrb	r3, [r3, #0]
 810127a:	461a      	mov	r2, r3
 810127c:	4b4a      	ldr	r3, [pc, #296]	@ (81013a8 <cmdlinego+0x218>)
 810127e:	2100      	movs	r1, #0
 8101280:	5499      	strb	r1, [r3, r2]

                if (strncmp(hc05_line_buf, "an0:", 4) == 0)
 8101282:	2204      	movs	r2, #4
 8101284:	4949      	ldr	r1, [pc, #292]	@ (81013ac <cmdlinego+0x21c>)
 8101286:	4848      	ldr	r0, [pc, #288]	@ (81013a8 <cmdlinego+0x218>)
 8101288:	f00f f89c 	bl	81103c4 <strncmp>
 810128c:	4603      	mov	r3, r0
 810128e:	2b00      	cmp	r3, #0
 8101290:	d112      	bne.n	81012b8 <cmdlinego+0x128>
                    anchordistance[0] = (uint16_t)(strtof(&hc05_line_buf[4], NULL) * 1000);
 8101292:	2100      	movs	r1, #0
 8101294:	4846      	ldr	r0, [pc, #280]	@ (81013b0 <cmdlinego+0x220>)
 8101296:	f00d ff99 	bl	810f1cc <strtof>
 810129a:	eef0 7a40 	vmov.f32	s15, s0
 810129e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 81013b4 <cmdlinego+0x224>
 81012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 81012a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81012aa:	ee17 3a90 	vmov	r3, s15
 81012ae:	b29b      	uxth	r3, r3
 81012b0:	461a      	mov	r2, r3
 81012b2:	4b41      	ldr	r3, [pc, #260]	@ (81013b8 <cmdlinego+0x228>)
 81012b4:	601a      	str	r2, [r3, #0]
 81012b6:	e050      	b.n	810135a <cmdlinego+0x1ca>
                else if (strncmp(hc05_line_buf, "an2:", 4) == 0)
 81012b8:	2204      	movs	r2, #4
 81012ba:	4940      	ldr	r1, [pc, #256]	@ (81013bc <cmdlinego+0x22c>)
 81012bc:	483a      	ldr	r0, [pc, #232]	@ (81013a8 <cmdlinego+0x218>)
 81012be:	f00f f881 	bl	81103c4 <strncmp>
 81012c2:	4603      	mov	r3, r0
 81012c4:	2b00      	cmp	r3, #0
 81012c6:	d112      	bne.n	81012ee <cmdlinego+0x15e>
                    anchordistance[1] = (uint16_t)(strtof(&hc05_line_buf[4], NULL) * 1000);
 81012c8:	2100      	movs	r1, #0
 81012ca:	4839      	ldr	r0, [pc, #228]	@ (81013b0 <cmdlinego+0x220>)
 81012cc:	f00d ff7e 	bl	810f1cc <strtof>
 81012d0:	eef0 7a40 	vmov.f32	s15, s0
 81012d4:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 81013b4 <cmdlinego+0x224>
 81012d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 81012dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81012e0:	ee17 3a90 	vmov	r3, s15
 81012e4:	b29b      	uxth	r3, r3
 81012e6:	461a      	mov	r2, r3
 81012e8:	4b33      	ldr	r3, [pc, #204]	@ (81013b8 <cmdlinego+0x228>)
 81012ea:	605a      	str	r2, [r3, #4]
 81012ec:	e035      	b.n	810135a <cmdlinego+0x1ca>
                else if (strncmp(hc05_line_buf, "an3:", 4) == 0)
 81012ee:	2204      	movs	r2, #4
 81012f0:	4933      	ldr	r1, [pc, #204]	@ (81013c0 <cmdlinego+0x230>)
 81012f2:	482d      	ldr	r0, [pc, #180]	@ (81013a8 <cmdlinego+0x218>)
 81012f4:	f00f f866 	bl	81103c4 <strncmp>
 81012f8:	4603      	mov	r3, r0
 81012fa:	2b00      	cmp	r3, #0
 81012fc:	d12d      	bne.n	810135a <cmdlinego+0x1ca>
                {
                    anchordistance[2] = (uint16_t)(strtof(&hc05_line_buf[4], NULL) * 1000);
 81012fe:	2100      	movs	r1, #0
 8101300:	482b      	ldr	r0, [pc, #172]	@ (81013b0 <cmdlinego+0x220>)
 8101302:	f00d ff63 	bl	810f1cc <strtof>
 8101306:	eef0 7a40 	vmov.f32	s15, s0
 810130a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 81013b4 <cmdlinego+0x224>
 810130e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101316:	ee17 3a90 	vmov	r3, s15
 810131a:	b29b      	uxth	r3, r3
 810131c:	461a      	mov	r2, r3
 810131e:	4b26      	ldr	r3, [pc, #152]	@ (81013b8 <cmdlinego+0x228>)
 8101320:	609a      	str	r2, [r3, #8]
					//if (now - last_anchor_print >= 500)
					{

						//last_anchor_print = now;
					//printf("an0=%d mm, an2=%d mm, an3=%d mm\n", anchordistance[0], anchordistance[1], anchordistance[2]);
					if(GetLocation(&tag_position, 0, &(AnchorList[0]), &(anchordistance[0])) != -1)
 8101322:	4b25      	ldr	r3, [pc, #148]	@ (81013b8 <cmdlinego+0x228>)
 8101324:	4a27      	ldr	r2, [pc, #156]	@ (81013c4 <cmdlinego+0x234>)
 8101326:	2100      	movs	r1, #0
 8101328:	4827      	ldr	r0, [pc, #156]	@ (81013c8 <cmdlinego+0x238>)
 810132a:	f004 f971 	bl	8105610 <GetLocation>
 810132e:	4603      	mov	r3, r0
 8101330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101334:	d011      	beq.n	810135a <cmdlinego+0x1ca>
					{
					printf("Tag Location:x=%3.2fm y=%3.2fm z=%3.2fm\r\n",tag_position.x,tag_position.y,tag_position.z);
 8101336:	4b24      	ldr	r3, [pc, #144]	@ (81013c8 <cmdlinego+0x238>)
 8101338:	e9d3 4500 	ldrd	r4, r5, [r3]
 810133c:	4b22      	ldr	r3, [pc, #136]	@ (81013c8 <cmdlinego+0x238>)
 810133e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8101342:	4921      	ldr	r1, [pc, #132]	@ (81013c8 <cmdlinego+0x238>)
 8101344:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8101348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810134c:	e9cd 2300 	strd	r2, r3, [sp]
 8101350:	4622      	mov	r2, r4
 8101352:	462b      	mov	r3, r5
 8101354:	481d      	ldr	r0, [pc, #116]	@ (81013cc <cmdlinego+0x23c>)
 8101356:	f00e fec3 	bl	81100e0 <iprintf>
					//sprintf(dist_str, "x:%3.2f y:%3.2f",tag_best_solution.x,tag_best_solution.y);
					}
					}
                }
                if (strncmp(hc05_line_buf, "an", 2) != 0)
 810135a:	2202      	movs	r2, #2
 810135c:	491c      	ldr	r1, [pc, #112]	@ (81013d0 <cmdlinego+0x240>)
 810135e:	4812      	ldr	r0, [pc, #72]	@ (81013a8 <cmdlinego+0x218>)
 8101360:	f00f f830 	bl	81103c4 <strncmp>
 8101364:	4603      	mov	r3, r0
 8101366:	2b00      	cmp	r3, #0
 8101368:	d002      	beq.n	8101370 <cmdlinego+0x1e0>
                	printf("%s\n",hc05_line_buf);
 810136a:	480f      	ldr	r0, [pc, #60]	@ (81013a8 <cmdlinego+0x218>)
 810136c:	f00e ff20 	bl	81101b0 <puts>

                hc05_line_pos = 0;
 8101370:	4b0c      	ldr	r3, [pc, #48]	@ (81013a4 <cmdlinego+0x214>)
 8101372:	2200      	movs	r2, #0
 8101374:	701a      	strb	r2, [r3, #0]
            }
        }

        osDelay(1);
 8101376:	2001      	movs	r0, #1
 8101378:	f00a fbc6 	bl	810bb08 <osDelay>
    	if (bu01_rx_read_idx != bu01_rx_write_idx)
 810137c:	e70c      	b.n	8101198 <cmdlinego+0x8>
 810137e:	bf00      	nop
 8101380:	10000352 	.word	0x10000352
 8101384:	10000350 	.word	0x10000350
 8101388:	10000250 	.word	0x10000250
 810138c:	10000394 	.word	0x10000394
 8101390:	10000354 	.word	0x10000354
 8101394:	100005c0 	.word	0x100005c0
 8101398:	100004a6 	.word	0x100004a6
 810139c:	100004a4 	.word	0x100004a4
 81013a0:	100003a4 	.word	0x100003a4
 81013a4:	100004e8 	.word	0x100004e8
 81013a8:	100004a8 	.word	0x100004a8
 81013ac:	08112ee8 	.word	0x08112ee8
 81013b0:	100004ac 	.word	0x100004ac
 81013b4:	447a0000 	.word	0x447a0000
 81013b8:	10000398 	.word	0x10000398
 81013bc:	08112ef0 	.word	0x08112ef0
 81013c0:	08112ef8 	.word	0x08112ef8
 81013c4:	10000008 	.word	0x10000008
 81013c8:	10000590 	.word	0x10000590
 81013cc:	08112f00 	.word	0x08112f00
 81013d0:	08112f2c 	.word	0x08112f2c

081013d4 <uartt_init>:

/* ---------------------------------------------------------------------- */
/* initialize UART interrupts for PC (UART2), BU-01 (UART1), HC-05(UART3)*/
/* ---------------------------------------------------------------------- */
void uartt_init(void)
{
 81013d4:	b580      	push	{r7, lr}
 81013d6:	af00      	add	r7, sp, #0
    //HAL_UART_Receive_IT(&huart1, &rx_from_bu01, 1);
    HAL_UART_Receive_IT(&huart2, &rx_from_hc05,   1);
 81013d8:	2201      	movs	r2, #1
 81013da:	4903      	ldr	r1, [pc, #12]	@ (81013e8 <uartt_init+0x14>)
 81013dc:	4803      	ldr	r0, [pc, #12]	@ (81013ec <uartt_init+0x18>)
 81013de:	f007 ff17 	bl	8109210 <HAL_UART_Receive_IT>
    //HAL_UART_Receive_IT(&huart3, &rx_from_hc05,  1);
}
 81013e2:	bf00      	nop
 81013e4:	bd80      	pop	{r7, pc}
 81013e6:	bf00      	nop
 81013e8:	1000024c 	.word	0x1000024c
 81013ec:	100004f0 	.word	0x100004f0

081013f0 <cmd_line_init>:

/* ---------------------------------------------------------------------- */
/* start the command-line thread                                          */
/* ---------------------------------------------------------------------- */
void cmd_line_init(void)
{
 81013f0:	b580      	push	{r7, lr}
 81013f2:	af00      	add	r7, sp, #0
    cmdlineID = osThreadNew(cmdlinego, NULL, &cmdline_att);
 81013f4:	4a04      	ldr	r2, [pc, #16]	@ (8101408 <cmd_line_init+0x18>)
 81013f6:	2100      	movs	r1, #0
 81013f8:	4804      	ldr	r0, [pc, #16]	@ (810140c <cmd_line_init+0x1c>)
 81013fa:	f00a faf3 	bl	810b9e4 <osThreadNew>
 81013fe:	4603      	mov	r3, r0
 8101400:	4a03      	ldr	r2, [pc, #12]	@ (8101410 <cmd_line_init+0x20>)
 8101402:	6013      	str	r3, [r2, #0]
}
 8101404:	bf00      	nop
 8101406:	bd80      	pop	{r7, pc}
 8101408:	08112f64 	.word	0x08112f64
 810140c:	08101191 	.word	0x08101191
 8101410:	100004ec 	.word	0x100004ec

08101414 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8101414:	b580      	push	{r7, lr}
 8101416:	b082      	sub	sp, #8
 8101418:	af00      	add	r7, sp, #0
 810141a:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 810141c:	687b      	ldr	r3, [r7, #4]
 810141e:	4a10      	ldr	r2, [pc, #64]	@ (8101460 <HAL_UART_RxCpltCallback+0x4c>)
 8101420:	4293      	cmp	r3, r2
 8101422:	d118      	bne.n	8101456 <HAL_UART_RxCpltCallback+0x42>
        // push into circular buffer
        hc05_rx_buffer[hc05_rx_write_idx++] = rx_from_hc05;
 8101424:	4b0f      	ldr	r3, [pc, #60]	@ (8101464 <HAL_UART_RxCpltCallback+0x50>)
 8101426:	881b      	ldrh	r3, [r3, #0]
 8101428:	b29b      	uxth	r3, r3
 810142a:	1c5a      	adds	r2, r3, #1
 810142c:	b291      	uxth	r1, r2
 810142e:	4a0d      	ldr	r2, [pc, #52]	@ (8101464 <HAL_UART_RxCpltCallback+0x50>)
 8101430:	8011      	strh	r1, [r2, #0]
 8101432:	461a      	mov	r2, r3
 8101434:	4b0c      	ldr	r3, [pc, #48]	@ (8101468 <HAL_UART_RxCpltCallback+0x54>)
 8101436:	7819      	ldrb	r1, [r3, #0]
 8101438:	4b0c      	ldr	r3, [pc, #48]	@ (810146c <HAL_UART_RxCpltCallback+0x58>)
 810143a:	5499      	strb	r1, [r3, r2]
        if (hc05_rx_write_idx >= HC05_BUF_SIZE) hc05_rx_write_idx = 0;
 810143c:	4b09      	ldr	r3, [pc, #36]	@ (8101464 <HAL_UART_RxCpltCallback+0x50>)
 810143e:	881b      	ldrh	r3, [r3, #0]
 8101440:	b29b      	uxth	r3, r3
 8101442:	2bff      	cmp	r3, #255	@ 0xff
 8101444:	d902      	bls.n	810144c <HAL_UART_RxCpltCallback+0x38>
 8101446:	4b07      	ldr	r3, [pc, #28]	@ (8101464 <HAL_UART_RxCpltCallback+0x50>)
 8101448:	2200      	movs	r2, #0
 810144a:	801a      	strh	r2, [r3, #0]
        // re‑arm for next byte
        HAL_UART_Receive_IT(&huart2, &rx_from_hc05, 1);
 810144c:	2201      	movs	r2, #1
 810144e:	4906      	ldr	r1, [pc, #24]	@ (8101468 <HAL_UART_RxCpltCallback+0x54>)
 8101450:	4803      	ldr	r0, [pc, #12]	@ (8101460 <HAL_UART_RxCpltCallback+0x4c>)
 8101452:	f007 fedd 	bl	8109210 <HAL_UART_Receive_IT>
    }
}
 8101456:	bf00      	nop
 8101458:	3708      	adds	r7, #8
 810145a:	46bd      	mov	sp, r7
 810145c:	bd80      	pop	{r7, pc}
 810145e:	bf00      	nop
 8101460:	100004f0 	.word	0x100004f0
 8101464:	100004a4 	.word	0x100004a4
 8101468:	1000024c 	.word	0x1000024c
 810146c:	100003a4 	.word	0x100003a4

08101470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101470:	b580      	push	{r7, lr}
 8101472:	b082      	sub	sp, #8
 8101474:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101476:	4b28      	ldr	r3, [pc, #160]	@ (8101518 <main+0xa8>)
 8101478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810147c:	4a26      	ldr	r2, [pc, #152]	@ (8101518 <main+0xa8>)
 810147e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101482:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101486:	4b24      	ldr	r3, [pc, #144]	@ (8101518 <main+0xa8>)
 8101488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810148c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101490:	607b      	str	r3, [r7, #4]
 8101492:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101494:	2001      	movs	r0, #1
 8101496:	f005 fd3f 	bl	8106f18 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810149a:	f005 fdc9 	bl	8107030 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810149e:	2201      	movs	r2, #1
 81014a0:	2102      	movs	r1, #2
 81014a2:	2000      	movs	r0, #0
 81014a4:	f005 fd4a 	bl	8106f3c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81014a8:	4b1c      	ldr	r3, [pc, #112]	@ (810151c <main+0xac>)
 81014aa:	681b      	ldr	r3, [r3, #0]
 81014ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81014b0:	2b70      	cmp	r3, #112	@ 0x70
 81014b2:	d108      	bne.n	81014c6 <main+0x56>
 81014b4:	4b1a      	ldr	r3, [pc, #104]	@ (8101520 <main+0xb0>)
 81014b6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81014ba:	4a19      	ldr	r2, [pc, #100]	@ (8101520 <main+0xb0>)
 81014bc:	f043 0301 	orr.w	r3, r3, #1
 81014c0:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81014c4:	e007      	b.n	81014d6 <main+0x66>
 81014c6:	4b16      	ldr	r3, [pc, #88]	@ (8101520 <main+0xb0>)
 81014c8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81014cc:	4a14      	ldr	r2, [pc, #80]	@ (8101520 <main+0xb0>)
 81014ce:	f043 0301 	orr.w	r3, r3, #1
 81014d2:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81014d6:	f004 fc1b 	bl	8105d10 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 10, 0);
 81014da:	2200      	movs	r2, #0
 81014dc:	210a      	movs	r1, #10
 81014de:	207e      	movs	r0, #126	@ 0x7e
 81014e0:	f004 fda5 	bl	810602e <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 81014e4:	207e      	movs	r0, #126	@ 0x7e
 81014e6:	f004 fdbc 	bl	8106062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81014ea:	f000 f86d 	bl	81015c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 81014ee:	f000 f81f 	bl	8101530 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  cmd_line_init();
 81014f2:	f7ff ff7d 	bl	81013f0 <cmd_line_init>
  uartt_init();
 81014f6:	f7ff ff6d 	bl	81013d4 <uartt_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 81014fa:	f00a fa29 	bl	810b950 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 81014fe:	4a09      	ldr	r2, [pc, #36]	@ (8101524 <main+0xb4>)
 8101500:	2100      	movs	r1, #0
 8101502:	4809      	ldr	r0, [pc, #36]	@ (8101528 <main+0xb8>)
 8101504:	f00a fa6e 	bl	810b9e4 <osThreadNew>
 8101508:	4603      	mov	r3, r0
 810150a:	4a08      	ldr	r2, [pc, #32]	@ (810152c <main+0xbc>)
 810150c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 810150e:	f00a fa43 	bl	810b998 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101512:	bf00      	nop
 8101514:	e7fd      	b.n	8101512 <main+0xa2>
 8101516:	bf00      	nop
 8101518:	58024400 	.word	0x58024400
 810151c:	e000ed00 	.word	0xe000ed00
 8101520:	58026400 	.word	0x58026400
 8101524:	08112f88 	.word	0x08112f88
 8101528:	08101629 	.word	0x08101629
 810152c:	10000584 	.word	0x10000584

08101530 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8101530:	b580      	push	{r7, lr}
 8101532:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8101534:	4b22      	ldr	r3, [pc, #136]	@ (81015c0 <MX_USART2_UART_Init+0x90>)
 8101536:	4a23      	ldr	r2, [pc, #140]	@ (81015c4 <MX_USART2_UART_Init+0x94>)
 8101538:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 810153a:	4b21      	ldr	r3, [pc, #132]	@ (81015c0 <MX_USART2_UART_Init+0x90>)
 810153c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8101540:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8101542:	4b1f      	ldr	r3, [pc, #124]	@ (81015c0 <MX_USART2_UART_Init+0x90>)
 8101544:	2200      	movs	r2, #0
 8101546:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8101548:	4b1d      	ldr	r3, [pc, #116]	@ (81015c0 <MX_USART2_UART_Init+0x90>)
 810154a:	2200      	movs	r2, #0
 810154c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 810154e:	4b1c      	ldr	r3, [pc, #112]	@ (81015c0 <MX_USART2_UART_Init+0x90>)
 8101550:	2200      	movs	r2, #0
 8101552:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8101554:	4b1a      	ldr	r3, [pc, #104]	@ (81015c0 <MX_USART2_UART_Init+0x90>)
 8101556:	220c      	movs	r2, #12
 8101558:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810155a:	4b19      	ldr	r3, [pc, #100]	@ (81015c0 <MX_USART2_UART_Init+0x90>)
 810155c:	2200      	movs	r2, #0
 810155e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8101560:	4b17      	ldr	r3, [pc, #92]	@ (81015c0 <MX_USART2_UART_Init+0x90>)
 8101562:	2200      	movs	r2, #0
 8101564:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101566:	4b16      	ldr	r3, [pc, #88]	@ (81015c0 <MX_USART2_UART_Init+0x90>)
 8101568:	2200      	movs	r2, #0
 810156a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810156c:	4b14      	ldr	r3, [pc, #80]	@ (81015c0 <MX_USART2_UART_Init+0x90>)
 810156e:	2200      	movs	r2, #0
 8101570:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101572:	4b13      	ldr	r3, [pc, #76]	@ (81015c0 <MX_USART2_UART_Init+0x90>)
 8101574:	2200      	movs	r2, #0
 8101576:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8101578:	4811      	ldr	r0, [pc, #68]	@ (81015c0 <MX_USART2_UART_Init+0x90>)
 810157a:	f007 fd6b 	bl	8109054 <HAL_UART_Init>
 810157e:	4603      	mov	r3, r0
 8101580:	2b00      	cmp	r3, #0
 8101582:	d001      	beq.n	8101588 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8101584:	f000 f85d 	bl	8101642 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101588:	2100      	movs	r1, #0
 810158a:	480d      	ldr	r0, [pc, #52]	@ (81015c0 <MX_USART2_UART_Init+0x90>)
 810158c:	f00a f8e1 	bl	810b752 <HAL_UARTEx_SetTxFifoThreshold>
 8101590:	4603      	mov	r3, r0
 8101592:	2b00      	cmp	r3, #0
 8101594:	d001      	beq.n	810159a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8101596:	f000 f854 	bl	8101642 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810159a:	2100      	movs	r1, #0
 810159c:	4808      	ldr	r0, [pc, #32]	@ (81015c0 <MX_USART2_UART_Init+0x90>)
 810159e:	f00a f916 	bl	810b7ce <HAL_UARTEx_SetRxFifoThreshold>
 81015a2:	4603      	mov	r3, r0
 81015a4:	2b00      	cmp	r3, #0
 81015a6:	d001      	beq.n	81015ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 81015a8:	f000 f84b 	bl	8101642 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 81015ac:	4804      	ldr	r0, [pc, #16]	@ (81015c0 <MX_USART2_UART_Init+0x90>)
 81015ae:	f00a f897 	bl	810b6e0 <HAL_UARTEx_DisableFifoMode>
 81015b2:	4603      	mov	r3, r0
 81015b4:	2b00      	cmp	r3, #0
 81015b6:	d001      	beq.n	81015bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 81015b8:	f000 f843 	bl	8101642 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 81015bc:	bf00      	nop
 81015be:	bd80      	pop	{r7, pc}
 81015c0:	100004f0 	.word	0x100004f0
 81015c4:	40004400 	.word	0x40004400

081015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81015c8:	b480      	push	{r7}
 81015ca:	b083      	sub	sp, #12
 81015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81015ce:	4b0a      	ldr	r3, [pc, #40]	@ (81015f8 <MX_GPIO_Init+0x30>)
 81015d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015d4:	4a08      	ldr	r2, [pc, #32]	@ (81015f8 <MX_GPIO_Init+0x30>)
 81015d6:	f043 0308 	orr.w	r3, r3, #8
 81015da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81015de:	4b06      	ldr	r3, [pc, #24]	@ (81015f8 <MX_GPIO_Init+0x30>)
 81015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015e4:	f003 0308 	and.w	r3, r3, #8
 81015e8:	607b      	str	r3, [r7, #4]
 81015ea:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 81015ec:	bf00      	nop
 81015ee:	370c      	adds	r7, #12
 81015f0:	46bd      	mov	sp, r7
 81015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015f6:	4770      	bx	lr
 81015f8:	58024400 	.word	0x58024400

081015fc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 81015fc:	b580      	push	{r7, lr}
 81015fe:	b084      	sub	sp, #16
 8101600:	af00      	add	r7, sp, #0
 8101602:	60f8      	str	r0, [r7, #12]
 8101604:	60b9      	str	r1, [r7, #8]
 8101606:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8101608:	687b      	ldr	r3, [r7, #4]
 810160a:	b29a      	uxth	r2, r3
 810160c:	f04f 33ff 	mov.w	r3, #4294967295
 8101610:	68b9      	ldr	r1, [r7, #8]
 8101612:	4804      	ldr	r0, [pc, #16]	@ (8101624 <_write+0x28>)
 8101614:	f007 fd6e 	bl	81090f4 <HAL_UART_Transmit>
    return len;
 8101618:	687b      	ldr	r3, [r7, #4]
}
 810161a:	4618      	mov	r0, r3
 810161c:	3710      	adds	r7, #16
 810161e:	46bd      	mov	sp, r7
 8101620:	bd80      	pop	{r7, pc}
 8101622:	bf00      	nop
 8101624:	100005c0 	.word	0x100005c0

08101628 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8101628:	b580      	push	{r7, lr}
 810162a:	b082      	sub	sp, #8
 810162c:	af00      	add	r7, sp, #0
 810162e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(333);
 8101630:	f240 104d 	movw	r0, #333	@ 0x14d
 8101634:	f00a fa68 	bl	810bb08 <osDelay>
	  BSP_LED_Toggle(LED_RED);
 8101638:	2002      	movs	r0, #2
 810163a:	f004 fb3f 	bl	8105cbc <BSP_LED_Toggle>
	  osDelay(333);
 810163e:	bf00      	nop
 8101640:	e7f6      	b.n	8101630 <StartDefaultTask+0x8>

08101642 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101642:	b480      	push	{r7}
 8101644:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101646:	b672      	cpsid	i
}
 8101648:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810164a:	bf00      	nop
 810164c:	e7fd      	b.n	810164a <Error_Handler+0x8>
	...

08101650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101650:	b580      	push	{r7, lr}
 8101652:	b082      	sub	sp, #8
 8101654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101656:	4b0c      	ldr	r3, [pc, #48]	@ (8101688 <HAL_MspInit+0x38>)
 8101658:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810165c:	4a0a      	ldr	r2, [pc, #40]	@ (8101688 <HAL_MspInit+0x38>)
 810165e:	f043 0302 	orr.w	r3, r3, #2
 8101662:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101666:	4b08      	ldr	r3, [pc, #32]	@ (8101688 <HAL_MspInit+0x38>)
 8101668:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810166c:	f003 0302 	and.w	r3, r3, #2
 8101670:	607b      	str	r3, [r7, #4]
 8101672:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101674:	2200      	movs	r2, #0
 8101676:	210f      	movs	r1, #15
 8101678:	f06f 0001 	mvn.w	r0, #1
 810167c:	f004 fcd7 	bl	810602e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101680:	bf00      	nop
 8101682:	3708      	adds	r7, #8
 8101684:	46bd      	mov	sp, r7
 8101686:	bd80      	pop	{r7, pc}
 8101688:	58024400 	.word	0x58024400

0810168c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 810168c:	b580      	push	{r7, lr}
 810168e:	b0ba      	sub	sp, #232	@ 0xe8
 8101690:	af00      	add	r7, sp, #0
 8101692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101694:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101698:	2200      	movs	r2, #0
 810169a:	601a      	str	r2, [r3, #0]
 810169c:	605a      	str	r2, [r3, #4]
 810169e:	609a      	str	r2, [r3, #8]
 81016a0:	60da      	str	r2, [r3, #12]
 81016a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81016a4:	f107 0310 	add.w	r3, r7, #16
 81016a8:	22c0      	movs	r2, #192	@ 0xc0
 81016aa:	2100      	movs	r1, #0
 81016ac:	4618      	mov	r0, r3
 81016ae:	f00e fe81 	bl	81103b4 <memset>
  if(huart->Instance==USART2)
 81016b2:	687b      	ldr	r3, [r7, #4]
 81016b4:	681b      	ldr	r3, [r3, #0]
 81016b6:	4a2a      	ldr	r2, [pc, #168]	@ (8101760 <HAL_UART_MspInit+0xd4>)
 81016b8:	4293      	cmp	r3, r2
 81016ba:	d14d      	bne.n	8101758 <HAL_UART_MspInit+0xcc>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 81016bc:	f04f 0202 	mov.w	r2, #2
 81016c0:	f04f 0300 	mov.w	r3, #0
 81016c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81016c8:	2300      	movs	r3, #0
 81016ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81016ce:	f107 0310 	add.w	r3, r7, #16
 81016d2:	4618      	mov	r0, r3
 81016d4:	f005 fe92 	bl	81073fc <HAL_RCCEx_PeriphCLKConfig>
 81016d8:	4603      	mov	r3, r0
 81016da:	2b00      	cmp	r3, #0
 81016dc:	d001      	beq.n	81016e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 81016de:	f7ff ffb0 	bl	8101642 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 81016e2:	4b20      	ldr	r3, [pc, #128]	@ (8101764 <HAL_UART_MspInit+0xd8>)
 81016e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81016e8:	4a1e      	ldr	r2, [pc, #120]	@ (8101764 <HAL_UART_MspInit+0xd8>)
 81016ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81016ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81016f2:	4b1c      	ldr	r3, [pc, #112]	@ (8101764 <HAL_UART_MspInit+0xd8>)
 81016f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81016f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81016fc:	60fb      	str	r3, [r7, #12]
 81016fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101700:	4b18      	ldr	r3, [pc, #96]	@ (8101764 <HAL_UART_MspInit+0xd8>)
 8101702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101706:	4a17      	ldr	r2, [pc, #92]	@ (8101764 <HAL_UART_MspInit+0xd8>)
 8101708:	f043 0308 	orr.w	r3, r3, #8
 810170c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101710:	4b14      	ldr	r3, [pc, #80]	@ (8101764 <HAL_UART_MspInit+0xd8>)
 8101712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101716:	f003 0308 	and.w	r3, r3, #8
 810171a:	60bb      	str	r3, [r7, #8]
 810171c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 810171e:	2360      	movs	r3, #96	@ 0x60
 8101720:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101724:	2302      	movs	r3, #2
 8101726:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810172a:	2300      	movs	r3, #0
 810172c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101730:	2300      	movs	r3, #0
 8101732:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8101736:	2307      	movs	r3, #7
 8101738:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810173c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101740:	4619      	mov	r1, r3
 8101742:	4809      	ldr	r0, [pc, #36]	@ (8101768 <HAL_UART_MspInit+0xdc>)
 8101744:	f005 fa1e 	bl	8106b84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8101748:	2200      	movs	r2, #0
 810174a:	2105      	movs	r1, #5
 810174c:	2026      	movs	r0, #38	@ 0x26
 810174e:	f004 fc6e 	bl	810602e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8101752:	2026      	movs	r0, #38	@ 0x26
 8101754:	f004 fc85 	bl	8106062 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8101758:	bf00      	nop
 810175a:	37e8      	adds	r7, #232	@ 0xe8
 810175c:	46bd      	mov	sp, r7
 810175e:	bd80      	pop	{r7, pc}
 8101760:	40004400 	.word	0x40004400
 8101764:	58024400 	.word	0x58024400
 8101768:	58020c00 	.word	0x58020c00

0810176c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810176c:	b480      	push	{r7}
 810176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8101770:	bf00      	nop
 8101772:	e7fd      	b.n	8101770 <NMI_Handler+0x4>

08101774 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101774:	b480      	push	{r7}
 8101776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101778:	bf00      	nop
 810177a:	e7fd      	b.n	8101778 <HardFault_Handler+0x4>

0810177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810177c:	b480      	push	{r7}
 810177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101780:	bf00      	nop
 8101782:	e7fd      	b.n	8101780 <MemManage_Handler+0x4>

08101784 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101784:	b480      	push	{r7}
 8101786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101788:	bf00      	nop
 810178a:	e7fd      	b.n	8101788 <BusFault_Handler+0x4>

0810178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810178c:	b480      	push	{r7}
 810178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101790:	bf00      	nop
 8101792:	e7fd      	b.n	8101790 <UsageFault_Handler+0x4>

08101794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101794:	b480      	push	{r7}
 8101796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101798:	bf00      	nop
 810179a:	46bd      	mov	sp, r7
 810179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017a0:	4770      	bx	lr

081017a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81017a2:	b580      	push	{r7, lr}
 81017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81017a6:	f004 fb47 	bl	8105e38 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 81017aa:	f00c fa13 	bl	810dbd4 <xTaskGetSchedulerState>
 81017ae:	4603      	mov	r3, r0
 81017b0:	2b01      	cmp	r3, #1
 81017b2:	d001      	beq.n	81017b8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 81017b4:	f00a fe58 	bl	810c468 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81017b8:	bf00      	nop
 81017ba:	bd80      	pop	{r7, pc}

081017bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 81017bc:	b580      	push	{r7, lr}
 81017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 81017c0:	4802      	ldr	r0, [pc, #8]	@ (81017cc <USART2_IRQHandler+0x10>)
 81017c2:	f007 fd71 	bl	81092a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 81017c6:	bf00      	nop
 81017c8:	bd80      	pop	{r7, pc}
 81017ca:	bf00      	nop
 81017cc:	100004f0 	.word	0x100004f0

081017d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81017d0:	b480      	push	{r7}
 81017d2:	af00      	add	r7, sp, #0
  return 1;
 81017d4:	2301      	movs	r3, #1
}
 81017d6:	4618      	mov	r0, r3
 81017d8:	46bd      	mov	sp, r7
 81017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017de:	4770      	bx	lr

081017e0 <_kill>:

int _kill(int pid, int sig)
{
 81017e0:	b580      	push	{r7, lr}
 81017e2:	b082      	sub	sp, #8
 81017e4:	af00      	add	r7, sp, #0
 81017e6:	6078      	str	r0, [r7, #4]
 81017e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 81017ea:	f00e fe57 	bl	811049c <__errno>
 81017ee:	4603      	mov	r3, r0
 81017f0:	2216      	movs	r2, #22
 81017f2:	601a      	str	r2, [r3, #0]
  return -1;
 81017f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 81017f8:	4618      	mov	r0, r3
 81017fa:	3708      	adds	r7, #8
 81017fc:	46bd      	mov	sp, r7
 81017fe:	bd80      	pop	{r7, pc}

08101800 <_exit>:

void _exit (int status)
{
 8101800:	b580      	push	{r7, lr}
 8101802:	b082      	sub	sp, #8
 8101804:	af00      	add	r7, sp, #0
 8101806:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8101808:	f04f 31ff 	mov.w	r1, #4294967295
 810180c:	6878      	ldr	r0, [r7, #4]
 810180e:	f7ff ffe7 	bl	81017e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8101812:	bf00      	nop
 8101814:	e7fd      	b.n	8101812 <_exit+0x12>

08101816 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101816:	b580      	push	{r7, lr}
 8101818:	b086      	sub	sp, #24
 810181a:	af00      	add	r7, sp, #0
 810181c:	60f8      	str	r0, [r7, #12]
 810181e:	60b9      	str	r1, [r7, #8]
 8101820:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101822:	2300      	movs	r3, #0
 8101824:	617b      	str	r3, [r7, #20]
 8101826:	e00a      	b.n	810183e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8101828:	f3af 8000 	nop.w
 810182c:	4601      	mov	r1, r0
 810182e:	68bb      	ldr	r3, [r7, #8]
 8101830:	1c5a      	adds	r2, r3, #1
 8101832:	60ba      	str	r2, [r7, #8]
 8101834:	b2ca      	uxtb	r2, r1
 8101836:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101838:	697b      	ldr	r3, [r7, #20]
 810183a:	3301      	adds	r3, #1
 810183c:	617b      	str	r3, [r7, #20]
 810183e:	697a      	ldr	r2, [r7, #20]
 8101840:	687b      	ldr	r3, [r7, #4]
 8101842:	429a      	cmp	r2, r3
 8101844:	dbf0      	blt.n	8101828 <_read+0x12>
  }

  return len;
 8101846:	687b      	ldr	r3, [r7, #4]
}
 8101848:	4618      	mov	r0, r3
 810184a:	3718      	adds	r7, #24
 810184c:	46bd      	mov	sp, r7
 810184e:	bd80      	pop	{r7, pc}

08101850 <_close>:
  }
  return len;
}

int _close(int file)
{
 8101850:	b480      	push	{r7}
 8101852:	b083      	sub	sp, #12
 8101854:	af00      	add	r7, sp, #0
 8101856:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8101858:	f04f 33ff 	mov.w	r3, #4294967295
}
 810185c:	4618      	mov	r0, r3
 810185e:	370c      	adds	r7, #12
 8101860:	46bd      	mov	sp, r7
 8101862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101866:	4770      	bx	lr

08101868 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101868:	b480      	push	{r7}
 810186a:	b083      	sub	sp, #12
 810186c:	af00      	add	r7, sp, #0
 810186e:	6078      	str	r0, [r7, #4]
 8101870:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8101872:	683b      	ldr	r3, [r7, #0]
 8101874:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101878:	605a      	str	r2, [r3, #4]
  return 0;
 810187a:	2300      	movs	r3, #0
}
 810187c:	4618      	mov	r0, r3
 810187e:	370c      	adds	r7, #12
 8101880:	46bd      	mov	sp, r7
 8101882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101886:	4770      	bx	lr

08101888 <_isatty>:

int _isatty(int file)
{
 8101888:	b480      	push	{r7}
 810188a:	b083      	sub	sp, #12
 810188c:	af00      	add	r7, sp, #0
 810188e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8101890:	2301      	movs	r3, #1
}
 8101892:	4618      	mov	r0, r3
 8101894:	370c      	adds	r7, #12
 8101896:	46bd      	mov	sp, r7
 8101898:	f85d 7b04 	ldr.w	r7, [sp], #4
 810189c:	4770      	bx	lr

0810189e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 810189e:	b480      	push	{r7}
 81018a0:	b085      	sub	sp, #20
 81018a2:	af00      	add	r7, sp, #0
 81018a4:	60f8      	str	r0, [r7, #12]
 81018a6:	60b9      	str	r1, [r7, #8]
 81018a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 81018aa:	2300      	movs	r3, #0
}
 81018ac:	4618      	mov	r0, r3
 81018ae:	3714      	adds	r7, #20
 81018b0:	46bd      	mov	sp, r7
 81018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018b6:	4770      	bx	lr

081018b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81018b8:	b580      	push	{r7, lr}
 81018ba:	b086      	sub	sp, #24
 81018bc:	af00      	add	r7, sp, #0
 81018be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81018c0:	4a14      	ldr	r2, [pc, #80]	@ (8101914 <_sbrk+0x5c>)
 81018c2:	4b15      	ldr	r3, [pc, #84]	@ (8101918 <_sbrk+0x60>)
 81018c4:	1ad3      	subs	r3, r2, r3
 81018c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81018c8:	697b      	ldr	r3, [r7, #20]
 81018ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81018cc:	4b13      	ldr	r3, [pc, #76]	@ (810191c <_sbrk+0x64>)
 81018ce:	681b      	ldr	r3, [r3, #0]
 81018d0:	2b00      	cmp	r3, #0
 81018d2:	d102      	bne.n	81018da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81018d4:	4b11      	ldr	r3, [pc, #68]	@ (810191c <_sbrk+0x64>)
 81018d6:	4a12      	ldr	r2, [pc, #72]	@ (8101920 <_sbrk+0x68>)
 81018d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81018da:	4b10      	ldr	r3, [pc, #64]	@ (810191c <_sbrk+0x64>)
 81018dc:	681a      	ldr	r2, [r3, #0]
 81018de:	687b      	ldr	r3, [r7, #4]
 81018e0:	4413      	add	r3, r2
 81018e2:	693a      	ldr	r2, [r7, #16]
 81018e4:	429a      	cmp	r2, r3
 81018e6:	d207      	bcs.n	81018f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81018e8:	f00e fdd8 	bl	811049c <__errno>
 81018ec:	4603      	mov	r3, r0
 81018ee:	220c      	movs	r2, #12
 81018f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81018f2:	f04f 33ff 	mov.w	r3, #4294967295
 81018f6:	e009      	b.n	810190c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81018f8:	4b08      	ldr	r3, [pc, #32]	@ (810191c <_sbrk+0x64>)
 81018fa:	681b      	ldr	r3, [r3, #0]
 81018fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81018fe:	4b07      	ldr	r3, [pc, #28]	@ (810191c <_sbrk+0x64>)
 8101900:	681a      	ldr	r2, [r3, #0]
 8101902:	687b      	ldr	r3, [r7, #4]
 8101904:	4413      	add	r3, r2
 8101906:	4a05      	ldr	r2, [pc, #20]	@ (810191c <_sbrk+0x64>)
 8101908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810190a:	68fb      	ldr	r3, [r7, #12]
}
 810190c:	4618      	mov	r0, r3
 810190e:	3718      	adds	r7, #24
 8101910:	46bd      	mov	sp, r7
 8101912:	bd80      	pop	{r7, pc}
 8101914:	10048000 	.word	0x10048000
 8101918:	00000400 	.word	0x00000400
 810191c:	10000588 	.word	0x10000588
 8101920:	100050f0 	.word	0x100050f0

08101924 <vdiff>:
#define     ERR_TRIL_NEEDMORESPHERE                 -5


/* Return the difference of two vectors, (vector1 - vector2). */
vec3d vdiff(const vec3d vector1, const vec3d vector2)
{
 8101924:	b5b0      	push	{r4, r5, r7, lr}
 8101926:	b09e      	sub	sp, #120	@ 0x78
 8101928:	af00      	add	r7, sp, #0
 810192a:	eeb0 6a44 	vmov.f32	s12, s8
 810192e:	eef0 6a64 	vmov.f32	s13, s9
 8101932:	eeb0 7a45 	vmov.f32	s14, s10
 8101936:	eef0 7a65 	vmov.f32	s15, s11
 810193a:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 810193e:	ed87 1b0e 	vstr	d1, [r7, #56]	@ 0x38
 8101942:	ed87 2b10 	vstr	d2, [r7, #64]	@ 0x40
 8101946:	ed87 3b06 	vstr	d3, [r7, #24]
 810194a:	ed87 6b08 	vstr	d6, [r7, #32]
 810194e:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    vec3d v;
    v.x = vector1.x - vector2.x;
 8101952:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8101956:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 810195a:	f7fe fd1d 	bl	8100398 <__aeabi_dsub>
 810195e:	4602      	mov	r2, r0
 8101960:	460b      	mov	r3, r1
 8101962:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    v.y = vector1.y - vector2.y;
 8101966:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 810196a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 810196e:	f7fe fd13 	bl	8100398 <__aeabi_dsub>
 8101972:	4602      	mov	r2, r0
 8101974:	460b      	mov	r3, r1
 8101976:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    v.z = vector1.z - vector2.z;
 810197a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 810197e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8101982:	f7fe fd09 	bl	8100398 <__aeabi_dsub>
 8101986:	4602      	mov	r2, r0
 8101988:	460b      	mov	r3, r1
 810198a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    return v;
 810198e:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8101992:	f107 0548 	add.w	r5, r7, #72	@ 0x48
 8101996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810199a:	e895 0003 	ldmia.w	r5, {r0, r1}
 810199e:	e884 0003 	stmia.w	r4, {r0, r1}
 81019a2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 81019a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 81019aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81019ae:	ec45 4b15 	vmov	d5, r4, r5
 81019b2:	ec41 0b16 	vmov	d6, r0, r1
 81019b6:	ec43 2b17 	vmov	d7, r2, r3
}
 81019ba:	eeb0 0a45 	vmov.f32	s0, s10
 81019be:	eef0 0a65 	vmov.f32	s1, s11
 81019c2:	eeb0 1a46 	vmov.f32	s2, s12
 81019c6:	eef0 1a66 	vmov.f32	s3, s13
 81019ca:	eeb0 2a47 	vmov.f32	s4, s14
 81019ce:	eef0 2a67 	vmov.f32	s5, s15
 81019d2:	3778      	adds	r7, #120	@ 0x78
 81019d4:	46bd      	mov	sp, r7
 81019d6:	bdb0      	pop	{r4, r5, r7, pc}

081019d8 <vsum>:

/* Return the sum of two vectors. */
vec3d vsum(const vec3d vector1, const vec3d vector2)
{
 81019d8:	b5b0      	push	{r4, r5, r7, lr}
 81019da:	b09e      	sub	sp, #120	@ 0x78
 81019dc:	af00      	add	r7, sp, #0
 81019de:	eeb0 6a44 	vmov.f32	s12, s8
 81019e2:	eef0 6a64 	vmov.f32	s13, s9
 81019e6:	eeb0 7a45 	vmov.f32	s14, s10
 81019ea:	eef0 7a65 	vmov.f32	s15, s11
 81019ee:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 81019f2:	ed87 1b0e 	vstr	d1, [r7, #56]	@ 0x38
 81019f6:	ed87 2b10 	vstr	d2, [r7, #64]	@ 0x40
 81019fa:	ed87 3b06 	vstr	d3, [r7, #24]
 81019fe:	ed87 6b08 	vstr	d6, [r7, #32]
 8101a02:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    vec3d v;
    v.x = vector1.x + vector2.x;
 8101a06:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8101a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101a0e:	f7fe fcc5 	bl	810039c <__adddf3>
 8101a12:	4602      	mov	r2, r0
 8101a14:	460b      	mov	r3, r1
 8101a16:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    v.y = vector1.y + vector2.y;
 8101a1a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8101a1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8101a22:	f7fe fcbb 	bl	810039c <__adddf3>
 8101a26:	4602      	mov	r2, r0
 8101a28:	460b      	mov	r3, r1
 8101a2a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    v.z = vector1.z + vector2.z;
 8101a2e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8101a32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8101a36:	f7fe fcb1 	bl	810039c <__adddf3>
 8101a3a:	4602      	mov	r2, r0
 8101a3c:	460b      	mov	r3, r1
 8101a3e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    return v;
 8101a42:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8101a46:	f107 0548 	add.w	r5, r7, #72	@ 0x48
 8101a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101a4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8101a52:	e884 0003 	stmia.w	r4, {r0, r1}
 8101a56:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8101a5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8101a5e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101a62:	ec45 4b15 	vmov	d5, r4, r5
 8101a66:	ec41 0b16 	vmov	d6, r0, r1
 8101a6a:	ec43 2b17 	vmov	d7, r2, r3
}
 8101a6e:	eeb0 0a45 	vmov.f32	s0, s10
 8101a72:	eef0 0a65 	vmov.f32	s1, s11
 8101a76:	eeb0 1a46 	vmov.f32	s2, s12
 8101a7a:	eef0 1a66 	vmov.f32	s3, s13
 8101a7e:	eeb0 2a47 	vmov.f32	s4, s14
 8101a82:	eef0 2a67 	vmov.f32	s5, s15
 8101a86:	3778      	adds	r7, #120	@ 0x78
 8101a88:	46bd      	mov	sp, r7
 8101a8a:	bdb0      	pop	{r4, r5, r7, pc}

08101a8c <vmul>:

/* Multiply vector by a number. */
vec3d vmul(const vec3d vector, const double n)
{
 8101a8c:	b5b0      	push	{r4, r5, r7, lr}
 8101a8e:	b09a      	sub	sp, #104	@ 0x68
 8101a90:	af00      	add	r7, sp, #0
 8101a92:	eeb0 5a40 	vmov.f32	s10, s0
 8101a96:	eef0 5a60 	vmov.f32	s11, s1
 8101a9a:	eeb0 6a41 	vmov.f32	s12, s2
 8101a9e:	eef0 6a61 	vmov.f32	s13, s3
 8101aa2:	eeb0 7a42 	vmov.f32	s14, s4
 8101aa6:	eef0 7a62 	vmov.f32	s15, s5
 8101aaa:	ed87 3b06 	vstr	d3, [r7, #24]
 8101aae:	ed87 5b08 	vstr	d5, [r7, #32]
 8101ab2:	ed87 6b0a 	vstr	d6, [r7, #40]	@ 0x28
 8101ab6:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    vec3d v;
    v.x = vector.x * n;
 8101aba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8101abe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101ac2:	f7fe fe21 	bl	8100708 <__aeabi_dmul>
 8101ac6:	4602      	mov	r2, r0
 8101ac8:	460b      	mov	r3, r1
 8101aca:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    v.y = vector.y * n;
 8101ace:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8101ad2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101ad6:	f7fe fe17 	bl	8100708 <__aeabi_dmul>
 8101ada:	4602      	mov	r2, r0
 8101adc:	460b      	mov	r3, r1
 8101ade:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    v.z = vector.z * n;
 8101ae2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8101ae6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101aea:	f7fe fe0d 	bl	8100708 <__aeabi_dmul>
 8101aee:	4602      	mov	r2, r0
 8101af0:	460b      	mov	r3, r1
 8101af2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    return v;
 8101af6:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8101afa:	f107 0538 	add.w	r5, r7, #56	@ 0x38
 8101afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101b02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8101b06:	e884 0003 	stmia.w	r4, {r0, r1}
 8101b0a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8101b0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8101b12:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8101b16:	ec45 4b15 	vmov	d5, r4, r5
 8101b1a:	ec41 0b16 	vmov	d6, r0, r1
 8101b1e:	ec43 2b17 	vmov	d7, r2, r3
}
 8101b22:	eeb0 0a45 	vmov.f32	s0, s10
 8101b26:	eef0 0a65 	vmov.f32	s1, s11
 8101b2a:	eeb0 1a46 	vmov.f32	s2, s12
 8101b2e:	eef0 1a66 	vmov.f32	s3, s13
 8101b32:	eeb0 2a47 	vmov.f32	s4, s14
 8101b36:	eef0 2a67 	vmov.f32	s5, s15
 8101b3a:	3768      	adds	r7, #104	@ 0x68
 8101b3c:	46bd      	mov	sp, r7
 8101b3e:	bdb0      	pop	{r4, r5, r7, pc}

08101b40 <vdiv>:

/* Divide vector by a number. */
vec3d vdiv(const vec3d vector, const double n)
{
 8101b40:	b5b0      	push	{r4, r5, r7, lr}
 8101b42:	b09a      	sub	sp, #104	@ 0x68
 8101b44:	af00      	add	r7, sp, #0
 8101b46:	eeb0 5a40 	vmov.f32	s10, s0
 8101b4a:	eef0 5a60 	vmov.f32	s11, s1
 8101b4e:	eeb0 6a41 	vmov.f32	s12, s2
 8101b52:	eef0 6a61 	vmov.f32	s13, s3
 8101b56:	eeb0 7a42 	vmov.f32	s14, s4
 8101b5a:	eef0 7a62 	vmov.f32	s15, s5
 8101b5e:	ed87 3b06 	vstr	d3, [r7, #24]
 8101b62:	ed87 5b08 	vstr	d5, [r7, #32]
 8101b66:	ed87 6b0a 	vstr	d6, [r7, #40]	@ 0x28
 8101b6a:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    vec3d v;
    v.x = vector.x / n;
 8101b6e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8101b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101b76:	f7fe fef1 	bl	810095c <__aeabi_ddiv>
 8101b7a:	4602      	mov	r2, r0
 8101b7c:	460b      	mov	r3, r1
 8101b7e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    v.y = vector.y / n;
 8101b82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8101b86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101b8a:	f7fe fee7 	bl	810095c <__aeabi_ddiv>
 8101b8e:	4602      	mov	r2, r0
 8101b90:	460b      	mov	r3, r1
 8101b92:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    v.z = vector.z / n;
 8101b96:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8101b9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101b9e:	f7fe fedd 	bl	810095c <__aeabi_ddiv>
 8101ba2:	4602      	mov	r2, r0
 8101ba4:	460b      	mov	r3, r1
 8101ba6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    return v;
 8101baa:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8101bae:	f107 0538 	add.w	r5, r7, #56	@ 0x38
 8101bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101bb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8101bba:	e884 0003 	stmia.w	r4, {r0, r1}
 8101bbe:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8101bc2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8101bc6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8101bca:	ec45 4b15 	vmov	d5, r4, r5
 8101bce:	ec41 0b16 	vmov	d6, r0, r1
 8101bd2:	ec43 2b17 	vmov	d7, r2, r3
}
 8101bd6:	eeb0 0a45 	vmov.f32	s0, s10
 8101bda:	eef0 0a65 	vmov.f32	s1, s11
 8101bde:	eeb0 1a46 	vmov.f32	s2, s12
 8101be2:	eef0 1a66 	vmov.f32	s3, s13
 8101be6:	eeb0 2a47 	vmov.f32	s4, s14
 8101bea:	eef0 2a67 	vmov.f32	s5, s15
 8101bee:	3768      	adds	r7, #104	@ 0x68
 8101bf0:	46bd      	mov	sp, r7
 8101bf2:	bdb0      	pop	{r4, r5, r7, pc}

08101bf4 <vnorm>:
    return sqrt(xd * xd + yd * yd + zd * zd);
}

/* Return the Euclidean norm. */
double vnorm(const vec3d vector)
{
 8101bf4:	b5b0      	push	{r4, r5, r7, lr}
 8101bf6:	b086      	sub	sp, #24
 8101bf8:	af00      	add	r7, sp, #0
 8101bfa:	eeb0 5a40 	vmov.f32	s10, s0
 8101bfe:	eef0 5a60 	vmov.f32	s11, s1
 8101c02:	eeb0 6a41 	vmov.f32	s12, s2
 8101c06:	eef0 6a61 	vmov.f32	s13, s3
 8101c0a:	eeb0 7a42 	vmov.f32	s14, s4
 8101c0e:	eef0 7a62 	vmov.f32	s15, s5
 8101c12:	ed87 5b00 	vstr	d5, [r7]
 8101c16:	ed87 6b02 	vstr	d6, [r7, #8]
 8101c1a:	ed87 7b04 	vstr	d7, [r7, #16]
    return sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
 8101c1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8101c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8101c26:	f7fe fd6f 	bl	8100708 <__aeabi_dmul>
 8101c2a:	4602      	mov	r2, r0
 8101c2c:	460b      	mov	r3, r1
 8101c2e:	4614      	mov	r4, r2
 8101c30:	461d      	mov	r5, r3
 8101c32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8101c36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8101c3a:	f7fe fd65 	bl	8100708 <__aeabi_dmul>
 8101c3e:	4602      	mov	r2, r0
 8101c40:	460b      	mov	r3, r1
 8101c42:	4620      	mov	r0, r4
 8101c44:	4629      	mov	r1, r5
 8101c46:	f7fe fba9 	bl	810039c <__adddf3>
 8101c4a:	4602      	mov	r2, r0
 8101c4c:	460b      	mov	r3, r1
 8101c4e:	4614      	mov	r4, r2
 8101c50:	461d      	mov	r5, r3
 8101c52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8101c56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8101c5a:	f7fe fd55 	bl	8100708 <__aeabi_dmul>
 8101c5e:	4602      	mov	r2, r0
 8101c60:	460b      	mov	r3, r1
 8101c62:	4620      	mov	r0, r4
 8101c64:	4629      	mov	r1, r5
 8101c66:	f7fe fb99 	bl	810039c <__adddf3>
 8101c6a:	4602      	mov	r2, r0
 8101c6c:	460b      	mov	r3, r1
 8101c6e:	ec43 2b17 	vmov	d7, r2, r3
 8101c72:	eeb0 0a47 	vmov.f32	s0, s14
 8101c76:	eef0 0a67 	vmov.f32	s1, s15
 8101c7a:	f011 f823 	bl	8112cc4 <sqrt>
 8101c7e:	eeb0 7a40 	vmov.f32	s14, s0
 8101c82:	eef0 7a60 	vmov.f32	s15, s1
}
 8101c86:	eeb0 0a47 	vmov.f32	s0, s14
 8101c8a:	eef0 0a67 	vmov.f32	s1, s15
 8101c8e:	3718      	adds	r7, #24
 8101c90:	46bd      	mov	sp, r7
 8101c92:	bdb0      	pop	{r4, r5, r7, pc}

08101c94 <dot>:

/* Return the dot product of two vectors. */
double dot(const vec3d vector1, const vec3d vector2)
{
 8101c94:	b5b0      	push	{r4, r5, r7, lr}
 8101c96:	b08c      	sub	sp, #48	@ 0x30
 8101c98:	af00      	add	r7, sp, #0
 8101c9a:	eeb0 6a44 	vmov.f32	s12, s8
 8101c9e:	eef0 6a64 	vmov.f32	s13, s9
 8101ca2:	eeb0 7a45 	vmov.f32	s14, s10
 8101ca6:	eef0 7a65 	vmov.f32	s15, s11
 8101caa:	ed87 0b06 	vstr	d0, [r7, #24]
 8101cae:	ed87 1b08 	vstr	d1, [r7, #32]
 8101cb2:	ed87 2b0a 	vstr	d2, [r7, #40]	@ 0x28
 8101cb6:	ed87 3b00 	vstr	d3, [r7]
 8101cba:	ed87 6b02 	vstr	d6, [r7, #8]
 8101cbe:	ed87 7b04 	vstr	d7, [r7, #16]
    return vector1.x * vector2.x + vector1.y * vector2.y + vector1.z * vector2.z;
 8101cc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8101cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8101cca:	f7fe fd1d 	bl	8100708 <__aeabi_dmul>
 8101cce:	4602      	mov	r2, r0
 8101cd0:	460b      	mov	r3, r1
 8101cd2:	4614      	mov	r4, r2
 8101cd4:	461d      	mov	r5, r3
 8101cd6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8101cda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8101cde:	f7fe fd13 	bl	8100708 <__aeabi_dmul>
 8101ce2:	4602      	mov	r2, r0
 8101ce4:	460b      	mov	r3, r1
 8101ce6:	4620      	mov	r0, r4
 8101ce8:	4629      	mov	r1, r5
 8101cea:	f7fe fb57 	bl	810039c <__adddf3>
 8101cee:	4602      	mov	r2, r0
 8101cf0:	460b      	mov	r3, r1
 8101cf2:	4614      	mov	r4, r2
 8101cf4:	461d      	mov	r5, r3
 8101cf6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8101cfa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8101cfe:	f7fe fd03 	bl	8100708 <__aeabi_dmul>
 8101d02:	4602      	mov	r2, r0
 8101d04:	460b      	mov	r3, r1
 8101d06:	4620      	mov	r0, r4
 8101d08:	4629      	mov	r1, r5
 8101d0a:	f7fe fb47 	bl	810039c <__adddf3>
 8101d0e:	4602      	mov	r2, r0
 8101d10:	460b      	mov	r3, r1
 8101d12:	ec43 2b17 	vmov	d7, r2, r3
}
 8101d16:	eeb0 0a47 	vmov.f32	s0, s14
 8101d1a:	eef0 0a67 	vmov.f32	s1, s15
 8101d1e:	3730      	adds	r7, #48	@ 0x30
 8101d20:	46bd      	mov	sp, r7
 8101d22:	bdb0      	pop	{r4, r5, r7, pc}

08101d24 <cross>:

/* Replace vector with its cross product with another vector. */
vec3d cross(const vec3d vector1, const vec3d vector2)
{
 8101d24:	b5b0      	push	{r4, r5, r7, lr}
 8101d26:	b09e      	sub	sp, #120	@ 0x78
 8101d28:	af00      	add	r7, sp, #0
 8101d2a:	eeb0 6a44 	vmov.f32	s12, s8
 8101d2e:	eef0 6a64 	vmov.f32	s13, s9
 8101d32:	eeb0 7a45 	vmov.f32	s14, s10
 8101d36:	eef0 7a65 	vmov.f32	s15, s11
 8101d3a:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8101d3e:	ed87 1b0e 	vstr	d1, [r7, #56]	@ 0x38
 8101d42:	ed87 2b10 	vstr	d2, [r7, #64]	@ 0x40
 8101d46:	ed87 3b06 	vstr	d3, [r7, #24]
 8101d4a:	ed87 6b08 	vstr	d6, [r7, #32]
 8101d4e:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    vec3d v;
    v.x = vector1.y * vector2.z - vector1.z * vector2.y;
 8101d52:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8101d56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8101d5a:	f7fe fcd5 	bl	8100708 <__aeabi_dmul>
 8101d5e:	4602      	mov	r2, r0
 8101d60:	460b      	mov	r3, r1
 8101d62:	4614      	mov	r4, r2
 8101d64:	461d      	mov	r5, r3
 8101d66:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8101d6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8101d6e:	f7fe fccb 	bl	8100708 <__aeabi_dmul>
 8101d72:	4602      	mov	r2, r0
 8101d74:	460b      	mov	r3, r1
 8101d76:	4620      	mov	r0, r4
 8101d78:	4629      	mov	r1, r5
 8101d7a:	f7fe fb0d 	bl	8100398 <__aeabi_dsub>
 8101d7e:	4602      	mov	r2, r0
 8101d80:	460b      	mov	r3, r1
 8101d82:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    v.y = vector1.z * vector2.x - vector1.x * vector2.z;
 8101d86:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8101d8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101d8e:	f7fe fcbb 	bl	8100708 <__aeabi_dmul>
 8101d92:	4602      	mov	r2, r0
 8101d94:	460b      	mov	r3, r1
 8101d96:	4614      	mov	r4, r2
 8101d98:	461d      	mov	r5, r3
 8101d9a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8101d9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8101da2:	f7fe fcb1 	bl	8100708 <__aeabi_dmul>
 8101da6:	4602      	mov	r2, r0
 8101da8:	460b      	mov	r3, r1
 8101daa:	4620      	mov	r0, r4
 8101dac:	4629      	mov	r1, r5
 8101dae:	f7fe faf3 	bl	8100398 <__aeabi_dsub>
 8101db2:	4602      	mov	r2, r0
 8101db4:	460b      	mov	r3, r1
 8101db6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    v.z = vector1.x * vector2.y - vector1.y * vector2.x;
 8101dba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8101dbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8101dc2:	f7fe fca1 	bl	8100708 <__aeabi_dmul>
 8101dc6:	4602      	mov	r2, r0
 8101dc8:	460b      	mov	r3, r1
 8101dca:	4614      	mov	r4, r2
 8101dcc:	461d      	mov	r5, r3
 8101dce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8101dd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101dd6:	f7fe fc97 	bl	8100708 <__aeabi_dmul>
 8101dda:	4602      	mov	r2, r0
 8101ddc:	460b      	mov	r3, r1
 8101dde:	4620      	mov	r0, r4
 8101de0:	4629      	mov	r1, r5
 8101de2:	f7fe fad9 	bl	8100398 <__aeabi_dsub>
 8101de6:	4602      	mov	r2, r0
 8101de8:	460b      	mov	r3, r1
 8101dea:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    return v;
 8101dee:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8101df2:	f107 0548 	add.w	r5, r7, #72	@ 0x48
 8101df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101dfa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8101dfe:	e884 0003 	stmia.w	r4, {r0, r1}
 8101e02:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8101e06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8101e0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101e0e:	ec45 4b15 	vmov	d5, r4, r5
 8101e12:	ec41 0b16 	vmov	d6, r0, r1
 8101e16:	ec43 2b17 	vmov	d7, r2, r3
}
 8101e1a:	eeb0 0a45 	vmov.f32	s0, s10
 8101e1e:	eef0 0a65 	vmov.f32	s1, s11
 8101e22:	eeb0 1a46 	vmov.f32	s2, s12
 8101e26:	eef0 1a66 	vmov.f32	s3, s13
 8101e2a:	eeb0 2a47 	vmov.f32	s4, s14
 8101e2e:	eef0 2a67 	vmov.f32	s5, s15
 8101e32:	3778      	adds	r7, #120	@ 0x78
 8101e34:	46bd      	mov	sp, r7
 8101e36:	bdb0      	pop	{r4, r5, r7, pc}

08101e38 <gdoprate>:

/* Return the GDOP (Geometric Dilution of Precision) rate between 0-1.
 * Lower GDOP rate means better precision of intersection.
 */
double gdoprate(const vec3d tag, const vec3d p1, const vec3d p2, const vec3d p3)
{
 8101e38:	b580      	push	{r7, lr}
 8101e3a:	b0ae      	sub	sp, #184	@ 0xb8
 8101e3c:	af00      	add	r7, sp, #0
 8101e3e:	eeb0 6a44 	vmov.f32	s12, s8
 8101e42:	eef0 6a64 	vmov.f32	s13, s9
 8101e46:	eeb0 7a45 	vmov.f32	s14, s10
 8101e4a:	eef0 7a65 	vmov.f32	s15, s11
 8101e4e:	ed87 0b06 	vstr	d0, [r7, #24]
 8101e52:	ed87 1b08 	vstr	d1, [r7, #32]
 8101e56:	ed87 2b0a 	vstr	d2, [r7, #40]	@ 0x28
 8101e5a:	ed87 3b00 	vstr	d3, [r7]
 8101e5e:	ed87 6b02 	vstr	d6, [r7, #8]
 8101e62:	ed87 7b04 	vstr	d7, [r7, #16]
    vec3d ex, t1, t2, t3;
    double h, gdop1, gdop2, gdop3, result;

    ex = vdiff(p1, tag);
 8101e66:	ed97 3b06 	vldr	d3, [r7, #24]
 8101e6a:	ed97 4b08 	vldr	d4, [r7, #32]
 8101e6e:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 8101e72:	ed97 2b00 	vldr	d2, [r7]
 8101e76:	ed97 6b02 	vldr	d6, [r7, #8]
 8101e7a:	ed97 7b04 	vldr	d7, [r7, #16]
 8101e7e:	eeb0 0a42 	vmov.f32	s0, s4
 8101e82:	eef0 0a62 	vmov.f32	s1, s5
 8101e86:	eeb0 1a46 	vmov.f32	s2, s12
 8101e8a:	eef0 1a66 	vmov.f32	s3, s13
 8101e8e:	eeb0 2a47 	vmov.f32	s4, s14
 8101e92:	eef0 2a67 	vmov.f32	s5, s15
 8101e96:	f7ff fd45 	bl	8101924 <vdiff>
 8101e9a:	eeb0 5a40 	vmov.f32	s10, s0
 8101e9e:	eef0 5a60 	vmov.f32	s11, s1
 8101ea2:	eeb0 6a41 	vmov.f32	s12, s2
 8101ea6:	eef0 6a61 	vmov.f32	s13, s3
 8101eaa:	eeb0 7a42 	vmov.f32	s14, s4
 8101eae:	eef0 7a62 	vmov.f32	s15, s5
 8101eb2:	ed87 5b1e 	vstr	d5, [r7, #120]	@ 0x78
 8101eb6:	ed87 6b20 	vstr	d6, [r7, #128]	@ 0x80
 8101eba:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    h = vnorm(ex);
 8101ebe:	ed97 5b1e 	vldr	d5, [r7, #120]	@ 0x78
 8101ec2:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 8101ec6:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 8101eca:	eeb0 0a45 	vmov.f32	s0, s10
 8101ece:	eef0 0a65 	vmov.f32	s1, s11
 8101ed2:	eeb0 1a46 	vmov.f32	s2, s12
 8101ed6:	eef0 1a66 	vmov.f32	s3, s13
 8101eda:	eeb0 2a47 	vmov.f32	s4, s14
 8101ede:	eef0 2a67 	vmov.f32	s5, s15
 8101ee2:	f7ff fe87 	bl	8101bf4 <vnorm>
 8101ee6:	ed87 0b2a 	vstr	d0, [r7, #168]	@ 0xa8
    t1 = vdiv(ex, h);
 8101eea:	ed97 5b1e 	vldr	d5, [r7, #120]	@ 0x78
 8101eee:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 8101ef2:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 8101ef6:	ed97 3b2a 	vldr	d3, [r7, #168]	@ 0xa8
 8101efa:	eeb0 0a45 	vmov.f32	s0, s10
 8101efe:	eef0 0a65 	vmov.f32	s1, s11
 8101f02:	eeb0 1a46 	vmov.f32	s2, s12
 8101f06:	eef0 1a66 	vmov.f32	s3, s13
 8101f0a:	eeb0 2a47 	vmov.f32	s4, s14
 8101f0e:	eef0 2a67 	vmov.f32	s5, s15
 8101f12:	f7ff fe15 	bl	8101b40 <vdiv>
 8101f16:	eeb0 5a40 	vmov.f32	s10, s0
 8101f1a:	eef0 5a60 	vmov.f32	s11, s1
 8101f1e:	eeb0 6a41 	vmov.f32	s12, s2
 8101f22:	eef0 6a61 	vmov.f32	s13, s3
 8101f26:	eeb0 7a42 	vmov.f32	s14, s4
 8101f2a:	eef0 7a62 	vmov.f32	s15, s5
 8101f2e:	ed87 5b18 	vstr	d5, [r7, #96]	@ 0x60
 8101f32:	ed87 6b1a 	vstr	d6, [r7, #104]	@ 0x68
 8101f36:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70

    ex = vdiff(p2, tag);
 8101f3a:	ed97 3b06 	vldr	d3, [r7, #24]
 8101f3e:	ed97 4b08 	vldr	d4, [r7, #32]
 8101f42:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 8101f46:	ed97 2b30 	vldr	d2, [r7, #192]	@ 0xc0
 8101f4a:	ed97 6b32 	vldr	d6, [r7, #200]	@ 0xc8
 8101f4e:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 8101f52:	eeb0 0a42 	vmov.f32	s0, s4
 8101f56:	eef0 0a62 	vmov.f32	s1, s5
 8101f5a:	eeb0 1a46 	vmov.f32	s2, s12
 8101f5e:	eef0 1a66 	vmov.f32	s3, s13
 8101f62:	eeb0 2a47 	vmov.f32	s4, s14
 8101f66:	eef0 2a67 	vmov.f32	s5, s15
 8101f6a:	f7ff fcdb 	bl	8101924 <vdiff>
 8101f6e:	eeb0 5a40 	vmov.f32	s10, s0
 8101f72:	eef0 5a60 	vmov.f32	s11, s1
 8101f76:	eeb0 6a41 	vmov.f32	s12, s2
 8101f7a:	eef0 6a61 	vmov.f32	s13, s3
 8101f7e:	eeb0 7a42 	vmov.f32	s14, s4
 8101f82:	eef0 7a62 	vmov.f32	s15, s5
 8101f86:	ed87 5b1e 	vstr	d5, [r7, #120]	@ 0x78
 8101f8a:	ed87 6b20 	vstr	d6, [r7, #128]	@ 0x80
 8101f8e:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    h = vnorm(ex);
 8101f92:	ed97 5b1e 	vldr	d5, [r7, #120]	@ 0x78
 8101f96:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 8101f9a:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 8101f9e:	eeb0 0a45 	vmov.f32	s0, s10
 8101fa2:	eef0 0a65 	vmov.f32	s1, s11
 8101fa6:	eeb0 1a46 	vmov.f32	s2, s12
 8101faa:	eef0 1a66 	vmov.f32	s3, s13
 8101fae:	eeb0 2a47 	vmov.f32	s4, s14
 8101fb2:	eef0 2a67 	vmov.f32	s5, s15
 8101fb6:	f7ff fe1d 	bl	8101bf4 <vnorm>
 8101fba:	ed87 0b2a 	vstr	d0, [r7, #168]	@ 0xa8
    t2 = vdiv(ex, h);
 8101fbe:	ed97 5b1e 	vldr	d5, [r7, #120]	@ 0x78
 8101fc2:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 8101fc6:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 8101fca:	ed97 3b2a 	vldr	d3, [r7, #168]	@ 0xa8
 8101fce:	eeb0 0a45 	vmov.f32	s0, s10
 8101fd2:	eef0 0a65 	vmov.f32	s1, s11
 8101fd6:	eeb0 1a46 	vmov.f32	s2, s12
 8101fda:	eef0 1a66 	vmov.f32	s3, s13
 8101fde:	eeb0 2a47 	vmov.f32	s4, s14
 8101fe2:	eef0 2a67 	vmov.f32	s5, s15
 8101fe6:	f7ff fdab 	bl	8101b40 <vdiv>
 8101fea:	eeb0 5a40 	vmov.f32	s10, s0
 8101fee:	eef0 5a60 	vmov.f32	s11, s1
 8101ff2:	eeb0 6a41 	vmov.f32	s12, s2
 8101ff6:	eef0 6a61 	vmov.f32	s13, s3
 8101ffa:	eeb0 7a42 	vmov.f32	s14, s4
 8101ffe:	eef0 7a62 	vmov.f32	s15, s5
 8102002:	ed87 5b12 	vstr	d5, [r7, #72]	@ 0x48
 8102006:	ed87 6b14 	vstr	d6, [r7, #80]	@ 0x50
 810200a:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58

    ex = vdiff(p3, tag);
 810200e:	ed97 3b06 	vldr	d3, [r7, #24]
 8102012:	ed97 4b08 	vldr	d4, [r7, #32]
 8102016:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 810201a:	ed97 2b36 	vldr	d2, [r7, #216]	@ 0xd8
 810201e:	ed97 6b38 	vldr	d6, [r7, #224]	@ 0xe0
 8102022:	ed97 7b3a 	vldr	d7, [r7, #232]	@ 0xe8
 8102026:	eeb0 0a42 	vmov.f32	s0, s4
 810202a:	eef0 0a62 	vmov.f32	s1, s5
 810202e:	eeb0 1a46 	vmov.f32	s2, s12
 8102032:	eef0 1a66 	vmov.f32	s3, s13
 8102036:	eeb0 2a47 	vmov.f32	s4, s14
 810203a:	eef0 2a67 	vmov.f32	s5, s15
 810203e:	f7ff fc71 	bl	8101924 <vdiff>
 8102042:	eeb0 5a40 	vmov.f32	s10, s0
 8102046:	eef0 5a60 	vmov.f32	s11, s1
 810204a:	eeb0 6a41 	vmov.f32	s12, s2
 810204e:	eef0 6a61 	vmov.f32	s13, s3
 8102052:	eeb0 7a42 	vmov.f32	s14, s4
 8102056:	eef0 7a62 	vmov.f32	s15, s5
 810205a:	ed87 5b1e 	vstr	d5, [r7, #120]	@ 0x78
 810205e:	ed87 6b20 	vstr	d6, [r7, #128]	@ 0x80
 8102062:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    h = vnorm(ex);
 8102066:	ed97 5b1e 	vldr	d5, [r7, #120]	@ 0x78
 810206a:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 810206e:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 8102072:	eeb0 0a45 	vmov.f32	s0, s10
 8102076:	eef0 0a65 	vmov.f32	s1, s11
 810207a:	eeb0 1a46 	vmov.f32	s2, s12
 810207e:	eef0 1a66 	vmov.f32	s3, s13
 8102082:	eeb0 2a47 	vmov.f32	s4, s14
 8102086:	eef0 2a67 	vmov.f32	s5, s15
 810208a:	f7ff fdb3 	bl	8101bf4 <vnorm>
 810208e:	ed87 0b2a 	vstr	d0, [r7, #168]	@ 0xa8
    t3 = vdiv(ex, h);
 8102092:	ed97 5b1e 	vldr	d5, [r7, #120]	@ 0x78
 8102096:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 810209a:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 810209e:	ed97 3b2a 	vldr	d3, [r7, #168]	@ 0xa8
 81020a2:	eeb0 0a45 	vmov.f32	s0, s10
 81020a6:	eef0 0a65 	vmov.f32	s1, s11
 81020aa:	eeb0 1a46 	vmov.f32	s2, s12
 81020ae:	eef0 1a66 	vmov.f32	s3, s13
 81020b2:	eeb0 2a47 	vmov.f32	s4, s14
 81020b6:	eef0 2a67 	vmov.f32	s5, s15
 81020ba:	f7ff fd41 	bl	8101b40 <vdiv>
 81020be:	eeb0 5a40 	vmov.f32	s10, s0
 81020c2:	eef0 5a60 	vmov.f32	s11, s1
 81020c6:	eeb0 6a41 	vmov.f32	s12, s2
 81020ca:	eef0 6a61 	vmov.f32	s13, s3
 81020ce:	eeb0 7a42 	vmov.f32	s14, s4
 81020d2:	eef0 7a62 	vmov.f32	s15, s5
 81020d6:	ed87 5b0c 	vstr	d5, [r7, #48]	@ 0x30
 81020da:	ed87 6b0e 	vstr	d6, [r7, #56]	@ 0x38
 81020de:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

    gdop1 = fabs(dot(t1, t2));
 81020e2:	ed97 3b12 	vldr	d3, [r7, #72]	@ 0x48
 81020e6:	ed97 4b14 	vldr	d4, [r7, #80]	@ 0x50
 81020ea:	ed97 5b16 	vldr	d5, [r7, #88]	@ 0x58
 81020ee:	ed97 2b18 	vldr	d2, [r7, #96]	@ 0x60
 81020f2:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 81020f6:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 81020fa:	eeb0 0a42 	vmov.f32	s0, s4
 81020fe:	eef0 0a62 	vmov.f32	s1, s5
 8102102:	eeb0 1a46 	vmov.f32	s2, s12
 8102106:	eef0 1a66 	vmov.f32	s3, s13
 810210a:	eeb0 2a47 	vmov.f32	s4, s14
 810210e:	eef0 2a67 	vmov.f32	s5, s15
 8102112:	f7ff fdbf 	bl	8101c94 <dot>
 8102116:	ec53 2b10 	vmov	r2, r3, d0
 810211a:	4611      	mov	r1, r2
 810211c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8102120:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8102124:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    gdop2 = fabs(dot(t2, t3));
 8102128:	ed97 3b0c 	vldr	d3, [r7, #48]	@ 0x30
 810212c:	ed97 4b0e 	vldr	d4, [r7, #56]	@ 0x38
 8102130:	ed97 5b10 	vldr	d5, [r7, #64]	@ 0x40
 8102134:	ed97 2b12 	vldr	d2, [r7, #72]	@ 0x48
 8102138:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 810213c:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8102140:	eeb0 0a42 	vmov.f32	s0, s4
 8102144:	eef0 0a62 	vmov.f32	s1, s5
 8102148:	eeb0 1a46 	vmov.f32	s2, s12
 810214c:	eef0 1a66 	vmov.f32	s3, s13
 8102150:	eeb0 2a47 	vmov.f32	s4, s14
 8102154:	eef0 2a67 	vmov.f32	s5, s15
 8102158:	f7ff fd9c 	bl	8101c94 <dot>
 810215c:	ec53 2b10 	vmov	r2, r3, d0
 8102160:	4611      	mov	r1, r2
 8102162:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8102166:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810216a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    gdop3 = fabs(dot(t3, t1));
 810216e:	ed97 3b18 	vldr	d3, [r7, #96]	@ 0x60
 8102172:	ed97 4b1a 	vldr	d4, [r7, #104]	@ 0x68
 8102176:	ed97 5b1c 	vldr	d5, [r7, #112]	@ 0x70
 810217a:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 810217e:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8102182:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8102186:	eeb0 0a42 	vmov.f32	s0, s4
 810218a:	eef0 0a62 	vmov.f32	s1, s5
 810218e:	eeb0 1a46 	vmov.f32	s2, s12
 8102192:	eef0 1a66 	vmov.f32	s3, s13
 8102196:	eeb0 2a47 	vmov.f32	s4, s14
 810219a:	eef0 2a67 	vmov.f32	s5, s15
 810219e:	f7ff fd79 	bl	8101c94 <dot>
 81021a2:	ec53 2b10 	vmov	r2, r3, d0
 81021a6:	4611      	mov	r1, r2
 81021a8:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 81021ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81021b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    if (gdop1 < gdop2) result = gdop2;
 81021b4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 81021b8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 81021bc:	f7fe fd16 	bl	8100bec <__aeabi_dcmplt>
 81021c0:	4603      	mov	r3, r0
 81021c2:	2b00      	cmp	r3, #0
 81021c4:	d004      	beq.n	81021d0 <gdoprate+0x398>
 81021c6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 81021ca:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
 81021ce:	e003      	b.n	81021d8 <gdoprate+0x3a0>
    else result = gdop1;
 81021d0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 81021d4:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
    if (result < gdop3) result = gdop3;
 81021d8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 81021dc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 81021e0:	f7fe fd04 	bl	8100bec <__aeabi_dcmplt>
 81021e4:	4603      	mov	r3, r0
 81021e6:	2b00      	cmp	r3, #0
 81021e8:	d003      	beq.n	81021f2 <gdoprate+0x3ba>
 81021ea:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 81021ee:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0

    return result;
 81021f2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 81021f6:	ec43 2b17 	vmov	d7, r2, r3
}
 81021fa:	eeb0 0a47 	vmov.f32	s0, s14
 81021fe:	eef0 0a67 	vmov.f32	s1, s15
 8102202:	37b8      	adds	r7, #184	@ 0xb8
 8102204:	46bd      	mov	sp, r7
 8102206:	bd80      	pop	{r7, pc}

08102208 <sphereline>:
/* Intersecting a sphere sc with radius of r, with a line p1-p2.
 * Return zero if successful, negative error otherwise.
 * mu1 & mu2 are constant to find points of intersection.
*/
int sphereline(const vec3d p1, const vec3d p2, const vec3d sc, double r, double *const mu1, double *const mu2)
{
 8102208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810220c:	b09c      	sub	sp, #112	@ 0x70
 810220e:	af00      	add	r7, sp, #0
 8102210:	eeb0 6a44 	vmov.f32	s12, s8
 8102214:	eef0 6a64 	vmov.f32	s13, s9
 8102218:	eeb0 7a45 	vmov.f32	s14, s10
 810221c:	eef0 7a65 	vmov.f32	s15, s11
 8102220:	6078      	str	r0, [r7, #4]
 8102222:	6039      	str	r1, [r7, #0]
 8102224:	ed87 0b08 	vstr	d0, [r7, #32]
 8102228:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 810222c:	ed87 2b0c 	vstr	d2, [r7, #48]	@ 0x30
 8102230:	ed87 3b02 	vstr	d3, [r7, #8]
 8102234:	ed87 6b04 	vstr	d6, [r7, #16]
 8102238:	ed87 7b06 	vstr	d7, [r7, #24]
    double a,b,c;
    double bb4ac;
    vec3d dp;

    dp.x = p2.x - p1.x;
 810223c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8102240:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8102244:	f7fe f8a8 	bl	8100398 <__aeabi_dsub>
 8102248:	4602      	mov	r2, r0
 810224a:	460b      	mov	r3, r1
 810224c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    dp.y = p2.y - p1.y;
 8102250:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8102254:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8102258:	f7fe f89e 	bl	8100398 <__aeabi_dsub>
 810225c:	4602      	mov	r2, r0
 810225e:	460b      	mov	r3, r1
 8102260:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    dp.z = p2.z - p1.z;
 8102264:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8102268:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 810226c:	f7fe f894 	bl	8100398 <__aeabi_dsub>
 8102270:	4602      	mov	r2, r0
 8102272:	460b      	mov	r3, r1
 8102274:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    a = dp.x * dp.x + dp.y * dp.y + dp.z * dp.z;
 8102278:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 810227c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8102280:	f7fe fa42 	bl	8100708 <__aeabi_dmul>
 8102284:	4602      	mov	r2, r0
 8102286:	460b      	mov	r3, r1
 8102288:	4690      	mov	r8, r2
 810228a:	4699      	mov	r9, r3
 810228c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8102290:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8102294:	f7fe fa38 	bl	8100708 <__aeabi_dmul>
 8102298:	4602      	mov	r2, r0
 810229a:	460b      	mov	r3, r1
 810229c:	4640      	mov	r0, r8
 810229e:	4649      	mov	r1, r9
 81022a0:	f7fe f87c 	bl	810039c <__adddf3>
 81022a4:	4602      	mov	r2, r0
 81022a6:	460b      	mov	r3, r1
 81022a8:	4690      	mov	r8, r2
 81022aa:	4699      	mov	r9, r3
 81022ac:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 81022b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 81022b4:	f7fe fa28 	bl	8100708 <__aeabi_dmul>
 81022b8:	4602      	mov	r2, r0
 81022ba:	460b      	mov	r3, r1
 81022bc:	4640      	mov	r0, r8
 81022be:	4649      	mov	r1, r9
 81022c0:	f7fe f86c 	bl	810039c <__adddf3>
 81022c4:	4602      	mov	r2, r0
 81022c6:	460b      	mov	r3, r1
 81022c8:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

    b = 2 * (dp.x * (p1.x - sc.x) + dp.y * (p1.y - sc.y) + dp.z * (p1.z - sc.z));
 81022cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 81022d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 81022d4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 81022d8:	f7fe f85e 	bl	8100398 <__aeabi_dsub>
 81022dc:	4602      	mov	r2, r0
 81022de:	460b      	mov	r3, r1
 81022e0:	4640      	mov	r0, r8
 81022e2:	4649      	mov	r1, r9
 81022e4:	f7fe fa10 	bl	8100708 <__aeabi_dmul>
 81022e8:	4602      	mov	r2, r0
 81022ea:	460b      	mov	r3, r1
 81022ec:	4692      	mov	sl, r2
 81022ee:	469b      	mov	fp, r3
 81022f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 81022f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 81022f8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 81022fc:	f7fe f84c 	bl	8100398 <__aeabi_dsub>
 8102300:	4602      	mov	r2, r0
 8102302:	460b      	mov	r3, r1
 8102304:	4640      	mov	r0, r8
 8102306:	4649      	mov	r1, r9
 8102308:	f7fe f9fe 	bl	8100708 <__aeabi_dmul>
 810230c:	4602      	mov	r2, r0
 810230e:	460b      	mov	r3, r1
 8102310:	4650      	mov	r0, sl
 8102312:	4659      	mov	r1, fp
 8102314:	f7fe f842 	bl	810039c <__adddf3>
 8102318:	4602      	mov	r2, r0
 810231a:	460b      	mov	r3, r1
 810231c:	4692      	mov	sl, r2
 810231e:	469b      	mov	fp, r3
 8102320:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8102324:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8102328:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 810232c:	f7fe f834 	bl	8100398 <__aeabi_dsub>
 8102330:	4602      	mov	r2, r0
 8102332:	460b      	mov	r3, r1
 8102334:	4640      	mov	r0, r8
 8102336:	4649      	mov	r1, r9
 8102338:	f7fe f9e6 	bl	8100708 <__aeabi_dmul>
 810233c:	4602      	mov	r2, r0
 810233e:	460b      	mov	r3, r1
 8102340:	4650      	mov	r0, sl
 8102342:	4659      	mov	r1, fp
 8102344:	f7fe f82a 	bl	810039c <__adddf3>
 8102348:	4602      	mov	r2, r0
 810234a:	460b      	mov	r3, r1
 810234c:	4610      	mov	r0, r2
 810234e:	4619      	mov	r1, r3
 8102350:	4602      	mov	r2, r0
 8102352:	460b      	mov	r3, r1
 8102354:	f7fe f822 	bl	810039c <__adddf3>
 8102358:	4602      	mov	r2, r0
 810235a:	460b      	mov	r3, r1
 810235c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

    c = sc.x * sc.x + sc.y * sc.y + sc.z * sc.z;
 8102360:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8102364:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8102368:	f7fe f9ce 	bl	8100708 <__aeabi_dmul>
 810236c:	4602      	mov	r2, r0
 810236e:	460b      	mov	r3, r1
 8102370:	4690      	mov	r8, r2
 8102372:	4699      	mov	r9, r3
 8102374:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8102378:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 810237c:	f7fe f9c4 	bl	8100708 <__aeabi_dmul>
 8102380:	4602      	mov	r2, r0
 8102382:	460b      	mov	r3, r1
 8102384:	4640      	mov	r0, r8
 8102386:	4649      	mov	r1, r9
 8102388:	f7fe f808 	bl	810039c <__adddf3>
 810238c:	4602      	mov	r2, r0
 810238e:	460b      	mov	r3, r1
 8102390:	4690      	mov	r8, r2
 8102392:	4699      	mov	r9, r3
 8102394:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8102398:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 810239c:	f7fe f9b4 	bl	8100708 <__aeabi_dmul>
 81023a0:	4602      	mov	r2, r0
 81023a2:	460b      	mov	r3, r1
 81023a4:	4640      	mov	r0, r8
 81023a6:	4649      	mov	r1, r9
 81023a8:	f7fd fff8 	bl	810039c <__adddf3>
 81023ac:	4602      	mov	r2, r0
 81023ae:	460b      	mov	r3, r1
 81023b0:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    c += p1.x * p1.x + p1.y * p1.y + p1.z * p1.z;
 81023b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 81023b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 81023bc:	f7fe f9a4 	bl	8100708 <__aeabi_dmul>
 81023c0:	4602      	mov	r2, r0
 81023c2:	460b      	mov	r3, r1
 81023c4:	4690      	mov	r8, r2
 81023c6:	4699      	mov	r9, r3
 81023c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 81023cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 81023d0:	f7fe f99a 	bl	8100708 <__aeabi_dmul>
 81023d4:	4602      	mov	r2, r0
 81023d6:	460b      	mov	r3, r1
 81023d8:	4640      	mov	r0, r8
 81023da:	4649      	mov	r1, r9
 81023dc:	f7fd ffde 	bl	810039c <__adddf3>
 81023e0:	4602      	mov	r2, r0
 81023e2:	460b      	mov	r3, r1
 81023e4:	4690      	mov	r8, r2
 81023e6:	4699      	mov	r9, r3
 81023e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 81023ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 81023f0:	f7fe f98a 	bl	8100708 <__aeabi_dmul>
 81023f4:	4602      	mov	r2, r0
 81023f6:	460b      	mov	r3, r1
 81023f8:	4640      	mov	r0, r8
 81023fa:	4649      	mov	r1, r9
 81023fc:	f7fd ffce 	bl	810039c <__adddf3>
 8102400:	4602      	mov	r2, r0
 8102402:	460b      	mov	r3, r1
 8102404:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8102408:	f7fd ffc8 	bl	810039c <__adddf3>
 810240c:	4602      	mov	r2, r0
 810240e:	460b      	mov	r3, r1
 8102410:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    c -= 2 * (sc.x * p1.x + sc.y * p1.y + sc.z * p1.z);
 8102414:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8102418:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 810241c:	f7fe f974 	bl	8100708 <__aeabi_dmul>
 8102420:	4602      	mov	r2, r0
 8102422:	460b      	mov	r3, r1
 8102424:	4690      	mov	r8, r2
 8102426:	4699      	mov	r9, r3
 8102428:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 810242c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8102430:	f7fe f96a 	bl	8100708 <__aeabi_dmul>
 8102434:	4602      	mov	r2, r0
 8102436:	460b      	mov	r3, r1
 8102438:	4640      	mov	r0, r8
 810243a:	4649      	mov	r1, r9
 810243c:	f7fd ffae 	bl	810039c <__adddf3>
 8102440:	4602      	mov	r2, r0
 8102442:	460b      	mov	r3, r1
 8102444:	4690      	mov	r8, r2
 8102446:	4699      	mov	r9, r3
 8102448:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 810244c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8102450:	f7fe f95a 	bl	8100708 <__aeabi_dmul>
 8102454:	4602      	mov	r2, r0
 8102456:	460b      	mov	r3, r1
 8102458:	4640      	mov	r0, r8
 810245a:	4649      	mov	r1, r9
 810245c:	f7fd ff9e 	bl	810039c <__adddf3>
 8102460:	4602      	mov	r2, r0
 8102462:	460b      	mov	r3, r1
 8102464:	4610      	mov	r0, r2
 8102466:	4619      	mov	r1, r3
 8102468:	4602      	mov	r2, r0
 810246a:	460b      	mov	r3, r1
 810246c:	f7fd ff96 	bl	810039c <__adddf3>
 8102470:	4602      	mov	r2, r0
 8102472:	460b      	mov	r3, r1
 8102474:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8102478:	f7fd ff8e 	bl	8100398 <__aeabi_dsub>
 810247c:	4602      	mov	r2, r0
 810247e:	460b      	mov	r3, r1
 8102480:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    c -= r * r;
 8102484:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8102488:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 810248c:	f7fe f93c 	bl	8100708 <__aeabi_dmul>
 8102490:	4602      	mov	r2, r0
 8102492:	460b      	mov	r3, r1
 8102494:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8102498:	f7fd ff7e 	bl	8100398 <__aeabi_dsub>
 810249c:	4602      	mov	r2, r0
 810249e:	460b      	mov	r3, r1
 81024a0:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    bb4ac = b * b - 4 * a * c;
 81024a4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 81024a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 81024ac:	f7fe f92c 	bl	8100708 <__aeabi_dmul>
 81024b0:	4602      	mov	r2, r0
 81024b2:	460b      	mov	r3, r1
 81024b4:	4690      	mov	r8, r2
 81024b6:	4699      	mov	r9, r3
 81024b8:	f04f 0200 	mov.w	r2, #0
 81024bc:	4b42      	ldr	r3, [pc, #264]	@ (81025c8 <sphereline+0x3c0>)
 81024be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 81024c2:	f7fe f921 	bl	8100708 <__aeabi_dmul>
 81024c6:	4602      	mov	r2, r0
 81024c8:	460b      	mov	r3, r1
 81024ca:	4610      	mov	r0, r2
 81024cc:	4619      	mov	r1, r3
 81024ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 81024d2:	f7fe f919 	bl	8100708 <__aeabi_dmul>
 81024d6:	4602      	mov	r2, r0
 81024d8:	460b      	mov	r3, r1
 81024da:	4640      	mov	r0, r8
 81024dc:	4649      	mov	r1, r9
 81024de:	f7fd ff5b 	bl	8100398 <__aeabi_dsub>
 81024e2:	4602      	mov	r2, r0
 81024e4:	460b      	mov	r3, r1
 81024e6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    if (fabs(a) == 0 || bb4ac < 0)
 81024ea:	f04f 0200 	mov.w	r2, #0
 81024ee:	f04f 0300 	mov.w	r3, #0
 81024f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 81024f6:	f7fe fb6f 	bl	8100bd8 <__aeabi_dcmpeq>
 81024fa:	4603      	mov	r3, r0
 81024fc:	2b00      	cmp	r3, #0
 81024fe:	d10a      	bne.n	8102516 <sphereline+0x30e>
 8102500:	f04f 0200 	mov.w	r2, #0
 8102504:	f04f 0300 	mov.w	r3, #0
 8102508:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 810250c:	f7fe fb6e 	bl	8100bec <__aeabi_dcmplt>
 8102510:	4603      	mov	r3, r0
 8102512:	2b00      	cmp	r3, #0
 8102514:	d010      	beq.n	8102538 <sphereline+0x330>
    {
        *mu1 = 0;
 8102516:	6879      	ldr	r1, [r7, #4]
 8102518:	f04f 0200 	mov.w	r2, #0
 810251c:	f04f 0300 	mov.w	r3, #0
 8102520:	e9c1 2300 	strd	r2, r3, [r1]
        *mu2 = 0;
 8102524:	6839      	ldr	r1, [r7, #0]
 8102526:	f04f 0200 	mov.w	r2, #0
 810252a:	f04f 0300 	mov.w	r3, #0
 810252e:	e9c1 2300 	strd	r2, r3, [r1]
        return -1;
 8102532:	f04f 33ff 	mov.w	r3, #4294967295
 8102536:	e042      	b.n	81025be <sphereline+0x3b6>
    }

    *mu1 = (-b + sqrt(bb4ac)) / (2 * a);
 8102538:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 810253c:	f010 fbc2 	bl	8112cc4 <sqrt>
 8102540:	ec51 0b10 	vmov	r0, r1, d0
 8102544:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8102548:	f7fd ff26 	bl	8100398 <__aeabi_dsub>
 810254c:	4602      	mov	r2, r0
 810254e:	460b      	mov	r3, r1
 8102550:	4690      	mov	r8, r2
 8102552:	4699      	mov	r9, r3
 8102554:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8102558:	4602      	mov	r2, r0
 810255a:	460b      	mov	r3, r1
 810255c:	f7fd ff1e 	bl	810039c <__adddf3>
 8102560:	4602      	mov	r2, r0
 8102562:	460b      	mov	r3, r1
 8102564:	4640      	mov	r0, r8
 8102566:	4649      	mov	r1, r9
 8102568:	f7fe f9f8 	bl	810095c <__aeabi_ddiv>
 810256c:	4602      	mov	r2, r0
 810256e:	460b      	mov	r3, r1
 8102570:	6879      	ldr	r1, [r7, #4]
 8102572:	e9c1 2300 	strd	r2, r3, [r1]
    *mu2 = (-b - sqrt(bb4ac)) / (2 * a);
 8102576:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8102578:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810257a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 810257e:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8102582:	f010 fb9f 	bl	8112cc4 <sqrt>
 8102586:	ec53 2b10 	vmov	r2, r3, d0
 810258a:	4620      	mov	r0, r4
 810258c:	4629      	mov	r1, r5
 810258e:	f7fd ff03 	bl	8100398 <__aeabi_dsub>
 8102592:	4602      	mov	r2, r0
 8102594:	460b      	mov	r3, r1
 8102596:	4614      	mov	r4, r2
 8102598:	461d      	mov	r5, r3
 810259a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 810259e:	4602      	mov	r2, r0
 81025a0:	460b      	mov	r3, r1
 81025a2:	f7fd fefb 	bl	810039c <__adddf3>
 81025a6:	4602      	mov	r2, r0
 81025a8:	460b      	mov	r3, r1
 81025aa:	4620      	mov	r0, r4
 81025ac:	4629      	mov	r1, r5
 81025ae:	f7fe f9d5 	bl	810095c <__aeabi_ddiv>
 81025b2:	4602      	mov	r2, r0
 81025b4:	460b      	mov	r3, r1
 81025b6:	6839      	ldr	r1, [r7, #0]
 81025b8:	e9c1 2300 	strd	r2, r3, [r1]

    return 0;
 81025bc:	2300      	movs	r3, #0
}
 81025be:	4618      	mov	r0, r3
 81025c0:	3770      	adds	r7, #112	@ 0x70
 81025c2:	46bd      	mov	sp, r7
 81025c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81025c8:	40100000 	.word	0x40100000
 81025cc:	00000000 	.word	0x00000000

081025d0 <trilateration>:
                  const vec3d p1, const double r1,
                  const vec3d p2, const double r2,
                  const vec3d p3, const double r3,
                  const vec3d p4, const double r4,
                  const double maxzero)
{
 81025d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81025d4:	f5ad 7d29 	sub.w	sp, sp, #676	@ 0x2a4
 81025d8:	af08      	add	r7, sp, #32
 81025da:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81025de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 81025e2:	6018      	str	r0, [r3, #0]
 81025e4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81025e8:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 81025ec:	6019      	str	r1, [r3, #0]
 81025ee:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81025f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 81025f6:	601a      	str	r2, [r3, #0]
 81025f8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81025fc:	f5a3 7108 	sub.w	r1, r3, #544	@ 0x220
 8102600:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8102604:	ed03 3b02 	vstr	d3, [r3, #-8]
 8102608:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810260c:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 8102610:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8102614:	ed03 7b02 	vstr	d7, [r3, #-8]
 8102618:	ed81 0b00 	vstr	d0, [r1]
 810261c:	ed81 1b02 	vstr	d1, [r1, #8]
 8102620:	ed81 2b04 	vstr	d2, [r1, #16]
 8102624:	ed82 4b00 	vstr	d4, [r2]
 8102628:	ed82 5b02 	vstr	d5, [r2, #8]
 810262c:	ed82 6b04 	vstr	d6, [r2, #16]

    // if there are at least 2 concentric spheres within the first 3 spheres
    // then the calculation may not continue, drop it with error -1

    /* h = |p3 - p1|, ex = (p3 - p1) / |p3 - p1| */
    ex = vdiff(p3, p1); // vector p13
 8102630:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102634:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8102638:	ed93 3b00 	vldr	d3, [r3]
 810263c:	ed93 4b02 	vldr	d4, [r3, #8]
 8102640:	ed93 5b04 	vldr	d5, [r3, #16]
 8102644:	ed97 2baa 	vldr	d2, [r7, #680]	@ 0x2a8
 8102648:	ed97 6bac 	vldr	d6, [r7, #688]	@ 0x2b0
 810264c:	ed97 7bae 	vldr	d7, [r7, #696]	@ 0x2b8
 8102650:	eeb0 0a42 	vmov.f32	s0, s4
 8102654:	eef0 0a62 	vmov.f32	s1, s5
 8102658:	eeb0 1a46 	vmov.f32	s2, s12
 810265c:	eef0 1a66 	vmov.f32	s3, s13
 8102660:	eeb0 2a47 	vmov.f32	s4, s14
 8102664:	eef0 2a67 	vmov.f32	s5, s15
 8102668:	f7ff f95c 	bl	8101924 <vdiff>
 810266c:	eeb0 5a40 	vmov.f32	s10, s0
 8102670:	eef0 5a60 	vmov.f32	s11, s1
 8102674:	eeb0 6a41 	vmov.f32	s12, s2
 8102678:	eef0 6a61 	vmov.f32	s13, s3
 810267c:	eeb0 7a42 	vmov.f32	s14, s4
 8102680:	eef0 7a62 	vmov.f32	s15, s5
 8102684:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102688:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 810268c:	ed83 5b00 	vstr	d5, [r3]
 8102690:	ed83 6b02 	vstr	d6, [r3, #8]
 8102694:	ed83 7b04 	vstr	d7, [r3, #16]
    h = vnorm(ex); // scalar p13
 8102698:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810269c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 81026a0:	ed93 5b00 	vldr	d5, [r3]
 81026a4:	ed93 6b02 	vldr	d6, [r3, #8]
 81026a8:	ed93 7b04 	vldr	d7, [r3, #16]
 81026ac:	eeb0 0a45 	vmov.f32	s0, s10
 81026b0:	eef0 0a65 	vmov.f32	s1, s11
 81026b4:	eeb0 1a46 	vmov.f32	s2, s12
 81026b8:	eef0 1a66 	vmov.f32	s3, s13
 81026bc:	eeb0 2a47 	vmov.f32	s4, s14
 81026c0:	eef0 2a67 	vmov.f32	s5, s15
 81026c4:	f7ff fa96 	bl	8101bf4 <vnorm>
 81026c8:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
    if (h <= maxzero)
 81026cc:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 81026d0:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 81026d4:	f7fe fa94 	bl	8100c00 <__aeabi_dcmple>
 81026d8:	4603      	mov	r3, r0
 81026da:	2b00      	cmp	r3, #0
 81026dc:	d003      	beq.n	81026e6 <trilateration+0x116>
    {
        /* p1 and p3 are concentric, not good to obtain a precise intersection point */
        //printf("concentric13 return -1\n");
        return ERR_TRIL_CONCENTRIC;
 81026de:	f04f 33ff 	mov.w	r3, #4294967295
 81026e2:	f002 ba23 	b.w	8104b2c <trilateration+0x255c>
    }

    /* h = |p3 - p2|, ex = (p3 - p2) / |p3 - p2| */
    ex = vdiff(p3, p2); // vector p23
 81026e6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81026ea:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 81026ee:	ed93 3b00 	vldr	d3, [r3]
 81026f2:	ed93 4b02 	vldr	d4, [r3, #8]
 81026f6:	ed93 5b04 	vldr	d5, [r3, #16]
 81026fa:	ed97 2baa 	vldr	d2, [r7, #680]	@ 0x2a8
 81026fe:	ed97 6bac 	vldr	d6, [r7, #688]	@ 0x2b0
 8102702:	ed97 7bae 	vldr	d7, [r7, #696]	@ 0x2b8
 8102706:	eeb0 0a42 	vmov.f32	s0, s4
 810270a:	eef0 0a62 	vmov.f32	s1, s5
 810270e:	eeb0 1a46 	vmov.f32	s2, s12
 8102712:	eef0 1a66 	vmov.f32	s3, s13
 8102716:	eeb0 2a47 	vmov.f32	s4, s14
 810271a:	eef0 2a67 	vmov.f32	s5, s15
 810271e:	f7ff f901 	bl	8101924 <vdiff>
 8102722:	eeb0 5a40 	vmov.f32	s10, s0
 8102726:	eef0 5a60 	vmov.f32	s11, s1
 810272a:	eeb0 6a41 	vmov.f32	s12, s2
 810272e:	eef0 6a61 	vmov.f32	s13, s3
 8102732:	eeb0 7a42 	vmov.f32	s14, s4
 8102736:	eef0 7a62 	vmov.f32	s15, s5
 810273a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810273e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8102742:	ed83 5b00 	vstr	d5, [r3]
 8102746:	ed83 6b02 	vstr	d6, [r3, #8]
 810274a:	ed83 7b04 	vstr	d7, [r3, #16]
    h = vnorm(ex); // scalar p23
 810274e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102752:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8102756:	ed93 5b00 	vldr	d5, [r3]
 810275a:	ed93 6b02 	vldr	d6, [r3, #8]
 810275e:	ed93 7b04 	vldr	d7, [r3, #16]
 8102762:	eeb0 0a45 	vmov.f32	s0, s10
 8102766:	eef0 0a65 	vmov.f32	s1, s11
 810276a:	eeb0 1a46 	vmov.f32	s2, s12
 810276e:	eef0 1a66 	vmov.f32	s3, s13
 8102772:	eeb0 2a47 	vmov.f32	s4, s14
 8102776:	eef0 2a67 	vmov.f32	s5, s15
 810277a:	f7ff fa3b 	bl	8101bf4 <vnorm>
 810277e:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
    if (h <= maxzero)
 8102782:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 8102786:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 810278a:	f7fe fa39 	bl	8100c00 <__aeabi_dcmple>
 810278e:	4603      	mov	r3, r0
 8102790:	2b00      	cmp	r3, #0
 8102792:	d003      	beq.n	810279c <trilateration+0x1cc>
    {
        /* p2 and p3 are concentric, not good to obtain a precise intersection point */
        //printf("concentric23 return -1\n");
        return ERR_TRIL_CONCENTRIC;
 8102794:	f04f 33ff 	mov.w	r3, #4294967295
 8102798:	f002 b9c8 	b.w	8104b2c <trilateration+0x255c>
    }

    /* h = |p2 - p1|, ex = (p2 - p1) / |p2 - p1| */
    ex = vdiff(p2, p1); // vector p12
 810279c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81027a0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 81027a4:	ed93 3b00 	vldr	d3, [r3]
 81027a8:	ed93 4b02 	vldr	d4, [r3, #8]
 81027ac:	ed93 5b04 	vldr	d5, [r3, #16]
 81027b0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81027b4:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 81027b8:	ed93 2b00 	vldr	d2, [r3]
 81027bc:	ed93 6b02 	vldr	d6, [r3, #8]
 81027c0:	ed93 7b04 	vldr	d7, [r3, #16]
 81027c4:	eeb0 0a42 	vmov.f32	s0, s4
 81027c8:	eef0 0a62 	vmov.f32	s1, s5
 81027cc:	eeb0 1a46 	vmov.f32	s2, s12
 81027d0:	eef0 1a66 	vmov.f32	s3, s13
 81027d4:	eeb0 2a47 	vmov.f32	s4, s14
 81027d8:	eef0 2a67 	vmov.f32	s5, s15
 81027dc:	f7ff f8a2 	bl	8101924 <vdiff>
 81027e0:	eeb0 5a40 	vmov.f32	s10, s0
 81027e4:	eef0 5a60 	vmov.f32	s11, s1
 81027e8:	eeb0 6a41 	vmov.f32	s12, s2
 81027ec:	eef0 6a61 	vmov.f32	s13, s3
 81027f0:	eeb0 7a42 	vmov.f32	s14, s4
 81027f4:	eef0 7a62 	vmov.f32	s15, s5
 81027f8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81027fc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8102800:	ed83 5b00 	vstr	d5, [r3]
 8102804:	ed83 6b02 	vstr	d6, [r3, #8]
 8102808:	ed83 7b04 	vstr	d7, [r3, #16]
    h = vnorm(ex); // scalar p12
 810280c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102810:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8102814:	ed93 5b00 	vldr	d5, [r3]
 8102818:	ed93 6b02 	vldr	d6, [r3, #8]
 810281c:	ed93 7b04 	vldr	d7, [r3, #16]
 8102820:	eeb0 0a45 	vmov.f32	s0, s10
 8102824:	eef0 0a65 	vmov.f32	s1, s11
 8102828:	eeb0 1a46 	vmov.f32	s2, s12
 810282c:	eef0 1a66 	vmov.f32	s3, s13
 8102830:	eeb0 2a47 	vmov.f32	s4, s14
 8102834:	eef0 2a67 	vmov.f32	s5, s15
 8102838:	f7ff f9dc 	bl	8101bf4 <vnorm>
 810283c:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
    if (h <= maxzero)
 8102840:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 8102844:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 8102848:	f7fe f9da 	bl	8100c00 <__aeabi_dcmple>
 810284c:	4603      	mov	r3, r0
 810284e:	2b00      	cmp	r3, #0
 8102850:	d003      	beq.n	810285a <trilateration+0x28a>
    {
        /* p1 and p2 are concentric, not good to obtain a precise intersection point */
        //printf("concentric12 return -1\n");
        return ERR_TRIL_CONCENTRIC;
 8102852:	f04f 33ff 	mov.w	r3, #4294967295
 8102856:	f002 b969 	b.w	8104b2c <trilateration+0x255c>
    }


    ex = vdiv(ex, h); // unit vector ex with respect to p1 (new coordinate system)
 810285a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810285e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8102862:	ed93 5b00 	vldr	d5, [r3]
 8102866:	ed93 6b02 	vldr	d6, [r3, #8]
 810286a:	ed93 7b04 	vldr	d7, [r3, #16]
 810286e:	ed97 3b94 	vldr	d3, [r7, #592]	@ 0x250
 8102872:	eeb0 0a45 	vmov.f32	s0, s10
 8102876:	eef0 0a65 	vmov.f32	s1, s11
 810287a:	eeb0 1a46 	vmov.f32	s2, s12
 810287e:	eef0 1a66 	vmov.f32	s3, s13
 8102882:	eeb0 2a47 	vmov.f32	s4, s14
 8102886:	eef0 2a67 	vmov.f32	s5, s15
 810288a:	f7ff f959 	bl	8101b40 <vdiv>
 810288e:	eeb0 5a40 	vmov.f32	s10, s0
 8102892:	eef0 5a60 	vmov.f32	s11, s1
 8102896:	eeb0 6a41 	vmov.f32	s12, s2
 810289a:	eef0 6a61 	vmov.f32	s13, s3
 810289e:	eeb0 7a42 	vmov.f32	s14, s4
 81028a2:	eef0 7a62 	vmov.f32	s15, s5
 81028a6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81028aa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 81028ae:	ed83 5b00 	vstr	d5, [r3]
 81028b2:	ed83 6b02 	vstr	d6, [r3, #8]
 81028b6:	ed83 7b04 	vstr	d7, [r3, #16]

    /* t1 = p3 - p1, t2 = ex (ex . (p3 - p1)) */
    t1 = vdiff(p3, p1); // vector p13
 81028ba:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81028be:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 81028c2:	ed93 3b00 	vldr	d3, [r3]
 81028c6:	ed93 4b02 	vldr	d4, [r3, #8]
 81028ca:	ed93 5b04 	vldr	d5, [r3, #16]
 81028ce:	ed97 2baa 	vldr	d2, [r7, #680]	@ 0x2a8
 81028d2:	ed97 6bac 	vldr	d6, [r7, #688]	@ 0x2b0
 81028d6:	ed97 7bae 	vldr	d7, [r7, #696]	@ 0x2b8
 81028da:	eeb0 0a42 	vmov.f32	s0, s4
 81028de:	eef0 0a62 	vmov.f32	s1, s5
 81028e2:	eeb0 1a46 	vmov.f32	s2, s12
 81028e6:	eef0 1a66 	vmov.f32	s3, s13
 81028ea:	eeb0 2a47 	vmov.f32	s4, s14
 81028ee:	eef0 2a67 	vmov.f32	s5, s15
 81028f2:	f7ff f817 	bl	8101924 <vdiff>
 81028f6:	eeb0 5a40 	vmov.f32	s10, s0
 81028fa:	eef0 5a60 	vmov.f32	s11, s1
 81028fe:	eeb0 6a41 	vmov.f32	s12, s2
 8102902:	eef0 6a61 	vmov.f32	s13, s3
 8102906:	eeb0 7a42 	vmov.f32	s14, s4
 810290a:	eef0 7a62 	vmov.f32	s15, s5
 810290e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102912:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8102916:	ed83 5b00 	vstr	d5, [r3]
 810291a:	ed83 6b02 	vstr	d6, [r3, #8]
 810291e:	ed83 7b04 	vstr	d7, [r3, #16]
    i = dot(ex, t1); // the scalar of t1 on the ex direction
 8102922:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102926:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 810292a:	ed93 3b00 	vldr	d3, [r3]
 810292e:	ed93 4b02 	vldr	d4, [r3, #8]
 8102932:	ed93 5b04 	vldr	d5, [r3, #16]
 8102936:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810293a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 810293e:	ed93 2b00 	vldr	d2, [r3]
 8102942:	ed93 6b02 	vldr	d6, [r3, #8]
 8102946:	ed93 7b04 	vldr	d7, [r3, #16]
 810294a:	eeb0 0a42 	vmov.f32	s0, s4
 810294e:	eef0 0a62 	vmov.f32	s1, s5
 8102952:	eeb0 1a46 	vmov.f32	s2, s12
 8102956:	eef0 1a66 	vmov.f32	s3, s13
 810295a:	eeb0 2a47 	vmov.f32	s4, s14
 810295e:	eef0 2a67 	vmov.f32	s5, s15
 8102962:	f7ff f997 	bl	8101c94 <dot>
 8102966:	ed87 0b92 	vstr	d0, [r7, #584]	@ 0x248
    t2 = vmul(ex, i); // colinear vector to p13 with the length of i
 810296a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810296e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8102972:	ed93 5b00 	vldr	d5, [r3]
 8102976:	ed93 6b02 	vldr	d6, [r3, #8]
 810297a:	ed93 7b04 	vldr	d7, [r3, #16]
 810297e:	ed97 3b92 	vldr	d3, [r7, #584]	@ 0x248
 8102982:	eeb0 0a45 	vmov.f32	s0, s10
 8102986:	eef0 0a65 	vmov.f32	s1, s11
 810298a:	eeb0 1a46 	vmov.f32	s2, s12
 810298e:	eef0 1a66 	vmov.f32	s3, s13
 8102992:	eeb0 2a47 	vmov.f32	s4, s14
 8102996:	eef0 2a67 	vmov.f32	s5, s15
 810299a:	f7ff f877 	bl	8101a8c <vmul>
 810299e:	eeb0 5a40 	vmov.f32	s10, s0
 81029a2:	eef0 5a60 	vmov.f32	s11, s1
 81029a6:	eeb0 6a41 	vmov.f32	s12, s2
 81029aa:	eef0 6a61 	vmov.f32	s13, s3
 81029ae:	eeb0 7a42 	vmov.f32	s14, s4
 81029b2:	eef0 7a62 	vmov.f32	s15, s5
 81029b6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81029ba:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 81029be:	ed83 5b00 	vstr	d5, [r3]
 81029c2:	ed83 6b02 	vstr	d6, [r3, #8]
 81029c6:	ed83 7b04 	vstr	d7, [r3, #16]

    /* ey = (t1 - t2), t = |t1 - t2| */
    ey = vdiff(t1, t2); // vector t21 perpendicular to t1
 81029ca:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81029ce:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 81029d2:	ed93 3b00 	vldr	d3, [r3]
 81029d6:	ed93 4b02 	vldr	d4, [r3, #8]
 81029da:	ed93 5b04 	vldr	d5, [r3, #16]
 81029de:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81029e2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 81029e6:	ed93 2b00 	vldr	d2, [r3]
 81029ea:	ed93 6b02 	vldr	d6, [r3, #8]
 81029ee:	ed93 7b04 	vldr	d7, [r3, #16]
 81029f2:	eeb0 0a42 	vmov.f32	s0, s4
 81029f6:	eef0 0a62 	vmov.f32	s1, s5
 81029fa:	eeb0 1a46 	vmov.f32	s2, s12
 81029fe:	eef0 1a66 	vmov.f32	s3, s13
 8102a02:	eeb0 2a47 	vmov.f32	s4, s14
 8102a06:	eef0 2a67 	vmov.f32	s5, s15
 8102a0a:	f7fe ff8b 	bl	8101924 <vdiff>
 8102a0e:	eeb0 5a40 	vmov.f32	s10, s0
 8102a12:	eef0 5a60 	vmov.f32	s11, s1
 8102a16:	eeb0 6a41 	vmov.f32	s12, s2
 8102a1a:	eef0 6a61 	vmov.f32	s13, s3
 8102a1e:	eeb0 7a42 	vmov.f32	s14, s4
 8102a22:	eef0 7a62 	vmov.f32	s15, s5
 8102a26:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102a2a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8102a2e:	ed83 5b00 	vstr	d5, [r3]
 8102a32:	ed83 6b02 	vstr	d6, [r3, #8]
 8102a36:	ed83 7b04 	vstr	d7, [r3, #16]
    t = vnorm(ey); // scalar t21
 8102a3a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102a3e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8102a42:	ed93 5b00 	vldr	d5, [r3]
 8102a46:	ed93 6b02 	vldr	d6, [r3, #8]
 8102a4a:	ed93 7b04 	vldr	d7, [r3, #16]
 8102a4e:	eeb0 0a45 	vmov.f32	s0, s10
 8102a52:	eef0 0a65 	vmov.f32	s1, s11
 8102a56:	eeb0 1a46 	vmov.f32	s2, s12
 8102a5a:	eef0 1a66 	vmov.f32	s3, s13
 8102a5e:	eeb0 2a47 	vmov.f32	s4, s14
 8102a62:	eef0 2a67 	vmov.f32	s5, s15
 8102a66:	f7ff f8c5 	bl	8101bf4 <vnorm>
 8102a6a:	ed87 0b90 	vstr	d0, [r7, #576]	@ 0x240
    if (t > maxzero)
 8102a6e:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 8102a72:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 8102a76:	f7fe f8d7 	bl	8100c28 <__aeabi_dcmpgt>
 8102a7a:	4603      	mov	r3, r0
 8102a7c:	2b00      	cmp	r3, #0
 8102a7e:	d054      	beq.n	8102b2a <trilateration+0x55a>
    {
        /* ey = (t1 - t2) / |t1 - t2| */
        ey = vdiv(ey, t); // unit vector ey with respect to p1 (new coordinate system)
 8102a80:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102a84:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8102a88:	ed93 5b00 	vldr	d5, [r3]
 8102a8c:	ed93 6b02 	vldr	d6, [r3, #8]
 8102a90:	ed93 7b04 	vldr	d7, [r3, #16]
 8102a94:	ed97 3b90 	vldr	d3, [r7, #576]	@ 0x240
 8102a98:	eeb0 0a45 	vmov.f32	s0, s10
 8102a9c:	eef0 0a65 	vmov.f32	s1, s11
 8102aa0:	eeb0 1a46 	vmov.f32	s2, s12
 8102aa4:	eef0 1a66 	vmov.f32	s3, s13
 8102aa8:	eeb0 2a47 	vmov.f32	s4, s14
 8102aac:	eef0 2a67 	vmov.f32	s5, s15
 8102ab0:	f7ff f846 	bl	8101b40 <vdiv>
 8102ab4:	eeb0 5a40 	vmov.f32	s10, s0
 8102ab8:	eef0 5a60 	vmov.f32	s11, s1
 8102abc:	eeb0 6a41 	vmov.f32	s12, s2
 8102ac0:	eef0 6a61 	vmov.f32	s13, s3
 8102ac4:	eeb0 7a42 	vmov.f32	s14, s4
 8102ac8:	eef0 7a62 	vmov.f32	s15, s5
 8102acc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102ad0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8102ad4:	ed83 5b00 	vstr	d5, [r3]
 8102ad8:	ed83 6b02 	vstr	d6, [r3, #8]
 8102adc:	ed83 7b04 	vstr	d7, [r3, #16]

        /* j = ey . (p3 - p1) */
        j = dot(ey, t1); // scalar t1 on the ey direction
 8102ae0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102ae4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8102ae8:	ed93 3b00 	vldr	d3, [r3]
 8102aec:	ed93 4b02 	vldr	d4, [r3, #8]
 8102af0:	ed93 5b04 	vldr	d5, [r3, #16]
 8102af4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102af8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8102afc:	ed93 2b00 	vldr	d2, [r3]
 8102b00:	ed93 6b02 	vldr	d6, [r3, #8]
 8102b04:	ed93 7b04 	vldr	d7, [r3, #16]
 8102b08:	eeb0 0a42 	vmov.f32	s0, s4
 8102b0c:	eef0 0a62 	vmov.f32	s1, s5
 8102b10:	eeb0 1a46 	vmov.f32	s2, s12
 8102b14:	eef0 1a66 	vmov.f32	s3, s13
 8102b18:	eeb0 2a47 	vmov.f32	s4, s14
 8102b1c:	eef0 2a67 	vmov.f32	s5, s15
 8102b20:	f7ff f8b8 	bl	8101c94 <dot>
 8102b24:	ed87 0b9e 	vstr	d0, [r7, #632]	@ 0x278
 8102b28:	e005      	b.n	8102b36 <trilateration+0x566>
    }
    else
        j = 0.0;
 8102b2a:	f04f 0200 	mov.w	r2, #0
 8102b2e:	f04f 0300 	mov.w	r3, #0
 8102b32:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278

    /* Note: t <= maxzero implies j = 0.0. */
    if (fabs(j) <= maxzero)
 8102b36:	f8d7 4278 	ldr.w	r4, [r7, #632]	@ 0x278
 8102b3a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8102b3e:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8102b42:	4622      	mov	r2, r4
 8102b44:	462b      	mov	r3, r5
 8102b46:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8102b4a:	f7fe f863 	bl	8100c14 <__aeabi_dcmpge>
 8102b4e:	4603      	mov	r3, r0
 8102b50:	2b00      	cmp	r3, #0
 8102b52:	f000 82c7 	beq.w	81030e4 <trilateration+0xb14>
    {

        /* Is point p1 + (r1 along the axis) the intersection? */
        t2 = vsum(p1, vmul(ex, r1));
 8102b56:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8102b5a:	461a      	mov	r2, r3
 8102b5c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102b60:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8102b64:	ed93 5b00 	vldr	d5, [r3]
 8102b68:	ed93 6b02 	vldr	d6, [r3, #8]
 8102b6c:	ed93 7b04 	vldr	d7, [r3, #16]
 8102b70:	ed12 3b02 	vldr	d3, [r2, #-8]
 8102b74:	eeb0 0a45 	vmov.f32	s0, s10
 8102b78:	eef0 0a65 	vmov.f32	s1, s11
 8102b7c:	eeb0 1a46 	vmov.f32	s2, s12
 8102b80:	eef0 1a66 	vmov.f32	s3, s13
 8102b84:	eeb0 2a47 	vmov.f32	s4, s14
 8102b88:	eef0 2a67 	vmov.f32	s5, s15
 8102b8c:	f7fe ff7e 	bl	8101a8c <vmul>
 8102b90:	eeb0 5a40 	vmov.f32	s10, s0
 8102b94:	eef0 5a60 	vmov.f32	s11, s1
 8102b98:	eeb0 6a41 	vmov.f32	s12, s2
 8102b9c:	eef0 6a61 	vmov.f32	s13, s3
 8102ba0:	eeb0 7a42 	vmov.f32	s14, s4
 8102ba4:	eef0 7a62 	vmov.f32	s15, s5
 8102ba8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102bac:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8102bb0:	ed83 5b00 	vstr	d5, [r3]
 8102bb4:	ed83 6b02 	vstr	d6, [r3, #8]
 8102bb8:	ed83 7b04 	vstr	d7, [r3, #16]
 8102bbc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102bc0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8102bc4:	ed93 3b00 	vldr	d3, [r3]
 8102bc8:	ed93 4b02 	vldr	d4, [r3, #8]
 8102bcc:	ed93 5b04 	vldr	d5, [r3, #16]
 8102bd0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102bd4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8102bd8:	ed93 2b00 	vldr	d2, [r3]
 8102bdc:	ed93 6b02 	vldr	d6, [r3, #8]
 8102be0:	ed93 7b04 	vldr	d7, [r3, #16]
 8102be4:	eeb0 0a42 	vmov.f32	s0, s4
 8102be8:	eef0 0a62 	vmov.f32	s1, s5
 8102bec:	eeb0 1a46 	vmov.f32	s2, s12
 8102bf0:	eef0 1a66 	vmov.f32	s3, s13
 8102bf4:	eeb0 2a47 	vmov.f32	s4, s14
 8102bf8:	eef0 2a67 	vmov.f32	s5, s15
 8102bfc:	f7fe feec 	bl	81019d8 <vsum>
 8102c00:	eeb0 5a40 	vmov.f32	s10, s0
 8102c04:	eef0 5a60 	vmov.f32	s11, s1
 8102c08:	eeb0 6a41 	vmov.f32	s12, s2
 8102c0c:	eef0 6a61 	vmov.f32	s13, s3
 8102c10:	eeb0 7a42 	vmov.f32	s14, s4
 8102c14:	eef0 7a62 	vmov.f32	s15, s5
 8102c18:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102c1c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8102c20:	ed83 5b00 	vstr	d5, [r3]
 8102c24:	ed83 6b02 	vstr	d6, [r3, #8]
 8102c28:	ed83 7b04 	vstr	d7, [r3, #16]
        if (fabs(vnorm(vdiff(p2, t2)) - r2) <= maxzero &&
 8102c2c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102c30:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8102c34:	ed93 3b00 	vldr	d3, [r3]
 8102c38:	ed93 4b02 	vldr	d4, [r3, #8]
 8102c3c:	ed93 5b04 	vldr	d5, [r3, #16]
 8102c40:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102c44:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8102c48:	ed93 2b00 	vldr	d2, [r3]
 8102c4c:	ed93 6b02 	vldr	d6, [r3, #8]
 8102c50:	ed93 7b04 	vldr	d7, [r3, #16]
 8102c54:	eeb0 0a42 	vmov.f32	s0, s4
 8102c58:	eef0 0a62 	vmov.f32	s1, s5
 8102c5c:	eeb0 1a46 	vmov.f32	s2, s12
 8102c60:	eef0 1a66 	vmov.f32	s3, s13
 8102c64:	eeb0 2a47 	vmov.f32	s4, s14
 8102c68:	eef0 2a67 	vmov.f32	s5, s15
 8102c6c:	f7fe fe5a 	bl	8101924 <vdiff>
 8102c70:	eeb0 5a40 	vmov.f32	s10, s0
 8102c74:	eef0 5a60 	vmov.f32	s11, s1
 8102c78:	eeb0 6a41 	vmov.f32	s12, s2
 8102c7c:	eef0 6a61 	vmov.f32	s13, s3
 8102c80:	eeb0 7a42 	vmov.f32	s14, s4
 8102c84:	eef0 7a62 	vmov.f32	s15, s5
 8102c88:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102c8c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8102c90:	ed83 5b00 	vstr	d5, [r3]
 8102c94:	ed83 6b02 	vstr	d6, [r3, #8]
 8102c98:	ed83 7b04 	vstr	d7, [r3, #16]
 8102c9c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102ca0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8102ca4:	ed93 5b00 	vldr	d5, [r3]
 8102ca8:	ed93 6b02 	vldr	d6, [r3, #8]
 8102cac:	ed93 7b04 	vldr	d7, [r3, #16]
 8102cb0:	eeb0 0a45 	vmov.f32	s0, s10
 8102cb4:	eef0 0a65 	vmov.f32	s1, s11
 8102cb8:	eeb0 1a46 	vmov.f32	s2, s12
 8102cbc:	eef0 1a66 	vmov.f32	s3, s13
 8102cc0:	eeb0 2a47 	vmov.f32	s4, s14
 8102cc4:	eef0 2a67 	vmov.f32	s5, s15
 8102cc8:	f7fe ff94 	bl	8101bf4 <vnorm>
 8102ccc:	ec51 0b10 	vmov	r0, r1, d0
 8102cd0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8102cd4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8102cd8:	f7fd fb5e 	bl	8100398 <__aeabi_dsub>
 8102cdc:	4602      	mov	r2, r0
 8102cde:	460b      	mov	r3, r1
 8102ce0:	4690      	mov	r8, r2
 8102ce2:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8102ce6:	4642      	mov	r2, r8
 8102ce8:	464b      	mov	r3, r9
 8102cea:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8102cee:	f7fd ff91 	bl	8100c14 <__aeabi_dcmpge>
 8102cf2:	4603      	mov	r3, r0
 8102cf4:	2b00      	cmp	r3, #0
 8102cf6:	f000 8094 	beq.w	8102e22 <trilateration+0x852>
            fabs(vnorm(vdiff(p3, t2)) - r3) <= maxzero)
 8102cfa:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102cfe:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8102d02:	ed93 3b00 	vldr	d3, [r3]
 8102d06:	ed93 4b02 	vldr	d4, [r3, #8]
 8102d0a:	ed93 5b04 	vldr	d5, [r3, #16]
 8102d0e:	ed97 2baa 	vldr	d2, [r7, #680]	@ 0x2a8
 8102d12:	ed97 6bac 	vldr	d6, [r7, #688]	@ 0x2b0
 8102d16:	ed97 7bae 	vldr	d7, [r7, #696]	@ 0x2b8
 8102d1a:	eeb0 0a42 	vmov.f32	s0, s4
 8102d1e:	eef0 0a62 	vmov.f32	s1, s5
 8102d22:	eeb0 1a46 	vmov.f32	s2, s12
 8102d26:	eef0 1a66 	vmov.f32	s3, s13
 8102d2a:	eeb0 2a47 	vmov.f32	s4, s14
 8102d2e:	eef0 2a67 	vmov.f32	s5, s15
 8102d32:	f7fe fdf7 	bl	8101924 <vdiff>
 8102d36:	eeb0 5a40 	vmov.f32	s10, s0
 8102d3a:	eef0 5a60 	vmov.f32	s11, s1
 8102d3e:	eeb0 6a41 	vmov.f32	s12, s2
 8102d42:	eef0 6a61 	vmov.f32	s13, s3
 8102d46:	eeb0 7a42 	vmov.f32	s14, s4
 8102d4a:	eef0 7a62 	vmov.f32	s15, s5
 8102d4e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102d52:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8102d56:	ed83 5b00 	vstr	d5, [r3]
 8102d5a:	ed83 6b02 	vstr	d6, [r3, #8]
 8102d5e:	ed83 7b04 	vstr	d7, [r3, #16]
 8102d62:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102d66:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8102d6a:	ed93 5b00 	vldr	d5, [r3]
 8102d6e:	ed93 6b02 	vldr	d6, [r3, #8]
 8102d72:	ed93 7b04 	vldr	d7, [r3, #16]
 8102d76:	eeb0 0a45 	vmov.f32	s0, s10
 8102d7a:	eef0 0a65 	vmov.f32	s1, s11
 8102d7e:	eeb0 1a46 	vmov.f32	s2, s12
 8102d82:	eef0 1a66 	vmov.f32	s3, s13
 8102d86:	eeb0 2a47 	vmov.f32	s4, s14
 8102d8a:	eef0 2a67 	vmov.f32	s5, s15
 8102d8e:	f7fe ff31 	bl	8101bf4 <vnorm>
 8102d92:	ec51 0b10 	vmov	r0, r1, d0
 8102d96:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8102d9a:	f7fd fafd 	bl	8100398 <__aeabi_dsub>
 8102d9e:	4602      	mov	r2, r0
 8102da0:	460b      	mov	r3, r1
 8102da2:	633a      	str	r2, [r7, #48]	@ 0x30
 8102da4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8102da8:	637b      	str	r3, [r7, #52]	@ 0x34
        if (fabs(vnorm(vdiff(p2, t2)) - r2) <= maxzero &&
 8102daa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8102dae:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8102db2:	f7fd ff2f 	bl	8100c14 <__aeabi_dcmpge>
 8102db6:	4603      	mov	r3, r0
 8102db8:	2b00      	cmp	r3, #0
 8102dba:	d032      	beq.n	8102e22 <trilateration+0x852>
        {
            /* Yes, t2 is the only intersection point. */
            if (result1)
 8102dbc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102dc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8102dc4:	681b      	ldr	r3, [r3, #0]
 8102dc6:	2b00      	cmp	r3, #0
 8102dc8:	d010      	beq.n	8102dec <trilateration+0x81c>
                *result1 = t2;
 8102dca:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102dce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8102dd2:	681a      	ldr	r2, [r3, #0]
 8102dd4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102dd8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8102ddc:	4614      	mov	r4, r2
 8102dde:	461d      	mov	r5, r3
 8102de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8102de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102de4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8102de8:	e884 0003 	stmia.w	r4, {r0, r1}
            if (result2)
 8102dec:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102df0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8102df4:	681b      	ldr	r3, [r3, #0]
 8102df6:	2b00      	cmp	r3, #0
 8102df8:	d010      	beq.n	8102e1c <trilateration+0x84c>
                *result2 = t2;
 8102dfa:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102dfe:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8102e02:	681a      	ldr	r2, [r3, #0]
 8102e04:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102e08:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8102e0c:	4614      	mov	r4, r2
 8102e0e:	461d      	mov	r5, r3
 8102e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8102e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102e14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8102e18:	e884 0003 	stmia.w	r4, {r0, r1}
            return TRIL_3SPHERES;
 8102e1c:	2303      	movs	r3, #3
 8102e1e:	f001 be85 	b.w	8104b2c <trilateration+0x255c>
        }

        /* Is point p1 - (r1 along the axis) the intersection? */
        t2 = vsum(p1, vmul(ex, -r1));
 8102e22:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8102e26:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8102e2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8102e2c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8102e30:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8102e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8102e36:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102e3a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8102e3e:	ed93 5b00 	vldr	d5, [r3]
 8102e42:	ed93 6b02 	vldr	d6, [r3, #8]
 8102e46:	ed93 7b04 	vldr	d7, [r3, #16]
 8102e4a:	ed97 3b0a 	vldr	d3, [r7, #40]	@ 0x28
 8102e4e:	eeb0 0a45 	vmov.f32	s0, s10
 8102e52:	eef0 0a65 	vmov.f32	s1, s11
 8102e56:	eeb0 1a46 	vmov.f32	s2, s12
 8102e5a:	eef0 1a66 	vmov.f32	s3, s13
 8102e5e:	eeb0 2a47 	vmov.f32	s4, s14
 8102e62:	eef0 2a67 	vmov.f32	s5, s15
 8102e66:	f7fe fe11 	bl	8101a8c <vmul>
 8102e6a:	eeb0 5a40 	vmov.f32	s10, s0
 8102e6e:	eef0 5a60 	vmov.f32	s11, s1
 8102e72:	eeb0 6a41 	vmov.f32	s12, s2
 8102e76:	eef0 6a61 	vmov.f32	s13, s3
 8102e7a:	eeb0 7a42 	vmov.f32	s14, s4
 8102e7e:	eef0 7a62 	vmov.f32	s15, s5
 8102e82:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102e86:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8102e8a:	ed83 5b00 	vstr	d5, [r3]
 8102e8e:	ed83 6b02 	vstr	d6, [r3, #8]
 8102e92:	ed83 7b04 	vstr	d7, [r3, #16]
 8102e96:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102e9a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8102e9e:	ed93 3b00 	vldr	d3, [r3]
 8102ea2:	ed93 4b02 	vldr	d4, [r3, #8]
 8102ea6:	ed93 5b04 	vldr	d5, [r3, #16]
 8102eaa:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102eae:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8102eb2:	ed93 2b00 	vldr	d2, [r3]
 8102eb6:	ed93 6b02 	vldr	d6, [r3, #8]
 8102eba:	ed93 7b04 	vldr	d7, [r3, #16]
 8102ebe:	eeb0 0a42 	vmov.f32	s0, s4
 8102ec2:	eef0 0a62 	vmov.f32	s1, s5
 8102ec6:	eeb0 1a46 	vmov.f32	s2, s12
 8102eca:	eef0 1a66 	vmov.f32	s3, s13
 8102ece:	eeb0 2a47 	vmov.f32	s4, s14
 8102ed2:	eef0 2a67 	vmov.f32	s5, s15
 8102ed6:	f7fe fd7f 	bl	81019d8 <vsum>
 8102eda:	eeb0 5a40 	vmov.f32	s10, s0
 8102ede:	eef0 5a60 	vmov.f32	s11, s1
 8102ee2:	eeb0 6a41 	vmov.f32	s12, s2
 8102ee6:	eef0 6a61 	vmov.f32	s13, s3
 8102eea:	eeb0 7a42 	vmov.f32	s14, s4
 8102eee:	eef0 7a62 	vmov.f32	s15, s5
 8102ef2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102ef6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8102efa:	ed83 5b00 	vstr	d5, [r3]
 8102efe:	ed83 6b02 	vstr	d6, [r3, #8]
 8102f02:	ed83 7b04 	vstr	d7, [r3, #16]
        if (fabs(vnorm(vdiff(p2, t2)) - r2) <= maxzero &&
 8102f06:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102f0a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8102f0e:	ed93 3b00 	vldr	d3, [r3]
 8102f12:	ed93 4b02 	vldr	d4, [r3, #8]
 8102f16:	ed93 5b04 	vldr	d5, [r3, #16]
 8102f1a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102f1e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8102f22:	ed93 2b00 	vldr	d2, [r3]
 8102f26:	ed93 6b02 	vldr	d6, [r3, #8]
 8102f2a:	ed93 7b04 	vldr	d7, [r3, #16]
 8102f2e:	eeb0 0a42 	vmov.f32	s0, s4
 8102f32:	eef0 0a62 	vmov.f32	s1, s5
 8102f36:	eeb0 1a46 	vmov.f32	s2, s12
 8102f3a:	eef0 1a66 	vmov.f32	s3, s13
 8102f3e:	eeb0 2a47 	vmov.f32	s4, s14
 8102f42:	eef0 2a67 	vmov.f32	s5, s15
 8102f46:	f7fe fced 	bl	8101924 <vdiff>
 8102f4a:	eeb0 5a40 	vmov.f32	s10, s0
 8102f4e:	eef0 5a60 	vmov.f32	s11, s1
 8102f52:	eeb0 6a41 	vmov.f32	s12, s2
 8102f56:	eef0 6a61 	vmov.f32	s13, s3
 8102f5a:	eeb0 7a42 	vmov.f32	s14, s4
 8102f5e:	eef0 7a62 	vmov.f32	s15, s5
 8102f62:	ed87 5b62 	vstr	d5, [r7, #392]	@ 0x188
 8102f66:	ed87 6b64 	vstr	d6, [r7, #400]	@ 0x190
 8102f6a:	ed87 7b66 	vstr	d7, [r7, #408]	@ 0x198
 8102f6e:	ed97 5b62 	vldr	d5, [r7, #392]	@ 0x188
 8102f72:	ed97 6b64 	vldr	d6, [r7, #400]	@ 0x190
 8102f76:	ed97 7b66 	vldr	d7, [r7, #408]	@ 0x198
 8102f7a:	eeb0 0a45 	vmov.f32	s0, s10
 8102f7e:	eef0 0a65 	vmov.f32	s1, s11
 8102f82:	eeb0 1a46 	vmov.f32	s2, s12
 8102f86:	eef0 1a66 	vmov.f32	s3, s13
 8102f8a:	eeb0 2a47 	vmov.f32	s4, s14
 8102f8e:	eef0 2a67 	vmov.f32	s5, s15
 8102f92:	f7fe fe2f 	bl	8101bf4 <vnorm>
 8102f96:	ec51 0b10 	vmov	r0, r1, d0
 8102f9a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8102f9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8102fa2:	f7fd f9f9 	bl	8100398 <__aeabi_dsub>
 8102fa6:	4602      	mov	r2, r0
 8102fa8:	460b      	mov	r3, r1
 8102faa:	623a      	str	r2, [r7, #32]
 8102fac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8102fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8102fb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8102fb6:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8102fba:	f7fd fe2b 	bl	8100c14 <__aeabi_dcmpge>
 8102fbe:	4603      	mov	r3, r0
 8102fc0:	2b00      	cmp	r3, #0
 8102fc2:	f000 808b 	beq.w	81030dc <trilateration+0xb0c>
            fabs(vnorm(vdiff(p3, t2)) - r3) <= maxzero)
 8102fc6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8102fca:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8102fce:	ed93 3b00 	vldr	d3, [r3]
 8102fd2:	ed93 4b02 	vldr	d4, [r3, #8]
 8102fd6:	ed93 5b04 	vldr	d5, [r3, #16]
 8102fda:	ed97 2baa 	vldr	d2, [r7, #680]	@ 0x2a8
 8102fde:	ed97 6bac 	vldr	d6, [r7, #688]	@ 0x2b0
 8102fe2:	ed97 7bae 	vldr	d7, [r7, #696]	@ 0x2b8
 8102fe6:	eeb0 0a42 	vmov.f32	s0, s4
 8102fea:	eef0 0a62 	vmov.f32	s1, s5
 8102fee:	eeb0 1a46 	vmov.f32	s2, s12
 8102ff2:	eef0 1a66 	vmov.f32	s3, s13
 8102ff6:	eeb0 2a47 	vmov.f32	s4, s14
 8102ffa:	eef0 2a67 	vmov.f32	s5, s15
 8102ffe:	f7fe fc91 	bl	8101924 <vdiff>
 8103002:	eeb0 5a40 	vmov.f32	s10, s0
 8103006:	eef0 5a60 	vmov.f32	s11, s1
 810300a:	eeb0 6a41 	vmov.f32	s12, s2
 810300e:	eef0 6a61 	vmov.f32	s13, s3
 8103012:	eeb0 7a42 	vmov.f32	s14, s4
 8103016:	eef0 7a62 	vmov.f32	s15, s5
 810301a:	ed87 5b68 	vstr	d5, [r7, #416]	@ 0x1a0
 810301e:	ed87 6b6a 	vstr	d6, [r7, #424]	@ 0x1a8
 8103022:	ed87 7b6c 	vstr	d7, [r7, #432]	@ 0x1b0
 8103026:	ed97 5b68 	vldr	d5, [r7, #416]	@ 0x1a0
 810302a:	ed97 6b6a 	vldr	d6, [r7, #424]	@ 0x1a8
 810302e:	ed97 7b6c 	vldr	d7, [r7, #432]	@ 0x1b0
 8103032:	eeb0 0a45 	vmov.f32	s0, s10
 8103036:	eef0 0a65 	vmov.f32	s1, s11
 810303a:	eeb0 1a46 	vmov.f32	s2, s12
 810303e:	eef0 1a66 	vmov.f32	s3, s13
 8103042:	eeb0 2a47 	vmov.f32	s4, s14
 8103046:	eef0 2a67 	vmov.f32	s5, s15
 810304a:	f7fe fdd3 	bl	8101bf4 <vnorm>
 810304e:	ec51 0b10 	vmov	r0, r1, d0
 8103052:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8103056:	f7fd f99f 	bl	8100398 <__aeabi_dsub>
 810305a:	4602      	mov	r2, r0
 810305c:	460b      	mov	r3, r1
 810305e:	4692      	mov	sl, r2
 8103060:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
        if (fabs(vnorm(vdiff(p2, t2)) - r2) <= maxzero &&
 8103064:	4652      	mov	r2, sl
 8103066:	465b      	mov	r3, fp
 8103068:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 810306c:	f7fd fdd2 	bl	8100c14 <__aeabi_dcmpge>
 8103070:	4603      	mov	r3, r0
 8103072:	2b00      	cmp	r3, #0
 8103074:	d032      	beq.n	81030dc <trilateration+0xb0c>
        {
            /* Yes, t2 is the only intersection point. */
            if (result1)
 8103076:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810307a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 810307e:	681b      	ldr	r3, [r3, #0]
 8103080:	2b00      	cmp	r3, #0
 8103082:	d010      	beq.n	81030a6 <trilateration+0xad6>
                *result1 = t2;
 8103084:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103088:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 810308c:	681a      	ldr	r2, [r3, #0]
 810308e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103092:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8103096:	4614      	mov	r4, r2
 8103098:	461d      	mov	r5, r3
 810309a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810309c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810309e:	e895 0003 	ldmia.w	r5, {r0, r1}
 81030a2:	e884 0003 	stmia.w	r4, {r0, r1}
            if (result2)
 81030a6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81030aa:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 81030ae:	681b      	ldr	r3, [r3, #0]
 81030b0:	2b00      	cmp	r3, #0
 81030b2:	d010      	beq.n	81030d6 <trilateration+0xb06>
                *result2 = t2;
 81030b4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81030b8:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 81030bc:	681a      	ldr	r2, [r3, #0]
 81030be:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81030c2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 81030c6:	4614      	mov	r4, r2
 81030c8:	461d      	mov	r5, r3
 81030ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81030cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81030ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 81030d2:	e884 0003 	stmia.w	r4, {r0, r1}
            return TRIL_3SPHERES;
 81030d6:	2303      	movs	r3, #3
 81030d8:	f001 bd28 	b.w	8104b2c <trilateration+0x255c>
        }
        /* p1, p2 and p3 are colinear with more than one solution */
        return ERR_TRIL_COLINEAR_2SOLUTIONS;
 81030dc:	f06f 0301 	mvn.w	r3, #1
 81030e0:	f001 bd24 	b.w	8104b2c <trilateration+0x255c>
    }

    /* ez = ex x ey */
    ez = cross(ex, ey); // unit vector ez with respect to p1 (new coordinate system)
 81030e4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81030e8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 81030ec:	ed93 3b00 	vldr	d3, [r3]
 81030f0:	ed93 4b02 	vldr	d4, [r3, #8]
 81030f4:	ed93 5b04 	vldr	d5, [r3, #16]
 81030f8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81030fc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8103100:	ed93 2b00 	vldr	d2, [r3]
 8103104:	ed93 6b02 	vldr	d6, [r3, #8]
 8103108:	ed93 7b04 	vldr	d7, [r3, #16]
 810310c:	eeb0 0a42 	vmov.f32	s0, s4
 8103110:	eef0 0a62 	vmov.f32	s1, s5
 8103114:	eeb0 1a46 	vmov.f32	s2, s12
 8103118:	eef0 1a66 	vmov.f32	s3, s13
 810311c:	eeb0 2a47 	vmov.f32	s4, s14
 8103120:	eef0 2a67 	vmov.f32	s5, s15
 8103124:	f7fe fdfe 	bl	8101d24 <cross>
 8103128:	eeb0 5a40 	vmov.f32	s10, s0
 810312c:	eef0 5a60 	vmov.f32	s11, s1
 8103130:	eeb0 6a41 	vmov.f32	s12, s2
 8103134:	eef0 6a61 	vmov.f32	s13, s3
 8103138:	eeb0 7a42 	vmov.f32	s14, s4
 810313c:	eef0 7a62 	vmov.f32	s15, s5
 8103140:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103144:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8103148:	ed83 5b00 	vstr	d5, [r3]
 810314c:	ed83 6b02 	vstr	d6, [r3, #8]
 8103150:	ed83 7b04 	vstr	d7, [r3, #16]

    x = (r1*r1 - r2*r2) / (2*h) + h / 2;
 8103154:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8103158:	4619      	mov	r1, r3
 810315a:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 810315e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8103162:	f7fd fad1 	bl	8100708 <__aeabi_dmul>
 8103166:	4602      	mov	r2, r0
 8103168:	460b      	mov	r3, r1
 810316a:	4614      	mov	r4, r2
 810316c:	461d      	mov	r5, r3
 810316e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8103172:	4619      	mov	r1, r3
 8103174:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 8103178:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 810317c:	f7fd fac4 	bl	8100708 <__aeabi_dmul>
 8103180:	4602      	mov	r2, r0
 8103182:	460b      	mov	r3, r1
 8103184:	4620      	mov	r0, r4
 8103186:	4629      	mov	r1, r5
 8103188:	f7fd f906 	bl	8100398 <__aeabi_dsub>
 810318c:	4602      	mov	r2, r0
 810318e:	460b      	mov	r3, r1
 8103190:	4614      	mov	r4, r2
 8103192:	461d      	mov	r5, r3
 8103194:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 8103198:	4602      	mov	r2, r0
 810319a:	460b      	mov	r3, r1
 810319c:	f7fd f8fe 	bl	810039c <__adddf3>
 81031a0:	4602      	mov	r2, r0
 81031a2:	460b      	mov	r3, r1
 81031a4:	4620      	mov	r0, r4
 81031a6:	4629      	mov	r1, r5
 81031a8:	f7fd fbd8 	bl	810095c <__aeabi_ddiv>
 81031ac:	4602      	mov	r2, r0
 81031ae:	460b      	mov	r3, r1
 81031b0:	4614      	mov	r4, r2
 81031b2:	461d      	mov	r5, r3
 81031b4:	f04f 0200 	mov.w	r2, #0
 81031b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 81031bc:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 81031c0:	f7fd fbcc 	bl	810095c <__aeabi_ddiv>
 81031c4:	4602      	mov	r2, r0
 81031c6:	460b      	mov	r3, r1
 81031c8:	4620      	mov	r0, r4
 81031ca:	4629      	mov	r1, r5
 81031cc:	f7fd f8e6 	bl	810039c <__adddf3>
 81031d0:	4602      	mov	r2, r0
 81031d2:	460b      	mov	r3, r1
 81031d4:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
    y = (r1*r1 - r3*r3 + i*i) / (2*j) + j / 2 - x * i / j;
 81031d8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 81031dc:	4619      	mov	r1, r3
 81031de:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 81031e2:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 81031e6:	f7fd fa8f 	bl	8100708 <__aeabi_dmul>
 81031ea:	4602      	mov	r2, r0
 81031ec:	460b      	mov	r3, r1
 81031ee:	4614      	mov	r4, r2
 81031f0:	461d      	mov	r5, r3
 81031f2:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 81031f6:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 81031fa:	f7fd fa85 	bl	8100708 <__aeabi_dmul>
 81031fe:	4602      	mov	r2, r0
 8103200:	460b      	mov	r3, r1
 8103202:	4620      	mov	r0, r4
 8103204:	4629      	mov	r1, r5
 8103206:	f7fd f8c7 	bl	8100398 <__aeabi_dsub>
 810320a:	4602      	mov	r2, r0
 810320c:	460b      	mov	r3, r1
 810320e:	4614      	mov	r4, r2
 8103210:	461d      	mov	r5, r3
 8103212:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	@ 0x248
 8103216:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 810321a:	f7fd fa75 	bl	8100708 <__aeabi_dmul>
 810321e:	4602      	mov	r2, r0
 8103220:	460b      	mov	r3, r1
 8103222:	4620      	mov	r0, r4
 8103224:	4629      	mov	r1, r5
 8103226:	f7fd f8b9 	bl	810039c <__adddf3>
 810322a:	4602      	mov	r2, r0
 810322c:	460b      	mov	r3, r1
 810322e:	4614      	mov	r4, r2
 8103230:	461d      	mov	r5, r3
 8103232:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8103236:	4602      	mov	r2, r0
 8103238:	460b      	mov	r3, r1
 810323a:	f7fd f8af 	bl	810039c <__adddf3>
 810323e:	4602      	mov	r2, r0
 8103240:	460b      	mov	r3, r1
 8103242:	4620      	mov	r0, r4
 8103244:	4629      	mov	r1, r5
 8103246:	f7fd fb89 	bl	810095c <__aeabi_ddiv>
 810324a:	4602      	mov	r2, r0
 810324c:	460b      	mov	r3, r1
 810324e:	4614      	mov	r4, r2
 8103250:	461d      	mov	r5, r3
 8103252:	f04f 0200 	mov.w	r2, #0
 8103256:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 810325a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 810325e:	f7fd fb7d 	bl	810095c <__aeabi_ddiv>
 8103262:	4602      	mov	r2, r0
 8103264:	460b      	mov	r3, r1
 8103266:	4620      	mov	r0, r4
 8103268:	4629      	mov	r1, r5
 810326a:	f7fd f897 	bl	810039c <__adddf3>
 810326e:	4602      	mov	r2, r0
 8103270:	460b      	mov	r3, r1
 8103272:	4614      	mov	r4, r2
 8103274:	461d      	mov	r5, r3
 8103276:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	@ 0x248
 810327a:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
 810327e:	f7fd fa43 	bl	8100708 <__aeabi_dmul>
 8103282:	4602      	mov	r2, r0
 8103284:	460b      	mov	r3, r1
 8103286:	4610      	mov	r0, r2
 8103288:	4619      	mov	r1, r3
 810328a:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	@ 0x278
 810328e:	f7fd fb65 	bl	810095c <__aeabi_ddiv>
 8103292:	4602      	mov	r2, r0
 8103294:	460b      	mov	r3, r1
 8103296:	4620      	mov	r0, r4
 8103298:	4629      	mov	r1, r5
 810329a:	f7fd f87d 	bl	8100398 <__aeabi_dsub>
 810329e:	4602      	mov	r2, r0
 81032a0:	460b      	mov	r3, r1
 81032a2:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
    z = r1*r1 - x*x - y*y;
 81032a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 81032aa:	4619      	mov	r1, r3
 81032ac:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 81032b0:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 81032b4:	f7fd fa28 	bl	8100708 <__aeabi_dmul>
 81032b8:	4602      	mov	r2, r0
 81032ba:	460b      	mov	r3, r1
 81032bc:	4614      	mov	r4, r2
 81032be:	461d      	mov	r5, r3
 81032c0:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 81032c4:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
 81032c8:	f7fd fa1e 	bl	8100708 <__aeabi_dmul>
 81032cc:	4602      	mov	r2, r0
 81032ce:	460b      	mov	r3, r1
 81032d0:	4620      	mov	r0, r4
 81032d2:	4629      	mov	r1, r5
 81032d4:	f7fd f860 	bl	8100398 <__aeabi_dsub>
 81032d8:	4602      	mov	r2, r0
 81032da:	460b      	mov	r3, r1
 81032dc:	4614      	mov	r4, r2
 81032de:	461d      	mov	r5, r3
 81032e0:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	@ 0x230
 81032e4:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 81032e8:	f7fd fa0e 	bl	8100708 <__aeabi_dmul>
 81032ec:	4602      	mov	r2, r0
 81032ee:	460b      	mov	r3, r1
 81032f0:	4620      	mov	r0, r4
 81032f2:	4629      	mov	r1, r5
 81032f4:	f7fd f850 	bl	8100398 <__aeabi_dsub>
 81032f8:	4602      	mov	r2, r0
 81032fa:	460b      	mov	r3, r1
 81032fc:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
    if (z < -maxzero-100)
 8103300:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8103304:	61bb      	str	r3, [r7, #24]
 8103306:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 810330a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 810330e:	61fb      	str	r3, [r7, #28]
 8103310:	f04f 0200 	mov.w	r2, #0
 8103314:	4b11      	ldr	r3, [pc, #68]	@ (810335c <trilateration+0xd8c>)
 8103316:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 810331a:	f7fd f83d 	bl	8100398 <__aeabi_dsub>
 810331e:	4602      	mov	r2, r0
 8103320:	460b      	mov	r3, r1
 8103322:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 8103326:	f7fd fc61 	bl	8100bec <__aeabi_dcmplt>
 810332a:	4603      	mov	r3, r0
 810332c:	2b00      	cmp	r3, #0
 810332e:	d003      	beq.n	8103338 <trilateration+0xd68>
    {
        /* The solution is invalid, square root of negative number */
        return ERR_TRIL_SQRTNEGNUMB;
 8103330:	f06f 0302 	mvn.w	r3, #2
 8103334:	f001 bbfa 	b.w	8104b2c <trilateration+0x255c>
    }
    else if (z > 0.0)
 8103338:	f04f 0200 	mov.w	r2, #0
 810333c:	f04f 0300 	mov.w	r3, #0
 8103340:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 8103344:	f7fd fc70 	bl	8100c28 <__aeabi_dcmpgt>
 8103348:	4603      	mov	r3, r0
 810334a:	2b00      	cmp	r3, #0
 810334c:	d008      	beq.n	8103360 <trilateration+0xd90>
        z = sqrt(z);
 810334e:	ed97 0b9c 	vldr	d0, [r7, #624]	@ 0x270
 8103352:	f00f fcb7 	bl	8112cc4 <sqrt>
 8103356:	ed87 0b9c 	vstr	d0, [r7, #624]	@ 0x270
 810335a:	e007      	b.n	810336c <trilateration+0xd9c>
 810335c:	40590000 	.word	0x40590000
    else
        z = 0.0;
 8103360:	f04f 0200 	mov.w	r2, #0
 8103364:	f04f 0300 	mov.w	r3, #0
 8103368:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270

    /* t2 = p1 + x ex + y ey */
    t2 = vsum(p1, vmul(ex, x));
 810336c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103370:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8103374:	ed93 5b00 	vldr	d5, [r3]
 8103378:	ed93 6b02 	vldr	d6, [r3, #8]
 810337c:	ed93 7b04 	vldr	d7, [r3, #16]
 8103380:	ed97 3b8e 	vldr	d3, [r7, #568]	@ 0x238
 8103384:	eeb0 0a45 	vmov.f32	s0, s10
 8103388:	eef0 0a65 	vmov.f32	s1, s11
 810338c:	eeb0 1a46 	vmov.f32	s2, s12
 8103390:	eef0 1a66 	vmov.f32	s3, s13
 8103394:	eeb0 2a47 	vmov.f32	s4, s14
 8103398:	eef0 2a67 	vmov.f32	s5, s15
 810339c:	f7fe fb76 	bl	8101a8c <vmul>
 81033a0:	eeb0 5a40 	vmov.f32	s10, s0
 81033a4:	eef0 5a60 	vmov.f32	s11, s1
 81033a8:	eeb0 6a41 	vmov.f32	s12, s2
 81033ac:	eef0 6a61 	vmov.f32	s13, s3
 81033b0:	eeb0 7a42 	vmov.f32	s14, s4
 81033b4:	eef0 7a62 	vmov.f32	s15, s5
 81033b8:	ed87 5b6e 	vstr	d5, [r7, #440]	@ 0x1b8
 81033bc:	ed87 6b70 	vstr	d6, [r7, #448]	@ 0x1c0
 81033c0:	ed87 7b72 	vstr	d7, [r7, #456]	@ 0x1c8
 81033c4:	ed97 3b6e 	vldr	d3, [r7, #440]	@ 0x1b8
 81033c8:	ed97 4b70 	vldr	d4, [r7, #448]	@ 0x1c0
 81033cc:	ed97 5b72 	vldr	d5, [r7, #456]	@ 0x1c8
 81033d0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81033d4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 81033d8:	ed93 2b00 	vldr	d2, [r3]
 81033dc:	ed93 6b02 	vldr	d6, [r3, #8]
 81033e0:	ed93 7b04 	vldr	d7, [r3, #16]
 81033e4:	eeb0 0a42 	vmov.f32	s0, s4
 81033e8:	eef0 0a62 	vmov.f32	s1, s5
 81033ec:	eeb0 1a46 	vmov.f32	s2, s12
 81033f0:	eef0 1a66 	vmov.f32	s3, s13
 81033f4:	eeb0 2a47 	vmov.f32	s4, s14
 81033f8:	eef0 2a67 	vmov.f32	s5, s15
 81033fc:	f7fe faec 	bl	81019d8 <vsum>
 8103400:	eeb0 5a40 	vmov.f32	s10, s0
 8103404:	eef0 5a60 	vmov.f32	s11, s1
 8103408:	eeb0 6a41 	vmov.f32	s12, s2
 810340c:	eef0 6a61 	vmov.f32	s13, s3
 8103410:	eeb0 7a42 	vmov.f32	s14, s4
 8103414:	eef0 7a62 	vmov.f32	s15, s5
 8103418:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810341c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8103420:	ed83 5b00 	vstr	d5, [r3]
 8103424:	ed83 6b02 	vstr	d6, [r3, #8]
 8103428:	ed83 7b04 	vstr	d7, [r3, #16]
    t2 = vsum(t2, vmul(ey, y));
 810342c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103430:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8103434:	ed93 5b00 	vldr	d5, [r3]
 8103438:	ed93 6b02 	vldr	d6, [r3, #8]
 810343c:	ed93 7b04 	vldr	d7, [r3, #16]
 8103440:	ed97 3b8c 	vldr	d3, [r7, #560]	@ 0x230
 8103444:	eeb0 0a45 	vmov.f32	s0, s10
 8103448:	eef0 0a65 	vmov.f32	s1, s11
 810344c:	eeb0 1a46 	vmov.f32	s2, s12
 8103450:	eef0 1a66 	vmov.f32	s3, s13
 8103454:	eeb0 2a47 	vmov.f32	s4, s14
 8103458:	eef0 2a67 	vmov.f32	s5, s15
 810345c:	f7fe fb16 	bl	8101a8c <vmul>
 8103460:	eeb0 5a40 	vmov.f32	s10, s0
 8103464:	eef0 5a60 	vmov.f32	s11, s1
 8103468:	eeb0 6a41 	vmov.f32	s12, s2
 810346c:	eef0 6a61 	vmov.f32	s13, s3
 8103470:	eeb0 7a42 	vmov.f32	s14, s4
 8103474:	eef0 7a62 	vmov.f32	s15, s5
 8103478:	ed87 5b74 	vstr	d5, [r7, #464]	@ 0x1d0
 810347c:	ed87 6b76 	vstr	d6, [r7, #472]	@ 0x1d8
 8103480:	ed87 7b78 	vstr	d7, [r7, #480]	@ 0x1e0
 8103484:	ed97 3b74 	vldr	d3, [r7, #464]	@ 0x1d0
 8103488:	ed97 4b76 	vldr	d4, [r7, #472]	@ 0x1d8
 810348c:	ed97 5b78 	vldr	d5, [r7, #480]	@ 0x1e0
 8103490:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103494:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8103498:	ed93 2b00 	vldr	d2, [r3]
 810349c:	ed93 6b02 	vldr	d6, [r3, #8]
 81034a0:	ed93 7b04 	vldr	d7, [r3, #16]
 81034a4:	eeb0 0a42 	vmov.f32	s0, s4
 81034a8:	eef0 0a62 	vmov.f32	s1, s5
 81034ac:	eeb0 1a46 	vmov.f32	s2, s12
 81034b0:	eef0 1a66 	vmov.f32	s3, s13
 81034b4:	eeb0 2a47 	vmov.f32	s4, s14
 81034b8:	eef0 2a67 	vmov.f32	s5, s15
 81034bc:	f7fe fa8c 	bl	81019d8 <vsum>
 81034c0:	eeb0 5a40 	vmov.f32	s10, s0
 81034c4:	eef0 5a60 	vmov.f32	s11, s1
 81034c8:	eeb0 6a41 	vmov.f32	s12, s2
 81034cc:	eef0 6a61 	vmov.f32	s13, s3
 81034d0:	eeb0 7a42 	vmov.f32	s14, s4
 81034d4:	eef0 7a62 	vmov.f32	s15, s5
 81034d8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81034dc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 81034e0:	ed83 5b00 	vstr	d5, [r3]
 81034e4:	ed83 6b02 	vstr	d6, [r3, #8]
 81034e8:	ed83 7b04 	vstr	d7, [r3, #16]

    /* result1 = p1 + x ex + y ey + z ez */
    if (result1)
 81034ec:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81034f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 81034f4:	681b      	ldr	r3, [r3, #0]
 81034f6:	2b00      	cmp	r3, #0
 81034f8:	d060      	beq.n	81035bc <trilateration+0xfec>
        *result1 = vsum(t2, vmul(ez, z));
 81034fa:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81034fe:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8103502:	ed93 5b00 	vldr	d5, [r3]
 8103506:	ed93 6b02 	vldr	d6, [r3, #8]
 810350a:	ed93 7b04 	vldr	d7, [r3, #16]
 810350e:	ed97 3b9c 	vldr	d3, [r7, #624]	@ 0x270
 8103512:	eeb0 0a45 	vmov.f32	s0, s10
 8103516:	eef0 0a65 	vmov.f32	s1, s11
 810351a:	eeb0 1a46 	vmov.f32	s2, s12
 810351e:	eef0 1a66 	vmov.f32	s3, s13
 8103522:	eeb0 2a47 	vmov.f32	s4, s14
 8103526:	eef0 2a67 	vmov.f32	s5, s15
 810352a:	f7fe faaf 	bl	8101a8c <vmul>
 810352e:	eeb0 5a40 	vmov.f32	s10, s0
 8103532:	eef0 5a60 	vmov.f32	s11, s1
 8103536:	eeb0 6a41 	vmov.f32	s12, s2
 810353a:	eef0 6a61 	vmov.f32	s13, s3
 810353e:	eeb0 7a42 	vmov.f32	s14, s4
 8103542:	eef0 7a62 	vmov.f32	s15, s5
 8103546:	ed87 5b7a 	vstr	d5, [r7, #488]	@ 0x1e8
 810354a:	ed87 6b7c 	vstr	d6, [r7, #496]	@ 0x1f0
 810354e:	ed87 7b7e 	vstr	d7, [r7, #504]	@ 0x1f8
 8103552:	ed97 3b7a 	vldr	d3, [r7, #488]	@ 0x1e8
 8103556:	ed97 4b7c 	vldr	d4, [r7, #496]	@ 0x1f0
 810355a:	ed97 5b7e 	vldr	d5, [r7, #504]	@ 0x1f8
 810355e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103562:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8103566:	ed93 2b00 	vldr	d2, [r3]
 810356a:	ed93 6b02 	vldr	d6, [r3, #8]
 810356e:	ed93 7b04 	vldr	d7, [r3, #16]
 8103572:	eeb0 0a42 	vmov.f32	s0, s4
 8103576:	eef0 0a62 	vmov.f32	s1, s5
 810357a:	eeb0 1a46 	vmov.f32	s2, s12
 810357e:	eef0 1a66 	vmov.f32	s3, s13
 8103582:	eeb0 2a47 	vmov.f32	s4, s14
 8103586:	eef0 2a67 	vmov.f32	s5, s15
 810358a:	f7fe fa25 	bl	81019d8 <vsum>
 810358e:	eeb0 5a40 	vmov.f32	s10, s0
 8103592:	eef0 5a60 	vmov.f32	s11, s1
 8103596:	eeb0 6a41 	vmov.f32	s12, s2
 810359a:	eef0 6a61 	vmov.f32	s13, s3
 810359e:	eeb0 7a42 	vmov.f32	s14, s4
 81035a2:	eef0 7a62 	vmov.f32	s15, s5
 81035a6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81035aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 81035ae:	681b      	ldr	r3, [r3, #0]
 81035b0:	ed83 5b00 	vstr	d5, [r3]
 81035b4:	ed83 6b02 	vstr	d6, [r3, #8]
 81035b8:	ed83 7b04 	vstr	d7, [r3, #16]

    /* result1 = p1 + x ex + y ey - z ez */
    if (result2)
 81035bc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81035c0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 81035c4:	681b      	ldr	r3, [r3, #0]
 81035c6:	2b00      	cmp	r3, #0
 81035c8:	d068      	beq.n	810369c <trilateration+0x10cc>
        *result2 = vsum(t2, vmul(ez, -z));
 81035ca:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 81035ce:	613b      	str	r3, [r7, #16]
 81035d0:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 81035d4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 81035d8:	617b      	str	r3, [r7, #20]
 81035da:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81035de:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 81035e2:	ed93 5b00 	vldr	d5, [r3]
 81035e6:	ed93 6b02 	vldr	d6, [r3, #8]
 81035ea:	ed93 7b04 	vldr	d7, [r3, #16]
 81035ee:	ed97 3b04 	vldr	d3, [r7, #16]
 81035f2:	eeb0 0a45 	vmov.f32	s0, s10
 81035f6:	eef0 0a65 	vmov.f32	s1, s11
 81035fa:	eeb0 1a46 	vmov.f32	s2, s12
 81035fe:	eef0 1a66 	vmov.f32	s3, s13
 8103602:	eeb0 2a47 	vmov.f32	s4, s14
 8103606:	eef0 2a67 	vmov.f32	s5, s15
 810360a:	f7fe fa3f 	bl	8101a8c <vmul>
 810360e:	eeb0 5a40 	vmov.f32	s10, s0
 8103612:	eef0 5a60 	vmov.f32	s11, s1
 8103616:	eeb0 6a41 	vmov.f32	s12, s2
 810361a:	eef0 6a61 	vmov.f32	s13, s3
 810361e:	eeb0 7a42 	vmov.f32	s14, s4
 8103622:	eef0 7a62 	vmov.f32	s15, s5
 8103626:	ed87 5b80 	vstr	d5, [r7, #512]	@ 0x200
 810362a:	ed87 6b82 	vstr	d6, [r7, #520]	@ 0x208
 810362e:	ed87 7b84 	vstr	d7, [r7, #528]	@ 0x210
 8103632:	ed97 3b80 	vldr	d3, [r7, #512]	@ 0x200
 8103636:	ed97 4b82 	vldr	d4, [r7, #520]	@ 0x208
 810363a:	ed97 5b84 	vldr	d5, [r7, #528]	@ 0x210
 810363e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103642:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8103646:	ed93 2b00 	vldr	d2, [r3]
 810364a:	ed93 6b02 	vldr	d6, [r3, #8]
 810364e:	ed93 7b04 	vldr	d7, [r3, #16]
 8103652:	eeb0 0a42 	vmov.f32	s0, s4
 8103656:	eef0 0a62 	vmov.f32	s1, s5
 810365a:	eeb0 1a46 	vmov.f32	s2, s12
 810365e:	eef0 1a66 	vmov.f32	s3, s13
 8103662:	eeb0 2a47 	vmov.f32	s4, s14
 8103666:	eef0 2a67 	vmov.f32	s5, s15
 810366a:	f7fe f9b5 	bl	81019d8 <vsum>
 810366e:	eeb0 5a40 	vmov.f32	s10, s0
 8103672:	eef0 5a60 	vmov.f32	s11, s1
 8103676:	eeb0 6a41 	vmov.f32	s12, s2
 810367a:	eef0 6a61 	vmov.f32	s13, s3
 810367e:	eeb0 7a42 	vmov.f32	s14, s4
 8103682:	eef0 7a62 	vmov.f32	s15, s5
 8103686:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810368a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 810368e:	681b      	ldr	r3, [r3, #0]
 8103690:	ed83 5b00 	vstr	d5, [r3]
 8103694:	ed83 6b02 	vstr	d6, [r3, #8]
 8103698:	ed83 7b04 	vstr	d7, [r3, #16]
    // check for concentricness of sphere 4 to sphere 1, 2 and 3
    // if it is concentric to one of them, then sphere 4 cannot be used
    // to determine the best solution and return -1

    /* h = |p4 - p1|, ex = (p4 - p1) / |p4 - p1| */
    ex = vdiff(p4, p1); // vector p14
 810369c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81036a0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 81036a4:	ed93 3b00 	vldr	d3, [r3]
 81036a8:	ed93 4b02 	vldr	d4, [r3, #8]
 81036ac:	ed93 5b04 	vldr	d5, [r3, #16]
 81036b0:	ed97 2bb2 	vldr	d2, [r7, #712]	@ 0x2c8
 81036b4:	ed97 6bb4 	vldr	d6, [r7, #720]	@ 0x2d0
 81036b8:	ed97 7bb6 	vldr	d7, [r7, #728]	@ 0x2d8
 81036bc:	eeb0 0a42 	vmov.f32	s0, s4
 81036c0:	eef0 0a62 	vmov.f32	s1, s5
 81036c4:	eeb0 1a46 	vmov.f32	s2, s12
 81036c8:	eef0 1a66 	vmov.f32	s3, s13
 81036cc:	eeb0 2a47 	vmov.f32	s4, s14
 81036d0:	eef0 2a67 	vmov.f32	s5, s15
 81036d4:	f7fe f926 	bl	8101924 <vdiff>
 81036d8:	eeb0 5a40 	vmov.f32	s10, s0
 81036dc:	eef0 5a60 	vmov.f32	s11, s1
 81036e0:	eeb0 6a41 	vmov.f32	s12, s2
 81036e4:	eef0 6a61 	vmov.f32	s13, s3
 81036e8:	eeb0 7a42 	vmov.f32	s14, s4
 81036ec:	eef0 7a62 	vmov.f32	s15, s5
 81036f0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81036f4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 81036f8:	ed83 5b00 	vstr	d5, [r3]
 81036fc:	ed83 6b02 	vstr	d6, [r3, #8]
 8103700:	ed83 7b04 	vstr	d7, [r3, #16]
    h = vnorm(ex); // scalar p14
 8103704:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103708:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 810370c:	ed93 5b00 	vldr	d5, [r3]
 8103710:	ed93 6b02 	vldr	d6, [r3, #8]
 8103714:	ed93 7b04 	vldr	d7, [r3, #16]
 8103718:	eeb0 0a45 	vmov.f32	s0, s10
 810371c:	eef0 0a65 	vmov.f32	s1, s11
 8103720:	eeb0 1a46 	vmov.f32	s2, s12
 8103724:	eef0 1a66 	vmov.f32	s3, s13
 8103728:	eeb0 2a47 	vmov.f32	s4, s14
 810372c:	eef0 2a67 	vmov.f32	s5, s15
 8103730:	f7fe fa60 	bl	8101bf4 <vnorm>
 8103734:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
    if (h <= maxzero)
 8103738:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 810373c:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 8103740:	f7fd fa5e 	bl	8100c00 <__aeabi_dcmple>
 8103744:	4603      	mov	r3, r0
 8103746:	2b00      	cmp	r3, #0
 8103748:	d002      	beq.n	8103750 <trilateration+0x1180>
    {
        /* p1 and p4 are concentric, not good to obtain a precise intersection point */
        //printf("concentric14 return 0\n");
        return TRIL_3SPHERES;
 810374a:	2303      	movs	r3, #3
 810374c:	f001 b9ee 	b.w	8104b2c <trilateration+0x255c>
    }
    /* h = |p4 - p2|, ex = (p4 - p2) / |p4 - p2| */
    ex = vdiff(p4, p2); // vector p24
 8103750:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103754:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8103758:	ed93 3b00 	vldr	d3, [r3]
 810375c:	ed93 4b02 	vldr	d4, [r3, #8]
 8103760:	ed93 5b04 	vldr	d5, [r3, #16]
 8103764:	ed97 2bb2 	vldr	d2, [r7, #712]	@ 0x2c8
 8103768:	ed97 6bb4 	vldr	d6, [r7, #720]	@ 0x2d0
 810376c:	ed97 7bb6 	vldr	d7, [r7, #728]	@ 0x2d8
 8103770:	eeb0 0a42 	vmov.f32	s0, s4
 8103774:	eef0 0a62 	vmov.f32	s1, s5
 8103778:	eeb0 1a46 	vmov.f32	s2, s12
 810377c:	eef0 1a66 	vmov.f32	s3, s13
 8103780:	eeb0 2a47 	vmov.f32	s4, s14
 8103784:	eef0 2a67 	vmov.f32	s5, s15
 8103788:	f7fe f8cc 	bl	8101924 <vdiff>
 810378c:	eeb0 5a40 	vmov.f32	s10, s0
 8103790:	eef0 5a60 	vmov.f32	s11, s1
 8103794:	eeb0 6a41 	vmov.f32	s12, s2
 8103798:	eef0 6a61 	vmov.f32	s13, s3
 810379c:	eeb0 7a42 	vmov.f32	s14, s4
 81037a0:	eef0 7a62 	vmov.f32	s15, s5
 81037a4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81037a8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 81037ac:	ed83 5b00 	vstr	d5, [r3]
 81037b0:	ed83 6b02 	vstr	d6, [r3, #8]
 81037b4:	ed83 7b04 	vstr	d7, [r3, #16]
    h = vnorm(ex); // scalar p24
 81037b8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81037bc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 81037c0:	ed93 5b00 	vldr	d5, [r3]
 81037c4:	ed93 6b02 	vldr	d6, [r3, #8]
 81037c8:	ed93 7b04 	vldr	d7, [r3, #16]
 81037cc:	eeb0 0a45 	vmov.f32	s0, s10
 81037d0:	eef0 0a65 	vmov.f32	s1, s11
 81037d4:	eeb0 1a46 	vmov.f32	s2, s12
 81037d8:	eef0 1a66 	vmov.f32	s3, s13
 81037dc:	eeb0 2a47 	vmov.f32	s4, s14
 81037e0:	eef0 2a67 	vmov.f32	s5, s15
 81037e4:	f7fe fa06 	bl	8101bf4 <vnorm>
 81037e8:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
    if (h <= maxzero)
 81037ec:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 81037f0:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 81037f4:	f7fd fa04 	bl	8100c00 <__aeabi_dcmple>
 81037f8:	4603      	mov	r3, r0
 81037fa:	2b00      	cmp	r3, #0
 81037fc:	d002      	beq.n	8103804 <trilateration+0x1234>
    {
        /* p2 and p4 are concentric, not good to obtain a precise intersection point */
        //printf("concentric24 return 0\n");
        return TRIL_3SPHERES;
 81037fe:	2303      	movs	r3, #3
 8103800:	f001 b994 	b.w	8104b2c <trilateration+0x255c>
    }
    /* h = |p4 - p3|, ex = (p4 - p3) / |p4 - p3| */
    ex = vdiff(p4, p3); // vector p34
 8103804:	ed97 3baa 	vldr	d3, [r7, #680]	@ 0x2a8
 8103808:	ed97 4bac 	vldr	d4, [r7, #688]	@ 0x2b0
 810380c:	ed97 5bae 	vldr	d5, [r7, #696]	@ 0x2b8
 8103810:	ed97 2bb2 	vldr	d2, [r7, #712]	@ 0x2c8
 8103814:	ed97 6bb4 	vldr	d6, [r7, #720]	@ 0x2d0
 8103818:	ed97 7bb6 	vldr	d7, [r7, #728]	@ 0x2d8
 810381c:	eeb0 0a42 	vmov.f32	s0, s4
 8103820:	eef0 0a62 	vmov.f32	s1, s5
 8103824:	eeb0 1a46 	vmov.f32	s2, s12
 8103828:	eef0 1a66 	vmov.f32	s3, s13
 810382c:	eeb0 2a47 	vmov.f32	s4, s14
 8103830:	eef0 2a67 	vmov.f32	s5, s15
 8103834:	f7fe f876 	bl	8101924 <vdiff>
 8103838:	eeb0 5a40 	vmov.f32	s10, s0
 810383c:	eef0 5a60 	vmov.f32	s11, s1
 8103840:	eeb0 6a41 	vmov.f32	s12, s2
 8103844:	eef0 6a61 	vmov.f32	s13, s3
 8103848:	eeb0 7a42 	vmov.f32	s14, s4
 810384c:	eef0 7a62 	vmov.f32	s15, s5
 8103850:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103854:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8103858:	ed83 5b00 	vstr	d5, [r3]
 810385c:	ed83 6b02 	vstr	d6, [r3, #8]
 8103860:	ed83 7b04 	vstr	d7, [r3, #16]
    h = vnorm(ex); // scalar p34
 8103864:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103868:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 810386c:	ed93 5b00 	vldr	d5, [r3]
 8103870:	ed93 6b02 	vldr	d6, [r3, #8]
 8103874:	ed93 7b04 	vldr	d7, [r3, #16]
 8103878:	eeb0 0a45 	vmov.f32	s0, s10
 810387c:	eef0 0a65 	vmov.f32	s1, s11
 8103880:	eeb0 1a46 	vmov.f32	s2, s12
 8103884:	eef0 1a66 	vmov.f32	s3, s13
 8103888:	eeb0 2a47 	vmov.f32	s4, s14
 810388c:	eef0 2a67 	vmov.f32	s5, s15
 8103890:	f7fe f9b0 	bl	8101bf4 <vnorm>
 8103894:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
    if (h <= maxzero)
 8103898:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 810389c:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 81038a0:	f7fd f9ae 	bl	8100c00 <__aeabi_dcmple>
 81038a4:	4603      	mov	r3, r0
 81038a6:	2b00      	cmp	r3, #0
 81038a8:	d002      	beq.n	81038b0 <trilateration+0x12e0>
    {
        /* p3 and p4 are concentric, not good to obtain a precise intersection point */
        //printf("concentric34 return 0\n");
        return TRIL_3SPHERES;
 81038aa:	2303      	movs	r3, #3
 81038ac:	f001 b93e 	b.w	8104b2c <trilateration+0x255c>
    }

    // if sphere 4 is not concentric to any sphere, then best solution can be obtained
    /* find i as the distance of result1 to p4 */
    t3 = vdiff(*result1, p4);
 81038b0:	ed97 3bb2 	vldr	d3, [r7, #712]	@ 0x2c8
 81038b4:	ed97 4bb4 	vldr	d4, [r7, #720]	@ 0x2d0
 81038b8:	ed97 5bb6 	vldr	d5, [r7, #728]	@ 0x2d8
 81038bc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81038c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 81038c4:	681b      	ldr	r3, [r3, #0]
 81038c6:	ed93 2b00 	vldr	d2, [r3]
 81038ca:	ed93 6b02 	vldr	d6, [r3, #8]
 81038ce:	ed93 7b04 	vldr	d7, [r3, #16]
 81038d2:	eeb0 0a42 	vmov.f32	s0, s4
 81038d6:	eef0 0a62 	vmov.f32	s1, s5
 81038da:	eeb0 1a46 	vmov.f32	s2, s12
 81038de:	eef0 1a66 	vmov.f32	s3, s13
 81038e2:	eeb0 2a47 	vmov.f32	s4, s14
 81038e6:	eef0 2a67 	vmov.f32	s5, s15
 81038ea:	f7fe f81b 	bl	8101924 <vdiff>
 81038ee:	eeb0 5a40 	vmov.f32	s10, s0
 81038f2:	eef0 5a60 	vmov.f32	s11, s1
 81038f6:	eeb0 6a41 	vmov.f32	s12, s2
 81038fa:	eef0 6a61 	vmov.f32	s13, s3
 81038fe:	eeb0 7a42 	vmov.f32	s14, s4
 8103902:	eef0 7a62 	vmov.f32	s15, s5
 8103906:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810390a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 810390e:	ed83 5b00 	vstr	d5, [r3]
 8103912:	ed83 6b02 	vstr	d6, [r3, #8]
 8103916:	ed83 7b04 	vstr	d7, [r3, #16]
    i = vnorm(t3);
 810391a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810391e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8103922:	ed93 5b00 	vldr	d5, [r3]
 8103926:	ed93 6b02 	vldr	d6, [r3, #8]
 810392a:	ed93 7b04 	vldr	d7, [r3, #16]
 810392e:	eeb0 0a45 	vmov.f32	s0, s10
 8103932:	eef0 0a65 	vmov.f32	s1, s11
 8103936:	eeb0 1a46 	vmov.f32	s2, s12
 810393a:	eef0 1a66 	vmov.f32	s3, s13
 810393e:	eeb0 2a47 	vmov.f32	s4, s14
 8103942:	eef0 2a67 	vmov.f32	s5, s15
 8103946:	f7fe f955 	bl	8101bf4 <vnorm>
 810394a:	ed87 0b92 	vstr	d0, [r7, #584]	@ 0x248
    /* find h as the distance of result2 to p4 */
    t3 = vdiff(*result2, p4);
 810394e:	ed97 3bb2 	vldr	d3, [r7, #712]	@ 0x2c8
 8103952:	ed97 4bb4 	vldr	d4, [r7, #720]	@ 0x2d0
 8103956:	ed97 5bb6 	vldr	d5, [r7, #728]	@ 0x2d8
 810395a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810395e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8103962:	681b      	ldr	r3, [r3, #0]
 8103964:	ed93 2b00 	vldr	d2, [r3]
 8103968:	ed93 6b02 	vldr	d6, [r3, #8]
 810396c:	ed93 7b04 	vldr	d7, [r3, #16]
 8103970:	eeb0 0a42 	vmov.f32	s0, s4
 8103974:	eef0 0a62 	vmov.f32	s1, s5
 8103978:	eeb0 1a46 	vmov.f32	s2, s12
 810397c:	eef0 1a66 	vmov.f32	s3, s13
 8103980:	eeb0 2a47 	vmov.f32	s4, s14
 8103984:	eef0 2a67 	vmov.f32	s5, s15
 8103988:	f7fd ffcc 	bl	8101924 <vdiff>
 810398c:	eeb0 5a40 	vmov.f32	s10, s0
 8103990:	eef0 5a60 	vmov.f32	s11, s1
 8103994:	eeb0 6a41 	vmov.f32	s12, s2
 8103998:	eef0 6a61 	vmov.f32	s13, s3
 810399c:	eeb0 7a42 	vmov.f32	s14, s4
 81039a0:	eef0 7a62 	vmov.f32	s15, s5
 81039a4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81039a8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 81039ac:	ed83 5b00 	vstr	d5, [r3]
 81039b0:	ed83 6b02 	vstr	d6, [r3, #8]
 81039b4:	ed83 7b04 	vstr	d7, [r3, #16]
    h = vnorm(t3);
 81039b8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81039bc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 81039c0:	ed93 5b00 	vldr	d5, [r3]
 81039c4:	ed93 6b02 	vldr	d6, [r3, #8]
 81039c8:	ed93 7b04 	vldr	d7, [r3, #16]
 81039cc:	eeb0 0a45 	vmov.f32	s0, s10
 81039d0:	eef0 0a65 	vmov.f32	s1, s11
 81039d4:	eeb0 1a46 	vmov.f32	s2, s12
 81039d8:	eef0 1a66 	vmov.f32	s3, s13
 81039dc:	eeb0 2a47 	vmov.f32	s4, s14
 81039e0:	eef0 2a67 	vmov.f32	s5, s15
 81039e4:	f7fe f906 	bl	8101bf4 <vnorm>
 81039e8:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250

    /* pick the result1 as the nearest point to the center of sphere 4 */
    if (i > h)
 81039ec:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 81039f0:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 81039f4:	f7fd f918 	bl	8100c28 <__aeabi_dcmpgt>
 81039f8:	4603      	mov	r3, r0
 81039fa:	2b00      	cmp	r3, #0
 81039fc:	d035      	beq.n	8103a6a <trilateration+0x149a>
    {
        *best_solution = *result1;
 81039fe:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103a02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8103a06:	681a      	ldr	r2, [r3, #0]
 8103a08:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103a0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8103a10:	681b      	ldr	r3, [r3, #0]
 8103a12:	4614      	mov	r4, r2
 8103a14:	461d      	mov	r5, r3
 8103a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103a1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8103a1e:	e884 0003 	stmia.w	r4, {r0, r1}
        *result1 = *result2;
 8103a22:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103a26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8103a2a:	681a      	ldr	r2, [r3, #0]
 8103a2c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103a30:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8103a34:	681b      	ldr	r3, [r3, #0]
 8103a36:	4614      	mov	r4, r2
 8103a38:	461d      	mov	r5, r3
 8103a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103a3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8103a42:	e884 0003 	stmia.w	r4, {r0, r1}
        *result2 = *best_solution;
 8103a46:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103a4a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8103a4e:	681a      	ldr	r2, [r3, #0]
 8103a50:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103a54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8103a58:	681b      	ldr	r3, [r3, #0]
 8103a5a:	4614      	mov	r4, r2
 8103a5c:	461d      	mov	r5, r3
 8103a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103a62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8103a66:	e884 0003 	stmia.w	r4, {r0, r1}
    }

    int count4 = 0;
 8103a6a:	2300      	movs	r3, #0
 8103a6c:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
    double rr4 = r4;
 8103a70:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 8103a74:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
    result = 1;
 8103a78:	2301      	movs	r3, #1
 8103a7a:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
    /* intersect result1-result2 vector with sphere 4 */
    while(result && count4 < 10)
 8103a7e:	e048      	b.n	8103b12 <trilateration+0x1542>
    {
        result=sphereline(*result1, *result2, p4, rr4, &mu1, &mu2);
 8103a80:	f107 0c88 	add.w	ip, r7, #136	@ 0x88
 8103a84:	f107 0690 	add.w	r6, r7, #144	@ 0x90
 8103a88:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103a8c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8103a90:	681b      	ldr	r3, [r3, #0]
 8103a92:	ed93 3b00 	vldr	d3, [r3]
 8103a96:	ed93 4b02 	vldr	d4, [r3, #8]
 8103a9a:	ed93 5b04 	vldr	d5, [r3, #16]
 8103a9e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103aa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8103aa6:	681b      	ldr	r3, [r3, #0]
 8103aa8:	ed93 2b00 	vldr	d2, [r3]
 8103aac:	ed93 6b02 	vldr	d6, [r3, #8]
 8103ab0:	ed93 7b04 	vldr	d7, [r3, #16]
 8103ab4:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 8103ab8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8103abc:	466d      	mov	r5, sp
 8103abe:	f507 7432 	add.w	r4, r7, #712	@ 0x2c8
 8103ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8103ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8103ac6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8103aca:	e885 0003 	stmia.w	r5, {r0, r1}
 8103ace:	4661      	mov	r1, ip
 8103ad0:	4630      	mov	r0, r6
 8103ad2:	eeb0 0a42 	vmov.f32	s0, s4
 8103ad6:	eef0 0a62 	vmov.f32	s1, s5
 8103ada:	eeb0 1a46 	vmov.f32	s2, s12
 8103ade:	eef0 1a66 	vmov.f32	s3, s13
 8103ae2:	eeb0 2a47 	vmov.f32	s4, s14
 8103ae6:	eef0 2a67 	vmov.f32	s5, s15
 8103aea:	f7fe fb8d 	bl	8102208 <sphereline>
 8103aee:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
        rr4+=0.1;
 8103af2:	a3eb      	add	r3, pc, #940	@ (adr r3, 8103ea0 <trilateration+0x18d0>)
 8103af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103af8:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 8103afc:	f7fc fc4e 	bl	810039c <__adddf3>
 8103b00:	4602      	mov	r2, r0
 8103b02:	460b      	mov	r3, r1
 8103b04:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
        count4++;
 8103b08:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8103b0c:	3301      	adds	r3, #1
 8103b0e:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
    while(result && count4 < 10)
 8103b12:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8103b16:	2b00      	cmp	r3, #0
 8103b18:	d003      	beq.n	8103b22 <trilateration+0x1552>
 8103b1a:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8103b1e:	2b09      	cmp	r3, #9
 8103b20:	ddae      	ble.n	8103a80 <trilateration+0x14b0>
    }

    if (result)
 8103b22:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8103b26:	2b00      	cmp	r3, #0
 8103b28:	d013      	beq.n	8103b52 <trilateration+0x1582>
    {

        /* No intersection between sphere 4 and the line with the gradient of result1-result2! */
        *best_solution = *result1; // result1 is the closer solution to sphere 4
 8103b2a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103b2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8103b32:	681a      	ldr	r2, [r3, #0]
 8103b34:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103b38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8103b3c:	681b      	ldr	r3, [r3, #0]
 8103b3e:	4614      	mov	r4, r2
 8103b40:	461d      	mov	r5, r3
 8103b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103b46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8103b4a:	e884 0003 	stmia.w	r4, {r0, r1}
 8103b4e:	f000 bfec 	b.w	8104b2a <trilateration+0x255a>

    }
    else
    {

        if (mu1 < 0 && mu2 < 0)
 8103b52:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8103b56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8103b5a:	f04f 0200 	mov.w	r2, #0
 8103b5e:	f04f 0300 	mov.w	r3, #0
 8103b62:	f7fd f843 	bl	8100bec <__aeabi_dcmplt>
 8103b66:	4603      	mov	r3, r0
 8103b68:	2b00      	cmp	r3, #0
 8103b6a:	f000 814b 	beq.w	8103e04 <trilateration+0x1834>
 8103b6e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8103b72:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8103b76:	f04f 0200 	mov.w	r2, #0
 8103b7a:	f04f 0300 	mov.w	r3, #0
 8103b7e:	f7fd f835 	bl	8100bec <__aeabi_dcmplt>
 8103b82:	4603      	mov	r3, r0
 8103b84:	2b00      	cmp	r3, #0
 8103b86:	f000 813d 	beq.w	8103e04 <trilateration+0x1834>
        {

            /* if both mu1 and mu2 are less than 0 */
            /* result1-result2 line segment is outside sphere 4 with no intersection */
            if (fabs(mu1) <= fabs(mu2)) mu = mu1;
 8103b8a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8103b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b92:	60ba      	str	r2, [r7, #8]
 8103b94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8103b98:	60fb      	str	r3, [r7, #12]
 8103b9a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8103b9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8103ba2:	603a      	str	r2, [r7, #0]
 8103ba4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8103ba8:	607b      	str	r3, [r7, #4]
 8103baa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103bae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8103bb2:	f7fd f825 	bl	8100c00 <__aeabi_dcmple>
 8103bb6:	4603      	mov	r3, r0
 8103bb8:	2b00      	cmp	r3, #0
 8103bba:	d006      	beq.n	8103bca <trilateration+0x15fa>
 8103bbc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8103bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103bc4:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
 8103bc8:	e005      	b.n	8103bd6 <trilateration+0x1606>
            else mu = mu2;
 8103bca:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8103bce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8103bd2:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* h = |result2 - result1|, ex = (result2 - result1) / |result2 - result1| */
            ex = vdiff(*result2, *result1); // vector result1-result2
 8103bd6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103bda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8103bde:	681b      	ldr	r3, [r3, #0]
 8103be0:	ed93 3b00 	vldr	d3, [r3]
 8103be4:	ed93 4b02 	vldr	d4, [r3, #8]
 8103be8:	ed93 5b04 	vldr	d5, [r3, #16]
 8103bec:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103bf0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8103bf4:	681b      	ldr	r3, [r3, #0]
 8103bf6:	ed93 2b00 	vldr	d2, [r3]
 8103bfa:	ed93 6b02 	vldr	d6, [r3, #8]
 8103bfe:	ed93 7b04 	vldr	d7, [r3, #16]
 8103c02:	eeb0 0a42 	vmov.f32	s0, s4
 8103c06:	eef0 0a62 	vmov.f32	s1, s5
 8103c0a:	eeb0 1a46 	vmov.f32	s2, s12
 8103c0e:	eef0 1a66 	vmov.f32	s3, s13
 8103c12:	eeb0 2a47 	vmov.f32	s4, s14
 8103c16:	eef0 2a67 	vmov.f32	s5, s15
 8103c1a:	f7fd fe83 	bl	8101924 <vdiff>
 8103c1e:	eeb0 5a40 	vmov.f32	s10, s0
 8103c22:	eef0 5a60 	vmov.f32	s11, s1
 8103c26:	eeb0 6a41 	vmov.f32	s12, s2
 8103c2a:	eef0 6a61 	vmov.f32	s13, s3
 8103c2e:	eeb0 7a42 	vmov.f32	s14, s4
 8103c32:	eef0 7a62 	vmov.f32	s15, s5
 8103c36:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103c3a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8103c3e:	ed83 5b00 	vstr	d5, [r3]
 8103c42:	ed83 6b02 	vstr	d6, [r3, #8]
 8103c46:	ed83 7b04 	vstr	d7, [r3, #16]
            h = vnorm(ex); // scalar result1-result2
 8103c4a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103c4e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8103c52:	ed93 5b00 	vldr	d5, [r3]
 8103c56:	ed93 6b02 	vldr	d6, [r3, #8]
 8103c5a:	ed93 7b04 	vldr	d7, [r3, #16]
 8103c5e:	eeb0 0a45 	vmov.f32	s0, s10
 8103c62:	eef0 0a65 	vmov.f32	s1, s11
 8103c66:	eeb0 1a46 	vmov.f32	s2, s12
 8103c6a:	eef0 1a66 	vmov.f32	s3, s13
 8103c6e:	eeb0 2a47 	vmov.f32	s4, s14
 8103c72:	eef0 2a67 	vmov.f32	s5, s15
 8103c76:	f7fd ffbd 	bl	8101bf4 <vnorm>
 8103c7a:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
            ex = vdiv(ex, h); // unit vector ex with respect to result1 (new coordinate system)
 8103c7e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103c82:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8103c86:	ed93 5b00 	vldr	d5, [r3]
 8103c8a:	ed93 6b02 	vldr	d6, [r3, #8]
 8103c8e:	ed93 7b04 	vldr	d7, [r3, #16]
 8103c92:	ed97 3b94 	vldr	d3, [r7, #592]	@ 0x250
 8103c96:	eeb0 0a45 	vmov.f32	s0, s10
 8103c9a:	eef0 0a65 	vmov.f32	s1, s11
 8103c9e:	eeb0 1a46 	vmov.f32	s2, s12
 8103ca2:	eef0 1a66 	vmov.f32	s3, s13
 8103ca6:	eeb0 2a47 	vmov.f32	s4, s14
 8103caa:	eef0 2a67 	vmov.f32	s5, s15
 8103cae:	f7fd ff47 	bl	8101b40 <vdiv>
 8103cb2:	eeb0 5a40 	vmov.f32	s10, s0
 8103cb6:	eef0 5a60 	vmov.f32	s11, s1
 8103cba:	eeb0 6a41 	vmov.f32	s12, s2
 8103cbe:	eef0 6a61 	vmov.f32	s13, s3
 8103cc2:	eeb0 7a42 	vmov.f32	s14, s4
 8103cc6:	eef0 7a62 	vmov.f32	s15, s5
 8103cca:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103cce:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8103cd2:	ed83 5b00 	vstr	d5, [r3]
 8103cd6:	ed83 6b02 	vstr	d6, [r3, #8]
 8103cda:	ed83 7b04 	vstr	d7, [r3, #16]
            /* 50-50 error correction for mu */
            mu = 0.5*mu;
 8103cde:	f04f 0200 	mov.w	r2, #0
 8103ce2:	4b6d      	ldr	r3, [pc, #436]	@ (8103e98 <trilateration+0x18c8>)
 8103ce4:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8103ce8:	f7fc fd0e 	bl	8100708 <__aeabi_dmul>
 8103cec:	4602      	mov	r2, r0
 8103cee:	460b      	mov	r3, r1
 8103cf0:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* t2 points to the intersection */
            t2 = vmul(ex, mu*h);
 8103cf4:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 8103cf8:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8103cfc:	f7fc fd04 	bl	8100708 <__aeabi_dmul>
 8103d00:	4602      	mov	r2, r0
 8103d02:	460b      	mov	r3, r1
 8103d04:	ec43 2b14 	vmov	d4, r2, r3
 8103d08:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103d0c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8103d10:	ed93 5b00 	vldr	d5, [r3]
 8103d14:	ed93 6b02 	vldr	d6, [r3, #8]
 8103d18:	ed93 7b04 	vldr	d7, [r3, #16]
 8103d1c:	eeb0 3a44 	vmov.f32	s6, s8
 8103d20:	eef0 3a64 	vmov.f32	s7, s9
 8103d24:	eeb0 0a45 	vmov.f32	s0, s10
 8103d28:	eef0 0a65 	vmov.f32	s1, s11
 8103d2c:	eeb0 1a46 	vmov.f32	s2, s12
 8103d30:	eef0 1a66 	vmov.f32	s3, s13
 8103d34:	eeb0 2a47 	vmov.f32	s4, s14
 8103d38:	eef0 2a67 	vmov.f32	s5, s15
 8103d3c:	f7fd fea6 	bl	8101a8c <vmul>
 8103d40:	eeb0 5a40 	vmov.f32	s10, s0
 8103d44:	eef0 5a60 	vmov.f32	s11, s1
 8103d48:	eeb0 6a41 	vmov.f32	s12, s2
 8103d4c:	eef0 6a61 	vmov.f32	s13, s3
 8103d50:	eeb0 7a42 	vmov.f32	s14, s4
 8103d54:	eef0 7a62 	vmov.f32	s15, s5
 8103d58:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103d5c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8103d60:	ed83 5b00 	vstr	d5, [r3]
 8103d64:	ed83 6b02 	vstr	d6, [r3, #8]
 8103d68:	ed83 7b04 	vstr	d7, [r3, #16]
            t2 = vsum(*result1, t2);
 8103d6c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103d70:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8103d74:	ed93 3b00 	vldr	d3, [r3]
 8103d78:	ed93 4b02 	vldr	d4, [r3, #8]
 8103d7c:	ed93 5b04 	vldr	d5, [r3, #16]
 8103d80:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103d84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8103d88:	681b      	ldr	r3, [r3, #0]
 8103d8a:	ed93 2b00 	vldr	d2, [r3]
 8103d8e:	ed93 6b02 	vldr	d6, [r3, #8]
 8103d92:	ed93 7b04 	vldr	d7, [r3, #16]
 8103d96:	eeb0 0a42 	vmov.f32	s0, s4
 8103d9a:	eef0 0a62 	vmov.f32	s1, s5
 8103d9e:	eeb0 1a46 	vmov.f32	s2, s12
 8103da2:	eef0 1a66 	vmov.f32	s3, s13
 8103da6:	eeb0 2a47 	vmov.f32	s4, s14
 8103daa:	eef0 2a67 	vmov.f32	s5, s15
 8103dae:	f7fd fe13 	bl	81019d8 <vsum>
 8103db2:	eeb0 5a40 	vmov.f32	s10, s0
 8103db6:	eef0 5a60 	vmov.f32	s11, s1
 8103dba:	eeb0 6a41 	vmov.f32	s12, s2
 8103dbe:	eef0 6a61 	vmov.f32	s13, s3
 8103dc2:	eeb0 7a42 	vmov.f32	s14, s4
 8103dc6:	eef0 7a62 	vmov.f32	s15, s5
 8103dca:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103dce:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8103dd2:	ed83 5b00 	vstr	d5, [r3]
 8103dd6:	ed83 6b02 	vstr	d6, [r3, #8]
 8103dda:	ed83 7b04 	vstr	d7, [r3, #16]
            /* the best solution = t2 */
            *best_solution = t2;
 8103dde:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103de2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8103de6:	681a      	ldr	r2, [r3, #0]
 8103de8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103dec:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8103df0:	4614      	mov	r4, r2
 8103df2:	461d      	mov	r5, r3
 8103df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103df8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8103dfc:	e884 0003 	stmia.w	r4, {r0, r1}
 8103e00:	f000 be93 	b.w	8104b2a <trilateration+0x255a>

        }
        else if ((mu1 < 0 && mu2 > 1) || (mu2 < 0 && mu1 > 1))
 8103e04:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8103e08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8103e0c:	f04f 0200 	mov.w	r2, #0
 8103e10:	f04f 0300 	mov.w	r3, #0
 8103e14:	f7fc feea 	bl	8100bec <__aeabi_dcmplt>
 8103e18:	4603      	mov	r3, r0
 8103e1a:	2b00      	cmp	r3, #0
 8103e1c:	d00b      	beq.n	8103e36 <trilateration+0x1866>
 8103e1e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8103e22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8103e26:	f04f 0200 	mov.w	r2, #0
 8103e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8103e9c <trilateration+0x18cc>)
 8103e2c:	f7fc fefc 	bl	8100c28 <__aeabi_dcmpgt>
 8103e30:	4603      	mov	r3, r0
 8103e32:	2b00      	cmp	r3, #0
 8103e34:	d11a      	bne.n	8103e6c <trilateration+0x189c>
 8103e36:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8103e3a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8103e3e:	f04f 0200 	mov.w	r2, #0
 8103e42:	f04f 0300 	mov.w	r3, #0
 8103e46:	f7fc fed1 	bl	8100bec <__aeabi_dcmplt>
 8103e4a:	4603      	mov	r3, r0
 8103e4c:	2b00      	cmp	r3, #0
 8103e4e:	f000 81ca 	beq.w	81041e6 <trilateration+0x1c16>
 8103e52:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8103e56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8103e5a:	f04f 0200 	mov.w	r2, #0
 8103e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8103e9c <trilateration+0x18cc>)
 8103e60:	f7fc fee2 	bl	8100c28 <__aeabi_dcmpgt>
 8103e64:	4603      	mov	r3, r0
 8103e66:	2b00      	cmp	r3, #0
 8103e68:	f000 81bd 	beq.w	81041e6 <trilateration+0x1c16>
        {

            /* if mu1 is less than zero and mu2 is greater than 1, or the other way around */
            /* result1-result2 line segment is inside sphere 4 with no intersection */
            if (mu1 > mu2) mu = mu1;
 8103e6c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8103e70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8103e74:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8103e78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8103e7c:	f7fc fed4 	bl	8100c28 <__aeabi_dcmpgt>
 8103e80:	4603      	mov	r3, r0
 8103e82:	2b00      	cmp	r3, #0
 8103e84:	d014      	beq.n	8103eb0 <trilateration+0x18e0>
 8103e86:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8103e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e8e:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
 8103e92:	e013      	b.n	8103ebc <trilateration+0x18ec>
 8103e94:	f3af 8000 	nop.w
 8103e98:	3fe00000 	.word	0x3fe00000
 8103e9c:	3ff00000 	.word	0x3ff00000
 8103ea0:	9999999a 	.word	0x9999999a
 8103ea4:	3fb99999 	.word	0x3fb99999
 8103ea8:	00000000 	.word	0x00000000
 8103eac:	3fe00000 	.word	0x3fe00000
            else mu = mu2;
 8103eb0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8103eb4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8103eb8:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* h = |result2 - result1|, ex = (result2 - result1) / |result2 - result1| */
            ex = vdiff(*result2, *result1); // vector result1-result2
 8103ebc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103ec0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8103ec4:	681b      	ldr	r3, [r3, #0]
 8103ec6:	ed93 3b00 	vldr	d3, [r3]
 8103eca:	ed93 4b02 	vldr	d4, [r3, #8]
 8103ece:	ed93 5b04 	vldr	d5, [r3, #16]
 8103ed2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103ed6:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8103eda:	681b      	ldr	r3, [r3, #0]
 8103edc:	ed93 2b00 	vldr	d2, [r3]
 8103ee0:	ed93 6b02 	vldr	d6, [r3, #8]
 8103ee4:	ed93 7b04 	vldr	d7, [r3, #16]
 8103ee8:	eeb0 0a42 	vmov.f32	s0, s4
 8103eec:	eef0 0a62 	vmov.f32	s1, s5
 8103ef0:	eeb0 1a46 	vmov.f32	s2, s12
 8103ef4:	eef0 1a66 	vmov.f32	s3, s13
 8103ef8:	eeb0 2a47 	vmov.f32	s4, s14
 8103efc:	eef0 2a67 	vmov.f32	s5, s15
 8103f00:	f7fd fd10 	bl	8101924 <vdiff>
 8103f04:	eeb0 5a40 	vmov.f32	s10, s0
 8103f08:	eef0 5a60 	vmov.f32	s11, s1
 8103f0c:	eeb0 6a41 	vmov.f32	s12, s2
 8103f10:	eef0 6a61 	vmov.f32	s13, s3
 8103f14:	eeb0 7a42 	vmov.f32	s14, s4
 8103f18:	eef0 7a62 	vmov.f32	s15, s5
 8103f1c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103f20:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8103f24:	ed83 5b00 	vstr	d5, [r3]
 8103f28:	ed83 6b02 	vstr	d6, [r3, #8]
 8103f2c:	ed83 7b04 	vstr	d7, [r3, #16]
            h = vnorm(ex); // scalar result1-result2
 8103f30:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103f34:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8103f38:	ed93 5b00 	vldr	d5, [r3]
 8103f3c:	ed93 6b02 	vldr	d6, [r3, #8]
 8103f40:	ed93 7b04 	vldr	d7, [r3, #16]
 8103f44:	eeb0 0a45 	vmov.f32	s0, s10
 8103f48:	eef0 0a65 	vmov.f32	s1, s11
 8103f4c:	eeb0 1a46 	vmov.f32	s2, s12
 8103f50:	eef0 1a66 	vmov.f32	s3, s13
 8103f54:	eeb0 2a47 	vmov.f32	s4, s14
 8103f58:	eef0 2a67 	vmov.f32	s5, s15
 8103f5c:	f7fd fe4a 	bl	8101bf4 <vnorm>
 8103f60:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
            ex = vdiv(ex, h); // unit vector ex with respect to result1 (new coordinate system)
 8103f64:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103f68:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8103f6c:	ed93 5b00 	vldr	d5, [r3]
 8103f70:	ed93 6b02 	vldr	d6, [r3, #8]
 8103f74:	ed93 7b04 	vldr	d7, [r3, #16]
 8103f78:	ed97 3b94 	vldr	d3, [r7, #592]	@ 0x250
 8103f7c:	eeb0 0a45 	vmov.f32	s0, s10
 8103f80:	eef0 0a65 	vmov.f32	s1, s11
 8103f84:	eeb0 1a46 	vmov.f32	s2, s12
 8103f88:	eef0 1a66 	vmov.f32	s3, s13
 8103f8c:	eeb0 2a47 	vmov.f32	s4, s14
 8103f90:	eef0 2a67 	vmov.f32	s5, s15
 8103f94:	f7fd fdd4 	bl	8101b40 <vdiv>
 8103f98:	eeb0 5a40 	vmov.f32	s10, s0
 8103f9c:	eef0 5a60 	vmov.f32	s11, s1
 8103fa0:	eeb0 6a41 	vmov.f32	s12, s2
 8103fa4:	eef0 6a61 	vmov.f32	s13, s3
 8103fa8:	eeb0 7a42 	vmov.f32	s14, s4
 8103fac:	eef0 7a62 	vmov.f32	s15, s5
 8103fb0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103fb4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8103fb8:	ed83 5b00 	vstr	d5, [r3]
 8103fbc:	ed83 6b02 	vstr	d6, [r3, #8]
 8103fc0:	ed83 7b04 	vstr	d7, [r3, #16]
            /* t2 points to the intersection */
            t2 = vmul(ex, mu*h);
 8103fc4:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 8103fc8:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8103fcc:	f7fc fb9c 	bl	8100708 <__aeabi_dmul>
 8103fd0:	4602      	mov	r2, r0
 8103fd2:	460b      	mov	r3, r1
 8103fd4:	ec43 2b14 	vmov	d4, r2, r3
 8103fd8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8103fdc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8103fe0:	ed93 5b00 	vldr	d5, [r3]
 8103fe4:	ed93 6b02 	vldr	d6, [r3, #8]
 8103fe8:	ed93 7b04 	vldr	d7, [r3, #16]
 8103fec:	eeb0 3a44 	vmov.f32	s6, s8
 8103ff0:	eef0 3a64 	vmov.f32	s7, s9
 8103ff4:	eeb0 0a45 	vmov.f32	s0, s10
 8103ff8:	eef0 0a65 	vmov.f32	s1, s11
 8103ffc:	eeb0 1a46 	vmov.f32	s2, s12
 8104000:	eef0 1a66 	vmov.f32	s3, s13
 8104004:	eeb0 2a47 	vmov.f32	s4, s14
 8104008:	eef0 2a67 	vmov.f32	s5, s15
 810400c:	f7fd fd3e 	bl	8101a8c <vmul>
 8104010:	eeb0 5a40 	vmov.f32	s10, s0
 8104014:	eef0 5a60 	vmov.f32	s11, s1
 8104018:	eeb0 6a41 	vmov.f32	s12, s2
 810401c:	eef0 6a61 	vmov.f32	s13, s3
 8104020:	eeb0 7a42 	vmov.f32	s14, s4
 8104024:	eef0 7a62 	vmov.f32	s15, s5
 8104028:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810402c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8104030:	ed83 5b00 	vstr	d5, [r3]
 8104034:	ed83 6b02 	vstr	d6, [r3, #8]
 8104038:	ed83 7b04 	vstr	d7, [r3, #16]
            t2 = vsum(*result1, t2);
 810403c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104040:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8104044:	ed93 3b00 	vldr	d3, [r3]
 8104048:	ed93 4b02 	vldr	d4, [r3, #8]
 810404c:	ed93 5b04 	vldr	d5, [r3, #16]
 8104050:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104054:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8104058:	681b      	ldr	r3, [r3, #0]
 810405a:	ed93 2b00 	vldr	d2, [r3]
 810405e:	ed93 6b02 	vldr	d6, [r3, #8]
 8104062:	ed93 7b04 	vldr	d7, [r3, #16]
 8104066:	eeb0 0a42 	vmov.f32	s0, s4
 810406a:	eef0 0a62 	vmov.f32	s1, s5
 810406e:	eeb0 1a46 	vmov.f32	s2, s12
 8104072:	eef0 1a66 	vmov.f32	s3, s13
 8104076:	eeb0 2a47 	vmov.f32	s4, s14
 810407a:	eef0 2a67 	vmov.f32	s5, s15
 810407e:	f7fd fcab 	bl	81019d8 <vsum>
 8104082:	eeb0 5a40 	vmov.f32	s10, s0
 8104086:	eef0 5a60 	vmov.f32	s11, s1
 810408a:	eeb0 6a41 	vmov.f32	s12, s2
 810408e:	eef0 6a61 	vmov.f32	s13, s3
 8104092:	eeb0 7a42 	vmov.f32	s14, s4
 8104096:	eef0 7a62 	vmov.f32	s15, s5
 810409a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810409e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 81040a2:	ed83 5b00 	vstr	d5, [r3]
 81040a6:	ed83 6b02 	vstr	d6, [r3, #8]
 81040aa:	ed83 7b04 	vstr	d7, [r3, #16]
            /* vector t2-result2 with 50-50 error correction on the length of t3 */
            t3 = vmul(vdiff(*result2, t2),0.5);
 81040ae:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81040b2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 81040b6:	ed93 3b00 	vldr	d3, [r3]
 81040ba:	ed93 4b02 	vldr	d4, [r3, #8]
 81040be:	ed93 5b04 	vldr	d5, [r3, #16]
 81040c2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81040c6:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 81040ca:	681b      	ldr	r3, [r3, #0]
 81040cc:	ed93 2b00 	vldr	d2, [r3]
 81040d0:	ed93 6b02 	vldr	d6, [r3, #8]
 81040d4:	ed93 7b04 	vldr	d7, [r3, #16]
 81040d8:	eeb0 0a42 	vmov.f32	s0, s4
 81040dc:	eef0 0a62 	vmov.f32	s1, s5
 81040e0:	eeb0 1a46 	vmov.f32	s2, s12
 81040e4:	eef0 1a66 	vmov.f32	s3, s13
 81040e8:	eeb0 2a47 	vmov.f32	s4, s14
 81040ec:	eef0 2a67 	vmov.f32	s5, s15
 81040f0:	f7fd fc18 	bl	8101924 <vdiff>
 81040f4:	eeb0 5a40 	vmov.f32	s10, s0
 81040f8:	eef0 5a60 	vmov.f32	s11, s1
 81040fc:	eeb0 6a41 	vmov.f32	s12, s2
 8104100:	eef0 6a61 	vmov.f32	s13, s3
 8104104:	eeb0 7a42 	vmov.f32	s14, s4
 8104108:	eef0 7a62 	vmov.f32	s15, s5
 810410c:	ed87 5b86 	vstr	d5, [r7, #536]	@ 0x218
 8104110:	ed87 6b88 	vstr	d6, [r7, #544]	@ 0x220
 8104114:	ed87 7b8a 	vstr	d7, [r7, #552]	@ 0x228
 8104118:	ed97 5b86 	vldr	d5, [r7, #536]	@ 0x218
 810411c:	ed97 6b88 	vldr	d6, [r7, #544]	@ 0x220
 8104120:	ed97 7b8a 	vldr	d7, [r7, #552]	@ 0x228
 8104124:	ed1f 3ba0 	vldr	d3, [pc, #-640]	@ 8103ea8 <trilateration+0x18d8>
 8104128:	eeb0 0a45 	vmov.f32	s0, s10
 810412c:	eef0 0a65 	vmov.f32	s1, s11
 8104130:	eeb0 1a46 	vmov.f32	s2, s12
 8104134:	eef0 1a66 	vmov.f32	s3, s13
 8104138:	eeb0 2a47 	vmov.f32	s4, s14
 810413c:	eef0 2a67 	vmov.f32	s5, s15
 8104140:	f7fd fca4 	bl	8101a8c <vmul>
 8104144:	eeb0 5a40 	vmov.f32	s10, s0
 8104148:	eef0 5a60 	vmov.f32	s11, s1
 810414c:	eeb0 6a41 	vmov.f32	s12, s2
 8104150:	eef0 6a61 	vmov.f32	s13, s3
 8104154:	eeb0 7a42 	vmov.f32	s14, s4
 8104158:	eef0 7a62 	vmov.f32	s15, s5
 810415c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104160:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8104164:	ed83 5b00 	vstr	d5, [r3]
 8104168:	ed83 6b02 	vstr	d6, [r3, #8]
 810416c:	ed83 7b04 	vstr	d7, [r3, #16]
            /* the best solution = t2 + t3 */
            *best_solution = vsum(t2, t3);
 8104170:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104174:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8104178:	ed93 3b00 	vldr	d3, [r3]
 810417c:	ed93 4b02 	vldr	d4, [r3, #8]
 8104180:	ed93 5b04 	vldr	d5, [r3, #16]
 8104184:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104188:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 810418c:	ed93 2b00 	vldr	d2, [r3]
 8104190:	ed93 6b02 	vldr	d6, [r3, #8]
 8104194:	ed93 7b04 	vldr	d7, [r3, #16]
 8104198:	eeb0 0a42 	vmov.f32	s0, s4
 810419c:	eef0 0a62 	vmov.f32	s1, s5
 81041a0:	eeb0 1a46 	vmov.f32	s2, s12
 81041a4:	eef0 1a66 	vmov.f32	s3, s13
 81041a8:	eeb0 2a47 	vmov.f32	s4, s14
 81041ac:	eef0 2a67 	vmov.f32	s5, s15
 81041b0:	f7fd fc12 	bl	81019d8 <vsum>
 81041b4:	eeb0 5a40 	vmov.f32	s10, s0
 81041b8:	eef0 5a60 	vmov.f32	s11, s1
 81041bc:	eeb0 6a41 	vmov.f32	s12, s2
 81041c0:	eef0 6a61 	vmov.f32	s13, s3
 81041c4:	eeb0 7a42 	vmov.f32	s14, s4
 81041c8:	eef0 7a62 	vmov.f32	s15, s5
 81041cc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81041d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 81041d4:	681b      	ldr	r3, [r3, #0]
 81041d6:	ed83 5b00 	vstr	d5, [r3]
 81041da:	ed83 6b02 	vstr	d6, [r3, #8]
 81041de:	ed83 7b04 	vstr	d7, [r3, #16]
 81041e2:	f000 bca2 	b.w	8104b2a <trilateration+0x255a>

        }
        else if (((mu1 > 0 && mu1 < 1) && (mu2 < 0 || mu2 > 1))
 81041e6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 81041ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 81041ee:	f04f 0200 	mov.w	r2, #0
 81041f2:	f04f 0300 	mov.w	r3, #0
 81041f6:	f7fc fd17 	bl	8100c28 <__aeabi_dcmpgt>
 81041fa:	4603      	mov	r3, r0
 81041fc:	2b00      	cmp	r3, #0
 81041fe:	d024      	beq.n	810424a <trilateration+0x1c7a>
 8104200:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8104204:	e9d3 0100 	ldrd	r0, r1, [r3]
 8104208:	f04f 0200 	mov.w	r2, #0
 810420c:	4b4a      	ldr	r3, [pc, #296]	@ (8104338 <trilateration+0x1d68>)
 810420e:	f7fc fced 	bl	8100bec <__aeabi_dcmplt>
 8104212:	4603      	mov	r3, r0
 8104214:	2b00      	cmp	r3, #0
 8104216:	d018      	beq.n	810424a <trilateration+0x1c7a>
 8104218:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 810421c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8104220:	f04f 0200 	mov.w	r2, #0
 8104224:	f04f 0300 	mov.w	r3, #0
 8104228:	f7fc fce0 	bl	8100bec <__aeabi_dcmplt>
 810422c:	4603      	mov	r3, r0
 810422e:	2b00      	cmp	r3, #0
 8104230:	d140      	bne.n	81042b4 <trilateration+0x1ce4>
 8104232:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8104236:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 810423a:	f04f 0200 	mov.w	r2, #0
 810423e:	4b3e      	ldr	r3, [pc, #248]	@ (8104338 <trilateration+0x1d68>)
 8104240:	f7fc fcf2 	bl	8100c28 <__aeabi_dcmpgt>
 8104244:	4603      	mov	r3, r0
 8104246:	2b00      	cmp	r3, #0
 8104248:	d134      	bne.n	81042b4 <trilateration+0x1ce4>
                 || ((mu2 > 0 && mu2 < 1) && (mu1 < 0 || mu1 > 1)))
 810424a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 810424e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8104252:	f04f 0200 	mov.w	r2, #0
 8104256:	f04f 0300 	mov.w	r3, #0
 810425a:	f7fc fce5 	bl	8100c28 <__aeabi_dcmpgt>
 810425e:	4603      	mov	r3, r0
 8104260:	2b00      	cmp	r3, #0
 8104262:	f000 8192 	beq.w	810458a <trilateration+0x1fba>
 8104266:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 810426a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 810426e:	f04f 0200 	mov.w	r2, #0
 8104272:	4b31      	ldr	r3, [pc, #196]	@ (8104338 <trilateration+0x1d68>)
 8104274:	f7fc fcba 	bl	8100bec <__aeabi_dcmplt>
 8104278:	4603      	mov	r3, r0
 810427a:	2b00      	cmp	r3, #0
 810427c:	f000 8185 	beq.w	810458a <trilateration+0x1fba>
 8104280:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8104284:	e9d3 0100 	ldrd	r0, r1, [r3]
 8104288:	f04f 0200 	mov.w	r2, #0
 810428c:	f04f 0300 	mov.w	r3, #0
 8104290:	f7fc fcac 	bl	8100bec <__aeabi_dcmplt>
 8104294:	4603      	mov	r3, r0
 8104296:	2b00      	cmp	r3, #0
 8104298:	d10c      	bne.n	81042b4 <trilateration+0x1ce4>
 810429a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 810429e:	e9d3 0100 	ldrd	r0, r1, [r3]
 81042a2:	f04f 0200 	mov.w	r2, #0
 81042a6:	4b24      	ldr	r3, [pc, #144]	@ (8104338 <trilateration+0x1d68>)
 81042a8:	f7fc fcbe 	bl	8100c28 <__aeabi_dcmpgt>
 81042ac:	4603      	mov	r3, r0
 81042ae:	2b00      	cmp	r3, #0
 81042b0:	f000 816b 	beq.w	810458a <trilateration+0x1fba>
        {

            /* if one mu is between 0 to 1 and the other is not */
            /* result1-result2 line segment intersects sphere 4 at one point */
            if (mu1 >= 0 && mu1 <= 1) mu = mu1;
 81042b4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 81042b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 81042bc:	f04f 0200 	mov.w	r2, #0
 81042c0:	f04f 0300 	mov.w	r3, #0
 81042c4:	f7fc fca6 	bl	8100c14 <__aeabi_dcmpge>
 81042c8:	4603      	mov	r3, r0
 81042ca:	2b00      	cmp	r3, #0
 81042cc:	d012      	beq.n	81042f4 <trilateration+0x1d24>
 81042ce:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 81042d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 81042d6:	f04f 0200 	mov.w	r2, #0
 81042da:	4b17      	ldr	r3, [pc, #92]	@ (8104338 <trilateration+0x1d68>)
 81042dc:	f7fc fc90 	bl	8100c00 <__aeabi_dcmple>
 81042e0:	4603      	mov	r3, r0
 81042e2:	2b00      	cmp	r3, #0
 81042e4:	d006      	beq.n	81042f4 <trilateration+0x1d24>
 81042e6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 81042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81042ee:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
 81042f2:	e005      	b.n	8104300 <trilateration+0x1d30>
            else mu = mu2;
 81042f4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 81042f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 81042fc:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* add or subtract with 0.5*mu to distribute error equally onto every sphere */
            if (mu <= 0.5) mu-=0.5*mu;
 8104300:	f04f 0200 	mov.w	r2, #0
 8104304:	4b0d      	ldr	r3, [pc, #52]	@ (810433c <trilateration+0x1d6c>)
 8104306:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 810430a:	f7fc fc79 	bl	8100c00 <__aeabi_dcmple>
 810430e:	4603      	mov	r3, r0
 8104310:	2b00      	cmp	r3, #0
 8104312:	d015      	beq.n	8104340 <trilateration+0x1d70>
 8104314:	f04f 0200 	mov.w	r2, #0
 8104318:	4b08      	ldr	r3, [pc, #32]	@ (810433c <trilateration+0x1d6c>)
 810431a:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 810431e:	f7fc f9f3 	bl	8100708 <__aeabi_dmul>
 8104322:	4602      	mov	r2, r0
 8104324:	460b      	mov	r3, r1
 8104326:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 810432a:	f7fc f835 	bl	8100398 <__aeabi_dsub>
 810432e:	4602      	mov	r2, r0
 8104330:	460b      	mov	r3, r1
 8104332:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
 8104336:	e01d      	b.n	8104374 <trilateration+0x1da4>
 8104338:	3ff00000 	.word	0x3ff00000
 810433c:	3fe00000 	.word	0x3fe00000
            else mu-=0.5*(1-mu);
 8104340:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 8104344:	f04f 0000 	mov.w	r0, #0
 8104348:	49cd      	ldr	r1, [pc, #820]	@ (8104680 <trilateration+0x20b0>)
 810434a:	f7fc f825 	bl	8100398 <__aeabi_dsub>
 810434e:	4602      	mov	r2, r0
 8104350:	460b      	mov	r3, r1
 8104352:	4610      	mov	r0, r2
 8104354:	4619      	mov	r1, r3
 8104356:	f04f 0200 	mov.w	r2, #0
 810435a:	4bca      	ldr	r3, [pc, #808]	@ (8104684 <trilateration+0x20b4>)
 810435c:	f7fc f9d4 	bl	8100708 <__aeabi_dmul>
 8104360:	4602      	mov	r2, r0
 8104362:	460b      	mov	r3, r1
 8104364:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8104368:	f7fc f816 	bl	8100398 <__aeabi_dsub>
 810436c:	4602      	mov	r2, r0
 810436e:	460b      	mov	r3, r1
 8104370:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* h = |result2 - result1|, ex = (result2 - result1) / |result2 - result1| */
            ex = vdiff(*result2, *result1); // vector result1-result2
 8104374:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104378:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 810437c:	681b      	ldr	r3, [r3, #0]
 810437e:	ed93 3b00 	vldr	d3, [r3]
 8104382:	ed93 4b02 	vldr	d4, [r3, #8]
 8104386:	ed93 5b04 	vldr	d5, [r3, #16]
 810438a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810438e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8104392:	681b      	ldr	r3, [r3, #0]
 8104394:	ed93 2b00 	vldr	d2, [r3]
 8104398:	ed93 6b02 	vldr	d6, [r3, #8]
 810439c:	ed93 7b04 	vldr	d7, [r3, #16]
 81043a0:	eeb0 0a42 	vmov.f32	s0, s4
 81043a4:	eef0 0a62 	vmov.f32	s1, s5
 81043a8:	eeb0 1a46 	vmov.f32	s2, s12
 81043ac:	eef0 1a66 	vmov.f32	s3, s13
 81043b0:	eeb0 2a47 	vmov.f32	s4, s14
 81043b4:	eef0 2a67 	vmov.f32	s5, s15
 81043b8:	f7fd fab4 	bl	8101924 <vdiff>
 81043bc:	eeb0 5a40 	vmov.f32	s10, s0
 81043c0:	eef0 5a60 	vmov.f32	s11, s1
 81043c4:	eeb0 6a41 	vmov.f32	s12, s2
 81043c8:	eef0 6a61 	vmov.f32	s13, s3
 81043cc:	eeb0 7a42 	vmov.f32	s14, s4
 81043d0:	eef0 7a62 	vmov.f32	s15, s5
 81043d4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81043d8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 81043dc:	ed83 5b00 	vstr	d5, [r3]
 81043e0:	ed83 6b02 	vstr	d6, [r3, #8]
 81043e4:	ed83 7b04 	vstr	d7, [r3, #16]
            h = vnorm(ex); // scalar result1-result2
 81043e8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81043ec:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 81043f0:	ed93 5b00 	vldr	d5, [r3]
 81043f4:	ed93 6b02 	vldr	d6, [r3, #8]
 81043f8:	ed93 7b04 	vldr	d7, [r3, #16]
 81043fc:	eeb0 0a45 	vmov.f32	s0, s10
 8104400:	eef0 0a65 	vmov.f32	s1, s11
 8104404:	eeb0 1a46 	vmov.f32	s2, s12
 8104408:	eef0 1a66 	vmov.f32	s3, s13
 810440c:	eeb0 2a47 	vmov.f32	s4, s14
 8104410:	eef0 2a67 	vmov.f32	s5, s15
 8104414:	f7fd fbee 	bl	8101bf4 <vnorm>
 8104418:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
            ex = vdiv(ex, h); // unit vector ex with respect to result1 (new coordinate system)
 810441c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104420:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8104424:	ed93 5b00 	vldr	d5, [r3]
 8104428:	ed93 6b02 	vldr	d6, [r3, #8]
 810442c:	ed93 7b04 	vldr	d7, [r3, #16]
 8104430:	ed97 3b94 	vldr	d3, [r7, #592]	@ 0x250
 8104434:	eeb0 0a45 	vmov.f32	s0, s10
 8104438:	eef0 0a65 	vmov.f32	s1, s11
 810443c:	eeb0 1a46 	vmov.f32	s2, s12
 8104440:	eef0 1a66 	vmov.f32	s3, s13
 8104444:	eeb0 2a47 	vmov.f32	s4, s14
 8104448:	eef0 2a67 	vmov.f32	s5, s15
 810444c:	f7fd fb78 	bl	8101b40 <vdiv>
 8104450:	eeb0 5a40 	vmov.f32	s10, s0
 8104454:	eef0 5a60 	vmov.f32	s11, s1
 8104458:	eeb0 6a41 	vmov.f32	s12, s2
 810445c:	eef0 6a61 	vmov.f32	s13, s3
 8104460:	eeb0 7a42 	vmov.f32	s14, s4
 8104464:	eef0 7a62 	vmov.f32	s15, s5
 8104468:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810446c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8104470:	ed83 5b00 	vstr	d5, [r3]
 8104474:	ed83 6b02 	vstr	d6, [r3, #8]
 8104478:	ed83 7b04 	vstr	d7, [r3, #16]
            /* t2 points to the intersection */
            t2 = vmul(ex, mu*h);
 810447c:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 8104480:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8104484:	f7fc f940 	bl	8100708 <__aeabi_dmul>
 8104488:	4602      	mov	r2, r0
 810448a:	460b      	mov	r3, r1
 810448c:	ec43 2b14 	vmov	d4, r2, r3
 8104490:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104494:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8104498:	ed93 5b00 	vldr	d5, [r3]
 810449c:	ed93 6b02 	vldr	d6, [r3, #8]
 81044a0:	ed93 7b04 	vldr	d7, [r3, #16]
 81044a4:	eeb0 3a44 	vmov.f32	s6, s8
 81044a8:	eef0 3a64 	vmov.f32	s7, s9
 81044ac:	eeb0 0a45 	vmov.f32	s0, s10
 81044b0:	eef0 0a65 	vmov.f32	s1, s11
 81044b4:	eeb0 1a46 	vmov.f32	s2, s12
 81044b8:	eef0 1a66 	vmov.f32	s3, s13
 81044bc:	eeb0 2a47 	vmov.f32	s4, s14
 81044c0:	eef0 2a67 	vmov.f32	s5, s15
 81044c4:	f7fd fae2 	bl	8101a8c <vmul>
 81044c8:	eeb0 5a40 	vmov.f32	s10, s0
 81044cc:	eef0 5a60 	vmov.f32	s11, s1
 81044d0:	eeb0 6a41 	vmov.f32	s12, s2
 81044d4:	eef0 6a61 	vmov.f32	s13, s3
 81044d8:	eeb0 7a42 	vmov.f32	s14, s4
 81044dc:	eef0 7a62 	vmov.f32	s15, s5
 81044e0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81044e4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 81044e8:	ed83 5b00 	vstr	d5, [r3]
 81044ec:	ed83 6b02 	vstr	d6, [r3, #8]
 81044f0:	ed83 7b04 	vstr	d7, [r3, #16]
            t2 = vsum(*result1, t2);
 81044f4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81044f8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 81044fc:	ed93 3b00 	vldr	d3, [r3]
 8104500:	ed93 4b02 	vldr	d4, [r3, #8]
 8104504:	ed93 5b04 	vldr	d5, [r3, #16]
 8104508:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810450c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8104510:	681b      	ldr	r3, [r3, #0]
 8104512:	ed93 2b00 	vldr	d2, [r3]
 8104516:	ed93 6b02 	vldr	d6, [r3, #8]
 810451a:	ed93 7b04 	vldr	d7, [r3, #16]
 810451e:	eeb0 0a42 	vmov.f32	s0, s4
 8104522:	eef0 0a62 	vmov.f32	s1, s5
 8104526:	eeb0 1a46 	vmov.f32	s2, s12
 810452a:	eef0 1a66 	vmov.f32	s3, s13
 810452e:	eeb0 2a47 	vmov.f32	s4, s14
 8104532:	eef0 2a67 	vmov.f32	s5, s15
 8104536:	f7fd fa4f 	bl	81019d8 <vsum>
 810453a:	eeb0 5a40 	vmov.f32	s10, s0
 810453e:	eef0 5a60 	vmov.f32	s11, s1
 8104542:	eeb0 6a41 	vmov.f32	s12, s2
 8104546:	eef0 6a61 	vmov.f32	s13, s3
 810454a:	eeb0 7a42 	vmov.f32	s14, s4
 810454e:	eef0 7a62 	vmov.f32	s15, s5
 8104552:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104556:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 810455a:	ed83 5b00 	vstr	d5, [r3]
 810455e:	ed83 6b02 	vstr	d6, [r3, #8]
 8104562:	ed83 7b04 	vstr	d7, [r3, #16]
            /* the best solution = t2 */
            *best_solution = t2;
 8104566:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810456a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 810456e:	681a      	ldr	r2, [r3, #0]
 8104570:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104574:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8104578:	4614      	mov	r4, r2
 810457a:	461d      	mov	r5, r3
 810457c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810457e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104580:	e895 0003 	ldmia.w	r5, {r0, r1}
 8104584:	e884 0003 	stmia.w	r4, {r0, r1}
 8104588:	e2cf      	b.n	8104b2a <trilateration+0x255a>

        }
        else if (mu1 == mu2)
 810458a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 810458e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8104592:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8104596:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810459a:	f7fc fb1d 	bl	8100bd8 <__aeabi_dcmpeq>
 810459e:	4603      	mov	r3, r0
 81045a0:	2b00      	cmp	r3, #0
 81045a2:	f000 819f 	beq.w	81048e4 <trilateration+0x2314>
        {

            /* if both mu1 and mu2 are between 0 and 1, and mu1 = mu2 */
            /* result1-result2 line segment is tangential to sphere 4 at one point */
            mu = mu1;
 81045a6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 81045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81045ae:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* add or subtract with 0.5*mu to distribute error equally onto every sphere */
            if (mu <= 0.25) mu-=0.5*mu;
 81045b2:	f04f 0200 	mov.w	r2, #0
 81045b6:	4b34      	ldr	r3, [pc, #208]	@ (8104688 <trilateration+0x20b8>)
 81045b8:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 81045bc:	f7fc fb20 	bl	8100c00 <__aeabi_dcmple>
 81045c0:	4603      	mov	r3, r0
 81045c2:	2b00      	cmp	r3, #0
 81045c4:	d011      	beq.n	81045ea <trilateration+0x201a>
 81045c6:	f04f 0200 	mov.w	r2, #0
 81045ca:	4b2e      	ldr	r3, [pc, #184]	@ (8104684 <trilateration+0x20b4>)
 81045cc:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 81045d0:	f7fc f89a 	bl	8100708 <__aeabi_dmul>
 81045d4:	4602      	mov	r2, r0
 81045d6:	460b      	mov	r3, r1
 81045d8:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 81045dc:	f7fb fedc 	bl	8100398 <__aeabi_dsub>
 81045e0:	4602      	mov	r2, r0
 81045e2:	460b      	mov	r3, r1
 81045e4:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
 81045e8:	e06c      	b.n	81046c4 <trilateration+0x20f4>
            else if (mu <=0.5) mu-=0.5*(0.5-mu);
 81045ea:	f04f 0200 	mov.w	r2, #0
 81045ee:	4b25      	ldr	r3, [pc, #148]	@ (8104684 <trilateration+0x20b4>)
 81045f0:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 81045f4:	f7fc fb04 	bl	8100c00 <__aeabi_dcmple>
 81045f8:	4603      	mov	r3, r0
 81045fa:	2b00      	cmp	r3, #0
 81045fc:	d01a      	beq.n	8104634 <trilateration+0x2064>
 81045fe:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 8104602:	f04f 0000 	mov.w	r0, #0
 8104606:	491f      	ldr	r1, [pc, #124]	@ (8104684 <trilateration+0x20b4>)
 8104608:	f7fb fec6 	bl	8100398 <__aeabi_dsub>
 810460c:	4602      	mov	r2, r0
 810460e:	460b      	mov	r3, r1
 8104610:	4610      	mov	r0, r2
 8104612:	4619      	mov	r1, r3
 8104614:	f04f 0200 	mov.w	r2, #0
 8104618:	4b1a      	ldr	r3, [pc, #104]	@ (8104684 <trilateration+0x20b4>)
 810461a:	f7fc f875 	bl	8100708 <__aeabi_dmul>
 810461e:	4602      	mov	r2, r0
 8104620:	460b      	mov	r3, r1
 8104622:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8104626:	f7fb feb7 	bl	8100398 <__aeabi_dsub>
 810462a:	4602      	mov	r2, r0
 810462c:	460b      	mov	r3, r1
 810462e:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
 8104632:	e047      	b.n	81046c4 <trilateration+0x20f4>
            else if (mu <=0.75) mu-=0.5*(mu-0.5);
 8104634:	f04f 0200 	mov.w	r2, #0
 8104638:	4b14      	ldr	r3, [pc, #80]	@ (810468c <trilateration+0x20bc>)
 810463a:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 810463e:	f7fc fadf 	bl	8100c00 <__aeabi_dcmple>
 8104642:	4603      	mov	r3, r0
 8104644:	2b00      	cmp	r3, #0
 8104646:	d023      	beq.n	8104690 <trilateration+0x20c0>
 8104648:	f04f 0200 	mov.w	r2, #0
 810464c:	4b0d      	ldr	r3, [pc, #52]	@ (8104684 <trilateration+0x20b4>)
 810464e:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8104652:	f7fb fea1 	bl	8100398 <__aeabi_dsub>
 8104656:	4602      	mov	r2, r0
 8104658:	460b      	mov	r3, r1
 810465a:	4610      	mov	r0, r2
 810465c:	4619      	mov	r1, r3
 810465e:	f04f 0200 	mov.w	r2, #0
 8104662:	4b08      	ldr	r3, [pc, #32]	@ (8104684 <trilateration+0x20b4>)
 8104664:	f7fc f850 	bl	8100708 <__aeabi_dmul>
 8104668:	4602      	mov	r2, r0
 810466a:	460b      	mov	r3, r1
 810466c:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8104670:	f7fb fe92 	bl	8100398 <__aeabi_dsub>
 8104674:	4602      	mov	r2, r0
 8104676:	460b      	mov	r3, r1
 8104678:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
 810467c:	e022      	b.n	81046c4 <trilateration+0x20f4>
 810467e:	bf00      	nop
 8104680:	3ff00000 	.word	0x3ff00000
 8104684:	3fe00000 	.word	0x3fe00000
 8104688:	3fd00000 	.word	0x3fd00000
 810468c:	3fe80000 	.word	0x3fe80000
            else mu-=0.5*(1-mu);
 8104690:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 8104694:	f04f 0000 	mov.w	r0, #0
 8104698:	4990      	ldr	r1, [pc, #576]	@ (81048dc <trilateration+0x230c>)
 810469a:	f7fb fe7d 	bl	8100398 <__aeabi_dsub>
 810469e:	4602      	mov	r2, r0
 81046a0:	460b      	mov	r3, r1
 81046a2:	4610      	mov	r0, r2
 81046a4:	4619      	mov	r1, r3
 81046a6:	f04f 0200 	mov.w	r2, #0
 81046aa:	4b8d      	ldr	r3, [pc, #564]	@ (81048e0 <trilateration+0x2310>)
 81046ac:	f7fc f82c 	bl	8100708 <__aeabi_dmul>
 81046b0:	4602      	mov	r2, r0
 81046b2:	460b      	mov	r3, r1
 81046b4:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 81046b8:	f7fb fe6e 	bl	8100398 <__aeabi_dsub>
 81046bc:	4602      	mov	r2, r0
 81046be:	460b      	mov	r3, r1
 81046c0:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* h = |result2 - result1|, ex = (result2 - result1) / |result2 - result1| */
            ex = vdiff(*result2, *result1); // vector result1-result2
 81046c4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81046c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 81046cc:	681b      	ldr	r3, [r3, #0]
 81046ce:	ed93 3b00 	vldr	d3, [r3]
 81046d2:	ed93 4b02 	vldr	d4, [r3, #8]
 81046d6:	ed93 5b04 	vldr	d5, [r3, #16]
 81046da:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81046de:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 81046e2:	681b      	ldr	r3, [r3, #0]
 81046e4:	ed93 2b00 	vldr	d2, [r3]
 81046e8:	ed93 6b02 	vldr	d6, [r3, #8]
 81046ec:	ed93 7b04 	vldr	d7, [r3, #16]
 81046f0:	eeb0 0a42 	vmov.f32	s0, s4
 81046f4:	eef0 0a62 	vmov.f32	s1, s5
 81046f8:	eeb0 1a46 	vmov.f32	s2, s12
 81046fc:	eef0 1a66 	vmov.f32	s3, s13
 8104700:	eeb0 2a47 	vmov.f32	s4, s14
 8104704:	eef0 2a67 	vmov.f32	s5, s15
 8104708:	f7fd f90c 	bl	8101924 <vdiff>
 810470c:	eeb0 5a40 	vmov.f32	s10, s0
 8104710:	eef0 5a60 	vmov.f32	s11, s1
 8104714:	eeb0 6a41 	vmov.f32	s12, s2
 8104718:	eef0 6a61 	vmov.f32	s13, s3
 810471c:	eeb0 7a42 	vmov.f32	s14, s4
 8104720:	eef0 7a62 	vmov.f32	s15, s5
 8104724:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104728:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 810472c:	ed83 5b00 	vstr	d5, [r3]
 8104730:	ed83 6b02 	vstr	d6, [r3, #8]
 8104734:	ed83 7b04 	vstr	d7, [r3, #16]
            h = vnorm(ex); // scalar result1-result2
 8104738:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810473c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8104740:	ed93 5b00 	vldr	d5, [r3]
 8104744:	ed93 6b02 	vldr	d6, [r3, #8]
 8104748:	ed93 7b04 	vldr	d7, [r3, #16]
 810474c:	eeb0 0a45 	vmov.f32	s0, s10
 8104750:	eef0 0a65 	vmov.f32	s1, s11
 8104754:	eeb0 1a46 	vmov.f32	s2, s12
 8104758:	eef0 1a66 	vmov.f32	s3, s13
 810475c:	eeb0 2a47 	vmov.f32	s4, s14
 8104760:	eef0 2a67 	vmov.f32	s5, s15
 8104764:	f7fd fa46 	bl	8101bf4 <vnorm>
 8104768:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
            ex = vdiv(ex, h); // unit vector ex with respect to result1 (new coordinate system)
 810476c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104770:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8104774:	ed93 5b00 	vldr	d5, [r3]
 8104778:	ed93 6b02 	vldr	d6, [r3, #8]
 810477c:	ed93 7b04 	vldr	d7, [r3, #16]
 8104780:	ed97 3b94 	vldr	d3, [r7, #592]	@ 0x250
 8104784:	eeb0 0a45 	vmov.f32	s0, s10
 8104788:	eef0 0a65 	vmov.f32	s1, s11
 810478c:	eeb0 1a46 	vmov.f32	s2, s12
 8104790:	eef0 1a66 	vmov.f32	s3, s13
 8104794:	eeb0 2a47 	vmov.f32	s4, s14
 8104798:	eef0 2a67 	vmov.f32	s5, s15
 810479c:	f7fd f9d0 	bl	8101b40 <vdiv>
 81047a0:	eeb0 5a40 	vmov.f32	s10, s0
 81047a4:	eef0 5a60 	vmov.f32	s11, s1
 81047a8:	eeb0 6a41 	vmov.f32	s12, s2
 81047ac:	eef0 6a61 	vmov.f32	s13, s3
 81047b0:	eeb0 7a42 	vmov.f32	s14, s4
 81047b4:	eef0 7a62 	vmov.f32	s15, s5
 81047b8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81047bc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 81047c0:	ed83 5b00 	vstr	d5, [r3]
 81047c4:	ed83 6b02 	vstr	d6, [r3, #8]
 81047c8:	ed83 7b04 	vstr	d7, [r3, #16]
            /* t2 points to the intersection */
            t2 = vmul(ex, mu*h);
 81047cc:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 81047d0:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 81047d4:	f7fb ff98 	bl	8100708 <__aeabi_dmul>
 81047d8:	4602      	mov	r2, r0
 81047da:	460b      	mov	r3, r1
 81047dc:	ec43 2b14 	vmov	d4, r2, r3
 81047e0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81047e4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 81047e8:	ed93 5b00 	vldr	d5, [r3]
 81047ec:	ed93 6b02 	vldr	d6, [r3, #8]
 81047f0:	ed93 7b04 	vldr	d7, [r3, #16]
 81047f4:	eeb0 3a44 	vmov.f32	s6, s8
 81047f8:	eef0 3a64 	vmov.f32	s7, s9
 81047fc:	eeb0 0a45 	vmov.f32	s0, s10
 8104800:	eef0 0a65 	vmov.f32	s1, s11
 8104804:	eeb0 1a46 	vmov.f32	s2, s12
 8104808:	eef0 1a66 	vmov.f32	s3, s13
 810480c:	eeb0 2a47 	vmov.f32	s4, s14
 8104810:	eef0 2a67 	vmov.f32	s5, s15
 8104814:	f7fd f93a 	bl	8101a8c <vmul>
 8104818:	eeb0 5a40 	vmov.f32	s10, s0
 810481c:	eef0 5a60 	vmov.f32	s11, s1
 8104820:	eeb0 6a41 	vmov.f32	s12, s2
 8104824:	eef0 6a61 	vmov.f32	s13, s3
 8104828:	eeb0 7a42 	vmov.f32	s14, s4
 810482c:	eef0 7a62 	vmov.f32	s15, s5
 8104830:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104834:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8104838:	ed83 5b00 	vstr	d5, [r3]
 810483c:	ed83 6b02 	vstr	d6, [r3, #8]
 8104840:	ed83 7b04 	vstr	d7, [r3, #16]
            t2 = vsum(*result1, t2);
 8104844:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104848:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 810484c:	ed93 3b00 	vldr	d3, [r3]
 8104850:	ed93 4b02 	vldr	d4, [r3, #8]
 8104854:	ed93 5b04 	vldr	d5, [r3, #16]
 8104858:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810485c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8104860:	681b      	ldr	r3, [r3, #0]
 8104862:	ed93 2b00 	vldr	d2, [r3]
 8104866:	ed93 6b02 	vldr	d6, [r3, #8]
 810486a:	ed93 7b04 	vldr	d7, [r3, #16]
 810486e:	eeb0 0a42 	vmov.f32	s0, s4
 8104872:	eef0 0a62 	vmov.f32	s1, s5
 8104876:	eeb0 1a46 	vmov.f32	s2, s12
 810487a:	eef0 1a66 	vmov.f32	s3, s13
 810487e:	eeb0 2a47 	vmov.f32	s4, s14
 8104882:	eef0 2a67 	vmov.f32	s5, s15
 8104886:	f7fd f8a7 	bl	81019d8 <vsum>
 810488a:	eeb0 5a40 	vmov.f32	s10, s0
 810488e:	eef0 5a60 	vmov.f32	s11, s1
 8104892:	eeb0 6a41 	vmov.f32	s12, s2
 8104896:	eef0 6a61 	vmov.f32	s13, s3
 810489a:	eeb0 7a42 	vmov.f32	s14, s4
 810489e:	eef0 7a62 	vmov.f32	s15, s5
 81048a2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81048a6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 81048aa:	ed83 5b00 	vstr	d5, [r3]
 81048ae:	ed83 6b02 	vstr	d6, [r3, #8]
 81048b2:	ed83 7b04 	vstr	d7, [r3, #16]
            /* the best solution = t2 */
            *best_solution = t2;
 81048b6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81048ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 81048be:	681a      	ldr	r2, [r3, #0]
 81048c0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81048c4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 81048c8:	4614      	mov	r4, r2
 81048ca:	461d      	mov	r5, r3
 81048cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81048ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81048d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 81048d4:	e884 0003 	stmia.w	r4, {r0, r1}
 81048d8:	e127      	b.n	8104b2a <trilateration+0x255a>
 81048da:	bf00      	nop
 81048dc:	3ff00000 	.word	0x3ff00000
 81048e0:	3fe00000 	.word	0x3fe00000
            /* if both mu1 and mu2 are between 0 and 1 */
            /* result1-result2 line segment intersects sphere 4 at two points */

            //return ERR_TRIL_NEEDMORESPHERE;

            mu = mu1 + mu2;
 81048e4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 81048e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 81048ec:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 81048f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 81048f4:	f7fb fd52 	bl	810039c <__adddf3>
 81048f8:	4602      	mov	r2, r0
 81048fa:	460b      	mov	r3, r1
 81048fc:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* h = |result2 - result1|, ex = (result2 - result1) / |result2 - result1| */
            ex = vdiff(*result2, *result1); // vector result1-result2
 8104900:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104904:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8104908:	681b      	ldr	r3, [r3, #0]
 810490a:	ed93 3b00 	vldr	d3, [r3]
 810490e:	ed93 4b02 	vldr	d4, [r3, #8]
 8104912:	ed93 5b04 	vldr	d5, [r3, #16]
 8104916:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 810491a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 810491e:	681b      	ldr	r3, [r3, #0]
 8104920:	ed93 2b00 	vldr	d2, [r3]
 8104924:	ed93 6b02 	vldr	d6, [r3, #8]
 8104928:	ed93 7b04 	vldr	d7, [r3, #16]
 810492c:	eeb0 0a42 	vmov.f32	s0, s4
 8104930:	eef0 0a62 	vmov.f32	s1, s5
 8104934:	eeb0 1a46 	vmov.f32	s2, s12
 8104938:	eef0 1a66 	vmov.f32	s3, s13
 810493c:	eeb0 2a47 	vmov.f32	s4, s14
 8104940:	eef0 2a67 	vmov.f32	s5, s15
 8104944:	f7fc ffee 	bl	8101924 <vdiff>
 8104948:	eeb0 5a40 	vmov.f32	s10, s0
 810494c:	eef0 5a60 	vmov.f32	s11, s1
 8104950:	eeb0 6a41 	vmov.f32	s12, s2
 8104954:	eef0 6a61 	vmov.f32	s13, s3
 8104958:	eeb0 7a42 	vmov.f32	s14, s4
 810495c:	eef0 7a62 	vmov.f32	s15, s5
 8104960:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104964:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8104968:	ed83 5b00 	vstr	d5, [r3]
 810496c:	ed83 6b02 	vstr	d6, [r3, #8]
 8104970:	ed83 7b04 	vstr	d7, [r3, #16]
            h = vnorm(ex); // scalar result1-result2
 8104974:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104978:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 810497c:	ed93 5b00 	vldr	d5, [r3]
 8104980:	ed93 6b02 	vldr	d6, [r3, #8]
 8104984:	ed93 7b04 	vldr	d7, [r3, #16]
 8104988:	eeb0 0a45 	vmov.f32	s0, s10
 810498c:	eef0 0a65 	vmov.f32	s1, s11
 8104990:	eeb0 1a46 	vmov.f32	s2, s12
 8104994:	eef0 1a66 	vmov.f32	s3, s13
 8104998:	eeb0 2a47 	vmov.f32	s4, s14
 810499c:	eef0 2a67 	vmov.f32	s5, s15
 81049a0:	f7fd f928 	bl	8101bf4 <vnorm>
 81049a4:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
            ex = vdiv(ex, h); // unit vector ex with respect to result1 (new coordinate system)
 81049a8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81049ac:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 81049b0:	ed93 5b00 	vldr	d5, [r3]
 81049b4:	ed93 6b02 	vldr	d6, [r3, #8]
 81049b8:	ed93 7b04 	vldr	d7, [r3, #16]
 81049bc:	ed97 3b94 	vldr	d3, [r7, #592]	@ 0x250
 81049c0:	eeb0 0a45 	vmov.f32	s0, s10
 81049c4:	eef0 0a65 	vmov.f32	s1, s11
 81049c8:	eeb0 1a46 	vmov.f32	s2, s12
 81049cc:	eef0 1a66 	vmov.f32	s3, s13
 81049d0:	eeb0 2a47 	vmov.f32	s4, s14
 81049d4:	eef0 2a67 	vmov.f32	s5, s15
 81049d8:	f7fd f8b2 	bl	8101b40 <vdiv>
 81049dc:	eeb0 5a40 	vmov.f32	s10, s0
 81049e0:	eef0 5a60 	vmov.f32	s11, s1
 81049e4:	eeb0 6a41 	vmov.f32	s12, s2
 81049e8:	eef0 6a61 	vmov.f32	s13, s3
 81049ec:	eeb0 7a42 	vmov.f32	s14, s4
 81049f0:	eef0 7a62 	vmov.f32	s15, s5
 81049f4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 81049f8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 81049fc:	ed83 5b00 	vstr	d5, [r3]
 8104a00:	ed83 6b02 	vstr	d6, [r3, #8]
 8104a04:	ed83 7b04 	vstr	d7, [r3, #16]
            /* 50-50 error correction for mu */
            mu = 0.5*mu;
 8104a08:	f04f 0200 	mov.w	r2, #0
 8104a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8104b38 <trilateration+0x2568>)
 8104a0e:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8104a12:	f7fb fe79 	bl	8100708 <__aeabi_dmul>
 8104a16:	4602      	mov	r2, r0
 8104a18:	460b      	mov	r3, r1
 8104a1a:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* t2 points to the intersection */
            t2 = vmul(ex, mu*h);
 8104a1e:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 8104a22:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8104a26:	f7fb fe6f 	bl	8100708 <__aeabi_dmul>
 8104a2a:	4602      	mov	r2, r0
 8104a2c:	460b      	mov	r3, r1
 8104a2e:	ec43 2b14 	vmov	d4, r2, r3
 8104a32:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104a36:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8104a3a:	ed93 5b00 	vldr	d5, [r3]
 8104a3e:	ed93 6b02 	vldr	d6, [r3, #8]
 8104a42:	ed93 7b04 	vldr	d7, [r3, #16]
 8104a46:	eeb0 3a44 	vmov.f32	s6, s8
 8104a4a:	eef0 3a64 	vmov.f32	s7, s9
 8104a4e:	eeb0 0a45 	vmov.f32	s0, s10
 8104a52:	eef0 0a65 	vmov.f32	s1, s11
 8104a56:	eeb0 1a46 	vmov.f32	s2, s12
 8104a5a:	eef0 1a66 	vmov.f32	s3, s13
 8104a5e:	eeb0 2a47 	vmov.f32	s4, s14
 8104a62:	eef0 2a67 	vmov.f32	s5, s15
 8104a66:	f7fd f811 	bl	8101a8c <vmul>
 8104a6a:	eeb0 5a40 	vmov.f32	s10, s0
 8104a6e:	eef0 5a60 	vmov.f32	s11, s1
 8104a72:	eeb0 6a41 	vmov.f32	s12, s2
 8104a76:	eef0 6a61 	vmov.f32	s13, s3
 8104a7a:	eeb0 7a42 	vmov.f32	s14, s4
 8104a7e:	eef0 7a62 	vmov.f32	s15, s5
 8104a82:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104a86:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8104a8a:	ed83 5b00 	vstr	d5, [r3]
 8104a8e:	ed83 6b02 	vstr	d6, [r3, #8]
 8104a92:	ed83 7b04 	vstr	d7, [r3, #16]
            t2 = vsum(*result1, t2);
 8104a96:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104a9a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8104a9e:	ed93 3b00 	vldr	d3, [r3]
 8104aa2:	ed93 4b02 	vldr	d4, [r3, #8]
 8104aa6:	ed93 5b04 	vldr	d5, [r3, #16]
 8104aaa:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104aae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8104ab2:	681b      	ldr	r3, [r3, #0]
 8104ab4:	ed93 2b00 	vldr	d2, [r3]
 8104ab8:	ed93 6b02 	vldr	d6, [r3, #8]
 8104abc:	ed93 7b04 	vldr	d7, [r3, #16]
 8104ac0:	eeb0 0a42 	vmov.f32	s0, s4
 8104ac4:	eef0 0a62 	vmov.f32	s1, s5
 8104ac8:	eeb0 1a46 	vmov.f32	s2, s12
 8104acc:	eef0 1a66 	vmov.f32	s3, s13
 8104ad0:	eeb0 2a47 	vmov.f32	s4, s14
 8104ad4:	eef0 2a67 	vmov.f32	s5, s15
 8104ad8:	f7fc ff7e 	bl	81019d8 <vsum>
 8104adc:	eeb0 5a40 	vmov.f32	s10, s0
 8104ae0:	eef0 5a60 	vmov.f32	s11, s1
 8104ae4:	eeb0 6a41 	vmov.f32	s12, s2
 8104ae8:	eef0 6a61 	vmov.f32	s13, s3
 8104aec:	eeb0 7a42 	vmov.f32	s14, s4
 8104af0:	eef0 7a62 	vmov.f32	s15, s5
 8104af4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104af8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8104afc:	ed83 5b00 	vstr	d5, [r3]
 8104b00:	ed83 6b02 	vstr	d6, [r3, #8]
 8104b04:	ed83 7b04 	vstr	d7, [r3, #16]
            /* the best solution = t2 */
            *best_solution = t2;
 8104b08:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104b0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8104b10:	681a      	ldr	r2, [r3, #0]
 8104b12:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8104b16:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8104b1a:	4614      	mov	r4, r2
 8104b1c:	461d      	mov	r5, r3
 8104b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104b22:	e895 0003 	ldmia.w	r5, {r0, r1}
 8104b26:	e884 0003 	stmia.w	r4, {r0, r1}

        }

    }
    return TRIL_4SPHERES;
 8104b2a:	2304      	movs	r3, #4
    /******** END OF FINDING ONE SOLUTION BY INTRODUCING ONE MORE SPHERE *********/
}
 8104b2c:	4618      	mov	r0, r3
 8104b2e:	f507 7721 	add.w	r7, r7, #644	@ 0x284
 8104b32:	46bd      	mov	sp, r7
 8104b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8104b38:	3fe00000 	.word	0x3fe00000
 8104b3c:	00000000 	.word	0x00000000

08104b40 <deca_3dlocate>:
                    vec3d p1, double r1,
                    vec3d p2, double r2,
                    vec3d p3, double r3,
                    vec3d p4, double r4,
                    int *combination)
{
 8104b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8104b44:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8104b48:	af12      	add	r7, sp, #72	@ 0x48
 8104b4a:	f507 74fc 	add.w	r4, r7, #504	@ 0x1f8
 8104b4e:	f5a4 74d6 	sub.w	r4, r4, #428	@ 0x1ac
 8104b52:	6020      	str	r0, [r4, #0]
 8104b54:	f507 70fc 	add.w	r0, r7, #504	@ 0x1f8
 8104b58:	f5a0 70d8 	sub.w	r0, r0, #432	@ 0x1b0
 8104b5c:	6001      	str	r1, [r0, #0]
 8104b5e:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 8104b62:	f5a1 71da 	sub.w	r1, r1, #436	@ 0x1b4
 8104b66:	600a      	str	r2, [r1, #0]
 8104b68:	f507 72fc 	add.w	r2, r7, #504	@ 0x1f8
 8104b6c:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 8104b70:	6013      	str	r3, [r2, #0]
 8104b72:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104b76:	f5a3 72e8 	sub.w	r2, r3, #464	@ 0x1d0
 8104b7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8104b7e:	ed03 3b02 	vstr	d3, [r3, #-8]
 8104b82:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104b86:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8104b8a:	f107 0108 	add.w	r1, r7, #8
 8104b8e:	ed01 7b02 	vstr	d7, [r1, #-8]
 8104b92:	ed82 0b00 	vstr	d0, [r2]
 8104b96:	ed82 1b02 	vstr	d1, [r2, #8]
 8104b9a:	ed82 2b04 	vstr	d2, [r2, #16]
 8104b9e:	ed83 4b00 	vstr	d4, [r3]
 8104ba2:	ed83 5b02 	vstr	d5, [r3, #8]
 8104ba6:	ed83 6b04 	vstr	d6, [r3, #16]
    double  ovr_r1, ovr_r2, ovr_r3, ovr_r4;
    int     overlook_count, combination_counter;
    int     trilateration_errcounter, trilateration_mode34;
    int     success, concentric, result;

    trilateration_errcounter = 0;
 8104baa:	2300      	movs	r3, #0
 8104bac:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
    trilateration_mode34 = 0;
 8104bb0:	2300      	movs	r3, #0
 8104bb2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

    combination_counter = 4; /* four spheres combination */
 8104bb6:	2304      	movs	r3, #4
 8104bb8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8

    *best_gdoprate = 1; /* put the worst gdoprate init */
 8104bbc:	f8d7 121c 	ldr.w	r1, [r7, #540]	@ 0x21c
 8104bc0:	f04f 0200 	mov.w	r2, #0
 8104bc4:	4bba      	ldr	r3, [pc, #744]	@ (8104eb0 <deca_3dlocate+0x370>)
 8104bc6:	e9c1 2300 	strd	r2, r3, [r1]
    gdoprate_compare1 = 1;
 8104bca:	f04f 0200 	mov.w	r2, #0
 8104bce:	4bb8      	ldr	r3, [pc, #736]	@ (8104eb0 <deca_3dlocate+0x370>)
 8104bd0:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
    gdoprate_compare2 = 1;
 8104bd4:	f04f 0200 	mov.w	r2, #0
 8104bd8:	4bb5      	ldr	r3, [pc, #724]	@ (8104eb0 <deca_3dlocate+0x370>)
 8104bda:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0
    solution_compare1.x = 0;
 8104bde:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104be2:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
 8104be6:	f04f 0200 	mov.w	r2, #0
 8104bea:	f04f 0300 	mov.w	r3, #0
 8104bee:	e9c1 2300 	strd	r2, r3, [r1]
    solution_compare1.y = 0;
 8104bf2:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104bf6:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
 8104bfa:	f04f 0200 	mov.w	r2, #0
 8104bfe:	f04f 0300 	mov.w	r3, #0
 8104c02:	e9c1 2302 	strd	r2, r3, [r1, #8]
    solution_compare1.z = 0;
 8104c06:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104c0a:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
 8104c0e:	f04f 0200 	mov.w	r2, #0
 8104c12:	f04f 0300 	mov.w	r3, #0
 8104c16:	e9c1 2304 	strd	r2, r3, [r1, #16]
    //error_3dcompare1 = 0;

    do
    {
        success = 0;
 8104c1a:	2300      	movs	r3, #0
 8104c1c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
        concentric = 0;
 8104c20:	2300      	movs	r3, #0
 8104c22:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
        overlook_count = 0;
 8104c26:	2300      	movs	r3, #0
 8104c28:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        ovr_r1 = r1;
 8104c2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8104c30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8104c34:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
        ovr_r2 = r2;
 8104c38:	f107 0308 	add.w	r3, r7, #8
 8104c3c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8104c40:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
        ovr_r3 = r3;
 8104c44:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 8104c48:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
        ovr_r4 = r4;
 8104c4c:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 8104c50:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
        do
        {
            result = trilateration(&o1, &o2, &solution, p1, ovr_r1, p2, ovr_r2, p3, ovr_r3, p4, ovr_r4, MAXZERO);
 8104c54:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104c58:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8104c5c:	ed93 4b00 	vldr	d4, [r3]
 8104c60:	ed93 5b02 	vldr	d5, [r3, #8]
 8104c64:	ed93 6b04 	vldr	d6, [r3, #16]
 8104c68:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104c6c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8104c70:	ed93 0b00 	vldr	d0, [r3]
 8104c74:	ed93 1b02 	vldr	d1, [r3, #8]
 8104c78:	ed93 2b04 	vldr	d2, [r3, #16]
 8104c7c:	f107 0e98 	add.w	lr, r7, #152	@ 0x98
 8104c80:	f107 0cb0 	add.w	ip, r7, #176	@ 0xb0
 8104c84:	f107 06c8 	add.w	r6, r7, #200	@ 0xc8
 8104c88:	a385      	add	r3, pc, #532	@ (adr r3, 8104ea0 <deca_3dlocate+0x360>)
 8104c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c8e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8104c92:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8104c96:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8104c9a:	ad08      	add	r5, sp, #32
 8104c9c:	f507 7410 	add.w	r4, r7, #576	@ 0x240
 8104ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104ca2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104ca4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8104ca8:	e885 0003 	stmia.w	r5, {r0, r1}
 8104cac:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8104cb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8104cb4:	466d      	mov	r5, sp
 8104cb6:	f507 7408 	add.w	r4, r7, #544	@ 0x220
 8104cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104cbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8104cc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8104cc6:	ed97 7b78 	vldr	d7, [r7, #480]	@ 0x1e0
 8104cca:	ed97 3b7a 	vldr	d3, [r7, #488]	@ 0x1e8
 8104cce:	4672      	mov	r2, lr
 8104cd0:	4661      	mov	r1, ip
 8104cd2:	4630      	mov	r0, r6
 8104cd4:	f7fd fc7c 	bl	81025d0 <trilateration>
 8104cd8:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac
            switch (result)
 8104cdc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8104ce0:	2b04      	cmp	r3, #4
 8104ce2:	d013      	beq.n	8104d0c <deca_3dlocate+0x1cc>
 8104ce4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8104ce8:	2b04      	cmp	r3, #4
 8104cea:	dc1a      	bgt.n	8104d22 <deca_3dlocate+0x1e2>
 8104cec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8104cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104cf4:	d011      	beq.n	8104d1a <deca_3dlocate+0x1da>
 8104cf6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8104cfa:	2b03      	cmp	r3, #3
 8104cfc:	d111      	bne.n	8104d22 <deca_3dlocate+0x1e2>
            {
                case TRIL_3SPHERES: // 3 spheres are used to get the result
                    trilateration_mode34 = TRIL_3SPHERES;
 8104cfe:	2303      	movs	r3, #3
 8104d00:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
                    success = 1;
 8104d04:	2301      	movs	r3, #1
 8104d06:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                    break;
 8104d0a:	e03c      	b.n	8104d86 <deca_3dlocate+0x246>

                case TRIL_4SPHERES: // 4 spheres are used to get the result
                    trilateration_mode34 = TRIL_4SPHERES;
 8104d0c:	2304      	movs	r3, #4
 8104d0e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
                    success = 1;
 8104d12:	2301      	movs	r3, #1
 8104d14:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                    break;
 8104d18:	e035      	b.n	8104d86 <deca_3dlocate+0x246>

                case ERR_TRIL_CONCENTRIC:
                    concentric = 1;
 8104d1a:	2301      	movs	r3, #1
 8104d1c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
                    break;
 8104d20:	e031      	b.n	8104d86 <deca_3dlocate+0x246>

                default: // any other return value goes here
                    ovr_r1 += 0.10;
 8104d22:	a361      	add	r3, pc, #388	@ (adr r3, 8104ea8 <deca_3dlocate+0x368>)
 8104d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d28:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8104d2c:	f7fb fb36 	bl	810039c <__adddf3>
 8104d30:	4602      	mov	r2, r0
 8104d32:	460b      	mov	r3, r1
 8104d34:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
                    ovr_r2 += 0.10;
 8104d38:	a35b      	add	r3, pc, #364	@ (adr r3, 8104ea8 <deca_3dlocate+0x368>)
 8104d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d3e:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 8104d42:	f7fb fb2b 	bl	810039c <__adddf3>
 8104d46:	4602      	mov	r2, r0
 8104d48:	460b      	mov	r3, r1
 8104d4a:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
                    ovr_r3 += 0.10;
 8104d4e:	a356      	add	r3, pc, #344	@ (adr r3, 8104ea8 <deca_3dlocate+0x368>)
 8104d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d54:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 8104d58:	f7fb fb20 	bl	810039c <__adddf3>
 8104d5c:	4602      	mov	r2, r0
 8104d5e:	460b      	mov	r3, r1
 8104d60:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
                    ovr_r4 += 0.10;
 8104d64:	a350      	add	r3, pc, #320	@ (adr r3, 8104ea8 <deca_3dlocate+0x368>)
 8104d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d6a:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8104d6e:	f7fb fb15 	bl	810039c <__adddf3>
 8104d72:	4602      	mov	r2, r0
 8104d74:	460b      	mov	r3, r1
 8104d76:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
                    overlook_count++;
 8104d7a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8104d7e:	3301      	adds	r3, #1
 8104d80:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
                    break;
 8104d84:	bf00      	nop
            }

            //qDebug() << "while(!success)" << overlook_count << concentric << "result" << result;

        }
        while (!success && (overlook_count <= 5) && !concentric);
 8104d86:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8104d8a:	2b00      	cmp	r3, #0
 8104d8c:	d108      	bne.n	8104da0 <deca_3dlocate+0x260>
 8104d8e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8104d92:	2b05      	cmp	r3, #5
 8104d94:	dc04      	bgt.n	8104da0 <deca_3dlocate+0x260>
 8104d96:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8104d9a:	2b00      	cmp	r3, #0
 8104d9c:	f43f af5a 	beq.w	8104c54 <deca_3dlocate+0x114>

        if (success)
 8104da0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8104da4:	2b00      	cmp	r3, #0
 8104da6:	f000 8419 	beq.w	81055dc <deca_3dlocate+0xa9c>
        {
            switch (result)
 8104daa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8104dae:	2b03      	cmp	r3, #3
 8104db0:	d005      	beq.n	8104dbe <deca_3dlocate+0x27e>
 8104db2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8104db6:	2b04      	cmp	r3, #4
 8104db8:	d02f      	beq.n	8104e1a <deca_3dlocate+0x2da>
                        combination_counter--;
                    }
                    break;

                default:
                    break;
 8104dba:	f000 bc15 	b.w	81055e8 <deca_3dlocate+0xaa8>
                    *solution1 = o1;
 8104dbe:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104dc2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8104dc6:	681a      	ldr	r2, [r3, #0]
 8104dc8:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104dcc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8104dd0:	4614      	mov	r4, r2
 8104dd2:	461d      	mov	r5, r3
 8104dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104dd8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8104ddc:	e884 0003 	stmia.w	r4, {r0, r1}
                    *solution2 = o2;
 8104de0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104de4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8104de8:	681a      	ldr	r2, [r3, #0]
 8104dea:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104dee:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8104df2:	4614      	mov	r4, r2
 8104df4:	461d      	mov	r5, r3
 8104df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104dfa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8104dfe:	e884 0003 	stmia.w	r4, {r0, r1}
                    *nosolution_count = overlook_count;
 8104e02:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104e06:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8104e0a:	681b      	ldr	r3, [r3, #0]
 8104e0c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8104e10:	601a      	str	r2, [r3, #0]
                    combination_counter = 0;
 8104e12:	2300      	movs	r3, #0
 8104e14:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                    break;
 8104e18:	e3e6      	b.n	81055e8 <deca_3dlocate+0xaa8>
                    gdoprate_compare1   = gdoprate(solution, p1, p2, p3);
 8104e1a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104e1e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8104e22:	ed93 3b00 	vldr	d3, [r3]
 8104e26:	ed93 4b02 	vldr	d4, [r3, #8]
 8104e2a:	ed93 5b04 	vldr	d5, [r3, #16]
 8104e2e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104e32:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8104e36:	ed93 2b00 	vldr	d2, [r3]
 8104e3a:	ed93 6b02 	vldr	d6, [r3, #8]
 8104e3e:	ed93 7b04 	vldr	d7, [r3, #16]
 8104e42:	ad06      	add	r5, sp, #24
 8104e44:	f507 7408 	add.w	r4, r7, #544	@ 0x220
 8104e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104e4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8104e50:	e885 0003 	stmia.w	r5, {r0, r1}
 8104e54:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104e58:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8104e5c:	466c      	mov	r4, sp
 8104e5e:	461d      	mov	r5, r3
 8104e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104e64:	e895 0003 	ldmia.w	r5, {r0, r1}
 8104e68:	e884 0003 	stmia.w	r4, {r0, r1}
 8104e6c:	eeb0 0a42 	vmov.f32	s0, s4
 8104e70:	eef0 0a62 	vmov.f32	s1, s5
 8104e74:	eeb0 1a46 	vmov.f32	s2, s12
 8104e78:	eef0 1a66 	vmov.f32	s3, s13
 8104e7c:	eeb0 2a47 	vmov.f32	s4, s14
 8104e80:	eef0 2a67 	vmov.f32	s5, s15
 8104e84:	f7fc ffd8 	bl	8101e38 <gdoprate>
 8104e88:	ed87 0b6c 	vstr	d0, [r7, #432]	@ 0x1b0
                    if (gdoprate_compare1 <= gdoprate_compare2)
 8104e8c:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8104e90:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 8104e94:	f7fb feb4 	bl	8100c00 <__aeabi_dcmple>
 8104e98:	4603      	mov	r3, r0
 8104e9a:	2b00      	cmp	r3, #0
 8104e9c:	d10a      	bne.n	8104eb4 <deca_3dlocate+0x374>
                    break;
 8104e9e:	e3a3      	b.n	81055e8 <deca_3dlocate+0xaa8>
 8104ea0:	d2f1a9fc 	.word	0xd2f1a9fc
 8104ea4:	3f50624d 	.word	0x3f50624d
 8104ea8:	9999999a 	.word	0x9999999a
 8104eac:	3fb99999 	.word	0x3fb99999
 8104eb0:	3ff00000 	.word	0x3ff00000
                        *solution1 = o1;
 8104eb4:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104eb8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8104ebc:	681a      	ldr	r2, [r3, #0]
 8104ebe:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104ec2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8104ec6:	4614      	mov	r4, r2
 8104ec8:	461d      	mov	r5, r3
 8104eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104ece:	e895 0003 	ldmia.w	r5, {r0, r1}
 8104ed2:	e884 0003 	stmia.w	r4, {r0, r1}
                        *solution2 = o2;
 8104ed6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104eda:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8104ede:	681a      	ldr	r2, [r3, #0]
 8104ee0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104ee4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8104ee8:	4614      	mov	r4, r2
 8104eea:	461d      	mov	r5, r3
 8104eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104ef0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8104ef4:	e884 0003 	stmia.w	r4, {r0, r1}
                        *best_solution  = solution;
 8104ef8:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104efc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8104f00:	681a      	ldr	r2, [r3, #0]
 8104f02:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104f06:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8104f0a:	4614      	mov	r4, r2
 8104f0c:	461d      	mov	r5, r3
 8104f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104f12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8104f16:	e884 0003 	stmia.w	r4, {r0, r1}
                        *nosolution_count = overlook_count;
 8104f1a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104f1e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8104f22:	681b      	ldr	r3, [r3, #0]
 8104f24:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8104f28:	601a      	str	r2, [r3, #0]
                        *best_3derror   = sqrt((vnorm(vdiff(solution, p1))-r1)*(vnorm(vdiff(solution, p1))-r1) +
 8104f2a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104f2e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8104f32:	ed93 3b00 	vldr	d3, [r3]
 8104f36:	ed93 4b02 	vldr	d4, [r3, #8]
 8104f3a:	ed93 5b04 	vldr	d5, [r3, #16]
 8104f3e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104f42:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8104f46:	ed93 2b00 	vldr	d2, [r3]
 8104f4a:	ed93 6b02 	vldr	d6, [r3, #8]
 8104f4e:	ed93 7b04 	vldr	d7, [r3, #16]
 8104f52:	eeb0 0a42 	vmov.f32	s0, s4
 8104f56:	eef0 0a62 	vmov.f32	s1, s5
 8104f5a:	eeb0 1a46 	vmov.f32	s2, s12
 8104f5e:	eef0 1a66 	vmov.f32	s3, s13
 8104f62:	eeb0 2a47 	vmov.f32	s4, s14
 8104f66:	eef0 2a67 	vmov.f32	s5, s15
 8104f6a:	f7fc fcdb 	bl	8101924 <vdiff>
 8104f6e:	eeb0 5a40 	vmov.f32	s10, s0
 8104f72:	eef0 5a60 	vmov.f32	s11, s1
 8104f76:	eeb0 6a41 	vmov.f32	s12, s2
 8104f7a:	eef0 6a61 	vmov.f32	s13, s3
 8104f7e:	eeb0 7a42 	vmov.f32	s14, s4
 8104f82:	eef0 7a62 	vmov.f32	s15, s5
 8104f86:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104f8a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8104f8e:	ed83 5b00 	vstr	d5, [r3]
 8104f92:	ed83 6b02 	vstr	d6, [r3, #8]
 8104f96:	ed83 7b04 	vstr	d7, [r3, #16]
 8104f9a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104f9e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8104fa2:	ed93 5b00 	vldr	d5, [r3]
 8104fa6:	ed93 6b02 	vldr	d6, [r3, #8]
 8104faa:	ed93 7b04 	vldr	d7, [r3, #16]
 8104fae:	eeb0 0a45 	vmov.f32	s0, s10
 8104fb2:	eef0 0a65 	vmov.f32	s1, s11
 8104fb6:	eeb0 1a46 	vmov.f32	s2, s12
 8104fba:	eef0 1a66 	vmov.f32	s3, s13
 8104fbe:	eeb0 2a47 	vmov.f32	s4, s14
 8104fc2:	eef0 2a67 	vmov.f32	s5, s15
 8104fc6:	f7fc fe15 	bl	8101bf4 <vnorm>
 8104fca:	ec51 0b10 	vmov	r0, r1, d0
 8104fce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8104fd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8104fd6:	f7fb f9df 	bl	8100398 <__aeabi_dsub>
 8104fda:	4602      	mov	r2, r0
 8104fdc:	460b      	mov	r3, r1
 8104fde:	4614      	mov	r4, r2
 8104fe0:	461d      	mov	r5, r3
 8104fe2:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104fe6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8104fea:	ed93 3b00 	vldr	d3, [r3]
 8104fee:	ed93 4b02 	vldr	d4, [r3, #8]
 8104ff2:	ed93 5b04 	vldr	d5, [r3, #16]
 8104ff6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8104ffa:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8104ffe:	ed93 2b00 	vldr	d2, [r3]
 8105002:	ed93 6b02 	vldr	d6, [r3, #8]
 8105006:	ed93 7b04 	vldr	d7, [r3, #16]
 810500a:	eeb0 0a42 	vmov.f32	s0, s4
 810500e:	eef0 0a62 	vmov.f32	s1, s5
 8105012:	eeb0 1a46 	vmov.f32	s2, s12
 8105016:	eef0 1a66 	vmov.f32	s3, s13
 810501a:	eeb0 2a47 	vmov.f32	s4, s14
 810501e:	eef0 2a67 	vmov.f32	s5, s15
 8105022:	f7fc fc7f 	bl	8101924 <vdiff>
 8105026:	eeb0 5a40 	vmov.f32	s10, s0
 810502a:	eef0 5a60 	vmov.f32	s11, s1
 810502e:	eeb0 6a41 	vmov.f32	s12, s2
 8105032:	eef0 6a61 	vmov.f32	s13, s3
 8105036:	eeb0 7a42 	vmov.f32	s14, s4
 810503a:	eef0 7a62 	vmov.f32	s15, s5
 810503e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8105042:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8105046:	ed83 5b00 	vstr	d5, [r3]
 810504a:	ed83 6b02 	vstr	d6, [r3, #8]
 810504e:	ed83 7b04 	vstr	d7, [r3, #16]
 8105052:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8105056:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 810505a:	ed93 5b00 	vldr	d5, [r3]
 810505e:	ed93 6b02 	vldr	d6, [r3, #8]
 8105062:	ed93 7b04 	vldr	d7, [r3, #16]
 8105066:	eeb0 0a45 	vmov.f32	s0, s10
 810506a:	eef0 0a65 	vmov.f32	s1, s11
 810506e:	eeb0 1a46 	vmov.f32	s2, s12
 8105072:	eef0 1a66 	vmov.f32	s3, s13
 8105076:	eeb0 2a47 	vmov.f32	s4, s14
 810507a:	eef0 2a67 	vmov.f32	s5, s15
 810507e:	f7fc fdb9 	bl	8101bf4 <vnorm>
 8105082:	ec51 0b10 	vmov	r0, r1, d0
 8105086:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810508a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810508e:	f7fb f983 	bl	8100398 <__aeabi_dsub>
 8105092:	4602      	mov	r2, r0
 8105094:	460b      	mov	r3, r1
 8105096:	4620      	mov	r0, r4
 8105098:	4629      	mov	r1, r5
 810509a:	f7fb fb35 	bl	8100708 <__aeabi_dmul>
 810509e:	4602      	mov	r2, r0
 81050a0:	460b      	mov	r3, r1
 81050a2:	4614      	mov	r4, r2
 81050a4:	461d      	mov	r5, r3
                                               (vnorm(vdiff(solution, p2))-r2)*(vnorm(vdiff(solution, p2))-r2) +
 81050a6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 81050aa:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 81050ae:	ed93 3b00 	vldr	d3, [r3]
 81050b2:	ed93 4b02 	vldr	d4, [r3, #8]
 81050b6:	ed93 5b04 	vldr	d5, [r3, #16]
 81050ba:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 81050be:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 81050c2:	ed93 2b00 	vldr	d2, [r3]
 81050c6:	ed93 6b02 	vldr	d6, [r3, #8]
 81050ca:	ed93 7b04 	vldr	d7, [r3, #16]
 81050ce:	eeb0 0a42 	vmov.f32	s0, s4
 81050d2:	eef0 0a62 	vmov.f32	s1, s5
 81050d6:	eeb0 1a46 	vmov.f32	s2, s12
 81050da:	eef0 1a66 	vmov.f32	s3, s13
 81050de:	eeb0 2a47 	vmov.f32	s4, s14
 81050e2:	eef0 2a67 	vmov.f32	s5, s15
 81050e6:	f7fc fc1d 	bl	8101924 <vdiff>
 81050ea:	eeb0 5a40 	vmov.f32	s10, s0
 81050ee:	eef0 5a60 	vmov.f32	s11, s1
 81050f2:	eeb0 6a41 	vmov.f32	s12, s2
 81050f6:	eef0 6a61 	vmov.f32	s13, s3
 81050fa:	eeb0 7a42 	vmov.f32	s14, s4
 81050fe:	eef0 7a62 	vmov.f32	s15, s5
 8105102:	ed87 5b44 	vstr	d5, [r7, #272]	@ 0x110
 8105106:	ed87 6b46 	vstr	d6, [r7, #280]	@ 0x118
 810510a:	ed87 7b48 	vstr	d7, [r7, #288]	@ 0x120
 810510e:	ed97 5b44 	vldr	d5, [r7, #272]	@ 0x110
 8105112:	ed97 6b46 	vldr	d6, [r7, #280]	@ 0x118
 8105116:	ed97 7b48 	vldr	d7, [r7, #288]	@ 0x120
 810511a:	eeb0 0a45 	vmov.f32	s0, s10
 810511e:	eef0 0a65 	vmov.f32	s1, s11
 8105122:	eeb0 1a46 	vmov.f32	s2, s12
 8105126:	eef0 1a66 	vmov.f32	s3, s13
 810512a:	eeb0 2a47 	vmov.f32	s4, s14
 810512e:	eef0 2a67 	vmov.f32	s5, s15
 8105132:	f7fc fd5f 	bl	8101bf4 <vnorm>
 8105136:	ec51 0b10 	vmov	r0, r1, d0
 810513a:	f107 0308 	add.w	r3, r7, #8
 810513e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8105142:	f7fb f929 	bl	8100398 <__aeabi_dsub>
 8105146:	4602      	mov	r2, r0
 8105148:	460b      	mov	r3, r1
 810514a:	4690      	mov	r8, r2
 810514c:	4699      	mov	r9, r3
 810514e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8105152:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8105156:	ed93 3b00 	vldr	d3, [r3]
 810515a:	ed93 4b02 	vldr	d4, [r3, #8]
 810515e:	ed93 5b04 	vldr	d5, [r3, #16]
 8105162:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8105166:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 810516a:	ed93 2b00 	vldr	d2, [r3]
 810516e:	ed93 6b02 	vldr	d6, [r3, #8]
 8105172:	ed93 7b04 	vldr	d7, [r3, #16]
 8105176:	eeb0 0a42 	vmov.f32	s0, s4
 810517a:	eef0 0a62 	vmov.f32	s1, s5
 810517e:	eeb0 1a46 	vmov.f32	s2, s12
 8105182:	eef0 1a66 	vmov.f32	s3, s13
 8105186:	eeb0 2a47 	vmov.f32	s4, s14
 810518a:	eef0 2a67 	vmov.f32	s5, s15
 810518e:	f7fc fbc9 	bl	8101924 <vdiff>
 8105192:	eeb0 5a40 	vmov.f32	s10, s0
 8105196:	eef0 5a60 	vmov.f32	s11, s1
 810519a:	eeb0 6a41 	vmov.f32	s12, s2
 810519e:	eef0 6a61 	vmov.f32	s13, s3
 81051a2:	eeb0 7a42 	vmov.f32	s14, s4
 81051a6:	eef0 7a62 	vmov.f32	s15, s5
 81051aa:	ed87 5b4a 	vstr	d5, [r7, #296]	@ 0x128
 81051ae:	ed87 6b4c 	vstr	d6, [r7, #304]	@ 0x130
 81051b2:	ed87 7b4e 	vstr	d7, [r7, #312]	@ 0x138
 81051b6:	ed97 5b4a 	vldr	d5, [r7, #296]	@ 0x128
 81051ba:	ed97 6b4c 	vldr	d6, [r7, #304]	@ 0x130
 81051be:	ed97 7b4e 	vldr	d7, [r7, #312]	@ 0x138
 81051c2:	eeb0 0a45 	vmov.f32	s0, s10
 81051c6:	eef0 0a65 	vmov.f32	s1, s11
 81051ca:	eeb0 1a46 	vmov.f32	s2, s12
 81051ce:	eef0 1a66 	vmov.f32	s3, s13
 81051d2:	eeb0 2a47 	vmov.f32	s4, s14
 81051d6:	eef0 2a67 	vmov.f32	s5, s15
 81051da:	f7fc fd0b 	bl	8101bf4 <vnorm>
 81051de:	ec51 0b10 	vmov	r0, r1, d0
 81051e2:	f107 0308 	add.w	r3, r7, #8
 81051e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 81051ea:	f7fb f8d5 	bl	8100398 <__aeabi_dsub>
 81051ee:	4602      	mov	r2, r0
 81051f0:	460b      	mov	r3, r1
 81051f2:	4640      	mov	r0, r8
 81051f4:	4649      	mov	r1, r9
 81051f6:	f7fb fa87 	bl	8100708 <__aeabi_dmul>
 81051fa:	4602      	mov	r2, r0
 81051fc:	460b      	mov	r3, r1
                        *best_3derror   = sqrt((vnorm(vdiff(solution, p1))-r1)*(vnorm(vdiff(solution, p1))-r1) +
 81051fe:	4620      	mov	r0, r4
 8105200:	4629      	mov	r1, r5
 8105202:	f7fb f8cb 	bl	810039c <__adddf3>
 8105206:	4602      	mov	r2, r0
 8105208:	460b      	mov	r3, r1
 810520a:	4614      	mov	r4, r2
 810520c:	461d      	mov	r5, r3
                                               (vnorm(vdiff(solution, p3))-r3)*(vnorm(vdiff(solution, p3))-r3) +
 810520e:	ed97 3b88 	vldr	d3, [r7, #544]	@ 0x220
 8105212:	ed97 4b8a 	vldr	d4, [r7, #552]	@ 0x228
 8105216:	ed97 5b8c 	vldr	d5, [r7, #560]	@ 0x230
 810521a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 810521e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8105222:	ed93 2b00 	vldr	d2, [r3]
 8105226:	ed93 6b02 	vldr	d6, [r3, #8]
 810522a:	ed93 7b04 	vldr	d7, [r3, #16]
 810522e:	eeb0 0a42 	vmov.f32	s0, s4
 8105232:	eef0 0a62 	vmov.f32	s1, s5
 8105236:	eeb0 1a46 	vmov.f32	s2, s12
 810523a:	eef0 1a66 	vmov.f32	s3, s13
 810523e:	eeb0 2a47 	vmov.f32	s4, s14
 8105242:	eef0 2a67 	vmov.f32	s5, s15
 8105246:	f7fc fb6d 	bl	8101924 <vdiff>
 810524a:	eeb0 5a40 	vmov.f32	s10, s0
 810524e:	eef0 5a60 	vmov.f32	s11, s1
 8105252:	eeb0 6a41 	vmov.f32	s12, s2
 8105256:	eef0 6a61 	vmov.f32	s13, s3
 810525a:	eeb0 7a42 	vmov.f32	s14, s4
 810525e:	eef0 7a62 	vmov.f32	s15, s5
 8105262:	ed87 5b50 	vstr	d5, [r7, #320]	@ 0x140
 8105266:	ed87 6b52 	vstr	d6, [r7, #328]	@ 0x148
 810526a:	ed87 7b54 	vstr	d7, [r7, #336]	@ 0x150
 810526e:	ed97 5b50 	vldr	d5, [r7, #320]	@ 0x140
 8105272:	ed97 6b52 	vldr	d6, [r7, #328]	@ 0x148
 8105276:	ed97 7b54 	vldr	d7, [r7, #336]	@ 0x150
 810527a:	eeb0 0a45 	vmov.f32	s0, s10
 810527e:	eef0 0a65 	vmov.f32	s1, s11
 8105282:	eeb0 1a46 	vmov.f32	s2, s12
 8105286:	eef0 1a66 	vmov.f32	s3, s13
 810528a:	eeb0 2a47 	vmov.f32	s4, s14
 810528e:	eef0 2a67 	vmov.f32	s5, s15
 8105292:	f7fc fcaf 	bl	8101bf4 <vnorm>
 8105296:	ec51 0b10 	vmov	r0, r1, d0
 810529a:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 810529e:	f7fb f87b 	bl	8100398 <__aeabi_dsub>
 81052a2:	4602      	mov	r2, r0
 81052a4:	460b      	mov	r3, r1
 81052a6:	4690      	mov	r8, r2
 81052a8:	4699      	mov	r9, r3
 81052aa:	ed97 3b88 	vldr	d3, [r7, #544]	@ 0x220
 81052ae:	ed97 4b8a 	vldr	d4, [r7, #552]	@ 0x228
 81052b2:	ed97 5b8c 	vldr	d5, [r7, #560]	@ 0x230
 81052b6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 81052ba:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 81052be:	ed93 2b00 	vldr	d2, [r3]
 81052c2:	ed93 6b02 	vldr	d6, [r3, #8]
 81052c6:	ed93 7b04 	vldr	d7, [r3, #16]
 81052ca:	eeb0 0a42 	vmov.f32	s0, s4
 81052ce:	eef0 0a62 	vmov.f32	s1, s5
 81052d2:	eeb0 1a46 	vmov.f32	s2, s12
 81052d6:	eef0 1a66 	vmov.f32	s3, s13
 81052da:	eeb0 2a47 	vmov.f32	s4, s14
 81052de:	eef0 2a67 	vmov.f32	s5, s15
 81052e2:	f7fc fb1f 	bl	8101924 <vdiff>
 81052e6:	eeb0 5a40 	vmov.f32	s10, s0
 81052ea:	eef0 5a60 	vmov.f32	s11, s1
 81052ee:	eeb0 6a41 	vmov.f32	s12, s2
 81052f2:	eef0 6a61 	vmov.f32	s13, s3
 81052f6:	eeb0 7a42 	vmov.f32	s14, s4
 81052fa:	eef0 7a62 	vmov.f32	s15, s5
 81052fe:	ed87 5b56 	vstr	d5, [r7, #344]	@ 0x158
 8105302:	ed87 6b58 	vstr	d6, [r7, #352]	@ 0x160
 8105306:	ed87 7b5a 	vstr	d7, [r7, #360]	@ 0x168
 810530a:	ed97 5b56 	vldr	d5, [r7, #344]	@ 0x158
 810530e:	ed97 6b58 	vldr	d6, [r7, #352]	@ 0x160
 8105312:	ed97 7b5a 	vldr	d7, [r7, #360]	@ 0x168
 8105316:	eeb0 0a45 	vmov.f32	s0, s10
 810531a:	eef0 0a65 	vmov.f32	s1, s11
 810531e:	eeb0 1a46 	vmov.f32	s2, s12
 8105322:	eef0 1a66 	vmov.f32	s3, s13
 8105326:	eeb0 2a47 	vmov.f32	s4, s14
 810532a:	eef0 2a67 	vmov.f32	s5, s15
 810532e:	f7fc fc61 	bl	8101bf4 <vnorm>
 8105332:	ec51 0b10 	vmov	r0, r1, d0
 8105336:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 810533a:	f7fb f82d 	bl	8100398 <__aeabi_dsub>
 810533e:	4602      	mov	r2, r0
 8105340:	460b      	mov	r3, r1
 8105342:	4640      	mov	r0, r8
 8105344:	4649      	mov	r1, r9
 8105346:	f7fb f9df 	bl	8100708 <__aeabi_dmul>
 810534a:	4602      	mov	r2, r0
 810534c:	460b      	mov	r3, r1
                                               (vnorm(vdiff(solution, p2))-r2)*(vnorm(vdiff(solution, p2))-r2) +
 810534e:	4620      	mov	r0, r4
 8105350:	4629      	mov	r1, r5
 8105352:	f7fb f823 	bl	810039c <__adddf3>
 8105356:	4602      	mov	r2, r0
 8105358:	460b      	mov	r3, r1
 810535a:	4614      	mov	r4, r2
 810535c:	461d      	mov	r5, r3
                                               (vnorm(vdiff(solution, p4))-r4)*(vnorm(vdiff(solution, p4))-r4));
 810535e:	ed97 3b90 	vldr	d3, [r7, #576]	@ 0x240
 8105362:	ed97 4b92 	vldr	d4, [r7, #584]	@ 0x248
 8105366:	ed97 5b94 	vldr	d5, [r7, #592]	@ 0x250
 810536a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 810536e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8105372:	ed93 2b00 	vldr	d2, [r3]
 8105376:	ed93 6b02 	vldr	d6, [r3, #8]
 810537a:	ed93 7b04 	vldr	d7, [r3, #16]
 810537e:	eeb0 0a42 	vmov.f32	s0, s4
 8105382:	eef0 0a62 	vmov.f32	s1, s5
 8105386:	eeb0 1a46 	vmov.f32	s2, s12
 810538a:	eef0 1a66 	vmov.f32	s3, s13
 810538e:	eeb0 2a47 	vmov.f32	s4, s14
 8105392:	eef0 2a67 	vmov.f32	s5, s15
 8105396:	f7fc fac5 	bl	8101924 <vdiff>
 810539a:	eeb0 5a40 	vmov.f32	s10, s0
 810539e:	eef0 5a60 	vmov.f32	s11, s1
 81053a2:	eeb0 6a41 	vmov.f32	s12, s2
 81053a6:	eef0 6a61 	vmov.f32	s13, s3
 81053aa:	eeb0 7a42 	vmov.f32	s14, s4
 81053ae:	eef0 7a62 	vmov.f32	s15, s5
 81053b2:	ed87 5b5c 	vstr	d5, [r7, #368]	@ 0x170
 81053b6:	ed87 6b5e 	vstr	d6, [r7, #376]	@ 0x178
 81053ba:	ed87 7b60 	vstr	d7, [r7, #384]	@ 0x180
 81053be:	ed97 5b5c 	vldr	d5, [r7, #368]	@ 0x170
 81053c2:	ed97 6b5e 	vldr	d6, [r7, #376]	@ 0x178
 81053c6:	ed97 7b60 	vldr	d7, [r7, #384]	@ 0x180
 81053ca:	eeb0 0a45 	vmov.f32	s0, s10
 81053ce:	eef0 0a65 	vmov.f32	s1, s11
 81053d2:	eeb0 1a46 	vmov.f32	s2, s12
 81053d6:	eef0 1a66 	vmov.f32	s3, s13
 81053da:	eeb0 2a47 	vmov.f32	s4, s14
 81053de:	eef0 2a67 	vmov.f32	s5, s15
 81053e2:	f7fc fc07 	bl	8101bf4 <vnorm>
 81053e6:	ec51 0b10 	vmov	r0, r1, d0
 81053ea:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 81053ee:	f7fa ffd3 	bl	8100398 <__aeabi_dsub>
 81053f2:	4602      	mov	r2, r0
 81053f4:	460b      	mov	r3, r1
 81053f6:	4690      	mov	r8, r2
 81053f8:	4699      	mov	r9, r3
 81053fa:	ed97 3b90 	vldr	d3, [r7, #576]	@ 0x240
 81053fe:	ed97 4b92 	vldr	d4, [r7, #584]	@ 0x248
 8105402:	ed97 5b94 	vldr	d5, [r7, #592]	@ 0x250
 8105406:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 810540a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 810540e:	ed93 2b00 	vldr	d2, [r3]
 8105412:	ed93 6b02 	vldr	d6, [r3, #8]
 8105416:	ed93 7b04 	vldr	d7, [r3, #16]
 810541a:	eeb0 0a42 	vmov.f32	s0, s4
 810541e:	eef0 0a62 	vmov.f32	s1, s5
 8105422:	eeb0 1a46 	vmov.f32	s2, s12
 8105426:	eef0 1a66 	vmov.f32	s3, s13
 810542a:	eeb0 2a47 	vmov.f32	s4, s14
 810542e:	eef0 2a67 	vmov.f32	s5, s15
 8105432:	f7fc fa77 	bl	8101924 <vdiff>
 8105436:	eeb0 5a40 	vmov.f32	s10, s0
 810543a:	eef0 5a60 	vmov.f32	s11, s1
 810543e:	eeb0 6a41 	vmov.f32	s12, s2
 8105442:	eef0 6a61 	vmov.f32	s13, s3
 8105446:	eeb0 7a42 	vmov.f32	s14, s4
 810544a:	eef0 7a62 	vmov.f32	s15, s5
 810544e:	ed87 5b62 	vstr	d5, [r7, #392]	@ 0x188
 8105452:	ed87 6b64 	vstr	d6, [r7, #400]	@ 0x190
 8105456:	ed87 7b66 	vstr	d7, [r7, #408]	@ 0x198
 810545a:	ed97 5b62 	vldr	d5, [r7, #392]	@ 0x188
 810545e:	ed97 6b64 	vldr	d6, [r7, #400]	@ 0x190
 8105462:	ed97 7b66 	vldr	d7, [r7, #408]	@ 0x198
 8105466:	eeb0 0a45 	vmov.f32	s0, s10
 810546a:	eef0 0a65 	vmov.f32	s1, s11
 810546e:	eeb0 1a46 	vmov.f32	s2, s12
 8105472:	eef0 1a66 	vmov.f32	s3, s13
 8105476:	eeb0 2a47 	vmov.f32	s4, s14
 810547a:	eef0 2a67 	vmov.f32	s5, s15
 810547e:	f7fc fbb9 	bl	8101bf4 <vnorm>
 8105482:	ec51 0b10 	vmov	r0, r1, d0
 8105486:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 810548a:	f7fa ff85 	bl	8100398 <__aeabi_dsub>
 810548e:	4602      	mov	r2, r0
 8105490:	460b      	mov	r3, r1
 8105492:	4640      	mov	r0, r8
 8105494:	4649      	mov	r1, r9
 8105496:	f7fb f937 	bl	8100708 <__aeabi_dmul>
 810549a:	4602      	mov	r2, r0
 810549c:	460b      	mov	r3, r1
                        *best_3derror   = sqrt((vnorm(vdiff(solution, p1))-r1)*(vnorm(vdiff(solution, p1))-r1) +
 810549e:	4620      	mov	r0, r4
 81054a0:	4629      	mov	r1, r5
 81054a2:	f7fa ff7b 	bl	810039c <__adddf3>
 81054a6:	4602      	mov	r2, r0
 81054a8:	460b      	mov	r3, r1
 81054aa:	ec43 2b17 	vmov	d7, r2, r3
 81054ae:	eeb0 0a47 	vmov.f32	s0, s14
 81054b2:	eef0 0a67 	vmov.f32	s1, s15
 81054b6:	f00d fc05 	bl	8112cc4 <sqrt>
 81054ba:	eeb0 7a40 	vmov.f32	s14, s0
 81054be:	eef0 7a60 	vmov.f32	s15, s1
 81054c2:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 81054c6:	ed83 7b00 	vstr	d7, [r3]
                        *best_gdoprate  = gdoprate_compare1;
 81054ca:	f8d7 121c 	ldr.w	r1, [r7, #540]	@ 0x21c
 81054ce:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 81054d2:	e9c1 2300 	strd	r2, r3, [r1]
                        solution_compare2 = solution_compare1;
 81054d6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 81054da:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 81054de:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 81054e2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 81054e6:	4614      	mov	r4, r2
 81054e8:	461d      	mov	r5, r3
 81054ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81054ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81054ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 81054f2:	e884 0003 	stmia.w	r4, {r0, r1}
                        gdoprate_compare2 = gdoprate_compare1;
 81054f6:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 81054fa:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0
                        *combination = 5 - combination_counter;
 81054fe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8105502:	f1c3 0205 	rsb	r2, r3, #5
 8105506:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 810550a:	601a      	str	r2, [r3, #0]
                        ptemp = p1;
 810550c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8105510:	f5a3 72bc 	sub.w	r2, r3, #376	@ 0x178
 8105514:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8105518:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 810551c:	4614      	mov	r4, r2
 810551e:	461d      	mov	r5, r3
 8105520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8105522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8105524:	e895 0003 	ldmia.w	r5, {r0, r1}
 8105528:	e884 0003 	stmia.w	r4, {r0, r1}
                        p1 = p2;
 810552c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8105530:	f5a3 72e8 	sub.w	r2, r3, #464	@ 0x1d0
 8105534:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8105538:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 810553c:	4614      	mov	r4, r2
 810553e:	461d      	mov	r5, r3
 8105540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8105542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8105544:	e895 0003 	ldmia.w	r5, {r0, r1}
 8105548:	e884 0003 	stmia.w	r4, {r0, r1}
                        p2 = p3;
 810554c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8105550:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8105554:	461d      	mov	r5, r3
 8105556:	f507 7408 	add.w	r4, r7, #544	@ 0x220
 810555a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810555c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810555e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8105562:	e885 0003 	stmia.w	r5, {r0, r1}
                        p3 = p4;
 8105566:	f507 7408 	add.w	r4, r7, #544	@ 0x220
 810556a:	f507 7510 	add.w	r5, r7, #576	@ 0x240
 810556e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8105570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8105572:	e895 0003 	ldmia.w	r5, {r0, r1}
 8105576:	e884 0003 	stmia.w	r4, {r0, r1}
                        p4 = ptemp;
 810557a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 810557e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8105582:	f507 7410 	add.w	r4, r7, #576	@ 0x240
 8105586:	461d      	mov	r5, r3
 8105588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810558a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810558c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8105590:	e884 0003 	stmia.w	r4, {r0, r1}
                        rtemp = r1;
 8105594:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8105598:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810559c:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
                        r1 = r2;
 81055a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81055a4:	4619      	mov	r1, r3
 81055a6:	f107 0308 	add.w	r3, r7, #8
 81055aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 81055ae:	e941 2302 	strd	r2, r3, [r1, #-8]
                        r2 = r3;
 81055b2:	f107 0308 	add.w	r3, r7, #8
 81055b6:	4619      	mov	r1, r3
 81055b8:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 81055bc:	e941 2302 	strd	r2, r3, [r1, #-8]
                        r3 = r4;
 81055c0:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 81055c4:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
                        r4 = rtemp;
 81055c8:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 81055cc:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
                        combination_counter--;
 81055d0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 81055d4:	3b01      	subs	r3, #1
 81055d6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                    break;
 81055da:	e005      	b.n	81055e8 <deca_3dlocate+0xaa8>
            }
        }
        else
        {
            //trilateration_errcounter++;
            trilateration_errcounter = 4;
 81055dc:	2304      	movs	r3, #4
 81055de:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
            combination_counter = 0;
 81055e2:	2300      	movs	r3, #0
 81055e4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
        //ptemp = p1; p1 = p2; p2 = p3; p3 = p4; p4 = ptemp;
        //rtemp = r1; r1 = r2; r2 = r3; r3 = r4; r4 = rtemp;
        //combination_counter--;
        //qDebug() << "while(combination_counter)" << combination_counter;
    }
    while (combination_counter);
 81055e8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 81055ec:	2b00      	cmp	r3, #0
 81055ee:	f47f ab14 	bne.w	8104c1a <deca_3dlocate+0xda>

    // if it gives error for all 4 sphere combinations then no valid result is given
    // otherwise return the trilateration mode used
    if (trilateration_errcounter >= 4) return -1;
 81055f2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 81055f6:	2b03      	cmp	r3, #3
 81055f8:	dd02      	ble.n	8105600 <deca_3dlocate+0xac0>
 81055fa:	f04f 33ff 	mov.w	r3, #4294967295
 81055fe:	e001      	b.n	8105604 <deca_3dlocate+0xac4>
    else return trilateration_mode34;
 8105600:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0

}
 8105604:	4618      	mov	r0, r3
 8105606:	f507 77fe 	add.w	r7, r7, #508	@ 0x1fc
 810560a:	46bd      	mov	sp, r7
 810560c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08105610 <GetLocation>:


int GetLocation(vec3d *best_solution, int use4thAnchor, vec3d* anchorArray, int *distanceArray)
{
 8105610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8105614:	b0da      	sub	sp, #360	@ 0x168
 8105616:	af14      	add	r7, sp, #80	@ 0x50
 8105618:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 810561c:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8105620:	6020      	str	r0, [r4, #0]
 8105622:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8105626:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 810562a:	6001      	str	r1, [r0, #0]
 810562c:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8105630:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8105634:	600a      	str	r2, [r1, #0]
 8105636:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 810563a:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 810563e:	6013      	str	r3, [r2, #0]

    vec3d   o1, o2, p1, p2, p3, p4;
    double    r1 = 0, r2 = 0, r3 = 0, r4 = 0, best_3derror, best_gdoprate;
 8105640:	f04f 0200 	mov.w	r2, #0
 8105644:	f04f 0300 	mov.w	r3, #0
 8105648:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
 810564c:	f04f 0200 	mov.w	r2, #0
 8105650:	f04f 0300 	mov.w	r3, #0
 8105654:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
 8105658:	f04f 0200 	mov.w	r2, #0
 810565c:	f04f 0300 	mov.w	r3, #0
 8105660:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
 8105664:	f04f 0200 	mov.w	r2, #0
 8105668:	f04f 0300 	mov.w	r3, #0
 810566c:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8

    vec3d   t3;
    double  dist1, dist2;

    /* Anchors coordinate */
    p1.x = anchorArray[0].x;
 8105670:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8105674:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8105678:	681b      	ldr	r3, [r3, #0]
 810567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810567e:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    p1.y = anchorArray[0].y;
 8105682:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8105686:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 810568a:	681b      	ldr	r3, [r3, #0]
 810568c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8105690:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    p1.z = anchorArray[0].z;
 8105694:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8105698:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 810569c:	681b      	ldr	r3, [r3, #0]
 810569e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 81056a2:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98

    p2.x = anchorArray[1].x;
 81056a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 81056aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 81056ae:	681b      	ldr	r3, [r3, #0]
 81056b0:	3318      	adds	r3, #24
 81056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81056b6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    p2.y = anchorArray[1].y;
 81056ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 81056be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 81056c2:	681b      	ldr	r3, [r3, #0]
 81056c4:	3318      	adds	r3, #24
 81056c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 81056ca:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    p2.z = anchorArray[1].z;
 81056ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 81056d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 81056d6:	681b      	ldr	r3, [r3, #0]
 81056d8:	3318      	adds	r3, #24
 81056da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 81056de:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

    p3.x = anchorArray[2].x;
 81056e2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 81056e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 81056ea:	681b      	ldr	r3, [r3, #0]
 81056ec:	3330      	adds	r3, #48	@ 0x30
 81056ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81056f2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    p3.y = anchorArray[2].y;
 81056f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 81056fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 81056fe:	681b      	ldr	r3, [r3, #0]
 8105700:	3330      	adds	r3, #48	@ 0x30
 8105702:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8105706:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    p3.z = anchorArray[2].z;
 810570a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 810570e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8105712:	681b      	ldr	r3, [r3, #0]
 8105714:	3330      	adds	r3, #48	@ 0x30
 8105716:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 810571a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

    p4.x = anchorArray[0].x;
 810571e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8105722:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8105726:	681b      	ldr	r3, [r3, #0]
 8105728:	e9d3 2300 	ldrd	r2, r3, [r3]
 810572c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    p4.y = anchorArray[0].y;
 8105730:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8105734:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8105738:	681b      	ldr	r3, [r3, #0]
 810573a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 810573e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    p4.z = anchorArray[0].z; //4th same as 1st - only 3 used for trilateration
 8105742:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8105746:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 810574a:	681b      	ldr	r3, [r3, #0]
 810574c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8105750:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    r1 = (double) distanceArray[0] / 1000.0;
 8105754:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8105758:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 810575c:	681b      	ldr	r3, [r3, #0]
 810575e:	681b      	ldr	r3, [r3, #0]
 8105760:	4618      	mov	r0, r3
 8105762:	f7fa ff67 	bl	8100634 <__aeabi_i2d>
 8105766:	f04f 0200 	mov.w	r2, #0
 810576a:	4bd5      	ldr	r3, [pc, #852]	@ (8105ac0 <GetLocation+0x4b0>)
 810576c:	f7fb f8f6 	bl	810095c <__aeabi_ddiv>
 8105770:	4602      	mov	r2, r0
 8105772:	460b      	mov	r3, r1
 8105774:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    r2 = (double) distanceArray[1] / 1000.0;
 8105778:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 810577c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8105780:	681b      	ldr	r3, [r3, #0]
 8105782:	3304      	adds	r3, #4
 8105784:	681b      	ldr	r3, [r3, #0]
 8105786:	4618      	mov	r0, r3
 8105788:	f7fa ff54 	bl	8100634 <__aeabi_i2d>
 810578c:	f04f 0200 	mov.w	r2, #0
 8105790:	4bcb      	ldr	r3, [pc, #812]	@ (8105ac0 <GetLocation+0x4b0>)
 8105792:	f7fb f8e3 	bl	810095c <__aeabi_ddiv>
 8105796:	4602      	mov	r2, r0
 8105798:	460b      	mov	r3, r1
 810579a:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
    r3 = (double) distanceArray[2] / 1000.0;
 810579e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 81057a2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 81057a6:	681b      	ldr	r3, [r3, #0]
 81057a8:	3308      	adds	r3, #8
 81057aa:	681b      	ldr	r3, [r3, #0]
 81057ac:	4618      	mov	r0, r3
 81057ae:	f7fa ff41 	bl	8100634 <__aeabi_i2d>
 81057b2:	f04f 0200 	mov.w	r2, #0
 81057b6:	4bc2      	ldr	r3, [pc, #776]	@ (8105ac0 <GetLocation+0x4b0>)
 81057b8:	f7fb f8d0 	bl	810095c <__aeabi_ddiv>
 81057bc:	4602      	mov	r2, r0
 81057be:	460b      	mov	r3, r1
 81057c0:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100

    //r4 = (double) distanceArray[3] / 1000.0;

    r4 = (double) distanceArray[0] / 1000.0;//4th same as 1st - only 3 used for trilateration
 81057c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 81057c8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 81057cc:	681b      	ldr	r3, [r3, #0]
 81057ce:	681b      	ldr	r3, [r3, #0]
 81057d0:	4618      	mov	r0, r3
 81057d2:	f7fa ff2f 	bl	8100634 <__aeabi_i2d>
 81057d6:	f04f 0200 	mov.w	r2, #0
 81057da:	4bb9      	ldr	r3, [pc, #740]	@ (8105ac0 <GetLocation+0x4b0>)
 81057dc:	f7fb f8be 	bl	810095c <__aeabi_ddiv>
 81057e0:	4602      	mov	r2, r0
 81057e2:	460b      	mov	r3, r1
 81057e4:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
    //printf("r1=%f , r2=%f, r3=%f,  r4=%f\r\n",r1,r2,r3,r4);
    //printf("Anthor0:x = %f,y = %f\r\n",p1.x,p1.y);
    //printf("Anthor1:x = %f,y = %f\r\n",p2.x,p2.y);
    //printf("Anthor2:x = %f,y = %f\r\n",p3.x,p3.y);
    /* get the best location using 3 or 4 spheres and keep it as know_best_location */
    result = deca_3dlocate (&o1, &o2, best_solution, &error, &best_3derror, &best_gdoprate,
 81057e8:	ed97 4b1c 	vldr	d4, [r7, #112]	@ 0x70
 81057ec:	ed97 5b1e 	vldr	d5, [r7, #120]	@ 0x78
 81057f0:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 81057f4:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 81057f8:	ed97 1b24 	vldr	d1, [r7, #144]	@ 0x90
 81057fc:	ed97 2b26 	vldr	d2, [r7, #152]	@ 0x98
 8105800:	f107 082c 	add.w	r8, r7, #44	@ 0x2c
 8105804:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8105808:	f5a3 7686 	sub.w	r6, r3, #268	@ 0x10c
 810580c:	f107 0ea0 	add.w	lr, r7, #160	@ 0xa0
 8105810:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 8105814:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8105818:	9312      	str	r3, [sp, #72]	@ 0x48
 810581a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 810581e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8105822:	ad0a      	add	r5, sp, #40	@ 0x28
 8105824:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8105828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 810582a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810582c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8105830:	e885 0003 	stmia.w	r5, {r0, r1}
 8105834:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8105838:	e9cd 2308 	strd	r2, r3, [sp, #32]
 810583c:	ad02      	add	r5, sp, #8
 810583e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8105842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105846:	e894 0003 	ldmia.w	r4, {r0, r1}
 810584a:	e885 0003 	stmia.w	r5, {r0, r1}
 810584e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8105852:	9301      	str	r3, [sp, #4]
 8105854:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8105858:	9300      	str	r3, [sp, #0]
 810585a:	ed97 7b42 	vldr	d7, [r7, #264]	@ 0x108
 810585e:	ed97 3b44 	vldr	d3, [r7, #272]	@ 0x110
 8105862:	4643      	mov	r3, r8
 8105864:	6832      	ldr	r2, [r6, #0]
 8105866:	4671      	mov	r1, lr
 8105868:	4660      	mov	r0, ip
 810586a:	f7ff f969 	bl	8104b40 <deca_3dlocate>
 810586e:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
                            p1, r1, p2, r2, p3, r3, p4, r1, &combination);

    //printf("result = %d\r\n",result);
    //qDebug() << "GetLocation" << result << "sol1: " << o1.x << o1.y << o1.z << " sol2: " << o2.x << o2.y << o2.z;

    if(result >= 0)
 8105872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8105876:	2b00      	cmp	r3, #0
 8105878:	f2c0 8113 	blt.w	8105aa2 <GetLocation+0x492>
    {
        if (use4thAnchor == 1) //if have 4 ranging results, then use 4th anchor to pick solution closest to it
 810587c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8105880:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8105884:	681b      	ldr	r3, [r3, #0]
 8105886:	2b01      	cmp	r3, #1
 8105888:	f040 80e5 	bne.w	8105a56 <GetLocation+0x446>
        {
            double diff1, diff2;
            /* find dist1 as the distance of o1 to known_best_location */
            t3 = vdiff(o1, anchorArray[3]);
 810588c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8105890:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8105894:	681b      	ldr	r3, [r3, #0]
 8105896:	3348      	adds	r3, #72	@ 0x48
 8105898:	ed93 3b00 	vldr	d3, [r3]
 810589c:	ed93 4b02 	vldr	d4, [r3, #8]
 81058a0:	ed93 5b04 	vldr	d5, [r3, #16]
 81058a4:	ed97 2b2e 	vldr	d2, [r7, #184]	@ 0xb8
 81058a8:	ed97 6b30 	vldr	d6, [r7, #192]	@ 0xc0
 81058ac:	ed97 7b32 	vldr	d7, [r7, #200]	@ 0xc8
 81058b0:	eeb0 0a42 	vmov.f32	s0, s4
 81058b4:	eef0 0a62 	vmov.f32	s1, s5
 81058b8:	eeb0 1a46 	vmov.f32	s2, s12
 81058bc:	eef0 1a66 	vmov.f32	s3, s13
 81058c0:	eeb0 2a47 	vmov.f32	s4, s14
 81058c4:	eef0 2a67 	vmov.f32	s5, s15
 81058c8:	f7fc f82c 	bl	8101924 <vdiff>
 81058cc:	eeb0 5a40 	vmov.f32	s10, s0
 81058d0:	eef0 5a60 	vmov.f32	s11, s1
 81058d4:	eeb0 6a41 	vmov.f32	s12, s2
 81058d8:	eef0 6a61 	vmov.f32	s13, s3
 81058dc:	eeb0 7a42 	vmov.f32	s14, s4
 81058e0:	eef0 7a62 	vmov.f32	s15, s5
 81058e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 81058e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 81058ec:	ed83 5b00 	vstr	d5, [r3]
 81058f0:	ed83 6b02 	vstr	d6, [r3, #8]
 81058f4:	ed83 7b04 	vstr	d7, [r3, #16]
            dist1 = vnorm(t3);
 81058f8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 81058fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8105900:	ed93 5b00 	vldr	d5, [r3]
 8105904:	ed93 6b02 	vldr	d6, [r3, #8]
 8105908:	ed93 7b04 	vldr	d7, [r3, #16]
 810590c:	eeb0 0a45 	vmov.f32	s0, s10
 8105910:	eef0 0a65 	vmov.f32	s1, s11
 8105914:	eeb0 1a46 	vmov.f32	s2, s12
 8105918:	eef0 1a66 	vmov.f32	s3, s13
 810591c:	eeb0 2a47 	vmov.f32	s4, s14
 8105920:	eef0 2a67 	vmov.f32	s5, s15
 8105924:	f7fc f966 	bl	8101bf4 <vnorm>
 8105928:	ed87 0b3a 	vstr	d0, [r7, #232]	@ 0xe8

            t3 = vdiff(o2, anchorArray[3]);
 810592c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8105930:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8105934:	681b      	ldr	r3, [r3, #0]
 8105936:	3348      	adds	r3, #72	@ 0x48
 8105938:	ed93 3b00 	vldr	d3, [r3]
 810593c:	ed93 4b02 	vldr	d4, [r3, #8]
 8105940:	ed93 5b04 	vldr	d5, [r3, #16]
 8105944:	ed97 2b28 	vldr	d2, [r7, #160]	@ 0xa0
 8105948:	ed97 6b2a 	vldr	d6, [r7, #168]	@ 0xa8
 810594c:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 8105950:	eeb0 0a42 	vmov.f32	s0, s4
 8105954:	eef0 0a62 	vmov.f32	s1, s5
 8105958:	eeb0 1a46 	vmov.f32	s2, s12
 810595c:	eef0 1a66 	vmov.f32	s3, s13
 8105960:	eeb0 2a47 	vmov.f32	s4, s14
 8105964:	eef0 2a67 	vmov.f32	s5, s15
 8105968:	f7fb ffdc 	bl	8101924 <vdiff>
 810596c:	eeb0 5a40 	vmov.f32	s10, s0
 8105970:	eef0 5a60 	vmov.f32	s11, s1
 8105974:	eeb0 6a41 	vmov.f32	s12, s2
 8105978:	eef0 6a61 	vmov.f32	s13, s3
 810597c:	eeb0 7a42 	vmov.f32	s14, s4
 8105980:	eef0 7a62 	vmov.f32	s15, s5
 8105984:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8105988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 810598c:	ed83 5b00 	vstr	d5, [r3]
 8105990:	ed83 6b02 	vstr	d6, [r3, #8]
 8105994:	ed83 7b04 	vstr	d7, [r3, #16]
            dist2 = vnorm(t3);
 8105998:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 810599c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 81059a0:	ed93 5b00 	vldr	d5, [r3]
 81059a4:	ed93 6b02 	vldr	d6, [r3, #8]
 81059a8:	ed93 7b04 	vldr	d7, [r3, #16]
 81059ac:	eeb0 0a45 	vmov.f32	s0, s10
 81059b0:	eef0 0a65 	vmov.f32	s1, s11
 81059b4:	eeb0 1a46 	vmov.f32	s2, s12
 81059b8:	eef0 1a66 	vmov.f32	s3, s13
 81059bc:	eeb0 2a47 	vmov.f32	s4, s14
 81059c0:	eef0 2a67 	vmov.f32	s5, s15
 81059c4:	f7fc f916 	bl	8101bf4 <vnorm>
 81059c8:	ed87 0b38 	vstr	d0, [r7, #224]	@ 0xe0

            /* find the distance closest to received range measurement from 4th anchor */
            diff1 = fabs(r4 - dist1);
 81059cc:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 81059d0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 81059d4:	f7fa fce0 	bl	8100398 <__aeabi_dsub>
 81059d8:	4602      	mov	r2, r0
 81059da:	460b      	mov	r3, r1
 81059dc:	4611      	mov	r1, r2
 81059de:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 81059e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81059e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            diff2 = fabs(r4 - dist2);
 81059ea:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 81059ee:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 81059f2:	f7fa fcd1 	bl	8100398 <__aeabi_dsub>
 81059f6:	4602      	mov	r2, r0
 81059f8:	460b      	mov	r3, r1
 81059fa:	4611      	mov	r1, r2
 81059fc:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8105a00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8105a04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

            /* pick the closest match to the 4th anchor range */
            if (diff1 < diff2) *best_solution = o1;
 8105a08:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8105a0c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8105a10:	f7fb f8ec 	bl	8100bec <__aeabi_dcmplt>
 8105a14:	4603      	mov	r3, r0
 8105a16:	2b00      	cmp	r3, #0
 8105a18:	d00e      	beq.n	8105a38 <GetLocation+0x428>
 8105a1a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8105a1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8105a22:	681b      	ldr	r3, [r3, #0]
 8105a24:	461d      	mov	r5, r3
 8105a26:	f107 04b8 	add.w	r4, r7, #184	@ 0xb8
 8105a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8105a32:	e885 0003 	stmia.w	r5, {r0, r1}
 8105a36:	e034      	b.n	8105aa2 <GetLocation+0x492>
            else *best_solution = o2;
 8105a38:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8105a3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8105a40:	681b      	ldr	r3, [r3, #0]
 8105a42:	461d      	mov	r5, r3
 8105a44:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8105a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8105a50:	e885 0003 	stmia.w	r5, {r0, r1}
 8105a54:	e025      	b.n	8105aa2 <GetLocation+0x492>
        }
        else
        {
            //assume tag is above the anchors (1, 2, and 3)
            if(o1.z >= p1.z) *best_solution = o1;
 8105a56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8105a5a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8105a5e:	f7fb f8d9 	bl	8100c14 <__aeabi_dcmpge>
 8105a62:	4603      	mov	r3, r0
 8105a64:	2b00      	cmp	r3, #0
 8105a66:	d00e      	beq.n	8105a86 <GetLocation+0x476>
 8105a68:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8105a6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8105a70:	681b      	ldr	r3, [r3, #0]
 8105a72:	461d      	mov	r5, r3
 8105a74:	f107 04b8 	add.w	r4, r7, #184	@ 0xb8
 8105a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8105a80:	e885 0003 	stmia.w	r5, {r0, r1}
 8105a84:	e00d      	b.n	8105aa2 <GetLocation+0x492>
            else *best_solution = o2;
 8105a86:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8105a8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8105a8e:	681b      	ldr	r3, [r3, #0]
 8105a90:	461d      	mov	r5, r3
 8105a92:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8105a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105a98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105a9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8105a9e:	e885 0003 	stmia.w	r5, {r0, r1}
        }
    }

    if (result >= 0)
 8105aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8105aa6:	2b00      	cmp	r3, #0
 8105aa8:	db02      	blt.n	8105ab0 <GetLocation+0x4a0>
    {
        return result;
 8105aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8105aae:	e001      	b.n	8105ab4 <GetLocation+0x4a4>
    }

    //return error
    return -1;
 8105ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8105ab4:	4618      	mov	r0, r3
 8105ab6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8105aba:	46bd      	mov	sp, r7
 8105abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8105ac0:	408f4000 	.word	0x408f4000

08105ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8105ac4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8105b00 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8105ac8:	f7fb fb4a 	bl	8101160 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8105acc:	f7fb fb30 	bl	8101130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8105ad0:	480c      	ldr	r0, [pc, #48]	@ (8105b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8105ad2:	490d      	ldr	r1, [pc, #52]	@ (8105b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8105ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8105b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8105ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8105ad8:	e002      	b.n	8105ae0 <LoopCopyDataInit>

08105ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8105ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8105adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8105ade:	3304      	adds	r3, #4

08105ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8105ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8105ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8105ae4:	d3f9      	bcc.n	8105ada <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8105ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8105b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8105ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8105b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8105aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8105aec:	e001      	b.n	8105af2 <LoopFillZerobss>

08105aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8105aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8105af0:	3204      	adds	r2, #4

08105af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8105af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8105af4:	d3fb      	bcc.n	8105aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8105af6:	f00a fcd7 	bl	81104a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8105afa:	f7fb fcb9 	bl	8101470 <main>
  bx  lr
 8105afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8105b00:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8105b04:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8105b08:	10000230 	.word	0x10000230
  ldr r2, =_sidata
 8105b0c:	08113430 	.word	0x08113430
  ldr r2, =_sbss
 8105b10:	10000230 	.word	0x10000230
  ldr r4, =_ebss
 8105b14:	100050f0 	.word	0x100050f0

08105b18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8105b18:	e7fe      	b.n	8105b18 <ADC3_IRQHandler>

08105b1a <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8105b1a:	b580      	push	{r7, lr}
 8105b1c:	b084      	sub	sp, #16
 8105b1e:	af00      	add	r7, sp, #0
 8105b20:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8105b22:	687b      	ldr	r3, [r7, #4]
 8105b24:	2b00      	cmp	r3, #0
 8105b26:	d105      	bne.n	8105b34 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8105b28:	b672      	cpsid	i
}
 8105b2a:	bf00      	nop
 8105b2c:	f7fb fd89 	bl	8101642 <Error_Handler>
 8105b30:	bf00      	nop
 8105b32:	e7fd      	b.n	8105b30 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8105b34:	2300      	movs	r3, #0
 8105b36:	60fb      	str	r3, [r7, #12]
 8105b38:	e007      	b.n	8105b4a <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 8105b3a:	687b      	ldr	r3, [r7, #4]
 8105b3c:	68fa      	ldr	r2, [r7, #12]
 8105b3e:	2100      	movs	r1, #0
 8105b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8105b44:	68fb      	ldr	r3, [r7, #12]
 8105b46:	3301      	adds	r3, #1
 8105b48:	60fb      	str	r3, [r7, #12]
 8105b4a:	68fb      	ldr	r3, [r7, #12]
 8105b4c:	2b01      	cmp	r3, #1
 8105b4e:	d9f4      	bls.n	8105b3a <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 8105b50:	687b      	ldr	r3, [r7, #4]
 8105b52:	2200      	movs	r2, #0
 8105b54:	721a      	strb	r2, [r3, #8]
}
 8105b56:	bf00      	nop
 8105b58:	3710      	adds	r7, #16
 8105b5a:	46bd      	mov	sp, r7
 8105b5c:	bd80      	pop	{r7, pc}

08105b5e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8105b5e:	b580      	push	{r7, lr}
 8105b60:	b084      	sub	sp, #16
 8105b62:	af00      	add	r7, sp, #0
 8105b64:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8105b66:	687b      	ldr	r3, [r7, #4]
 8105b68:	2b00      	cmp	r3, #0
 8105b6a:	d105      	bne.n	8105b78 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8105b6c:	b672      	cpsid	i
}
 8105b6e:	bf00      	nop
 8105b70:	f7fb fd67 	bl	8101642 <Error_Handler>
 8105b74:	bf00      	nop
 8105b76:	e7fd      	b.n	8105b74 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8105b78:	687b      	ldr	r3, [r7, #4]
 8105b7a:	7a1b      	ldrb	r3, [r3, #8]
 8105b7c:	2b01      	cmp	r3, #1
 8105b7e:	d905      	bls.n	8105b8c <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8105b80:	b672      	cpsid	i
}
 8105b82:	bf00      	nop
 8105b84:	f7fb fd5d 	bl	8101642 <Error_Handler>
 8105b88:	bf00      	nop
 8105b8a:	e7fd      	b.n	8105b88 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8105b8c:	687b      	ldr	r3, [r7, #4]
 8105b8e:	7a1b      	ldrb	r3, [r3, #8]
 8105b90:	1c5a      	adds	r2, r3, #1
 8105b92:	b2d1      	uxtb	r1, r2
 8105b94:	687a      	ldr	r2, [r7, #4]
 8105b96:	7211      	strb	r1, [r2, #8]
 8105b98:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8105b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8105b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105ba2:	f383 8811 	msr	BASEPRI, r3
 8105ba6:	f3bf 8f6f 	isb	sy
 8105baa:	f3bf 8f4f 	dsb	sy
 8105bae:	60fa      	str	r2, [r7, #12]
 8105bb0:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8105bb2:	68fa      	ldr	r2, [r7, #12]
 8105bb4:	687b      	ldr	r3, [r7, #4]
 8105bb6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8105bba:	bf00      	nop
 8105bbc:	3710      	adds	r7, #16
 8105bbe:	46bd      	mov	sp, r7
 8105bc0:	bd80      	pop	{r7, pc}

08105bc2 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8105bc2:	b580      	push	{r7, lr}
 8105bc4:	b084      	sub	sp, #16
 8105bc6:	af00      	add	r7, sp, #0
 8105bc8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8105bca:	687b      	ldr	r3, [r7, #4]
 8105bcc:	2b00      	cmp	r3, #0
 8105bce:	d105      	bne.n	8105bdc <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8105bd0:	b672      	cpsid	i
}
 8105bd2:	bf00      	nop
 8105bd4:	f7fb fd35 	bl	8101642 <Error_Handler>
 8105bd8:	bf00      	nop
 8105bda:	e7fd      	b.n	8105bd8 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8105bdc:	687b      	ldr	r3, [r7, #4]
 8105bde:	7a1b      	ldrb	r3, [r3, #8]
 8105be0:	3b01      	subs	r3, #1
 8105be2:	b2da      	uxtb	r2, r3
 8105be4:	687b      	ldr	r3, [r7, #4]
 8105be6:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8105be8:	687b      	ldr	r3, [r7, #4]
 8105bea:	7a1b      	ldrb	r3, [r3, #8]
 8105bec:	2b01      	cmp	r3, #1
 8105bee:	d905      	bls.n	8105bfc <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8105bf0:	b672      	cpsid	i
}
 8105bf2:	bf00      	nop
 8105bf4:	f7fb fd25 	bl	8101642 <Error_Handler>
 8105bf8:	bf00      	nop
 8105bfa:	e7fd      	b.n	8105bf8 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8105bfc:	687b      	ldr	r3, [r7, #4]
 8105bfe:	7a1b      	ldrb	r3, [r3, #8]
 8105c00:	461a      	mov	r2, r3
 8105c02:	687b      	ldr	r3, [r7, #4]
 8105c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105c08:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8105c0a:	68fb      	ldr	r3, [r7, #12]
 8105c0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8105c10:	bf00      	nop
}
 8105c12:	bf00      	nop
 8105c14:	3710      	adds	r7, #16
 8105c16:	46bd      	mov	sp, r7
 8105c18:	bd80      	pop	{r7, pc}

08105c1a <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8105c1a:	b580      	push	{r7, lr}
 8105c1c:	b082      	sub	sp, #8
 8105c1e:	af00      	add	r7, sp, #0
 8105c20:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8105c22:	687b      	ldr	r3, [r7, #4]
 8105c24:	2b00      	cmp	r3, #0
 8105c26:	d105      	bne.n	8105c34 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8105c28:	f00a fc38 	bl	811049c <__errno>
 8105c2c:	4603      	mov	r3, r0
 8105c2e:	2216      	movs	r2, #22
 8105c30:	601a      	str	r2, [r3, #0]
    return;
 8105c32:	e016      	b.n	8105c62 <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8105c34:	200c      	movs	r0, #12
 8105c36:	f008 fc09 	bl	810e44c <malloc>
 8105c3a:	4603      	mov	r3, r0
 8105c3c:	461a      	mov	r2, r3
 8105c3e:	687b      	ldr	r3, [r7, #4]
 8105c40:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8105c42:	687b      	ldr	r3, [r7, #4]
 8105c44:	681b      	ldr	r3, [r3, #0]
 8105c46:	2b00      	cmp	r3, #0
 8105c48:	d005      	beq.n	8105c56 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8105c4a:	687b      	ldr	r3, [r7, #4]
 8105c4c:	681b      	ldr	r3, [r3, #0]
 8105c4e:	4618      	mov	r0, r3
 8105c50:	f7ff ff63 	bl	8105b1a <stm32_lock_init>
    return;
 8105c54:	e005      	b.n	8105c62 <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8105c56:	b672      	cpsid	i
}
 8105c58:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8105c5a:	f7fb fcf2 	bl	8101642 <Error_Handler>
 8105c5e:	bf00      	nop
 8105c60:	e7fd      	b.n	8105c5e <__retarget_lock_init_recursive+0x44>
}
 8105c62:	3708      	adds	r7, #8
 8105c64:	46bd      	mov	sp, r7
 8105c66:	bd80      	pop	{r7, pc}

08105c68 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8105c68:	b580      	push	{r7, lr}
 8105c6a:	b082      	sub	sp, #8
 8105c6c:	af00      	add	r7, sp, #0
 8105c6e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8105c70:	687b      	ldr	r3, [r7, #4]
 8105c72:	2b00      	cmp	r3, #0
 8105c74:	d105      	bne.n	8105c82 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8105c76:	b672      	cpsid	i
}
 8105c78:	bf00      	nop
 8105c7a:	f7fb fce2 	bl	8101642 <Error_Handler>
 8105c7e:	bf00      	nop
 8105c80:	e7fd      	b.n	8105c7e <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8105c82:	687b      	ldr	r3, [r7, #4]
 8105c84:	4618      	mov	r0, r3
 8105c86:	f7ff ff6a 	bl	8105b5e <stm32_lock_acquire>
}
 8105c8a:	bf00      	nop
 8105c8c:	3708      	adds	r7, #8
 8105c8e:	46bd      	mov	sp, r7
 8105c90:	bd80      	pop	{r7, pc}

08105c92 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8105c92:	b580      	push	{r7, lr}
 8105c94:	b082      	sub	sp, #8
 8105c96:	af00      	add	r7, sp, #0
 8105c98:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8105c9a:	687b      	ldr	r3, [r7, #4]
 8105c9c:	2b00      	cmp	r3, #0
 8105c9e:	d105      	bne.n	8105cac <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8105ca0:	b672      	cpsid	i
}
 8105ca2:	bf00      	nop
 8105ca4:	f7fb fccd 	bl	8101642 <Error_Handler>
 8105ca8:	bf00      	nop
 8105caa:	e7fd      	b.n	8105ca8 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8105cac:	687b      	ldr	r3, [r7, #4]
 8105cae:	4618      	mov	r0, r3
 8105cb0:	f7ff ff87 	bl	8105bc2 <stm32_lock_release>
}
 8105cb4:	bf00      	nop
 8105cb6:	3708      	adds	r7, #8
 8105cb8:	46bd      	mov	sp, r7
 8105cba:	bd80      	pop	{r7, pc}

08105cbc <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8105cbc:	b580      	push	{r7, lr}
 8105cbe:	b084      	sub	sp, #16
 8105cc0:	af00      	add	r7, sp, #0
 8105cc2:	4603      	mov	r3, r0
 8105cc4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8105cc6:	2300      	movs	r3, #0
 8105cc8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8105cca:	79fb      	ldrb	r3, [r7, #7]
 8105ccc:	2b00      	cmp	r3, #0
 8105cce:	d009      	beq.n	8105ce4 <BSP_LED_Toggle+0x28>
 8105cd0:	79fb      	ldrb	r3, [r7, #7]
 8105cd2:	2b01      	cmp	r3, #1
 8105cd4:	d006      	beq.n	8105ce4 <BSP_LED_Toggle+0x28>
 8105cd6:	79fb      	ldrb	r3, [r7, #7]
 8105cd8:	2b02      	cmp	r3, #2
 8105cda:	d003      	beq.n	8105ce4 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8105cdc:	f06f 0301 	mvn.w	r3, #1
 8105ce0:	60fb      	str	r3, [r7, #12]
 8105ce2:	e00b      	b.n	8105cfc <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8105ce4:	79fb      	ldrb	r3, [r7, #7]
 8105ce6:	4a08      	ldr	r2, [pc, #32]	@ (8105d08 <BSP_LED_Toggle+0x4c>)
 8105ce8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8105cec:	79fb      	ldrb	r3, [r7, #7]
 8105cee:	4907      	ldr	r1, [pc, #28]	@ (8105d0c <BSP_LED_Toggle+0x50>)
 8105cf0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8105cf4:	4619      	mov	r1, r3
 8105cf6:	4610      	mov	r0, r2
 8105cf8:	f001 f8f4 	bl	8106ee4 <HAL_GPIO_TogglePin>
  }

  return ret;
 8105cfc:	68fb      	ldr	r3, [r7, #12]
}
 8105cfe:	4618      	mov	r0, r3
 8105d00:	3710      	adds	r7, #16
 8105d02:	46bd      	mov	sp, r7
 8105d04:	bd80      	pop	{r7, pc}
 8105d06:	bf00      	nop
 8105d08:	10000050 	.word	0x10000050
 8105d0c:	08112fac 	.word	0x08112fac

08105d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8105d10:	b580      	push	{r7, lr}
 8105d12:	b082      	sub	sp, #8
 8105d14:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8105d16:	4b28      	ldr	r3, [pc, #160]	@ (8105db8 <HAL_Init+0xa8>)
 8105d18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8105d1c:	4a26      	ldr	r2, [pc, #152]	@ (8105db8 <HAL_Init+0xa8>)
 8105d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8105d22:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8105d26:	4b24      	ldr	r3, [pc, #144]	@ (8105db8 <HAL_Init+0xa8>)
 8105d28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8105d2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8105d30:	603b      	str	r3, [r7, #0]
 8105d32:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8105d34:	4b21      	ldr	r3, [pc, #132]	@ (8105dbc <HAL_Init+0xac>)
 8105d36:	681b      	ldr	r3, [r3, #0]
 8105d38:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8105d3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8105d40:	4a1e      	ldr	r2, [pc, #120]	@ (8105dbc <HAL_Init+0xac>)
 8105d42:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8105d46:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8105d48:	4b1c      	ldr	r3, [pc, #112]	@ (8105dbc <HAL_Init+0xac>)
 8105d4a:	681b      	ldr	r3, [r3, #0]
 8105d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8105dbc <HAL_Init+0xac>)
 8105d4e:	f043 0301 	orr.w	r3, r3, #1
 8105d52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8105d54:	2003      	movs	r0, #3
 8105d56:	f000 f95f 	bl	8106018 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8105d5a:	f001 f977 	bl	810704c <HAL_RCC_GetSysClockFreq>
 8105d5e:	4602      	mov	r2, r0
 8105d60:	4b15      	ldr	r3, [pc, #84]	@ (8105db8 <HAL_Init+0xa8>)
 8105d62:	699b      	ldr	r3, [r3, #24]
 8105d64:	0a1b      	lsrs	r3, r3, #8
 8105d66:	f003 030f 	and.w	r3, r3, #15
 8105d6a:	4915      	ldr	r1, [pc, #84]	@ (8105dc0 <HAL_Init+0xb0>)
 8105d6c:	5ccb      	ldrb	r3, [r1, r3]
 8105d6e:	f003 031f 	and.w	r3, r3, #31
 8105d72:	fa22 f303 	lsr.w	r3, r2, r3
 8105d76:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105d78:	4b0f      	ldr	r3, [pc, #60]	@ (8105db8 <HAL_Init+0xa8>)
 8105d7a:	699b      	ldr	r3, [r3, #24]
 8105d7c:	f003 030f 	and.w	r3, r3, #15
 8105d80:	4a0f      	ldr	r2, [pc, #60]	@ (8105dc0 <HAL_Init+0xb0>)
 8105d82:	5cd3      	ldrb	r3, [r2, r3]
 8105d84:	f003 031f 	and.w	r3, r3, #31
 8105d88:	687a      	ldr	r2, [r7, #4]
 8105d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8105d8e:	4a0d      	ldr	r2, [pc, #52]	@ (8105dc4 <HAL_Init+0xb4>)
 8105d90:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8105d92:	4b0c      	ldr	r3, [pc, #48]	@ (8105dc4 <HAL_Init+0xb4>)
 8105d94:	681b      	ldr	r3, [r3, #0]
 8105d96:	4a0c      	ldr	r2, [pc, #48]	@ (8105dc8 <HAL_Init+0xb8>)
 8105d98:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8105d9a:	200f      	movs	r0, #15
 8105d9c:	f000 f816 	bl	8105dcc <HAL_InitTick>
 8105da0:	4603      	mov	r3, r0
 8105da2:	2b00      	cmp	r3, #0
 8105da4:	d001      	beq.n	8105daa <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8105da6:	2301      	movs	r3, #1
 8105da8:	e002      	b.n	8105db0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8105daa:	f7fb fc51 	bl	8101650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8105dae:	2300      	movs	r3, #0
}
 8105db0:	4618      	mov	r0, r3
 8105db2:	3708      	adds	r7, #8
 8105db4:	46bd      	mov	sp, r7
 8105db6:	bd80      	pop	{r7, pc}
 8105db8:	58024400 	.word	0x58024400
 8105dbc:	40024400 	.word	0x40024400
 8105dc0:	08112f54 	.word	0x08112f54
 8105dc4:	10000004 	.word	0x10000004
 8105dc8:	10000000 	.word	0x10000000

08105dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8105dcc:	b580      	push	{r7, lr}
 8105dce:	b082      	sub	sp, #8
 8105dd0:	af00      	add	r7, sp, #0
 8105dd2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8105dd4:	4b15      	ldr	r3, [pc, #84]	@ (8105e2c <HAL_InitTick+0x60>)
 8105dd6:	781b      	ldrb	r3, [r3, #0]
 8105dd8:	2b00      	cmp	r3, #0
 8105dda:	d101      	bne.n	8105de0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8105ddc:	2301      	movs	r3, #1
 8105dde:	e021      	b.n	8105e24 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8105de0:	4b13      	ldr	r3, [pc, #76]	@ (8105e30 <HAL_InitTick+0x64>)
 8105de2:	681a      	ldr	r2, [r3, #0]
 8105de4:	4b11      	ldr	r3, [pc, #68]	@ (8105e2c <HAL_InitTick+0x60>)
 8105de6:	781b      	ldrb	r3, [r3, #0]
 8105de8:	4619      	mov	r1, r3
 8105dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8105dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8105df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8105df6:	4618      	mov	r0, r3
 8105df8:	f000 f941 	bl	810607e <HAL_SYSTICK_Config>
 8105dfc:	4603      	mov	r3, r0
 8105dfe:	2b00      	cmp	r3, #0
 8105e00:	d001      	beq.n	8105e06 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8105e02:	2301      	movs	r3, #1
 8105e04:	e00e      	b.n	8105e24 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8105e06:	687b      	ldr	r3, [r7, #4]
 8105e08:	2b0f      	cmp	r3, #15
 8105e0a:	d80a      	bhi.n	8105e22 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8105e0c:	2200      	movs	r2, #0
 8105e0e:	6879      	ldr	r1, [r7, #4]
 8105e10:	f04f 30ff 	mov.w	r0, #4294967295
 8105e14:	f000 f90b 	bl	810602e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8105e18:	4a06      	ldr	r2, [pc, #24]	@ (8105e34 <HAL_InitTick+0x68>)
 8105e1a:	687b      	ldr	r3, [r7, #4]
 8105e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8105e1e:	2300      	movs	r3, #0
 8105e20:	e000      	b.n	8105e24 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8105e22:	2301      	movs	r3, #1
}
 8105e24:	4618      	mov	r0, r3
 8105e26:	3708      	adds	r7, #8
 8105e28:	46bd      	mov	sp, r7
 8105e2a:	bd80      	pop	{r7, pc}
 8105e2c:	10000060 	.word	0x10000060
 8105e30:	10000000 	.word	0x10000000
 8105e34:	1000005c 	.word	0x1000005c

08105e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8105e38:	b480      	push	{r7}
 8105e3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8105e3c:	4b06      	ldr	r3, [pc, #24]	@ (8105e58 <HAL_IncTick+0x20>)
 8105e3e:	781b      	ldrb	r3, [r3, #0]
 8105e40:	461a      	mov	r2, r3
 8105e42:	4b06      	ldr	r3, [pc, #24]	@ (8105e5c <HAL_IncTick+0x24>)
 8105e44:	681b      	ldr	r3, [r3, #0]
 8105e46:	4413      	add	r3, r2
 8105e48:	4a04      	ldr	r2, [pc, #16]	@ (8105e5c <HAL_IncTick+0x24>)
 8105e4a:	6013      	str	r3, [r2, #0]
}
 8105e4c:	bf00      	nop
 8105e4e:	46bd      	mov	sp, r7
 8105e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e54:	4770      	bx	lr
 8105e56:	bf00      	nop
 8105e58:	10000060 	.word	0x10000060
 8105e5c:	10000654 	.word	0x10000654

08105e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8105e60:	b480      	push	{r7}
 8105e62:	af00      	add	r7, sp, #0
  return uwTick;
 8105e64:	4b03      	ldr	r3, [pc, #12]	@ (8105e74 <HAL_GetTick+0x14>)
 8105e66:	681b      	ldr	r3, [r3, #0]
}
 8105e68:	4618      	mov	r0, r3
 8105e6a:	46bd      	mov	sp, r7
 8105e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e70:	4770      	bx	lr
 8105e72:	bf00      	nop
 8105e74:	10000654 	.word	0x10000654

08105e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8105e78:	b480      	push	{r7}
 8105e7a:	b085      	sub	sp, #20
 8105e7c:	af00      	add	r7, sp, #0
 8105e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8105e80:	687b      	ldr	r3, [r7, #4]
 8105e82:	f003 0307 	and.w	r3, r3, #7
 8105e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8105e88:	4b0c      	ldr	r3, [pc, #48]	@ (8105ebc <__NVIC_SetPriorityGrouping+0x44>)
 8105e8a:	68db      	ldr	r3, [r3, #12]
 8105e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8105e8e:	68ba      	ldr	r2, [r7, #8]
 8105e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8105e94:	4013      	ands	r3, r2
 8105e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8105e98:	68fb      	ldr	r3, [r7, #12]
 8105e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8105e9c:	68bb      	ldr	r3, [r7, #8]
 8105e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8105ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8105ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8105eaa:	4a04      	ldr	r2, [pc, #16]	@ (8105ebc <__NVIC_SetPriorityGrouping+0x44>)
 8105eac:	68bb      	ldr	r3, [r7, #8]
 8105eae:	60d3      	str	r3, [r2, #12]
}
 8105eb0:	bf00      	nop
 8105eb2:	3714      	adds	r7, #20
 8105eb4:	46bd      	mov	sp, r7
 8105eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105eba:	4770      	bx	lr
 8105ebc:	e000ed00 	.word	0xe000ed00

08105ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8105ec0:	b480      	push	{r7}
 8105ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8105ec4:	4b04      	ldr	r3, [pc, #16]	@ (8105ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8105ec6:	68db      	ldr	r3, [r3, #12]
 8105ec8:	0a1b      	lsrs	r3, r3, #8
 8105eca:	f003 0307 	and.w	r3, r3, #7
}
 8105ece:	4618      	mov	r0, r3
 8105ed0:	46bd      	mov	sp, r7
 8105ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ed6:	4770      	bx	lr
 8105ed8:	e000ed00 	.word	0xe000ed00

08105edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8105edc:	b480      	push	{r7}
 8105ede:	b083      	sub	sp, #12
 8105ee0:	af00      	add	r7, sp, #0
 8105ee2:	4603      	mov	r3, r0
 8105ee4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105eea:	2b00      	cmp	r3, #0
 8105eec:	db0b      	blt.n	8105f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8105eee:	88fb      	ldrh	r3, [r7, #6]
 8105ef0:	f003 021f 	and.w	r2, r3, #31
 8105ef4:	4907      	ldr	r1, [pc, #28]	@ (8105f14 <__NVIC_EnableIRQ+0x38>)
 8105ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105efa:	095b      	lsrs	r3, r3, #5
 8105efc:	2001      	movs	r0, #1
 8105efe:	fa00 f202 	lsl.w	r2, r0, r2
 8105f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8105f06:	bf00      	nop
 8105f08:	370c      	adds	r7, #12
 8105f0a:	46bd      	mov	sp, r7
 8105f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f10:	4770      	bx	lr
 8105f12:	bf00      	nop
 8105f14:	e000e100 	.word	0xe000e100

08105f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8105f18:	b480      	push	{r7}
 8105f1a:	b083      	sub	sp, #12
 8105f1c:	af00      	add	r7, sp, #0
 8105f1e:	4603      	mov	r3, r0
 8105f20:	6039      	str	r1, [r7, #0]
 8105f22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105f28:	2b00      	cmp	r3, #0
 8105f2a:	db0a      	blt.n	8105f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105f2c:	683b      	ldr	r3, [r7, #0]
 8105f2e:	b2da      	uxtb	r2, r3
 8105f30:	490c      	ldr	r1, [pc, #48]	@ (8105f64 <__NVIC_SetPriority+0x4c>)
 8105f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105f36:	0112      	lsls	r2, r2, #4
 8105f38:	b2d2      	uxtb	r2, r2
 8105f3a:	440b      	add	r3, r1
 8105f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8105f40:	e00a      	b.n	8105f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105f42:	683b      	ldr	r3, [r7, #0]
 8105f44:	b2da      	uxtb	r2, r3
 8105f46:	4908      	ldr	r1, [pc, #32]	@ (8105f68 <__NVIC_SetPriority+0x50>)
 8105f48:	88fb      	ldrh	r3, [r7, #6]
 8105f4a:	f003 030f 	and.w	r3, r3, #15
 8105f4e:	3b04      	subs	r3, #4
 8105f50:	0112      	lsls	r2, r2, #4
 8105f52:	b2d2      	uxtb	r2, r2
 8105f54:	440b      	add	r3, r1
 8105f56:	761a      	strb	r2, [r3, #24]
}
 8105f58:	bf00      	nop
 8105f5a:	370c      	adds	r7, #12
 8105f5c:	46bd      	mov	sp, r7
 8105f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f62:	4770      	bx	lr
 8105f64:	e000e100 	.word	0xe000e100
 8105f68:	e000ed00 	.word	0xe000ed00

08105f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8105f6c:	b480      	push	{r7}
 8105f6e:	b089      	sub	sp, #36	@ 0x24
 8105f70:	af00      	add	r7, sp, #0
 8105f72:	60f8      	str	r0, [r7, #12]
 8105f74:	60b9      	str	r1, [r7, #8]
 8105f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8105f78:	68fb      	ldr	r3, [r7, #12]
 8105f7a:	f003 0307 	and.w	r3, r3, #7
 8105f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8105f80:	69fb      	ldr	r3, [r7, #28]
 8105f82:	f1c3 0307 	rsb	r3, r3, #7
 8105f86:	2b04      	cmp	r3, #4
 8105f88:	bf28      	it	cs
 8105f8a:	2304      	movcs	r3, #4
 8105f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8105f8e:	69fb      	ldr	r3, [r7, #28]
 8105f90:	3304      	adds	r3, #4
 8105f92:	2b06      	cmp	r3, #6
 8105f94:	d902      	bls.n	8105f9c <NVIC_EncodePriority+0x30>
 8105f96:	69fb      	ldr	r3, [r7, #28]
 8105f98:	3b03      	subs	r3, #3
 8105f9a:	e000      	b.n	8105f9e <NVIC_EncodePriority+0x32>
 8105f9c:	2300      	movs	r3, #0
 8105f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8105fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8105fa4:	69bb      	ldr	r3, [r7, #24]
 8105fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8105faa:	43da      	mvns	r2, r3
 8105fac:	68bb      	ldr	r3, [r7, #8]
 8105fae:	401a      	ands	r2, r3
 8105fb0:	697b      	ldr	r3, [r7, #20]
 8105fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8105fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8105fb8:	697b      	ldr	r3, [r7, #20]
 8105fba:	fa01 f303 	lsl.w	r3, r1, r3
 8105fbe:	43d9      	mvns	r1, r3
 8105fc0:	687b      	ldr	r3, [r7, #4]
 8105fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8105fc4:	4313      	orrs	r3, r2
         );
}
 8105fc6:	4618      	mov	r0, r3
 8105fc8:	3724      	adds	r7, #36	@ 0x24
 8105fca:	46bd      	mov	sp, r7
 8105fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fd0:	4770      	bx	lr
	...

08105fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8105fd4:	b580      	push	{r7, lr}
 8105fd6:	b082      	sub	sp, #8
 8105fd8:	af00      	add	r7, sp, #0
 8105fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8105fdc:	687b      	ldr	r3, [r7, #4]
 8105fde:	3b01      	subs	r3, #1
 8105fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8105fe4:	d301      	bcc.n	8105fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8105fe6:	2301      	movs	r3, #1
 8105fe8:	e00f      	b.n	810600a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8105fea:	4a0a      	ldr	r2, [pc, #40]	@ (8106014 <SysTick_Config+0x40>)
 8105fec:	687b      	ldr	r3, [r7, #4]
 8105fee:	3b01      	subs	r3, #1
 8105ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8105ff2:	210f      	movs	r1, #15
 8105ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8105ff8:	f7ff ff8e 	bl	8105f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8105ffc:	4b05      	ldr	r3, [pc, #20]	@ (8106014 <SysTick_Config+0x40>)
 8105ffe:	2200      	movs	r2, #0
 8106000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8106002:	4b04      	ldr	r3, [pc, #16]	@ (8106014 <SysTick_Config+0x40>)
 8106004:	2207      	movs	r2, #7
 8106006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8106008:	2300      	movs	r3, #0
}
 810600a:	4618      	mov	r0, r3
 810600c:	3708      	adds	r7, #8
 810600e:	46bd      	mov	sp, r7
 8106010:	bd80      	pop	{r7, pc}
 8106012:	bf00      	nop
 8106014:	e000e010 	.word	0xe000e010

08106018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8106018:	b580      	push	{r7, lr}
 810601a:	b082      	sub	sp, #8
 810601c:	af00      	add	r7, sp, #0
 810601e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8106020:	6878      	ldr	r0, [r7, #4]
 8106022:	f7ff ff29 	bl	8105e78 <__NVIC_SetPriorityGrouping>
}
 8106026:	bf00      	nop
 8106028:	3708      	adds	r7, #8
 810602a:	46bd      	mov	sp, r7
 810602c:	bd80      	pop	{r7, pc}

0810602e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810602e:	b580      	push	{r7, lr}
 8106030:	b086      	sub	sp, #24
 8106032:	af00      	add	r7, sp, #0
 8106034:	4603      	mov	r3, r0
 8106036:	60b9      	str	r1, [r7, #8]
 8106038:	607a      	str	r2, [r7, #4]
 810603a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810603c:	f7ff ff40 	bl	8105ec0 <__NVIC_GetPriorityGrouping>
 8106040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8106042:	687a      	ldr	r2, [r7, #4]
 8106044:	68b9      	ldr	r1, [r7, #8]
 8106046:	6978      	ldr	r0, [r7, #20]
 8106048:	f7ff ff90 	bl	8105f6c <NVIC_EncodePriority>
 810604c:	4602      	mov	r2, r0
 810604e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8106052:	4611      	mov	r1, r2
 8106054:	4618      	mov	r0, r3
 8106056:	f7ff ff5f 	bl	8105f18 <__NVIC_SetPriority>
}
 810605a:	bf00      	nop
 810605c:	3718      	adds	r7, #24
 810605e:	46bd      	mov	sp, r7
 8106060:	bd80      	pop	{r7, pc}

08106062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8106062:	b580      	push	{r7, lr}
 8106064:	b082      	sub	sp, #8
 8106066:	af00      	add	r7, sp, #0
 8106068:	4603      	mov	r3, r0
 810606a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810606c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8106070:	4618      	mov	r0, r3
 8106072:	f7ff ff33 	bl	8105edc <__NVIC_EnableIRQ>
}
 8106076:	bf00      	nop
 8106078:	3708      	adds	r7, #8
 810607a:	46bd      	mov	sp, r7
 810607c:	bd80      	pop	{r7, pc}

0810607e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810607e:	b580      	push	{r7, lr}
 8106080:	b082      	sub	sp, #8
 8106082:	af00      	add	r7, sp, #0
 8106084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8106086:	6878      	ldr	r0, [r7, #4]
 8106088:	f7ff ffa4 	bl	8105fd4 <SysTick_Config>
 810608c:	4603      	mov	r3, r0
}
 810608e:	4618      	mov	r0, r3
 8106090:	3708      	adds	r7, #8
 8106092:	46bd      	mov	sp, r7
 8106094:	bd80      	pop	{r7, pc}
	...

08106098 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8106098:	b480      	push	{r7}
 810609a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810609c:	4b06      	ldr	r3, [pc, #24]	@ (81060b8 <HAL_GetCurrentCPUID+0x20>)
 810609e:	681b      	ldr	r3, [r3, #0]
 81060a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81060a4:	2b70      	cmp	r3, #112	@ 0x70
 81060a6:	d101      	bne.n	81060ac <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 81060a8:	2303      	movs	r3, #3
 81060aa:	e000      	b.n	81060ae <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 81060ac:	2301      	movs	r3, #1
  }
}
 81060ae:	4618      	mov	r0, r3
 81060b0:	46bd      	mov	sp, r7
 81060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060b6:	4770      	bx	lr
 81060b8:	e000ed00 	.word	0xe000ed00

081060bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 81060bc:	b580      	push	{r7, lr}
 81060be:	b086      	sub	sp, #24
 81060c0:	af00      	add	r7, sp, #0
 81060c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 81060c4:	f7ff fecc 	bl	8105e60 <HAL_GetTick>
 81060c8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81060ca:	687b      	ldr	r3, [r7, #4]
 81060cc:	2b00      	cmp	r3, #0
 81060ce:	d101      	bne.n	81060d4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 81060d0:	2301      	movs	r3, #1
 81060d2:	e2dc      	b.n	810668e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 81060d4:	687b      	ldr	r3, [r7, #4]
 81060d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 81060da:	b2db      	uxtb	r3, r3
 81060dc:	2b02      	cmp	r3, #2
 81060de:	d008      	beq.n	81060f2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81060e0:	687b      	ldr	r3, [r7, #4]
 81060e2:	2280      	movs	r2, #128	@ 0x80
 81060e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81060e6:	687b      	ldr	r3, [r7, #4]
 81060e8:	2200      	movs	r2, #0
 81060ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 81060ee:	2301      	movs	r3, #1
 81060f0:	e2cd      	b.n	810668e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81060f2:	687b      	ldr	r3, [r7, #4]
 81060f4:	681b      	ldr	r3, [r3, #0]
 81060f6:	4a76      	ldr	r2, [pc, #472]	@ (81062d0 <HAL_DMA_Abort+0x214>)
 81060f8:	4293      	cmp	r3, r2
 81060fa:	d04a      	beq.n	8106192 <HAL_DMA_Abort+0xd6>
 81060fc:	687b      	ldr	r3, [r7, #4]
 81060fe:	681b      	ldr	r3, [r3, #0]
 8106100:	4a74      	ldr	r2, [pc, #464]	@ (81062d4 <HAL_DMA_Abort+0x218>)
 8106102:	4293      	cmp	r3, r2
 8106104:	d045      	beq.n	8106192 <HAL_DMA_Abort+0xd6>
 8106106:	687b      	ldr	r3, [r7, #4]
 8106108:	681b      	ldr	r3, [r3, #0]
 810610a:	4a73      	ldr	r2, [pc, #460]	@ (81062d8 <HAL_DMA_Abort+0x21c>)
 810610c:	4293      	cmp	r3, r2
 810610e:	d040      	beq.n	8106192 <HAL_DMA_Abort+0xd6>
 8106110:	687b      	ldr	r3, [r7, #4]
 8106112:	681b      	ldr	r3, [r3, #0]
 8106114:	4a71      	ldr	r2, [pc, #452]	@ (81062dc <HAL_DMA_Abort+0x220>)
 8106116:	4293      	cmp	r3, r2
 8106118:	d03b      	beq.n	8106192 <HAL_DMA_Abort+0xd6>
 810611a:	687b      	ldr	r3, [r7, #4]
 810611c:	681b      	ldr	r3, [r3, #0]
 810611e:	4a70      	ldr	r2, [pc, #448]	@ (81062e0 <HAL_DMA_Abort+0x224>)
 8106120:	4293      	cmp	r3, r2
 8106122:	d036      	beq.n	8106192 <HAL_DMA_Abort+0xd6>
 8106124:	687b      	ldr	r3, [r7, #4]
 8106126:	681b      	ldr	r3, [r3, #0]
 8106128:	4a6e      	ldr	r2, [pc, #440]	@ (81062e4 <HAL_DMA_Abort+0x228>)
 810612a:	4293      	cmp	r3, r2
 810612c:	d031      	beq.n	8106192 <HAL_DMA_Abort+0xd6>
 810612e:	687b      	ldr	r3, [r7, #4]
 8106130:	681b      	ldr	r3, [r3, #0]
 8106132:	4a6d      	ldr	r2, [pc, #436]	@ (81062e8 <HAL_DMA_Abort+0x22c>)
 8106134:	4293      	cmp	r3, r2
 8106136:	d02c      	beq.n	8106192 <HAL_DMA_Abort+0xd6>
 8106138:	687b      	ldr	r3, [r7, #4]
 810613a:	681b      	ldr	r3, [r3, #0]
 810613c:	4a6b      	ldr	r2, [pc, #428]	@ (81062ec <HAL_DMA_Abort+0x230>)
 810613e:	4293      	cmp	r3, r2
 8106140:	d027      	beq.n	8106192 <HAL_DMA_Abort+0xd6>
 8106142:	687b      	ldr	r3, [r7, #4]
 8106144:	681b      	ldr	r3, [r3, #0]
 8106146:	4a6a      	ldr	r2, [pc, #424]	@ (81062f0 <HAL_DMA_Abort+0x234>)
 8106148:	4293      	cmp	r3, r2
 810614a:	d022      	beq.n	8106192 <HAL_DMA_Abort+0xd6>
 810614c:	687b      	ldr	r3, [r7, #4]
 810614e:	681b      	ldr	r3, [r3, #0]
 8106150:	4a68      	ldr	r2, [pc, #416]	@ (81062f4 <HAL_DMA_Abort+0x238>)
 8106152:	4293      	cmp	r3, r2
 8106154:	d01d      	beq.n	8106192 <HAL_DMA_Abort+0xd6>
 8106156:	687b      	ldr	r3, [r7, #4]
 8106158:	681b      	ldr	r3, [r3, #0]
 810615a:	4a67      	ldr	r2, [pc, #412]	@ (81062f8 <HAL_DMA_Abort+0x23c>)
 810615c:	4293      	cmp	r3, r2
 810615e:	d018      	beq.n	8106192 <HAL_DMA_Abort+0xd6>
 8106160:	687b      	ldr	r3, [r7, #4]
 8106162:	681b      	ldr	r3, [r3, #0]
 8106164:	4a65      	ldr	r2, [pc, #404]	@ (81062fc <HAL_DMA_Abort+0x240>)
 8106166:	4293      	cmp	r3, r2
 8106168:	d013      	beq.n	8106192 <HAL_DMA_Abort+0xd6>
 810616a:	687b      	ldr	r3, [r7, #4]
 810616c:	681b      	ldr	r3, [r3, #0]
 810616e:	4a64      	ldr	r2, [pc, #400]	@ (8106300 <HAL_DMA_Abort+0x244>)
 8106170:	4293      	cmp	r3, r2
 8106172:	d00e      	beq.n	8106192 <HAL_DMA_Abort+0xd6>
 8106174:	687b      	ldr	r3, [r7, #4]
 8106176:	681b      	ldr	r3, [r3, #0]
 8106178:	4a62      	ldr	r2, [pc, #392]	@ (8106304 <HAL_DMA_Abort+0x248>)
 810617a:	4293      	cmp	r3, r2
 810617c:	d009      	beq.n	8106192 <HAL_DMA_Abort+0xd6>
 810617e:	687b      	ldr	r3, [r7, #4]
 8106180:	681b      	ldr	r3, [r3, #0]
 8106182:	4a61      	ldr	r2, [pc, #388]	@ (8106308 <HAL_DMA_Abort+0x24c>)
 8106184:	4293      	cmp	r3, r2
 8106186:	d004      	beq.n	8106192 <HAL_DMA_Abort+0xd6>
 8106188:	687b      	ldr	r3, [r7, #4]
 810618a:	681b      	ldr	r3, [r3, #0]
 810618c:	4a5f      	ldr	r2, [pc, #380]	@ (810630c <HAL_DMA_Abort+0x250>)
 810618e:	4293      	cmp	r3, r2
 8106190:	d101      	bne.n	8106196 <HAL_DMA_Abort+0xda>
 8106192:	2301      	movs	r3, #1
 8106194:	e000      	b.n	8106198 <HAL_DMA_Abort+0xdc>
 8106196:	2300      	movs	r3, #0
 8106198:	2b00      	cmp	r3, #0
 810619a:	d013      	beq.n	81061c4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 810619c:	687b      	ldr	r3, [r7, #4]
 810619e:	681b      	ldr	r3, [r3, #0]
 81061a0:	681a      	ldr	r2, [r3, #0]
 81061a2:	687b      	ldr	r3, [r7, #4]
 81061a4:	681b      	ldr	r3, [r3, #0]
 81061a6:	f022 021e 	bic.w	r2, r2, #30
 81061aa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81061ac:	687b      	ldr	r3, [r7, #4]
 81061ae:	681b      	ldr	r3, [r3, #0]
 81061b0:	695a      	ldr	r2, [r3, #20]
 81061b2:	687b      	ldr	r3, [r7, #4]
 81061b4:	681b      	ldr	r3, [r3, #0]
 81061b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 81061ba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 81061bc:	687b      	ldr	r3, [r7, #4]
 81061be:	681b      	ldr	r3, [r3, #0]
 81061c0:	617b      	str	r3, [r7, #20]
 81061c2:	e00a      	b.n	81061da <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81061c4:	687b      	ldr	r3, [r7, #4]
 81061c6:	681b      	ldr	r3, [r3, #0]
 81061c8:	681a      	ldr	r2, [r3, #0]
 81061ca:	687b      	ldr	r3, [r7, #4]
 81061cc:	681b      	ldr	r3, [r3, #0]
 81061ce:	f022 020e 	bic.w	r2, r2, #14
 81061d2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 81061d4:	687b      	ldr	r3, [r7, #4]
 81061d6:	681b      	ldr	r3, [r3, #0]
 81061d8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81061da:	687b      	ldr	r3, [r7, #4]
 81061dc:	681b      	ldr	r3, [r3, #0]
 81061de:	4a3c      	ldr	r2, [pc, #240]	@ (81062d0 <HAL_DMA_Abort+0x214>)
 81061e0:	4293      	cmp	r3, r2
 81061e2:	d072      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 81061e4:	687b      	ldr	r3, [r7, #4]
 81061e6:	681b      	ldr	r3, [r3, #0]
 81061e8:	4a3a      	ldr	r2, [pc, #232]	@ (81062d4 <HAL_DMA_Abort+0x218>)
 81061ea:	4293      	cmp	r3, r2
 81061ec:	d06d      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 81061ee:	687b      	ldr	r3, [r7, #4]
 81061f0:	681b      	ldr	r3, [r3, #0]
 81061f2:	4a39      	ldr	r2, [pc, #228]	@ (81062d8 <HAL_DMA_Abort+0x21c>)
 81061f4:	4293      	cmp	r3, r2
 81061f6:	d068      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 81061f8:	687b      	ldr	r3, [r7, #4]
 81061fa:	681b      	ldr	r3, [r3, #0]
 81061fc:	4a37      	ldr	r2, [pc, #220]	@ (81062dc <HAL_DMA_Abort+0x220>)
 81061fe:	4293      	cmp	r3, r2
 8106200:	d063      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 8106202:	687b      	ldr	r3, [r7, #4]
 8106204:	681b      	ldr	r3, [r3, #0]
 8106206:	4a36      	ldr	r2, [pc, #216]	@ (81062e0 <HAL_DMA_Abort+0x224>)
 8106208:	4293      	cmp	r3, r2
 810620a:	d05e      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 810620c:	687b      	ldr	r3, [r7, #4]
 810620e:	681b      	ldr	r3, [r3, #0]
 8106210:	4a34      	ldr	r2, [pc, #208]	@ (81062e4 <HAL_DMA_Abort+0x228>)
 8106212:	4293      	cmp	r3, r2
 8106214:	d059      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 8106216:	687b      	ldr	r3, [r7, #4]
 8106218:	681b      	ldr	r3, [r3, #0]
 810621a:	4a33      	ldr	r2, [pc, #204]	@ (81062e8 <HAL_DMA_Abort+0x22c>)
 810621c:	4293      	cmp	r3, r2
 810621e:	d054      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 8106220:	687b      	ldr	r3, [r7, #4]
 8106222:	681b      	ldr	r3, [r3, #0]
 8106224:	4a31      	ldr	r2, [pc, #196]	@ (81062ec <HAL_DMA_Abort+0x230>)
 8106226:	4293      	cmp	r3, r2
 8106228:	d04f      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 810622a:	687b      	ldr	r3, [r7, #4]
 810622c:	681b      	ldr	r3, [r3, #0]
 810622e:	4a30      	ldr	r2, [pc, #192]	@ (81062f0 <HAL_DMA_Abort+0x234>)
 8106230:	4293      	cmp	r3, r2
 8106232:	d04a      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 8106234:	687b      	ldr	r3, [r7, #4]
 8106236:	681b      	ldr	r3, [r3, #0]
 8106238:	4a2e      	ldr	r2, [pc, #184]	@ (81062f4 <HAL_DMA_Abort+0x238>)
 810623a:	4293      	cmp	r3, r2
 810623c:	d045      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 810623e:	687b      	ldr	r3, [r7, #4]
 8106240:	681b      	ldr	r3, [r3, #0]
 8106242:	4a2d      	ldr	r2, [pc, #180]	@ (81062f8 <HAL_DMA_Abort+0x23c>)
 8106244:	4293      	cmp	r3, r2
 8106246:	d040      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 8106248:	687b      	ldr	r3, [r7, #4]
 810624a:	681b      	ldr	r3, [r3, #0]
 810624c:	4a2b      	ldr	r2, [pc, #172]	@ (81062fc <HAL_DMA_Abort+0x240>)
 810624e:	4293      	cmp	r3, r2
 8106250:	d03b      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 8106252:	687b      	ldr	r3, [r7, #4]
 8106254:	681b      	ldr	r3, [r3, #0]
 8106256:	4a2a      	ldr	r2, [pc, #168]	@ (8106300 <HAL_DMA_Abort+0x244>)
 8106258:	4293      	cmp	r3, r2
 810625a:	d036      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 810625c:	687b      	ldr	r3, [r7, #4]
 810625e:	681b      	ldr	r3, [r3, #0]
 8106260:	4a28      	ldr	r2, [pc, #160]	@ (8106304 <HAL_DMA_Abort+0x248>)
 8106262:	4293      	cmp	r3, r2
 8106264:	d031      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 8106266:	687b      	ldr	r3, [r7, #4]
 8106268:	681b      	ldr	r3, [r3, #0]
 810626a:	4a27      	ldr	r2, [pc, #156]	@ (8106308 <HAL_DMA_Abort+0x24c>)
 810626c:	4293      	cmp	r3, r2
 810626e:	d02c      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 8106270:	687b      	ldr	r3, [r7, #4]
 8106272:	681b      	ldr	r3, [r3, #0]
 8106274:	4a25      	ldr	r2, [pc, #148]	@ (810630c <HAL_DMA_Abort+0x250>)
 8106276:	4293      	cmp	r3, r2
 8106278:	d027      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 810627a:	687b      	ldr	r3, [r7, #4]
 810627c:	681b      	ldr	r3, [r3, #0]
 810627e:	4a24      	ldr	r2, [pc, #144]	@ (8106310 <HAL_DMA_Abort+0x254>)
 8106280:	4293      	cmp	r3, r2
 8106282:	d022      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	681b      	ldr	r3, [r3, #0]
 8106288:	4a22      	ldr	r2, [pc, #136]	@ (8106314 <HAL_DMA_Abort+0x258>)
 810628a:	4293      	cmp	r3, r2
 810628c:	d01d      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 810628e:	687b      	ldr	r3, [r7, #4]
 8106290:	681b      	ldr	r3, [r3, #0]
 8106292:	4a21      	ldr	r2, [pc, #132]	@ (8106318 <HAL_DMA_Abort+0x25c>)
 8106294:	4293      	cmp	r3, r2
 8106296:	d018      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 8106298:	687b      	ldr	r3, [r7, #4]
 810629a:	681b      	ldr	r3, [r3, #0]
 810629c:	4a1f      	ldr	r2, [pc, #124]	@ (810631c <HAL_DMA_Abort+0x260>)
 810629e:	4293      	cmp	r3, r2
 81062a0:	d013      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 81062a2:	687b      	ldr	r3, [r7, #4]
 81062a4:	681b      	ldr	r3, [r3, #0]
 81062a6:	4a1e      	ldr	r2, [pc, #120]	@ (8106320 <HAL_DMA_Abort+0x264>)
 81062a8:	4293      	cmp	r3, r2
 81062aa:	d00e      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 81062ac:	687b      	ldr	r3, [r7, #4]
 81062ae:	681b      	ldr	r3, [r3, #0]
 81062b0:	4a1c      	ldr	r2, [pc, #112]	@ (8106324 <HAL_DMA_Abort+0x268>)
 81062b2:	4293      	cmp	r3, r2
 81062b4:	d009      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 81062b6:	687b      	ldr	r3, [r7, #4]
 81062b8:	681b      	ldr	r3, [r3, #0]
 81062ba:	4a1b      	ldr	r2, [pc, #108]	@ (8106328 <HAL_DMA_Abort+0x26c>)
 81062bc:	4293      	cmp	r3, r2
 81062be:	d004      	beq.n	81062ca <HAL_DMA_Abort+0x20e>
 81062c0:	687b      	ldr	r3, [r7, #4]
 81062c2:	681b      	ldr	r3, [r3, #0]
 81062c4:	4a19      	ldr	r2, [pc, #100]	@ (810632c <HAL_DMA_Abort+0x270>)
 81062c6:	4293      	cmp	r3, r2
 81062c8:	d132      	bne.n	8106330 <HAL_DMA_Abort+0x274>
 81062ca:	2301      	movs	r3, #1
 81062cc:	e031      	b.n	8106332 <HAL_DMA_Abort+0x276>
 81062ce:	bf00      	nop
 81062d0:	40020010 	.word	0x40020010
 81062d4:	40020028 	.word	0x40020028
 81062d8:	40020040 	.word	0x40020040
 81062dc:	40020058 	.word	0x40020058
 81062e0:	40020070 	.word	0x40020070
 81062e4:	40020088 	.word	0x40020088
 81062e8:	400200a0 	.word	0x400200a0
 81062ec:	400200b8 	.word	0x400200b8
 81062f0:	40020410 	.word	0x40020410
 81062f4:	40020428 	.word	0x40020428
 81062f8:	40020440 	.word	0x40020440
 81062fc:	40020458 	.word	0x40020458
 8106300:	40020470 	.word	0x40020470
 8106304:	40020488 	.word	0x40020488
 8106308:	400204a0 	.word	0x400204a0
 810630c:	400204b8 	.word	0x400204b8
 8106310:	58025408 	.word	0x58025408
 8106314:	5802541c 	.word	0x5802541c
 8106318:	58025430 	.word	0x58025430
 810631c:	58025444 	.word	0x58025444
 8106320:	58025458 	.word	0x58025458
 8106324:	5802546c 	.word	0x5802546c
 8106328:	58025480 	.word	0x58025480
 810632c:	58025494 	.word	0x58025494
 8106330:	2300      	movs	r3, #0
 8106332:	2b00      	cmp	r3, #0
 8106334:	d007      	beq.n	8106346 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8106336:	687b      	ldr	r3, [r7, #4]
 8106338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810633a:	681a      	ldr	r2, [r3, #0]
 810633c:	687b      	ldr	r3, [r7, #4]
 810633e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106340:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106344:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8106346:	687b      	ldr	r3, [r7, #4]
 8106348:	681b      	ldr	r3, [r3, #0]
 810634a:	4a6d      	ldr	r2, [pc, #436]	@ (8106500 <HAL_DMA_Abort+0x444>)
 810634c:	4293      	cmp	r3, r2
 810634e:	d04a      	beq.n	81063e6 <HAL_DMA_Abort+0x32a>
 8106350:	687b      	ldr	r3, [r7, #4]
 8106352:	681b      	ldr	r3, [r3, #0]
 8106354:	4a6b      	ldr	r2, [pc, #428]	@ (8106504 <HAL_DMA_Abort+0x448>)
 8106356:	4293      	cmp	r3, r2
 8106358:	d045      	beq.n	81063e6 <HAL_DMA_Abort+0x32a>
 810635a:	687b      	ldr	r3, [r7, #4]
 810635c:	681b      	ldr	r3, [r3, #0]
 810635e:	4a6a      	ldr	r2, [pc, #424]	@ (8106508 <HAL_DMA_Abort+0x44c>)
 8106360:	4293      	cmp	r3, r2
 8106362:	d040      	beq.n	81063e6 <HAL_DMA_Abort+0x32a>
 8106364:	687b      	ldr	r3, [r7, #4]
 8106366:	681b      	ldr	r3, [r3, #0]
 8106368:	4a68      	ldr	r2, [pc, #416]	@ (810650c <HAL_DMA_Abort+0x450>)
 810636a:	4293      	cmp	r3, r2
 810636c:	d03b      	beq.n	81063e6 <HAL_DMA_Abort+0x32a>
 810636e:	687b      	ldr	r3, [r7, #4]
 8106370:	681b      	ldr	r3, [r3, #0]
 8106372:	4a67      	ldr	r2, [pc, #412]	@ (8106510 <HAL_DMA_Abort+0x454>)
 8106374:	4293      	cmp	r3, r2
 8106376:	d036      	beq.n	81063e6 <HAL_DMA_Abort+0x32a>
 8106378:	687b      	ldr	r3, [r7, #4]
 810637a:	681b      	ldr	r3, [r3, #0]
 810637c:	4a65      	ldr	r2, [pc, #404]	@ (8106514 <HAL_DMA_Abort+0x458>)
 810637e:	4293      	cmp	r3, r2
 8106380:	d031      	beq.n	81063e6 <HAL_DMA_Abort+0x32a>
 8106382:	687b      	ldr	r3, [r7, #4]
 8106384:	681b      	ldr	r3, [r3, #0]
 8106386:	4a64      	ldr	r2, [pc, #400]	@ (8106518 <HAL_DMA_Abort+0x45c>)
 8106388:	4293      	cmp	r3, r2
 810638a:	d02c      	beq.n	81063e6 <HAL_DMA_Abort+0x32a>
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	681b      	ldr	r3, [r3, #0]
 8106390:	4a62      	ldr	r2, [pc, #392]	@ (810651c <HAL_DMA_Abort+0x460>)
 8106392:	4293      	cmp	r3, r2
 8106394:	d027      	beq.n	81063e6 <HAL_DMA_Abort+0x32a>
 8106396:	687b      	ldr	r3, [r7, #4]
 8106398:	681b      	ldr	r3, [r3, #0]
 810639a:	4a61      	ldr	r2, [pc, #388]	@ (8106520 <HAL_DMA_Abort+0x464>)
 810639c:	4293      	cmp	r3, r2
 810639e:	d022      	beq.n	81063e6 <HAL_DMA_Abort+0x32a>
 81063a0:	687b      	ldr	r3, [r7, #4]
 81063a2:	681b      	ldr	r3, [r3, #0]
 81063a4:	4a5f      	ldr	r2, [pc, #380]	@ (8106524 <HAL_DMA_Abort+0x468>)
 81063a6:	4293      	cmp	r3, r2
 81063a8:	d01d      	beq.n	81063e6 <HAL_DMA_Abort+0x32a>
 81063aa:	687b      	ldr	r3, [r7, #4]
 81063ac:	681b      	ldr	r3, [r3, #0]
 81063ae:	4a5e      	ldr	r2, [pc, #376]	@ (8106528 <HAL_DMA_Abort+0x46c>)
 81063b0:	4293      	cmp	r3, r2
 81063b2:	d018      	beq.n	81063e6 <HAL_DMA_Abort+0x32a>
 81063b4:	687b      	ldr	r3, [r7, #4]
 81063b6:	681b      	ldr	r3, [r3, #0]
 81063b8:	4a5c      	ldr	r2, [pc, #368]	@ (810652c <HAL_DMA_Abort+0x470>)
 81063ba:	4293      	cmp	r3, r2
 81063bc:	d013      	beq.n	81063e6 <HAL_DMA_Abort+0x32a>
 81063be:	687b      	ldr	r3, [r7, #4]
 81063c0:	681b      	ldr	r3, [r3, #0]
 81063c2:	4a5b      	ldr	r2, [pc, #364]	@ (8106530 <HAL_DMA_Abort+0x474>)
 81063c4:	4293      	cmp	r3, r2
 81063c6:	d00e      	beq.n	81063e6 <HAL_DMA_Abort+0x32a>
 81063c8:	687b      	ldr	r3, [r7, #4]
 81063ca:	681b      	ldr	r3, [r3, #0]
 81063cc:	4a59      	ldr	r2, [pc, #356]	@ (8106534 <HAL_DMA_Abort+0x478>)
 81063ce:	4293      	cmp	r3, r2
 81063d0:	d009      	beq.n	81063e6 <HAL_DMA_Abort+0x32a>
 81063d2:	687b      	ldr	r3, [r7, #4]
 81063d4:	681b      	ldr	r3, [r3, #0]
 81063d6:	4a58      	ldr	r2, [pc, #352]	@ (8106538 <HAL_DMA_Abort+0x47c>)
 81063d8:	4293      	cmp	r3, r2
 81063da:	d004      	beq.n	81063e6 <HAL_DMA_Abort+0x32a>
 81063dc:	687b      	ldr	r3, [r7, #4]
 81063de:	681b      	ldr	r3, [r3, #0]
 81063e0:	4a56      	ldr	r2, [pc, #344]	@ (810653c <HAL_DMA_Abort+0x480>)
 81063e2:	4293      	cmp	r3, r2
 81063e4:	d108      	bne.n	81063f8 <HAL_DMA_Abort+0x33c>
 81063e6:	687b      	ldr	r3, [r7, #4]
 81063e8:	681b      	ldr	r3, [r3, #0]
 81063ea:	681a      	ldr	r2, [r3, #0]
 81063ec:	687b      	ldr	r3, [r7, #4]
 81063ee:	681b      	ldr	r3, [r3, #0]
 81063f0:	f022 0201 	bic.w	r2, r2, #1
 81063f4:	601a      	str	r2, [r3, #0]
 81063f6:	e007      	b.n	8106408 <HAL_DMA_Abort+0x34c>
 81063f8:	687b      	ldr	r3, [r7, #4]
 81063fa:	681b      	ldr	r3, [r3, #0]
 81063fc:	681a      	ldr	r2, [r3, #0]
 81063fe:	687b      	ldr	r3, [r7, #4]
 8106400:	681b      	ldr	r3, [r3, #0]
 8106402:	f022 0201 	bic.w	r2, r2, #1
 8106406:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8106408:	e013      	b.n	8106432 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 810640a:	f7ff fd29 	bl	8105e60 <HAL_GetTick>
 810640e:	4602      	mov	r2, r0
 8106410:	693b      	ldr	r3, [r7, #16]
 8106412:	1ad3      	subs	r3, r2, r3
 8106414:	2b05      	cmp	r3, #5
 8106416:	d90c      	bls.n	8106432 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8106418:	687b      	ldr	r3, [r7, #4]
 810641a:	2220      	movs	r2, #32
 810641c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 810641e:	687b      	ldr	r3, [r7, #4]
 8106420:	2203      	movs	r2, #3
 8106422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8106426:	687b      	ldr	r3, [r7, #4]
 8106428:	2200      	movs	r2, #0
 810642a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 810642e:	2301      	movs	r3, #1
 8106430:	e12d      	b.n	810668e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8106432:	697b      	ldr	r3, [r7, #20]
 8106434:	681b      	ldr	r3, [r3, #0]
 8106436:	f003 0301 	and.w	r3, r3, #1
 810643a:	2b00      	cmp	r3, #0
 810643c:	d1e5      	bne.n	810640a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	681b      	ldr	r3, [r3, #0]
 8106442:	4a2f      	ldr	r2, [pc, #188]	@ (8106500 <HAL_DMA_Abort+0x444>)
 8106444:	4293      	cmp	r3, r2
 8106446:	d04a      	beq.n	81064de <HAL_DMA_Abort+0x422>
 8106448:	687b      	ldr	r3, [r7, #4]
 810644a:	681b      	ldr	r3, [r3, #0]
 810644c:	4a2d      	ldr	r2, [pc, #180]	@ (8106504 <HAL_DMA_Abort+0x448>)
 810644e:	4293      	cmp	r3, r2
 8106450:	d045      	beq.n	81064de <HAL_DMA_Abort+0x422>
 8106452:	687b      	ldr	r3, [r7, #4]
 8106454:	681b      	ldr	r3, [r3, #0]
 8106456:	4a2c      	ldr	r2, [pc, #176]	@ (8106508 <HAL_DMA_Abort+0x44c>)
 8106458:	4293      	cmp	r3, r2
 810645a:	d040      	beq.n	81064de <HAL_DMA_Abort+0x422>
 810645c:	687b      	ldr	r3, [r7, #4]
 810645e:	681b      	ldr	r3, [r3, #0]
 8106460:	4a2a      	ldr	r2, [pc, #168]	@ (810650c <HAL_DMA_Abort+0x450>)
 8106462:	4293      	cmp	r3, r2
 8106464:	d03b      	beq.n	81064de <HAL_DMA_Abort+0x422>
 8106466:	687b      	ldr	r3, [r7, #4]
 8106468:	681b      	ldr	r3, [r3, #0]
 810646a:	4a29      	ldr	r2, [pc, #164]	@ (8106510 <HAL_DMA_Abort+0x454>)
 810646c:	4293      	cmp	r3, r2
 810646e:	d036      	beq.n	81064de <HAL_DMA_Abort+0x422>
 8106470:	687b      	ldr	r3, [r7, #4]
 8106472:	681b      	ldr	r3, [r3, #0]
 8106474:	4a27      	ldr	r2, [pc, #156]	@ (8106514 <HAL_DMA_Abort+0x458>)
 8106476:	4293      	cmp	r3, r2
 8106478:	d031      	beq.n	81064de <HAL_DMA_Abort+0x422>
 810647a:	687b      	ldr	r3, [r7, #4]
 810647c:	681b      	ldr	r3, [r3, #0]
 810647e:	4a26      	ldr	r2, [pc, #152]	@ (8106518 <HAL_DMA_Abort+0x45c>)
 8106480:	4293      	cmp	r3, r2
 8106482:	d02c      	beq.n	81064de <HAL_DMA_Abort+0x422>
 8106484:	687b      	ldr	r3, [r7, #4]
 8106486:	681b      	ldr	r3, [r3, #0]
 8106488:	4a24      	ldr	r2, [pc, #144]	@ (810651c <HAL_DMA_Abort+0x460>)
 810648a:	4293      	cmp	r3, r2
 810648c:	d027      	beq.n	81064de <HAL_DMA_Abort+0x422>
 810648e:	687b      	ldr	r3, [r7, #4]
 8106490:	681b      	ldr	r3, [r3, #0]
 8106492:	4a23      	ldr	r2, [pc, #140]	@ (8106520 <HAL_DMA_Abort+0x464>)
 8106494:	4293      	cmp	r3, r2
 8106496:	d022      	beq.n	81064de <HAL_DMA_Abort+0x422>
 8106498:	687b      	ldr	r3, [r7, #4]
 810649a:	681b      	ldr	r3, [r3, #0]
 810649c:	4a21      	ldr	r2, [pc, #132]	@ (8106524 <HAL_DMA_Abort+0x468>)
 810649e:	4293      	cmp	r3, r2
 81064a0:	d01d      	beq.n	81064de <HAL_DMA_Abort+0x422>
 81064a2:	687b      	ldr	r3, [r7, #4]
 81064a4:	681b      	ldr	r3, [r3, #0]
 81064a6:	4a20      	ldr	r2, [pc, #128]	@ (8106528 <HAL_DMA_Abort+0x46c>)
 81064a8:	4293      	cmp	r3, r2
 81064aa:	d018      	beq.n	81064de <HAL_DMA_Abort+0x422>
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	681b      	ldr	r3, [r3, #0]
 81064b0:	4a1e      	ldr	r2, [pc, #120]	@ (810652c <HAL_DMA_Abort+0x470>)
 81064b2:	4293      	cmp	r3, r2
 81064b4:	d013      	beq.n	81064de <HAL_DMA_Abort+0x422>
 81064b6:	687b      	ldr	r3, [r7, #4]
 81064b8:	681b      	ldr	r3, [r3, #0]
 81064ba:	4a1d      	ldr	r2, [pc, #116]	@ (8106530 <HAL_DMA_Abort+0x474>)
 81064bc:	4293      	cmp	r3, r2
 81064be:	d00e      	beq.n	81064de <HAL_DMA_Abort+0x422>
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	681b      	ldr	r3, [r3, #0]
 81064c4:	4a1b      	ldr	r2, [pc, #108]	@ (8106534 <HAL_DMA_Abort+0x478>)
 81064c6:	4293      	cmp	r3, r2
 81064c8:	d009      	beq.n	81064de <HAL_DMA_Abort+0x422>
 81064ca:	687b      	ldr	r3, [r7, #4]
 81064cc:	681b      	ldr	r3, [r3, #0]
 81064ce:	4a1a      	ldr	r2, [pc, #104]	@ (8106538 <HAL_DMA_Abort+0x47c>)
 81064d0:	4293      	cmp	r3, r2
 81064d2:	d004      	beq.n	81064de <HAL_DMA_Abort+0x422>
 81064d4:	687b      	ldr	r3, [r7, #4]
 81064d6:	681b      	ldr	r3, [r3, #0]
 81064d8:	4a18      	ldr	r2, [pc, #96]	@ (810653c <HAL_DMA_Abort+0x480>)
 81064da:	4293      	cmp	r3, r2
 81064dc:	d101      	bne.n	81064e2 <HAL_DMA_Abort+0x426>
 81064de:	2301      	movs	r3, #1
 81064e0:	e000      	b.n	81064e4 <HAL_DMA_Abort+0x428>
 81064e2:	2300      	movs	r3, #0
 81064e4:	2b00      	cmp	r3, #0
 81064e6:	d02b      	beq.n	8106540 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81064ec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81064ee:	687b      	ldr	r3, [r7, #4]
 81064f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81064f2:	f003 031f 	and.w	r3, r3, #31
 81064f6:	223f      	movs	r2, #63	@ 0x3f
 81064f8:	409a      	lsls	r2, r3
 81064fa:	68bb      	ldr	r3, [r7, #8]
 81064fc:	609a      	str	r2, [r3, #8]
 81064fe:	e02a      	b.n	8106556 <HAL_DMA_Abort+0x49a>
 8106500:	40020010 	.word	0x40020010
 8106504:	40020028 	.word	0x40020028
 8106508:	40020040 	.word	0x40020040
 810650c:	40020058 	.word	0x40020058
 8106510:	40020070 	.word	0x40020070
 8106514:	40020088 	.word	0x40020088
 8106518:	400200a0 	.word	0x400200a0
 810651c:	400200b8 	.word	0x400200b8
 8106520:	40020410 	.word	0x40020410
 8106524:	40020428 	.word	0x40020428
 8106528:	40020440 	.word	0x40020440
 810652c:	40020458 	.word	0x40020458
 8106530:	40020470 	.word	0x40020470
 8106534:	40020488 	.word	0x40020488
 8106538:	400204a0 	.word	0x400204a0
 810653c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8106540:	687b      	ldr	r3, [r7, #4]
 8106542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106544:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8106546:	687b      	ldr	r3, [r7, #4]
 8106548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810654a:	f003 031f 	and.w	r3, r3, #31
 810654e:	2201      	movs	r2, #1
 8106550:	409a      	lsls	r2, r3
 8106552:	68fb      	ldr	r3, [r7, #12]
 8106554:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8106556:	687b      	ldr	r3, [r7, #4]
 8106558:	681b      	ldr	r3, [r3, #0]
 810655a:	4a4f      	ldr	r2, [pc, #316]	@ (8106698 <HAL_DMA_Abort+0x5dc>)
 810655c:	4293      	cmp	r3, r2
 810655e:	d072      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 8106560:	687b      	ldr	r3, [r7, #4]
 8106562:	681b      	ldr	r3, [r3, #0]
 8106564:	4a4d      	ldr	r2, [pc, #308]	@ (810669c <HAL_DMA_Abort+0x5e0>)
 8106566:	4293      	cmp	r3, r2
 8106568:	d06d      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 810656a:	687b      	ldr	r3, [r7, #4]
 810656c:	681b      	ldr	r3, [r3, #0]
 810656e:	4a4c      	ldr	r2, [pc, #304]	@ (81066a0 <HAL_DMA_Abort+0x5e4>)
 8106570:	4293      	cmp	r3, r2
 8106572:	d068      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 8106574:	687b      	ldr	r3, [r7, #4]
 8106576:	681b      	ldr	r3, [r3, #0]
 8106578:	4a4a      	ldr	r2, [pc, #296]	@ (81066a4 <HAL_DMA_Abort+0x5e8>)
 810657a:	4293      	cmp	r3, r2
 810657c:	d063      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 810657e:	687b      	ldr	r3, [r7, #4]
 8106580:	681b      	ldr	r3, [r3, #0]
 8106582:	4a49      	ldr	r2, [pc, #292]	@ (81066a8 <HAL_DMA_Abort+0x5ec>)
 8106584:	4293      	cmp	r3, r2
 8106586:	d05e      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 8106588:	687b      	ldr	r3, [r7, #4]
 810658a:	681b      	ldr	r3, [r3, #0]
 810658c:	4a47      	ldr	r2, [pc, #284]	@ (81066ac <HAL_DMA_Abort+0x5f0>)
 810658e:	4293      	cmp	r3, r2
 8106590:	d059      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 8106592:	687b      	ldr	r3, [r7, #4]
 8106594:	681b      	ldr	r3, [r3, #0]
 8106596:	4a46      	ldr	r2, [pc, #280]	@ (81066b0 <HAL_DMA_Abort+0x5f4>)
 8106598:	4293      	cmp	r3, r2
 810659a:	d054      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 810659c:	687b      	ldr	r3, [r7, #4]
 810659e:	681b      	ldr	r3, [r3, #0]
 81065a0:	4a44      	ldr	r2, [pc, #272]	@ (81066b4 <HAL_DMA_Abort+0x5f8>)
 81065a2:	4293      	cmp	r3, r2
 81065a4:	d04f      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 81065a6:	687b      	ldr	r3, [r7, #4]
 81065a8:	681b      	ldr	r3, [r3, #0]
 81065aa:	4a43      	ldr	r2, [pc, #268]	@ (81066b8 <HAL_DMA_Abort+0x5fc>)
 81065ac:	4293      	cmp	r3, r2
 81065ae:	d04a      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 81065b0:	687b      	ldr	r3, [r7, #4]
 81065b2:	681b      	ldr	r3, [r3, #0]
 81065b4:	4a41      	ldr	r2, [pc, #260]	@ (81066bc <HAL_DMA_Abort+0x600>)
 81065b6:	4293      	cmp	r3, r2
 81065b8:	d045      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 81065ba:	687b      	ldr	r3, [r7, #4]
 81065bc:	681b      	ldr	r3, [r3, #0]
 81065be:	4a40      	ldr	r2, [pc, #256]	@ (81066c0 <HAL_DMA_Abort+0x604>)
 81065c0:	4293      	cmp	r3, r2
 81065c2:	d040      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 81065c4:	687b      	ldr	r3, [r7, #4]
 81065c6:	681b      	ldr	r3, [r3, #0]
 81065c8:	4a3e      	ldr	r2, [pc, #248]	@ (81066c4 <HAL_DMA_Abort+0x608>)
 81065ca:	4293      	cmp	r3, r2
 81065cc:	d03b      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	681b      	ldr	r3, [r3, #0]
 81065d2:	4a3d      	ldr	r2, [pc, #244]	@ (81066c8 <HAL_DMA_Abort+0x60c>)
 81065d4:	4293      	cmp	r3, r2
 81065d6:	d036      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 81065d8:	687b      	ldr	r3, [r7, #4]
 81065da:	681b      	ldr	r3, [r3, #0]
 81065dc:	4a3b      	ldr	r2, [pc, #236]	@ (81066cc <HAL_DMA_Abort+0x610>)
 81065de:	4293      	cmp	r3, r2
 81065e0:	d031      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 81065e2:	687b      	ldr	r3, [r7, #4]
 81065e4:	681b      	ldr	r3, [r3, #0]
 81065e6:	4a3a      	ldr	r2, [pc, #232]	@ (81066d0 <HAL_DMA_Abort+0x614>)
 81065e8:	4293      	cmp	r3, r2
 81065ea:	d02c      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 81065ec:	687b      	ldr	r3, [r7, #4]
 81065ee:	681b      	ldr	r3, [r3, #0]
 81065f0:	4a38      	ldr	r2, [pc, #224]	@ (81066d4 <HAL_DMA_Abort+0x618>)
 81065f2:	4293      	cmp	r3, r2
 81065f4:	d027      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 81065f6:	687b      	ldr	r3, [r7, #4]
 81065f8:	681b      	ldr	r3, [r3, #0]
 81065fa:	4a37      	ldr	r2, [pc, #220]	@ (81066d8 <HAL_DMA_Abort+0x61c>)
 81065fc:	4293      	cmp	r3, r2
 81065fe:	d022      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 8106600:	687b      	ldr	r3, [r7, #4]
 8106602:	681b      	ldr	r3, [r3, #0]
 8106604:	4a35      	ldr	r2, [pc, #212]	@ (81066dc <HAL_DMA_Abort+0x620>)
 8106606:	4293      	cmp	r3, r2
 8106608:	d01d      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 810660a:	687b      	ldr	r3, [r7, #4]
 810660c:	681b      	ldr	r3, [r3, #0]
 810660e:	4a34      	ldr	r2, [pc, #208]	@ (81066e0 <HAL_DMA_Abort+0x624>)
 8106610:	4293      	cmp	r3, r2
 8106612:	d018      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 8106614:	687b      	ldr	r3, [r7, #4]
 8106616:	681b      	ldr	r3, [r3, #0]
 8106618:	4a32      	ldr	r2, [pc, #200]	@ (81066e4 <HAL_DMA_Abort+0x628>)
 810661a:	4293      	cmp	r3, r2
 810661c:	d013      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 810661e:	687b      	ldr	r3, [r7, #4]
 8106620:	681b      	ldr	r3, [r3, #0]
 8106622:	4a31      	ldr	r2, [pc, #196]	@ (81066e8 <HAL_DMA_Abort+0x62c>)
 8106624:	4293      	cmp	r3, r2
 8106626:	d00e      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 8106628:	687b      	ldr	r3, [r7, #4]
 810662a:	681b      	ldr	r3, [r3, #0]
 810662c:	4a2f      	ldr	r2, [pc, #188]	@ (81066ec <HAL_DMA_Abort+0x630>)
 810662e:	4293      	cmp	r3, r2
 8106630:	d009      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 8106632:	687b      	ldr	r3, [r7, #4]
 8106634:	681b      	ldr	r3, [r3, #0]
 8106636:	4a2e      	ldr	r2, [pc, #184]	@ (81066f0 <HAL_DMA_Abort+0x634>)
 8106638:	4293      	cmp	r3, r2
 810663a:	d004      	beq.n	8106646 <HAL_DMA_Abort+0x58a>
 810663c:	687b      	ldr	r3, [r7, #4]
 810663e:	681b      	ldr	r3, [r3, #0]
 8106640:	4a2c      	ldr	r2, [pc, #176]	@ (81066f4 <HAL_DMA_Abort+0x638>)
 8106642:	4293      	cmp	r3, r2
 8106644:	d101      	bne.n	810664a <HAL_DMA_Abort+0x58e>
 8106646:	2301      	movs	r3, #1
 8106648:	e000      	b.n	810664c <HAL_DMA_Abort+0x590>
 810664a:	2300      	movs	r3, #0
 810664c:	2b00      	cmp	r3, #0
 810664e:	d015      	beq.n	810667c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8106650:	687b      	ldr	r3, [r7, #4]
 8106652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106654:	687a      	ldr	r2, [r7, #4]
 8106656:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8106658:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 810665a:	687b      	ldr	r3, [r7, #4]
 810665c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810665e:	2b00      	cmp	r3, #0
 8106660:	d00c      	beq.n	810667c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8106662:	687b      	ldr	r3, [r7, #4]
 8106664:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106666:	681a      	ldr	r2, [r3, #0]
 8106668:	687b      	ldr	r3, [r7, #4]
 810666a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810666c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106670:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8106672:	687b      	ldr	r3, [r7, #4]
 8106674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106676:	687a      	ldr	r2, [r7, #4]
 8106678:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 810667a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 810667c:	687b      	ldr	r3, [r7, #4]
 810667e:	2201      	movs	r2, #1
 8106680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8106684:	687b      	ldr	r3, [r7, #4]
 8106686:	2200      	movs	r2, #0
 8106688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 810668c:	2300      	movs	r3, #0
}
 810668e:	4618      	mov	r0, r3
 8106690:	3718      	adds	r7, #24
 8106692:	46bd      	mov	sp, r7
 8106694:	bd80      	pop	{r7, pc}
 8106696:	bf00      	nop
 8106698:	40020010 	.word	0x40020010
 810669c:	40020028 	.word	0x40020028
 81066a0:	40020040 	.word	0x40020040
 81066a4:	40020058 	.word	0x40020058
 81066a8:	40020070 	.word	0x40020070
 81066ac:	40020088 	.word	0x40020088
 81066b0:	400200a0 	.word	0x400200a0
 81066b4:	400200b8 	.word	0x400200b8
 81066b8:	40020410 	.word	0x40020410
 81066bc:	40020428 	.word	0x40020428
 81066c0:	40020440 	.word	0x40020440
 81066c4:	40020458 	.word	0x40020458
 81066c8:	40020470 	.word	0x40020470
 81066cc:	40020488 	.word	0x40020488
 81066d0:	400204a0 	.word	0x400204a0
 81066d4:	400204b8 	.word	0x400204b8
 81066d8:	58025408 	.word	0x58025408
 81066dc:	5802541c 	.word	0x5802541c
 81066e0:	58025430 	.word	0x58025430
 81066e4:	58025444 	.word	0x58025444
 81066e8:	58025458 	.word	0x58025458
 81066ec:	5802546c 	.word	0x5802546c
 81066f0:	58025480 	.word	0x58025480
 81066f4:	58025494 	.word	0x58025494

081066f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 81066f8:	b580      	push	{r7, lr}
 81066fa:	b084      	sub	sp, #16
 81066fc:	af00      	add	r7, sp, #0
 81066fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8106700:	687b      	ldr	r3, [r7, #4]
 8106702:	2b00      	cmp	r3, #0
 8106704:	d101      	bne.n	810670a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8106706:	2301      	movs	r3, #1
 8106708:	e237      	b.n	8106b7a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 810670a:	687b      	ldr	r3, [r7, #4]
 810670c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8106710:	b2db      	uxtb	r3, r3
 8106712:	2b02      	cmp	r3, #2
 8106714:	d004      	beq.n	8106720 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8106716:	687b      	ldr	r3, [r7, #4]
 8106718:	2280      	movs	r2, #128	@ 0x80
 810671a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 810671c:	2301      	movs	r3, #1
 810671e:	e22c      	b.n	8106b7a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106720:	687b      	ldr	r3, [r7, #4]
 8106722:	681b      	ldr	r3, [r3, #0]
 8106724:	4a5c      	ldr	r2, [pc, #368]	@ (8106898 <HAL_DMA_Abort_IT+0x1a0>)
 8106726:	4293      	cmp	r3, r2
 8106728:	d04a      	beq.n	81067c0 <HAL_DMA_Abort_IT+0xc8>
 810672a:	687b      	ldr	r3, [r7, #4]
 810672c:	681b      	ldr	r3, [r3, #0]
 810672e:	4a5b      	ldr	r2, [pc, #364]	@ (810689c <HAL_DMA_Abort_IT+0x1a4>)
 8106730:	4293      	cmp	r3, r2
 8106732:	d045      	beq.n	81067c0 <HAL_DMA_Abort_IT+0xc8>
 8106734:	687b      	ldr	r3, [r7, #4]
 8106736:	681b      	ldr	r3, [r3, #0]
 8106738:	4a59      	ldr	r2, [pc, #356]	@ (81068a0 <HAL_DMA_Abort_IT+0x1a8>)
 810673a:	4293      	cmp	r3, r2
 810673c:	d040      	beq.n	81067c0 <HAL_DMA_Abort_IT+0xc8>
 810673e:	687b      	ldr	r3, [r7, #4]
 8106740:	681b      	ldr	r3, [r3, #0]
 8106742:	4a58      	ldr	r2, [pc, #352]	@ (81068a4 <HAL_DMA_Abort_IT+0x1ac>)
 8106744:	4293      	cmp	r3, r2
 8106746:	d03b      	beq.n	81067c0 <HAL_DMA_Abort_IT+0xc8>
 8106748:	687b      	ldr	r3, [r7, #4]
 810674a:	681b      	ldr	r3, [r3, #0]
 810674c:	4a56      	ldr	r2, [pc, #344]	@ (81068a8 <HAL_DMA_Abort_IT+0x1b0>)
 810674e:	4293      	cmp	r3, r2
 8106750:	d036      	beq.n	81067c0 <HAL_DMA_Abort_IT+0xc8>
 8106752:	687b      	ldr	r3, [r7, #4]
 8106754:	681b      	ldr	r3, [r3, #0]
 8106756:	4a55      	ldr	r2, [pc, #340]	@ (81068ac <HAL_DMA_Abort_IT+0x1b4>)
 8106758:	4293      	cmp	r3, r2
 810675a:	d031      	beq.n	81067c0 <HAL_DMA_Abort_IT+0xc8>
 810675c:	687b      	ldr	r3, [r7, #4]
 810675e:	681b      	ldr	r3, [r3, #0]
 8106760:	4a53      	ldr	r2, [pc, #332]	@ (81068b0 <HAL_DMA_Abort_IT+0x1b8>)
 8106762:	4293      	cmp	r3, r2
 8106764:	d02c      	beq.n	81067c0 <HAL_DMA_Abort_IT+0xc8>
 8106766:	687b      	ldr	r3, [r7, #4]
 8106768:	681b      	ldr	r3, [r3, #0]
 810676a:	4a52      	ldr	r2, [pc, #328]	@ (81068b4 <HAL_DMA_Abort_IT+0x1bc>)
 810676c:	4293      	cmp	r3, r2
 810676e:	d027      	beq.n	81067c0 <HAL_DMA_Abort_IT+0xc8>
 8106770:	687b      	ldr	r3, [r7, #4]
 8106772:	681b      	ldr	r3, [r3, #0]
 8106774:	4a50      	ldr	r2, [pc, #320]	@ (81068b8 <HAL_DMA_Abort_IT+0x1c0>)
 8106776:	4293      	cmp	r3, r2
 8106778:	d022      	beq.n	81067c0 <HAL_DMA_Abort_IT+0xc8>
 810677a:	687b      	ldr	r3, [r7, #4]
 810677c:	681b      	ldr	r3, [r3, #0]
 810677e:	4a4f      	ldr	r2, [pc, #316]	@ (81068bc <HAL_DMA_Abort_IT+0x1c4>)
 8106780:	4293      	cmp	r3, r2
 8106782:	d01d      	beq.n	81067c0 <HAL_DMA_Abort_IT+0xc8>
 8106784:	687b      	ldr	r3, [r7, #4]
 8106786:	681b      	ldr	r3, [r3, #0]
 8106788:	4a4d      	ldr	r2, [pc, #308]	@ (81068c0 <HAL_DMA_Abort_IT+0x1c8>)
 810678a:	4293      	cmp	r3, r2
 810678c:	d018      	beq.n	81067c0 <HAL_DMA_Abort_IT+0xc8>
 810678e:	687b      	ldr	r3, [r7, #4]
 8106790:	681b      	ldr	r3, [r3, #0]
 8106792:	4a4c      	ldr	r2, [pc, #304]	@ (81068c4 <HAL_DMA_Abort_IT+0x1cc>)
 8106794:	4293      	cmp	r3, r2
 8106796:	d013      	beq.n	81067c0 <HAL_DMA_Abort_IT+0xc8>
 8106798:	687b      	ldr	r3, [r7, #4]
 810679a:	681b      	ldr	r3, [r3, #0]
 810679c:	4a4a      	ldr	r2, [pc, #296]	@ (81068c8 <HAL_DMA_Abort_IT+0x1d0>)
 810679e:	4293      	cmp	r3, r2
 81067a0:	d00e      	beq.n	81067c0 <HAL_DMA_Abort_IT+0xc8>
 81067a2:	687b      	ldr	r3, [r7, #4]
 81067a4:	681b      	ldr	r3, [r3, #0]
 81067a6:	4a49      	ldr	r2, [pc, #292]	@ (81068cc <HAL_DMA_Abort_IT+0x1d4>)
 81067a8:	4293      	cmp	r3, r2
 81067aa:	d009      	beq.n	81067c0 <HAL_DMA_Abort_IT+0xc8>
 81067ac:	687b      	ldr	r3, [r7, #4]
 81067ae:	681b      	ldr	r3, [r3, #0]
 81067b0:	4a47      	ldr	r2, [pc, #284]	@ (81068d0 <HAL_DMA_Abort_IT+0x1d8>)
 81067b2:	4293      	cmp	r3, r2
 81067b4:	d004      	beq.n	81067c0 <HAL_DMA_Abort_IT+0xc8>
 81067b6:	687b      	ldr	r3, [r7, #4]
 81067b8:	681b      	ldr	r3, [r3, #0]
 81067ba:	4a46      	ldr	r2, [pc, #280]	@ (81068d4 <HAL_DMA_Abort_IT+0x1dc>)
 81067bc:	4293      	cmp	r3, r2
 81067be:	d101      	bne.n	81067c4 <HAL_DMA_Abort_IT+0xcc>
 81067c0:	2301      	movs	r3, #1
 81067c2:	e000      	b.n	81067c6 <HAL_DMA_Abort_IT+0xce>
 81067c4:	2300      	movs	r3, #0
 81067c6:	2b00      	cmp	r3, #0
 81067c8:	f000 8086 	beq.w	81068d8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 81067cc:	687b      	ldr	r3, [r7, #4]
 81067ce:	2204      	movs	r2, #4
 81067d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 81067d4:	687b      	ldr	r3, [r7, #4]
 81067d6:	681b      	ldr	r3, [r3, #0]
 81067d8:	4a2f      	ldr	r2, [pc, #188]	@ (8106898 <HAL_DMA_Abort_IT+0x1a0>)
 81067da:	4293      	cmp	r3, r2
 81067dc:	d04a      	beq.n	8106874 <HAL_DMA_Abort_IT+0x17c>
 81067de:	687b      	ldr	r3, [r7, #4]
 81067e0:	681b      	ldr	r3, [r3, #0]
 81067e2:	4a2e      	ldr	r2, [pc, #184]	@ (810689c <HAL_DMA_Abort_IT+0x1a4>)
 81067e4:	4293      	cmp	r3, r2
 81067e6:	d045      	beq.n	8106874 <HAL_DMA_Abort_IT+0x17c>
 81067e8:	687b      	ldr	r3, [r7, #4]
 81067ea:	681b      	ldr	r3, [r3, #0]
 81067ec:	4a2c      	ldr	r2, [pc, #176]	@ (81068a0 <HAL_DMA_Abort_IT+0x1a8>)
 81067ee:	4293      	cmp	r3, r2
 81067f0:	d040      	beq.n	8106874 <HAL_DMA_Abort_IT+0x17c>
 81067f2:	687b      	ldr	r3, [r7, #4]
 81067f4:	681b      	ldr	r3, [r3, #0]
 81067f6:	4a2b      	ldr	r2, [pc, #172]	@ (81068a4 <HAL_DMA_Abort_IT+0x1ac>)
 81067f8:	4293      	cmp	r3, r2
 81067fa:	d03b      	beq.n	8106874 <HAL_DMA_Abort_IT+0x17c>
 81067fc:	687b      	ldr	r3, [r7, #4]
 81067fe:	681b      	ldr	r3, [r3, #0]
 8106800:	4a29      	ldr	r2, [pc, #164]	@ (81068a8 <HAL_DMA_Abort_IT+0x1b0>)
 8106802:	4293      	cmp	r3, r2
 8106804:	d036      	beq.n	8106874 <HAL_DMA_Abort_IT+0x17c>
 8106806:	687b      	ldr	r3, [r7, #4]
 8106808:	681b      	ldr	r3, [r3, #0]
 810680a:	4a28      	ldr	r2, [pc, #160]	@ (81068ac <HAL_DMA_Abort_IT+0x1b4>)
 810680c:	4293      	cmp	r3, r2
 810680e:	d031      	beq.n	8106874 <HAL_DMA_Abort_IT+0x17c>
 8106810:	687b      	ldr	r3, [r7, #4]
 8106812:	681b      	ldr	r3, [r3, #0]
 8106814:	4a26      	ldr	r2, [pc, #152]	@ (81068b0 <HAL_DMA_Abort_IT+0x1b8>)
 8106816:	4293      	cmp	r3, r2
 8106818:	d02c      	beq.n	8106874 <HAL_DMA_Abort_IT+0x17c>
 810681a:	687b      	ldr	r3, [r7, #4]
 810681c:	681b      	ldr	r3, [r3, #0]
 810681e:	4a25      	ldr	r2, [pc, #148]	@ (81068b4 <HAL_DMA_Abort_IT+0x1bc>)
 8106820:	4293      	cmp	r3, r2
 8106822:	d027      	beq.n	8106874 <HAL_DMA_Abort_IT+0x17c>
 8106824:	687b      	ldr	r3, [r7, #4]
 8106826:	681b      	ldr	r3, [r3, #0]
 8106828:	4a23      	ldr	r2, [pc, #140]	@ (81068b8 <HAL_DMA_Abort_IT+0x1c0>)
 810682a:	4293      	cmp	r3, r2
 810682c:	d022      	beq.n	8106874 <HAL_DMA_Abort_IT+0x17c>
 810682e:	687b      	ldr	r3, [r7, #4]
 8106830:	681b      	ldr	r3, [r3, #0]
 8106832:	4a22      	ldr	r2, [pc, #136]	@ (81068bc <HAL_DMA_Abort_IT+0x1c4>)
 8106834:	4293      	cmp	r3, r2
 8106836:	d01d      	beq.n	8106874 <HAL_DMA_Abort_IT+0x17c>
 8106838:	687b      	ldr	r3, [r7, #4]
 810683a:	681b      	ldr	r3, [r3, #0]
 810683c:	4a20      	ldr	r2, [pc, #128]	@ (81068c0 <HAL_DMA_Abort_IT+0x1c8>)
 810683e:	4293      	cmp	r3, r2
 8106840:	d018      	beq.n	8106874 <HAL_DMA_Abort_IT+0x17c>
 8106842:	687b      	ldr	r3, [r7, #4]
 8106844:	681b      	ldr	r3, [r3, #0]
 8106846:	4a1f      	ldr	r2, [pc, #124]	@ (81068c4 <HAL_DMA_Abort_IT+0x1cc>)
 8106848:	4293      	cmp	r3, r2
 810684a:	d013      	beq.n	8106874 <HAL_DMA_Abort_IT+0x17c>
 810684c:	687b      	ldr	r3, [r7, #4]
 810684e:	681b      	ldr	r3, [r3, #0]
 8106850:	4a1d      	ldr	r2, [pc, #116]	@ (81068c8 <HAL_DMA_Abort_IT+0x1d0>)
 8106852:	4293      	cmp	r3, r2
 8106854:	d00e      	beq.n	8106874 <HAL_DMA_Abort_IT+0x17c>
 8106856:	687b      	ldr	r3, [r7, #4]
 8106858:	681b      	ldr	r3, [r3, #0]
 810685a:	4a1c      	ldr	r2, [pc, #112]	@ (81068cc <HAL_DMA_Abort_IT+0x1d4>)
 810685c:	4293      	cmp	r3, r2
 810685e:	d009      	beq.n	8106874 <HAL_DMA_Abort_IT+0x17c>
 8106860:	687b      	ldr	r3, [r7, #4]
 8106862:	681b      	ldr	r3, [r3, #0]
 8106864:	4a1a      	ldr	r2, [pc, #104]	@ (81068d0 <HAL_DMA_Abort_IT+0x1d8>)
 8106866:	4293      	cmp	r3, r2
 8106868:	d004      	beq.n	8106874 <HAL_DMA_Abort_IT+0x17c>
 810686a:	687b      	ldr	r3, [r7, #4]
 810686c:	681b      	ldr	r3, [r3, #0]
 810686e:	4a19      	ldr	r2, [pc, #100]	@ (81068d4 <HAL_DMA_Abort_IT+0x1dc>)
 8106870:	4293      	cmp	r3, r2
 8106872:	d108      	bne.n	8106886 <HAL_DMA_Abort_IT+0x18e>
 8106874:	687b      	ldr	r3, [r7, #4]
 8106876:	681b      	ldr	r3, [r3, #0]
 8106878:	681a      	ldr	r2, [r3, #0]
 810687a:	687b      	ldr	r3, [r7, #4]
 810687c:	681b      	ldr	r3, [r3, #0]
 810687e:	f022 0201 	bic.w	r2, r2, #1
 8106882:	601a      	str	r2, [r3, #0]
 8106884:	e178      	b.n	8106b78 <HAL_DMA_Abort_IT+0x480>
 8106886:	687b      	ldr	r3, [r7, #4]
 8106888:	681b      	ldr	r3, [r3, #0]
 810688a:	681a      	ldr	r2, [r3, #0]
 810688c:	687b      	ldr	r3, [r7, #4]
 810688e:	681b      	ldr	r3, [r3, #0]
 8106890:	f022 0201 	bic.w	r2, r2, #1
 8106894:	601a      	str	r2, [r3, #0]
 8106896:	e16f      	b.n	8106b78 <HAL_DMA_Abort_IT+0x480>
 8106898:	40020010 	.word	0x40020010
 810689c:	40020028 	.word	0x40020028
 81068a0:	40020040 	.word	0x40020040
 81068a4:	40020058 	.word	0x40020058
 81068a8:	40020070 	.word	0x40020070
 81068ac:	40020088 	.word	0x40020088
 81068b0:	400200a0 	.word	0x400200a0
 81068b4:	400200b8 	.word	0x400200b8
 81068b8:	40020410 	.word	0x40020410
 81068bc:	40020428 	.word	0x40020428
 81068c0:	40020440 	.word	0x40020440
 81068c4:	40020458 	.word	0x40020458
 81068c8:	40020470 	.word	0x40020470
 81068cc:	40020488 	.word	0x40020488
 81068d0:	400204a0 	.word	0x400204a0
 81068d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81068d8:	687b      	ldr	r3, [r7, #4]
 81068da:	681b      	ldr	r3, [r3, #0]
 81068dc:	681a      	ldr	r2, [r3, #0]
 81068de:	687b      	ldr	r3, [r7, #4]
 81068e0:	681b      	ldr	r3, [r3, #0]
 81068e2:	f022 020e 	bic.w	r2, r2, #14
 81068e6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 81068e8:	687b      	ldr	r3, [r7, #4]
 81068ea:	681b      	ldr	r3, [r3, #0]
 81068ec:	4a6c      	ldr	r2, [pc, #432]	@ (8106aa0 <HAL_DMA_Abort_IT+0x3a8>)
 81068ee:	4293      	cmp	r3, r2
 81068f0:	d04a      	beq.n	8106988 <HAL_DMA_Abort_IT+0x290>
 81068f2:	687b      	ldr	r3, [r7, #4]
 81068f4:	681b      	ldr	r3, [r3, #0]
 81068f6:	4a6b      	ldr	r2, [pc, #428]	@ (8106aa4 <HAL_DMA_Abort_IT+0x3ac>)
 81068f8:	4293      	cmp	r3, r2
 81068fa:	d045      	beq.n	8106988 <HAL_DMA_Abort_IT+0x290>
 81068fc:	687b      	ldr	r3, [r7, #4]
 81068fe:	681b      	ldr	r3, [r3, #0]
 8106900:	4a69      	ldr	r2, [pc, #420]	@ (8106aa8 <HAL_DMA_Abort_IT+0x3b0>)
 8106902:	4293      	cmp	r3, r2
 8106904:	d040      	beq.n	8106988 <HAL_DMA_Abort_IT+0x290>
 8106906:	687b      	ldr	r3, [r7, #4]
 8106908:	681b      	ldr	r3, [r3, #0]
 810690a:	4a68      	ldr	r2, [pc, #416]	@ (8106aac <HAL_DMA_Abort_IT+0x3b4>)
 810690c:	4293      	cmp	r3, r2
 810690e:	d03b      	beq.n	8106988 <HAL_DMA_Abort_IT+0x290>
 8106910:	687b      	ldr	r3, [r7, #4]
 8106912:	681b      	ldr	r3, [r3, #0]
 8106914:	4a66      	ldr	r2, [pc, #408]	@ (8106ab0 <HAL_DMA_Abort_IT+0x3b8>)
 8106916:	4293      	cmp	r3, r2
 8106918:	d036      	beq.n	8106988 <HAL_DMA_Abort_IT+0x290>
 810691a:	687b      	ldr	r3, [r7, #4]
 810691c:	681b      	ldr	r3, [r3, #0]
 810691e:	4a65      	ldr	r2, [pc, #404]	@ (8106ab4 <HAL_DMA_Abort_IT+0x3bc>)
 8106920:	4293      	cmp	r3, r2
 8106922:	d031      	beq.n	8106988 <HAL_DMA_Abort_IT+0x290>
 8106924:	687b      	ldr	r3, [r7, #4]
 8106926:	681b      	ldr	r3, [r3, #0]
 8106928:	4a63      	ldr	r2, [pc, #396]	@ (8106ab8 <HAL_DMA_Abort_IT+0x3c0>)
 810692a:	4293      	cmp	r3, r2
 810692c:	d02c      	beq.n	8106988 <HAL_DMA_Abort_IT+0x290>
 810692e:	687b      	ldr	r3, [r7, #4]
 8106930:	681b      	ldr	r3, [r3, #0]
 8106932:	4a62      	ldr	r2, [pc, #392]	@ (8106abc <HAL_DMA_Abort_IT+0x3c4>)
 8106934:	4293      	cmp	r3, r2
 8106936:	d027      	beq.n	8106988 <HAL_DMA_Abort_IT+0x290>
 8106938:	687b      	ldr	r3, [r7, #4]
 810693a:	681b      	ldr	r3, [r3, #0]
 810693c:	4a60      	ldr	r2, [pc, #384]	@ (8106ac0 <HAL_DMA_Abort_IT+0x3c8>)
 810693e:	4293      	cmp	r3, r2
 8106940:	d022      	beq.n	8106988 <HAL_DMA_Abort_IT+0x290>
 8106942:	687b      	ldr	r3, [r7, #4]
 8106944:	681b      	ldr	r3, [r3, #0]
 8106946:	4a5f      	ldr	r2, [pc, #380]	@ (8106ac4 <HAL_DMA_Abort_IT+0x3cc>)
 8106948:	4293      	cmp	r3, r2
 810694a:	d01d      	beq.n	8106988 <HAL_DMA_Abort_IT+0x290>
 810694c:	687b      	ldr	r3, [r7, #4]
 810694e:	681b      	ldr	r3, [r3, #0]
 8106950:	4a5d      	ldr	r2, [pc, #372]	@ (8106ac8 <HAL_DMA_Abort_IT+0x3d0>)
 8106952:	4293      	cmp	r3, r2
 8106954:	d018      	beq.n	8106988 <HAL_DMA_Abort_IT+0x290>
 8106956:	687b      	ldr	r3, [r7, #4]
 8106958:	681b      	ldr	r3, [r3, #0]
 810695a:	4a5c      	ldr	r2, [pc, #368]	@ (8106acc <HAL_DMA_Abort_IT+0x3d4>)
 810695c:	4293      	cmp	r3, r2
 810695e:	d013      	beq.n	8106988 <HAL_DMA_Abort_IT+0x290>
 8106960:	687b      	ldr	r3, [r7, #4]
 8106962:	681b      	ldr	r3, [r3, #0]
 8106964:	4a5a      	ldr	r2, [pc, #360]	@ (8106ad0 <HAL_DMA_Abort_IT+0x3d8>)
 8106966:	4293      	cmp	r3, r2
 8106968:	d00e      	beq.n	8106988 <HAL_DMA_Abort_IT+0x290>
 810696a:	687b      	ldr	r3, [r7, #4]
 810696c:	681b      	ldr	r3, [r3, #0]
 810696e:	4a59      	ldr	r2, [pc, #356]	@ (8106ad4 <HAL_DMA_Abort_IT+0x3dc>)
 8106970:	4293      	cmp	r3, r2
 8106972:	d009      	beq.n	8106988 <HAL_DMA_Abort_IT+0x290>
 8106974:	687b      	ldr	r3, [r7, #4]
 8106976:	681b      	ldr	r3, [r3, #0]
 8106978:	4a57      	ldr	r2, [pc, #348]	@ (8106ad8 <HAL_DMA_Abort_IT+0x3e0>)
 810697a:	4293      	cmp	r3, r2
 810697c:	d004      	beq.n	8106988 <HAL_DMA_Abort_IT+0x290>
 810697e:	687b      	ldr	r3, [r7, #4]
 8106980:	681b      	ldr	r3, [r3, #0]
 8106982:	4a56      	ldr	r2, [pc, #344]	@ (8106adc <HAL_DMA_Abort_IT+0x3e4>)
 8106984:	4293      	cmp	r3, r2
 8106986:	d108      	bne.n	810699a <HAL_DMA_Abort_IT+0x2a2>
 8106988:	687b      	ldr	r3, [r7, #4]
 810698a:	681b      	ldr	r3, [r3, #0]
 810698c:	681a      	ldr	r2, [r3, #0]
 810698e:	687b      	ldr	r3, [r7, #4]
 8106990:	681b      	ldr	r3, [r3, #0]
 8106992:	f022 0201 	bic.w	r2, r2, #1
 8106996:	601a      	str	r2, [r3, #0]
 8106998:	e007      	b.n	81069aa <HAL_DMA_Abort_IT+0x2b2>
 810699a:	687b      	ldr	r3, [r7, #4]
 810699c:	681b      	ldr	r3, [r3, #0]
 810699e:	681a      	ldr	r2, [r3, #0]
 81069a0:	687b      	ldr	r3, [r7, #4]
 81069a2:	681b      	ldr	r3, [r3, #0]
 81069a4:	f022 0201 	bic.w	r2, r2, #1
 81069a8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81069aa:	687b      	ldr	r3, [r7, #4]
 81069ac:	681b      	ldr	r3, [r3, #0]
 81069ae:	4a3c      	ldr	r2, [pc, #240]	@ (8106aa0 <HAL_DMA_Abort_IT+0x3a8>)
 81069b0:	4293      	cmp	r3, r2
 81069b2:	d072      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 81069b4:	687b      	ldr	r3, [r7, #4]
 81069b6:	681b      	ldr	r3, [r3, #0]
 81069b8:	4a3a      	ldr	r2, [pc, #232]	@ (8106aa4 <HAL_DMA_Abort_IT+0x3ac>)
 81069ba:	4293      	cmp	r3, r2
 81069bc:	d06d      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 81069be:	687b      	ldr	r3, [r7, #4]
 81069c0:	681b      	ldr	r3, [r3, #0]
 81069c2:	4a39      	ldr	r2, [pc, #228]	@ (8106aa8 <HAL_DMA_Abort_IT+0x3b0>)
 81069c4:	4293      	cmp	r3, r2
 81069c6:	d068      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 81069c8:	687b      	ldr	r3, [r7, #4]
 81069ca:	681b      	ldr	r3, [r3, #0]
 81069cc:	4a37      	ldr	r2, [pc, #220]	@ (8106aac <HAL_DMA_Abort_IT+0x3b4>)
 81069ce:	4293      	cmp	r3, r2
 81069d0:	d063      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 81069d2:	687b      	ldr	r3, [r7, #4]
 81069d4:	681b      	ldr	r3, [r3, #0]
 81069d6:	4a36      	ldr	r2, [pc, #216]	@ (8106ab0 <HAL_DMA_Abort_IT+0x3b8>)
 81069d8:	4293      	cmp	r3, r2
 81069da:	d05e      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 81069dc:	687b      	ldr	r3, [r7, #4]
 81069de:	681b      	ldr	r3, [r3, #0]
 81069e0:	4a34      	ldr	r2, [pc, #208]	@ (8106ab4 <HAL_DMA_Abort_IT+0x3bc>)
 81069e2:	4293      	cmp	r3, r2
 81069e4:	d059      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 81069e6:	687b      	ldr	r3, [r7, #4]
 81069e8:	681b      	ldr	r3, [r3, #0]
 81069ea:	4a33      	ldr	r2, [pc, #204]	@ (8106ab8 <HAL_DMA_Abort_IT+0x3c0>)
 81069ec:	4293      	cmp	r3, r2
 81069ee:	d054      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 81069f0:	687b      	ldr	r3, [r7, #4]
 81069f2:	681b      	ldr	r3, [r3, #0]
 81069f4:	4a31      	ldr	r2, [pc, #196]	@ (8106abc <HAL_DMA_Abort_IT+0x3c4>)
 81069f6:	4293      	cmp	r3, r2
 81069f8:	d04f      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 81069fa:	687b      	ldr	r3, [r7, #4]
 81069fc:	681b      	ldr	r3, [r3, #0]
 81069fe:	4a30      	ldr	r2, [pc, #192]	@ (8106ac0 <HAL_DMA_Abort_IT+0x3c8>)
 8106a00:	4293      	cmp	r3, r2
 8106a02:	d04a      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 8106a04:	687b      	ldr	r3, [r7, #4]
 8106a06:	681b      	ldr	r3, [r3, #0]
 8106a08:	4a2e      	ldr	r2, [pc, #184]	@ (8106ac4 <HAL_DMA_Abort_IT+0x3cc>)
 8106a0a:	4293      	cmp	r3, r2
 8106a0c:	d045      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 8106a0e:	687b      	ldr	r3, [r7, #4]
 8106a10:	681b      	ldr	r3, [r3, #0]
 8106a12:	4a2d      	ldr	r2, [pc, #180]	@ (8106ac8 <HAL_DMA_Abort_IT+0x3d0>)
 8106a14:	4293      	cmp	r3, r2
 8106a16:	d040      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 8106a18:	687b      	ldr	r3, [r7, #4]
 8106a1a:	681b      	ldr	r3, [r3, #0]
 8106a1c:	4a2b      	ldr	r2, [pc, #172]	@ (8106acc <HAL_DMA_Abort_IT+0x3d4>)
 8106a1e:	4293      	cmp	r3, r2
 8106a20:	d03b      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 8106a22:	687b      	ldr	r3, [r7, #4]
 8106a24:	681b      	ldr	r3, [r3, #0]
 8106a26:	4a2a      	ldr	r2, [pc, #168]	@ (8106ad0 <HAL_DMA_Abort_IT+0x3d8>)
 8106a28:	4293      	cmp	r3, r2
 8106a2a:	d036      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 8106a2c:	687b      	ldr	r3, [r7, #4]
 8106a2e:	681b      	ldr	r3, [r3, #0]
 8106a30:	4a28      	ldr	r2, [pc, #160]	@ (8106ad4 <HAL_DMA_Abort_IT+0x3dc>)
 8106a32:	4293      	cmp	r3, r2
 8106a34:	d031      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 8106a36:	687b      	ldr	r3, [r7, #4]
 8106a38:	681b      	ldr	r3, [r3, #0]
 8106a3a:	4a27      	ldr	r2, [pc, #156]	@ (8106ad8 <HAL_DMA_Abort_IT+0x3e0>)
 8106a3c:	4293      	cmp	r3, r2
 8106a3e:	d02c      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 8106a40:	687b      	ldr	r3, [r7, #4]
 8106a42:	681b      	ldr	r3, [r3, #0]
 8106a44:	4a25      	ldr	r2, [pc, #148]	@ (8106adc <HAL_DMA_Abort_IT+0x3e4>)
 8106a46:	4293      	cmp	r3, r2
 8106a48:	d027      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 8106a4a:	687b      	ldr	r3, [r7, #4]
 8106a4c:	681b      	ldr	r3, [r3, #0]
 8106a4e:	4a24      	ldr	r2, [pc, #144]	@ (8106ae0 <HAL_DMA_Abort_IT+0x3e8>)
 8106a50:	4293      	cmp	r3, r2
 8106a52:	d022      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 8106a54:	687b      	ldr	r3, [r7, #4]
 8106a56:	681b      	ldr	r3, [r3, #0]
 8106a58:	4a22      	ldr	r2, [pc, #136]	@ (8106ae4 <HAL_DMA_Abort_IT+0x3ec>)
 8106a5a:	4293      	cmp	r3, r2
 8106a5c:	d01d      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 8106a5e:	687b      	ldr	r3, [r7, #4]
 8106a60:	681b      	ldr	r3, [r3, #0]
 8106a62:	4a21      	ldr	r2, [pc, #132]	@ (8106ae8 <HAL_DMA_Abort_IT+0x3f0>)
 8106a64:	4293      	cmp	r3, r2
 8106a66:	d018      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 8106a68:	687b      	ldr	r3, [r7, #4]
 8106a6a:	681b      	ldr	r3, [r3, #0]
 8106a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8106aec <HAL_DMA_Abort_IT+0x3f4>)
 8106a6e:	4293      	cmp	r3, r2
 8106a70:	d013      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 8106a72:	687b      	ldr	r3, [r7, #4]
 8106a74:	681b      	ldr	r3, [r3, #0]
 8106a76:	4a1e      	ldr	r2, [pc, #120]	@ (8106af0 <HAL_DMA_Abort_IT+0x3f8>)
 8106a78:	4293      	cmp	r3, r2
 8106a7a:	d00e      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 8106a7c:	687b      	ldr	r3, [r7, #4]
 8106a7e:	681b      	ldr	r3, [r3, #0]
 8106a80:	4a1c      	ldr	r2, [pc, #112]	@ (8106af4 <HAL_DMA_Abort_IT+0x3fc>)
 8106a82:	4293      	cmp	r3, r2
 8106a84:	d009      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 8106a86:	687b      	ldr	r3, [r7, #4]
 8106a88:	681b      	ldr	r3, [r3, #0]
 8106a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8106af8 <HAL_DMA_Abort_IT+0x400>)
 8106a8c:	4293      	cmp	r3, r2
 8106a8e:	d004      	beq.n	8106a9a <HAL_DMA_Abort_IT+0x3a2>
 8106a90:	687b      	ldr	r3, [r7, #4]
 8106a92:	681b      	ldr	r3, [r3, #0]
 8106a94:	4a19      	ldr	r2, [pc, #100]	@ (8106afc <HAL_DMA_Abort_IT+0x404>)
 8106a96:	4293      	cmp	r3, r2
 8106a98:	d132      	bne.n	8106b00 <HAL_DMA_Abort_IT+0x408>
 8106a9a:	2301      	movs	r3, #1
 8106a9c:	e031      	b.n	8106b02 <HAL_DMA_Abort_IT+0x40a>
 8106a9e:	bf00      	nop
 8106aa0:	40020010 	.word	0x40020010
 8106aa4:	40020028 	.word	0x40020028
 8106aa8:	40020040 	.word	0x40020040
 8106aac:	40020058 	.word	0x40020058
 8106ab0:	40020070 	.word	0x40020070
 8106ab4:	40020088 	.word	0x40020088
 8106ab8:	400200a0 	.word	0x400200a0
 8106abc:	400200b8 	.word	0x400200b8
 8106ac0:	40020410 	.word	0x40020410
 8106ac4:	40020428 	.word	0x40020428
 8106ac8:	40020440 	.word	0x40020440
 8106acc:	40020458 	.word	0x40020458
 8106ad0:	40020470 	.word	0x40020470
 8106ad4:	40020488 	.word	0x40020488
 8106ad8:	400204a0 	.word	0x400204a0
 8106adc:	400204b8 	.word	0x400204b8
 8106ae0:	58025408 	.word	0x58025408
 8106ae4:	5802541c 	.word	0x5802541c
 8106ae8:	58025430 	.word	0x58025430
 8106aec:	58025444 	.word	0x58025444
 8106af0:	58025458 	.word	0x58025458
 8106af4:	5802546c 	.word	0x5802546c
 8106af8:	58025480 	.word	0x58025480
 8106afc:	58025494 	.word	0x58025494
 8106b00:	2300      	movs	r3, #0
 8106b02:	2b00      	cmp	r3, #0
 8106b04:	d028      	beq.n	8106b58 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8106b06:	687b      	ldr	r3, [r7, #4]
 8106b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106b0a:	681a      	ldr	r2, [r3, #0]
 8106b0c:	687b      	ldr	r3, [r7, #4]
 8106b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106b10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106b14:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8106b16:	687b      	ldr	r3, [r7, #4]
 8106b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106b1a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8106b1c:	687b      	ldr	r3, [r7, #4]
 8106b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106b20:	f003 031f 	and.w	r3, r3, #31
 8106b24:	2201      	movs	r2, #1
 8106b26:	409a      	lsls	r2, r3
 8106b28:	68fb      	ldr	r3, [r7, #12]
 8106b2a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8106b2c:	687b      	ldr	r3, [r7, #4]
 8106b2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106b30:	687a      	ldr	r2, [r7, #4]
 8106b32:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8106b34:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8106b36:	687b      	ldr	r3, [r7, #4]
 8106b38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106b3a:	2b00      	cmp	r3, #0
 8106b3c:	d00c      	beq.n	8106b58 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8106b3e:	687b      	ldr	r3, [r7, #4]
 8106b40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106b42:	681a      	ldr	r2, [r3, #0]
 8106b44:	687b      	ldr	r3, [r7, #4]
 8106b46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106b48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8106b4c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8106b4e:	687b      	ldr	r3, [r7, #4]
 8106b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106b52:	687a      	ldr	r2, [r7, #4]
 8106b54:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8106b56:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8106b58:	687b      	ldr	r3, [r7, #4]
 8106b5a:	2201      	movs	r2, #1
 8106b5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8106b60:	687b      	ldr	r3, [r7, #4]
 8106b62:	2200      	movs	r2, #0
 8106b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8106b68:	687b      	ldr	r3, [r7, #4]
 8106b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106b6c:	2b00      	cmp	r3, #0
 8106b6e:	d003      	beq.n	8106b78 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8106b70:	687b      	ldr	r3, [r7, #4]
 8106b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106b74:	6878      	ldr	r0, [r7, #4]
 8106b76:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8106b78:	2300      	movs	r3, #0
}
 8106b7a:	4618      	mov	r0, r3
 8106b7c:	3710      	adds	r7, #16
 8106b7e:	46bd      	mov	sp, r7
 8106b80:	bd80      	pop	{r7, pc}
 8106b82:	bf00      	nop

08106b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8106b84:	b480      	push	{r7}
 8106b86:	b089      	sub	sp, #36	@ 0x24
 8106b88:	af00      	add	r7, sp, #0
 8106b8a:	6078      	str	r0, [r7, #4]
 8106b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8106b8e:	2300      	movs	r3, #0
 8106b90:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8106b92:	4b89      	ldr	r3, [pc, #548]	@ (8106db8 <HAL_GPIO_Init+0x234>)
 8106b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106b96:	e194      	b.n	8106ec2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8106b98:	683b      	ldr	r3, [r7, #0]
 8106b9a:	681a      	ldr	r2, [r3, #0]
 8106b9c:	2101      	movs	r1, #1
 8106b9e:	69fb      	ldr	r3, [r7, #28]
 8106ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8106ba4:	4013      	ands	r3, r2
 8106ba6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8106ba8:	693b      	ldr	r3, [r7, #16]
 8106baa:	2b00      	cmp	r3, #0
 8106bac:	f000 8186 	beq.w	8106ebc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8106bb0:	683b      	ldr	r3, [r7, #0]
 8106bb2:	685b      	ldr	r3, [r3, #4]
 8106bb4:	f003 0303 	and.w	r3, r3, #3
 8106bb8:	2b01      	cmp	r3, #1
 8106bba:	d005      	beq.n	8106bc8 <HAL_GPIO_Init+0x44>
 8106bbc:	683b      	ldr	r3, [r7, #0]
 8106bbe:	685b      	ldr	r3, [r3, #4]
 8106bc0:	f003 0303 	and.w	r3, r3, #3
 8106bc4:	2b02      	cmp	r3, #2
 8106bc6:	d130      	bne.n	8106c2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8106bc8:	687b      	ldr	r3, [r7, #4]
 8106bca:	689b      	ldr	r3, [r3, #8]
 8106bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8106bce:	69fb      	ldr	r3, [r7, #28]
 8106bd0:	005b      	lsls	r3, r3, #1
 8106bd2:	2203      	movs	r2, #3
 8106bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8106bd8:	43db      	mvns	r3, r3
 8106bda:	69ba      	ldr	r2, [r7, #24]
 8106bdc:	4013      	ands	r3, r2
 8106bde:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8106be0:	683b      	ldr	r3, [r7, #0]
 8106be2:	68da      	ldr	r2, [r3, #12]
 8106be4:	69fb      	ldr	r3, [r7, #28]
 8106be6:	005b      	lsls	r3, r3, #1
 8106be8:	fa02 f303 	lsl.w	r3, r2, r3
 8106bec:	69ba      	ldr	r2, [r7, #24]
 8106bee:	4313      	orrs	r3, r2
 8106bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8106bf2:	687b      	ldr	r3, [r7, #4]
 8106bf4:	69ba      	ldr	r2, [r7, #24]
 8106bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8106bf8:	687b      	ldr	r3, [r7, #4]
 8106bfa:	685b      	ldr	r3, [r3, #4]
 8106bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8106bfe:	2201      	movs	r2, #1
 8106c00:	69fb      	ldr	r3, [r7, #28]
 8106c02:	fa02 f303 	lsl.w	r3, r2, r3
 8106c06:	43db      	mvns	r3, r3
 8106c08:	69ba      	ldr	r2, [r7, #24]
 8106c0a:	4013      	ands	r3, r2
 8106c0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8106c0e:	683b      	ldr	r3, [r7, #0]
 8106c10:	685b      	ldr	r3, [r3, #4]
 8106c12:	091b      	lsrs	r3, r3, #4
 8106c14:	f003 0201 	and.w	r2, r3, #1
 8106c18:	69fb      	ldr	r3, [r7, #28]
 8106c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8106c1e:	69ba      	ldr	r2, [r7, #24]
 8106c20:	4313      	orrs	r3, r2
 8106c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8106c24:	687b      	ldr	r3, [r7, #4]
 8106c26:	69ba      	ldr	r2, [r7, #24]
 8106c28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8106c2a:	683b      	ldr	r3, [r7, #0]
 8106c2c:	685b      	ldr	r3, [r3, #4]
 8106c2e:	f003 0303 	and.w	r3, r3, #3
 8106c32:	2b03      	cmp	r3, #3
 8106c34:	d017      	beq.n	8106c66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8106c36:	687b      	ldr	r3, [r7, #4]
 8106c38:	68db      	ldr	r3, [r3, #12]
 8106c3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8106c3c:	69fb      	ldr	r3, [r7, #28]
 8106c3e:	005b      	lsls	r3, r3, #1
 8106c40:	2203      	movs	r2, #3
 8106c42:	fa02 f303 	lsl.w	r3, r2, r3
 8106c46:	43db      	mvns	r3, r3
 8106c48:	69ba      	ldr	r2, [r7, #24]
 8106c4a:	4013      	ands	r3, r2
 8106c4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8106c4e:	683b      	ldr	r3, [r7, #0]
 8106c50:	689a      	ldr	r2, [r3, #8]
 8106c52:	69fb      	ldr	r3, [r7, #28]
 8106c54:	005b      	lsls	r3, r3, #1
 8106c56:	fa02 f303 	lsl.w	r3, r2, r3
 8106c5a:	69ba      	ldr	r2, [r7, #24]
 8106c5c:	4313      	orrs	r3, r2
 8106c5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8106c60:	687b      	ldr	r3, [r7, #4]
 8106c62:	69ba      	ldr	r2, [r7, #24]
 8106c64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8106c66:	683b      	ldr	r3, [r7, #0]
 8106c68:	685b      	ldr	r3, [r3, #4]
 8106c6a:	f003 0303 	and.w	r3, r3, #3
 8106c6e:	2b02      	cmp	r3, #2
 8106c70:	d123      	bne.n	8106cba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8106c72:	69fb      	ldr	r3, [r7, #28]
 8106c74:	08da      	lsrs	r2, r3, #3
 8106c76:	687b      	ldr	r3, [r7, #4]
 8106c78:	3208      	adds	r2, #8
 8106c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8106c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8106c80:	69fb      	ldr	r3, [r7, #28]
 8106c82:	f003 0307 	and.w	r3, r3, #7
 8106c86:	009b      	lsls	r3, r3, #2
 8106c88:	220f      	movs	r2, #15
 8106c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8106c8e:	43db      	mvns	r3, r3
 8106c90:	69ba      	ldr	r2, [r7, #24]
 8106c92:	4013      	ands	r3, r2
 8106c94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8106c96:	683b      	ldr	r3, [r7, #0]
 8106c98:	691a      	ldr	r2, [r3, #16]
 8106c9a:	69fb      	ldr	r3, [r7, #28]
 8106c9c:	f003 0307 	and.w	r3, r3, #7
 8106ca0:	009b      	lsls	r3, r3, #2
 8106ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8106ca6:	69ba      	ldr	r2, [r7, #24]
 8106ca8:	4313      	orrs	r3, r2
 8106caa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8106cac:	69fb      	ldr	r3, [r7, #28]
 8106cae:	08da      	lsrs	r2, r3, #3
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	3208      	adds	r2, #8
 8106cb4:	69b9      	ldr	r1, [r7, #24]
 8106cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8106cba:	687b      	ldr	r3, [r7, #4]
 8106cbc:	681b      	ldr	r3, [r3, #0]
 8106cbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8106cc0:	69fb      	ldr	r3, [r7, #28]
 8106cc2:	005b      	lsls	r3, r3, #1
 8106cc4:	2203      	movs	r2, #3
 8106cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8106cca:	43db      	mvns	r3, r3
 8106ccc:	69ba      	ldr	r2, [r7, #24]
 8106cce:	4013      	ands	r3, r2
 8106cd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8106cd2:	683b      	ldr	r3, [r7, #0]
 8106cd4:	685b      	ldr	r3, [r3, #4]
 8106cd6:	f003 0203 	and.w	r2, r3, #3
 8106cda:	69fb      	ldr	r3, [r7, #28]
 8106cdc:	005b      	lsls	r3, r3, #1
 8106cde:	fa02 f303 	lsl.w	r3, r2, r3
 8106ce2:	69ba      	ldr	r2, [r7, #24]
 8106ce4:	4313      	orrs	r3, r2
 8106ce6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	69ba      	ldr	r2, [r7, #24]
 8106cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8106cee:	683b      	ldr	r3, [r7, #0]
 8106cf0:	685b      	ldr	r3, [r3, #4]
 8106cf2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8106cf6:	2b00      	cmp	r3, #0
 8106cf8:	f000 80e0 	beq.w	8106ebc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8106cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8106dbc <HAL_GPIO_Init+0x238>)
 8106cfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106d02:	4a2e      	ldr	r2, [pc, #184]	@ (8106dbc <HAL_GPIO_Init+0x238>)
 8106d04:	f043 0302 	orr.w	r3, r3, #2
 8106d08:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8106d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8106dbc <HAL_GPIO_Init+0x238>)
 8106d0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106d12:	f003 0302 	and.w	r3, r3, #2
 8106d16:	60fb      	str	r3, [r7, #12]
 8106d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8106d1a:	4a29      	ldr	r2, [pc, #164]	@ (8106dc0 <HAL_GPIO_Init+0x23c>)
 8106d1c:	69fb      	ldr	r3, [r7, #28]
 8106d1e:	089b      	lsrs	r3, r3, #2
 8106d20:	3302      	adds	r3, #2
 8106d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8106d28:	69fb      	ldr	r3, [r7, #28]
 8106d2a:	f003 0303 	and.w	r3, r3, #3
 8106d2e:	009b      	lsls	r3, r3, #2
 8106d30:	220f      	movs	r2, #15
 8106d32:	fa02 f303 	lsl.w	r3, r2, r3
 8106d36:	43db      	mvns	r3, r3
 8106d38:	69ba      	ldr	r2, [r7, #24]
 8106d3a:	4013      	ands	r3, r2
 8106d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8106d3e:	687b      	ldr	r3, [r7, #4]
 8106d40:	4a20      	ldr	r2, [pc, #128]	@ (8106dc4 <HAL_GPIO_Init+0x240>)
 8106d42:	4293      	cmp	r3, r2
 8106d44:	d052      	beq.n	8106dec <HAL_GPIO_Init+0x268>
 8106d46:	687b      	ldr	r3, [r7, #4]
 8106d48:	4a1f      	ldr	r2, [pc, #124]	@ (8106dc8 <HAL_GPIO_Init+0x244>)
 8106d4a:	4293      	cmp	r3, r2
 8106d4c:	d031      	beq.n	8106db2 <HAL_GPIO_Init+0x22e>
 8106d4e:	687b      	ldr	r3, [r7, #4]
 8106d50:	4a1e      	ldr	r2, [pc, #120]	@ (8106dcc <HAL_GPIO_Init+0x248>)
 8106d52:	4293      	cmp	r3, r2
 8106d54:	d02b      	beq.n	8106dae <HAL_GPIO_Init+0x22a>
 8106d56:	687b      	ldr	r3, [r7, #4]
 8106d58:	4a1d      	ldr	r2, [pc, #116]	@ (8106dd0 <HAL_GPIO_Init+0x24c>)
 8106d5a:	4293      	cmp	r3, r2
 8106d5c:	d025      	beq.n	8106daa <HAL_GPIO_Init+0x226>
 8106d5e:	687b      	ldr	r3, [r7, #4]
 8106d60:	4a1c      	ldr	r2, [pc, #112]	@ (8106dd4 <HAL_GPIO_Init+0x250>)
 8106d62:	4293      	cmp	r3, r2
 8106d64:	d01f      	beq.n	8106da6 <HAL_GPIO_Init+0x222>
 8106d66:	687b      	ldr	r3, [r7, #4]
 8106d68:	4a1b      	ldr	r2, [pc, #108]	@ (8106dd8 <HAL_GPIO_Init+0x254>)
 8106d6a:	4293      	cmp	r3, r2
 8106d6c:	d019      	beq.n	8106da2 <HAL_GPIO_Init+0x21e>
 8106d6e:	687b      	ldr	r3, [r7, #4]
 8106d70:	4a1a      	ldr	r2, [pc, #104]	@ (8106ddc <HAL_GPIO_Init+0x258>)
 8106d72:	4293      	cmp	r3, r2
 8106d74:	d013      	beq.n	8106d9e <HAL_GPIO_Init+0x21a>
 8106d76:	687b      	ldr	r3, [r7, #4]
 8106d78:	4a19      	ldr	r2, [pc, #100]	@ (8106de0 <HAL_GPIO_Init+0x25c>)
 8106d7a:	4293      	cmp	r3, r2
 8106d7c:	d00d      	beq.n	8106d9a <HAL_GPIO_Init+0x216>
 8106d7e:	687b      	ldr	r3, [r7, #4]
 8106d80:	4a18      	ldr	r2, [pc, #96]	@ (8106de4 <HAL_GPIO_Init+0x260>)
 8106d82:	4293      	cmp	r3, r2
 8106d84:	d007      	beq.n	8106d96 <HAL_GPIO_Init+0x212>
 8106d86:	687b      	ldr	r3, [r7, #4]
 8106d88:	4a17      	ldr	r2, [pc, #92]	@ (8106de8 <HAL_GPIO_Init+0x264>)
 8106d8a:	4293      	cmp	r3, r2
 8106d8c:	d101      	bne.n	8106d92 <HAL_GPIO_Init+0x20e>
 8106d8e:	2309      	movs	r3, #9
 8106d90:	e02d      	b.n	8106dee <HAL_GPIO_Init+0x26a>
 8106d92:	230a      	movs	r3, #10
 8106d94:	e02b      	b.n	8106dee <HAL_GPIO_Init+0x26a>
 8106d96:	2308      	movs	r3, #8
 8106d98:	e029      	b.n	8106dee <HAL_GPIO_Init+0x26a>
 8106d9a:	2307      	movs	r3, #7
 8106d9c:	e027      	b.n	8106dee <HAL_GPIO_Init+0x26a>
 8106d9e:	2306      	movs	r3, #6
 8106da0:	e025      	b.n	8106dee <HAL_GPIO_Init+0x26a>
 8106da2:	2305      	movs	r3, #5
 8106da4:	e023      	b.n	8106dee <HAL_GPIO_Init+0x26a>
 8106da6:	2304      	movs	r3, #4
 8106da8:	e021      	b.n	8106dee <HAL_GPIO_Init+0x26a>
 8106daa:	2303      	movs	r3, #3
 8106dac:	e01f      	b.n	8106dee <HAL_GPIO_Init+0x26a>
 8106dae:	2302      	movs	r3, #2
 8106db0:	e01d      	b.n	8106dee <HAL_GPIO_Init+0x26a>
 8106db2:	2301      	movs	r3, #1
 8106db4:	e01b      	b.n	8106dee <HAL_GPIO_Init+0x26a>
 8106db6:	bf00      	nop
 8106db8:	580000c0 	.word	0x580000c0
 8106dbc:	58024400 	.word	0x58024400
 8106dc0:	58000400 	.word	0x58000400
 8106dc4:	58020000 	.word	0x58020000
 8106dc8:	58020400 	.word	0x58020400
 8106dcc:	58020800 	.word	0x58020800
 8106dd0:	58020c00 	.word	0x58020c00
 8106dd4:	58021000 	.word	0x58021000
 8106dd8:	58021400 	.word	0x58021400
 8106ddc:	58021800 	.word	0x58021800
 8106de0:	58021c00 	.word	0x58021c00
 8106de4:	58022000 	.word	0x58022000
 8106de8:	58022400 	.word	0x58022400
 8106dec:	2300      	movs	r3, #0
 8106dee:	69fa      	ldr	r2, [r7, #28]
 8106df0:	f002 0203 	and.w	r2, r2, #3
 8106df4:	0092      	lsls	r2, r2, #2
 8106df6:	4093      	lsls	r3, r2
 8106df8:	69ba      	ldr	r2, [r7, #24]
 8106dfa:	4313      	orrs	r3, r2
 8106dfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8106dfe:	4938      	ldr	r1, [pc, #224]	@ (8106ee0 <HAL_GPIO_Init+0x35c>)
 8106e00:	69fb      	ldr	r3, [r7, #28]
 8106e02:	089b      	lsrs	r3, r3, #2
 8106e04:	3302      	adds	r3, #2
 8106e06:	69ba      	ldr	r2, [r7, #24]
 8106e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8106e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8106e10:	681b      	ldr	r3, [r3, #0]
 8106e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106e14:	693b      	ldr	r3, [r7, #16]
 8106e16:	43db      	mvns	r3, r3
 8106e18:	69ba      	ldr	r2, [r7, #24]
 8106e1a:	4013      	ands	r3, r2
 8106e1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8106e1e:	683b      	ldr	r3, [r7, #0]
 8106e20:	685b      	ldr	r3, [r3, #4]
 8106e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8106e26:	2b00      	cmp	r3, #0
 8106e28:	d003      	beq.n	8106e32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8106e2a:	69ba      	ldr	r2, [r7, #24]
 8106e2c:	693b      	ldr	r3, [r7, #16]
 8106e2e:	4313      	orrs	r3, r2
 8106e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8106e32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8106e36:	69bb      	ldr	r3, [r7, #24]
 8106e38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8106e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8106e3e:	685b      	ldr	r3, [r3, #4]
 8106e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106e42:	693b      	ldr	r3, [r7, #16]
 8106e44:	43db      	mvns	r3, r3
 8106e46:	69ba      	ldr	r2, [r7, #24]
 8106e48:	4013      	ands	r3, r2
 8106e4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8106e4c:	683b      	ldr	r3, [r7, #0]
 8106e4e:	685b      	ldr	r3, [r3, #4]
 8106e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8106e54:	2b00      	cmp	r3, #0
 8106e56:	d003      	beq.n	8106e60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8106e58:	69ba      	ldr	r2, [r7, #24]
 8106e5a:	693b      	ldr	r3, [r7, #16]
 8106e5c:	4313      	orrs	r3, r2
 8106e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8106e60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8106e64:	69bb      	ldr	r3, [r7, #24]
 8106e66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8106e68:	697b      	ldr	r3, [r7, #20]
 8106e6a:	685b      	ldr	r3, [r3, #4]
 8106e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106e6e:	693b      	ldr	r3, [r7, #16]
 8106e70:	43db      	mvns	r3, r3
 8106e72:	69ba      	ldr	r2, [r7, #24]
 8106e74:	4013      	ands	r3, r2
 8106e76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8106e78:	683b      	ldr	r3, [r7, #0]
 8106e7a:	685b      	ldr	r3, [r3, #4]
 8106e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106e80:	2b00      	cmp	r3, #0
 8106e82:	d003      	beq.n	8106e8c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8106e84:	69ba      	ldr	r2, [r7, #24]
 8106e86:	693b      	ldr	r3, [r7, #16]
 8106e88:	4313      	orrs	r3, r2
 8106e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8106e8c:	697b      	ldr	r3, [r7, #20]
 8106e8e:	69ba      	ldr	r2, [r7, #24]
 8106e90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8106e92:	697b      	ldr	r3, [r7, #20]
 8106e94:	681b      	ldr	r3, [r3, #0]
 8106e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106e98:	693b      	ldr	r3, [r7, #16]
 8106e9a:	43db      	mvns	r3, r3
 8106e9c:	69ba      	ldr	r2, [r7, #24]
 8106e9e:	4013      	ands	r3, r2
 8106ea0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8106ea2:	683b      	ldr	r3, [r7, #0]
 8106ea4:	685b      	ldr	r3, [r3, #4]
 8106ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8106eaa:	2b00      	cmp	r3, #0
 8106eac:	d003      	beq.n	8106eb6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8106eae:	69ba      	ldr	r2, [r7, #24]
 8106eb0:	693b      	ldr	r3, [r7, #16]
 8106eb2:	4313      	orrs	r3, r2
 8106eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8106eb6:	697b      	ldr	r3, [r7, #20]
 8106eb8:	69ba      	ldr	r2, [r7, #24]
 8106eba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8106ebc:	69fb      	ldr	r3, [r7, #28]
 8106ebe:	3301      	adds	r3, #1
 8106ec0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106ec2:	683b      	ldr	r3, [r7, #0]
 8106ec4:	681a      	ldr	r2, [r3, #0]
 8106ec6:	69fb      	ldr	r3, [r7, #28]
 8106ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8106ecc:	2b00      	cmp	r3, #0
 8106ece:	f47f ae63 	bne.w	8106b98 <HAL_GPIO_Init+0x14>
  }
}
 8106ed2:	bf00      	nop
 8106ed4:	bf00      	nop
 8106ed6:	3724      	adds	r7, #36	@ 0x24
 8106ed8:	46bd      	mov	sp, r7
 8106eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ede:	4770      	bx	lr
 8106ee0:	58000400 	.word	0x58000400

08106ee4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8106ee4:	b480      	push	{r7}
 8106ee6:	b085      	sub	sp, #20
 8106ee8:	af00      	add	r7, sp, #0
 8106eea:	6078      	str	r0, [r7, #4]
 8106eec:	460b      	mov	r3, r1
 8106eee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8106ef0:	687b      	ldr	r3, [r7, #4]
 8106ef2:	695b      	ldr	r3, [r3, #20]
 8106ef4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8106ef6:	887a      	ldrh	r2, [r7, #2]
 8106ef8:	68fb      	ldr	r3, [r7, #12]
 8106efa:	4013      	ands	r3, r2
 8106efc:	041a      	lsls	r2, r3, #16
 8106efe:	68fb      	ldr	r3, [r7, #12]
 8106f00:	43d9      	mvns	r1, r3
 8106f02:	887b      	ldrh	r3, [r7, #2]
 8106f04:	400b      	ands	r3, r1
 8106f06:	431a      	orrs	r2, r3
 8106f08:	687b      	ldr	r3, [r7, #4]
 8106f0a:	619a      	str	r2, [r3, #24]
}
 8106f0c:	bf00      	nop
 8106f0e:	3714      	adds	r7, #20
 8106f10:	46bd      	mov	sp, r7
 8106f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f16:	4770      	bx	lr

08106f18 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8106f18:	b480      	push	{r7}
 8106f1a:	b083      	sub	sp, #12
 8106f1c:	af00      	add	r7, sp, #0
 8106f1e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8106f20:	4b05      	ldr	r3, [pc, #20]	@ (8106f38 <HAL_HSEM_ActivateNotification+0x20>)
 8106f22:	681a      	ldr	r2, [r3, #0]
 8106f24:	4904      	ldr	r1, [pc, #16]	@ (8106f38 <HAL_HSEM_ActivateNotification+0x20>)
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	4313      	orrs	r3, r2
 8106f2a:	600b      	str	r3, [r1, #0]
#endif
}
 8106f2c:	bf00      	nop
 8106f2e:	370c      	adds	r7, #12
 8106f30:	46bd      	mov	sp, r7
 8106f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f36:	4770      	bx	lr
 8106f38:	58026510 	.word	0x58026510

08106f3c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8106f3c:	b580      	push	{r7, lr}
 8106f3e:	b084      	sub	sp, #16
 8106f40:	af00      	add	r7, sp, #0
 8106f42:	60f8      	str	r0, [r7, #12]
 8106f44:	460b      	mov	r3, r1
 8106f46:	607a      	str	r2, [r7, #4]
 8106f48:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8106f4a:	4b37      	ldr	r3, [pc, #220]	@ (8107028 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106f4c:	681b      	ldr	r3, [r3, #0]
 8106f4e:	f023 0201 	bic.w	r2, r3, #1
 8106f52:	4935      	ldr	r1, [pc, #212]	@ (8107028 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106f54:	68fb      	ldr	r3, [r7, #12]
 8106f56:	4313      	orrs	r3, r2
 8106f58:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8106f5a:	687b      	ldr	r3, [r7, #4]
 8106f5c:	2b00      	cmp	r3, #0
 8106f5e:	d123      	bne.n	8106fa8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8106f60:	f7ff f89a 	bl	8106098 <HAL_GetCurrentCPUID>
 8106f64:	4603      	mov	r3, r0
 8106f66:	2b03      	cmp	r3, #3
 8106f68:	d158      	bne.n	810701c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8106f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8107028 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106f6c:	691b      	ldr	r3, [r3, #16]
 8106f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8107028 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106f70:	f023 0301 	bic.w	r3, r3, #1
 8106f74:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106f76:	4b2d      	ldr	r3, [pc, #180]	@ (810702c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106f78:	691b      	ldr	r3, [r3, #16]
 8106f7a:	4a2c      	ldr	r2, [pc, #176]	@ (810702c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106f7c:	f043 0304 	orr.w	r3, r3, #4
 8106f80:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8106f82:	f3bf 8f4f 	dsb	sy
}
 8106f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8106f88:	f3bf 8f6f 	isb	sy
}
 8106f8c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106f8e:	7afb      	ldrb	r3, [r7, #11]
 8106f90:	2b01      	cmp	r3, #1
 8106f92:	d101      	bne.n	8106f98 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106f94:	bf30      	wfi
 8106f96:	e000      	b.n	8106f9a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106f98:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106f9a:	4b24      	ldr	r3, [pc, #144]	@ (810702c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106f9c:	691b      	ldr	r3, [r3, #16]
 8106f9e:	4a23      	ldr	r2, [pc, #140]	@ (810702c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106fa0:	f023 0304 	bic.w	r3, r3, #4
 8106fa4:	6113      	str	r3, [r2, #16]
 8106fa6:	e03c      	b.n	8107022 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8106fa8:	687b      	ldr	r3, [r7, #4]
 8106faa:	2b01      	cmp	r3, #1
 8106fac:	d123      	bne.n	8106ff6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8106fae:	f7ff f873 	bl	8106098 <HAL_GetCurrentCPUID>
 8106fb2:	4603      	mov	r3, r0
 8106fb4:	2b01      	cmp	r3, #1
 8106fb6:	d133      	bne.n	8107020 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8106fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8107028 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106fba:	695b      	ldr	r3, [r3, #20]
 8106fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8107028 <HAL_PWREx_EnterSTOPMode+0xec>)
 8106fbe:	f023 0302 	bic.w	r3, r3, #2
 8106fc2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106fc4:	4b19      	ldr	r3, [pc, #100]	@ (810702c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106fc6:	691b      	ldr	r3, [r3, #16]
 8106fc8:	4a18      	ldr	r2, [pc, #96]	@ (810702c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106fca:	f043 0304 	orr.w	r3, r3, #4
 8106fce:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8106fd0:	f3bf 8f4f 	dsb	sy
}
 8106fd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8106fd6:	f3bf 8f6f 	isb	sy
}
 8106fda:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106fdc:	7afb      	ldrb	r3, [r7, #11]
 8106fde:	2b01      	cmp	r3, #1
 8106fe0:	d101      	bne.n	8106fe6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106fe2:	bf30      	wfi
 8106fe4:	e000      	b.n	8106fe8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8106fe6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106fe8:	4b10      	ldr	r3, [pc, #64]	@ (810702c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106fea:	691b      	ldr	r3, [r3, #16]
 8106fec:	4a0f      	ldr	r2, [pc, #60]	@ (810702c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106fee:	f023 0304 	bic.w	r3, r3, #4
 8106ff2:	6113      	str	r3, [r2, #16]
 8106ff4:	e015      	b.n	8107022 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8106ff6:	f7ff f84f 	bl	8106098 <HAL_GetCurrentCPUID>
 8106ffa:	4603      	mov	r3, r0
 8106ffc:	2b03      	cmp	r3, #3
 8106ffe:	d106      	bne.n	810700e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8107000:	4b09      	ldr	r3, [pc, #36]	@ (8107028 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107002:	691b      	ldr	r3, [r3, #16]
 8107004:	4a08      	ldr	r2, [pc, #32]	@ (8107028 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107006:	f023 0304 	bic.w	r3, r3, #4
 810700a:	6113      	str	r3, [r2, #16]
 810700c:	e009      	b.n	8107022 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810700e:	4b06      	ldr	r3, [pc, #24]	@ (8107028 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107010:	695b      	ldr	r3, [r3, #20]
 8107012:	4a05      	ldr	r2, [pc, #20]	@ (8107028 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107014:	f023 0304 	bic.w	r3, r3, #4
 8107018:	6153      	str	r3, [r2, #20]
 810701a:	e002      	b.n	8107022 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810701c:	bf00      	nop
 810701e:	e000      	b.n	8107022 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8107020:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8107022:	3710      	adds	r7, #16
 8107024:	46bd      	mov	sp, r7
 8107026:	bd80      	pop	{r7, pc}
 8107028:	58024800 	.word	0x58024800
 810702c:	e000ed00 	.word	0xe000ed00

08107030 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8107030:	b580      	push	{r7, lr}
 8107032:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8107034:	f7ff f830 	bl	8106098 <HAL_GetCurrentCPUID>
 8107038:	4603      	mov	r3, r0
 810703a:	2b03      	cmp	r3, #3
 810703c:	d101      	bne.n	8107042 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810703e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8107040:	e001      	b.n	8107046 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8107042:	bf40      	sev
    __WFE ();
 8107044:	bf20      	wfe
}
 8107046:	bf00      	nop
 8107048:	bd80      	pop	{r7, pc}
	...

0810704c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810704c:	b480      	push	{r7}
 810704e:	b089      	sub	sp, #36	@ 0x24
 8107050:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8107052:	4bb3      	ldr	r3, [pc, #716]	@ (8107320 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107054:	691b      	ldr	r3, [r3, #16]
 8107056:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810705a:	2b18      	cmp	r3, #24
 810705c:	f200 8155 	bhi.w	810730a <HAL_RCC_GetSysClockFreq+0x2be>
 8107060:	a201      	add	r2, pc, #4	@ (adr r2, 8107068 <HAL_RCC_GetSysClockFreq+0x1c>)
 8107062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107066:	bf00      	nop
 8107068:	081070cd 	.word	0x081070cd
 810706c:	0810730b 	.word	0x0810730b
 8107070:	0810730b 	.word	0x0810730b
 8107074:	0810730b 	.word	0x0810730b
 8107078:	0810730b 	.word	0x0810730b
 810707c:	0810730b 	.word	0x0810730b
 8107080:	0810730b 	.word	0x0810730b
 8107084:	0810730b 	.word	0x0810730b
 8107088:	081070f3 	.word	0x081070f3
 810708c:	0810730b 	.word	0x0810730b
 8107090:	0810730b 	.word	0x0810730b
 8107094:	0810730b 	.word	0x0810730b
 8107098:	0810730b 	.word	0x0810730b
 810709c:	0810730b 	.word	0x0810730b
 81070a0:	0810730b 	.word	0x0810730b
 81070a4:	0810730b 	.word	0x0810730b
 81070a8:	081070f9 	.word	0x081070f9
 81070ac:	0810730b 	.word	0x0810730b
 81070b0:	0810730b 	.word	0x0810730b
 81070b4:	0810730b 	.word	0x0810730b
 81070b8:	0810730b 	.word	0x0810730b
 81070bc:	0810730b 	.word	0x0810730b
 81070c0:	0810730b 	.word	0x0810730b
 81070c4:	0810730b 	.word	0x0810730b
 81070c8:	081070ff 	.word	0x081070ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81070cc:	4b94      	ldr	r3, [pc, #592]	@ (8107320 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81070ce:	681b      	ldr	r3, [r3, #0]
 81070d0:	f003 0320 	and.w	r3, r3, #32
 81070d4:	2b00      	cmp	r3, #0
 81070d6:	d009      	beq.n	81070ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81070d8:	4b91      	ldr	r3, [pc, #580]	@ (8107320 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81070da:	681b      	ldr	r3, [r3, #0]
 81070dc:	08db      	lsrs	r3, r3, #3
 81070de:	f003 0303 	and.w	r3, r3, #3
 81070e2:	4a90      	ldr	r2, [pc, #576]	@ (8107324 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81070e4:	fa22 f303 	lsr.w	r3, r2, r3
 81070e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81070ea:	e111      	b.n	8107310 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81070ec:	4b8d      	ldr	r3, [pc, #564]	@ (8107324 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81070ee:	61bb      	str	r3, [r7, #24]
      break;
 81070f0:	e10e      	b.n	8107310 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81070f2:	4b8d      	ldr	r3, [pc, #564]	@ (8107328 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81070f4:	61bb      	str	r3, [r7, #24]
      break;
 81070f6:	e10b      	b.n	8107310 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81070f8:	4b8c      	ldr	r3, [pc, #560]	@ (810732c <HAL_RCC_GetSysClockFreq+0x2e0>)
 81070fa:	61bb      	str	r3, [r7, #24]
      break;
 81070fc:	e108      	b.n	8107310 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81070fe:	4b88      	ldr	r3, [pc, #544]	@ (8107320 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107102:	f003 0303 	and.w	r3, r3, #3
 8107106:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8107108:	4b85      	ldr	r3, [pc, #532]	@ (8107320 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810710a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810710c:	091b      	lsrs	r3, r3, #4
 810710e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107112:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8107114:	4b82      	ldr	r3, [pc, #520]	@ (8107320 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107118:	f003 0301 	and.w	r3, r3, #1
 810711c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810711e:	4b80      	ldr	r3, [pc, #512]	@ (8107320 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107122:	08db      	lsrs	r3, r3, #3
 8107124:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107128:	68fa      	ldr	r2, [r7, #12]
 810712a:	fb02 f303 	mul.w	r3, r2, r3
 810712e:	ee07 3a90 	vmov	s15, r3
 8107132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107136:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810713a:	693b      	ldr	r3, [r7, #16]
 810713c:	2b00      	cmp	r3, #0
 810713e:	f000 80e1 	beq.w	8107304 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8107142:	697b      	ldr	r3, [r7, #20]
 8107144:	2b02      	cmp	r3, #2
 8107146:	f000 8083 	beq.w	8107250 <HAL_RCC_GetSysClockFreq+0x204>
 810714a:	697b      	ldr	r3, [r7, #20]
 810714c:	2b02      	cmp	r3, #2
 810714e:	f200 80a1 	bhi.w	8107294 <HAL_RCC_GetSysClockFreq+0x248>
 8107152:	697b      	ldr	r3, [r7, #20]
 8107154:	2b00      	cmp	r3, #0
 8107156:	d003      	beq.n	8107160 <HAL_RCC_GetSysClockFreq+0x114>
 8107158:	697b      	ldr	r3, [r7, #20]
 810715a:	2b01      	cmp	r3, #1
 810715c:	d056      	beq.n	810720c <HAL_RCC_GetSysClockFreq+0x1c0>
 810715e:	e099      	b.n	8107294 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107160:	4b6f      	ldr	r3, [pc, #444]	@ (8107320 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107162:	681b      	ldr	r3, [r3, #0]
 8107164:	f003 0320 	and.w	r3, r3, #32
 8107168:	2b00      	cmp	r3, #0
 810716a:	d02d      	beq.n	81071c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810716c:	4b6c      	ldr	r3, [pc, #432]	@ (8107320 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810716e:	681b      	ldr	r3, [r3, #0]
 8107170:	08db      	lsrs	r3, r3, #3
 8107172:	f003 0303 	and.w	r3, r3, #3
 8107176:	4a6b      	ldr	r2, [pc, #428]	@ (8107324 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8107178:	fa22 f303 	lsr.w	r3, r2, r3
 810717c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810717e:	687b      	ldr	r3, [r7, #4]
 8107180:	ee07 3a90 	vmov	s15, r3
 8107184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107188:	693b      	ldr	r3, [r7, #16]
 810718a:	ee07 3a90 	vmov	s15, r3
 810718e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107196:	4b62      	ldr	r3, [pc, #392]	@ (8107320 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810719a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810719e:	ee07 3a90 	vmov	s15, r3
 81071a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81071a6:	ed97 6a02 	vldr	s12, [r7, #8]
 81071aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8107330 <HAL_RCC_GetSysClockFreq+0x2e4>
 81071ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81071b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81071b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81071ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81071be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81071c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81071c6:	e087      	b.n	81072d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81071c8:	693b      	ldr	r3, [r7, #16]
 81071ca:	ee07 3a90 	vmov	s15, r3
 81071ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81071d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8107334 <HAL_RCC_GetSysClockFreq+0x2e8>
 81071d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81071da:	4b51      	ldr	r3, [pc, #324]	@ (8107320 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81071dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81071de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81071e2:	ee07 3a90 	vmov	s15, r3
 81071e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81071ea:	ed97 6a02 	vldr	s12, [r7, #8]
 81071ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8107330 <HAL_RCC_GetSysClockFreq+0x2e4>
 81071f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81071f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81071fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81071fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107206:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810720a:	e065      	b.n	81072d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810720c:	693b      	ldr	r3, [r7, #16]
 810720e:	ee07 3a90 	vmov	s15, r3
 8107212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107216:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8107338 <HAL_RCC_GetSysClockFreq+0x2ec>
 810721a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810721e:	4b40      	ldr	r3, [pc, #256]	@ (8107320 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107226:	ee07 3a90 	vmov	s15, r3
 810722a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810722e:	ed97 6a02 	vldr	s12, [r7, #8]
 8107232:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8107330 <HAL_RCC_GetSysClockFreq+0x2e4>
 8107236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810723a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810723e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107246:	ee67 7a27 	vmul.f32	s15, s14, s15
 810724a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810724e:	e043      	b.n	81072d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107250:	693b      	ldr	r3, [r7, #16]
 8107252:	ee07 3a90 	vmov	s15, r3
 8107256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810725a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810733c <HAL_RCC_GetSysClockFreq+0x2f0>
 810725e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107262:	4b2f      	ldr	r3, [pc, #188]	@ (8107320 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810726a:	ee07 3a90 	vmov	s15, r3
 810726e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107272:	ed97 6a02 	vldr	s12, [r7, #8]
 8107276:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8107330 <HAL_RCC_GetSysClockFreq+0x2e4>
 810727a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810727e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810728a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810728e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8107292:	e021      	b.n	81072d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107294:	693b      	ldr	r3, [r7, #16]
 8107296:	ee07 3a90 	vmov	s15, r3
 810729a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810729e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8107338 <HAL_RCC_GetSysClockFreq+0x2ec>
 81072a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81072a6:	4b1e      	ldr	r3, [pc, #120]	@ (8107320 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81072a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81072aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81072ae:	ee07 3a90 	vmov	s15, r3
 81072b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81072b6:	ed97 6a02 	vldr	s12, [r7, #8]
 81072ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8107330 <HAL_RCC_GetSysClockFreq+0x2e4>
 81072be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81072c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81072c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81072ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81072ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81072d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81072d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81072d8:	4b11      	ldr	r3, [pc, #68]	@ (8107320 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81072da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81072dc:	0a5b      	lsrs	r3, r3, #9
 81072de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81072e2:	3301      	adds	r3, #1
 81072e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81072e6:	683b      	ldr	r3, [r7, #0]
 81072e8:	ee07 3a90 	vmov	s15, r3
 81072ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81072f0:	edd7 6a07 	vldr	s13, [r7, #28]
 81072f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81072f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81072fc:	ee17 3a90 	vmov	r3, s15
 8107300:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8107302:	e005      	b.n	8107310 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8107304:	2300      	movs	r3, #0
 8107306:	61bb      	str	r3, [r7, #24]
      break;
 8107308:	e002      	b.n	8107310 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810730a:	4b07      	ldr	r3, [pc, #28]	@ (8107328 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810730c:	61bb      	str	r3, [r7, #24]
      break;
 810730e:	bf00      	nop
  }

  return sysclockfreq;
 8107310:	69bb      	ldr	r3, [r7, #24]
}
 8107312:	4618      	mov	r0, r3
 8107314:	3724      	adds	r7, #36	@ 0x24
 8107316:	46bd      	mov	sp, r7
 8107318:	f85d 7b04 	ldr.w	r7, [sp], #4
 810731c:	4770      	bx	lr
 810731e:	bf00      	nop
 8107320:	58024400 	.word	0x58024400
 8107324:	03d09000 	.word	0x03d09000
 8107328:	003d0900 	.word	0x003d0900
 810732c:	017d7840 	.word	0x017d7840
 8107330:	46000000 	.word	0x46000000
 8107334:	4c742400 	.word	0x4c742400
 8107338:	4a742400 	.word	0x4a742400
 810733c:	4bbebc20 	.word	0x4bbebc20

08107340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8107340:	b580      	push	{r7, lr}
 8107342:	b082      	sub	sp, #8
 8107344:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8107346:	f7ff fe81 	bl	810704c <HAL_RCC_GetSysClockFreq>
 810734a:	4602      	mov	r2, r0
 810734c:	4b11      	ldr	r3, [pc, #68]	@ (8107394 <HAL_RCC_GetHCLKFreq+0x54>)
 810734e:	699b      	ldr	r3, [r3, #24]
 8107350:	0a1b      	lsrs	r3, r3, #8
 8107352:	f003 030f 	and.w	r3, r3, #15
 8107356:	4910      	ldr	r1, [pc, #64]	@ (8107398 <HAL_RCC_GetHCLKFreq+0x58>)
 8107358:	5ccb      	ldrb	r3, [r1, r3]
 810735a:	f003 031f 	and.w	r3, r3, #31
 810735e:	fa22 f303 	lsr.w	r3, r2, r3
 8107362:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8107364:	4b0b      	ldr	r3, [pc, #44]	@ (8107394 <HAL_RCC_GetHCLKFreq+0x54>)
 8107366:	699b      	ldr	r3, [r3, #24]
 8107368:	f003 030f 	and.w	r3, r3, #15
 810736c:	4a0a      	ldr	r2, [pc, #40]	@ (8107398 <HAL_RCC_GetHCLKFreq+0x58>)
 810736e:	5cd3      	ldrb	r3, [r2, r3]
 8107370:	f003 031f 	and.w	r3, r3, #31
 8107374:	687a      	ldr	r2, [r7, #4]
 8107376:	fa22 f303 	lsr.w	r3, r2, r3
 810737a:	4a08      	ldr	r2, [pc, #32]	@ (810739c <HAL_RCC_GetHCLKFreq+0x5c>)
 810737c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810737e:	4b07      	ldr	r3, [pc, #28]	@ (810739c <HAL_RCC_GetHCLKFreq+0x5c>)
 8107380:	681b      	ldr	r3, [r3, #0]
 8107382:	4a07      	ldr	r2, [pc, #28]	@ (81073a0 <HAL_RCC_GetHCLKFreq+0x60>)
 8107384:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8107386:	4b05      	ldr	r3, [pc, #20]	@ (810739c <HAL_RCC_GetHCLKFreq+0x5c>)
 8107388:	681b      	ldr	r3, [r3, #0]
}
 810738a:	4618      	mov	r0, r3
 810738c:	3708      	adds	r7, #8
 810738e:	46bd      	mov	sp, r7
 8107390:	bd80      	pop	{r7, pc}
 8107392:	bf00      	nop
 8107394:	58024400 	.word	0x58024400
 8107398:	08112f54 	.word	0x08112f54
 810739c:	10000004 	.word	0x10000004
 81073a0:	10000000 	.word	0x10000000

081073a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81073a4:	b580      	push	{r7, lr}
 81073a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81073a8:	f7ff ffca 	bl	8107340 <HAL_RCC_GetHCLKFreq>
 81073ac:	4602      	mov	r2, r0
 81073ae:	4b06      	ldr	r3, [pc, #24]	@ (81073c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 81073b0:	69db      	ldr	r3, [r3, #28]
 81073b2:	091b      	lsrs	r3, r3, #4
 81073b4:	f003 0307 	and.w	r3, r3, #7
 81073b8:	4904      	ldr	r1, [pc, #16]	@ (81073cc <HAL_RCC_GetPCLK1Freq+0x28>)
 81073ba:	5ccb      	ldrb	r3, [r1, r3]
 81073bc:	f003 031f 	and.w	r3, r3, #31
 81073c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81073c4:	4618      	mov	r0, r3
 81073c6:	bd80      	pop	{r7, pc}
 81073c8:	58024400 	.word	0x58024400
 81073cc:	08112f54 	.word	0x08112f54

081073d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81073d0:	b580      	push	{r7, lr}
 81073d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81073d4:	f7ff ffb4 	bl	8107340 <HAL_RCC_GetHCLKFreq>
 81073d8:	4602      	mov	r2, r0
 81073da:	4b06      	ldr	r3, [pc, #24]	@ (81073f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 81073dc:	69db      	ldr	r3, [r3, #28]
 81073de:	0a1b      	lsrs	r3, r3, #8
 81073e0:	f003 0307 	and.w	r3, r3, #7
 81073e4:	4904      	ldr	r1, [pc, #16]	@ (81073f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 81073e6:	5ccb      	ldrb	r3, [r1, r3]
 81073e8:	f003 031f 	and.w	r3, r3, #31
 81073ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81073f0:	4618      	mov	r0, r3
 81073f2:	bd80      	pop	{r7, pc}
 81073f4:	58024400 	.word	0x58024400
 81073f8:	08112f54 	.word	0x08112f54

081073fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81073fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8107400:	b0ca      	sub	sp, #296	@ 0x128
 8107402:	af00      	add	r7, sp, #0
 8107404:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8107408:	2300      	movs	r3, #0
 810740a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810740e:	2300      	movs	r3, #0
 8107410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8107414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107418:	e9d3 2300 	ldrd	r2, r3, [r3]
 810741c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8107420:	2500      	movs	r5, #0
 8107422:	ea54 0305 	orrs.w	r3, r4, r5
 8107426:	d049      	beq.n	81074bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8107428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810742c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810742e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107432:	d02f      	beq.n	8107494 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8107434:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8107438:	d828      	bhi.n	810748c <HAL_RCCEx_PeriphCLKConfig+0x90>
 810743a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810743e:	d01a      	beq.n	8107476 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8107440:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107444:	d822      	bhi.n	810748c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8107446:	2b00      	cmp	r3, #0
 8107448:	d003      	beq.n	8107452 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810744a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810744e:	d007      	beq.n	8107460 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8107450:	e01c      	b.n	810748c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107452:	4bb8      	ldr	r3, [pc, #736]	@ (8107734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107456:	4ab7      	ldr	r2, [pc, #732]	@ (8107734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810745c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810745e:	e01a      	b.n	8107496 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107464:	3308      	adds	r3, #8
 8107466:	2102      	movs	r1, #2
 8107468:	4618      	mov	r0, r3
 810746a:	f001 fc8f 	bl	8108d8c <RCCEx_PLL2_Config>
 810746e:	4603      	mov	r3, r0
 8107470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8107474:	e00f      	b.n	8107496 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810747a:	3328      	adds	r3, #40	@ 0x28
 810747c:	2102      	movs	r1, #2
 810747e:	4618      	mov	r0, r3
 8107480:	f001 fd36 	bl	8108ef0 <RCCEx_PLL3_Config>
 8107484:	4603      	mov	r3, r0
 8107486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810748a:	e004      	b.n	8107496 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810748c:	2301      	movs	r3, #1
 810748e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107492:	e000      	b.n	8107496 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8107494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810749a:	2b00      	cmp	r3, #0
 810749c:	d10a      	bne.n	81074b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810749e:	4ba5      	ldr	r3, [pc, #660]	@ (8107734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81074a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81074a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81074a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81074ac:	4aa1      	ldr	r2, [pc, #644]	@ (8107734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81074ae:	430b      	orrs	r3, r1
 81074b0:	6513      	str	r3, [r2, #80]	@ 0x50
 81074b2:	e003      	b.n	81074bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81074b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81074b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81074bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81074c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 81074c8:	f04f 0900 	mov.w	r9, #0
 81074cc:	ea58 0309 	orrs.w	r3, r8, r9
 81074d0:	d047      	beq.n	8107562 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81074d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81074d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81074d8:	2b04      	cmp	r3, #4
 81074da:	d82a      	bhi.n	8107532 <HAL_RCCEx_PeriphCLKConfig+0x136>
 81074dc:	a201      	add	r2, pc, #4	@ (adr r2, 81074e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81074de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81074e2:	bf00      	nop
 81074e4:	081074f9 	.word	0x081074f9
 81074e8:	08107507 	.word	0x08107507
 81074ec:	0810751d 	.word	0x0810751d
 81074f0:	0810753b 	.word	0x0810753b
 81074f4:	0810753b 	.word	0x0810753b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81074f8:	4b8e      	ldr	r3, [pc, #568]	@ (8107734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81074fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81074fc:	4a8d      	ldr	r2, [pc, #564]	@ (8107734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81074fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107502:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107504:	e01a      	b.n	810753c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810750a:	3308      	adds	r3, #8
 810750c:	2100      	movs	r1, #0
 810750e:	4618      	mov	r0, r3
 8107510:	f001 fc3c 	bl	8108d8c <RCCEx_PLL2_Config>
 8107514:	4603      	mov	r3, r0
 8107516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810751a:	e00f      	b.n	810753c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810751c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107520:	3328      	adds	r3, #40	@ 0x28
 8107522:	2100      	movs	r1, #0
 8107524:	4618      	mov	r0, r3
 8107526:	f001 fce3 	bl	8108ef0 <RCCEx_PLL3_Config>
 810752a:	4603      	mov	r3, r0
 810752c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107530:	e004      	b.n	810753c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107532:	2301      	movs	r3, #1
 8107534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107538:	e000      	b.n	810753c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810753a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810753c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107540:	2b00      	cmp	r3, #0
 8107542:	d10a      	bne.n	810755a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8107544:	4b7b      	ldr	r3, [pc, #492]	@ (8107734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107548:	f023 0107 	bic.w	r1, r3, #7
 810754c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107552:	4a78      	ldr	r2, [pc, #480]	@ (8107734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107554:	430b      	orrs	r3, r1
 8107556:	6513      	str	r3, [r2, #80]	@ 0x50
 8107558:	e003      	b.n	8107562 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810755a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810755e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8107562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107566:	e9d3 2300 	ldrd	r2, r3, [r3]
 810756a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810756e:	f04f 0b00 	mov.w	fp, #0
 8107572:	ea5a 030b 	orrs.w	r3, sl, fp
 8107576:	d04c      	beq.n	8107612 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8107578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810757c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810757e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107582:	d030      	beq.n	81075e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8107584:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107588:	d829      	bhi.n	81075de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810758a:	2bc0      	cmp	r3, #192	@ 0xc0
 810758c:	d02d      	beq.n	81075ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810758e:	2bc0      	cmp	r3, #192	@ 0xc0
 8107590:	d825      	bhi.n	81075de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8107592:	2b80      	cmp	r3, #128	@ 0x80
 8107594:	d018      	beq.n	81075c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8107596:	2b80      	cmp	r3, #128	@ 0x80
 8107598:	d821      	bhi.n	81075de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810759a:	2b00      	cmp	r3, #0
 810759c:	d002      	beq.n	81075a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810759e:	2b40      	cmp	r3, #64	@ 0x40
 81075a0:	d007      	beq.n	81075b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81075a2:	e01c      	b.n	81075de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81075a4:	4b63      	ldr	r3, [pc, #396]	@ (8107734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81075a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81075a8:	4a62      	ldr	r2, [pc, #392]	@ (8107734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81075aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81075ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81075b0:	e01c      	b.n	81075ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81075b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075b6:	3308      	adds	r3, #8
 81075b8:	2100      	movs	r1, #0
 81075ba:	4618      	mov	r0, r3
 81075bc:	f001 fbe6 	bl	8108d8c <RCCEx_PLL2_Config>
 81075c0:	4603      	mov	r3, r0
 81075c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81075c6:	e011      	b.n	81075ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81075c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81075cc:	3328      	adds	r3, #40	@ 0x28
 81075ce:	2100      	movs	r1, #0
 81075d0:	4618      	mov	r0, r3
 81075d2:	f001 fc8d 	bl	8108ef0 <RCCEx_PLL3_Config>
 81075d6:	4603      	mov	r3, r0
 81075d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81075dc:	e006      	b.n	81075ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81075de:	2301      	movs	r3, #1
 81075e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81075e4:	e002      	b.n	81075ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81075e6:	bf00      	nop
 81075e8:	e000      	b.n	81075ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81075ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 81075ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81075f0:	2b00      	cmp	r3, #0
 81075f2:	d10a      	bne.n	810760a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81075f4:	4b4f      	ldr	r3, [pc, #316]	@ (8107734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81075f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81075f8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 81075fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8107602:	4a4c      	ldr	r2, [pc, #304]	@ (8107734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107604:	430b      	orrs	r3, r1
 8107606:	6513      	str	r3, [r2, #80]	@ 0x50
 8107608:	e003      	b.n	8107612 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810760a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810760e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8107612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107616:	e9d3 2300 	ldrd	r2, r3, [r3]
 810761a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810761e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8107622:	2300      	movs	r3, #0
 8107624:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8107628:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810762c:	460b      	mov	r3, r1
 810762e:	4313      	orrs	r3, r2
 8107630:	d053      	beq.n	81076da <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8107632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107636:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810763a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810763e:	d035      	beq.n	81076ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8107640:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107644:	d82e      	bhi.n	81076a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8107646:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810764a:	d031      	beq.n	81076b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810764c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107650:	d828      	bhi.n	81076a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8107652:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107656:	d01a      	beq.n	810768e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8107658:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810765c:	d822      	bhi.n	81076a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810765e:	2b00      	cmp	r3, #0
 8107660:	d003      	beq.n	810766a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8107662:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107666:	d007      	beq.n	8107678 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8107668:	e01c      	b.n	81076a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810766a:	4b32      	ldr	r3, [pc, #200]	@ (8107734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810766c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810766e:	4a31      	ldr	r2, [pc, #196]	@ (8107734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107674:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107676:	e01c      	b.n	81076b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810767c:	3308      	adds	r3, #8
 810767e:	2100      	movs	r1, #0
 8107680:	4618      	mov	r0, r3
 8107682:	f001 fb83 	bl	8108d8c <RCCEx_PLL2_Config>
 8107686:	4603      	mov	r3, r0
 8107688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810768c:	e011      	b.n	81076b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810768e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107692:	3328      	adds	r3, #40	@ 0x28
 8107694:	2100      	movs	r1, #0
 8107696:	4618      	mov	r0, r3
 8107698:	f001 fc2a 	bl	8108ef0 <RCCEx_PLL3_Config>
 810769c:	4603      	mov	r3, r0
 810769e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81076a2:	e006      	b.n	81076b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81076a4:	2301      	movs	r3, #1
 81076a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81076aa:	e002      	b.n	81076b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81076ac:	bf00      	nop
 81076ae:	e000      	b.n	81076b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81076b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81076b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81076b6:	2b00      	cmp	r3, #0
 81076b8:	d10b      	bne.n	81076d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81076ba:	4b1e      	ldr	r3, [pc, #120]	@ (8107734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81076bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81076be:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 81076c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81076ca:	4a1a      	ldr	r2, [pc, #104]	@ (8107734 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81076cc:	430b      	orrs	r3, r1
 81076ce:	6593      	str	r3, [r2, #88]	@ 0x58
 81076d0:	e003      	b.n	81076da <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81076d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81076d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81076da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81076e2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 81076e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 81076ea:	2300      	movs	r3, #0
 81076ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 81076f0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 81076f4:	460b      	mov	r3, r1
 81076f6:	4313      	orrs	r3, r2
 81076f8:	d056      	beq.n	81077a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81076fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81076fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8107702:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107706:	d038      	beq.n	810777a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8107708:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810770c:	d831      	bhi.n	8107772 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810770e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107712:	d034      	beq.n	810777e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8107714:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107718:	d82b      	bhi.n	8107772 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810771a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810771e:	d01d      	beq.n	810775c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8107720:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107724:	d825      	bhi.n	8107772 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8107726:	2b00      	cmp	r3, #0
 8107728:	d006      	beq.n	8107738 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810772a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810772e:	d00a      	beq.n	8107746 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8107730:	e01f      	b.n	8107772 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8107732:	bf00      	nop
 8107734:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107738:	4ba2      	ldr	r3, [pc, #648]	@ (81079c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810773a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810773c:	4aa1      	ldr	r2, [pc, #644]	@ (81079c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810773e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107744:	e01c      	b.n	8107780 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810774a:	3308      	adds	r3, #8
 810774c:	2100      	movs	r1, #0
 810774e:	4618      	mov	r0, r3
 8107750:	f001 fb1c 	bl	8108d8c <RCCEx_PLL2_Config>
 8107754:	4603      	mov	r3, r0
 8107756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810775a:	e011      	b.n	8107780 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810775c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107760:	3328      	adds	r3, #40	@ 0x28
 8107762:	2100      	movs	r1, #0
 8107764:	4618      	mov	r0, r3
 8107766:	f001 fbc3 	bl	8108ef0 <RCCEx_PLL3_Config>
 810776a:	4603      	mov	r3, r0
 810776c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107770:	e006      	b.n	8107780 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8107772:	2301      	movs	r3, #1
 8107774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107778:	e002      	b.n	8107780 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810777a:	bf00      	nop
 810777c:	e000      	b.n	8107780 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810777e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107784:	2b00      	cmp	r3, #0
 8107786:	d10b      	bne.n	81077a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8107788:	4b8e      	ldr	r3, [pc, #568]	@ (81079c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810778a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810778c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8107790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107794:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8107798:	4a8a      	ldr	r2, [pc, #552]	@ (81079c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810779a:	430b      	orrs	r3, r1
 810779c:	6593      	str	r3, [r2, #88]	@ 0x58
 810779e:	e003      	b.n	81077a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81077a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81077a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81077a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81077b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 81077b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 81077b8:	2300      	movs	r3, #0
 81077ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 81077be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 81077c2:	460b      	mov	r3, r1
 81077c4:	4313      	orrs	r3, r2
 81077c6:	d03a      	beq.n	810783e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81077c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81077ce:	2b30      	cmp	r3, #48	@ 0x30
 81077d0:	d01f      	beq.n	8107812 <HAL_RCCEx_PeriphCLKConfig+0x416>
 81077d2:	2b30      	cmp	r3, #48	@ 0x30
 81077d4:	d819      	bhi.n	810780a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81077d6:	2b20      	cmp	r3, #32
 81077d8:	d00c      	beq.n	81077f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81077da:	2b20      	cmp	r3, #32
 81077dc:	d815      	bhi.n	810780a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81077de:	2b00      	cmp	r3, #0
 81077e0:	d019      	beq.n	8107816 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 81077e2:	2b10      	cmp	r3, #16
 81077e4:	d111      	bne.n	810780a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81077e6:	4b77      	ldr	r3, [pc, #476]	@ (81079c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81077e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81077ea:	4a76      	ldr	r2, [pc, #472]	@ (81079c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81077ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81077f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81077f2:	e011      	b.n	8107818 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81077f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81077f8:	3308      	adds	r3, #8
 81077fa:	2102      	movs	r1, #2
 81077fc:	4618      	mov	r0, r3
 81077fe:	f001 fac5 	bl	8108d8c <RCCEx_PLL2_Config>
 8107802:	4603      	mov	r3, r0
 8107804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8107808:	e006      	b.n	8107818 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810780a:	2301      	movs	r3, #1
 810780c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107810:	e002      	b.n	8107818 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8107812:	bf00      	nop
 8107814:	e000      	b.n	8107818 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8107816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810781c:	2b00      	cmp	r3, #0
 810781e:	d10a      	bne.n	8107836 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8107820:	4b68      	ldr	r3, [pc, #416]	@ (81079c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107824:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8107828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810782c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810782e:	4a65      	ldr	r2, [pc, #404]	@ (81079c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107830:	430b      	orrs	r3, r1
 8107832:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8107834:	e003      	b.n	810783e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810783a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810783e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107846:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810784a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810784e:	2300      	movs	r3, #0
 8107850:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8107854:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8107858:	460b      	mov	r3, r1
 810785a:	4313      	orrs	r3, r2
 810785c:	d051      	beq.n	8107902 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810785e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8107864:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107868:	d035      	beq.n	81078d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810786a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810786e:	d82e      	bhi.n	81078ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8107870:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8107874:	d031      	beq.n	81078da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8107876:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810787a:	d828      	bhi.n	81078ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810787c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107880:	d01a      	beq.n	81078b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8107882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107886:	d822      	bhi.n	81078ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8107888:	2b00      	cmp	r3, #0
 810788a:	d003      	beq.n	8107894 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810788c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107890:	d007      	beq.n	81078a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8107892:	e01c      	b.n	81078ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107894:	4b4b      	ldr	r3, [pc, #300]	@ (81079c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107898:	4a4a      	ldr	r2, [pc, #296]	@ (81079c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810789a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810789e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81078a0:	e01c      	b.n	81078dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81078a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078a6:	3308      	adds	r3, #8
 81078a8:	2100      	movs	r1, #0
 81078aa:	4618      	mov	r0, r3
 81078ac:	f001 fa6e 	bl	8108d8c <RCCEx_PLL2_Config>
 81078b0:	4603      	mov	r3, r0
 81078b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81078b6:	e011      	b.n	81078dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81078b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078bc:	3328      	adds	r3, #40	@ 0x28
 81078be:	2100      	movs	r1, #0
 81078c0:	4618      	mov	r0, r3
 81078c2:	f001 fb15 	bl	8108ef0 <RCCEx_PLL3_Config>
 81078c6:	4603      	mov	r3, r0
 81078c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81078cc:	e006      	b.n	81078dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81078ce:	2301      	movs	r3, #1
 81078d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81078d4:	e002      	b.n	81078dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81078d6:	bf00      	nop
 81078d8:	e000      	b.n	81078dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81078da:	bf00      	nop
    }

    if (ret == HAL_OK)
 81078dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81078e0:	2b00      	cmp	r3, #0
 81078e2:	d10a      	bne.n	81078fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81078e4:	4b37      	ldr	r3, [pc, #220]	@ (81079c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81078e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81078e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 81078ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81078f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81078f2:	4a34      	ldr	r2, [pc, #208]	@ (81079c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81078f4:	430b      	orrs	r3, r1
 81078f6:	6513      	str	r3, [r2, #80]	@ 0x50
 81078f8:	e003      	b.n	8107902 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81078fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81078fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8107902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107906:	e9d3 2300 	ldrd	r2, r3, [r3]
 810790a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810790e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8107912:	2300      	movs	r3, #0
 8107914:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8107918:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810791c:	460b      	mov	r3, r1
 810791e:	4313      	orrs	r3, r2
 8107920:	d056      	beq.n	81079d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8107922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107928:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810792c:	d033      	beq.n	8107996 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810792e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8107932:	d82c      	bhi.n	810798e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107934:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8107938:	d02f      	beq.n	810799a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810793a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810793e:	d826      	bhi.n	810798e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107940:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8107944:	d02b      	beq.n	810799e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8107946:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810794a:	d820      	bhi.n	810798e <HAL_RCCEx_PeriphCLKConfig+0x592>
 810794c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107950:	d012      	beq.n	8107978 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8107952:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107956:	d81a      	bhi.n	810798e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107958:	2b00      	cmp	r3, #0
 810795a:	d022      	beq.n	81079a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810795c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107960:	d115      	bne.n	810798e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107966:	3308      	adds	r3, #8
 8107968:	2101      	movs	r1, #1
 810796a:	4618      	mov	r0, r3
 810796c:	f001 fa0e 	bl	8108d8c <RCCEx_PLL2_Config>
 8107970:	4603      	mov	r3, r0
 8107972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8107976:	e015      	b.n	81079a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810797c:	3328      	adds	r3, #40	@ 0x28
 810797e:	2101      	movs	r1, #1
 8107980:	4618      	mov	r0, r3
 8107982:	f001 fab5 	bl	8108ef0 <RCCEx_PLL3_Config>
 8107986:	4603      	mov	r3, r0
 8107988:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810798c:	e00a      	b.n	81079a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810798e:	2301      	movs	r3, #1
 8107990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107994:	e006      	b.n	81079a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8107996:	bf00      	nop
 8107998:	e004      	b.n	81079a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810799a:	bf00      	nop
 810799c:	e002      	b.n	81079a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810799e:	bf00      	nop
 81079a0:	e000      	b.n	81079a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81079a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81079a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81079a8:	2b00      	cmp	r3, #0
 81079aa:	d10d      	bne.n	81079c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81079ac:	4b05      	ldr	r3, [pc, #20]	@ (81079c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81079ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81079b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81079b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81079ba:	4a02      	ldr	r2, [pc, #8]	@ (81079c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81079bc:	430b      	orrs	r3, r1
 81079be:	6513      	str	r3, [r2, #80]	@ 0x50
 81079c0:	e006      	b.n	81079d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81079c2:	bf00      	nop
 81079c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81079c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81079cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81079d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81079d8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 81079dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 81079e0:	2300      	movs	r3, #0
 81079e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 81079e6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 81079ea:	460b      	mov	r3, r1
 81079ec:	4313      	orrs	r3, r2
 81079ee:	d055      	beq.n	8107a9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81079f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81079f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81079f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81079fc:	d033      	beq.n	8107a66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81079fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107a02:	d82c      	bhi.n	8107a5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8107a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107a08:	d02f      	beq.n	8107a6a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8107a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107a0e:	d826      	bhi.n	8107a5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8107a10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107a14:	d02b      	beq.n	8107a6e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8107a16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107a1a:	d820      	bhi.n	8107a5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8107a1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107a20:	d012      	beq.n	8107a48 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8107a22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107a26:	d81a      	bhi.n	8107a5e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8107a28:	2b00      	cmp	r3, #0
 8107a2a:	d022      	beq.n	8107a72 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8107a2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107a30:	d115      	bne.n	8107a5e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a36:	3308      	adds	r3, #8
 8107a38:	2101      	movs	r1, #1
 8107a3a:	4618      	mov	r0, r3
 8107a3c:	f001 f9a6 	bl	8108d8c <RCCEx_PLL2_Config>
 8107a40:	4603      	mov	r3, r0
 8107a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8107a46:	e015      	b.n	8107a74 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a4c:	3328      	adds	r3, #40	@ 0x28
 8107a4e:	2101      	movs	r1, #1
 8107a50:	4618      	mov	r0, r3
 8107a52:	f001 fa4d 	bl	8108ef0 <RCCEx_PLL3_Config>
 8107a56:	4603      	mov	r3, r0
 8107a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8107a5c:	e00a      	b.n	8107a74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8107a5e:	2301      	movs	r3, #1
 8107a60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107a64:	e006      	b.n	8107a74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8107a66:	bf00      	nop
 8107a68:	e004      	b.n	8107a74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8107a6a:	bf00      	nop
 8107a6c:	e002      	b.n	8107a74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8107a6e:	bf00      	nop
 8107a70:	e000      	b.n	8107a74 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8107a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107a74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107a78:	2b00      	cmp	r3, #0
 8107a7a:	d10b      	bne.n	8107a94 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8107a7c:	4ba4      	ldr	r3, [pc, #656]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107a80:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8107a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107a88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8107a8c:	4aa0      	ldr	r2, [pc, #640]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107a8e:	430b      	orrs	r3, r1
 8107a90:	6593      	str	r3, [r2, #88]	@ 0x58
 8107a92:	e003      	b.n	8107a9c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107a94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107a98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8107a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107aa4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8107aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8107aac:	2300      	movs	r3, #0
 8107aae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8107ab2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8107ab6:	460b      	mov	r3, r1
 8107ab8:	4313      	orrs	r3, r2
 8107aba:	d037      	beq.n	8107b2c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8107abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107ac2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107ac6:	d00e      	beq.n	8107ae6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8107ac8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107acc:	d816      	bhi.n	8107afc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8107ace:	2b00      	cmp	r3, #0
 8107ad0:	d018      	beq.n	8107b04 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8107ad2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107ad6:	d111      	bne.n	8107afc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107ad8:	4b8d      	ldr	r3, [pc, #564]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107adc:	4a8c      	ldr	r2, [pc, #560]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8107ae4:	e00f      	b.n	8107b06 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107aea:	3308      	adds	r3, #8
 8107aec:	2101      	movs	r1, #1
 8107aee:	4618      	mov	r0, r3
 8107af0:	f001 f94c 	bl	8108d8c <RCCEx_PLL2_Config>
 8107af4:	4603      	mov	r3, r0
 8107af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8107afa:	e004      	b.n	8107b06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107afc:	2301      	movs	r3, #1
 8107afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107b02:	e000      	b.n	8107b06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8107b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107b0a:	2b00      	cmp	r3, #0
 8107b0c:	d10a      	bne.n	8107b24 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8107b0e:	4b80      	ldr	r3, [pc, #512]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107b12:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8107b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107b1c:	4a7c      	ldr	r2, [pc, #496]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107b1e:	430b      	orrs	r3, r1
 8107b20:	6513      	str	r3, [r2, #80]	@ 0x50
 8107b22:	e003      	b.n	8107b2c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107b28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8107b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107b34:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8107b38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8107b3c:	2300      	movs	r3, #0
 8107b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8107b42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8107b46:	460b      	mov	r3, r1
 8107b48:	4313      	orrs	r3, r2
 8107b4a:	d039      	beq.n	8107bc0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8107b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8107b52:	2b03      	cmp	r3, #3
 8107b54:	d81c      	bhi.n	8107b90 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8107b56:	a201      	add	r2, pc, #4	@ (adr r2, 8107b5c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8107b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107b5c:	08107b99 	.word	0x08107b99
 8107b60:	08107b6d 	.word	0x08107b6d
 8107b64:	08107b7b 	.word	0x08107b7b
 8107b68:	08107b99 	.word	0x08107b99
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107b6c:	4b68      	ldr	r3, [pc, #416]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107b70:	4a67      	ldr	r2, [pc, #412]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107b72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107b76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8107b78:	e00f      	b.n	8107b9a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107b7e:	3308      	adds	r3, #8
 8107b80:	2102      	movs	r1, #2
 8107b82:	4618      	mov	r0, r3
 8107b84:	f001 f902 	bl	8108d8c <RCCEx_PLL2_Config>
 8107b88:	4603      	mov	r3, r0
 8107b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8107b8e:	e004      	b.n	8107b9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8107b90:	2301      	movs	r3, #1
 8107b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107b96:	e000      	b.n	8107b9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8107b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107b9e:	2b00      	cmp	r3, #0
 8107ba0:	d10a      	bne.n	8107bb8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8107ba2:	4b5b      	ldr	r3, [pc, #364]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107ba6:	f023 0103 	bic.w	r1, r3, #3
 8107baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8107bb0:	4a57      	ldr	r2, [pc, #348]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107bb2:	430b      	orrs	r3, r1
 8107bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8107bb6:	e003      	b.n	8107bc0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107bbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8107bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107bc8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8107bcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8107bd0:	2300      	movs	r3, #0
 8107bd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8107bd6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8107bda:	460b      	mov	r3, r1
 8107bdc:	4313      	orrs	r3, r2
 8107bde:	f000 809f 	beq.w	8107d20 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8107be2:	4b4c      	ldr	r3, [pc, #304]	@ (8107d14 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8107be4:	681b      	ldr	r3, [r3, #0]
 8107be6:	4a4b      	ldr	r2, [pc, #300]	@ (8107d14 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8107be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8107bec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8107bee:	f7fe f937 	bl	8105e60 <HAL_GetTick>
 8107bf2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8107bf6:	e00b      	b.n	8107c10 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8107bf8:	f7fe f932 	bl	8105e60 <HAL_GetTick>
 8107bfc:	4602      	mov	r2, r0
 8107bfe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8107c02:	1ad3      	subs	r3, r2, r3
 8107c04:	2b64      	cmp	r3, #100	@ 0x64
 8107c06:	d903      	bls.n	8107c10 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8107c08:	2303      	movs	r3, #3
 8107c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107c0e:	e005      	b.n	8107c1c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8107c10:	4b40      	ldr	r3, [pc, #256]	@ (8107d14 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8107c12:	681b      	ldr	r3, [r3, #0]
 8107c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107c18:	2b00      	cmp	r3, #0
 8107c1a:	d0ed      	beq.n	8107bf8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8107c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107c20:	2b00      	cmp	r3, #0
 8107c22:	d179      	bne.n	8107d18 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8107c24:	4b3a      	ldr	r3, [pc, #232]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107c26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8107c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8107c30:	4053      	eors	r3, r2
 8107c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8107c36:	2b00      	cmp	r3, #0
 8107c38:	d015      	beq.n	8107c66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8107c3a:	4b35      	ldr	r3, [pc, #212]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107c3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8107c42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8107c46:	4b32      	ldr	r3, [pc, #200]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107c4a:	4a31      	ldr	r2, [pc, #196]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8107c50:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8107c52:	4b2f      	ldr	r3, [pc, #188]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107c56:	4a2e      	ldr	r2, [pc, #184]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107c58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107c5c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8107c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107c60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107c64:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8107c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107c6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8107c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107c72:	d118      	bne.n	8107ca6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8107c74:	f7fe f8f4 	bl	8105e60 <HAL_GetTick>
 8107c78:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8107c7c:	e00d      	b.n	8107c9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8107c7e:	f7fe f8ef 	bl	8105e60 <HAL_GetTick>
 8107c82:	4602      	mov	r2, r0
 8107c84:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8107c88:	1ad2      	subs	r2, r2, r3
 8107c8a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8107c8e:	429a      	cmp	r2, r3
 8107c90:	d903      	bls.n	8107c9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8107c92:	2303      	movs	r3, #3
 8107c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8107c98:	e005      	b.n	8107ca6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8107c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8107c9e:	f003 0302 	and.w	r3, r3, #2
 8107ca2:	2b00      	cmp	r3, #0
 8107ca4:	d0eb      	beq.n	8107c7e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8107ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107caa:	2b00      	cmp	r3, #0
 8107cac:	d12b      	bne.n	8107d06 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8107cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107cb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8107cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8107cba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8107cbe:	d110      	bne.n	8107ce2 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8107cc0:	4b13      	ldr	r3, [pc, #76]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107cc2:	691b      	ldr	r3, [r3, #16]
 8107cc4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8107cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ccc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8107cd0:	091b      	lsrs	r3, r3, #4
 8107cd2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8107cd6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8107cda:	4a0d      	ldr	r2, [pc, #52]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107cdc:	430b      	orrs	r3, r1
 8107cde:	6113      	str	r3, [r2, #16]
 8107ce0:	e005      	b.n	8107cee <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8107ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107ce4:	691b      	ldr	r3, [r3, #16]
 8107ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107ce8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8107cec:	6113      	str	r3, [r2, #16]
 8107cee:	4b08      	ldr	r3, [pc, #32]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107cf0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8107cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107cf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8107cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8107cfe:	4a04      	ldr	r2, [pc, #16]	@ (8107d10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107d00:	430b      	orrs	r3, r1
 8107d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8107d04:	e00c      	b.n	8107d20 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8107d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8107d0e:	e007      	b.n	8107d20 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8107d10:	58024400 	.word	0x58024400
 8107d14:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107d1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8107d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107d28:	f002 0301 	and.w	r3, r2, #1
 8107d2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8107d30:	2300      	movs	r3, #0
 8107d32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8107d36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8107d3a:	460b      	mov	r3, r1
 8107d3c:	4313      	orrs	r3, r2
 8107d3e:	f000 8089 	beq.w	8107e54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8107d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107d46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8107d48:	2b28      	cmp	r3, #40	@ 0x28
 8107d4a:	d86b      	bhi.n	8107e24 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8107d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8107d54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8107d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107d52:	bf00      	nop
 8107d54:	08107e2d 	.word	0x08107e2d
 8107d58:	08107e25 	.word	0x08107e25
 8107d5c:	08107e25 	.word	0x08107e25
 8107d60:	08107e25 	.word	0x08107e25
 8107d64:	08107e25 	.word	0x08107e25
 8107d68:	08107e25 	.word	0x08107e25
 8107d6c:	08107e25 	.word	0x08107e25
 8107d70:	08107e25 	.word	0x08107e25
 8107d74:	08107df9 	.word	0x08107df9
 8107d78:	08107e25 	.word	0x08107e25
 8107d7c:	08107e25 	.word	0x08107e25
 8107d80:	08107e25 	.word	0x08107e25
 8107d84:	08107e25 	.word	0x08107e25
 8107d88:	08107e25 	.word	0x08107e25
 8107d8c:	08107e25 	.word	0x08107e25
 8107d90:	08107e25 	.word	0x08107e25
 8107d94:	08107e0f 	.word	0x08107e0f
 8107d98:	08107e25 	.word	0x08107e25
 8107d9c:	08107e25 	.word	0x08107e25
 8107da0:	08107e25 	.word	0x08107e25
 8107da4:	08107e25 	.word	0x08107e25
 8107da8:	08107e25 	.word	0x08107e25
 8107dac:	08107e25 	.word	0x08107e25
 8107db0:	08107e25 	.word	0x08107e25
 8107db4:	08107e2d 	.word	0x08107e2d
 8107db8:	08107e25 	.word	0x08107e25
 8107dbc:	08107e25 	.word	0x08107e25
 8107dc0:	08107e25 	.word	0x08107e25
 8107dc4:	08107e25 	.word	0x08107e25
 8107dc8:	08107e25 	.word	0x08107e25
 8107dcc:	08107e25 	.word	0x08107e25
 8107dd0:	08107e25 	.word	0x08107e25
 8107dd4:	08107e2d 	.word	0x08107e2d
 8107dd8:	08107e25 	.word	0x08107e25
 8107ddc:	08107e25 	.word	0x08107e25
 8107de0:	08107e25 	.word	0x08107e25
 8107de4:	08107e25 	.word	0x08107e25
 8107de8:	08107e25 	.word	0x08107e25
 8107dec:	08107e25 	.word	0x08107e25
 8107df0:	08107e25 	.word	0x08107e25
 8107df4:	08107e2d 	.word	0x08107e2d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107dfc:	3308      	adds	r3, #8
 8107dfe:	2101      	movs	r1, #1
 8107e00:	4618      	mov	r0, r3
 8107e02:	f000 ffc3 	bl	8108d8c <RCCEx_PLL2_Config>
 8107e06:	4603      	mov	r3, r0
 8107e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8107e0c:	e00f      	b.n	8107e2e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e12:	3328      	adds	r3, #40	@ 0x28
 8107e14:	2101      	movs	r1, #1
 8107e16:	4618      	mov	r0, r3
 8107e18:	f001 f86a 	bl	8108ef0 <RCCEx_PLL3_Config>
 8107e1c:	4603      	mov	r3, r0
 8107e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8107e22:	e004      	b.n	8107e2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107e24:	2301      	movs	r3, #1
 8107e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107e2a:	e000      	b.n	8107e2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8107e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107e32:	2b00      	cmp	r3, #0
 8107e34:	d10a      	bne.n	8107e4c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8107e36:	4bbf      	ldr	r3, [pc, #764]	@ (8108134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107e3a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8107e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8107e44:	4abb      	ldr	r2, [pc, #748]	@ (8108134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107e46:	430b      	orrs	r3, r1
 8107e48:	6553      	str	r3, [r2, #84]	@ 0x54
 8107e4a:	e003      	b.n	8107e54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107e50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8107e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107e5c:	f002 0302 	and.w	r3, r2, #2
 8107e60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8107e64:	2300      	movs	r3, #0
 8107e66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8107e6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8107e6e:	460b      	mov	r3, r1
 8107e70:	4313      	orrs	r3, r2
 8107e72:	d041      	beq.n	8107ef8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8107e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107e78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8107e7a:	2b05      	cmp	r3, #5
 8107e7c:	d824      	bhi.n	8107ec8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8107e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8107e84 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8107e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107e84:	08107ed1 	.word	0x08107ed1
 8107e88:	08107e9d 	.word	0x08107e9d
 8107e8c:	08107eb3 	.word	0x08107eb3
 8107e90:	08107ed1 	.word	0x08107ed1
 8107e94:	08107ed1 	.word	0x08107ed1
 8107e98:	08107ed1 	.word	0x08107ed1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ea0:	3308      	adds	r3, #8
 8107ea2:	2101      	movs	r1, #1
 8107ea4:	4618      	mov	r0, r3
 8107ea6:	f000 ff71 	bl	8108d8c <RCCEx_PLL2_Config>
 8107eaa:	4603      	mov	r3, r0
 8107eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8107eb0:	e00f      	b.n	8107ed2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107eb6:	3328      	adds	r3, #40	@ 0x28
 8107eb8:	2101      	movs	r1, #1
 8107eba:	4618      	mov	r0, r3
 8107ebc:	f001 f818 	bl	8108ef0 <RCCEx_PLL3_Config>
 8107ec0:	4603      	mov	r3, r0
 8107ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8107ec6:	e004      	b.n	8107ed2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107ec8:	2301      	movs	r3, #1
 8107eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107ece:	e000      	b.n	8107ed2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8107ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107ed6:	2b00      	cmp	r3, #0
 8107ed8:	d10a      	bne.n	8107ef0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8107eda:	4b96      	ldr	r3, [pc, #600]	@ (8108134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107ede:	f023 0107 	bic.w	r1, r3, #7
 8107ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107ee6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8107ee8:	4a92      	ldr	r2, [pc, #584]	@ (8108134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107eea:	430b      	orrs	r3, r1
 8107eec:	6553      	str	r3, [r2, #84]	@ 0x54
 8107eee:	e003      	b.n	8107ef8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107ef4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8107ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107f00:	f002 0304 	and.w	r3, r2, #4
 8107f04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8107f08:	2300      	movs	r3, #0
 8107f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8107f0e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8107f12:	460b      	mov	r3, r1
 8107f14:	4313      	orrs	r3, r2
 8107f16:	d044      	beq.n	8107fa2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8107f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8107f20:	2b05      	cmp	r3, #5
 8107f22:	d825      	bhi.n	8107f70 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8107f24:	a201      	add	r2, pc, #4	@ (adr r2, 8107f2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8107f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107f2a:	bf00      	nop
 8107f2c:	08107f79 	.word	0x08107f79
 8107f30:	08107f45 	.word	0x08107f45
 8107f34:	08107f5b 	.word	0x08107f5b
 8107f38:	08107f79 	.word	0x08107f79
 8107f3c:	08107f79 	.word	0x08107f79
 8107f40:	08107f79 	.word	0x08107f79
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f48:	3308      	adds	r3, #8
 8107f4a:	2101      	movs	r1, #1
 8107f4c:	4618      	mov	r0, r3
 8107f4e:	f000 ff1d 	bl	8108d8c <RCCEx_PLL2_Config>
 8107f52:	4603      	mov	r3, r0
 8107f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8107f58:	e00f      	b.n	8107f7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f5e:	3328      	adds	r3, #40	@ 0x28
 8107f60:	2101      	movs	r1, #1
 8107f62:	4618      	mov	r0, r3
 8107f64:	f000 ffc4 	bl	8108ef0 <RCCEx_PLL3_Config>
 8107f68:	4603      	mov	r3, r0
 8107f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8107f6e:	e004      	b.n	8107f7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107f70:	2301      	movs	r3, #1
 8107f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8107f76:	e000      	b.n	8107f7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8107f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107f7e:	2b00      	cmp	r3, #0
 8107f80:	d10b      	bne.n	8107f9a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8107f82:	4b6c      	ldr	r3, [pc, #432]	@ (8108134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107f86:	f023 0107 	bic.w	r1, r3, #7
 8107f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8107f92:	4a68      	ldr	r2, [pc, #416]	@ (8108134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107f94:	430b      	orrs	r3, r1
 8107f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8107f98:	e003      	b.n	8107fa2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107f9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8107fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107faa:	f002 0320 	and.w	r3, r2, #32
 8107fae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8107fb2:	2300      	movs	r3, #0
 8107fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8107fb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8107fbc:	460b      	mov	r3, r1
 8107fbe:	4313      	orrs	r3, r2
 8107fc0:	d055      	beq.n	810806e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8107fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8107fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8107fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107fce:	d033      	beq.n	8108038 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8107fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107fd4:	d82c      	bhi.n	8108030 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107fda:	d02f      	beq.n	810803c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8107fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107fe0:	d826      	bhi.n	8108030 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107fe2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107fe6:	d02b      	beq.n	8108040 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8107fe8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107fec:	d820      	bhi.n	8108030 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107ff2:	d012      	beq.n	810801a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8107ff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107ff8:	d81a      	bhi.n	8108030 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8107ffa:	2b00      	cmp	r3, #0
 8107ffc:	d022      	beq.n	8108044 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8107ffe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108002:	d115      	bne.n	8108030 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108008:	3308      	adds	r3, #8
 810800a:	2100      	movs	r1, #0
 810800c:	4618      	mov	r0, r3
 810800e:	f000 febd 	bl	8108d8c <RCCEx_PLL2_Config>
 8108012:	4603      	mov	r3, r0
 8108014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8108018:	e015      	b.n	8108046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810801a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810801e:	3328      	adds	r3, #40	@ 0x28
 8108020:	2102      	movs	r1, #2
 8108022:	4618      	mov	r0, r3
 8108024:	f000 ff64 	bl	8108ef0 <RCCEx_PLL3_Config>
 8108028:	4603      	mov	r3, r0
 810802a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810802e:	e00a      	b.n	8108046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108030:	2301      	movs	r3, #1
 8108032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108036:	e006      	b.n	8108046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108038:	bf00      	nop
 810803a:	e004      	b.n	8108046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810803c:	bf00      	nop
 810803e:	e002      	b.n	8108046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108040:	bf00      	nop
 8108042:	e000      	b.n	8108046 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810804a:	2b00      	cmp	r3, #0
 810804c:	d10b      	bne.n	8108066 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810804e:	4b39      	ldr	r3, [pc, #228]	@ (8108134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108052:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8108056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810805a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810805e:	4a35      	ldr	r2, [pc, #212]	@ (8108134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108060:	430b      	orrs	r3, r1
 8108062:	6553      	str	r3, [r2, #84]	@ 0x54
 8108064:	e003      	b.n	810806e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810806a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810806e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108076:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810807a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 810807e:	2300      	movs	r3, #0
 8108080:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8108084:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8108088:	460b      	mov	r3, r1
 810808a:	4313      	orrs	r3, r2
 810808c:	d058      	beq.n	8108140 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810808e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108092:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8108096:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810809a:	d033      	beq.n	8108104 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 810809c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81080a0:	d82c      	bhi.n	81080fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81080a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81080a6:	d02f      	beq.n	8108108 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 81080a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81080ac:	d826      	bhi.n	81080fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81080ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81080b2:	d02b      	beq.n	810810c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 81080b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81080b8:	d820      	bhi.n	81080fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81080ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81080be:	d012      	beq.n	81080e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81080c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81080c4:	d81a      	bhi.n	81080fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81080c6:	2b00      	cmp	r3, #0
 81080c8:	d022      	beq.n	8108110 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81080ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81080ce:	d115      	bne.n	81080fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81080d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080d4:	3308      	adds	r3, #8
 81080d6:	2100      	movs	r1, #0
 81080d8:	4618      	mov	r0, r3
 81080da:	f000 fe57 	bl	8108d8c <RCCEx_PLL2_Config>
 81080de:	4603      	mov	r3, r0
 81080e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81080e4:	e015      	b.n	8108112 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81080e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81080ea:	3328      	adds	r3, #40	@ 0x28
 81080ec:	2102      	movs	r1, #2
 81080ee:	4618      	mov	r0, r3
 81080f0:	f000 fefe 	bl	8108ef0 <RCCEx_PLL3_Config>
 81080f4:	4603      	mov	r3, r0
 81080f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81080fa:	e00a      	b.n	8108112 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81080fc:	2301      	movs	r3, #1
 81080fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108102:	e006      	b.n	8108112 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8108104:	bf00      	nop
 8108106:	e004      	b.n	8108112 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8108108:	bf00      	nop
 810810a:	e002      	b.n	8108112 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810810c:	bf00      	nop
 810810e:	e000      	b.n	8108112 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8108110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108116:	2b00      	cmp	r3, #0
 8108118:	d10e      	bne.n	8108138 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810811a:	4b06      	ldr	r3, [pc, #24]	@ (8108134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810811c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810811e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8108122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108126:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810812a:	4a02      	ldr	r2, [pc, #8]	@ (8108134 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810812c:	430b      	orrs	r3, r1
 810812e:	6593      	str	r3, [r2, #88]	@ 0x58
 8108130:	e006      	b.n	8108140 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8108132:	bf00      	nop
 8108134:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810813c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8108140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108148:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810814c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8108150:	2300      	movs	r3, #0
 8108152:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8108156:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810815a:	460b      	mov	r3, r1
 810815c:	4313      	orrs	r3, r2
 810815e:	d055      	beq.n	810820c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8108160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108164:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8108168:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810816c:	d033      	beq.n	81081d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 810816e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8108172:	d82c      	bhi.n	81081ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8108174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8108178:	d02f      	beq.n	81081da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810817a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810817e:	d826      	bhi.n	81081ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8108180:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8108184:	d02b      	beq.n	81081de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8108186:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810818a:	d820      	bhi.n	81081ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810818c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108190:	d012      	beq.n	81081b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8108192:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8108196:	d81a      	bhi.n	81081ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8108198:	2b00      	cmp	r3, #0
 810819a:	d022      	beq.n	81081e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 810819c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81081a0:	d115      	bne.n	81081ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81081a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081a6:	3308      	adds	r3, #8
 81081a8:	2100      	movs	r1, #0
 81081aa:	4618      	mov	r0, r3
 81081ac:	f000 fdee 	bl	8108d8c <RCCEx_PLL2_Config>
 81081b0:	4603      	mov	r3, r0
 81081b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81081b6:	e015      	b.n	81081e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81081b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081bc:	3328      	adds	r3, #40	@ 0x28
 81081be:	2102      	movs	r1, #2
 81081c0:	4618      	mov	r0, r3
 81081c2:	f000 fe95 	bl	8108ef0 <RCCEx_PLL3_Config>
 81081c6:	4603      	mov	r3, r0
 81081c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81081cc:	e00a      	b.n	81081e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81081ce:	2301      	movs	r3, #1
 81081d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81081d4:	e006      	b.n	81081e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81081d6:	bf00      	nop
 81081d8:	e004      	b.n	81081e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81081da:	bf00      	nop
 81081dc:	e002      	b.n	81081e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81081de:	bf00      	nop
 81081e0:	e000      	b.n	81081e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81081e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81081e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81081e8:	2b00      	cmp	r3, #0
 81081ea:	d10b      	bne.n	8108204 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81081ec:	4ba1      	ldr	r3, [pc, #644]	@ (8108474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81081ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81081f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 81081f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81081f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81081fc:	4a9d      	ldr	r2, [pc, #628]	@ (8108474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81081fe:	430b      	orrs	r3, r1
 8108200:	6593      	str	r3, [r2, #88]	@ 0x58
 8108202:	e003      	b.n	810820c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108208:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810820c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108214:	f002 0308 	and.w	r3, r2, #8
 8108218:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810821c:	2300      	movs	r3, #0
 810821e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8108222:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8108226:	460b      	mov	r3, r1
 8108228:	4313      	orrs	r3, r2
 810822a:	d01e      	beq.n	810826a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810822c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8108234:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108238:	d10c      	bne.n	8108254 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810823a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810823e:	3328      	adds	r3, #40	@ 0x28
 8108240:	2102      	movs	r1, #2
 8108242:	4618      	mov	r0, r3
 8108244:	f000 fe54 	bl	8108ef0 <RCCEx_PLL3_Config>
 8108248:	4603      	mov	r3, r0
 810824a:	2b00      	cmp	r3, #0
 810824c:	d002      	beq.n	8108254 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 810824e:	2301      	movs	r3, #1
 8108250:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8108254:	4b87      	ldr	r3, [pc, #540]	@ (8108474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108258:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810825c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108260:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8108264:	4a83      	ldr	r2, [pc, #524]	@ (8108474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108266:	430b      	orrs	r3, r1
 8108268:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810826a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108272:	f002 0310 	and.w	r3, r2, #16
 8108276:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810827a:	2300      	movs	r3, #0
 810827c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8108280:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8108284:	460b      	mov	r3, r1
 8108286:	4313      	orrs	r3, r2
 8108288:	d01e      	beq.n	81082c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810828a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810828e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8108292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108296:	d10c      	bne.n	81082b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8108298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810829c:	3328      	adds	r3, #40	@ 0x28
 810829e:	2102      	movs	r1, #2
 81082a0:	4618      	mov	r0, r3
 81082a2:	f000 fe25 	bl	8108ef0 <RCCEx_PLL3_Config>
 81082a6:	4603      	mov	r3, r0
 81082a8:	2b00      	cmp	r3, #0
 81082aa:	d002      	beq.n	81082b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 81082ac:	2301      	movs	r3, #1
 81082ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81082b2:	4b70      	ldr	r3, [pc, #448]	@ (8108474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81082b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81082b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81082ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81082be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81082c2:	4a6c      	ldr	r2, [pc, #432]	@ (8108474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81082c4:	430b      	orrs	r3, r1
 81082c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81082c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81082d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 81082d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 81082d8:	2300      	movs	r3, #0
 81082da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 81082de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 81082e2:	460b      	mov	r3, r1
 81082e4:	4313      	orrs	r3, r2
 81082e6:	d03e      	beq.n	8108366 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81082e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81082ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81082f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81082f4:	d022      	beq.n	810833c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 81082f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81082fa:	d81b      	bhi.n	8108334 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81082fc:	2b00      	cmp	r3, #0
 81082fe:	d003      	beq.n	8108308 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8108300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108304:	d00b      	beq.n	810831e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8108306:	e015      	b.n	8108334 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810830c:	3308      	adds	r3, #8
 810830e:	2100      	movs	r1, #0
 8108310:	4618      	mov	r0, r3
 8108312:	f000 fd3b 	bl	8108d8c <RCCEx_PLL2_Config>
 8108316:	4603      	mov	r3, r0
 8108318:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810831c:	e00f      	b.n	810833e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810831e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108322:	3328      	adds	r3, #40	@ 0x28
 8108324:	2102      	movs	r1, #2
 8108326:	4618      	mov	r0, r3
 8108328:	f000 fde2 	bl	8108ef0 <RCCEx_PLL3_Config>
 810832c:	4603      	mov	r3, r0
 810832e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8108332:	e004      	b.n	810833e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108334:	2301      	movs	r3, #1
 8108336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810833a:	e000      	b.n	810833e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 810833c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810833e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108342:	2b00      	cmp	r3, #0
 8108344:	d10b      	bne.n	810835e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8108346:	4b4b      	ldr	r3, [pc, #300]	@ (8108474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810834a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 810834e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108352:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8108356:	4a47      	ldr	r2, [pc, #284]	@ (8108474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108358:	430b      	orrs	r3, r1
 810835a:	6593      	str	r3, [r2, #88]	@ 0x58
 810835c:	e003      	b.n	8108366 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810835e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108362:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8108366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810836a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810836e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8108372:	67bb      	str	r3, [r7, #120]	@ 0x78
 8108374:	2300      	movs	r3, #0
 8108376:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8108378:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810837c:	460b      	mov	r3, r1
 810837e:	4313      	orrs	r3, r2
 8108380:	d03b      	beq.n	81083fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8108382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810838a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810838e:	d01f      	beq.n	81083d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8108390:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8108394:	d818      	bhi.n	81083c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8108396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810839a:	d003      	beq.n	81083a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 810839c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81083a0:	d007      	beq.n	81083b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81083a2:	e011      	b.n	81083c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81083a4:	4b33      	ldr	r3, [pc, #204]	@ (8108474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81083a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81083a8:	4a32      	ldr	r2, [pc, #200]	@ (8108474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81083aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81083ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81083b0:	e00f      	b.n	81083d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81083b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81083b6:	3328      	adds	r3, #40	@ 0x28
 81083b8:	2101      	movs	r1, #1
 81083ba:	4618      	mov	r0, r3
 81083bc:	f000 fd98 	bl	8108ef0 <RCCEx_PLL3_Config>
 81083c0:	4603      	mov	r3, r0
 81083c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 81083c6:	e004      	b.n	81083d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81083c8:	2301      	movs	r3, #1
 81083ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81083ce:	e000      	b.n	81083d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 81083d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81083d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81083d6:	2b00      	cmp	r3, #0
 81083d8:	d10b      	bne.n	81083f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81083da:	4b26      	ldr	r3, [pc, #152]	@ (8108474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81083dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81083de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81083e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81083e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81083ea:	4a22      	ldr	r2, [pc, #136]	@ (8108474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81083ec:	430b      	orrs	r3, r1
 81083ee:	6553      	str	r3, [r2, #84]	@ 0x54
 81083f0:	e003      	b.n	81083fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81083f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81083f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81083fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108402:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8108406:	673b      	str	r3, [r7, #112]	@ 0x70
 8108408:	2300      	movs	r3, #0
 810840a:	677b      	str	r3, [r7, #116]	@ 0x74
 810840c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8108410:	460b      	mov	r3, r1
 8108412:	4313      	orrs	r3, r2
 8108414:	d034      	beq.n	8108480 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8108416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810841a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810841c:	2b00      	cmp	r3, #0
 810841e:	d003      	beq.n	8108428 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8108420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8108424:	d007      	beq.n	8108436 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8108426:	e011      	b.n	810844c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108428:	4b12      	ldr	r3, [pc, #72]	@ (8108474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810842a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810842c:	4a11      	ldr	r2, [pc, #68]	@ (8108474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810842e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108432:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8108434:	e00e      	b.n	8108454 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8108436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810843a:	3308      	adds	r3, #8
 810843c:	2102      	movs	r1, #2
 810843e:	4618      	mov	r0, r3
 8108440:	f000 fca4 	bl	8108d8c <RCCEx_PLL2_Config>
 8108444:	4603      	mov	r3, r0
 8108446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810844a:	e003      	b.n	8108454 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 810844c:	2301      	movs	r3, #1
 810844e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108458:	2b00      	cmp	r3, #0
 810845a:	d10d      	bne.n	8108478 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810845c:	4b05      	ldr	r3, [pc, #20]	@ (8108474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810845e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108460:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8108464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810846a:	4a02      	ldr	r2, [pc, #8]	@ (8108474 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810846c:	430b      	orrs	r3, r1
 810846e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8108470:	e006      	b.n	8108480 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8108472:	bf00      	nop
 8108474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108478:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810847c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8108480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108488:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 810848c:	66bb      	str	r3, [r7, #104]	@ 0x68
 810848e:	2300      	movs	r3, #0
 8108490:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8108492:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8108496:	460b      	mov	r3, r1
 8108498:	4313      	orrs	r3, r2
 810849a:	d00c      	beq.n	81084b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810849c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81084a0:	3328      	adds	r3, #40	@ 0x28
 81084a2:	2102      	movs	r1, #2
 81084a4:	4618      	mov	r0, r3
 81084a6:	f000 fd23 	bl	8108ef0 <RCCEx_PLL3_Config>
 81084aa:	4603      	mov	r3, r0
 81084ac:	2b00      	cmp	r3, #0
 81084ae:	d002      	beq.n	81084b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 81084b0:	2301      	movs	r3, #1
 81084b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81084b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81084be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 81084c2:	663b      	str	r3, [r7, #96]	@ 0x60
 81084c4:	2300      	movs	r3, #0
 81084c6:	667b      	str	r3, [r7, #100]	@ 0x64
 81084c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 81084cc:	460b      	mov	r3, r1
 81084ce:	4313      	orrs	r3, r2
 81084d0:	d038      	beq.n	8108544 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 81084d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81084d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81084da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81084de:	d018      	beq.n	8108512 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 81084e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81084e4:	d811      	bhi.n	810850a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81084e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81084ea:	d014      	beq.n	8108516 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 81084ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81084f0:	d80b      	bhi.n	810850a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81084f2:	2b00      	cmp	r3, #0
 81084f4:	d011      	beq.n	810851a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 81084f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81084fa:	d106      	bne.n	810850a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81084fc:	4bc3      	ldr	r3, [pc, #780]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81084fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108500:	4ac2      	ldr	r2, [pc, #776]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8108506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8108508:	e008      	b.n	810851c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810850a:	2301      	movs	r3, #1
 810850c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8108510:	e004      	b.n	810851c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8108512:	bf00      	nop
 8108514:	e002      	b.n	810851c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8108516:	bf00      	nop
 8108518:	e000      	b.n	810851c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810851a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810851c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108520:	2b00      	cmp	r3, #0
 8108522:	d10b      	bne.n	810853c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8108524:	4bb9      	ldr	r3, [pc, #740]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108528:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810852c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8108534:	4ab5      	ldr	r2, [pc, #724]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108536:	430b      	orrs	r3, r1
 8108538:	6553      	str	r3, [r2, #84]	@ 0x54
 810853a:	e003      	b.n	8108544 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810853c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108540:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8108544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108548:	e9d3 2300 	ldrd	r2, r3, [r3]
 810854c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8108550:	65bb      	str	r3, [r7, #88]	@ 0x58
 8108552:	2300      	movs	r3, #0
 8108554:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8108556:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810855a:	460b      	mov	r3, r1
 810855c:	4313      	orrs	r3, r2
 810855e:	d009      	beq.n	8108574 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8108560:	4baa      	ldr	r3, [pc, #680]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108564:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8108568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810856c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810856e:	4aa7      	ldr	r2, [pc, #668]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108570:	430b      	orrs	r3, r1
 8108572:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8108574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108578:	e9d3 2300 	ldrd	r2, r3, [r3]
 810857c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8108580:	653b      	str	r3, [r7, #80]	@ 0x50
 8108582:	2300      	movs	r3, #0
 8108584:	657b      	str	r3, [r7, #84]	@ 0x54
 8108586:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810858a:	460b      	mov	r3, r1
 810858c:	4313      	orrs	r3, r2
 810858e:	d00a      	beq.n	81085a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8108590:	4b9e      	ldr	r3, [pc, #632]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108592:	691b      	ldr	r3, [r3, #16]
 8108594:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8108598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810859c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81085a0:	4a9a      	ldr	r2, [pc, #616]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81085a2:	430b      	orrs	r3, r1
 81085a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81085a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81085aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81085ae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 81085b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 81085b4:	2300      	movs	r3, #0
 81085b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81085b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 81085bc:	460b      	mov	r3, r1
 81085be:	4313      	orrs	r3, r2
 81085c0:	d009      	beq.n	81085d6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81085c2:	4b92      	ldr	r3, [pc, #584]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81085c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81085c6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 81085ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81085ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81085d0:	4a8e      	ldr	r2, [pc, #568]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81085d2:	430b      	orrs	r3, r1
 81085d4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81085d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81085de:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 81085e2:	643b      	str	r3, [r7, #64]	@ 0x40
 81085e4:	2300      	movs	r3, #0
 81085e6:	647b      	str	r3, [r7, #68]	@ 0x44
 81085e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 81085ec:	460b      	mov	r3, r1
 81085ee:	4313      	orrs	r3, r2
 81085f0:	d00e      	beq.n	8108610 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81085f2:	4b86      	ldr	r3, [pc, #536]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81085f4:	691b      	ldr	r3, [r3, #16]
 81085f6:	4a85      	ldr	r2, [pc, #532]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81085f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81085fc:	6113      	str	r3, [r2, #16]
 81085fe:	4b83      	ldr	r3, [pc, #524]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108600:	6919      	ldr	r1, [r3, #16]
 8108602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108606:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810860a:	4a80      	ldr	r2, [pc, #512]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810860c:	430b      	orrs	r3, r1
 810860e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8108610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108618:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810861c:	63bb      	str	r3, [r7, #56]	@ 0x38
 810861e:	2300      	movs	r3, #0
 8108620:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108622:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8108626:	460b      	mov	r3, r1
 8108628:	4313      	orrs	r3, r2
 810862a:	d009      	beq.n	8108640 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810862c:	4b77      	ldr	r3, [pc, #476]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810862e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108630:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8108634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810863a:	4a74      	ldr	r2, [pc, #464]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810863c:	430b      	orrs	r3, r1
 810863e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8108640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108648:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810864c:	633b      	str	r3, [r7, #48]	@ 0x30
 810864e:	2300      	movs	r3, #0
 8108650:	637b      	str	r3, [r7, #52]	@ 0x34
 8108652:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8108656:	460b      	mov	r3, r1
 8108658:	4313      	orrs	r3, r2
 810865a:	d00a      	beq.n	8108672 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810865c:	4b6b      	ldr	r3, [pc, #428]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810865e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108660:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8108664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810866c:	4a67      	ldr	r2, [pc, #412]	@ (810880c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810866e:	430b      	orrs	r3, r1
 8108670:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8108672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108676:	e9d3 2300 	ldrd	r2, r3, [r3]
 810867a:	2100      	movs	r1, #0
 810867c:	62b9      	str	r1, [r7, #40]	@ 0x28
 810867e:	f003 0301 	and.w	r3, r3, #1
 8108682:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8108684:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8108688:	460b      	mov	r3, r1
 810868a:	4313      	orrs	r3, r2
 810868c:	d011      	beq.n	81086b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810868e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108692:	3308      	adds	r3, #8
 8108694:	2100      	movs	r1, #0
 8108696:	4618      	mov	r0, r3
 8108698:	f000 fb78 	bl	8108d8c <RCCEx_PLL2_Config>
 810869c:	4603      	mov	r3, r0
 810869e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81086a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81086a6:	2b00      	cmp	r3, #0
 81086a8:	d003      	beq.n	81086b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81086aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81086ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81086b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81086ba:	2100      	movs	r1, #0
 81086bc:	6239      	str	r1, [r7, #32]
 81086be:	f003 0302 	and.w	r3, r3, #2
 81086c2:	627b      	str	r3, [r7, #36]	@ 0x24
 81086c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81086c8:	460b      	mov	r3, r1
 81086ca:	4313      	orrs	r3, r2
 81086cc:	d011      	beq.n	81086f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81086ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81086d2:	3308      	adds	r3, #8
 81086d4:	2101      	movs	r1, #1
 81086d6:	4618      	mov	r0, r3
 81086d8:	f000 fb58 	bl	8108d8c <RCCEx_PLL2_Config>
 81086dc:	4603      	mov	r3, r0
 81086de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81086e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81086e6:	2b00      	cmp	r3, #0
 81086e8:	d003      	beq.n	81086f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81086ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81086ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81086f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81086fa:	2100      	movs	r1, #0
 81086fc:	61b9      	str	r1, [r7, #24]
 81086fe:	f003 0304 	and.w	r3, r3, #4
 8108702:	61fb      	str	r3, [r7, #28]
 8108704:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8108708:	460b      	mov	r3, r1
 810870a:	4313      	orrs	r3, r2
 810870c:	d011      	beq.n	8108732 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810870e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108712:	3308      	adds	r3, #8
 8108714:	2102      	movs	r1, #2
 8108716:	4618      	mov	r0, r3
 8108718:	f000 fb38 	bl	8108d8c <RCCEx_PLL2_Config>
 810871c:	4603      	mov	r3, r0
 810871e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8108722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108726:	2b00      	cmp	r3, #0
 8108728:	d003      	beq.n	8108732 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810872a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810872e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8108732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108736:	e9d3 2300 	ldrd	r2, r3, [r3]
 810873a:	2100      	movs	r1, #0
 810873c:	6139      	str	r1, [r7, #16]
 810873e:	f003 0308 	and.w	r3, r3, #8
 8108742:	617b      	str	r3, [r7, #20]
 8108744:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8108748:	460b      	mov	r3, r1
 810874a:	4313      	orrs	r3, r2
 810874c:	d011      	beq.n	8108772 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810874e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108752:	3328      	adds	r3, #40	@ 0x28
 8108754:	2100      	movs	r1, #0
 8108756:	4618      	mov	r0, r3
 8108758:	f000 fbca 	bl	8108ef0 <RCCEx_PLL3_Config>
 810875c:	4603      	mov	r3, r0
 810875e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8108762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8108766:	2b00      	cmp	r3, #0
 8108768:	d003      	beq.n	8108772 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810876a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810876e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8108772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108776:	e9d3 2300 	ldrd	r2, r3, [r3]
 810877a:	2100      	movs	r1, #0
 810877c:	60b9      	str	r1, [r7, #8]
 810877e:	f003 0310 	and.w	r3, r3, #16
 8108782:	60fb      	str	r3, [r7, #12]
 8108784:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8108788:	460b      	mov	r3, r1
 810878a:	4313      	orrs	r3, r2
 810878c:	d011      	beq.n	81087b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810878e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8108792:	3328      	adds	r3, #40	@ 0x28
 8108794:	2101      	movs	r1, #1
 8108796:	4618      	mov	r0, r3
 8108798:	f000 fbaa 	bl	8108ef0 <RCCEx_PLL3_Config>
 810879c:	4603      	mov	r3, r0
 810879e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81087a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81087a6:	2b00      	cmp	r3, #0
 81087a8:	d003      	beq.n	81087b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81087aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81087ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81087b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81087b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81087ba:	2100      	movs	r1, #0
 81087bc:	6039      	str	r1, [r7, #0]
 81087be:	f003 0320 	and.w	r3, r3, #32
 81087c2:	607b      	str	r3, [r7, #4]
 81087c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 81087c8:	460b      	mov	r3, r1
 81087ca:	4313      	orrs	r3, r2
 81087cc:	d011      	beq.n	81087f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81087ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81087d2:	3328      	adds	r3, #40	@ 0x28
 81087d4:	2102      	movs	r1, #2
 81087d6:	4618      	mov	r0, r3
 81087d8:	f000 fb8a 	bl	8108ef0 <RCCEx_PLL3_Config>
 81087dc:	4603      	mov	r3, r0
 81087de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81087e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81087e6:	2b00      	cmp	r3, #0
 81087e8:	d003      	beq.n	81087f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81087ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81087ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 81087f2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 81087f6:	2b00      	cmp	r3, #0
 81087f8:	d101      	bne.n	81087fe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 81087fa:	2300      	movs	r3, #0
 81087fc:	e000      	b.n	8108800 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 81087fe:	2301      	movs	r3, #1
}
 8108800:	4618      	mov	r0, r3
 8108802:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8108806:	46bd      	mov	sp, r7
 8108808:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810880c:	58024400 	.word	0x58024400

08108810 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8108810:	b580      	push	{r7, lr}
 8108812:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8108814:	f7fe fd94 	bl	8107340 <HAL_RCC_GetHCLKFreq>
 8108818:	4602      	mov	r2, r0
 810881a:	4b06      	ldr	r3, [pc, #24]	@ (8108834 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810881c:	6a1b      	ldr	r3, [r3, #32]
 810881e:	091b      	lsrs	r3, r3, #4
 8108820:	f003 0307 	and.w	r3, r3, #7
 8108824:	4904      	ldr	r1, [pc, #16]	@ (8108838 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8108826:	5ccb      	ldrb	r3, [r1, r3]
 8108828:	f003 031f 	and.w	r3, r3, #31
 810882c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8108830:	4618      	mov	r0, r3
 8108832:	bd80      	pop	{r7, pc}
 8108834:	58024400 	.word	0x58024400
 8108838:	08112f54 	.word	0x08112f54

0810883c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 810883c:	b480      	push	{r7}
 810883e:	b089      	sub	sp, #36	@ 0x24
 8108840:	af00      	add	r7, sp, #0
 8108842:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108844:	4ba1      	ldr	r3, [pc, #644]	@ (8108acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108848:	f003 0303 	and.w	r3, r3, #3
 810884c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810884e:	4b9f      	ldr	r3, [pc, #636]	@ (8108acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108852:	0b1b      	lsrs	r3, r3, #12
 8108854:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108858:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810885a:	4b9c      	ldr	r3, [pc, #624]	@ (8108acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810885c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810885e:	091b      	lsrs	r3, r3, #4
 8108860:	f003 0301 	and.w	r3, r3, #1
 8108864:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8108866:	4b99      	ldr	r3, [pc, #612]	@ (8108acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810886a:	08db      	lsrs	r3, r3, #3
 810886c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108870:	693a      	ldr	r2, [r7, #16]
 8108872:	fb02 f303 	mul.w	r3, r2, r3
 8108876:	ee07 3a90 	vmov	s15, r3
 810887a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810887e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8108882:	697b      	ldr	r3, [r7, #20]
 8108884:	2b00      	cmp	r3, #0
 8108886:	f000 8111 	beq.w	8108aac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810888a:	69bb      	ldr	r3, [r7, #24]
 810888c:	2b02      	cmp	r3, #2
 810888e:	f000 8083 	beq.w	8108998 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8108892:	69bb      	ldr	r3, [r7, #24]
 8108894:	2b02      	cmp	r3, #2
 8108896:	f200 80a1 	bhi.w	81089dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810889a:	69bb      	ldr	r3, [r7, #24]
 810889c:	2b00      	cmp	r3, #0
 810889e:	d003      	beq.n	81088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81088a0:	69bb      	ldr	r3, [r7, #24]
 81088a2:	2b01      	cmp	r3, #1
 81088a4:	d056      	beq.n	8108954 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81088a6:	e099      	b.n	81089dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81088a8:	4b88      	ldr	r3, [pc, #544]	@ (8108acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81088aa:	681b      	ldr	r3, [r3, #0]
 81088ac:	f003 0320 	and.w	r3, r3, #32
 81088b0:	2b00      	cmp	r3, #0
 81088b2:	d02d      	beq.n	8108910 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81088b4:	4b85      	ldr	r3, [pc, #532]	@ (8108acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81088b6:	681b      	ldr	r3, [r3, #0]
 81088b8:	08db      	lsrs	r3, r3, #3
 81088ba:	f003 0303 	and.w	r3, r3, #3
 81088be:	4a84      	ldr	r2, [pc, #528]	@ (8108ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81088c0:	fa22 f303 	lsr.w	r3, r2, r3
 81088c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81088c6:	68bb      	ldr	r3, [r7, #8]
 81088c8:	ee07 3a90 	vmov	s15, r3
 81088cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81088d0:	697b      	ldr	r3, [r7, #20]
 81088d2:	ee07 3a90 	vmov	s15, r3
 81088d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81088da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81088de:	4b7b      	ldr	r3, [pc, #492]	@ (8108acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81088e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81088e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81088e6:	ee07 3a90 	vmov	s15, r3
 81088ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81088ee:	ed97 6a03 	vldr	s12, [r7, #12]
 81088f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8108ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81088f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81088fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81088fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108906:	ee67 7a27 	vmul.f32	s15, s14, s15
 810890a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810890e:	e087      	b.n	8108a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108910:	697b      	ldr	r3, [r7, #20]
 8108912:	ee07 3a90 	vmov	s15, r3
 8108916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810891a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8108ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810891e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108922:	4b6a      	ldr	r3, [pc, #424]	@ (8108acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810892a:	ee07 3a90 	vmov	s15, r3
 810892e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108932:	ed97 6a03 	vldr	s12, [r7, #12]
 8108936:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8108ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810893a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810893e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810894a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810894e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108952:	e065      	b.n	8108a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108954:	697b      	ldr	r3, [r7, #20]
 8108956:	ee07 3a90 	vmov	s15, r3
 810895a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810895e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8108adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8108962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108966:	4b59      	ldr	r3, [pc, #356]	@ (8108acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810896a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810896e:	ee07 3a90 	vmov	s15, r3
 8108972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108976:	ed97 6a03 	vldr	s12, [r7, #12]
 810897a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8108ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810897e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108986:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810898a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810898e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108996:	e043      	b.n	8108a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108998:	697b      	ldr	r3, [r7, #20]
 810899a:	ee07 3a90 	vmov	s15, r3
 810899e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81089a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8108ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81089a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81089aa:	4b48      	ldr	r3, [pc, #288]	@ (8108acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81089ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81089ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81089b2:	ee07 3a90 	vmov	s15, r3
 81089b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81089ba:	ed97 6a03 	vldr	s12, [r7, #12]
 81089be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8108ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81089c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81089c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81089ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81089ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81089d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81089d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81089da:	e021      	b.n	8108a20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81089dc:	697b      	ldr	r3, [r7, #20]
 81089de:	ee07 3a90 	vmov	s15, r3
 81089e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81089e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8108adc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81089ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81089ee:	4b37      	ldr	r3, [pc, #220]	@ (8108acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81089f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81089f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81089f6:	ee07 3a90 	vmov	s15, r3
 81089fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81089fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8108a02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8108ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108a1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8108a20:	4b2a      	ldr	r3, [pc, #168]	@ (8108acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108a24:	0a5b      	lsrs	r3, r3, #9
 8108a26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108a2a:	ee07 3a90 	vmov	s15, r3
 8108a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8108a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108a46:	ee17 2a90 	vmov	r2, s15
 8108a4a:	687b      	ldr	r3, [r7, #4]
 8108a4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8108a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8108acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108a52:	0c1b      	lsrs	r3, r3, #16
 8108a54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108a58:	ee07 3a90 	vmov	s15, r3
 8108a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108a64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108a68:	edd7 6a07 	vldr	s13, [r7, #28]
 8108a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108a74:	ee17 2a90 	vmov	r2, s15
 8108a78:	687b      	ldr	r3, [r7, #4]
 8108a7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8108a7c:	4b13      	ldr	r3, [pc, #76]	@ (8108acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108a80:	0e1b      	lsrs	r3, r3, #24
 8108a82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108a86:	ee07 3a90 	vmov	s15, r3
 8108a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8108a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108aa2:	ee17 2a90 	vmov	r2, s15
 8108aa6:	687b      	ldr	r3, [r7, #4]
 8108aa8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8108aaa:	e008      	b.n	8108abe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8108aac:	687b      	ldr	r3, [r7, #4]
 8108aae:	2200      	movs	r2, #0
 8108ab0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8108ab2:	687b      	ldr	r3, [r7, #4]
 8108ab4:	2200      	movs	r2, #0
 8108ab6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8108ab8:	687b      	ldr	r3, [r7, #4]
 8108aba:	2200      	movs	r2, #0
 8108abc:	609a      	str	r2, [r3, #8]
}
 8108abe:	bf00      	nop
 8108ac0:	3724      	adds	r7, #36	@ 0x24
 8108ac2:	46bd      	mov	sp, r7
 8108ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ac8:	4770      	bx	lr
 8108aca:	bf00      	nop
 8108acc:	58024400 	.word	0x58024400
 8108ad0:	03d09000 	.word	0x03d09000
 8108ad4:	46000000 	.word	0x46000000
 8108ad8:	4c742400 	.word	0x4c742400
 8108adc:	4a742400 	.word	0x4a742400
 8108ae0:	4bbebc20 	.word	0x4bbebc20

08108ae4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8108ae4:	b480      	push	{r7}
 8108ae6:	b089      	sub	sp, #36	@ 0x24
 8108ae8:	af00      	add	r7, sp, #0
 8108aea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108aec:	4ba1      	ldr	r3, [pc, #644]	@ (8108d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108af0:	f003 0303 	and.w	r3, r3, #3
 8108af4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8108af6:	4b9f      	ldr	r3, [pc, #636]	@ (8108d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108afa:	0d1b      	lsrs	r3, r3, #20
 8108afc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108b00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8108b02:	4b9c      	ldr	r3, [pc, #624]	@ (8108d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108b06:	0a1b      	lsrs	r3, r3, #8
 8108b08:	f003 0301 	and.w	r3, r3, #1
 8108b0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8108b0e:	4b99      	ldr	r3, [pc, #612]	@ (8108d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108b12:	08db      	lsrs	r3, r3, #3
 8108b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108b18:	693a      	ldr	r2, [r7, #16]
 8108b1a:	fb02 f303 	mul.w	r3, r2, r3
 8108b1e:	ee07 3a90 	vmov	s15, r3
 8108b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108b26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8108b2a:	697b      	ldr	r3, [r7, #20]
 8108b2c:	2b00      	cmp	r3, #0
 8108b2e:	f000 8111 	beq.w	8108d54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8108b32:	69bb      	ldr	r3, [r7, #24]
 8108b34:	2b02      	cmp	r3, #2
 8108b36:	f000 8083 	beq.w	8108c40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8108b3a:	69bb      	ldr	r3, [r7, #24]
 8108b3c:	2b02      	cmp	r3, #2
 8108b3e:	f200 80a1 	bhi.w	8108c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8108b42:	69bb      	ldr	r3, [r7, #24]
 8108b44:	2b00      	cmp	r3, #0
 8108b46:	d003      	beq.n	8108b50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8108b48:	69bb      	ldr	r3, [r7, #24]
 8108b4a:	2b01      	cmp	r3, #1
 8108b4c:	d056      	beq.n	8108bfc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8108b4e:	e099      	b.n	8108c84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108b50:	4b88      	ldr	r3, [pc, #544]	@ (8108d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108b52:	681b      	ldr	r3, [r3, #0]
 8108b54:	f003 0320 	and.w	r3, r3, #32
 8108b58:	2b00      	cmp	r3, #0
 8108b5a:	d02d      	beq.n	8108bb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108b5c:	4b85      	ldr	r3, [pc, #532]	@ (8108d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108b5e:	681b      	ldr	r3, [r3, #0]
 8108b60:	08db      	lsrs	r3, r3, #3
 8108b62:	f003 0303 	and.w	r3, r3, #3
 8108b66:	4a84      	ldr	r2, [pc, #528]	@ (8108d78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8108b68:	fa22 f303 	lsr.w	r3, r2, r3
 8108b6c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108b6e:	68bb      	ldr	r3, [r7, #8]
 8108b70:	ee07 3a90 	vmov	s15, r3
 8108b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108b78:	697b      	ldr	r3, [r7, #20]
 8108b7a:	ee07 3a90 	vmov	s15, r3
 8108b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108b86:	4b7b      	ldr	r3, [pc, #492]	@ (8108d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108b8e:	ee07 3a90 	vmov	s15, r3
 8108b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8108b9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8108d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8108bb6:	e087      	b.n	8108cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108bb8:	697b      	ldr	r3, [r7, #20]
 8108bba:	ee07 3a90 	vmov	s15, r3
 8108bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108bc2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8108d80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8108bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108bca:	4b6a      	ldr	r3, [pc, #424]	@ (8108d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108bd2:	ee07 3a90 	vmov	s15, r3
 8108bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8108bde:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8108d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108bfa:	e065      	b.n	8108cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108bfc:	697b      	ldr	r3, [r7, #20]
 8108bfe:	ee07 3a90 	vmov	s15, r3
 8108c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8108d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8108c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108c0e:	4b59      	ldr	r3, [pc, #356]	@ (8108d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108c16:	ee07 3a90 	vmov	s15, r3
 8108c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108c22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8108d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108c3e:	e043      	b.n	8108cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108c40:	697b      	ldr	r3, [r7, #20]
 8108c42:	ee07 3a90 	vmov	s15, r3
 8108c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8108d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8108c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108c52:	4b48      	ldr	r3, [pc, #288]	@ (8108d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108c5a:	ee07 3a90 	vmov	s15, r3
 8108c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8108c66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8108d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108c82:	e021      	b.n	8108cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108c84:	697b      	ldr	r3, [r7, #20]
 8108c86:	ee07 3a90 	vmov	s15, r3
 8108c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8108d84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8108c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108c96:	4b37      	ldr	r3, [pc, #220]	@ (8108d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108c9e:	ee07 3a90 	vmov	s15, r3
 8108ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8108caa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8108d7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108cc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8108cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8108d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108ccc:	0a5b      	lsrs	r3, r3, #9
 8108cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108cd2:	ee07 3a90 	vmov	s15, r3
 8108cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108cda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8108ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108cee:	ee17 2a90 	vmov	r2, s15
 8108cf2:	687b      	ldr	r3, [r7, #4]
 8108cf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8108cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8108d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108cfa:	0c1b      	lsrs	r3, r3, #16
 8108cfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108d00:	ee07 3a90 	vmov	s15, r3
 8108d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108d0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8108d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108d1c:	ee17 2a90 	vmov	r2, s15
 8108d20:	687b      	ldr	r3, [r7, #4]
 8108d22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8108d24:	4b13      	ldr	r3, [pc, #76]	@ (8108d74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108d28:	0e1b      	lsrs	r3, r3, #24
 8108d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108d2e:	ee07 3a90 	vmov	s15, r3
 8108d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8108d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108d4a:	ee17 2a90 	vmov	r2, s15
 8108d4e:	687b      	ldr	r3, [r7, #4]
 8108d50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8108d52:	e008      	b.n	8108d66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8108d54:	687b      	ldr	r3, [r7, #4]
 8108d56:	2200      	movs	r2, #0
 8108d58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8108d5a:	687b      	ldr	r3, [r7, #4]
 8108d5c:	2200      	movs	r2, #0
 8108d5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8108d60:	687b      	ldr	r3, [r7, #4]
 8108d62:	2200      	movs	r2, #0
 8108d64:	609a      	str	r2, [r3, #8]
}
 8108d66:	bf00      	nop
 8108d68:	3724      	adds	r7, #36	@ 0x24
 8108d6a:	46bd      	mov	sp, r7
 8108d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d70:	4770      	bx	lr
 8108d72:	bf00      	nop
 8108d74:	58024400 	.word	0x58024400
 8108d78:	03d09000 	.word	0x03d09000
 8108d7c:	46000000 	.word	0x46000000
 8108d80:	4c742400 	.word	0x4c742400
 8108d84:	4a742400 	.word	0x4a742400
 8108d88:	4bbebc20 	.word	0x4bbebc20

08108d8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8108d8c:	b580      	push	{r7, lr}
 8108d8e:	b084      	sub	sp, #16
 8108d90:	af00      	add	r7, sp, #0
 8108d92:	6078      	str	r0, [r7, #4]
 8108d94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108d96:	2300      	movs	r3, #0
 8108d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108d9a:	4b54      	ldr	r3, [pc, #336]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108d9e:	f003 0303 	and.w	r3, r3, #3
 8108da2:	2b03      	cmp	r3, #3
 8108da4:	d101      	bne.n	8108daa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8108da6:	2301      	movs	r3, #1
 8108da8:	e09b      	b.n	8108ee2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8108daa:	4b50      	ldr	r3, [pc, #320]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108dac:	681b      	ldr	r3, [r3, #0]
 8108dae:	4a4f      	ldr	r2, [pc, #316]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108db0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8108db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108db6:	f7fd f853 	bl	8105e60 <HAL_GetTick>
 8108dba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108dbc:	e008      	b.n	8108dd0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108dbe:	f7fd f84f 	bl	8105e60 <HAL_GetTick>
 8108dc2:	4602      	mov	r2, r0
 8108dc4:	68bb      	ldr	r3, [r7, #8]
 8108dc6:	1ad3      	subs	r3, r2, r3
 8108dc8:	2b02      	cmp	r3, #2
 8108dca:	d901      	bls.n	8108dd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108dcc:	2303      	movs	r3, #3
 8108dce:	e088      	b.n	8108ee2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108dd0:	4b46      	ldr	r3, [pc, #280]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108dd2:	681b      	ldr	r3, [r3, #0]
 8108dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108dd8:	2b00      	cmp	r3, #0
 8108dda:	d1f0      	bne.n	8108dbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8108ddc:	4b43      	ldr	r3, [pc, #268]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108de0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8108de4:	687b      	ldr	r3, [r7, #4]
 8108de6:	681b      	ldr	r3, [r3, #0]
 8108de8:	031b      	lsls	r3, r3, #12
 8108dea:	4940      	ldr	r1, [pc, #256]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108dec:	4313      	orrs	r3, r2
 8108dee:	628b      	str	r3, [r1, #40]	@ 0x28
 8108df0:	687b      	ldr	r3, [r7, #4]
 8108df2:	685b      	ldr	r3, [r3, #4]
 8108df4:	3b01      	subs	r3, #1
 8108df6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108dfa:	687b      	ldr	r3, [r7, #4]
 8108dfc:	689b      	ldr	r3, [r3, #8]
 8108dfe:	3b01      	subs	r3, #1
 8108e00:	025b      	lsls	r3, r3, #9
 8108e02:	b29b      	uxth	r3, r3
 8108e04:	431a      	orrs	r2, r3
 8108e06:	687b      	ldr	r3, [r7, #4]
 8108e08:	68db      	ldr	r3, [r3, #12]
 8108e0a:	3b01      	subs	r3, #1
 8108e0c:	041b      	lsls	r3, r3, #16
 8108e0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108e12:	431a      	orrs	r2, r3
 8108e14:	687b      	ldr	r3, [r7, #4]
 8108e16:	691b      	ldr	r3, [r3, #16]
 8108e18:	3b01      	subs	r3, #1
 8108e1a:	061b      	lsls	r3, r3, #24
 8108e1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108e20:	4932      	ldr	r1, [pc, #200]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108e22:	4313      	orrs	r3, r2
 8108e24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8108e26:	4b31      	ldr	r3, [pc, #196]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108e2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8108e2e:	687b      	ldr	r3, [r7, #4]
 8108e30:	695b      	ldr	r3, [r3, #20]
 8108e32:	492e      	ldr	r1, [pc, #184]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108e34:	4313      	orrs	r3, r2
 8108e36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108e38:	4b2c      	ldr	r3, [pc, #176]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108e3c:	f023 0220 	bic.w	r2, r3, #32
 8108e40:	687b      	ldr	r3, [r7, #4]
 8108e42:	699b      	ldr	r3, [r3, #24]
 8108e44:	4929      	ldr	r1, [pc, #164]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108e46:	4313      	orrs	r3, r2
 8108e48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8108e4a:	4b28      	ldr	r3, [pc, #160]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108e4e:	4a27      	ldr	r2, [pc, #156]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108e50:	f023 0310 	bic.w	r3, r3, #16
 8108e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8108e56:	4b25      	ldr	r3, [pc, #148]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108e5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108e5e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8108e62:	687a      	ldr	r2, [r7, #4]
 8108e64:	69d2      	ldr	r2, [r2, #28]
 8108e66:	00d2      	lsls	r2, r2, #3
 8108e68:	4920      	ldr	r1, [pc, #128]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108e6a:	4313      	orrs	r3, r2
 8108e6c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8108e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108e72:	4a1e      	ldr	r2, [pc, #120]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108e74:	f043 0310 	orr.w	r3, r3, #16
 8108e78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108e7a:	683b      	ldr	r3, [r7, #0]
 8108e7c:	2b00      	cmp	r3, #0
 8108e7e:	d106      	bne.n	8108e8e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8108e80:	4b1a      	ldr	r3, [pc, #104]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108e84:	4a19      	ldr	r2, [pc, #100]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108e86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8108e8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108e8c:	e00f      	b.n	8108eae <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108e8e:	683b      	ldr	r3, [r7, #0]
 8108e90:	2b01      	cmp	r3, #1
 8108e92:	d106      	bne.n	8108ea2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8108e94:	4b15      	ldr	r3, [pc, #84]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108e98:	4a14      	ldr	r2, [pc, #80]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108e9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8108e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108ea0:	e005      	b.n	8108eae <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8108ea2:	4b12      	ldr	r3, [pc, #72]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ea6:	4a11      	ldr	r2, [pc, #68]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108ea8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8108eac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8108eae:	4b0f      	ldr	r3, [pc, #60]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108eb0:	681b      	ldr	r3, [r3, #0]
 8108eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108eb4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8108eb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108eba:	f7fc ffd1 	bl	8105e60 <HAL_GetTick>
 8108ebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108ec0:	e008      	b.n	8108ed4 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108ec2:	f7fc ffcd 	bl	8105e60 <HAL_GetTick>
 8108ec6:	4602      	mov	r2, r0
 8108ec8:	68bb      	ldr	r3, [r7, #8]
 8108eca:	1ad3      	subs	r3, r2, r3
 8108ecc:	2b02      	cmp	r3, #2
 8108ece:	d901      	bls.n	8108ed4 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108ed0:	2303      	movs	r3, #3
 8108ed2:	e006      	b.n	8108ee2 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108ed4:	4b05      	ldr	r3, [pc, #20]	@ (8108eec <RCCEx_PLL2_Config+0x160>)
 8108ed6:	681b      	ldr	r3, [r3, #0]
 8108ed8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108edc:	2b00      	cmp	r3, #0
 8108ede:	d0f0      	beq.n	8108ec2 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8108ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8108ee2:	4618      	mov	r0, r3
 8108ee4:	3710      	adds	r7, #16
 8108ee6:	46bd      	mov	sp, r7
 8108ee8:	bd80      	pop	{r7, pc}
 8108eea:	bf00      	nop
 8108eec:	58024400 	.word	0x58024400

08108ef0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8108ef0:	b580      	push	{r7, lr}
 8108ef2:	b084      	sub	sp, #16
 8108ef4:	af00      	add	r7, sp, #0
 8108ef6:	6078      	str	r0, [r7, #4]
 8108ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108efa:	2300      	movs	r3, #0
 8108efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108efe:	4b54      	ldr	r3, [pc, #336]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108f02:	f003 0303 	and.w	r3, r3, #3
 8108f06:	2b03      	cmp	r3, #3
 8108f08:	d101      	bne.n	8108f0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8108f0a:	2301      	movs	r3, #1
 8108f0c:	e09b      	b.n	8109046 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8108f0e:	4b50      	ldr	r3, [pc, #320]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108f10:	681b      	ldr	r3, [r3, #0]
 8108f12:	4a4f      	ldr	r2, [pc, #316]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108f1a:	f7fc ffa1 	bl	8105e60 <HAL_GetTick>
 8108f1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108f20:	e008      	b.n	8108f34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108f22:	f7fc ff9d 	bl	8105e60 <HAL_GetTick>
 8108f26:	4602      	mov	r2, r0
 8108f28:	68bb      	ldr	r3, [r7, #8]
 8108f2a:	1ad3      	subs	r3, r2, r3
 8108f2c:	2b02      	cmp	r3, #2
 8108f2e:	d901      	bls.n	8108f34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108f30:	2303      	movs	r3, #3
 8108f32:	e088      	b.n	8109046 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108f34:	4b46      	ldr	r3, [pc, #280]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108f36:	681b      	ldr	r3, [r3, #0]
 8108f38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108f3c:	2b00      	cmp	r3, #0
 8108f3e:	d1f0      	bne.n	8108f22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8108f40:	4b43      	ldr	r3, [pc, #268]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108f44:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8108f48:	687b      	ldr	r3, [r7, #4]
 8108f4a:	681b      	ldr	r3, [r3, #0]
 8108f4c:	051b      	lsls	r3, r3, #20
 8108f4e:	4940      	ldr	r1, [pc, #256]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108f50:	4313      	orrs	r3, r2
 8108f52:	628b      	str	r3, [r1, #40]	@ 0x28
 8108f54:	687b      	ldr	r3, [r7, #4]
 8108f56:	685b      	ldr	r3, [r3, #4]
 8108f58:	3b01      	subs	r3, #1
 8108f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108f5e:	687b      	ldr	r3, [r7, #4]
 8108f60:	689b      	ldr	r3, [r3, #8]
 8108f62:	3b01      	subs	r3, #1
 8108f64:	025b      	lsls	r3, r3, #9
 8108f66:	b29b      	uxth	r3, r3
 8108f68:	431a      	orrs	r2, r3
 8108f6a:	687b      	ldr	r3, [r7, #4]
 8108f6c:	68db      	ldr	r3, [r3, #12]
 8108f6e:	3b01      	subs	r3, #1
 8108f70:	041b      	lsls	r3, r3, #16
 8108f72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108f76:	431a      	orrs	r2, r3
 8108f78:	687b      	ldr	r3, [r7, #4]
 8108f7a:	691b      	ldr	r3, [r3, #16]
 8108f7c:	3b01      	subs	r3, #1
 8108f7e:	061b      	lsls	r3, r3, #24
 8108f80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108f84:	4932      	ldr	r1, [pc, #200]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108f86:	4313      	orrs	r3, r2
 8108f88:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8108f8a:	4b31      	ldr	r3, [pc, #196]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108f8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8108f92:	687b      	ldr	r3, [r7, #4]
 8108f94:	695b      	ldr	r3, [r3, #20]
 8108f96:	492e      	ldr	r1, [pc, #184]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108f98:	4313      	orrs	r3, r2
 8108f9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8108f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108fa0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8108fa4:	687b      	ldr	r3, [r7, #4]
 8108fa6:	699b      	ldr	r3, [r3, #24]
 8108fa8:	4929      	ldr	r1, [pc, #164]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108faa:	4313      	orrs	r3, r2
 8108fac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8108fae:	4b28      	ldr	r3, [pc, #160]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108fb2:	4a27      	ldr	r2, [pc, #156]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8108fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8108fba:	4b25      	ldr	r3, [pc, #148]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108fbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108fc2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8108fc6:	687a      	ldr	r2, [r7, #4]
 8108fc8:	69d2      	ldr	r2, [r2, #28]
 8108fca:	00d2      	lsls	r2, r2, #3
 8108fcc:	4920      	ldr	r1, [pc, #128]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108fce:	4313      	orrs	r3, r2
 8108fd0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8108fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8108fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108fde:	683b      	ldr	r3, [r7, #0]
 8108fe0:	2b00      	cmp	r3, #0
 8108fe2:	d106      	bne.n	8108ff2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8108fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108fe8:	4a19      	ldr	r2, [pc, #100]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108fea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8108fee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108ff0:	e00f      	b.n	8109012 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108ff2:	683b      	ldr	r3, [r7, #0]
 8108ff4:	2b01      	cmp	r3, #1
 8108ff6:	d106      	bne.n	8109006 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8108ff8:	4b15      	ldr	r3, [pc, #84]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108ffc:	4a14      	ldr	r2, [pc, #80]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8108ffe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8109002:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8109004:	e005      	b.n	8109012 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8109006:	4b12      	ldr	r3, [pc, #72]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8109008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810900a:	4a11      	ldr	r2, [pc, #68]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 810900c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8109010:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8109012:	4b0f      	ldr	r3, [pc, #60]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8109014:	681b      	ldr	r3, [r3, #0]
 8109016:	4a0e      	ldr	r2, [pc, #56]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 8109018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810901c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810901e:	f7fc ff1f 	bl	8105e60 <HAL_GetTick>
 8109022:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109024:	e008      	b.n	8109038 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8109026:	f7fc ff1b 	bl	8105e60 <HAL_GetTick>
 810902a:	4602      	mov	r2, r0
 810902c:	68bb      	ldr	r3, [r7, #8]
 810902e:	1ad3      	subs	r3, r2, r3
 8109030:	2b02      	cmp	r3, #2
 8109032:	d901      	bls.n	8109038 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8109034:	2303      	movs	r3, #3
 8109036:	e006      	b.n	8109046 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109038:	4b05      	ldr	r3, [pc, #20]	@ (8109050 <RCCEx_PLL3_Config+0x160>)
 810903a:	681b      	ldr	r3, [r3, #0]
 810903c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109040:	2b00      	cmp	r3, #0
 8109042:	d0f0      	beq.n	8109026 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8109044:	7bfb      	ldrb	r3, [r7, #15]
}
 8109046:	4618      	mov	r0, r3
 8109048:	3710      	adds	r7, #16
 810904a:	46bd      	mov	sp, r7
 810904c:	bd80      	pop	{r7, pc}
 810904e:	bf00      	nop
 8109050:	58024400 	.word	0x58024400

08109054 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8109054:	b580      	push	{r7, lr}
 8109056:	b082      	sub	sp, #8
 8109058:	af00      	add	r7, sp, #0
 810905a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810905c:	687b      	ldr	r3, [r7, #4]
 810905e:	2b00      	cmp	r3, #0
 8109060:	d101      	bne.n	8109066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8109062:	2301      	movs	r3, #1
 8109064:	e042      	b.n	81090ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8109066:	687b      	ldr	r3, [r7, #4]
 8109068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810906c:	2b00      	cmp	r3, #0
 810906e:	d106      	bne.n	810907e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8109070:	687b      	ldr	r3, [r7, #4]
 8109072:	2200      	movs	r2, #0
 8109074:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8109078:	6878      	ldr	r0, [r7, #4]
 810907a:	f7f8 fb07 	bl	810168c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810907e:	687b      	ldr	r3, [r7, #4]
 8109080:	2224      	movs	r2, #36	@ 0x24
 8109082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8109086:	687b      	ldr	r3, [r7, #4]
 8109088:	681b      	ldr	r3, [r3, #0]
 810908a:	681a      	ldr	r2, [r3, #0]
 810908c:	687b      	ldr	r3, [r7, #4]
 810908e:	681b      	ldr	r3, [r3, #0]
 8109090:	f022 0201 	bic.w	r2, r2, #1
 8109094:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8109096:	687b      	ldr	r3, [r7, #4]
 8109098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810909a:	2b00      	cmp	r3, #0
 810909c:	d002      	beq.n	81090a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810909e:	6878      	ldr	r0, [r7, #4]
 81090a0:	f001 fa60 	bl	810a564 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81090a4:	6878      	ldr	r0, [r7, #4]
 81090a6:	f000 fcf5 	bl	8109a94 <UART_SetConfig>
 81090aa:	4603      	mov	r3, r0
 81090ac:	2b01      	cmp	r3, #1
 81090ae:	d101      	bne.n	81090b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 81090b0:	2301      	movs	r3, #1
 81090b2:	e01b      	b.n	81090ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81090b4:	687b      	ldr	r3, [r7, #4]
 81090b6:	681b      	ldr	r3, [r3, #0]
 81090b8:	685a      	ldr	r2, [r3, #4]
 81090ba:	687b      	ldr	r3, [r7, #4]
 81090bc:	681b      	ldr	r3, [r3, #0]
 81090be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 81090c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81090c4:	687b      	ldr	r3, [r7, #4]
 81090c6:	681b      	ldr	r3, [r3, #0]
 81090c8:	689a      	ldr	r2, [r3, #8]
 81090ca:	687b      	ldr	r3, [r7, #4]
 81090cc:	681b      	ldr	r3, [r3, #0]
 81090ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 81090d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81090d4:	687b      	ldr	r3, [r7, #4]
 81090d6:	681b      	ldr	r3, [r3, #0]
 81090d8:	681a      	ldr	r2, [r3, #0]
 81090da:	687b      	ldr	r3, [r7, #4]
 81090dc:	681b      	ldr	r3, [r3, #0]
 81090de:	f042 0201 	orr.w	r2, r2, #1
 81090e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81090e4:	6878      	ldr	r0, [r7, #4]
 81090e6:	f001 fadf 	bl	810a6a8 <UART_CheckIdleState>
 81090ea:	4603      	mov	r3, r0
}
 81090ec:	4618      	mov	r0, r3
 81090ee:	3708      	adds	r7, #8
 81090f0:	46bd      	mov	sp, r7
 81090f2:	bd80      	pop	{r7, pc}

081090f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81090f4:	b580      	push	{r7, lr}
 81090f6:	b08a      	sub	sp, #40	@ 0x28
 81090f8:	af02      	add	r7, sp, #8
 81090fa:	60f8      	str	r0, [r7, #12]
 81090fc:	60b9      	str	r1, [r7, #8]
 81090fe:	603b      	str	r3, [r7, #0]
 8109100:	4613      	mov	r3, r2
 8109102:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8109104:	68fb      	ldr	r3, [r7, #12]
 8109106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810910a:	2b20      	cmp	r3, #32
 810910c:	d17b      	bne.n	8109206 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 810910e:	68bb      	ldr	r3, [r7, #8]
 8109110:	2b00      	cmp	r3, #0
 8109112:	d002      	beq.n	810911a <HAL_UART_Transmit+0x26>
 8109114:	88fb      	ldrh	r3, [r7, #6]
 8109116:	2b00      	cmp	r3, #0
 8109118:	d101      	bne.n	810911e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810911a:	2301      	movs	r3, #1
 810911c:	e074      	b.n	8109208 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810911e:	68fb      	ldr	r3, [r7, #12]
 8109120:	2200      	movs	r2, #0
 8109122:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8109126:	68fb      	ldr	r3, [r7, #12]
 8109128:	2221      	movs	r2, #33	@ 0x21
 810912a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810912e:	f7fc fe97 	bl	8105e60 <HAL_GetTick>
 8109132:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8109134:	68fb      	ldr	r3, [r7, #12]
 8109136:	88fa      	ldrh	r2, [r7, #6]
 8109138:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810913c:	68fb      	ldr	r3, [r7, #12]
 810913e:	88fa      	ldrh	r2, [r7, #6]
 8109140:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8109144:	68fb      	ldr	r3, [r7, #12]
 8109146:	689b      	ldr	r3, [r3, #8]
 8109148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810914c:	d108      	bne.n	8109160 <HAL_UART_Transmit+0x6c>
 810914e:	68fb      	ldr	r3, [r7, #12]
 8109150:	691b      	ldr	r3, [r3, #16]
 8109152:	2b00      	cmp	r3, #0
 8109154:	d104      	bne.n	8109160 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8109156:	2300      	movs	r3, #0
 8109158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810915a:	68bb      	ldr	r3, [r7, #8]
 810915c:	61bb      	str	r3, [r7, #24]
 810915e:	e003      	b.n	8109168 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8109160:	68bb      	ldr	r3, [r7, #8]
 8109162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8109164:	2300      	movs	r3, #0
 8109166:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8109168:	e030      	b.n	81091cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810916a:	683b      	ldr	r3, [r7, #0]
 810916c:	9300      	str	r3, [sp, #0]
 810916e:	697b      	ldr	r3, [r7, #20]
 8109170:	2200      	movs	r2, #0
 8109172:	2180      	movs	r1, #128	@ 0x80
 8109174:	68f8      	ldr	r0, [r7, #12]
 8109176:	f001 fb41 	bl	810a7fc <UART_WaitOnFlagUntilTimeout>
 810917a:	4603      	mov	r3, r0
 810917c:	2b00      	cmp	r3, #0
 810917e:	d005      	beq.n	810918c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8109180:	68fb      	ldr	r3, [r7, #12]
 8109182:	2220      	movs	r2, #32
 8109184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8109188:	2303      	movs	r3, #3
 810918a:	e03d      	b.n	8109208 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810918c:	69fb      	ldr	r3, [r7, #28]
 810918e:	2b00      	cmp	r3, #0
 8109190:	d10b      	bne.n	81091aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8109192:	69bb      	ldr	r3, [r7, #24]
 8109194:	881b      	ldrh	r3, [r3, #0]
 8109196:	461a      	mov	r2, r3
 8109198:	68fb      	ldr	r3, [r7, #12]
 810919a:	681b      	ldr	r3, [r3, #0]
 810919c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81091a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 81091a2:	69bb      	ldr	r3, [r7, #24]
 81091a4:	3302      	adds	r3, #2
 81091a6:	61bb      	str	r3, [r7, #24]
 81091a8:	e007      	b.n	81091ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81091aa:	69fb      	ldr	r3, [r7, #28]
 81091ac:	781a      	ldrb	r2, [r3, #0]
 81091ae:	68fb      	ldr	r3, [r7, #12]
 81091b0:	681b      	ldr	r3, [r3, #0]
 81091b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 81091b4:	69fb      	ldr	r3, [r7, #28]
 81091b6:	3301      	adds	r3, #1
 81091b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81091ba:	68fb      	ldr	r3, [r7, #12]
 81091bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81091c0:	b29b      	uxth	r3, r3
 81091c2:	3b01      	subs	r3, #1
 81091c4:	b29a      	uxth	r2, r3
 81091c6:	68fb      	ldr	r3, [r7, #12]
 81091c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 81091cc:	68fb      	ldr	r3, [r7, #12]
 81091ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81091d2:	b29b      	uxth	r3, r3
 81091d4:	2b00      	cmp	r3, #0
 81091d6:	d1c8      	bne.n	810916a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81091d8:	683b      	ldr	r3, [r7, #0]
 81091da:	9300      	str	r3, [sp, #0]
 81091dc:	697b      	ldr	r3, [r7, #20]
 81091de:	2200      	movs	r2, #0
 81091e0:	2140      	movs	r1, #64	@ 0x40
 81091e2:	68f8      	ldr	r0, [r7, #12]
 81091e4:	f001 fb0a 	bl	810a7fc <UART_WaitOnFlagUntilTimeout>
 81091e8:	4603      	mov	r3, r0
 81091ea:	2b00      	cmp	r3, #0
 81091ec:	d005      	beq.n	81091fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 81091ee:	68fb      	ldr	r3, [r7, #12]
 81091f0:	2220      	movs	r2, #32
 81091f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 81091f6:	2303      	movs	r3, #3
 81091f8:	e006      	b.n	8109208 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81091fa:	68fb      	ldr	r3, [r7, #12]
 81091fc:	2220      	movs	r2, #32
 81091fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8109202:	2300      	movs	r3, #0
 8109204:	e000      	b.n	8109208 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8109206:	2302      	movs	r3, #2
  }
}
 8109208:	4618      	mov	r0, r3
 810920a:	3720      	adds	r7, #32
 810920c:	46bd      	mov	sp, r7
 810920e:	bd80      	pop	{r7, pc}

08109210 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8109210:	b580      	push	{r7, lr}
 8109212:	b08a      	sub	sp, #40	@ 0x28
 8109214:	af00      	add	r7, sp, #0
 8109216:	60f8      	str	r0, [r7, #12]
 8109218:	60b9      	str	r1, [r7, #8]
 810921a:	4613      	mov	r3, r2
 810921c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810921e:	68fb      	ldr	r3, [r7, #12]
 8109220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8109224:	2b20      	cmp	r3, #32
 8109226:	d137      	bne.n	8109298 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8109228:	68bb      	ldr	r3, [r7, #8]
 810922a:	2b00      	cmp	r3, #0
 810922c:	d002      	beq.n	8109234 <HAL_UART_Receive_IT+0x24>
 810922e:	88fb      	ldrh	r3, [r7, #6]
 8109230:	2b00      	cmp	r3, #0
 8109232:	d101      	bne.n	8109238 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8109234:	2301      	movs	r3, #1
 8109236:	e030      	b.n	810929a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109238:	68fb      	ldr	r3, [r7, #12]
 810923a:	2200      	movs	r2, #0
 810923c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810923e:	68fb      	ldr	r3, [r7, #12]
 8109240:	681b      	ldr	r3, [r3, #0]
 8109242:	4a18      	ldr	r2, [pc, #96]	@ (81092a4 <HAL_UART_Receive_IT+0x94>)
 8109244:	4293      	cmp	r3, r2
 8109246:	d01f      	beq.n	8109288 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8109248:	68fb      	ldr	r3, [r7, #12]
 810924a:	681b      	ldr	r3, [r3, #0]
 810924c:	685b      	ldr	r3, [r3, #4]
 810924e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8109252:	2b00      	cmp	r3, #0
 8109254:	d018      	beq.n	8109288 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8109256:	68fb      	ldr	r3, [r7, #12]
 8109258:	681b      	ldr	r3, [r3, #0]
 810925a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810925c:	697b      	ldr	r3, [r7, #20]
 810925e:	e853 3f00 	ldrex	r3, [r3]
 8109262:	613b      	str	r3, [r7, #16]
   return(result);
 8109264:	693b      	ldr	r3, [r7, #16]
 8109266:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810926a:	627b      	str	r3, [r7, #36]	@ 0x24
 810926c:	68fb      	ldr	r3, [r7, #12]
 810926e:	681b      	ldr	r3, [r3, #0]
 8109270:	461a      	mov	r2, r3
 8109272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109274:	623b      	str	r3, [r7, #32]
 8109276:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109278:	69f9      	ldr	r1, [r7, #28]
 810927a:	6a3a      	ldr	r2, [r7, #32]
 810927c:	e841 2300 	strex	r3, r2, [r1]
 8109280:	61bb      	str	r3, [r7, #24]
   return(result);
 8109282:	69bb      	ldr	r3, [r7, #24]
 8109284:	2b00      	cmp	r3, #0
 8109286:	d1e6      	bne.n	8109256 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8109288:	88fb      	ldrh	r3, [r7, #6]
 810928a:	461a      	mov	r2, r3
 810928c:	68b9      	ldr	r1, [r7, #8]
 810928e:	68f8      	ldr	r0, [r7, #12]
 8109290:	f001 fb22 	bl	810a8d8 <UART_Start_Receive_IT>
 8109294:	4603      	mov	r3, r0
 8109296:	e000      	b.n	810929a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8109298:	2302      	movs	r3, #2
  }
}
 810929a:	4618      	mov	r0, r3
 810929c:	3728      	adds	r7, #40	@ 0x28
 810929e:	46bd      	mov	sp, r7
 81092a0:	bd80      	pop	{r7, pc}
 81092a2:	bf00      	nop
 81092a4:	58000c00 	.word	0x58000c00

081092a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 81092a8:	b580      	push	{r7, lr}
 81092aa:	b0ba      	sub	sp, #232	@ 0xe8
 81092ac:	af00      	add	r7, sp, #0
 81092ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 81092b0:	687b      	ldr	r3, [r7, #4]
 81092b2:	681b      	ldr	r3, [r3, #0]
 81092b4:	69db      	ldr	r3, [r3, #28]
 81092b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 81092ba:	687b      	ldr	r3, [r7, #4]
 81092bc:	681b      	ldr	r3, [r3, #0]
 81092be:	681b      	ldr	r3, [r3, #0]
 81092c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 81092c4:	687b      	ldr	r3, [r7, #4]
 81092c6:	681b      	ldr	r3, [r3, #0]
 81092c8:	689b      	ldr	r3, [r3, #8]
 81092ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 81092ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 81092d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 81092d6:	4013      	ands	r3, r2
 81092d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 81092dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 81092e0:	2b00      	cmp	r3, #0
 81092e2:	d11b      	bne.n	810931c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81092e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81092e8:	f003 0320 	and.w	r3, r3, #32
 81092ec:	2b00      	cmp	r3, #0
 81092ee:	d015      	beq.n	810931c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81092f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 81092f4:	f003 0320 	and.w	r3, r3, #32
 81092f8:	2b00      	cmp	r3, #0
 81092fa:	d105      	bne.n	8109308 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81092fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8109304:	2b00      	cmp	r3, #0
 8109306:	d009      	beq.n	810931c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8109308:	687b      	ldr	r3, [r7, #4]
 810930a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810930c:	2b00      	cmp	r3, #0
 810930e:	f000 8395 	beq.w	8109a3c <HAL_UART_IRQHandler+0x794>
      {
        huart->RxISR(huart);
 8109312:	687b      	ldr	r3, [r7, #4]
 8109314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8109316:	6878      	ldr	r0, [r7, #4]
 8109318:	4798      	blx	r3
      }
      return;
 810931a:	e38f      	b.n	8109a3c <HAL_UART_IRQHandler+0x794>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810931c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8109320:	2b00      	cmp	r3, #0
 8109322:	f000 8123 	beq.w	810956c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8109326:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 810932a:	4b8d      	ldr	r3, [pc, #564]	@ (8109560 <HAL_UART_IRQHandler+0x2b8>)
 810932c:	4013      	ands	r3, r2
 810932e:	2b00      	cmp	r3, #0
 8109330:	d106      	bne.n	8109340 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8109332:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8109336:	4b8b      	ldr	r3, [pc, #556]	@ (8109564 <HAL_UART_IRQHandler+0x2bc>)
 8109338:	4013      	ands	r3, r2
 810933a:	2b00      	cmp	r3, #0
 810933c:	f000 8116 	beq.w	810956c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8109340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109344:	f003 0301 	and.w	r3, r3, #1
 8109348:	2b00      	cmp	r3, #0
 810934a:	d011      	beq.n	8109370 <HAL_UART_IRQHandler+0xc8>
 810934c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109354:	2b00      	cmp	r3, #0
 8109356:	d00b      	beq.n	8109370 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8109358:	687b      	ldr	r3, [r7, #4]
 810935a:	681b      	ldr	r3, [r3, #0]
 810935c:	2201      	movs	r2, #1
 810935e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8109360:	687b      	ldr	r3, [r7, #4]
 8109362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109366:	f043 0201 	orr.w	r2, r3, #1
 810936a:	687b      	ldr	r3, [r7, #4]
 810936c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8109370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109374:	f003 0302 	and.w	r3, r3, #2
 8109378:	2b00      	cmp	r3, #0
 810937a:	d011      	beq.n	81093a0 <HAL_UART_IRQHandler+0xf8>
 810937c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109380:	f003 0301 	and.w	r3, r3, #1
 8109384:	2b00      	cmp	r3, #0
 8109386:	d00b      	beq.n	81093a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8109388:	687b      	ldr	r3, [r7, #4]
 810938a:	681b      	ldr	r3, [r3, #0]
 810938c:	2202      	movs	r2, #2
 810938e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8109390:	687b      	ldr	r3, [r7, #4]
 8109392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109396:	f043 0204 	orr.w	r2, r3, #4
 810939a:	687b      	ldr	r3, [r7, #4]
 810939c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81093a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81093a4:	f003 0304 	and.w	r3, r3, #4
 81093a8:	2b00      	cmp	r3, #0
 81093aa:	d011      	beq.n	81093d0 <HAL_UART_IRQHandler+0x128>
 81093ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 81093b0:	f003 0301 	and.w	r3, r3, #1
 81093b4:	2b00      	cmp	r3, #0
 81093b6:	d00b      	beq.n	81093d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 81093b8:	687b      	ldr	r3, [r7, #4]
 81093ba:	681b      	ldr	r3, [r3, #0]
 81093bc:	2204      	movs	r2, #4
 81093be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 81093c0:	687b      	ldr	r3, [r7, #4]
 81093c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81093c6:	f043 0202 	orr.w	r2, r3, #2
 81093ca:	687b      	ldr	r3, [r7, #4]
 81093cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 81093d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81093d4:	f003 0308 	and.w	r3, r3, #8
 81093d8:	2b00      	cmp	r3, #0
 81093da:	d017      	beq.n	810940c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81093dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 81093e0:	f003 0320 	and.w	r3, r3, #32
 81093e4:	2b00      	cmp	r3, #0
 81093e6:	d105      	bne.n	81093f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 81093e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 81093ec:	4b5c      	ldr	r3, [pc, #368]	@ (8109560 <HAL_UART_IRQHandler+0x2b8>)
 81093ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81093f0:	2b00      	cmp	r3, #0
 81093f2:	d00b      	beq.n	810940c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 81093f4:	687b      	ldr	r3, [r7, #4]
 81093f6:	681b      	ldr	r3, [r3, #0]
 81093f8:	2208      	movs	r2, #8
 81093fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 81093fc:	687b      	ldr	r3, [r7, #4]
 81093fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109402:	f043 0208 	orr.w	r2, r3, #8
 8109406:	687b      	ldr	r3, [r7, #4]
 8109408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810940c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109410:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8109414:	2b00      	cmp	r3, #0
 8109416:	d012      	beq.n	810943e <HAL_UART_IRQHandler+0x196>
 8109418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810941c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8109420:	2b00      	cmp	r3, #0
 8109422:	d00c      	beq.n	810943e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8109424:	687b      	ldr	r3, [r7, #4]
 8109426:	681b      	ldr	r3, [r3, #0]
 8109428:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810942c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810942e:	687b      	ldr	r3, [r7, #4]
 8109430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109434:	f043 0220 	orr.w	r2, r3, #32
 8109438:	687b      	ldr	r3, [r7, #4]
 810943a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810943e:	687b      	ldr	r3, [r7, #4]
 8109440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109444:	2b00      	cmp	r3, #0
 8109446:	f000 82fb 	beq.w	8109a40 <HAL_UART_IRQHandler+0x798>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810944a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810944e:	f003 0320 	and.w	r3, r3, #32
 8109452:	2b00      	cmp	r3, #0
 8109454:	d013      	beq.n	810947e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8109456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810945a:	f003 0320 	and.w	r3, r3, #32
 810945e:	2b00      	cmp	r3, #0
 8109460:	d105      	bne.n	810946e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8109462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810946a:	2b00      	cmp	r3, #0
 810946c:	d007      	beq.n	810947e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 810946e:	687b      	ldr	r3, [r7, #4]
 8109470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8109472:	2b00      	cmp	r3, #0
 8109474:	d003      	beq.n	810947e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8109476:	687b      	ldr	r3, [r7, #4]
 8109478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810947a:	6878      	ldr	r0, [r7, #4]
 810947c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810947e:	687b      	ldr	r3, [r7, #4]
 8109480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109484:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8109488:	687b      	ldr	r3, [r7, #4]
 810948a:	681b      	ldr	r3, [r3, #0]
 810948c:	689b      	ldr	r3, [r3, #8]
 810948e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109492:	2b40      	cmp	r3, #64	@ 0x40
 8109494:	d005      	beq.n	81094a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8109496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 810949a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810949e:	2b00      	cmp	r3, #0
 81094a0:	d054      	beq.n	810954c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 81094a2:	6878      	ldr	r0, [r7, #4]
 81094a4:	f001 fb3a 	bl	810ab1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81094a8:	687b      	ldr	r3, [r7, #4]
 81094aa:	681b      	ldr	r3, [r3, #0]
 81094ac:	689b      	ldr	r3, [r3, #8]
 81094ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81094b2:	2b40      	cmp	r3, #64	@ 0x40
 81094b4:	d146      	bne.n	8109544 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81094b6:	687b      	ldr	r3, [r7, #4]
 81094b8:	681b      	ldr	r3, [r3, #0]
 81094ba:	3308      	adds	r3, #8
 81094bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81094c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 81094c4:	e853 3f00 	ldrex	r3, [r3]
 81094c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 81094cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 81094d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 81094d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 81094d8:	687b      	ldr	r3, [r7, #4]
 81094da:	681b      	ldr	r3, [r3, #0]
 81094dc:	3308      	adds	r3, #8
 81094de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 81094e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 81094e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81094ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 81094ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 81094f2:	e841 2300 	strex	r3, r2, [r1]
 81094f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 81094fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 81094fe:	2b00      	cmp	r3, #0
 8109500:	d1d9      	bne.n	81094b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8109502:	687b      	ldr	r3, [r7, #4]
 8109504:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109508:	2b00      	cmp	r3, #0
 810950a:	d017      	beq.n	810953c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810950c:	687b      	ldr	r3, [r7, #4]
 810950e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109512:	4a15      	ldr	r2, [pc, #84]	@ (8109568 <HAL_UART_IRQHandler+0x2c0>)
 8109514:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8109516:	687b      	ldr	r3, [r7, #4]
 8109518:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810951c:	4618      	mov	r0, r3
 810951e:	f7fd f8eb 	bl	81066f8 <HAL_DMA_Abort_IT>
 8109522:	4603      	mov	r3, r0
 8109524:	2b00      	cmp	r3, #0
 8109526:	d019      	beq.n	810955c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8109528:	687b      	ldr	r3, [r7, #4]
 810952a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810952e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109530:	687a      	ldr	r2, [r7, #4]
 8109532:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8109536:	4610      	mov	r0, r2
 8109538:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810953a:	e00f      	b.n	810955c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810953c:	6878      	ldr	r0, [r7, #4]
 810953e:	f000 fa93 	bl	8109a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109542:	e00b      	b.n	810955c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8109544:	6878      	ldr	r0, [r7, #4]
 8109546:	f000 fa8f 	bl	8109a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810954a:	e007      	b.n	810955c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810954c:	6878      	ldr	r0, [r7, #4]
 810954e:	f000 fa8b 	bl	8109a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109552:	687b      	ldr	r3, [r7, #4]
 8109554:	2200      	movs	r2, #0
 8109556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 810955a:	e271      	b.n	8109a40 <HAL_UART_IRQHandler+0x798>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810955c:	bf00      	nop
    return;
 810955e:	e26f      	b.n	8109a40 <HAL_UART_IRQHandler+0x798>
 8109560:	10000001 	.word	0x10000001
 8109564:	04000120 	.word	0x04000120
 8109568:	0810abe9 	.word	0x0810abe9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810956c:	687b      	ldr	r3, [r7, #4]
 810956e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109570:	2b01      	cmp	r3, #1
 8109572:	f040 8205 	bne.w	8109980 <HAL_UART_IRQHandler+0x6d8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8109576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810957a:	f003 0310 	and.w	r3, r3, #16
 810957e:	2b00      	cmp	r3, #0
 8109580:	f000 81fe 	beq.w	8109980 <HAL_UART_IRQHandler+0x6d8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8109584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109588:	f003 0310 	and.w	r3, r3, #16
 810958c:	2b00      	cmp	r3, #0
 810958e:	f000 81f7 	beq.w	8109980 <HAL_UART_IRQHandler+0x6d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8109592:	687b      	ldr	r3, [r7, #4]
 8109594:	681b      	ldr	r3, [r3, #0]
 8109596:	2210      	movs	r2, #16
 8109598:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810959a:	687b      	ldr	r3, [r7, #4]
 810959c:	681b      	ldr	r3, [r3, #0]
 810959e:	689b      	ldr	r3, [r3, #8]
 81095a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81095a4:	2b40      	cmp	r3, #64	@ 0x40
 81095a6:	f040 816d 	bne.w	8109884 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 81095aa:	687b      	ldr	r3, [r7, #4]
 81095ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81095b0:	681b      	ldr	r3, [r3, #0]
 81095b2:	4aa4      	ldr	r2, [pc, #656]	@ (8109844 <HAL_UART_IRQHandler+0x59c>)
 81095b4:	4293      	cmp	r3, r2
 81095b6:	d068      	beq.n	810968a <HAL_UART_IRQHandler+0x3e2>
 81095b8:	687b      	ldr	r3, [r7, #4]
 81095ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81095be:	681b      	ldr	r3, [r3, #0]
 81095c0:	4aa1      	ldr	r2, [pc, #644]	@ (8109848 <HAL_UART_IRQHandler+0x5a0>)
 81095c2:	4293      	cmp	r3, r2
 81095c4:	d061      	beq.n	810968a <HAL_UART_IRQHandler+0x3e2>
 81095c6:	687b      	ldr	r3, [r7, #4]
 81095c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81095cc:	681b      	ldr	r3, [r3, #0]
 81095ce:	4a9f      	ldr	r2, [pc, #636]	@ (810984c <HAL_UART_IRQHandler+0x5a4>)
 81095d0:	4293      	cmp	r3, r2
 81095d2:	d05a      	beq.n	810968a <HAL_UART_IRQHandler+0x3e2>
 81095d4:	687b      	ldr	r3, [r7, #4]
 81095d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81095da:	681b      	ldr	r3, [r3, #0]
 81095dc:	4a9c      	ldr	r2, [pc, #624]	@ (8109850 <HAL_UART_IRQHandler+0x5a8>)
 81095de:	4293      	cmp	r3, r2
 81095e0:	d053      	beq.n	810968a <HAL_UART_IRQHandler+0x3e2>
 81095e2:	687b      	ldr	r3, [r7, #4]
 81095e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81095e8:	681b      	ldr	r3, [r3, #0]
 81095ea:	4a9a      	ldr	r2, [pc, #616]	@ (8109854 <HAL_UART_IRQHandler+0x5ac>)
 81095ec:	4293      	cmp	r3, r2
 81095ee:	d04c      	beq.n	810968a <HAL_UART_IRQHandler+0x3e2>
 81095f0:	687b      	ldr	r3, [r7, #4]
 81095f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81095f6:	681b      	ldr	r3, [r3, #0]
 81095f8:	4a97      	ldr	r2, [pc, #604]	@ (8109858 <HAL_UART_IRQHandler+0x5b0>)
 81095fa:	4293      	cmp	r3, r2
 81095fc:	d045      	beq.n	810968a <HAL_UART_IRQHandler+0x3e2>
 81095fe:	687b      	ldr	r3, [r7, #4]
 8109600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109604:	681b      	ldr	r3, [r3, #0]
 8109606:	4a95      	ldr	r2, [pc, #596]	@ (810985c <HAL_UART_IRQHandler+0x5b4>)
 8109608:	4293      	cmp	r3, r2
 810960a:	d03e      	beq.n	810968a <HAL_UART_IRQHandler+0x3e2>
 810960c:	687b      	ldr	r3, [r7, #4]
 810960e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109612:	681b      	ldr	r3, [r3, #0]
 8109614:	4a92      	ldr	r2, [pc, #584]	@ (8109860 <HAL_UART_IRQHandler+0x5b8>)
 8109616:	4293      	cmp	r3, r2
 8109618:	d037      	beq.n	810968a <HAL_UART_IRQHandler+0x3e2>
 810961a:	687b      	ldr	r3, [r7, #4]
 810961c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109620:	681b      	ldr	r3, [r3, #0]
 8109622:	4a90      	ldr	r2, [pc, #576]	@ (8109864 <HAL_UART_IRQHandler+0x5bc>)
 8109624:	4293      	cmp	r3, r2
 8109626:	d030      	beq.n	810968a <HAL_UART_IRQHandler+0x3e2>
 8109628:	687b      	ldr	r3, [r7, #4]
 810962a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810962e:	681b      	ldr	r3, [r3, #0]
 8109630:	4a8d      	ldr	r2, [pc, #564]	@ (8109868 <HAL_UART_IRQHandler+0x5c0>)
 8109632:	4293      	cmp	r3, r2
 8109634:	d029      	beq.n	810968a <HAL_UART_IRQHandler+0x3e2>
 8109636:	687b      	ldr	r3, [r7, #4]
 8109638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810963c:	681b      	ldr	r3, [r3, #0]
 810963e:	4a8b      	ldr	r2, [pc, #556]	@ (810986c <HAL_UART_IRQHandler+0x5c4>)
 8109640:	4293      	cmp	r3, r2
 8109642:	d022      	beq.n	810968a <HAL_UART_IRQHandler+0x3e2>
 8109644:	687b      	ldr	r3, [r7, #4]
 8109646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810964a:	681b      	ldr	r3, [r3, #0]
 810964c:	4a88      	ldr	r2, [pc, #544]	@ (8109870 <HAL_UART_IRQHandler+0x5c8>)
 810964e:	4293      	cmp	r3, r2
 8109650:	d01b      	beq.n	810968a <HAL_UART_IRQHandler+0x3e2>
 8109652:	687b      	ldr	r3, [r7, #4]
 8109654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109658:	681b      	ldr	r3, [r3, #0]
 810965a:	4a86      	ldr	r2, [pc, #536]	@ (8109874 <HAL_UART_IRQHandler+0x5cc>)
 810965c:	4293      	cmp	r3, r2
 810965e:	d014      	beq.n	810968a <HAL_UART_IRQHandler+0x3e2>
 8109660:	687b      	ldr	r3, [r7, #4]
 8109662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109666:	681b      	ldr	r3, [r3, #0]
 8109668:	4a83      	ldr	r2, [pc, #524]	@ (8109878 <HAL_UART_IRQHandler+0x5d0>)
 810966a:	4293      	cmp	r3, r2
 810966c:	d00d      	beq.n	810968a <HAL_UART_IRQHandler+0x3e2>
 810966e:	687b      	ldr	r3, [r7, #4]
 8109670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109674:	681b      	ldr	r3, [r3, #0]
 8109676:	4a81      	ldr	r2, [pc, #516]	@ (810987c <HAL_UART_IRQHandler+0x5d4>)
 8109678:	4293      	cmp	r3, r2
 810967a:	d006      	beq.n	810968a <HAL_UART_IRQHandler+0x3e2>
 810967c:	687b      	ldr	r3, [r7, #4]
 810967e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109682:	681b      	ldr	r3, [r3, #0]
 8109684:	4a7e      	ldr	r2, [pc, #504]	@ (8109880 <HAL_UART_IRQHandler+0x5d8>)
 8109686:	4293      	cmp	r3, r2
 8109688:	d106      	bne.n	8109698 <HAL_UART_IRQHandler+0x3f0>
 810968a:	687b      	ldr	r3, [r7, #4]
 810968c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109690:	681b      	ldr	r3, [r3, #0]
 8109692:	685b      	ldr	r3, [r3, #4]
 8109694:	b29b      	uxth	r3, r3
 8109696:	e005      	b.n	81096a4 <HAL_UART_IRQHandler+0x3fc>
 8109698:	687b      	ldr	r3, [r7, #4]
 810969a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810969e:	681b      	ldr	r3, [r3, #0]
 81096a0:	685b      	ldr	r3, [r3, #4]
 81096a2:	b29b      	uxth	r3, r3
 81096a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 81096a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 81096ac:	2b00      	cmp	r3, #0
 81096ae:	f000 80ad 	beq.w	810980c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 81096b2:	687b      	ldr	r3, [r7, #4]
 81096b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 81096b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 81096bc:	429a      	cmp	r2, r3
 81096be:	f080 80a5 	bcs.w	810980c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 81096c2:	687b      	ldr	r3, [r7, #4]
 81096c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 81096c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 81096cc:	687b      	ldr	r3, [r7, #4]
 81096ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81096d2:	69db      	ldr	r3, [r3, #28]
 81096d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81096d8:	f000 8087 	beq.w	81097ea <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 81096dc:	687b      	ldr	r3, [r7, #4]
 81096de:	681b      	ldr	r3, [r3, #0]
 81096e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81096e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 81096e8:	e853 3f00 	ldrex	r3, [r3]
 81096ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 81096f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 81096f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81096f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81096fc:	687b      	ldr	r3, [r7, #4]
 81096fe:	681b      	ldr	r3, [r3, #0]
 8109700:	461a      	mov	r2, r3
 8109702:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8109706:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810970a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810970e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8109712:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8109716:	e841 2300 	strex	r3, r2, [r1]
 810971a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 810971e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8109722:	2b00      	cmp	r3, #0
 8109724:	d1da      	bne.n	81096dc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8109726:	687b      	ldr	r3, [r7, #4]
 8109728:	681b      	ldr	r3, [r3, #0]
 810972a:	3308      	adds	r3, #8
 810972c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810972e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8109730:	e853 3f00 	ldrex	r3, [r3]
 8109734:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8109736:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8109738:	f023 0301 	bic.w	r3, r3, #1
 810973c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8109740:	687b      	ldr	r3, [r7, #4]
 8109742:	681b      	ldr	r3, [r3, #0]
 8109744:	3308      	adds	r3, #8
 8109746:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 810974a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 810974e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109750:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8109752:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8109756:	e841 2300 	strex	r3, r2, [r1]
 810975a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 810975c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810975e:	2b00      	cmp	r3, #0
 8109760:	d1e1      	bne.n	8109726 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8109762:	687b      	ldr	r3, [r7, #4]
 8109764:	681b      	ldr	r3, [r3, #0]
 8109766:	3308      	adds	r3, #8
 8109768:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810976a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810976c:	e853 3f00 	ldrex	r3, [r3]
 8109770:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8109772:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8109774:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8109778:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810977c:	687b      	ldr	r3, [r7, #4]
 810977e:	681b      	ldr	r3, [r3, #0]
 8109780:	3308      	adds	r3, #8
 8109782:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8109786:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8109788:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810978a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 810978c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810978e:	e841 2300 	strex	r3, r2, [r1]
 8109792:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8109794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8109796:	2b00      	cmp	r3, #0
 8109798:	d1e3      	bne.n	8109762 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810979a:	687b      	ldr	r3, [r7, #4]
 810979c:	2220      	movs	r2, #32
 810979e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81097a2:	687b      	ldr	r3, [r7, #4]
 81097a4:	2200      	movs	r2, #0
 81097a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81097a8:	687b      	ldr	r3, [r7, #4]
 81097aa:	681b      	ldr	r3, [r3, #0]
 81097ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81097ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81097b0:	e853 3f00 	ldrex	r3, [r3]
 81097b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 81097b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81097b8:	f023 0310 	bic.w	r3, r3, #16
 81097bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 81097c0:	687b      	ldr	r3, [r7, #4]
 81097c2:	681b      	ldr	r3, [r3, #0]
 81097c4:	461a      	mov	r2, r3
 81097c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 81097ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 81097cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81097ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 81097d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 81097d2:	e841 2300 	strex	r3, r2, [r1]
 81097d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 81097d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81097da:	2b00      	cmp	r3, #0
 81097dc:	d1e4      	bne.n	81097a8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 81097de:	687b      	ldr	r3, [r7, #4]
 81097e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81097e4:	4618      	mov	r0, r3
 81097e6:	f7fc fc69 	bl	81060bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 81097ea:	687b      	ldr	r3, [r7, #4]
 81097ec:	2202      	movs	r2, #2
 81097ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 81097f0:	687b      	ldr	r3, [r7, #4]
 81097f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 81097f6:	687b      	ldr	r3, [r7, #4]
 81097f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 81097fc:	b29b      	uxth	r3, r3
 81097fe:	1ad3      	subs	r3, r2, r3
 8109800:	b29b      	uxth	r3, r3
 8109802:	4619      	mov	r1, r3
 8109804:	6878      	ldr	r0, [r7, #4]
 8109806:	f000 f939 	bl	8109a7c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 810980a:	e11b      	b.n	8109a44 <HAL_UART_IRQHandler+0x79c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 810980c:	687b      	ldr	r3, [r7, #4]
 810980e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8109812:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8109816:	429a      	cmp	r2, r3
 8109818:	f040 8114 	bne.w	8109a44 <HAL_UART_IRQHandler+0x79c>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 810981c:	687b      	ldr	r3, [r7, #4]
 810981e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109822:	69db      	ldr	r3, [r3, #28]
 8109824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109828:	f040 810c 	bne.w	8109a44 <HAL_UART_IRQHandler+0x79c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810982c:	687b      	ldr	r3, [r7, #4]
 810982e:	2202      	movs	r2, #2
 8109830:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8109832:	687b      	ldr	r3, [r7, #4]
 8109834:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8109838:	4619      	mov	r1, r3
 810983a:	6878      	ldr	r0, [r7, #4]
 810983c:	f000 f91e 	bl	8109a7c <HAL_UARTEx_RxEventCallback>
      return;
 8109840:	e100      	b.n	8109a44 <HAL_UART_IRQHandler+0x79c>
 8109842:	bf00      	nop
 8109844:	40020010 	.word	0x40020010
 8109848:	40020028 	.word	0x40020028
 810984c:	40020040 	.word	0x40020040
 8109850:	40020058 	.word	0x40020058
 8109854:	40020070 	.word	0x40020070
 8109858:	40020088 	.word	0x40020088
 810985c:	400200a0 	.word	0x400200a0
 8109860:	400200b8 	.word	0x400200b8
 8109864:	40020410 	.word	0x40020410
 8109868:	40020428 	.word	0x40020428
 810986c:	40020440 	.word	0x40020440
 8109870:	40020458 	.word	0x40020458
 8109874:	40020470 	.word	0x40020470
 8109878:	40020488 	.word	0x40020488
 810987c:	400204a0 	.word	0x400204a0
 8109880:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8109884:	687b      	ldr	r3, [r7, #4]
 8109886:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810988a:	687b      	ldr	r3, [r7, #4]
 810988c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8109890:	b29b      	uxth	r3, r3
 8109892:	1ad3      	subs	r3, r2, r3
 8109894:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8109898:	687b      	ldr	r3, [r7, #4]
 810989a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810989e:	b29b      	uxth	r3, r3
 81098a0:	2b00      	cmp	r3, #0
 81098a2:	f000 80d1 	beq.w	8109a48 <HAL_UART_IRQHandler+0x7a0>
          && (nb_rx_data > 0U))
 81098a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 81098aa:	2b00      	cmp	r3, #0
 81098ac:	f000 80cc 	beq.w	8109a48 <HAL_UART_IRQHandler+0x7a0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81098b0:	687b      	ldr	r3, [r7, #4]
 81098b2:	681b      	ldr	r3, [r3, #0]
 81098b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81098b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81098b8:	e853 3f00 	ldrex	r3, [r3]
 81098bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 81098be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81098c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81098c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81098c8:	687b      	ldr	r3, [r7, #4]
 81098ca:	681b      	ldr	r3, [r3, #0]
 81098cc:	461a      	mov	r2, r3
 81098ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 81098d2:	647b      	str	r3, [r7, #68]	@ 0x44
 81098d4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81098d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 81098d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81098da:	e841 2300 	strex	r3, r2, [r1]
 81098de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 81098e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81098e2:	2b00      	cmp	r3, #0
 81098e4:	d1e4      	bne.n	81098b0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81098e6:	687b      	ldr	r3, [r7, #4]
 81098e8:	681b      	ldr	r3, [r3, #0]
 81098ea:	3308      	adds	r3, #8
 81098ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81098ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81098f0:	e853 3f00 	ldrex	r3, [r3]
 81098f4:	623b      	str	r3, [r7, #32]
   return(result);
 81098f6:	6a3b      	ldr	r3, [r7, #32]
 81098f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81098fc:	f023 0301 	bic.w	r3, r3, #1
 8109900:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8109904:	687b      	ldr	r3, [r7, #4]
 8109906:	681b      	ldr	r3, [r3, #0]
 8109908:	3308      	adds	r3, #8
 810990a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 810990e:	633a      	str	r2, [r7, #48]	@ 0x30
 8109910:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109912:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8109914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109916:	e841 2300 	strex	r3, r2, [r1]
 810991a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810991c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810991e:	2b00      	cmp	r3, #0
 8109920:	d1e1      	bne.n	81098e6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8109922:	687b      	ldr	r3, [r7, #4]
 8109924:	2220      	movs	r2, #32
 8109926:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810992a:	687b      	ldr	r3, [r7, #4]
 810992c:	2200      	movs	r2, #0
 810992e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8109930:	687b      	ldr	r3, [r7, #4]
 8109932:	2200      	movs	r2, #0
 8109934:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109936:	687b      	ldr	r3, [r7, #4]
 8109938:	681b      	ldr	r3, [r3, #0]
 810993a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810993c:	693b      	ldr	r3, [r7, #16]
 810993e:	e853 3f00 	ldrex	r3, [r3]
 8109942:	60fb      	str	r3, [r7, #12]
   return(result);
 8109944:	68fb      	ldr	r3, [r7, #12]
 8109946:	f023 0310 	bic.w	r3, r3, #16
 810994a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810994e:	687b      	ldr	r3, [r7, #4]
 8109950:	681b      	ldr	r3, [r3, #0]
 8109952:	461a      	mov	r2, r3
 8109954:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8109958:	61fb      	str	r3, [r7, #28]
 810995a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810995c:	69b9      	ldr	r1, [r7, #24]
 810995e:	69fa      	ldr	r2, [r7, #28]
 8109960:	e841 2300 	strex	r3, r2, [r1]
 8109964:	617b      	str	r3, [r7, #20]
   return(result);
 8109966:	697b      	ldr	r3, [r7, #20]
 8109968:	2b00      	cmp	r3, #0
 810996a:	d1e4      	bne.n	8109936 <HAL_UART_IRQHandler+0x68e>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810996c:	687b      	ldr	r3, [r7, #4]
 810996e:	2202      	movs	r2, #2
 8109970:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8109972:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8109976:	4619      	mov	r1, r3
 8109978:	6878      	ldr	r0, [r7, #4]
 810997a:	f000 f87f 	bl	8109a7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810997e:	e063      	b.n	8109a48 <HAL_UART_IRQHandler+0x7a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8109980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8109988:	2b00      	cmp	r3, #0
 810998a:	d00e      	beq.n	81099aa <HAL_UART_IRQHandler+0x702>
 810998c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109990:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8109994:	2b00      	cmp	r3, #0
 8109996:	d008      	beq.n	81099aa <HAL_UART_IRQHandler+0x702>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8109998:	687b      	ldr	r3, [r7, #4]
 810999a:	681b      	ldr	r3, [r3, #0]
 810999c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 81099a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 81099a2:	6878      	ldr	r0, [r7, #4]
 81099a4:	f001 fe7e 	bl	810b6a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 81099a8:	e051      	b.n	8109a4e <HAL_UART_IRQHandler+0x7a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 81099aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81099ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81099b2:	2b00      	cmp	r3, #0
 81099b4:	d014      	beq.n	81099e0 <HAL_UART_IRQHandler+0x738>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 81099b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 81099ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81099be:	2b00      	cmp	r3, #0
 81099c0:	d105      	bne.n	81099ce <HAL_UART_IRQHandler+0x726>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 81099c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 81099c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81099ca:	2b00      	cmp	r3, #0
 81099cc:	d008      	beq.n	81099e0 <HAL_UART_IRQHandler+0x738>
  {
    if (huart->TxISR != NULL)
 81099ce:	687b      	ldr	r3, [r7, #4]
 81099d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81099d2:	2b00      	cmp	r3, #0
 81099d4:	d03a      	beq.n	8109a4c <HAL_UART_IRQHandler+0x7a4>
    {
      huart->TxISR(huart);
 81099d6:	687b      	ldr	r3, [r7, #4]
 81099d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81099da:	6878      	ldr	r0, [r7, #4]
 81099dc:	4798      	blx	r3
    }
    return;
 81099de:	e035      	b.n	8109a4c <HAL_UART_IRQHandler+0x7a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 81099e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 81099e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81099e8:	2b00      	cmp	r3, #0
 81099ea:	d009      	beq.n	8109a00 <HAL_UART_IRQHandler+0x758>
 81099ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 81099f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81099f4:	2b00      	cmp	r3, #0
 81099f6:	d003      	beq.n	8109a00 <HAL_UART_IRQHandler+0x758>
  {
    UART_EndTransmit_IT(huart);
 81099f8:	6878      	ldr	r0, [r7, #4]
 81099fa:	f001 f907 	bl	810ac0c <UART_EndTransmit_IT>
    return;
 81099fe:	e026      	b.n	8109a4e <HAL_UART_IRQHandler+0x7a6>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8109a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109a04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8109a08:	2b00      	cmp	r3, #0
 8109a0a:	d009      	beq.n	8109a20 <HAL_UART_IRQHandler+0x778>
 8109a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109a10:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8109a14:	2b00      	cmp	r3, #0
 8109a16:	d003      	beq.n	8109a20 <HAL_UART_IRQHandler+0x778>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8109a18:	6878      	ldr	r0, [r7, #4]
 8109a1a:	f001 fe57 	bl	810b6cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8109a1e:	e016      	b.n	8109a4e <HAL_UART_IRQHandler+0x7a6>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8109a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109a24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8109a28:	2b00      	cmp	r3, #0
 8109a2a:	d010      	beq.n	8109a4e <HAL_UART_IRQHandler+0x7a6>
 8109a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109a30:	2b00      	cmp	r3, #0
 8109a32:	da0c      	bge.n	8109a4e <HAL_UART_IRQHandler+0x7a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8109a34:	6878      	ldr	r0, [r7, #4]
 8109a36:	f001 fe3f 	bl	810b6b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8109a3a:	e008      	b.n	8109a4e <HAL_UART_IRQHandler+0x7a6>
      return;
 8109a3c:	bf00      	nop
 8109a3e:	e006      	b.n	8109a4e <HAL_UART_IRQHandler+0x7a6>
    return;
 8109a40:	bf00      	nop
 8109a42:	e004      	b.n	8109a4e <HAL_UART_IRQHandler+0x7a6>
      return;
 8109a44:	bf00      	nop
 8109a46:	e002      	b.n	8109a4e <HAL_UART_IRQHandler+0x7a6>
      return;
 8109a48:	bf00      	nop
 8109a4a:	e000      	b.n	8109a4e <HAL_UART_IRQHandler+0x7a6>
    return;
 8109a4c:	bf00      	nop
  }
}
 8109a4e:	37e8      	adds	r7, #232	@ 0xe8
 8109a50:	46bd      	mov	sp, r7
 8109a52:	bd80      	pop	{r7, pc}

08109a54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8109a54:	b480      	push	{r7}
 8109a56:	b083      	sub	sp, #12
 8109a58:	af00      	add	r7, sp, #0
 8109a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8109a5c:	bf00      	nop
 8109a5e:	370c      	adds	r7, #12
 8109a60:	46bd      	mov	sp, r7
 8109a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a66:	4770      	bx	lr

08109a68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8109a68:	b480      	push	{r7}
 8109a6a:	b083      	sub	sp, #12
 8109a6c:	af00      	add	r7, sp, #0
 8109a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8109a70:	bf00      	nop
 8109a72:	370c      	adds	r7, #12
 8109a74:	46bd      	mov	sp, r7
 8109a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a7a:	4770      	bx	lr

08109a7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8109a7c:	b480      	push	{r7}
 8109a7e:	b083      	sub	sp, #12
 8109a80:	af00      	add	r7, sp, #0
 8109a82:	6078      	str	r0, [r7, #4]
 8109a84:	460b      	mov	r3, r1
 8109a86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8109a88:	bf00      	nop
 8109a8a:	370c      	adds	r7, #12
 8109a8c:	46bd      	mov	sp, r7
 8109a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a92:	4770      	bx	lr

08109a94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8109a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8109a98:	b092      	sub	sp, #72	@ 0x48
 8109a9a:	af00      	add	r7, sp, #0
 8109a9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8109a9e:	2300      	movs	r3, #0
 8109aa0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8109aa4:	697b      	ldr	r3, [r7, #20]
 8109aa6:	689a      	ldr	r2, [r3, #8]
 8109aa8:	697b      	ldr	r3, [r7, #20]
 8109aaa:	691b      	ldr	r3, [r3, #16]
 8109aac:	431a      	orrs	r2, r3
 8109aae:	697b      	ldr	r3, [r7, #20]
 8109ab0:	695b      	ldr	r3, [r3, #20]
 8109ab2:	431a      	orrs	r2, r3
 8109ab4:	697b      	ldr	r3, [r7, #20]
 8109ab6:	69db      	ldr	r3, [r3, #28]
 8109ab8:	4313      	orrs	r3, r2
 8109aba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8109abc:	697b      	ldr	r3, [r7, #20]
 8109abe:	681b      	ldr	r3, [r3, #0]
 8109ac0:	681a      	ldr	r2, [r3, #0]
 8109ac2:	4bbd      	ldr	r3, [pc, #756]	@ (8109db8 <UART_SetConfig+0x324>)
 8109ac4:	4013      	ands	r3, r2
 8109ac6:	697a      	ldr	r2, [r7, #20]
 8109ac8:	6812      	ldr	r2, [r2, #0]
 8109aca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8109acc:	430b      	orrs	r3, r1
 8109ace:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8109ad0:	697b      	ldr	r3, [r7, #20]
 8109ad2:	681b      	ldr	r3, [r3, #0]
 8109ad4:	685b      	ldr	r3, [r3, #4]
 8109ad6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8109ada:	697b      	ldr	r3, [r7, #20]
 8109adc:	68da      	ldr	r2, [r3, #12]
 8109ade:	697b      	ldr	r3, [r7, #20]
 8109ae0:	681b      	ldr	r3, [r3, #0]
 8109ae2:	430a      	orrs	r2, r1
 8109ae4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8109ae6:	697b      	ldr	r3, [r7, #20]
 8109ae8:	699b      	ldr	r3, [r3, #24]
 8109aea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8109aec:	697b      	ldr	r3, [r7, #20]
 8109aee:	681b      	ldr	r3, [r3, #0]
 8109af0:	4ab2      	ldr	r2, [pc, #712]	@ (8109dbc <UART_SetConfig+0x328>)
 8109af2:	4293      	cmp	r3, r2
 8109af4:	d004      	beq.n	8109b00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8109af6:	697b      	ldr	r3, [r7, #20]
 8109af8:	6a1b      	ldr	r3, [r3, #32]
 8109afa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8109afc:	4313      	orrs	r3, r2
 8109afe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8109b00:	697b      	ldr	r3, [r7, #20]
 8109b02:	681b      	ldr	r3, [r3, #0]
 8109b04:	689b      	ldr	r3, [r3, #8]
 8109b06:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8109b0a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8109b0e:	697a      	ldr	r2, [r7, #20]
 8109b10:	6812      	ldr	r2, [r2, #0]
 8109b12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8109b14:	430b      	orrs	r3, r1
 8109b16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8109b18:	697b      	ldr	r3, [r7, #20]
 8109b1a:	681b      	ldr	r3, [r3, #0]
 8109b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109b1e:	f023 010f 	bic.w	r1, r3, #15
 8109b22:	697b      	ldr	r3, [r7, #20]
 8109b24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8109b26:	697b      	ldr	r3, [r7, #20]
 8109b28:	681b      	ldr	r3, [r3, #0]
 8109b2a:	430a      	orrs	r2, r1
 8109b2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8109b2e:	697b      	ldr	r3, [r7, #20]
 8109b30:	681b      	ldr	r3, [r3, #0]
 8109b32:	4aa3      	ldr	r2, [pc, #652]	@ (8109dc0 <UART_SetConfig+0x32c>)
 8109b34:	4293      	cmp	r3, r2
 8109b36:	d177      	bne.n	8109c28 <UART_SetConfig+0x194>
 8109b38:	4ba2      	ldr	r3, [pc, #648]	@ (8109dc4 <UART_SetConfig+0x330>)
 8109b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109b3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8109b40:	2b28      	cmp	r3, #40	@ 0x28
 8109b42:	d86d      	bhi.n	8109c20 <UART_SetConfig+0x18c>
 8109b44:	a201      	add	r2, pc, #4	@ (adr r2, 8109b4c <UART_SetConfig+0xb8>)
 8109b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109b4a:	bf00      	nop
 8109b4c:	08109bf1 	.word	0x08109bf1
 8109b50:	08109c21 	.word	0x08109c21
 8109b54:	08109c21 	.word	0x08109c21
 8109b58:	08109c21 	.word	0x08109c21
 8109b5c:	08109c21 	.word	0x08109c21
 8109b60:	08109c21 	.word	0x08109c21
 8109b64:	08109c21 	.word	0x08109c21
 8109b68:	08109c21 	.word	0x08109c21
 8109b6c:	08109bf9 	.word	0x08109bf9
 8109b70:	08109c21 	.word	0x08109c21
 8109b74:	08109c21 	.word	0x08109c21
 8109b78:	08109c21 	.word	0x08109c21
 8109b7c:	08109c21 	.word	0x08109c21
 8109b80:	08109c21 	.word	0x08109c21
 8109b84:	08109c21 	.word	0x08109c21
 8109b88:	08109c21 	.word	0x08109c21
 8109b8c:	08109c01 	.word	0x08109c01
 8109b90:	08109c21 	.word	0x08109c21
 8109b94:	08109c21 	.word	0x08109c21
 8109b98:	08109c21 	.word	0x08109c21
 8109b9c:	08109c21 	.word	0x08109c21
 8109ba0:	08109c21 	.word	0x08109c21
 8109ba4:	08109c21 	.word	0x08109c21
 8109ba8:	08109c21 	.word	0x08109c21
 8109bac:	08109c09 	.word	0x08109c09
 8109bb0:	08109c21 	.word	0x08109c21
 8109bb4:	08109c21 	.word	0x08109c21
 8109bb8:	08109c21 	.word	0x08109c21
 8109bbc:	08109c21 	.word	0x08109c21
 8109bc0:	08109c21 	.word	0x08109c21
 8109bc4:	08109c21 	.word	0x08109c21
 8109bc8:	08109c21 	.word	0x08109c21
 8109bcc:	08109c11 	.word	0x08109c11
 8109bd0:	08109c21 	.word	0x08109c21
 8109bd4:	08109c21 	.word	0x08109c21
 8109bd8:	08109c21 	.word	0x08109c21
 8109bdc:	08109c21 	.word	0x08109c21
 8109be0:	08109c21 	.word	0x08109c21
 8109be4:	08109c21 	.word	0x08109c21
 8109be8:	08109c21 	.word	0x08109c21
 8109bec:	08109c19 	.word	0x08109c19
 8109bf0:	2301      	movs	r3, #1
 8109bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109bf6:	e220      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109bf8:	2304      	movs	r3, #4
 8109bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109bfe:	e21c      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109c00:	2308      	movs	r3, #8
 8109c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c06:	e218      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109c08:	2310      	movs	r3, #16
 8109c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c0e:	e214      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109c10:	2320      	movs	r3, #32
 8109c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c16:	e210      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109c18:	2340      	movs	r3, #64	@ 0x40
 8109c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c1e:	e20c      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109c20:	2380      	movs	r3, #128	@ 0x80
 8109c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c26:	e208      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109c28:	697b      	ldr	r3, [r7, #20]
 8109c2a:	681b      	ldr	r3, [r3, #0]
 8109c2c:	4a66      	ldr	r2, [pc, #408]	@ (8109dc8 <UART_SetConfig+0x334>)
 8109c2e:	4293      	cmp	r3, r2
 8109c30:	d130      	bne.n	8109c94 <UART_SetConfig+0x200>
 8109c32:	4b64      	ldr	r3, [pc, #400]	@ (8109dc4 <UART_SetConfig+0x330>)
 8109c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109c36:	f003 0307 	and.w	r3, r3, #7
 8109c3a:	2b05      	cmp	r3, #5
 8109c3c:	d826      	bhi.n	8109c8c <UART_SetConfig+0x1f8>
 8109c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8109c44 <UART_SetConfig+0x1b0>)
 8109c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109c44:	08109c5d 	.word	0x08109c5d
 8109c48:	08109c65 	.word	0x08109c65
 8109c4c:	08109c6d 	.word	0x08109c6d
 8109c50:	08109c75 	.word	0x08109c75
 8109c54:	08109c7d 	.word	0x08109c7d
 8109c58:	08109c85 	.word	0x08109c85
 8109c5c:	2300      	movs	r3, #0
 8109c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c62:	e1ea      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109c64:	2304      	movs	r3, #4
 8109c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c6a:	e1e6      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109c6c:	2308      	movs	r3, #8
 8109c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c72:	e1e2      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109c74:	2310      	movs	r3, #16
 8109c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c7a:	e1de      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109c7c:	2320      	movs	r3, #32
 8109c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c82:	e1da      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109c84:	2340      	movs	r3, #64	@ 0x40
 8109c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c8a:	e1d6      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109c8c:	2380      	movs	r3, #128	@ 0x80
 8109c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109c92:	e1d2      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109c94:	697b      	ldr	r3, [r7, #20]
 8109c96:	681b      	ldr	r3, [r3, #0]
 8109c98:	4a4c      	ldr	r2, [pc, #304]	@ (8109dcc <UART_SetConfig+0x338>)
 8109c9a:	4293      	cmp	r3, r2
 8109c9c:	d130      	bne.n	8109d00 <UART_SetConfig+0x26c>
 8109c9e:	4b49      	ldr	r3, [pc, #292]	@ (8109dc4 <UART_SetConfig+0x330>)
 8109ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109ca2:	f003 0307 	and.w	r3, r3, #7
 8109ca6:	2b05      	cmp	r3, #5
 8109ca8:	d826      	bhi.n	8109cf8 <UART_SetConfig+0x264>
 8109caa:	a201      	add	r2, pc, #4	@ (adr r2, 8109cb0 <UART_SetConfig+0x21c>)
 8109cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109cb0:	08109cc9 	.word	0x08109cc9
 8109cb4:	08109cd1 	.word	0x08109cd1
 8109cb8:	08109cd9 	.word	0x08109cd9
 8109cbc:	08109ce1 	.word	0x08109ce1
 8109cc0:	08109ce9 	.word	0x08109ce9
 8109cc4:	08109cf1 	.word	0x08109cf1
 8109cc8:	2300      	movs	r3, #0
 8109cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109cce:	e1b4      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109cd0:	2304      	movs	r3, #4
 8109cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109cd6:	e1b0      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109cd8:	2308      	movs	r3, #8
 8109cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109cde:	e1ac      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109ce0:	2310      	movs	r3, #16
 8109ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109ce6:	e1a8      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109ce8:	2320      	movs	r3, #32
 8109cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109cee:	e1a4      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109cf0:	2340      	movs	r3, #64	@ 0x40
 8109cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109cf6:	e1a0      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109cf8:	2380      	movs	r3, #128	@ 0x80
 8109cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109cfe:	e19c      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109d00:	697b      	ldr	r3, [r7, #20]
 8109d02:	681b      	ldr	r3, [r3, #0]
 8109d04:	4a32      	ldr	r2, [pc, #200]	@ (8109dd0 <UART_SetConfig+0x33c>)
 8109d06:	4293      	cmp	r3, r2
 8109d08:	d130      	bne.n	8109d6c <UART_SetConfig+0x2d8>
 8109d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8109dc4 <UART_SetConfig+0x330>)
 8109d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109d0e:	f003 0307 	and.w	r3, r3, #7
 8109d12:	2b05      	cmp	r3, #5
 8109d14:	d826      	bhi.n	8109d64 <UART_SetConfig+0x2d0>
 8109d16:	a201      	add	r2, pc, #4	@ (adr r2, 8109d1c <UART_SetConfig+0x288>)
 8109d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109d1c:	08109d35 	.word	0x08109d35
 8109d20:	08109d3d 	.word	0x08109d3d
 8109d24:	08109d45 	.word	0x08109d45
 8109d28:	08109d4d 	.word	0x08109d4d
 8109d2c:	08109d55 	.word	0x08109d55
 8109d30:	08109d5d 	.word	0x08109d5d
 8109d34:	2300      	movs	r3, #0
 8109d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d3a:	e17e      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109d3c:	2304      	movs	r3, #4
 8109d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d42:	e17a      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109d44:	2308      	movs	r3, #8
 8109d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d4a:	e176      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109d4c:	2310      	movs	r3, #16
 8109d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d52:	e172      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109d54:	2320      	movs	r3, #32
 8109d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d5a:	e16e      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109d5c:	2340      	movs	r3, #64	@ 0x40
 8109d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d62:	e16a      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109d64:	2380      	movs	r3, #128	@ 0x80
 8109d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109d6a:	e166      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109d6c:	697b      	ldr	r3, [r7, #20]
 8109d6e:	681b      	ldr	r3, [r3, #0]
 8109d70:	4a18      	ldr	r2, [pc, #96]	@ (8109dd4 <UART_SetConfig+0x340>)
 8109d72:	4293      	cmp	r3, r2
 8109d74:	d140      	bne.n	8109df8 <UART_SetConfig+0x364>
 8109d76:	4b13      	ldr	r3, [pc, #76]	@ (8109dc4 <UART_SetConfig+0x330>)
 8109d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109d7a:	f003 0307 	and.w	r3, r3, #7
 8109d7e:	2b05      	cmp	r3, #5
 8109d80:	d836      	bhi.n	8109df0 <UART_SetConfig+0x35c>
 8109d82:	a201      	add	r2, pc, #4	@ (adr r2, 8109d88 <UART_SetConfig+0x2f4>)
 8109d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109d88:	08109da1 	.word	0x08109da1
 8109d8c:	08109da9 	.word	0x08109da9
 8109d90:	08109db1 	.word	0x08109db1
 8109d94:	08109dd9 	.word	0x08109dd9
 8109d98:	08109de1 	.word	0x08109de1
 8109d9c:	08109de9 	.word	0x08109de9
 8109da0:	2300      	movs	r3, #0
 8109da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109da6:	e148      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109da8:	2304      	movs	r3, #4
 8109daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109dae:	e144      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109db0:	2308      	movs	r3, #8
 8109db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109db6:	e140      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109db8:	cfff69f3 	.word	0xcfff69f3
 8109dbc:	58000c00 	.word	0x58000c00
 8109dc0:	40011000 	.word	0x40011000
 8109dc4:	58024400 	.word	0x58024400
 8109dc8:	40004400 	.word	0x40004400
 8109dcc:	40004800 	.word	0x40004800
 8109dd0:	40004c00 	.word	0x40004c00
 8109dd4:	40005000 	.word	0x40005000
 8109dd8:	2310      	movs	r3, #16
 8109dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109dde:	e12c      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109de0:	2320      	movs	r3, #32
 8109de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109de6:	e128      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109de8:	2340      	movs	r3, #64	@ 0x40
 8109dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109dee:	e124      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109df0:	2380      	movs	r3, #128	@ 0x80
 8109df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109df6:	e120      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109df8:	697b      	ldr	r3, [r7, #20]
 8109dfa:	681b      	ldr	r3, [r3, #0]
 8109dfc:	4acb      	ldr	r2, [pc, #812]	@ (810a12c <UART_SetConfig+0x698>)
 8109dfe:	4293      	cmp	r3, r2
 8109e00:	d176      	bne.n	8109ef0 <UART_SetConfig+0x45c>
 8109e02:	4bcb      	ldr	r3, [pc, #812]	@ (810a130 <UART_SetConfig+0x69c>)
 8109e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109e06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8109e0a:	2b28      	cmp	r3, #40	@ 0x28
 8109e0c:	d86c      	bhi.n	8109ee8 <UART_SetConfig+0x454>
 8109e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8109e14 <UART_SetConfig+0x380>)
 8109e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109e14:	08109eb9 	.word	0x08109eb9
 8109e18:	08109ee9 	.word	0x08109ee9
 8109e1c:	08109ee9 	.word	0x08109ee9
 8109e20:	08109ee9 	.word	0x08109ee9
 8109e24:	08109ee9 	.word	0x08109ee9
 8109e28:	08109ee9 	.word	0x08109ee9
 8109e2c:	08109ee9 	.word	0x08109ee9
 8109e30:	08109ee9 	.word	0x08109ee9
 8109e34:	08109ec1 	.word	0x08109ec1
 8109e38:	08109ee9 	.word	0x08109ee9
 8109e3c:	08109ee9 	.word	0x08109ee9
 8109e40:	08109ee9 	.word	0x08109ee9
 8109e44:	08109ee9 	.word	0x08109ee9
 8109e48:	08109ee9 	.word	0x08109ee9
 8109e4c:	08109ee9 	.word	0x08109ee9
 8109e50:	08109ee9 	.word	0x08109ee9
 8109e54:	08109ec9 	.word	0x08109ec9
 8109e58:	08109ee9 	.word	0x08109ee9
 8109e5c:	08109ee9 	.word	0x08109ee9
 8109e60:	08109ee9 	.word	0x08109ee9
 8109e64:	08109ee9 	.word	0x08109ee9
 8109e68:	08109ee9 	.word	0x08109ee9
 8109e6c:	08109ee9 	.word	0x08109ee9
 8109e70:	08109ee9 	.word	0x08109ee9
 8109e74:	08109ed1 	.word	0x08109ed1
 8109e78:	08109ee9 	.word	0x08109ee9
 8109e7c:	08109ee9 	.word	0x08109ee9
 8109e80:	08109ee9 	.word	0x08109ee9
 8109e84:	08109ee9 	.word	0x08109ee9
 8109e88:	08109ee9 	.word	0x08109ee9
 8109e8c:	08109ee9 	.word	0x08109ee9
 8109e90:	08109ee9 	.word	0x08109ee9
 8109e94:	08109ed9 	.word	0x08109ed9
 8109e98:	08109ee9 	.word	0x08109ee9
 8109e9c:	08109ee9 	.word	0x08109ee9
 8109ea0:	08109ee9 	.word	0x08109ee9
 8109ea4:	08109ee9 	.word	0x08109ee9
 8109ea8:	08109ee9 	.word	0x08109ee9
 8109eac:	08109ee9 	.word	0x08109ee9
 8109eb0:	08109ee9 	.word	0x08109ee9
 8109eb4:	08109ee1 	.word	0x08109ee1
 8109eb8:	2301      	movs	r3, #1
 8109eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109ebe:	e0bc      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109ec0:	2304      	movs	r3, #4
 8109ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109ec6:	e0b8      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109ec8:	2308      	movs	r3, #8
 8109eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109ece:	e0b4      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109ed0:	2310      	movs	r3, #16
 8109ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109ed6:	e0b0      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109ed8:	2320      	movs	r3, #32
 8109eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109ede:	e0ac      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109ee0:	2340      	movs	r3, #64	@ 0x40
 8109ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109ee6:	e0a8      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109ee8:	2380      	movs	r3, #128	@ 0x80
 8109eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109eee:	e0a4      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109ef0:	697b      	ldr	r3, [r7, #20]
 8109ef2:	681b      	ldr	r3, [r3, #0]
 8109ef4:	4a8f      	ldr	r2, [pc, #572]	@ (810a134 <UART_SetConfig+0x6a0>)
 8109ef6:	4293      	cmp	r3, r2
 8109ef8:	d130      	bne.n	8109f5c <UART_SetConfig+0x4c8>
 8109efa:	4b8d      	ldr	r3, [pc, #564]	@ (810a130 <UART_SetConfig+0x69c>)
 8109efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109efe:	f003 0307 	and.w	r3, r3, #7
 8109f02:	2b05      	cmp	r3, #5
 8109f04:	d826      	bhi.n	8109f54 <UART_SetConfig+0x4c0>
 8109f06:	a201      	add	r2, pc, #4	@ (adr r2, 8109f0c <UART_SetConfig+0x478>)
 8109f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109f0c:	08109f25 	.word	0x08109f25
 8109f10:	08109f2d 	.word	0x08109f2d
 8109f14:	08109f35 	.word	0x08109f35
 8109f18:	08109f3d 	.word	0x08109f3d
 8109f1c:	08109f45 	.word	0x08109f45
 8109f20:	08109f4d 	.word	0x08109f4d
 8109f24:	2300      	movs	r3, #0
 8109f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f2a:	e086      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109f2c:	2304      	movs	r3, #4
 8109f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f32:	e082      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109f34:	2308      	movs	r3, #8
 8109f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f3a:	e07e      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109f3c:	2310      	movs	r3, #16
 8109f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f42:	e07a      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109f44:	2320      	movs	r3, #32
 8109f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f4a:	e076      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109f4c:	2340      	movs	r3, #64	@ 0x40
 8109f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f52:	e072      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109f54:	2380      	movs	r3, #128	@ 0x80
 8109f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f5a:	e06e      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109f5c:	697b      	ldr	r3, [r7, #20]
 8109f5e:	681b      	ldr	r3, [r3, #0]
 8109f60:	4a75      	ldr	r2, [pc, #468]	@ (810a138 <UART_SetConfig+0x6a4>)
 8109f62:	4293      	cmp	r3, r2
 8109f64:	d130      	bne.n	8109fc8 <UART_SetConfig+0x534>
 8109f66:	4b72      	ldr	r3, [pc, #456]	@ (810a130 <UART_SetConfig+0x69c>)
 8109f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8109f6a:	f003 0307 	and.w	r3, r3, #7
 8109f6e:	2b05      	cmp	r3, #5
 8109f70:	d826      	bhi.n	8109fc0 <UART_SetConfig+0x52c>
 8109f72:	a201      	add	r2, pc, #4	@ (adr r2, 8109f78 <UART_SetConfig+0x4e4>)
 8109f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109f78:	08109f91 	.word	0x08109f91
 8109f7c:	08109f99 	.word	0x08109f99
 8109f80:	08109fa1 	.word	0x08109fa1
 8109f84:	08109fa9 	.word	0x08109fa9
 8109f88:	08109fb1 	.word	0x08109fb1
 8109f8c:	08109fb9 	.word	0x08109fb9
 8109f90:	2300      	movs	r3, #0
 8109f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f96:	e050      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109f98:	2304      	movs	r3, #4
 8109f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109f9e:	e04c      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109fa0:	2308      	movs	r3, #8
 8109fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109fa6:	e048      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109fa8:	2310      	movs	r3, #16
 8109faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109fae:	e044      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109fb0:	2320      	movs	r3, #32
 8109fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109fb6:	e040      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109fb8:	2340      	movs	r3, #64	@ 0x40
 8109fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109fbe:	e03c      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109fc0:	2380      	movs	r3, #128	@ 0x80
 8109fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8109fc6:	e038      	b.n	810a03a <UART_SetConfig+0x5a6>
 8109fc8:	697b      	ldr	r3, [r7, #20]
 8109fca:	681b      	ldr	r3, [r3, #0]
 8109fcc:	4a5b      	ldr	r2, [pc, #364]	@ (810a13c <UART_SetConfig+0x6a8>)
 8109fce:	4293      	cmp	r3, r2
 8109fd0:	d130      	bne.n	810a034 <UART_SetConfig+0x5a0>
 8109fd2:	4b57      	ldr	r3, [pc, #348]	@ (810a130 <UART_SetConfig+0x69c>)
 8109fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109fd6:	f003 0307 	and.w	r3, r3, #7
 8109fda:	2b05      	cmp	r3, #5
 8109fdc:	d826      	bhi.n	810a02c <UART_SetConfig+0x598>
 8109fde:	a201      	add	r2, pc, #4	@ (adr r2, 8109fe4 <UART_SetConfig+0x550>)
 8109fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109fe4:	08109ffd 	.word	0x08109ffd
 8109fe8:	0810a005 	.word	0x0810a005
 8109fec:	0810a00d 	.word	0x0810a00d
 8109ff0:	0810a015 	.word	0x0810a015
 8109ff4:	0810a01d 	.word	0x0810a01d
 8109ff8:	0810a025 	.word	0x0810a025
 8109ffc:	2302      	movs	r3, #2
 8109ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a002:	e01a      	b.n	810a03a <UART_SetConfig+0x5a6>
 810a004:	2304      	movs	r3, #4
 810a006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a00a:	e016      	b.n	810a03a <UART_SetConfig+0x5a6>
 810a00c:	2308      	movs	r3, #8
 810a00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a012:	e012      	b.n	810a03a <UART_SetConfig+0x5a6>
 810a014:	2310      	movs	r3, #16
 810a016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a01a:	e00e      	b.n	810a03a <UART_SetConfig+0x5a6>
 810a01c:	2320      	movs	r3, #32
 810a01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a022:	e00a      	b.n	810a03a <UART_SetConfig+0x5a6>
 810a024:	2340      	movs	r3, #64	@ 0x40
 810a026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a02a:	e006      	b.n	810a03a <UART_SetConfig+0x5a6>
 810a02c:	2380      	movs	r3, #128	@ 0x80
 810a02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a032:	e002      	b.n	810a03a <UART_SetConfig+0x5a6>
 810a034:	2380      	movs	r3, #128	@ 0x80
 810a036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810a03a:	697b      	ldr	r3, [r7, #20]
 810a03c:	681b      	ldr	r3, [r3, #0]
 810a03e:	4a3f      	ldr	r2, [pc, #252]	@ (810a13c <UART_SetConfig+0x6a8>)
 810a040:	4293      	cmp	r3, r2
 810a042:	f040 80f8 	bne.w	810a236 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810a046:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810a04a:	2b20      	cmp	r3, #32
 810a04c:	dc46      	bgt.n	810a0dc <UART_SetConfig+0x648>
 810a04e:	2b02      	cmp	r3, #2
 810a050:	f2c0 8082 	blt.w	810a158 <UART_SetConfig+0x6c4>
 810a054:	3b02      	subs	r3, #2
 810a056:	2b1e      	cmp	r3, #30
 810a058:	d87e      	bhi.n	810a158 <UART_SetConfig+0x6c4>
 810a05a:	a201      	add	r2, pc, #4	@ (adr r2, 810a060 <UART_SetConfig+0x5cc>)
 810a05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a060:	0810a0e3 	.word	0x0810a0e3
 810a064:	0810a159 	.word	0x0810a159
 810a068:	0810a0eb 	.word	0x0810a0eb
 810a06c:	0810a159 	.word	0x0810a159
 810a070:	0810a159 	.word	0x0810a159
 810a074:	0810a159 	.word	0x0810a159
 810a078:	0810a0fb 	.word	0x0810a0fb
 810a07c:	0810a159 	.word	0x0810a159
 810a080:	0810a159 	.word	0x0810a159
 810a084:	0810a159 	.word	0x0810a159
 810a088:	0810a159 	.word	0x0810a159
 810a08c:	0810a159 	.word	0x0810a159
 810a090:	0810a159 	.word	0x0810a159
 810a094:	0810a159 	.word	0x0810a159
 810a098:	0810a10b 	.word	0x0810a10b
 810a09c:	0810a159 	.word	0x0810a159
 810a0a0:	0810a159 	.word	0x0810a159
 810a0a4:	0810a159 	.word	0x0810a159
 810a0a8:	0810a159 	.word	0x0810a159
 810a0ac:	0810a159 	.word	0x0810a159
 810a0b0:	0810a159 	.word	0x0810a159
 810a0b4:	0810a159 	.word	0x0810a159
 810a0b8:	0810a159 	.word	0x0810a159
 810a0bc:	0810a159 	.word	0x0810a159
 810a0c0:	0810a159 	.word	0x0810a159
 810a0c4:	0810a159 	.word	0x0810a159
 810a0c8:	0810a159 	.word	0x0810a159
 810a0cc:	0810a159 	.word	0x0810a159
 810a0d0:	0810a159 	.word	0x0810a159
 810a0d4:	0810a159 	.word	0x0810a159
 810a0d8:	0810a14b 	.word	0x0810a14b
 810a0dc:	2b40      	cmp	r3, #64	@ 0x40
 810a0de:	d037      	beq.n	810a150 <UART_SetConfig+0x6bc>
 810a0e0:	e03a      	b.n	810a158 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810a0e2:	f7fe fb95 	bl	8108810 <HAL_RCCEx_GetD3PCLK1Freq>
 810a0e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a0e8:	e03c      	b.n	810a164 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a0ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a0ee:	4618      	mov	r0, r3
 810a0f0:	f7fe fba4 	bl	810883c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a0f8:	e034      	b.n	810a164 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a0fa:	f107 0318 	add.w	r3, r7, #24
 810a0fe:	4618      	mov	r0, r3
 810a100:	f7fe fcf0 	bl	8108ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a104:	69fb      	ldr	r3, [r7, #28]
 810a106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a108:	e02c      	b.n	810a164 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a10a:	4b09      	ldr	r3, [pc, #36]	@ (810a130 <UART_SetConfig+0x69c>)
 810a10c:	681b      	ldr	r3, [r3, #0]
 810a10e:	f003 0320 	and.w	r3, r3, #32
 810a112:	2b00      	cmp	r3, #0
 810a114:	d016      	beq.n	810a144 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a116:	4b06      	ldr	r3, [pc, #24]	@ (810a130 <UART_SetConfig+0x69c>)
 810a118:	681b      	ldr	r3, [r3, #0]
 810a11a:	08db      	lsrs	r3, r3, #3
 810a11c:	f003 0303 	and.w	r3, r3, #3
 810a120:	4a07      	ldr	r2, [pc, #28]	@ (810a140 <UART_SetConfig+0x6ac>)
 810a122:	fa22 f303 	lsr.w	r3, r2, r3
 810a126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a128:	e01c      	b.n	810a164 <UART_SetConfig+0x6d0>
 810a12a:	bf00      	nop
 810a12c:	40011400 	.word	0x40011400
 810a130:	58024400 	.word	0x58024400
 810a134:	40007800 	.word	0x40007800
 810a138:	40007c00 	.word	0x40007c00
 810a13c:	58000c00 	.word	0x58000c00
 810a140:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810a144:	4b9d      	ldr	r3, [pc, #628]	@ (810a3bc <UART_SetConfig+0x928>)
 810a146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a148:	e00c      	b.n	810a164 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a14a:	4b9d      	ldr	r3, [pc, #628]	@ (810a3c0 <UART_SetConfig+0x92c>)
 810a14c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a14e:	e009      	b.n	810a164 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a150:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810a154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a156:	e005      	b.n	810a164 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810a158:	2300      	movs	r3, #0
 810a15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810a15c:	2301      	movs	r3, #1
 810a15e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810a162:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810a164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a166:	2b00      	cmp	r3, #0
 810a168:	f000 81de 	beq.w	810a528 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810a16c:	697b      	ldr	r3, [r7, #20]
 810a16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a170:	4a94      	ldr	r2, [pc, #592]	@ (810a3c4 <UART_SetConfig+0x930>)
 810a172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a176:	461a      	mov	r2, r3
 810a178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a17a:	fbb3 f3f2 	udiv	r3, r3, r2
 810a17e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a180:	697b      	ldr	r3, [r7, #20]
 810a182:	685a      	ldr	r2, [r3, #4]
 810a184:	4613      	mov	r3, r2
 810a186:	005b      	lsls	r3, r3, #1
 810a188:	4413      	add	r3, r2
 810a18a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a18c:	429a      	cmp	r2, r3
 810a18e:	d305      	bcc.n	810a19c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810a190:	697b      	ldr	r3, [r7, #20]
 810a192:	685b      	ldr	r3, [r3, #4]
 810a194:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a198:	429a      	cmp	r2, r3
 810a19a:	d903      	bls.n	810a1a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810a19c:	2301      	movs	r3, #1
 810a19e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810a1a2:	e1c1      	b.n	810a528 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a1a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a1a6:	2200      	movs	r2, #0
 810a1a8:	60bb      	str	r3, [r7, #8]
 810a1aa:	60fa      	str	r2, [r7, #12]
 810a1ac:	697b      	ldr	r3, [r7, #20]
 810a1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a1b0:	4a84      	ldr	r2, [pc, #528]	@ (810a3c4 <UART_SetConfig+0x930>)
 810a1b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a1b6:	b29b      	uxth	r3, r3
 810a1b8:	2200      	movs	r2, #0
 810a1ba:	603b      	str	r3, [r7, #0]
 810a1bc:	607a      	str	r2, [r7, #4]
 810a1be:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a1c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810a1c6:	f7f6 fde7 	bl	8100d98 <__aeabi_uldivmod>
 810a1ca:	4602      	mov	r2, r0
 810a1cc:	460b      	mov	r3, r1
 810a1ce:	4610      	mov	r0, r2
 810a1d0:	4619      	mov	r1, r3
 810a1d2:	f04f 0200 	mov.w	r2, #0
 810a1d6:	f04f 0300 	mov.w	r3, #0
 810a1da:	020b      	lsls	r3, r1, #8
 810a1dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810a1e0:	0202      	lsls	r2, r0, #8
 810a1e2:	6979      	ldr	r1, [r7, #20]
 810a1e4:	6849      	ldr	r1, [r1, #4]
 810a1e6:	0849      	lsrs	r1, r1, #1
 810a1e8:	2000      	movs	r0, #0
 810a1ea:	460c      	mov	r4, r1
 810a1ec:	4605      	mov	r5, r0
 810a1ee:	eb12 0804 	adds.w	r8, r2, r4
 810a1f2:	eb43 0905 	adc.w	r9, r3, r5
 810a1f6:	697b      	ldr	r3, [r7, #20]
 810a1f8:	685b      	ldr	r3, [r3, #4]
 810a1fa:	2200      	movs	r2, #0
 810a1fc:	469a      	mov	sl, r3
 810a1fe:	4693      	mov	fp, r2
 810a200:	4652      	mov	r2, sl
 810a202:	465b      	mov	r3, fp
 810a204:	4640      	mov	r0, r8
 810a206:	4649      	mov	r1, r9
 810a208:	f7f6 fdc6 	bl	8100d98 <__aeabi_uldivmod>
 810a20c:	4602      	mov	r2, r0
 810a20e:	460b      	mov	r3, r1
 810a210:	4613      	mov	r3, r2
 810a212:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810a214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a216:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810a21a:	d308      	bcc.n	810a22e <UART_SetConfig+0x79a>
 810a21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a21e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a222:	d204      	bcs.n	810a22e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810a224:	697b      	ldr	r3, [r7, #20]
 810a226:	681b      	ldr	r3, [r3, #0]
 810a228:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810a22a:	60da      	str	r2, [r3, #12]
 810a22c:	e17c      	b.n	810a528 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810a22e:	2301      	movs	r3, #1
 810a230:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810a234:	e178      	b.n	810a528 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810a236:	697b      	ldr	r3, [r7, #20]
 810a238:	69db      	ldr	r3, [r3, #28]
 810a23a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810a23e:	f040 80c5 	bne.w	810a3cc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810a242:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810a246:	2b20      	cmp	r3, #32
 810a248:	dc48      	bgt.n	810a2dc <UART_SetConfig+0x848>
 810a24a:	2b00      	cmp	r3, #0
 810a24c:	db7b      	blt.n	810a346 <UART_SetConfig+0x8b2>
 810a24e:	2b20      	cmp	r3, #32
 810a250:	d879      	bhi.n	810a346 <UART_SetConfig+0x8b2>
 810a252:	a201      	add	r2, pc, #4	@ (adr r2, 810a258 <UART_SetConfig+0x7c4>)
 810a254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a258:	0810a2e3 	.word	0x0810a2e3
 810a25c:	0810a2eb 	.word	0x0810a2eb
 810a260:	0810a347 	.word	0x0810a347
 810a264:	0810a347 	.word	0x0810a347
 810a268:	0810a2f3 	.word	0x0810a2f3
 810a26c:	0810a347 	.word	0x0810a347
 810a270:	0810a347 	.word	0x0810a347
 810a274:	0810a347 	.word	0x0810a347
 810a278:	0810a303 	.word	0x0810a303
 810a27c:	0810a347 	.word	0x0810a347
 810a280:	0810a347 	.word	0x0810a347
 810a284:	0810a347 	.word	0x0810a347
 810a288:	0810a347 	.word	0x0810a347
 810a28c:	0810a347 	.word	0x0810a347
 810a290:	0810a347 	.word	0x0810a347
 810a294:	0810a347 	.word	0x0810a347
 810a298:	0810a313 	.word	0x0810a313
 810a29c:	0810a347 	.word	0x0810a347
 810a2a0:	0810a347 	.word	0x0810a347
 810a2a4:	0810a347 	.word	0x0810a347
 810a2a8:	0810a347 	.word	0x0810a347
 810a2ac:	0810a347 	.word	0x0810a347
 810a2b0:	0810a347 	.word	0x0810a347
 810a2b4:	0810a347 	.word	0x0810a347
 810a2b8:	0810a347 	.word	0x0810a347
 810a2bc:	0810a347 	.word	0x0810a347
 810a2c0:	0810a347 	.word	0x0810a347
 810a2c4:	0810a347 	.word	0x0810a347
 810a2c8:	0810a347 	.word	0x0810a347
 810a2cc:	0810a347 	.word	0x0810a347
 810a2d0:	0810a347 	.word	0x0810a347
 810a2d4:	0810a347 	.word	0x0810a347
 810a2d8:	0810a339 	.word	0x0810a339
 810a2dc:	2b40      	cmp	r3, #64	@ 0x40
 810a2de:	d02e      	beq.n	810a33e <UART_SetConfig+0x8aa>
 810a2e0:	e031      	b.n	810a346 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a2e2:	f7fd f85f 	bl	81073a4 <HAL_RCC_GetPCLK1Freq>
 810a2e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a2e8:	e033      	b.n	810a352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a2ea:	f7fd f871 	bl	81073d0 <HAL_RCC_GetPCLK2Freq>
 810a2ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a2f0:	e02f      	b.n	810a352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a2f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a2f6:	4618      	mov	r0, r3
 810a2f8:	f7fe faa0 	bl	810883c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a2fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a300:	e027      	b.n	810a352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a302:	f107 0318 	add.w	r3, r7, #24
 810a306:	4618      	mov	r0, r3
 810a308:	f7fe fbec 	bl	8108ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a30c:	69fb      	ldr	r3, [r7, #28]
 810a30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a310:	e01f      	b.n	810a352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a312:	4b2d      	ldr	r3, [pc, #180]	@ (810a3c8 <UART_SetConfig+0x934>)
 810a314:	681b      	ldr	r3, [r3, #0]
 810a316:	f003 0320 	and.w	r3, r3, #32
 810a31a:	2b00      	cmp	r3, #0
 810a31c:	d009      	beq.n	810a332 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a31e:	4b2a      	ldr	r3, [pc, #168]	@ (810a3c8 <UART_SetConfig+0x934>)
 810a320:	681b      	ldr	r3, [r3, #0]
 810a322:	08db      	lsrs	r3, r3, #3
 810a324:	f003 0303 	and.w	r3, r3, #3
 810a328:	4a24      	ldr	r2, [pc, #144]	@ (810a3bc <UART_SetConfig+0x928>)
 810a32a:	fa22 f303 	lsr.w	r3, r2, r3
 810a32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a330:	e00f      	b.n	810a352 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810a332:	4b22      	ldr	r3, [pc, #136]	@ (810a3bc <UART_SetConfig+0x928>)
 810a334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a336:	e00c      	b.n	810a352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a338:	4b21      	ldr	r3, [pc, #132]	@ (810a3c0 <UART_SetConfig+0x92c>)
 810a33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a33c:	e009      	b.n	810a352 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a33e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810a342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a344:	e005      	b.n	810a352 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810a346:	2300      	movs	r3, #0
 810a348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810a34a:	2301      	movs	r3, #1
 810a34c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810a350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810a352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a354:	2b00      	cmp	r3, #0
 810a356:	f000 80e7 	beq.w	810a528 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a35a:	697b      	ldr	r3, [r7, #20]
 810a35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a35e:	4a19      	ldr	r2, [pc, #100]	@ (810a3c4 <UART_SetConfig+0x930>)
 810a360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a364:	461a      	mov	r2, r3
 810a366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a368:	fbb3 f3f2 	udiv	r3, r3, r2
 810a36c:	005a      	lsls	r2, r3, #1
 810a36e:	697b      	ldr	r3, [r7, #20]
 810a370:	685b      	ldr	r3, [r3, #4]
 810a372:	085b      	lsrs	r3, r3, #1
 810a374:	441a      	add	r2, r3
 810a376:	697b      	ldr	r3, [r7, #20]
 810a378:	685b      	ldr	r3, [r3, #4]
 810a37a:	fbb2 f3f3 	udiv	r3, r2, r3
 810a37e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a382:	2b0f      	cmp	r3, #15
 810a384:	d916      	bls.n	810a3b4 <UART_SetConfig+0x920>
 810a386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a38c:	d212      	bcs.n	810a3b4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810a38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a390:	b29b      	uxth	r3, r3
 810a392:	f023 030f 	bic.w	r3, r3, #15
 810a396:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810a398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a39a:	085b      	lsrs	r3, r3, #1
 810a39c:	b29b      	uxth	r3, r3
 810a39e:	f003 0307 	and.w	r3, r3, #7
 810a3a2:	b29a      	uxth	r2, r3
 810a3a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810a3a6:	4313      	orrs	r3, r2
 810a3a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810a3aa:	697b      	ldr	r3, [r7, #20]
 810a3ac:	681b      	ldr	r3, [r3, #0]
 810a3ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810a3b0:	60da      	str	r2, [r3, #12]
 810a3b2:	e0b9      	b.n	810a528 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810a3b4:	2301      	movs	r3, #1
 810a3b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810a3ba:	e0b5      	b.n	810a528 <UART_SetConfig+0xa94>
 810a3bc:	03d09000 	.word	0x03d09000
 810a3c0:	003d0900 	.word	0x003d0900
 810a3c4:	08112fb4 	.word	0x08112fb4
 810a3c8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810a3cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810a3d0:	2b20      	cmp	r3, #32
 810a3d2:	dc49      	bgt.n	810a468 <UART_SetConfig+0x9d4>
 810a3d4:	2b00      	cmp	r3, #0
 810a3d6:	db7c      	blt.n	810a4d2 <UART_SetConfig+0xa3e>
 810a3d8:	2b20      	cmp	r3, #32
 810a3da:	d87a      	bhi.n	810a4d2 <UART_SetConfig+0xa3e>
 810a3dc:	a201      	add	r2, pc, #4	@ (adr r2, 810a3e4 <UART_SetConfig+0x950>)
 810a3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a3e2:	bf00      	nop
 810a3e4:	0810a46f 	.word	0x0810a46f
 810a3e8:	0810a477 	.word	0x0810a477
 810a3ec:	0810a4d3 	.word	0x0810a4d3
 810a3f0:	0810a4d3 	.word	0x0810a4d3
 810a3f4:	0810a47f 	.word	0x0810a47f
 810a3f8:	0810a4d3 	.word	0x0810a4d3
 810a3fc:	0810a4d3 	.word	0x0810a4d3
 810a400:	0810a4d3 	.word	0x0810a4d3
 810a404:	0810a48f 	.word	0x0810a48f
 810a408:	0810a4d3 	.word	0x0810a4d3
 810a40c:	0810a4d3 	.word	0x0810a4d3
 810a410:	0810a4d3 	.word	0x0810a4d3
 810a414:	0810a4d3 	.word	0x0810a4d3
 810a418:	0810a4d3 	.word	0x0810a4d3
 810a41c:	0810a4d3 	.word	0x0810a4d3
 810a420:	0810a4d3 	.word	0x0810a4d3
 810a424:	0810a49f 	.word	0x0810a49f
 810a428:	0810a4d3 	.word	0x0810a4d3
 810a42c:	0810a4d3 	.word	0x0810a4d3
 810a430:	0810a4d3 	.word	0x0810a4d3
 810a434:	0810a4d3 	.word	0x0810a4d3
 810a438:	0810a4d3 	.word	0x0810a4d3
 810a43c:	0810a4d3 	.word	0x0810a4d3
 810a440:	0810a4d3 	.word	0x0810a4d3
 810a444:	0810a4d3 	.word	0x0810a4d3
 810a448:	0810a4d3 	.word	0x0810a4d3
 810a44c:	0810a4d3 	.word	0x0810a4d3
 810a450:	0810a4d3 	.word	0x0810a4d3
 810a454:	0810a4d3 	.word	0x0810a4d3
 810a458:	0810a4d3 	.word	0x0810a4d3
 810a45c:	0810a4d3 	.word	0x0810a4d3
 810a460:	0810a4d3 	.word	0x0810a4d3
 810a464:	0810a4c5 	.word	0x0810a4c5
 810a468:	2b40      	cmp	r3, #64	@ 0x40
 810a46a:	d02e      	beq.n	810a4ca <UART_SetConfig+0xa36>
 810a46c:	e031      	b.n	810a4d2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a46e:	f7fc ff99 	bl	81073a4 <HAL_RCC_GetPCLK1Freq>
 810a472:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a474:	e033      	b.n	810a4de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a476:	f7fc ffab 	bl	81073d0 <HAL_RCC_GetPCLK2Freq>
 810a47a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a47c:	e02f      	b.n	810a4de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a47e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a482:	4618      	mov	r0, r3
 810a484:	f7fe f9da 	bl	810883c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a48a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a48c:	e027      	b.n	810a4de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a48e:	f107 0318 	add.w	r3, r7, #24
 810a492:	4618      	mov	r0, r3
 810a494:	f7fe fb26 	bl	8108ae4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a498:	69fb      	ldr	r3, [r7, #28]
 810a49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a49c:	e01f      	b.n	810a4de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a49e:	4b2d      	ldr	r3, [pc, #180]	@ (810a554 <UART_SetConfig+0xac0>)
 810a4a0:	681b      	ldr	r3, [r3, #0]
 810a4a2:	f003 0320 	and.w	r3, r3, #32
 810a4a6:	2b00      	cmp	r3, #0
 810a4a8:	d009      	beq.n	810a4be <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a4aa:	4b2a      	ldr	r3, [pc, #168]	@ (810a554 <UART_SetConfig+0xac0>)
 810a4ac:	681b      	ldr	r3, [r3, #0]
 810a4ae:	08db      	lsrs	r3, r3, #3
 810a4b0:	f003 0303 	and.w	r3, r3, #3
 810a4b4:	4a28      	ldr	r2, [pc, #160]	@ (810a558 <UART_SetConfig+0xac4>)
 810a4b6:	fa22 f303 	lsr.w	r3, r2, r3
 810a4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a4bc:	e00f      	b.n	810a4de <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810a4be:	4b26      	ldr	r3, [pc, #152]	@ (810a558 <UART_SetConfig+0xac4>)
 810a4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a4c2:	e00c      	b.n	810a4de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a4c4:	4b25      	ldr	r3, [pc, #148]	@ (810a55c <UART_SetConfig+0xac8>)
 810a4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a4c8:	e009      	b.n	810a4de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a4ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810a4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a4d0:	e005      	b.n	810a4de <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810a4d2:	2300      	movs	r3, #0
 810a4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810a4d6:	2301      	movs	r3, #1
 810a4d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810a4dc:	bf00      	nop
    }

    if (pclk != 0U)
 810a4de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a4e0:	2b00      	cmp	r3, #0
 810a4e2:	d021      	beq.n	810a528 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a4e4:	697b      	ldr	r3, [r7, #20]
 810a4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a4e8:	4a1d      	ldr	r2, [pc, #116]	@ (810a560 <UART_SetConfig+0xacc>)
 810a4ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a4ee:	461a      	mov	r2, r3
 810a4f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a4f2:	fbb3 f2f2 	udiv	r2, r3, r2
 810a4f6:	697b      	ldr	r3, [r7, #20]
 810a4f8:	685b      	ldr	r3, [r3, #4]
 810a4fa:	085b      	lsrs	r3, r3, #1
 810a4fc:	441a      	add	r2, r3
 810a4fe:	697b      	ldr	r3, [r7, #20]
 810a500:	685b      	ldr	r3, [r3, #4]
 810a502:	fbb2 f3f3 	udiv	r3, r2, r3
 810a506:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a50a:	2b0f      	cmp	r3, #15
 810a50c:	d909      	bls.n	810a522 <UART_SetConfig+0xa8e>
 810a50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a514:	d205      	bcs.n	810a522 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810a516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a518:	b29a      	uxth	r2, r3
 810a51a:	697b      	ldr	r3, [r7, #20]
 810a51c:	681b      	ldr	r3, [r3, #0]
 810a51e:	60da      	str	r2, [r3, #12]
 810a520:	e002      	b.n	810a528 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810a522:	2301      	movs	r3, #1
 810a524:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810a528:	697b      	ldr	r3, [r7, #20]
 810a52a:	2201      	movs	r2, #1
 810a52c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810a530:	697b      	ldr	r3, [r7, #20]
 810a532:	2201      	movs	r2, #1
 810a534:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810a538:	697b      	ldr	r3, [r7, #20]
 810a53a:	2200      	movs	r2, #0
 810a53c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810a53e:	697b      	ldr	r3, [r7, #20]
 810a540:	2200      	movs	r2, #0
 810a542:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810a544:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810a548:	4618      	mov	r0, r3
 810a54a:	3748      	adds	r7, #72	@ 0x48
 810a54c:	46bd      	mov	sp, r7
 810a54e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810a552:	bf00      	nop
 810a554:	58024400 	.word	0x58024400
 810a558:	03d09000 	.word	0x03d09000
 810a55c:	003d0900 	.word	0x003d0900
 810a560:	08112fb4 	.word	0x08112fb4

0810a564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810a564:	b480      	push	{r7}
 810a566:	b083      	sub	sp, #12
 810a568:	af00      	add	r7, sp, #0
 810a56a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810a56c:	687b      	ldr	r3, [r7, #4]
 810a56e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a570:	f003 0308 	and.w	r3, r3, #8
 810a574:	2b00      	cmp	r3, #0
 810a576:	d00a      	beq.n	810a58e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810a578:	687b      	ldr	r3, [r7, #4]
 810a57a:	681b      	ldr	r3, [r3, #0]
 810a57c:	685b      	ldr	r3, [r3, #4]
 810a57e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810a582:	687b      	ldr	r3, [r7, #4]
 810a584:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810a586:	687b      	ldr	r3, [r7, #4]
 810a588:	681b      	ldr	r3, [r3, #0]
 810a58a:	430a      	orrs	r2, r1
 810a58c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810a58e:	687b      	ldr	r3, [r7, #4]
 810a590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a592:	f003 0301 	and.w	r3, r3, #1
 810a596:	2b00      	cmp	r3, #0
 810a598:	d00a      	beq.n	810a5b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810a59a:	687b      	ldr	r3, [r7, #4]
 810a59c:	681b      	ldr	r3, [r3, #0]
 810a59e:	685b      	ldr	r3, [r3, #4]
 810a5a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810a5a4:	687b      	ldr	r3, [r7, #4]
 810a5a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a5a8:	687b      	ldr	r3, [r7, #4]
 810a5aa:	681b      	ldr	r3, [r3, #0]
 810a5ac:	430a      	orrs	r2, r1
 810a5ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810a5b0:	687b      	ldr	r3, [r7, #4]
 810a5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a5b4:	f003 0302 	and.w	r3, r3, #2
 810a5b8:	2b00      	cmp	r3, #0
 810a5ba:	d00a      	beq.n	810a5d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810a5bc:	687b      	ldr	r3, [r7, #4]
 810a5be:	681b      	ldr	r3, [r3, #0]
 810a5c0:	685b      	ldr	r3, [r3, #4]
 810a5c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810a5c6:	687b      	ldr	r3, [r7, #4]
 810a5c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810a5ca:	687b      	ldr	r3, [r7, #4]
 810a5cc:	681b      	ldr	r3, [r3, #0]
 810a5ce:	430a      	orrs	r2, r1
 810a5d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810a5d2:	687b      	ldr	r3, [r7, #4]
 810a5d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a5d6:	f003 0304 	and.w	r3, r3, #4
 810a5da:	2b00      	cmp	r3, #0
 810a5dc:	d00a      	beq.n	810a5f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810a5de:	687b      	ldr	r3, [r7, #4]
 810a5e0:	681b      	ldr	r3, [r3, #0]
 810a5e2:	685b      	ldr	r3, [r3, #4]
 810a5e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810a5e8:	687b      	ldr	r3, [r7, #4]
 810a5ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810a5ec:	687b      	ldr	r3, [r7, #4]
 810a5ee:	681b      	ldr	r3, [r3, #0]
 810a5f0:	430a      	orrs	r2, r1
 810a5f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810a5f4:	687b      	ldr	r3, [r7, #4]
 810a5f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a5f8:	f003 0310 	and.w	r3, r3, #16
 810a5fc:	2b00      	cmp	r3, #0
 810a5fe:	d00a      	beq.n	810a616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810a600:	687b      	ldr	r3, [r7, #4]
 810a602:	681b      	ldr	r3, [r3, #0]
 810a604:	689b      	ldr	r3, [r3, #8]
 810a606:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810a60a:	687b      	ldr	r3, [r7, #4]
 810a60c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810a60e:	687b      	ldr	r3, [r7, #4]
 810a610:	681b      	ldr	r3, [r3, #0]
 810a612:	430a      	orrs	r2, r1
 810a614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810a616:	687b      	ldr	r3, [r7, #4]
 810a618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a61a:	f003 0320 	and.w	r3, r3, #32
 810a61e:	2b00      	cmp	r3, #0
 810a620:	d00a      	beq.n	810a638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810a622:	687b      	ldr	r3, [r7, #4]
 810a624:	681b      	ldr	r3, [r3, #0]
 810a626:	689b      	ldr	r3, [r3, #8]
 810a628:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810a62c:	687b      	ldr	r3, [r7, #4]
 810a62e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810a630:	687b      	ldr	r3, [r7, #4]
 810a632:	681b      	ldr	r3, [r3, #0]
 810a634:	430a      	orrs	r2, r1
 810a636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810a638:	687b      	ldr	r3, [r7, #4]
 810a63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a63c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810a640:	2b00      	cmp	r3, #0
 810a642:	d01a      	beq.n	810a67a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810a644:	687b      	ldr	r3, [r7, #4]
 810a646:	681b      	ldr	r3, [r3, #0]
 810a648:	685b      	ldr	r3, [r3, #4]
 810a64a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810a64e:	687b      	ldr	r3, [r7, #4]
 810a650:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810a652:	687b      	ldr	r3, [r7, #4]
 810a654:	681b      	ldr	r3, [r3, #0]
 810a656:	430a      	orrs	r2, r1
 810a658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810a65a:	687b      	ldr	r3, [r7, #4]
 810a65c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810a65e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a662:	d10a      	bne.n	810a67a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810a664:	687b      	ldr	r3, [r7, #4]
 810a666:	681b      	ldr	r3, [r3, #0]
 810a668:	685b      	ldr	r3, [r3, #4]
 810a66a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810a66e:	687b      	ldr	r3, [r7, #4]
 810a670:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810a672:	687b      	ldr	r3, [r7, #4]
 810a674:	681b      	ldr	r3, [r3, #0]
 810a676:	430a      	orrs	r2, r1
 810a678:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810a67a:	687b      	ldr	r3, [r7, #4]
 810a67c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a67e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810a682:	2b00      	cmp	r3, #0
 810a684:	d00a      	beq.n	810a69c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810a686:	687b      	ldr	r3, [r7, #4]
 810a688:	681b      	ldr	r3, [r3, #0]
 810a68a:	685b      	ldr	r3, [r3, #4]
 810a68c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810a690:	687b      	ldr	r3, [r7, #4]
 810a692:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810a694:	687b      	ldr	r3, [r7, #4]
 810a696:	681b      	ldr	r3, [r3, #0]
 810a698:	430a      	orrs	r2, r1
 810a69a:	605a      	str	r2, [r3, #4]
  }
}
 810a69c:	bf00      	nop
 810a69e:	370c      	adds	r7, #12
 810a6a0:	46bd      	mov	sp, r7
 810a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6a6:	4770      	bx	lr

0810a6a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810a6a8:	b580      	push	{r7, lr}
 810a6aa:	b098      	sub	sp, #96	@ 0x60
 810a6ac:	af02      	add	r7, sp, #8
 810a6ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a6b0:	687b      	ldr	r3, [r7, #4]
 810a6b2:	2200      	movs	r2, #0
 810a6b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810a6b8:	f7fb fbd2 	bl	8105e60 <HAL_GetTick>
 810a6bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810a6be:	687b      	ldr	r3, [r7, #4]
 810a6c0:	681b      	ldr	r3, [r3, #0]
 810a6c2:	681b      	ldr	r3, [r3, #0]
 810a6c4:	f003 0308 	and.w	r3, r3, #8
 810a6c8:	2b08      	cmp	r3, #8
 810a6ca:	d12f      	bne.n	810a72c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a6cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810a6d0:	9300      	str	r3, [sp, #0]
 810a6d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810a6d4:	2200      	movs	r2, #0
 810a6d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810a6da:	6878      	ldr	r0, [r7, #4]
 810a6dc:	f000 f88e 	bl	810a7fc <UART_WaitOnFlagUntilTimeout>
 810a6e0:	4603      	mov	r3, r0
 810a6e2:	2b00      	cmp	r3, #0
 810a6e4:	d022      	beq.n	810a72c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810a6e6:	687b      	ldr	r3, [r7, #4]
 810a6e8:	681b      	ldr	r3, [r3, #0]
 810a6ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a6ee:	e853 3f00 	ldrex	r3, [r3]
 810a6f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810a6f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a6f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810a6fa:	653b      	str	r3, [r7, #80]	@ 0x50
 810a6fc:	687b      	ldr	r3, [r7, #4]
 810a6fe:	681b      	ldr	r3, [r3, #0]
 810a700:	461a      	mov	r2, r3
 810a702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810a704:	647b      	str	r3, [r7, #68]	@ 0x44
 810a706:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a708:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810a70a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810a70c:	e841 2300 	strex	r3, r2, [r1]
 810a710:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810a712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a714:	2b00      	cmp	r3, #0
 810a716:	d1e6      	bne.n	810a6e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810a718:	687b      	ldr	r3, [r7, #4]
 810a71a:	2220      	movs	r2, #32
 810a71c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810a720:	687b      	ldr	r3, [r7, #4]
 810a722:	2200      	movs	r2, #0
 810a724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a728:	2303      	movs	r3, #3
 810a72a:	e063      	b.n	810a7f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810a72c:	687b      	ldr	r3, [r7, #4]
 810a72e:	681b      	ldr	r3, [r3, #0]
 810a730:	681b      	ldr	r3, [r3, #0]
 810a732:	f003 0304 	and.w	r3, r3, #4
 810a736:	2b04      	cmp	r3, #4
 810a738:	d149      	bne.n	810a7ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a73a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810a73e:	9300      	str	r3, [sp, #0]
 810a740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810a742:	2200      	movs	r2, #0
 810a744:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810a748:	6878      	ldr	r0, [r7, #4]
 810a74a:	f000 f857 	bl	810a7fc <UART_WaitOnFlagUntilTimeout>
 810a74e:	4603      	mov	r3, r0
 810a750:	2b00      	cmp	r3, #0
 810a752:	d03c      	beq.n	810a7ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810a754:	687b      	ldr	r3, [r7, #4]
 810a756:	681b      	ldr	r3, [r3, #0]
 810a758:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a75c:	e853 3f00 	ldrex	r3, [r3]
 810a760:	623b      	str	r3, [r7, #32]
   return(result);
 810a762:	6a3b      	ldr	r3, [r7, #32]
 810a764:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810a768:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810a76a:	687b      	ldr	r3, [r7, #4]
 810a76c:	681b      	ldr	r3, [r3, #0]
 810a76e:	461a      	mov	r2, r3
 810a770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810a772:	633b      	str	r3, [r7, #48]	@ 0x30
 810a774:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a776:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810a778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a77a:	e841 2300 	strex	r3, r2, [r1]
 810a77e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810a780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a782:	2b00      	cmp	r3, #0
 810a784:	d1e6      	bne.n	810a754 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a786:	687b      	ldr	r3, [r7, #4]
 810a788:	681b      	ldr	r3, [r3, #0]
 810a78a:	3308      	adds	r3, #8
 810a78c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a78e:	693b      	ldr	r3, [r7, #16]
 810a790:	e853 3f00 	ldrex	r3, [r3]
 810a794:	60fb      	str	r3, [r7, #12]
   return(result);
 810a796:	68fb      	ldr	r3, [r7, #12]
 810a798:	f023 0301 	bic.w	r3, r3, #1
 810a79c:	64bb      	str	r3, [r7, #72]	@ 0x48
 810a79e:	687b      	ldr	r3, [r7, #4]
 810a7a0:	681b      	ldr	r3, [r3, #0]
 810a7a2:	3308      	adds	r3, #8
 810a7a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810a7a6:	61fa      	str	r2, [r7, #28]
 810a7a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a7aa:	69b9      	ldr	r1, [r7, #24]
 810a7ac:	69fa      	ldr	r2, [r7, #28]
 810a7ae:	e841 2300 	strex	r3, r2, [r1]
 810a7b2:	617b      	str	r3, [r7, #20]
   return(result);
 810a7b4:	697b      	ldr	r3, [r7, #20]
 810a7b6:	2b00      	cmp	r3, #0
 810a7b8:	d1e5      	bne.n	810a786 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810a7ba:	687b      	ldr	r3, [r7, #4]
 810a7bc:	2220      	movs	r2, #32
 810a7be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810a7c2:	687b      	ldr	r3, [r7, #4]
 810a7c4:	2200      	movs	r2, #0
 810a7c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a7ca:	2303      	movs	r3, #3
 810a7cc:	e012      	b.n	810a7f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810a7ce:	687b      	ldr	r3, [r7, #4]
 810a7d0:	2220      	movs	r2, #32
 810a7d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810a7d6:	687b      	ldr	r3, [r7, #4]
 810a7d8:	2220      	movs	r2, #32
 810a7da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a7de:	687b      	ldr	r3, [r7, #4]
 810a7e0:	2200      	movs	r2, #0
 810a7e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810a7e4:	687b      	ldr	r3, [r7, #4]
 810a7e6:	2200      	movs	r2, #0
 810a7e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810a7ea:	687b      	ldr	r3, [r7, #4]
 810a7ec:	2200      	movs	r2, #0
 810a7ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810a7f2:	2300      	movs	r3, #0
}
 810a7f4:	4618      	mov	r0, r3
 810a7f6:	3758      	adds	r7, #88	@ 0x58
 810a7f8:	46bd      	mov	sp, r7
 810a7fa:	bd80      	pop	{r7, pc}

0810a7fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810a7fc:	b580      	push	{r7, lr}
 810a7fe:	b084      	sub	sp, #16
 810a800:	af00      	add	r7, sp, #0
 810a802:	60f8      	str	r0, [r7, #12]
 810a804:	60b9      	str	r1, [r7, #8]
 810a806:	603b      	str	r3, [r7, #0]
 810a808:	4613      	mov	r3, r2
 810a80a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a80c:	e04f      	b.n	810a8ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810a80e:	69bb      	ldr	r3, [r7, #24]
 810a810:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a814:	d04b      	beq.n	810a8ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810a816:	f7fb fb23 	bl	8105e60 <HAL_GetTick>
 810a81a:	4602      	mov	r2, r0
 810a81c:	683b      	ldr	r3, [r7, #0]
 810a81e:	1ad3      	subs	r3, r2, r3
 810a820:	69ba      	ldr	r2, [r7, #24]
 810a822:	429a      	cmp	r2, r3
 810a824:	d302      	bcc.n	810a82c <UART_WaitOnFlagUntilTimeout+0x30>
 810a826:	69bb      	ldr	r3, [r7, #24]
 810a828:	2b00      	cmp	r3, #0
 810a82a:	d101      	bne.n	810a830 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810a82c:	2303      	movs	r3, #3
 810a82e:	e04e      	b.n	810a8ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810a830:	68fb      	ldr	r3, [r7, #12]
 810a832:	681b      	ldr	r3, [r3, #0]
 810a834:	681b      	ldr	r3, [r3, #0]
 810a836:	f003 0304 	and.w	r3, r3, #4
 810a83a:	2b00      	cmp	r3, #0
 810a83c:	d037      	beq.n	810a8ae <UART_WaitOnFlagUntilTimeout+0xb2>
 810a83e:	68bb      	ldr	r3, [r7, #8]
 810a840:	2b80      	cmp	r3, #128	@ 0x80
 810a842:	d034      	beq.n	810a8ae <UART_WaitOnFlagUntilTimeout+0xb2>
 810a844:	68bb      	ldr	r3, [r7, #8]
 810a846:	2b40      	cmp	r3, #64	@ 0x40
 810a848:	d031      	beq.n	810a8ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810a84a:	68fb      	ldr	r3, [r7, #12]
 810a84c:	681b      	ldr	r3, [r3, #0]
 810a84e:	69db      	ldr	r3, [r3, #28]
 810a850:	f003 0308 	and.w	r3, r3, #8
 810a854:	2b08      	cmp	r3, #8
 810a856:	d110      	bne.n	810a87a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810a858:	68fb      	ldr	r3, [r7, #12]
 810a85a:	681b      	ldr	r3, [r3, #0]
 810a85c:	2208      	movs	r2, #8
 810a85e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810a860:	68f8      	ldr	r0, [r7, #12]
 810a862:	f000 f95b 	bl	810ab1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810a866:	68fb      	ldr	r3, [r7, #12]
 810a868:	2208      	movs	r2, #8
 810a86a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810a86e:	68fb      	ldr	r3, [r7, #12]
 810a870:	2200      	movs	r2, #0
 810a872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810a876:	2301      	movs	r3, #1
 810a878:	e029      	b.n	810a8ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810a87a:	68fb      	ldr	r3, [r7, #12]
 810a87c:	681b      	ldr	r3, [r3, #0]
 810a87e:	69db      	ldr	r3, [r3, #28]
 810a880:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810a884:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810a888:	d111      	bne.n	810a8ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810a88a:	68fb      	ldr	r3, [r7, #12]
 810a88c:	681b      	ldr	r3, [r3, #0]
 810a88e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810a892:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810a894:	68f8      	ldr	r0, [r7, #12]
 810a896:	f000 f941 	bl	810ab1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810a89a:	68fb      	ldr	r3, [r7, #12]
 810a89c:	2220      	movs	r2, #32
 810a89e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810a8a2:	68fb      	ldr	r3, [r7, #12]
 810a8a4:	2200      	movs	r2, #0
 810a8a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810a8aa:	2303      	movs	r3, #3
 810a8ac:	e00f      	b.n	810a8ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a8ae:	68fb      	ldr	r3, [r7, #12]
 810a8b0:	681b      	ldr	r3, [r3, #0]
 810a8b2:	69da      	ldr	r2, [r3, #28]
 810a8b4:	68bb      	ldr	r3, [r7, #8]
 810a8b6:	4013      	ands	r3, r2
 810a8b8:	68ba      	ldr	r2, [r7, #8]
 810a8ba:	429a      	cmp	r2, r3
 810a8bc:	bf0c      	ite	eq
 810a8be:	2301      	moveq	r3, #1
 810a8c0:	2300      	movne	r3, #0
 810a8c2:	b2db      	uxtb	r3, r3
 810a8c4:	461a      	mov	r2, r3
 810a8c6:	79fb      	ldrb	r3, [r7, #7]
 810a8c8:	429a      	cmp	r2, r3
 810a8ca:	d0a0      	beq.n	810a80e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810a8cc:	2300      	movs	r3, #0
}
 810a8ce:	4618      	mov	r0, r3
 810a8d0:	3710      	adds	r7, #16
 810a8d2:	46bd      	mov	sp, r7
 810a8d4:	bd80      	pop	{r7, pc}
	...

0810a8d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810a8d8:	b480      	push	{r7}
 810a8da:	b0a3      	sub	sp, #140	@ 0x8c
 810a8dc:	af00      	add	r7, sp, #0
 810a8de:	60f8      	str	r0, [r7, #12]
 810a8e0:	60b9      	str	r1, [r7, #8]
 810a8e2:	4613      	mov	r3, r2
 810a8e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 810a8e6:	68fb      	ldr	r3, [r7, #12]
 810a8e8:	68ba      	ldr	r2, [r7, #8]
 810a8ea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 810a8ec:	68fb      	ldr	r3, [r7, #12]
 810a8ee:	88fa      	ldrh	r2, [r7, #6]
 810a8f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 810a8f4:	68fb      	ldr	r3, [r7, #12]
 810a8f6:	88fa      	ldrh	r2, [r7, #6]
 810a8f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 810a8fc:	68fb      	ldr	r3, [r7, #12]
 810a8fe:	2200      	movs	r2, #0
 810a900:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 810a902:	68fb      	ldr	r3, [r7, #12]
 810a904:	689b      	ldr	r3, [r3, #8]
 810a906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a90a:	d10e      	bne.n	810a92a <UART_Start_Receive_IT+0x52>
 810a90c:	68fb      	ldr	r3, [r7, #12]
 810a90e:	691b      	ldr	r3, [r3, #16]
 810a910:	2b00      	cmp	r3, #0
 810a912:	d105      	bne.n	810a920 <UART_Start_Receive_IT+0x48>
 810a914:	68fb      	ldr	r3, [r7, #12]
 810a916:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810a91a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a91e:	e02d      	b.n	810a97c <UART_Start_Receive_IT+0xa4>
 810a920:	68fb      	ldr	r3, [r7, #12]
 810a922:	22ff      	movs	r2, #255	@ 0xff
 810a924:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a928:	e028      	b.n	810a97c <UART_Start_Receive_IT+0xa4>
 810a92a:	68fb      	ldr	r3, [r7, #12]
 810a92c:	689b      	ldr	r3, [r3, #8]
 810a92e:	2b00      	cmp	r3, #0
 810a930:	d10d      	bne.n	810a94e <UART_Start_Receive_IT+0x76>
 810a932:	68fb      	ldr	r3, [r7, #12]
 810a934:	691b      	ldr	r3, [r3, #16]
 810a936:	2b00      	cmp	r3, #0
 810a938:	d104      	bne.n	810a944 <UART_Start_Receive_IT+0x6c>
 810a93a:	68fb      	ldr	r3, [r7, #12]
 810a93c:	22ff      	movs	r2, #255	@ 0xff
 810a93e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a942:	e01b      	b.n	810a97c <UART_Start_Receive_IT+0xa4>
 810a944:	68fb      	ldr	r3, [r7, #12]
 810a946:	227f      	movs	r2, #127	@ 0x7f
 810a948:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a94c:	e016      	b.n	810a97c <UART_Start_Receive_IT+0xa4>
 810a94e:	68fb      	ldr	r3, [r7, #12]
 810a950:	689b      	ldr	r3, [r3, #8]
 810a952:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810a956:	d10d      	bne.n	810a974 <UART_Start_Receive_IT+0x9c>
 810a958:	68fb      	ldr	r3, [r7, #12]
 810a95a:	691b      	ldr	r3, [r3, #16]
 810a95c:	2b00      	cmp	r3, #0
 810a95e:	d104      	bne.n	810a96a <UART_Start_Receive_IT+0x92>
 810a960:	68fb      	ldr	r3, [r7, #12]
 810a962:	227f      	movs	r2, #127	@ 0x7f
 810a964:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a968:	e008      	b.n	810a97c <UART_Start_Receive_IT+0xa4>
 810a96a:	68fb      	ldr	r3, [r7, #12]
 810a96c:	223f      	movs	r2, #63	@ 0x3f
 810a96e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810a972:	e003      	b.n	810a97c <UART_Start_Receive_IT+0xa4>
 810a974:	68fb      	ldr	r3, [r7, #12]
 810a976:	2200      	movs	r2, #0
 810a978:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a97c:	68fb      	ldr	r3, [r7, #12]
 810a97e:	2200      	movs	r2, #0
 810a980:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810a984:	68fb      	ldr	r3, [r7, #12]
 810a986:	2222      	movs	r2, #34	@ 0x22
 810a988:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a98c:	68fb      	ldr	r3, [r7, #12]
 810a98e:	681b      	ldr	r3, [r3, #0]
 810a990:	3308      	adds	r3, #8
 810a992:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810a996:	e853 3f00 	ldrex	r3, [r3]
 810a99a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810a99c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810a99e:	f043 0301 	orr.w	r3, r3, #1
 810a9a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810a9a6:	68fb      	ldr	r3, [r7, #12]
 810a9a8:	681b      	ldr	r3, [r3, #0]
 810a9aa:	3308      	adds	r3, #8
 810a9ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 810a9b0:	673a      	str	r2, [r7, #112]	@ 0x70
 810a9b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a9b4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 810a9b6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 810a9b8:	e841 2300 	strex	r3, r2, [r1]
 810a9bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 810a9be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810a9c0:	2b00      	cmp	r3, #0
 810a9c2:	d1e3      	bne.n	810a98c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 810a9c4:	68fb      	ldr	r3, [r7, #12]
 810a9c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810a9c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810a9cc:	d14f      	bne.n	810aa6e <UART_Start_Receive_IT+0x196>
 810a9ce:	68fb      	ldr	r3, [r7, #12]
 810a9d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810a9d4:	88fa      	ldrh	r2, [r7, #6]
 810a9d6:	429a      	cmp	r2, r3
 810a9d8:	d349      	bcc.n	810aa6e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810a9da:	68fb      	ldr	r3, [r7, #12]
 810a9dc:	689b      	ldr	r3, [r3, #8]
 810a9de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a9e2:	d107      	bne.n	810a9f4 <UART_Start_Receive_IT+0x11c>
 810a9e4:	68fb      	ldr	r3, [r7, #12]
 810a9e6:	691b      	ldr	r3, [r3, #16]
 810a9e8:	2b00      	cmp	r3, #0
 810a9ea:	d103      	bne.n	810a9f4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 810a9ec:	68fb      	ldr	r3, [r7, #12]
 810a9ee:	4a47      	ldr	r2, [pc, #284]	@ (810ab0c <UART_Start_Receive_IT+0x234>)
 810a9f0:	675a      	str	r2, [r3, #116]	@ 0x74
 810a9f2:	e002      	b.n	810a9fa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 810a9f4:	68fb      	ldr	r3, [r7, #12]
 810a9f6:	4a46      	ldr	r2, [pc, #280]	@ (810ab10 <UART_Start_Receive_IT+0x238>)
 810a9f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810a9fa:	68fb      	ldr	r3, [r7, #12]
 810a9fc:	691b      	ldr	r3, [r3, #16]
 810a9fe:	2b00      	cmp	r3, #0
 810aa00:	d01a      	beq.n	810aa38 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810aa02:	68fb      	ldr	r3, [r7, #12]
 810aa04:	681b      	ldr	r3, [r3, #0]
 810aa06:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aa08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810aa0a:	e853 3f00 	ldrex	r3, [r3]
 810aa0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810aa10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810aa12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810aa16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810aa1a:	68fb      	ldr	r3, [r7, #12]
 810aa1c:	681b      	ldr	r3, [r3, #0]
 810aa1e:	461a      	mov	r2, r3
 810aa20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810aa24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810aa26:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aa28:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 810aa2a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 810aa2c:	e841 2300 	strex	r3, r2, [r1]
 810aa30:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 810aa32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810aa34:	2b00      	cmp	r3, #0
 810aa36:	d1e4      	bne.n	810aa02 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810aa38:	68fb      	ldr	r3, [r7, #12]
 810aa3a:	681b      	ldr	r3, [r3, #0]
 810aa3c:	3308      	adds	r3, #8
 810aa3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aa40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810aa42:	e853 3f00 	ldrex	r3, [r3]
 810aa46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810aa48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810aa4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810aa4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810aa50:	68fb      	ldr	r3, [r7, #12]
 810aa52:	681b      	ldr	r3, [r3, #0]
 810aa54:	3308      	adds	r3, #8
 810aa56:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 810aa58:	64ba      	str	r2, [r7, #72]	@ 0x48
 810aa5a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aa5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810aa5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810aa60:	e841 2300 	strex	r3, r2, [r1]
 810aa64:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 810aa66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810aa68:	2b00      	cmp	r3, #0
 810aa6a:	d1e5      	bne.n	810aa38 <UART_Start_Receive_IT+0x160>
 810aa6c:	e046      	b.n	810aafc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810aa6e:	68fb      	ldr	r3, [r7, #12]
 810aa70:	689b      	ldr	r3, [r3, #8]
 810aa72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810aa76:	d107      	bne.n	810aa88 <UART_Start_Receive_IT+0x1b0>
 810aa78:	68fb      	ldr	r3, [r7, #12]
 810aa7a:	691b      	ldr	r3, [r3, #16]
 810aa7c:	2b00      	cmp	r3, #0
 810aa7e:	d103      	bne.n	810aa88 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 810aa80:	68fb      	ldr	r3, [r7, #12]
 810aa82:	4a24      	ldr	r2, [pc, #144]	@ (810ab14 <UART_Start_Receive_IT+0x23c>)
 810aa84:	675a      	str	r2, [r3, #116]	@ 0x74
 810aa86:	e002      	b.n	810aa8e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 810aa88:	68fb      	ldr	r3, [r7, #12]
 810aa8a:	4a23      	ldr	r2, [pc, #140]	@ (810ab18 <UART_Start_Receive_IT+0x240>)
 810aa8c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810aa8e:	68fb      	ldr	r3, [r7, #12]
 810aa90:	691b      	ldr	r3, [r3, #16]
 810aa92:	2b00      	cmp	r3, #0
 810aa94:	d019      	beq.n	810aaca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 810aa96:	68fb      	ldr	r3, [r7, #12]
 810aa98:	681b      	ldr	r3, [r3, #0]
 810aa9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aa9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810aa9e:	e853 3f00 	ldrex	r3, [r3]
 810aaa2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810aaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810aaa6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 810aaaa:	677b      	str	r3, [r7, #116]	@ 0x74
 810aaac:	68fb      	ldr	r3, [r7, #12]
 810aaae:	681b      	ldr	r3, [r3, #0]
 810aab0:	461a      	mov	r2, r3
 810aab2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810aab4:	637b      	str	r3, [r7, #52]	@ 0x34
 810aab6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aab8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 810aaba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810aabc:	e841 2300 	strex	r3, r2, [r1]
 810aac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 810aac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810aac4:	2b00      	cmp	r3, #0
 810aac6:	d1e6      	bne.n	810aa96 <UART_Start_Receive_IT+0x1be>
 810aac8:	e018      	b.n	810aafc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810aaca:	68fb      	ldr	r3, [r7, #12]
 810aacc:	681b      	ldr	r3, [r3, #0]
 810aace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aad0:	697b      	ldr	r3, [r7, #20]
 810aad2:	e853 3f00 	ldrex	r3, [r3]
 810aad6:	613b      	str	r3, [r7, #16]
   return(result);
 810aad8:	693b      	ldr	r3, [r7, #16]
 810aada:	f043 0320 	orr.w	r3, r3, #32
 810aade:	67bb      	str	r3, [r7, #120]	@ 0x78
 810aae0:	68fb      	ldr	r3, [r7, #12]
 810aae2:	681b      	ldr	r3, [r3, #0]
 810aae4:	461a      	mov	r2, r3
 810aae6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810aae8:	623b      	str	r3, [r7, #32]
 810aaea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aaec:	69f9      	ldr	r1, [r7, #28]
 810aaee:	6a3a      	ldr	r2, [r7, #32]
 810aaf0:	e841 2300 	strex	r3, r2, [r1]
 810aaf4:	61bb      	str	r3, [r7, #24]
   return(result);
 810aaf6:	69bb      	ldr	r3, [r7, #24]
 810aaf8:	2b00      	cmp	r3, #0
 810aafa:	d1e6      	bne.n	810aaca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 810aafc:	2300      	movs	r3, #0
}
 810aafe:	4618      	mov	r0, r3
 810ab00:	378c      	adds	r7, #140	@ 0x8c
 810ab02:	46bd      	mov	sp, r7
 810ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab08:	4770      	bx	lr
 810ab0a:	bf00      	nop
 810ab0c:	0810b339 	.word	0x0810b339
 810ab10:	0810afd5 	.word	0x0810afd5
 810ab14:	0810ae1d 	.word	0x0810ae1d
 810ab18:	0810ac65 	.word	0x0810ac65

0810ab1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810ab1c:	b480      	push	{r7}
 810ab1e:	b095      	sub	sp, #84	@ 0x54
 810ab20:	af00      	add	r7, sp, #0
 810ab22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810ab24:	687b      	ldr	r3, [r7, #4]
 810ab26:	681b      	ldr	r3, [r3, #0]
 810ab28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ab2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ab2c:	e853 3f00 	ldrex	r3, [r3]
 810ab30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810ab32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810ab38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810ab3a:	687b      	ldr	r3, [r7, #4]
 810ab3c:	681b      	ldr	r3, [r3, #0]
 810ab3e:	461a      	mov	r2, r3
 810ab40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810ab42:	643b      	str	r3, [r7, #64]	@ 0x40
 810ab44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ab46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810ab48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810ab4a:	e841 2300 	strex	r3, r2, [r1]
 810ab4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810ab50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ab52:	2b00      	cmp	r3, #0
 810ab54:	d1e6      	bne.n	810ab24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810ab56:	687b      	ldr	r3, [r7, #4]
 810ab58:	681b      	ldr	r3, [r3, #0]
 810ab5a:	3308      	adds	r3, #8
 810ab5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ab5e:	6a3b      	ldr	r3, [r7, #32]
 810ab60:	e853 3f00 	ldrex	r3, [r3]
 810ab64:	61fb      	str	r3, [r7, #28]
   return(result);
 810ab66:	69fb      	ldr	r3, [r7, #28]
 810ab68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810ab6c:	f023 0301 	bic.w	r3, r3, #1
 810ab70:	64bb      	str	r3, [r7, #72]	@ 0x48
 810ab72:	687b      	ldr	r3, [r7, #4]
 810ab74:	681b      	ldr	r3, [r3, #0]
 810ab76:	3308      	adds	r3, #8
 810ab78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810ab7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810ab7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ab7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810ab80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810ab82:	e841 2300 	strex	r3, r2, [r1]
 810ab86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810ab88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ab8a:	2b00      	cmp	r3, #0
 810ab8c:	d1e3      	bne.n	810ab56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810ab8e:	687b      	ldr	r3, [r7, #4]
 810ab90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810ab92:	2b01      	cmp	r3, #1
 810ab94:	d118      	bne.n	810abc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810ab96:	687b      	ldr	r3, [r7, #4]
 810ab98:	681b      	ldr	r3, [r3, #0]
 810ab9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ab9c:	68fb      	ldr	r3, [r7, #12]
 810ab9e:	e853 3f00 	ldrex	r3, [r3]
 810aba2:	60bb      	str	r3, [r7, #8]
   return(result);
 810aba4:	68bb      	ldr	r3, [r7, #8]
 810aba6:	f023 0310 	bic.w	r3, r3, #16
 810abaa:	647b      	str	r3, [r7, #68]	@ 0x44
 810abac:	687b      	ldr	r3, [r7, #4]
 810abae:	681b      	ldr	r3, [r3, #0]
 810abb0:	461a      	mov	r2, r3
 810abb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810abb4:	61bb      	str	r3, [r7, #24]
 810abb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810abb8:	6979      	ldr	r1, [r7, #20]
 810abba:	69ba      	ldr	r2, [r7, #24]
 810abbc:	e841 2300 	strex	r3, r2, [r1]
 810abc0:	613b      	str	r3, [r7, #16]
   return(result);
 810abc2:	693b      	ldr	r3, [r7, #16]
 810abc4:	2b00      	cmp	r3, #0
 810abc6:	d1e6      	bne.n	810ab96 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810abc8:	687b      	ldr	r3, [r7, #4]
 810abca:	2220      	movs	r2, #32
 810abcc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810abd0:	687b      	ldr	r3, [r7, #4]
 810abd2:	2200      	movs	r2, #0
 810abd4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810abd6:	687b      	ldr	r3, [r7, #4]
 810abd8:	2200      	movs	r2, #0
 810abda:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810abdc:	bf00      	nop
 810abde:	3754      	adds	r7, #84	@ 0x54
 810abe0:	46bd      	mov	sp, r7
 810abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810abe6:	4770      	bx	lr

0810abe8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810abe8:	b580      	push	{r7, lr}
 810abea:	b084      	sub	sp, #16
 810abec:	af00      	add	r7, sp, #0
 810abee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810abf0:	687b      	ldr	r3, [r7, #4]
 810abf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810abf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810abf6:	68fb      	ldr	r3, [r7, #12]
 810abf8:	2200      	movs	r2, #0
 810abfa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810abfe:	68f8      	ldr	r0, [r7, #12]
 810ac00:	f7fe ff32 	bl	8109a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810ac04:	bf00      	nop
 810ac06:	3710      	adds	r7, #16
 810ac08:	46bd      	mov	sp, r7
 810ac0a:	bd80      	pop	{r7, pc}

0810ac0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810ac0c:	b580      	push	{r7, lr}
 810ac0e:	b088      	sub	sp, #32
 810ac10:	af00      	add	r7, sp, #0
 810ac12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810ac14:	687b      	ldr	r3, [r7, #4]
 810ac16:	681b      	ldr	r3, [r3, #0]
 810ac18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ac1a:	68fb      	ldr	r3, [r7, #12]
 810ac1c:	e853 3f00 	ldrex	r3, [r3]
 810ac20:	60bb      	str	r3, [r7, #8]
   return(result);
 810ac22:	68bb      	ldr	r3, [r7, #8]
 810ac24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810ac28:	61fb      	str	r3, [r7, #28]
 810ac2a:	687b      	ldr	r3, [r7, #4]
 810ac2c:	681b      	ldr	r3, [r3, #0]
 810ac2e:	461a      	mov	r2, r3
 810ac30:	69fb      	ldr	r3, [r7, #28]
 810ac32:	61bb      	str	r3, [r7, #24]
 810ac34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ac36:	6979      	ldr	r1, [r7, #20]
 810ac38:	69ba      	ldr	r2, [r7, #24]
 810ac3a:	e841 2300 	strex	r3, r2, [r1]
 810ac3e:	613b      	str	r3, [r7, #16]
   return(result);
 810ac40:	693b      	ldr	r3, [r7, #16]
 810ac42:	2b00      	cmp	r3, #0
 810ac44:	d1e6      	bne.n	810ac14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810ac46:	687b      	ldr	r3, [r7, #4]
 810ac48:	2220      	movs	r2, #32
 810ac4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810ac4e:	687b      	ldr	r3, [r7, #4]
 810ac50:	2200      	movs	r2, #0
 810ac52:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810ac54:	6878      	ldr	r0, [r7, #4]
 810ac56:	f7fe fefd 	bl	8109a54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810ac5a:	bf00      	nop
 810ac5c:	3720      	adds	r7, #32
 810ac5e:	46bd      	mov	sp, r7
 810ac60:	bd80      	pop	{r7, pc}
	...

0810ac64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 810ac64:	b580      	push	{r7, lr}
 810ac66:	b09c      	sub	sp, #112	@ 0x70
 810ac68:	af00      	add	r7, sp, #0
 810ac6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 810ac6c:	687b      	ldr	r3, [r7, #4]
 810ac6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810ac72:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810ac76:	687b      	ldr	r3, [r7, #4]
 810ac78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810ac7c:	2b22      	cmp	r3, #34	@ 0x22
 810ac7e:	f040 80be 	bne.w	810adfe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810ac82:	687b      	ldr	r3, [r7, #4]
 810ac84:	681b      	ldr	r3, [r3, #0]
 810ac86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ac88:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 810ac8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 810ac90:	b2d9      	uxtb	r1, r3
 810ac92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 810ac96:	b2da      	uxtb	r2, r3
 810ac98:	687b      	ldr	r3, [r7, #4]
 810ac9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ac9c:	400a      	ands	r2, r1
 810ac9e:	b2d2      	uxtb	r2, r2
 810aca0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 810aca2:	687b      	ldr	r3, [r7, #4]
 810aca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810aca6:	1c5a      	adds	r2, r3, #1
 810aca8:	687b      	ldr	r3, [r7, #4]
 810acaa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 810acac:	687b      	ldr	r3, [r7, #4]
 810acae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810acb2:	b29b      	uxth	r3, r3
 810acb4:	3b01      	subs	r3, #1
 810acb6:	b29a      	uxth	r2, r3
 810acb8:	687b      	ldr	r3, [r7, #4]
 810acba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 810acbe:	687b      	ldr	r3, [r7, #4]
 810acc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810acc4:	b29b      	uxth	r3, r3
 810acc6:	2b00      	cmp	r3, #0
 810acc8:	f040 80a1 	bne.w	810ae0e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810accc:	687b      	ldr	r3, [r7, #4]
 810acce:	681b      	ldr	r3, [r3, #0]
 810acd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810acd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810acd4:	e853 3f00 	ldrex	r3, [r3]
 810acd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810acda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810acdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810ace0:	66bb      	str	r3, [r7, #104]	@ 0x68
 810ace2:	687b      	ldr	r3, [r7, #4]
 810ace4:	681b      	ldr	r3, [r3, #0]
 810ace6:	461a      	mov	r2, r3
 810ace8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810acea:	65bb      	str	r3, [r7, #88]	@ 0x58
 810acec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810acee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810acf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810acf2:	e841 2300 	strex	r3, r2, [r1]
 810acf6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810acf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810acfa:	2b00      	cmp	r3, #0
 810acfc:	d1e6      	bne.n	810accc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810acfe:	687b      	ldr	r3, [r7, #4]
 810ad00:	681b      	ldr	r3, [r3, #0]
 810ad02:	3308      	adds	r3, #8
 810ad04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ad06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ad08:	e853 3f00 	ldrex	r3, [r3]
 810ad0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810ad0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ad10:	f023 0301 	bic.w	r3, r3, #1
 810ad14:	667b      	str	r3, [r7, #100]	@ 0x64
 810ad16:	687b      	ldr	r3, [r7, #4]
 810ad18:	681b      	ldr	r3, [r3, #0]
 810ad1a:	3308      	adds	r3, #8
 810ad1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 810ad1e:	647a      	str	r2, [r7, #68]	@ 0x44
 810ad20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ad22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810ad24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810ad26:	e841 2300 	strex	r3, r2, [r1]
 810ad2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810ad2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ad2e:	2b00      	cmp	r3, #0
 810ad30:	d1e5      	bne.n	810acfe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 810ad32:	687b      	ldr	r3, [r7, #4]
 810ad34:	2220      	movs	r2, #32
 810ad36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810ad3a:	687b      	ldr	r3, [r7, #4]
 810ad3c:	2200      	movs	r2, #0
 810ad3e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 810ad40:	687b      	ldr	r3, [r7, #4]
 810ad42:	2200      	movs	r2, #0
 810ad44:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810ad46:	687b      	ldr	r3, [r7, #4]
 810ad48:	681b      	ldr	r3, [r3, #0]
 810ad4a:	4a33      	ldr	r2, [pc, #204]	@ (810ae18 <UART_RxISR_8BIT+0x1b4>)
 810ad4c:	4293      	cmp	r3, r2
 810ad4e:	d01f      	beq.n	810ad90 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810ad50:	687b      	ldr	r3, [r7, #4]
 810ad52:	681b      	ldr	r3, [r3, #0]
 810ad54:	685b      	ldr	r3, [r3, #4]
 810ad56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810ad5a:	2b00      	cmp	r3, #0
 810ad5c:	d018      	beq.n	810ad90 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810ad5e:	687b      	ldr	r3, [r7, #4]
 810ad60:	681b      	ldr	r3, [r3, #0]
 810ad62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ad64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ad66:	e853 3f00 	ldrex	r3, [r3]
 810ad6a:	623b      	str	r3, [r7, #32]
   return(result);
 810ad6c:	6a3b      	ldr	r3, [r7, #32]
 810ad6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810ad72:	663b      	str	r3, [r7, #96]	@ 0x60
 810ad74:	687b      	ldr	r3, [r7, #4]
 810ad76:	681b      	ldr	r3, [r3, #0]
 810ad78:	461a      	mov	r2, r3
 810ad7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810ad7c:	633b      	str	r3, [r7, #48]	@ 0x30
 810ad7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810ad80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810ad82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ad84:	e841 2300 	strex	r3, r2, [r1]
 810ad88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810ad8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ad8c:	2b00      	cmp	r3, #0
 810ad8e:	d1e6      	bne.n	810ad5e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810ad90:	687b      	ldr	r3, [r7, #4]
 810ad92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810ad94:	2b01      	cmp	r3, #1
 810ad96:	d12e      	bne.n	810adf6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ad98:	687b      	ldr	r3, [r7, #4]
 810ad9a:	2200      	movs	r2, #0
 810ad9c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810ad9e:	687b      	ldr	r3, [r7, #4]
 810ada0:	681b      	ldr	r3, [r3, #0]
 810ada2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ada4:	693b      	ldr	r3, [r7, #16]
 810ada6:	e853 3f00 	ldrex	r3, [r3]
 810adaa:	60fb      	str	r3, [r7, #12]
   return(result);
 810adac:	68fb      	ldr	r3, [r7, #12]
 810adae:	f023 0310 	bic.w	r3, r3, #16
 810adb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810adb4:	687b      	ldr	r3, [r7, #4]
 810adb6:	681b      	ldr	r3, [r3, #0]
 810adb8:	461a      	mov	r2, r3
 810adba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810adbc:	61fb      	str	r3, [r7, #28]
 810adbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810adc0:	69b9      	ldr	r1, [r7, #24]
 810adc2:	69fa      	ldr	r2, [r7, #28]
 810adc4:	e841 2300 	strex	r3, r2, [r1]
 810adc8:	617b      	str	r3, [r7, #20]
   return(result);
 810adca:	697b      	ldr	r3, [r7, #20]
 810adcc:	2b00      	cmp	r3, #0
 810adce:	d1e6      	bne.n	810ad9e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810add0:	687b      	ldr	r3, [r7, #4]
 810add2:	681b      	ldr	r3, [r3, #0]
 810add4:	69db      	ldr	r3, [r3, #28]
 810add6:	f003 0310 	and.w	r3, r3, #16
 810adda:	2b10      	cmp	r3, #16
 810addc:	d103      	bne.n	810ade6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810adde:	687b      	ldr	r3, [r7, #4]
 810ade0:	681b      	ldr	r3, [r3, #0]
 810ade2:	2210      	movs	r2, #16
 810ade4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810ade6:	687b      	ldr	r3, [r7, #4]
 810ade8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810adec:	4619      	mov	r1, r3
 810adee:	6878      	ldr	r0, [r7, #4]
 810adf0:	f7fe fe44 	bl	8109a7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810adf4:	e00b      	b.n	810ae0e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 810adf6:	6878      	ldr	r0, [r7, #4]
 810adf8:	f7f6 fb0c 	bl	8101414 <HAL_UART_RxCpltCallback>
}
 810adfc:	e007      	b.n	810ae0e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810adfe:	687b      	ldr	r3, [r7, #4]
 810ae00:	681b      	ldr	r3, [r3, #0]
 810ae02:	699a      	ldr	r2, [r3, #24]
 810ae04:	687b      	ldr	r3, [r7, #4]
 810ae06:	681b      	ldr	r3, [r3, #0]
 810ae08:	f042 0208 	orr.w	r2, r2, #8
 810ae0c:	619a      	str	r2, [r3, #24]
}
 810ae0e:	bf00      	nop
 810ae10:	3770      	adds	r7, #112	@ 0x70
 810ae12:	46bd      	mov	sp, r7
 810ae14:	bd80      	pop	{r7, pc}
 810ae16:	bf00      	nop
 810ae18:	58000c00 	.word	0x58000c00

0810ae1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 810ae1c:	b580      	push	{r7, lr}
 810ae1e:	b09c      	sub	sp, #112	@ 0x70
 810ae20:	af00      	add	r7, sp, #0
 810ae22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 810ae24:	687b      	ldr	r3, [r7, #4]
 810ae26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810ae2a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810ae2e:	687b      	ldr	r3, [r7, #4]
 810ae30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810ae34:	2b22      	cmp	r3, #34	@ 0x22
 810ae36:	f040 80be 	bne.w	810afb6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810ae3a:	687b      	ldr	r3, [r7, #4]
 810ae3c:	681b      	ldr	r3, [r3, #0]
 810ae3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ae40:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 810ae44:	687b      	ldr	r3, [r7, #4]
 810ae46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ae48:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 810ae4a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 810ae4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 810ae52:	4013      	ands	r3, r2
 810ae54:	b29a      	uxth	r2, r3
 810ae56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810ae58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 810ae5a:	687b      	ldr	r3, [r7, #4]
 810ae5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ae5e:	1c9a      	adds	r2, r3, #2
 810ae60:	687b      	ldr	r3, [r7, #4]
 810ae62:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 810ae64:	687b      	ldr	r3, [r7, #4]
 810ae66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810ae6a:	b29b      	uxth	r3, r3
 810ae6c:	3b01      	subs	r3, #1
 810ae6e:	b29a      	uxth	r2, r3
 810ae70:	687b      	ldr	r3, [r7, #4]
 810ae72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 810ae76:	687b      	ldr	r3, [r7, #4]
 810ae78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810ae7c:	b29b      	uxth	r3, r3
 810ae7e:	2b00      	cmp	r3, #0
 810ae80:	f040 80a1 	bne.w	810afc6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810ae84:	687b      	ldr	r3, [r7, #4]
 810ae86:	681b      	ldr	r3, [r3, #0]
 810ae88:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ae8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810ae8c:	e853 3f00 	ldrex	r3, [r3]
 810ae90:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 810ae92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810ae94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810ae98:	667b      	str	r3, [r7, #100]	@ 0x64
 810ae9a:	687b      	ldr	r3, [r7, #4]
 810ae9c:	681b      	ldr	r3, [r3, #0]
 810ae9e:	461a      	mov	r2, r3
 810aea0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810aea2:	657b      	str	r3, [r7, #84]	@ 0x54
 810aea4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aea6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 810aea8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810aeaa:	e841 2300 	strex	r3, r2, [r1]
 810aeae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810aeb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810aeb2:	2b00      	cmp	r3, #0
 810aeb4:	d1e6      	bne.n	810ae84 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810aeb6:	687b      	ldr	r3, [r7, #4]
 810aeb8:	681b      	ldr	r3, [r3, #0]
 810aeba:	3308      	adds	r3, #8
 810aebc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810aec0:	e853 3f00 	ldrex	r3, [r3]
 810aec4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810aec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aec8:	f023 0301 	bic.w	r3, r3, #1
 810aecc:	663b      	str	r3, [r7, #96]	@ 0x60
 810aece:	687b      	ldr	r3, [r7, #4]
 810aed0:	681b      	ldr	r3, [r3, #0]
 810aed2:	3308      	adds	r3, #8
 810aed4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 810aed6:	643a      	str	r2, [r7, #64]	@ 0x40
 810aed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aeda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810aedc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810aede:	e841 2300 	strex	r3, r2, [r1]
 810aee2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810aee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810aee6:	2b00      	cmp	r3, #0
 810aee8:	d1e5      	bne.n	810aeb6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 810aeea:	687b      	ldr	r3, [r7, #4]
 810aeec:	2220      	movs	r2, #32
 810aeee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 810aef2:	687b      	ldr	r3, [r7, #4]
 810aef4:	2200      	movs	r2, #0
 810aef6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 810aef8:	687b      	ldr	r3, [r7, #4]
 810aefa:	2200      	movs	r2, #0
 810aefc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810aefe:	687b      	ldr	r3, [r7, #4]
 810af00:	681b      	ldr	r3, [r3, #0]
 810af02:	4a33      	ldr	r2, [pc, #204]	@ (810afd0 <UART_RxISR_16BIT+0x1b4>)
 810af04:	4293      	cmp	r3, r2
 810af06:	d01f      	beq.n	810af48 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810af08:	687b      	ldr	r3, [r7, #4]
 810af0a:	681b      	ldr	r3, [r3, #0]
 810af0c:	685b      	ldr	r3, [r3, #4]
 810af0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810af12:	2b00      	cmp	r3, #0
 810af14:	d018      	beq.n	810af48 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810af16:	687b      	ldr	r3, [r7, #4]
 810af18:	681b      	ldr	r3, [r3, #0]
 810af1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810af1c:	6a3b      	ldr	r3, [r7, #32]
 810af1e:	e853 3f00 	ldrex	r3, [r3]
 810af22:	61fb      	str	r3, [r7, #28]
   return(result);
 810af24:	69fb      	ldr	r3, [r7, #28]
 810af26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810af2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810af2c:	687b      	ldr	r3, [r7, #4]
 810af2e:	681b      	ldr	r3, [r3, #0]
 810af30:	461a      	mov	r2, r3
 810af32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810af34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810af36:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810af38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810af3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810af3c:	e841 2300 	strex	r3, r2, [r1]
 810af40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810af42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810af44:	2b00      	cmp	r3, #0
 810af46:	d1e6      	bne.n	810af16 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810af48:	687b      	ldr	r3, [r7, #4]
 810af4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810af4c:	2b01      	cmp	r3, #1
 810af4e:	d12e      	bne.n	810afae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810af50:	687b      	ldr	r3, [r7, #4]
 810af52:	2200      	movs	r2, #0
 810af54:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810af56:	687b      	ldr	r3, [r7, #4]
 810af58:	681b      	ldr	r3, [r3, #0]
 810af5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810af5c:	68fb      	ldr	r3, [r7, #12]
 810af5e:	e853 3f00 	ldrex	r3, [r3]
 810af62:	60bb      	str	r3, [r7, #8]
   return(result);
 810af64:	68bb      	ldr	r3, [r7, #8]
 810af66:	f023 0310 	bic.w	r3, r3, #16
 810af6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 810af6c:	687b      	ldr	r3, [r7, #4]
 810af6e:	681b      	ldr	r3, [r3, #0]
 810af70:	461a      	mov	r2, r3
 810af72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810af74:	61bb      	str	r3, [r7, #24]
 810af76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810af78:	6979      	ldr	r1, [r7, #20]
 810af7a:	69ba      	ldr	r2, [r7, #24]
 810af7c:	e841 2300 	strex	r3, r2, [r1]
 810af80:	613b      	str	r3, [r7, #16]
   return(result);
 810af82:	693b      	ldr	r3, [r7, #16]
 810af84:	2b00      	cmp	r3, #0
 810af86:	d1e6      	bne.n	810af56 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810af88:	687b      	ldr	r3, [r7, #4]
 810af8a:	681b      	ldr	r3, [r3, #0]
 810af8c:	69db      	ldr	r3, [r3, #28]
 810af8e:	f003 0310 	and.w	r3, r3, #16
 810af92:	2b10      	cmp	r3, #16
 810af94:	d103      	bne.n	810af9e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810af96:	687b      	ldr	r3, [r7, #4]
 810af98:	681b      	ldr	r3, [r3, #0]
 810af9a:	2210      	movs	r2, #16
 810af9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810af9e:	687b      	ldr	r3, [r7, #4]
 810afa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810afa4:	4619      	mov	r1, r3
 810afa6:	6878      	ldr	r0, [r7, #4]
 810afa8:	f7fe fd68 	bl	8109a7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810afac:	e00b      	b.n	810afc6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 810afae:	6878      	ldr	r0, [r7, #4]
 810afb0:	f7f6 fa30 	bl	8101414 <HAL_UART_RxCpltCallback>
}
 810afb4:	e007      	b.n	810afc6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810afb6:	687b      	ldr	r3, [r7, #4]
 810afb8:	681b      	ldr	r3, [r3, #0]
 810afba:	699a      	ldr	r2, [r3, #24]
 810afbc:	687b      	ldr	r3, [r7, #4]
 810afbe:	681b      	ldr	r3, [r3, #0]
 810afc0:	f042 0208 	orr.w	r2, r2, #8
 810afc4:	619a      	str	r2, [r3, #24]
}
 810afc6:	bf00      	nop
 810afc8:	3770      	adds	r7, #112	@ 0x70
 810afca:	46bd      	mov	sp, r7
 810afcc:	bd80      	pop	{r7, pc}
 810afce:	bf00      	nop
 810afd0:	58000c00 	.word	0x58000c00

0810afd4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810afd4:	b580      	push	{r7, lr}
 810afd6:	b0ac      	sub	sp, #176	@ 0xb0
 810afd8:	af00      	add	r7, sp, #0
 810afda:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 810afdc:	687b      	ldr	r3, [r7, #4]
 810afde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810afe2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810afe6:	687b      	ldr	r3, [r7, #4]
 810afe8:	681b      	ldr	r3, [r3, #0]
 810afea:	69db      	ldr	r3, [r3, #28]
 810afec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 810aff0:	687b      	ldr	r3, [r7, #4]
 810aff2:	681b      	ldr	r3, [r3, #0]
 810aff4:	681b      	ldr	r3, [r3, #0]
 810aff6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810affa:	687b      	ldr	r3, [r7, #4]
 810affc:	681b      	ldr	r3, [r3, #0]
 810affe:	689b      	ldr	r3, [r3, #8]
 810b000:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810b004:	687b      	ldr	r3, [r7, #4]
 810b006:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b00a:	2b22      	cmp	r3, #34	@ 0x22
 810b00c:	f040 8183 	bne.w	810b316 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 810b010:	687b      	ldr	r3, [r7, #4]
 810b012:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810b016:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810b01a:	e126      	b.n	810b26a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810b01c:	687b      	ldr	r3, [r7, #4]
 810b01e:	681b      	ldr	r3, [r3, #0]
 810b020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b022:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 810b026:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 810b02a:	b2d9      	uxtb	r1, r3
 810b02c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 810b030:	b2da      	uxtb	r2, r3
 810b032:	687b      	ldr	r3, [r7, #4]
 810b034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b036:	400a      	ands	r2, r1
 810b038:	b2d2      	uxtb	r2, r2
 810b03a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 810b03c:	687b      	ldr	r3, [r7, #4]
 810b03e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b040:	1c5a      	adds	r2, r3, #1
 810b042:	687b      	ldr	r3, [r7, #4]
 810b044:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 810b046:	687b      	ldr	r3, [r7, #4]
 810b048:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b04c:	b29b      	uxth	r3, r3
 810b04e:	3b01      	subs	r3, #1
 810b050:	b29a      	uxth	r2, r3
 810b052:	687b      	ldr	r3, [r7, #4]
 810b054:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 810b058:	687b      	ldr	r3, [r7, #4]
 810b05a:	681b      	ldr	r3, [r3, #0]
 810b05c:	69db      	ldr	r3, [r3, #28]
 810b05e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810b062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b066:	f003 0307 	and.w	r3, r3, #7
 810b06a:	2b00      	cmp	r3, #0
 810b06c:	d053      	beq.n	810b116 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810b06e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b072:	f003 0301 	and.w	r3, r3, #1
 810b076:	2b00      	cmp	r3, #0
 810b078:	d011      	beq.n	810b09e <UART_RxISR_8BIT_FIFOEN+0xca>
 810b07a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 810b07e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b082:	2b00      	cmp	r3, #0
 810b084:	d00b      	beq.n	810b09e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810b086:	687b      	ldr	r3, [r7, #4]
 810b088:	681b      	ldr	r3, [r3, #0]
 810b08a:	2201      	movs	r2, #1
 810b08c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 810b08e:	687b      	ldr	r3, [r7, #4]
 810b090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b094:	f043 0201 	orr.w	r2, r3, #1
 810b098:	687b      	ldr	r3, [r7, #4]
 810b09a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b09e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b0a2:	f003 0302 	and.w	r3, r3, #2
 810b0a6:	2b00      	cmp	r3, #0
 810b0a8:	d011      	beq.n	810b0ce <UART_RxISR_8BIT_FIFOEN+0xfa>
 810b0aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810b0ae:	f003 0301 	and.w	r3, r3, #1
 810b0b2:	2b00      	cmp	r3, #0
 810b0b4:	d00b      	beq.n	810b0ce <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810b0b6:	687b      	ldr	r3, [r7, #4]
 810b0b8:	681b      	ldr	r3, [r3, #0]
 810b0ba:	2202      	movs	r2, #2
 810b0bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 810b0be:	687b      	ldr	r3, [r7, #4]
 810b0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b0c4:	f043 0204 	orr.w	r2, r3, #4
 810b0c8:	687b      	ldr	r3, [r7, #4]
 810b0ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b0ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b0d2:	f003 0304 	and.w	r3, r3, #4
 810b0d6:	2b00      	cmp	r3, #0
 810b0d8:	d011      	beq.n	810b0fe <UART_RxISR_8BIT_FIFOEN+0x12a>
 810b0da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810b0de:	f003 0301 	and.w	r3, r3, #1
 810b0e2:	2b00      	cmp	r3, #0
 810b0e4:	d00b      	beq.n	810b0fe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810b0e6:	687b      	ldr	r3, [r7, #4]
 810b0e8:	681b      	ldr	r3, [r3, #0]
 810b0ea:	2204      	movs	r2, #4
 810b0ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 810b0ee:	687b      	ldr	r3, [r7, #4]
 810b0f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b0f4:	f043 0202 	orr.w	r2, r3, #2
 810b0f8:	687b      	ldr	r3, [r7, #4]
 810b0fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810b0fe:	687b      	ldr	r3, [r7, #4]
 810b100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b104:	2b00      	cmp	r3, #0
 810b106:	d006      	beq.n	810b116 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810b108:	6878      	ldr	r0, [r7, #4]
 810b10a:	f7fe fcad 	bl	8109a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b10e:	687b      	ldr	r3, [r7, #4]
 810b110:	2200      	movs	r2, #0
 810b112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 810b116:	687b      	ldr	r3, [r7, #4]
 810b118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b11c:	b29b      	uxth	r3, r3
 810b11e:	2b00      	cmp	r3, #0
 810b120:	f040 80a3 	bne.w	810b26a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810b124:	687b      	ldr	r3, [r7, #4]
 810b126:	681b      	ldr	r3, [r3, #0]
 810b128:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b12a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810b12c:	e853 3f00 	ldrex	r3, [r3]
 810b130:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 810b132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810b134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810b138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810b13c:	687b      	ldr	r3, [r7, #4]
 810b13e:	681b      	ldr	r3, [r3, #0]
 810b140:	461a      	mov	r2, r3
 810b142:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 810b146:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810b148:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b14a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 810b14c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 810b14e:	e841 2300 	strex	r3, r2, [r1]
 810b152:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 810b154:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810b156:	2b00      	cmp	r3, #0
 810b158:	d1e4      	bne.n	810b124 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b15a:	687b      	ldr	r3, [r7, #4]
 810b15c:	681b      	ldr	r3, [r3, #0]
 810b15e:	3308      	adds	r3, #8
 810b160:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810b164:	e853 3f00 	ldrex	r3, [r3]
 810b168:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 810b16a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810b16c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b170:	f023 0301 	bic.w	r3, r3, #1
 810b174:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810b178:	687b      	ldr	r3, [r7, #4]
 810b17a:	681b      	ldr	r3, [r3, #0]
 810b17c:	3308      	adds	r3, #8
 810b17e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 810b182:	66ba      	str	r2, [r7, #104]	@ 0x68
 810b184:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b186:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 810b188:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 810b18a:	e841 2300 	strex	r3, r2, [r1]
 810b18e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810b190:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810b192:	2b00      	cmp	r3, #0
 810b194:	d1e1      	bne.n	810b15a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810b196:	687b      	ldr	r3, [r7, #4]
 810b198:	2220      	movs	r2, #32
 810b19a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810b19e:	687b      	ldr	r3, [r7, #4]
 810b1a0:	2200      	movs	r2, #0
 810b1a2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 810b1a4:	687b      	ldr	r3, [r7, #4]
 810b1a6:	2200      	movs	r2, #0
 810b1a8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810b1aa:	687b      	ldr	r3, [r7, #4]
 810b1ac:	681b      	ldr	r3, [r3, #0]
 810b1ae:	4a60      	ldr	r2, [pc, #384]	@ (810b330 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 810b1b0:	4293      	cmp	r3, r2
 810b1b2:	d021      	beq.n	810b1f8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810b1b4:	687b      	ldr	r3, [r7, #4]
 810b1b6:	681b      	ldr	r3, [r3, #0]
 810b1b8:	685b      	ldr	r3, [r3, #4]
 810b1ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810b1be:	2b00      	cmp	r3, #0
 810b1c0:	d01a      	beq.n	810b1f8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810b1c2:	687b      	ldr	r3, [r7, #4]
 810b1c4:	681b      	ldr	r3, [r3, #0]
 810b1c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b1c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810b1ca:	e853 3f00 	ldrex	r3, [r3]
 810b1ce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 810b1d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b1d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810b1d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810b1da:	687b      	ldr	r3, [r7, #4]
 810b1dc:	681b      	ldr	r3, [r3, #0]
 810b1de:	461a      	mov	r2, r3
 810b1e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 810b1e4:	657b      	str	r3, [r7, #84]	@ 0x54
 810b1e6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b1e8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 810b1ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 810b1ec:	e841 2300 	strex	r3, r2, [r1]
 810b1f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 810b1f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b1f4:	2b00      	cmp	r3, #0
 810b1f6:	d1e4      	bne.n	810b1c2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b1f8:	687b      	ldr	r3, [r7, #4]
 810b1fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b1fc:	2b01      	cmp	r3, #1
 810b1fe:	d130      	bne.n	810b262 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b200:	687b      	ldr	r3, [r7, #4]
 810b202:	2200      	movs	r2, #0
 810b204:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b206:	687b      	ldr	r3, [r7, #4]
 810b208:	681b      	ldr	r3, [r3, #0]
 810b20a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b20e:	e853 3f00 	ldrex	r3, [r3]
 810b212:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810b214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b216:	f023 0310 	bic.w	r3, r3, #16
 810b21a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810b21e:	687b      	ldr	r3, [r7, #4]
 810b220:	681b      	ldr	r3, [r3, #0]
 810b222:	461a      	mov	r2, r3
 810b224:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 810b228:	643b      	str	r3, [r7, #64]	@ 0x40
 810b22a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b22c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810b22e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810b230:	e841 2300 	strex	r3, r2, [r1]
 810b234:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810b236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b238:	2b00      	cmp	r3, #0
 810b23a:	d1e4      	bne.n	810b206 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810b23c:	687b      	ldr	r3, [r7, #4]
 810b23e:	681b      	ldr	r3, [r3, #0]
 810b240:	69db      	ldr	r3, [r3, #28]
 810b242:	f003 0310 	and.w	r3, r3, #16
 810b246:	2b10      	cmp	r3, #16
 810b248:	d103      	bne.n	810b252 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810b24a:	687b      	ldr	r3, [r7, #4]
 810b24c:	681b      	ldr	r3, [r3, #0]
 810b24e:	2210      	movs	r2, #16
 810b250:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810b252:	687b      	ldr	r3, [r7, #4]
 810b254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810b258:	4619      	mov	r1, r3
 810b25a:	6878      	ldr	r0, [r7, #4]
 810b25c:	f7fe fc0e 	bl	8109a7c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 810b260:	e00e      	b.n	810b280 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 810b262:	6878      	ldr	r0, [r7, #4]
 810b264:	f7f6 f8d6 	bl	8101414 <HAL_UART_RxCpltCallback>
        break;
 810b268:	e00a      	b.n	810b280 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810b26a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 810b26e:	2b00      	cmp	r3, #0
 810b270:	d006      	beq.n	810b280 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 810b272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b276:	f003 0320 	and.w	r3, r3, #32
 810b27a:	2b00      	cmp	r3, #0
 810b27c:	f47f aece 	bne.w	810b01c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 810b280:	687b      	ldr	r3, [r7, #4]
 810b282:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b286:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 810b28a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 810b28e:	2b00      	cmp	r3, #0
 810b290:	d049      	beq.n	810b326 <UART_RxISR_8BIT_FIFOEN+0x352>
 810b292:	687b      	ldr	r3, [r7, #4]
 810b294:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810b298:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 810b29c:	429a      	cmp	r2, r3
 810b29e:	d242      	bcs.n	810b326 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810b2a0:	687b      	ldr	r3, [r7, #4]
 810b2a2:	681b      	ldr	r3, [r3, #0]
 810b2a4:	3308      	adds	r3, #8
 810b2a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b2a8:	6a3b      	ldr	r3, [r7, #32]
 810b2aa:	e853 3f00 	ldrex	r3, [r3]
 810b2ae:	61fb      	str	r3, [r7, #28]
   return(result);
 810b2b0:	69fb      	ldr	r3, [r7, #28]
 810b2b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b2b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810b2ba:	687b      	ldr	r3, [r7, #4]
 810b2bc:	681b      	ldr	r3, [r3, #0]
 810b2be:	3308      	adds	r3, #8
 810b2c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 810b2c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810b2c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b2c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810b2ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b2cc:	e841 2300 	strex	r3, r2, [r1]
 810b2d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810b2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b2d4:	2b00      	cmp	r3, #0
 810b2d6:	d1e3      	bne.n	810b2a0 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 810b2d8:	687b      	ldr	r3, [r7, #4]
 810b2da:	4a16      	ldr	r2, [pc, #88]	@ (810b334 <UART_RxISR_8BIT_FIFOEN+0x360>)
 810b2dc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810b2de:	687b      	ldr	r3, [r7, #4]
 810b2e0:	681b      	ldr	r3, [r3, #0]
 810b2e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b2e4:	68fb      	ldr	r3, [r7, #12]
 810b2e6:	e853 3f00 	ldrex	r3, [r3]
 810b2ea:	60bb      	str	r3, [r7, #8]
   return(result);
 810b2ec:	68bb      	ldr	r3, [r7, #8]
 810b2ee:	f043 0320 	orr.w	r3, r3, #32
 810b2f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810b2f6:	687b      	ldr	r3, [r7, #4]
 810b2f8:	681b      	ldr	r3, [r3, #0]
 810b2fa:	461a      	mov	r2, r3
 810b2fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 810b300:	61bb      	str	r3, [r7, #24]
 810b302:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b304:	6979      	ldr	r1, [r7, #20]
 810b306:	69ba      	ldr	r2, [r7, #24]
 810b308:	e841 2300 	strex	r3, r2, [r1]
 810b30c:	613b      	str	r3, [r7, #16]
   return(result);
 810b30e:	693b      	ldr	r3, [r7, #16]
 810b310:	2b00      	cmp	r3, #0
 810b312:	d1e4      	bne.n	810b2de <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810b314:	e007      	b.n	810b326 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810b316:	687b      	ldr	r3, [r7, #4]
 810b318:	681b      	ldr	r3, [r3, #0]
 810b31a:	699a      	ldr	r2, [r3, #24]
 810b31c:	687b      	ldr	r3, [r7, #4]
 810b31e:	681b      	ldr	r3, [r3, #0]
 810b320:	f042 0208 	orr.w	r2, r2, #8
 810b324:	619a      	str	r2, [r3, #24]
}
 810b326:	bf00      	nop
 810b328:	37b0      	adds	r7, #176	@ 0xb0
 810b32a:	46bd      	mov	sp, r7
 810b32c:	bd80      	pop	{r7, pc}
 810b32e:	bf00      	nop
 810b330:	58000c00 	.word	0x58000c00
 810b334:	0810ac65 	.word	0x0810ac65

0810b338 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 810b338:	b580      	push	{r7, lr}
 810b33a:	b0ae      	sub	sp, #184	@ 0xb8
 810b33c:	af00      	add	r7, sp, #0
 810b33e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 810b340:	687b      	ldr	r3, [r7, #4]
 810b342:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810b346:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810b34a:	687b      	ldr	r3, [r7, #4]
 810b34c:	681b      	ldr	r3, [r3, #0]
 810b34e:	69db      	ldr	r3, [r3, #28]
 810b350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 810b354:	687b      	ldr	r3, [r7, #4]
 810b356:	681b      	ldr	r3, [r3, #0]
 810b358:	681b      	ldr	r3, [r3, #0]
 810b35a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810b35e:	687b      	ldr	r3, [r7, #4]
 810b360:	681b      	ldr	r3, [r3, #0]
 810b362:	689b      	ldr	r3, [r3, #8]
 810b364:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810b368:	687b      	ldr	r3, [r7, #4]
 810b36a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b36e:	2b22      	cmp	r3, #34	@ 0x22
 810b370:	f040 8187 	bne.w	810b682 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 810b374:	687b      	ldr	r3, [r7, #4]
 810b376:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810b37a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810b37e:	e12a      	b.n	810b5d6 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 810b380:	687b      	ldr	r3, [r7, #4]
 810b382:	681b      	ldr	r3, [r3, #0]
 810b384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b386:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 810b38a:	687b      	ldr	r3, [r7, #4]
 810b38c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b38e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 810b392:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 810b396:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 810b39a:	4013      	ands	r3, r2
 810b39c:	b29a      	uxth	r2, r3
 810b39e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810b3a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 810b3a4:	687b      	ldr	r3, [r7, #4]
 810b3a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b3a8:	1c9a      	adds	r2, r3, #2
 810b3aa:	687b      	ldr	r3, [r7, #4]
 810b3ac:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 810b3ae:	687b      	ldr	r3, [r7, #4]
 810b3b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b3b4:	b29b      	uxth	r3, r3
 810b3b6:	3b01      	subs	r3, #1
 810b3b8:	b29a      	uxth	r2, r3
 810b3ba:	687b      	ldr	r3, [r7, #4]
 810b3bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 810b3c0:	687b      	ldr	r3, [r7, #4]
 810b3c2:	681b      	ldr	r3, [r3, #0]
 810b3c4:	69db      	ldr	r3, [r3, #28]
 810b3c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 810b3ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b3ce:	f003 0307 	and.w	r3, r3, #7
 810b3d2:	2b00      	cmp	r3, #0
 810b3d4:	d053      	beq.n	810b47e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810b3d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b3da:	f003 0301 	and.w	r3, r3, #1
 810b3de:	2b00      	cmp	r3, #0
 810b3e0:	d011      	beq.n	810b406 <UART_RxISR_16BIT_FIFOEN+0xce>
 810b3e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 810b3e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b3ea:	2b00      	cmp	r3, #0
 810b3ec:	d00b      	beq.n	810b406 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810b3ee:	687b      	ldr	r3, [r7, #4]
 810b3f0:	681b      	ldr	r3, [r3, #0]
 810b3f2:	2201      	movs	r2, #1
 810b3f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 810b3f6:	687b      	ldr	r3, [r7, #4]
 810b3f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b3fc:	f043 0201 	orr.w	r2, r3, #1
 810b400:	687b      	ldr	r3, [r7, #4]
 810b402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b406:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b40a:	f003 0302 	and.w	r3, r3, #2
 810b40e:	2b00      	cmp	r3, #0
 810b410:	d011      	beq.n	810b436 <UART_RxISR_16BIT_FIFOEN+0xfe>
 810b412:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810b416:	f003 0301 	and.w	r3, r3, #1
 810b41a:	2b00      	cmp	r3, #0
 810b41c:	d00b      	beq.n	810b436 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810b41e:	687b      	ldr	r3, [r7, #4]
 810b420:	681b      	ldr	r3, [r3, #0]
 810b422:	2202      	movs	r2, #2
 810b424:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 810b426:	687b      	ldr	r3, [r7, #4]
 810b428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b42c:	f043 0204 	orr.w	r2, r3, #4
 810b430:	687b      	ldr	r3, [r7, #4]
 810b432:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810b436:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b43a:	f003 0304 	and.w	r3, r3, #4
 810b43e:	2b00      	cmp	r3, #0
 810b440:	d011      	beq.n	810b466 <UART_RxISR_16BIT_FIFOEN+0x12e>
 810b442:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 810b446:	f003 0301 	and.w	r3, r3, #1
 810b44a:	2b00      	cmp	r3, #0
 810b44c:	d00b      	beq.n	810b466 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810b44e:	687b      	ldr	r3, [r7, #4]
 810b450:	681b      	ldr	r3, [r3, #0]
 810b452:	2204      	movs	r2, #4
 810b454:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 810b456:	687b      	ldr	r3, [r7, #4]
 810b458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b45c:	f043 0202 	orr.w	r2, r3, #2
 810b460:	687b      	ldr	r3, [r7, #4]
 810b462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810b466:	687b      	ldr	r3, [r7, #4]
 810b468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b46c:	2b00      	cmp	r3, #0
 810b46e:	d006      	beq.n	810b47e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810b470:	6878      	ldr	r0, [r7, #4]
 810b472:	f7fe faf9 	bl	8109a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b476:	687b      	ldr	r3, [r7, #4]
 810b478:	2200      	movs	r2, #0
 810b47a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 810b47e:	687b      	ldr	r3, [r7, #4]
 810b480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b484:	b29b      	uxth	r3, r3
 810b486:	2b00      	cmp	r3, #0
 810b488:	f040 80a5 	bne.w	810b5d6 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810b48c:	687b      	ldr	r3, [r7, #4]
 810b48e:	681b      	ldr	r3, [r3, #0]
 810b490:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 810b494:	e853 3f00 	ldrex	r3, [r3]
 810b498:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 810b49a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810b49c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810b4a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810b4a4:	687b      	ldr	r3, [r7, #4]
 810b4a6:	681b      	ldr	r3, [r3, #0]
 810b4a8:	461a      	mov	r2, r3
 810b4aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 810b4ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810b4b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b4b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 810b4b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 810b4ba:	e841 2300 	strex	r3, r2, [r1]
 810b4be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 810b4c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810b4c2:	2b00      	cmp	r3, #0
 810b4c4:	d1e2      	bne.n	810b48c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b4c6:	687b      	ldr	r3, [r7, #4]
 810b4c8:	681b      	ldr	r3, [r3, #0]
 810b4ca:	3308      	adds	r3, #8
 810b4cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b4ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810b4d0:	e853 3f00 	ldrex	r3, [r3]
 810b4d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 810b4d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810b4d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b4dc:	f023 0301 	bic.w	r3, r3, #1
 810b4e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810b4e4:	687b      	ldr	r3, [r7, #4]
 810b4e6:	681b      	ldr	r3, [r3, #0]
 810b4e8:	3308      	adds	r3, #8
 810b4ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 810b4ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 810b4f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b4f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 810b4f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 810b4f6:	e841 2300 	strex	r3, r2, [r1]
 810b4fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 810b4fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810b4fe:	2b00      	cmp	r3, #0
 810b500:	d1e1      	bne.n	810b4c6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810b502:	687b      	ldr	r3, [r7, #4]
 810b504:	2220      	movs	r2, #32
 810b506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810b50a:	687b      	ldr	r3, [r7, #4]
 810b50c:	2200      	movs	r2, #0
 810b50e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 810b510:	687b      	ldr	r3, [r7, #4]
 810b512:	2200      	movs	r2, #0
 810b514:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810b516:	687b      	ldr	r3, [r7, #4]
 810b518:	681b      	ldr	r3, [r3, #0]
 810b51a:	4a60      	ldr	r2, [pc, #384]	@ (810b69c <UART_RxISR_16BIT_FIFOEN+0x364>)
 810b51c:	4293      	cmp	r3, r2
 810b51e:	d021      	beq.n	810b564 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810b520:	687b      	ldr	r3, [r7, #4]
 810b522:	681b      	ldr	r3, [r3, #0]
 810b524:	685b      	ldr	r3, [r3, #4]
 810b526:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810b52a:	2b00      	cmp	r3, #0
 810b52c:	d01a      	beq.n	810b564 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810b52e:	687b      	ldr	r3, [r7, #4]
 810b530:	681b      	ldr	r3, [r3, #0]
 810b532:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b536:	e853 3f00 	ldrex	r3, [r3]
 810b53a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810b53c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810b53e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810b542:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810b546:	687b      	ldr	r3, [r7, #4]
 810b548:	681b      	ldr	r3, [r3, #0]
 810b54a:	461a      	mov	r2, r3
 810b54c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 810b550:	65bb      	str	r3, [r7, #88]	@ 0x58
 810b552:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b554:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810b556:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810b558:	e841 2300 	strex	r3, r2, [r1]
 810b55c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810b55e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810b560:	2b00      	cmp	r3, #0
 810b562:	d1e4      	bne.n	810b52e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b564:	687b      	ldr	r3, [r7, #4]
 810b566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b568:	2b01      	cmp	r3, #1
 810b56a:	d130      	bne.n	810b5ce <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b56c:	687b      	ldr	r3, [r7, #4]
 810b56e:	2200      	movs	r2, #0
 810b570:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b572:	687b      	ldr	r3, [r7, #4]
 810b574:	681b      	ldr	r3, [r3, #0]
 810b576:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b57a:	e853 3f00 	ldrex	r3, [r3]
 810b57e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810b580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b582:	f023 0310 	bic.w	r3, r3, #16
 810b586:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810b58a:	687b      	ldr	r3, [r7, #4]
 810b58c:	681b      	ldr	r3, [r3, #0]
 810b58e:	461a      	mov	r2, r3
 810b590:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 810b594:	647b      	str	r3, [r7, #68]	@ 0x44
 810b596:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b598:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810b59a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810b59c:	e841 2300 	strex	r3, r2, [r1]
 810b5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810b5a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b5a4:	2b00      	cmp	r3, #0
 810b5a6:	d1e4      	bne.n	810b572 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 810b5a8:	687b      	ldr	r3, [r7, #4]
 810b5aa:	681b      	ldr	r3, [r3, #0]
 810b5ac:	69db      	ldr	r3, [r3, #28]
 810b5ae:	f003 0310 	and.w	r3, r3, #16
 810b5b2:	2b10      	cmp	r3, #16
 810b5b4:	d103      	bne.n	810b5be <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810b5b6:	687b      	ldr	r3, [r7, #4]
 810b5b8:	681b      	ldr	r3, [r3, #0]
 810b5ba:	2210      	movs	r2, #16
 810b5bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810b5be:	687b      	ldr	r3, [r7, #4]
 810b5c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810b5c4:	4619      	mov	r1, r3
 810b5c6:	6878      	ldr	r0, [r7, #4]
 810b5c8:	f7fe fa58 	bl	8109a7c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 810b5cc:	e00e      	b.n	810b5ec <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 810b5ce:	6878      	ldr	r0, [r7, #4]
 810b5d0:	f7f5 ff20 	bl	8101414 <HAL_UART_RxCpltCallback>
        break;
 810b5d4:	e00a      	b.n	810b5ec <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810b5d6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 810b5da:	2b00      	cmp	r3, #0
 810b5dc:	d006      	beq.n	810b5ec <UART_RxISR_16BIT_FIFOEN+0x2b4>
 810b5de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 810b5e2:	f003 0320 	and.w	r3, r3, #32
 810b5e6:	2b00      	cmp	r3, #0
 810b5e8:	f47f aeca 	bne.w	810b380 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 810b5ec:	687b      	ldr	r3, [r7, #4]
 810b5ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b5f2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 810b5f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 810b5fa:	2b00      	cmp	r3, #0
 810b5fc:	d049      	beq.n	810b692 <UART_RxISR_16BIT_FIFOEN+0x35a>
 810b5fe:	687b      	ldr	r3, [r7, #4]
 810b600:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 810b604:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 810b608:	429a      	cmp	r2, r3
 810b60a:	d242      	bcs.n	810b692 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810b60c:	687b      	ldr	r3, [r7, #4]
 810b60e:	681b      	ldr	r3, [r3, #0]
 810b610:	3308      	adds	r3, #8
 810b612:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b616:	e853 3f00 	ldrex	r3, [r3]
 810b61a:	623b      	str	r3, [r7, #32]
   return(result);
 810b61c:	6a3b      	ldr	r3, [r7, #32]
 810b61e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b622:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810b626:	687b      	ldr	r3, [r7, #4]
 810b628:	681b      	ldr	r3, [r3, #0]
 810b62a:	3308      	adds	r3, #8
 810b62c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 810b630:	633a      	str	r2, [r7, #48]	@ 0x30
 810b632:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b634:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810b636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b638:	e841 2300 	strex	r3, r2, [r1]
 810b63c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810b63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b640:	2b00      	cmp	r3, #0
 810b642:	d1e3      	bne.n	810b60c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 810b644:	687b      	ldr	r3, [r7, #4]
 810b646:	4a16      	ldr	r2, [pc, #88]	@ (810b6a0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 810b648:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 810b64a:	687b      	ldr	r3, [r7, #4]
 810b64c:	681b      	ldr	r3, [r3, #0]
 810b64e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b650:	693b      	ldr	r3, [r7, #16]
 810b652:	e853 3f00 	ldrex	r3, [r3]
 810b656:	60fb      	str	r3, [r7, #12]
   return(result);
 810b658:	68fb      	ldr	r3, [r7, #12]
 810b65a:	f043 0320 	orr.w	r3, r3, #32
 810b65e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810b662:	687b      	ldr	r3, [r7, #4]
 810b664:	681b      	ldr	r3, [r3, #0]
 810b666:	461a      	mov	r2, r3
 810b668:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 810b66c:	61fb      	str	r3, [r7, #28]
 810b66e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b670:	69b9      	ldr	r1, [r7, #24]
 810b672:	69fa      	ldr	r2, [r7, #28]
 810b674:	e841 2300 	strex	r3, r2, [r1]
 810b678:	617b      	str	r3, [r7, #20]
   return(result);
 810b67a:	697b      	ldr	r3, [r7, #20]
 810b67c:	2b00      	cmp	r3, #0
 810b67e:	d1e4      	bne.n	810b64a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810b680:	e007      	b.n	810b692 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 810b682:	687b      	ldr	r3, [r7, #4]
 810b684:	681b      	ldr	r3, [r3, #0]
 810b686:	699a      	ldr	r2, [r3, #24]
 810b688:	687b      	ldr	r3, [r7, #4]
 810b68a:	681b      	ldr	r3, [r3, #0]
 810b68c:	f042 0208 	orr.w	r2, r2, #8
 810b690:	619a      	str	r2, [r3, #24]
}
 810b692:	bf00      	nop
 810b694:	37b8      	adds	r7, #184	@ 0xb8
 810b696:	46bd      	mov	sp, r7
 810b698:	bd80      	pop	{r7, pc}
 810b69a:	bf00      	nop
 810b69c:	58000c00 	.word	0x58000c00
 810b6a0:	0810ae1d 	.word	0x0810ae1d

0810b6a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810b6a4:	b480      	push	{r7}
 810b6a6:	b083      	sub	sp, #12
 810b6a8:	af00      	add	r7, sp, #0
 810b6aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810b6ac:	bf00      	nop
 810b6ae:	370c      	adds	r7, #12
 810b6b0:	46bd      	mov	sp, r7
 810b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b6b6:	4770      	bx	lr

0810b6b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810b6b8:	b480      	push	{r7}
 810b6ba:	b083      	sub	sp, #12
 810b6bc:	af00      	add	r7, sp, #0
 810b6be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810b6c0:	bf00      	nop
 810b6c2:	370c      	adds	r7, #12
 810b6c4:	46bd      	mov	sp, r7
 810b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b6ca:	4770      	bx	lr

0810b6cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810b6cc:	b480      	push	{r7}
 810b6ce:	b083      	sub	sp, #12
 810b6d0:	af00      	add	r7, sp, #0
 810b6d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810b6d4:	bf00      	nop
 810b6d6:	370c      	adds	r7, #12
 810b6d8:	46bd      	mov	sp, r7
 810b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b6de:	4770      	bx	lr

0810b6e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810b6e0:	b480      	push	{r7}
 810b6e2:	b085      	sub	sp, #20
 810b6e4:	af00      	add	r7, sp, #0
 810b6e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b6e8:	687b      	ldr	r3, [r7, #4]
 810b6ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b6ee:	2b01      	cmp	r3, #1
 810b6f0:	d101      	bne.n	810b6f6 <HAL_UARTEx_DisableFifoMode+0x16>
 810b6f2:	2302      	movs	r3, #2
 810b6f4:	e027      	b.n	810b746 <HAL_UARTEx_DisableFifoMode+0x66>
 810b6f6:	687b      	ldr	r3, [r7, #4]
 810b6f8:	2201      	movs	r2, #1
 810b6fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b6fe:	687b      	ldr	r3, [r7, #4]
 810b700:	2224      	movs	r2, #36	@ 0x24
 810b702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b706:	687b      	ldr	r3, [r7, #4]
 810b708:	681b      	ldr	r3, [r3, #0]
 810b70a:	681b      	ldr	r3, [r3, #0]
 810b70c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b70e:	687b      	ldr	r3, [r7, #4]
 810b710:	681b      	ldr	r3, [r3, #0]
 810b712:	681a      	ldr	r2, [r3, #0]
 810b714:	687b      	ldr	r3, [r7, #4]
 810b716:	681b      	ldr	r3, [r3, #0]
 810b718:	f022 0201 	bic.w	r2, r2, #1
 810b71c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810b71e:	68fb      	ldr	r3, [r7, #12]
 810b720:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810b724:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810b726:	687b      	ldr	r3, [r7, #4]
 810b728:	2200      	movs	r2, #0
 810b72a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b72c:	687b      	ldr	r3, [r7, #4]
 810b72e:	681b      	ldr	r3, [r3, #0]
 810b730:	68fa      	ldr	r2, [r7, #12]
 810b732:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b734:	687b      	ldr	r3, [r7, #4]
 810b736:	2220      	movs	r2, #32
 810b738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b73c:	687b      	ldr	r3, [r7, #4]
 810b73e:	2200      	movs	r2, #0
 810b740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b744:	2300      	movs	r3, #0
}
 810b746:	4618      	mov	r0, r3
 810b748:	3714      	adds	r7, #20
 810b74a:	46bd      	mov	sp, r7
 810b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b750:	4770      	bx	lr

0810b752 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b752:	b580      	push	{r7, lr}
 810b754:	b084      	sub	sp, #16
 810b756:	af00      	add	r7, sp, #0
 810b758:	6078      	str	r0, [r7, #4]
 810b75a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b75c:	687b      	ldr	r3, [r7, #4]
 810b75e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b762:	2b01      	cmp	r3, #1
 810b764:	d101      	bne.n	810b76a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810b766:	2302      	movs	r3, #2
 810b768:	e02d      	b.n	810b7c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810b76a:	687b      	ldr	r3, [r7, #4]
 810b76c:	2201      	movs	r2, #1
 810b76e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b772:	687b      	ldr	r3, [r7, #4]
 810b774:	2224      	movs	r2, #36	@ 0x24
 810b776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b77a:	687b      	ldr	r3, [r7, #4]
 810b77c:	681b      	ldr	r3, [r3, #0]
 810b77e:	681b      	ldr	r3, [r3, #0]
 810b780:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b782:	687b      	ldr	r3, [r7, #4]
 810b784:	681b      	ldr	r3, [r3, #0]
 810b786:	681a      	ldr	r2, [r3, #0]
 810b788:	687b      	ldr	r3, [r7, #4]
 810b78a:	681b      	ldr	r3, [r3, #0]
 810b78c:	f022 0201 	bic.w	r2, r2, #1
 810b790:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810b792:	687b      	ldr	r3, [r7, #4]
 810b794:	681b      	ldr	r3, [r3, #0]
 810b796:	689b      	ldr	r3, [r3, #8]
 810b798:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810b79c:	687b      	ldr	r3, [r7, #4]
 810b79e:	681b      	ldr	r3, [r3, #0]
 810b7a0:	683a      	ldr	r2, [r7, #0]
 810b7a2:	430a      	orrs	r2, r1
 810b7a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b7a6:	6878      	ldr	r0, [r7, #4]
 810b7a8:	f000 f850 	bl	810b84c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b7ac:	687b      	ldr	r3, [r7, #4]
 810b7ae:	681b      	ldr	r3, [r3, #0]
 810b7b0:	68fa      	ldr	r2, [r7, #12]
 810b7b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b7b4:	687b      	ldr	r3, [r7, #4]
 810b7b6:	2220      	movs	r2, #32
 810b7b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b7bc:	687b      	ldr	r3, [r7, #4]
 810b7be:	2200      	movs	r2, #0
 810b7c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b7c4:	2300      	movs	r3, #0
}
 810b7c6:	4618      	mov	r0, r3
 810b7c8:	3710      	adds	r7, #16
 810b7ca:	46bd      	mov	sp, r7
 810b7cc:	bd80      	pop	{r7, pc}

0810b7ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b7ce:	b580      	push	{r7, lr}
 810b7d0:	b084      	sub	sp, #16
 810b7d2:	af00      	add	r7, sp, #0
 810b7d4:	6078      	str	r0, [r7, #4]
 810b7d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b7d8:	687b      	ldr	r3, [r7, #4]
 810b7da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b7de:	2b01      	cmp	r3, #1
 810b7e0:	d101      	bne.n	810b7e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810b7e2:	2302      	movs	r3, #2
 810b7e4:	e02d      	b.n	810b842 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810b7e6:	687b      	ldr	r3, [r7, #4]
 810b7e8:	2201      	movs	r2, #1
 810b7ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b7ee:	687b      	ldr	r3, [r7, #4]
 810b7f0:	2224      	movs	r2, #36	@ 0x24
 810b7f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b7f6:	687b      	ldr	r3, [r7, #4]
 810b7f8:	681b      	ldr	r3, [r3, #0]
 810b7fa:	681b      	ldr	r3, [r3, #0]
 810b7fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b7fe:	687b      	ldr	r3, [r7, #4]
 810b800:	681b      	ldr	r3, [r3, #0]
 810b802:	681a      	ldr	r2, [r3, #0]
 810b804:	687b      	ldr	r3, [r7, #4]
 810b806:	681b      	ldr	r3, [r3, #0]
 810b808:	f022 0201 	bic.w	r2, r2, #1
 810b80c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810b80e:	687b      	ldr	r3, [r7, #4]
 810b810:	681b      	ldr	r3, [r3, #0]
 810b812:	689b      	ldr	r3, [r3, #8]
 810b814:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810b818:	687b      	ldr	r3, [r7, #4]
 810b81a:	681b      	ldr	r3, [r3, #0]
 810b81c:	683a      	ldr	r2, [r7, #0]
 810b81e:	430a      	orrs	r2, r1
 810b820:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b822:	6878      	ldr	r0, [r7, #4]
 810b824:	f000 f812 	bl	810b84c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b828:	687b      	ldr	r3, [r7, #4]
 810b82a:	681b      	ldr	r3, [r3, #0]
 810b82c:	68fa      	ldr	r2, [r7, #12]
 810b82e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b830:	687b      	ldr	r3, [r7, #4]
 810b832:	2220      	movs	r2, #32
 810b834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b838:	687b      	ldr	r3, [r7, #4]
 810b83a:	2200      	movs	r2, #0
 810b83c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b840:	2300      	movs	r3, #0
}
 810b842:	4618      	mov	r0, r3
 810b844:	3710      	adds	r7, #16
 810b846:	46bd      	mov	sp, r7
 810b848:	bd80      	pop	{r7, pc}
	...

0810b84c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810b84c:	b480      	push	{r7}
 810b84e:	b085      	sub	sp, #20
 810b850:	af00      	add	r7, sp, #0
 810b852:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810b854:	687b      	ldr	r3, [r7, #4]
 810b856:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b858:	2b00      	cmp	r3, #0
 810b85a:	d108      	bne.n	810b86e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810b85c:	687b      	ldr	r3, [r7, #4]
 810b85e:	2201      	movs	r2, #1
 810b860:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810b864:	687b      	ldr	r3, [r7, #4]
 810b866:	2201      	movs	r2, #1
 810b868:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810b86c:	e031      	b.n	810b8d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810b86e:	2310      	movs	r3, #16
 810b870:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810b872:	2310      	movs	r3, #16
 810b874:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810b876:	687b      	ldr	r3, [r7, #4]
 810b878:	681b      	ldr	r3, [r3, #0]
 810b87a:	689b      	ldr	r3, [r3, #8]
 810b87c:	0e5b      	lsrs	r3, r3, #25
 810b87e:	b2db      	uxtb	r3, r3
 810b880:	f003 0307 	and.w	r3, r3, #7
 810b884:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810b886:	687b      	ldr	r3, [r7, #4]
 810b888:	681b      	ldr	r3, [r3, #0]
 810b88a:	689b      	ldr	r3, [r3, #8]
 810b88c:	0f5b      	lsrs	r3, r3, #29
 810b88e:	b2db      	uxtb	r3, r3
 810b890:	f003 0307 	and.w	r3, r3, #7
 810b894:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810b896:	7bbb      	ldrb	r3, [r7, #14]
 810b898:	7b3a      	ldrb	r2, [r7, #12]
 810b89a:	4911      	ldr	r1, [pc, #68]	@ (810b8e0 <UARTEx_SetNbDataToProcess+0x94>)
 810b89c:	5c8a      	ldrb	r2, [r1, r2]
 810b89e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810b8a2:	7b3a      	ldrb	r2, [r7, #12]
 810b8a4:	490f      	ldr	r1, [pc, #60]	@ (810b8e4 <UARTEx_SetNbDataToProcess+0x98>)
 810b8a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810b8a8:	fb93 f3f2 	sdiv	r3, r3, r2
 810b8ac:	b29a      	uxth	r2, r3
 810b8ae:	687b      	ldr	r3, [r7, #4]
 810b8b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810b8b4:	7bfb      	ldrb	r3, [r7, #15]
 810b8b6:	7b7a      	ldrb	r2, [r7, #13]
 810b8b8:	4909      	ldr	r1, [pc, #36]	@ (810b8e0 <UARTEx_SetNbDataToProcess+0x94>)
 810b8ba:	5c8a      	ldrb	r2, [r1, r2]
 810b8bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810b8c0:	7b7a      	ldrb	r2, [r7, #13]
 810b8c2:	4908      	ldr	r1, [pc, #32]	@ (810b8e4 <UARTEx_SetNbDataToProcess+0x98>)
 810b8c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810b8c6:	fb93 f3f2 	sdiv	r3, r3, r2
 810b8ca:	b29a      	uxth	r2, r3
 810b8cc:	687b      	ldr	r3, [r7, #4]
 810b8ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810b8d2:	bf00      	nop
 810b8d4:	3714      	adds	r7, #20
 810b8d6:	46bd      	mov	sp, r7
 810b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b8dc:	4770      	bx	lr
 810b8de:	bf00      	nop
 810b8e0:	08112fcc 	.word	0x08112fcc
 810b8e4:	08112fd4 	.word	0x08112fd4

0810b8e8 <__NVIC_SetPriority>:
{
 810b8e8:	b480      	push	{r7}
 810b8ea:	b083      	sub	sp, #12
 810b8ec:	af00      	add	r7, sp, #0
 810b8ee:	4603      	mov	r3, r0
 810b8f0:	6039      	str	r1, [r7, #0]
 810b8f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810b8f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810b8f8:	2b00      	cmp	r3, #0
 810b8fa:	db0a      	blt.n	810b912 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810b8fc:	683b      	ldr	r3, [r7, #0]
 810b8fe:	b2da      	uxtb	r2, r3
 810b900:	490c      	ldr	r1, [pc, #48]	@ (810b934 <__NVIC_SetPriority+0x4c>)
 810b902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810b906:	0112      	lsls	r2, r2, #4
 810b908:	b2d2      	uxtb	r2, r2
 810b90a:	440b      	add	r3, r1
 810b90c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 810b910:	e00a      	b.n	810b928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810b912:	683b      	ldr	r3, [r7, #0]
 810b914:	b2da      	uxtb	r2, r3
 810b916:	4908      	ldr	r1, [pc, #32]	@ (810b938 <__NVIC_SetPriority+0x50>)
 810b918:	88fb      	ldrh	r3, [r7, #6]
 810b91a:	f003 030f 	and.w	r3, r3, #15
 810b91e:	3b04      	subs	r3, #4
 810b920:	0112      	lsls	r2, r2, #4
 810b922:	b2d2      	uxtb	r2, r2
 810b924:	440b      	add	r3, r1
 810b926:	761a      	strb	r2, [r3, #24]
}
 810b928:	bf00      	nop
 810b92a:	370c      	adds	r7, #12
 810b92c:	46bd      	mov	sp, r7
 810b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b932:	4770      	bx	lr
 810b934:	e000e100 	.word	0xe000e100
 810b938:	e000ed00 	.word	0xe000ed00

0810b93c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810b93c:	b580      	push	{r7, lr}
 810b93e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810b940:	2100      	movs	r1, #0
 810b942:	f06f 0004 	mvn.w	r0, #4
 810b946:	f7ff ffcf 	bl	810b8e8 <__NVIC_SetPriority>
#endif
}
 810b94a:	bf00      	nop
 810b94c:	bd80      	pop	{r7, pc}
	...

0810b950 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810b950:	b480      	push	{r7}
 810b952:	b083      	sub	sp, #12
 810b954:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810b956:	f3ef 8305 	mrs	r3, IPSR
 810b95a:	603b      	str	r3, [r7, #0]
  return(result);
 810b95c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810b95e:	2b00      	cmp	r3, #0
 810b960:	d003      	beq.n	810b96a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810b962:	f06f 0305 	mvn.w	r3, #5
 810b966:	607b      	str	r3, [r7, #4]
 810b968:	e00c      	b.n	810b984 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810b96a:	4b0a      	ldr	r3, [pc, #40]	@ (810b994 <osKernelInitialize+0x44>)
 810b96c:	681b      	ldr	r3, [r3, #0]
 810b96e:	2b00      	cmp	r3, #0
 810b970:	d105      	bne.n	810b97e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810b972:	4b08      	ldr	r3, [pc, #32]	@ (810b994 <osKernelInitialize+0x44>)
 810b974:	2201      	movs	r2, #1
 810b976:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810b978:	2300      	movs	r3, #0
 810b97a:	607b      	str	r3, [r7, #4]
 810b97c:	e002      	b.n	810b984 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810b97e:	f04f 33ff 	mov.w	r3, #4294967295
 810b982:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810b984:	687b      	ldr	r3, [r7, #4]
}
 810b986:	4618      	mov	r0, r3
 810b988:	370c      	adds	r7, #12
 810b98a:	46bd      	mov	sp, r7
 810b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b990:	4770      	bx	lr
 810b992:	bf00      	nop
 810b994:	10000658 	.word	0x10000658

0810b998 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810b998:	b580      	push	{r7, lr}
 810b99a:	b082      	sub	sp, #8
 810b99c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810b99e:	f3ef 8305 	mrs	r3, IPSR
 810b9a2:	603b      	str	r3, [r7, #0]
  return(result);
 810b9a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810b9a6:	2b00      	cmp	r3, #0
 810b9a8:	d003      	beq.n	810b9b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 810b9aa:	f06f 0305 	mvn.w	r3, #5
 810b9ae:	607b      	str	r3, [r7, #4]
 810b9b0:	e010      	b.n	810b9d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810b9b2:	4b0b      	ldr	r3, [pc, #44]	@ (810b9e0 <osKernelStart+0x48>)
 810b9b4:	681b      	ldr	r3, [r3, #0]
 810b9b6:	2b01      	cmp	r3, #1
 810b9b8:	d109      	bne.n	810b9ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810b9ba:	f7ff ffbf 	bl	810b93c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810b9be:	4b08      	ldr	r3, [pc, #32]	@ (810b9e0 <osKernelStart+0x48>)
 810b9c0:	2202      	movs	r2, #2
 810b9c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810b9c4:	f001 fcb8 	bl	810d338 <vTaskStartScheduler>
      stat = osOK;
 810b9c8:	2300      	movs	r3, #0
 810b9ca:	607b      	str	r3, [r7, #4]
 810b9cc:	e002      	b.n	810b9d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810b9ce:	f04f 33ff 	mov.w	r3, #4294967295
 810b9d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810b9d4:	687b      	ldr	r3, [r7, #4]
}
 810b9d6:	4618      	mov	r0, r3
 810b9d8:	3708      	adds	r7, #8
 810b9da:	46bd      	mov	sp, r7
 810b9dc:	bd80      	pop	{r7, pc}
 810b9de:	bf00      	nop
 810b9e0:	10000658 	.word	0x10000658

0810b9e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810b9e4:	b580      	push	{r7, lr}
 810b9e6:	b08e      	sub	sp, #56	@ 0x38
 810b9e8:	af04      	add	r7, sp, #16
 810b9ea:	60f8      	str	r0, [r7, #12]
 810b9ec:	60b9      	str	r1, [r7, #8]
 810b9ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810b9f0:	2300      	movs	r3, #0
 810b9f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810b9f4:	f3ef 8305 	mrs	r3, IPSR
 810b9f8:	617b      	str	r3, [r7, #20]
  return(result);
 810b9fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810b9fc:	2b00      	cmp	r3, #0
 810b9fe:	d17e      	bne.n	810bafe <osThreadNew+0x11a>
 810ba00:	68fb      	ldr	r3, [r7, #12]
 810ba02:	2b00      	cmp	r3, #0
 810ba04:	d07b      	beq.n	810bafe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 810ba06:	2380      	movs	r3, #128	@ 0x80
 810ba08:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 810ba0a:	2318      	movs	r3, #24
 810ba0c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810ba0e:	2300      	movs	r3, #0
 810ba10:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810ba12:	f04f 33ff 	mov.w	r3, #4294967295
 810ba16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810ba18:	687b      	ldr	r3, [r7, #4]
 810ba1a:	2b00      	cmp	r3, #0
 810ba1c:	d045      	beq.n	810baaa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810ba1e:	687b      	ldr	r3, [r7, #4]
 810ba20:	681b      	ldr	r3, [r3, #0]
 810ba22:	2b00      	cmp	r3, #0
 810ba24:	d002      	beq.n	810ba2c <osThreadNew+0x48>
        name = attr->name;
 810ba26:	687b      	ldr	r3, [r7, #4]
 810ba28:	681b      	ldr	r3, [r3, #0]
 810ba2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 810ba2c:	687b      	ldr	r3, [r7, #4]
 810ba2e:	699b      	ldr	r3, [r3, #24]
 810ba30:	2b00      	cmp	r3, #0
 810ba32:	d002      	beq.n	810ba3a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810ba34:	687b      	ldr	r3, [r7, #4]
 810ba36:	699b      	ldr	r3, [r3, #24]
 810ba38:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810ba3a:	69fb      	ldr	r3, [r7, #28]
 810ba3c:	2b00      	cmp	r3, #0
 810ba3e:	d008      	beq.n	810ba52 <osThreadNew+0x6e>
 810ba40:	69fb      	ldr	r3, [r7, #28]
 810ba42:	2b38      	cmp	r3, #56	@ 0x38
 810ba44:	d805      	bhi.n	810ba52 <osThreadNew+0x6e>
 810ba46:	687b      	ldr	r3, [r7, #4]
 810ba48:	685b      	ldr	r3, [r3, #4]
 810ba4a:	f003 0301 	and.w	r3, r3, #1
 810ba4e:	2b00      	cmp	r3, #0
 810ba50:	d001      	beq.n	810ba56 <osThreadNew+0x72>
        return (NULL);
 810ba52:	2300      	movs	r3, #0
 810ba54:	e054      	b.n	810bb00 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810ba56:	687b      	ldr	r3, [r7, #4]
 810ba58:	695b      	ldr	r3, [r3, #20]
 810ba5a:	2b00      	cmp	r3, #0
 810ba5c:	d003      	beq.n	810ba66 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810ba5e:	687b      	ldr	r3, [r7, #4]
 810ba60:	695b      	ldr	r3, [r3, #20]
 810ba62:	089b      	lsrs	r3, r3, #2
 810ba64:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810ba66:	687b      	ldr	r3, [r7, #4]
 810ba68:	689b      	ldr	r3, [r3, #8]
 810ba6a:	2b00      	cmp	r3, #0
 810ba6c:	d00e      	beq.n	810ba8c <osThreadNew+0xa8>
 810ba6e:	687b      	ldr	r3, [r7, #4]
 810ba70:	68db      	ldr	r3, [r3, #12]
 810ba72:	2b5b      	cmp	r3, #91	@ 0x5b
 810ba74:	d90a      	bls.n	810ba8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810ba76:	687b      	ldr	r3, [r7, #4]
 810ba78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810ba7a:	2b00      	cmp	r3, #0
 810ba7c:	d006      	beq.n	810ba8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810ba7e:	687b      	ldr	r3, [r7, #4]
 810ba80:	695b      	ldr	r3, [r3, #20]
 810ba82:	2b00      	cmp	r3, #0
 810ba84:	d002      	beq.n	810ba8c <osThreadNew+0xa8>
        mem = 1;
 810ba86:	2301      	movs	r3, #1
 810ba88:	61bb      	str	r3, [r7, #24]
 810ba8a:	e010      	b.n	810baae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810ba8c:	687b      	ldr	r3, [r7, #4]
 810ba8e:	689b      	ldr	r3, [r3, #8]
 810ba90:	2b00      	cmp	r3, #0
 810ba92:	d10c      	bne.n	810baae <osThreadNew+0xca>
 810ba94:	687b      	ldr	r3, [r7, #4]
 810ba96:	68db      	ldr	r3, [r3, #12]
 810ba98:	2b00      	cmp	r3, #0
 810ba9a:	d108      	bne.n	810baae <osThreadNew+0xca>
 810ba9c:	687b      	ldr	r3, [r7, #4]
 810ba9e:	691b      	ldr	r3, [r3, #16]
 810baa0:	2b00      	cmp	r3, #0
 810baa2:	d104      	bne.n	810baae <osThreadNew+0xca>
          mem = 0;
 810baa4:	2300      	movs	r3, #0
 810baa6:	61bb      	str	r3, [r7, #24]
 810baa8:	e001      	b.n	810baae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 810baaa:	2300      	movs	r3, #0
 810baac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810baae:	69bb      	ldr	r3, [r7, #24]
 810bab0:	2b01      	cmp	r3, #1
 810bab2:	d110      	bne.n	810bad6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810bab4:	687b      	ldr	r3, [r7, #4]
 810bab6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 810bab8:	687a      	ldr	r2, [r7, #4]
 810baba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810babc:	9202      	str	r2, [sp, #8]
 810babe:	9301      	str	r3, [sp, #4]
 810bac0:	69fb      	ldr	r3, [r7, #28]
 810bac2:	9300      	str	r3, [sp, #0]
 810bac4:	68bb      	ldr	r3, [r7, #8]
 810bac6:	6a3a      	ldr	r2, [r7, #32]
 810bac8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810baca:	68f8      	ldr	r0, [r7, #12]
 810bacc:	f001 fa58 	bl	810cf80 <xTaskCreateStatic>
 810bad0:	4603      	mov	r3, r0
 810bad2:	613b      	str	r3, [r7, #16]
 810bad4:	e013      	b.n	810bafe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810bad6:	69bb      	ldr	r3, [r7, #24]
 810bad8:	2b00      	cmp	r3, #0
 810bada:	d110      	bne.n	810bafe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810badc:	6a3b      	ldr	r3, [r7, #32]
 810bade:	b29a      	uxth	r2, r3
 810bae0:	f107 0310 	add.w	r3, r7, #16
 810bae4:	9301      	str	r3, [sp, #4]
 810bae6:	69fb      	ldr	r3, [r7, #28]
 810bae8:	9300      	str	r3, [sp, #0]
 810baea:	68bb      	ldr	r3, [r7, #8]
 810baec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810baee:	68f8      	ldr	r0, [r7, #12]
 810baf0:	f001 faa6 	bl	810d040 <xTaskCreate>
 810baf4:	4603      	mov	r3, r0
 810baf6:	2b01      	cmp	r3, #1
 810baf8:	d001      	beq.n	810bafe <osThreadNew+0x11a>
            hTask = NULL;
 810bafa:	2300      	movs	r3, #0
 810bafc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810bafe:	693b      	ldr	r3, [r7, #16]
}
 810bb00:	4618      	mov	r0, r3
 810bb02:	3728      	adds	r7, #40	@ 0x28
 810bb04:	46bd      	mov	sp, r7
 810bb06:	bd80      	pop	{r7, pc}

0810bb08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 810bb08:	b580      	push	{r7, lr}
 810bb0a:	b084      	sub	sp, #16
 810bb0c:	af00      	add	r7, sp, #0
 810bb0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bb10:	f3ef 8305 	mrs	r3, IPSR
 810bb14:	60bb      	str	r3, [r7, #8]
  return(result);
 810bb16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810bb18:	2b00      	cmp	r3, #0
 810bb1a:	d003      	beq.n	810bb24 <osDelay+0x1c>
    stat = osErrorISR;
 810bb1c:	f06f 0305 	mvn.w	r3, #5
 810bb20:	60fb      	str	r3, [r7, #12]
 810bb22:	e007      	b.n	810bb34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810bb24:	2300      	movs	r3, #0
 810bb26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 810bb28:	687b      	ldr	r3, [r7, #4]
 810bb2a:	2b00      	cmp	r3, #0
 810bb2c:	d002      	beq.n	810bb34 <osDelay+0x2c>
      vTaskDelay(ticks);
 810bb2e:	6878      	ldr	r0, [r7, #4]
 810bb30:	f001 fbcc 	bl	810d2cc <vTaskDelay>
    }
  }

  return (stat);
 810bb34:	68fb      	ldr	r3, [r7, #12]
}
 810bb36:	4618      	mov	r0, r3
 810bb38:	3710      	adds	r7, #16
 810bb3a:	46bd      	mov	sp, r7
 810bb3c:	bd80      	pop	{r7, pc}
	...

0810bb40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 810bb40:	b480      	push	{r7}
 810bb42:	b085      	sub	sp, #20
 810bb44:	af00      	add	r7, sp, #0
 810bb46:	60f8      	str	r0, [r7, #12]
 810bb48:	60b9      	str	r1, [r7, #8]
 810bb4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810bb4c:	68fb      	ldr	r3, [r7, #12]
 810bb4e:	4a07      	ldr	r2, [pc, #28]	@ (810bb6c <vApplicationGetIdleTaskMemory+0x2c>)
 810bb50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810bb52:	68bb      	ldr	r3, [r7, #8]
 810bb54:	4a06      	ldr	r2, [pc, #24]	@ (810bb70 <vApplicationGetIdleTaskMemory+0x30>)
 810bb56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 810bb58:	687b      	ldr	r3, [r7, #4]
 810bb5a:	2280      	movs	r2, #128	@ 0x80
 810bb5c:	601a      	str	r2, [r3, #0]
}
 810bb5e:	bf00      	nop
 810bb60:	3714      	adds	r7, #20
 810bb62:	46bd      	mov	sp, r7
 810bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb68:	4770      	bx	lr
 810bb6a:	bf00      	nop
 810bb6c:	1000065c 	.word	0x1000065c
 810bb70:	100006b8 	.word	0x100006b8

0810bb74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810bb74:	b480      	push	{r7}
 810bb76:	b085      	sub	sp, #20
 810bb78:	af00      	add	r7, sp, #0
 810bb7a:	60f8      	str	r0, [r7, #12]
 810bb7c:	60b9      	str	r1, [r7, #8]
 810bb7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810bb80:	68fb      	ldr	r3, [r7, #12]
 810bb82:	4a07      	ldr	r2, [pc, #28]	@ (810bba0 <vApplicationGetTimerTaskMemory+0x2c>)
 810bb84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810bb86:	68bb      	ldr	r3, [r7, #8]
 810bb88:	4a06      	ldr	r2, [pc, #24]	@ (810bba4 <vApplicationGetTimerTaskMemory+0x30>)
 810bb8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810bb8c:	687b      	ldr	r3, [r7, #4]
 810bb8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810bb92:	601a      	str	r2, [r3, #0]
}
 810bb94:	bf00      	nop
 810bb96:	3714      	adds	r7, #20
 810bb98:	46bd      	mov	sp, r7
 810bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb9e:	4770      	bx	lr
 810bba0:	100008b8 	.word	0x100008b8
 810bba4:	10000914 	.word	0x10000914

0810bba8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810bba8:	b580      	push	{r7, lr}
 810bbaa:	b08a      	sub	sp, #40	@ 0x28
 810bbac:	af00      	add	r7, sp, #0
 810bbae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810bbb0:	2300      	movs	r3, #0
 810bbb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810bbb4:	f001 fc28 	bl	810d408 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810bbb8:	4b5c      	ldr	r3, [pc, #368]	@ (810bd2c <pvPortMalloc+0x184>)
 810bbba:	681b      	ldr	r3, [r3, #0]
 810bbbc:	2b00      	cmp	r3, #0
 810bbbe:	d101      	bne.n	810bbc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810bbc0:	f000 f924 	bl	810be0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810bbc4:	4b5a      	ldr	r3, [pc, #360]	@ (810bd30 <pvPortMalloc+0x188>)
 810bbc6:	681a      	ldr	r2, [r3, #0]
 810bbc8:	687b      	ldr	r3, [r7, #4]
 810bbca:	4013      	ands	r3, r2
 810bbcc:	2b00      	cmp	r3, #0
 810bbce:	f040 8095 	bne.w	810bcfc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810bbd2:	687b      	ldr	r3, [r7, #4]
 810bbd4:	2b00      	cmp	r3, #0
 810bbd6:	d01e      	beq.n	810bc16 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 810bbd8:	2208      	movs	r2, #8
 810bbda:	687b      	ldr	r3, [r7, #4]
 810bbdc:	4413      	add	r3, r2
 810bbde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810bbe0:	687b      	ldr	r3, [r7, #4]
 810bbe2:	f003 0307 	and.w	r3, r3, #7
 810bbe6:	2b00      	cmp	r3, #0
 810bbe8:	d015      	beq.n	810bc16 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810bbea:	687b      	ldr	r3, [r7, #4]
 810bbec:	f023 0307 	bic.w	r3, r3, #7
 810bbf0:	3308      	adds	r3, #8
 810bbf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810bbf4:	687b      	ldr	r3, [r7, #4]
 810bbf6:	f003 0307 	and.w	r3, r3, #7
 810bbfa:	2b00      	cmp	r3, #0
 810bbfc:	d00b      	beq.n	810bc16 <pvPortMalloc+0x6e>
	__asm volatile
 810bbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bc02:	f383 8811 	msr	BASEPRI, r3
 810bc06:	f3bf 8f6f 	isb	sy
 810bc0a:	f3bf 8f4f 	dsb	sy
 810bc0e:	617b      	str	r3, [r7, #20]
}
 810bc10:	bf00      	nop
 810bc12:	bf00      	nop
 810bc14:	e7fd      	b.n	810bc12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810bc16:	687b      	ldr	r3, [r7, #4]
 810bc18:	2b00      	cmp	r3, #0
 810bc1a:	d06f      	beq.n	810bcfc <pvPortMalloc+0x154>
 810bc1c:	4b45      	ldr	r3, [pc, #276]	@ (810bd34 <pvPortMalloc+0x18c>)
 810bc1e:	681b      	ldr	r3, [r3, #0]
 810bc20:	687a      	ldr	r2, [r7, #4]
 810bc22:	429a      	cmp	r2, r3
 810bc24:	d86a      	bhi.n	810bcfc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810bc26:	4b44      	ldr	r3, [pc, #272]	@ (810bd38 <pvPortMalloc+0x190>)
 810bc28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810bc2a:	4b43      	ldr	r3, [pc, #268]	@ (810bd38 <pvPortMalloc+0x190>)
 810bc2c:	681b      	ldr	r3, [r3, #0]
 810bc2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810bc30:	e004      	b.n	810bc3c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 810bc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bc34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810bc36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bc38:	681b      	ldr	r3, [r3, #0]
 810bc3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810bc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bc3e:	685b      	ldr	r3, [r3, #4]
 810bc40:	687a      	ldr	r2, [r7, #4]
 810bc42:	429a      	cmp	r2, r3
 810bc44:	d903      	bls.n	810bc4e <pvPortMalloc+0xa6>
 810bc46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bc48:	681b      	ldr	r3, [r3, #0]
 810bc4a:	2b00      	cmp	r3, #0
 810bc4c:	d1f1      	bne.n	810bc32 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810bc4e:	4b37      	ldr	r3, [pc, #220]	@ (810bd2c <pvPortMalloc+0x184>)
 810bc50:	681b      	ldr	r3, [r3, #0]
 810bc52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810bc54:	429a      	cmp	r2, r3
 810bc56:	d051      	beq.n	810bcfc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810bc58:	6a3b      	ldr	r3, [r7, #32]
 810bc5a:	681b      	ldr	r3, [r3, #0]
 810bc5c:	2208      	movs	r2, #8
 810bc5e:	4413      	add	r3, r2
 810bc60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810bc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bc64:	681a      	ldr	r2, [r3, #0]
 810bc66:	6a3b      	ldr	r3, [r7, #32]
 810bc68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810bc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bc6c:	685a      	ldr	r2, [r3, #4]
 810bc6e:	687b      	ldr	r3, [r7, #4]
 810bc70:	1ad2      	subs	r2, r2, r3
 810bc72:	2308      	movs	r3, #8
 810bc74:	005b      	lsls	r3, r3, #1
 810bc76:	429a      	cmp	r2, r3
 810bc78:	d920      	bls.n	810bcbc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810bc7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810bc7c:	687b      	ldr	r3, [r7, #4]
 810bc7e:	4413      	add	r3, r2
 810bc80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810bc82:	69bb      	ldr	r3, [r7, #24]
 810bc84:	f003 0307 	and.w	r3, r3, #7
 810bc88:	2b00      	cmp	r3, #0
 810bc8a:	d00b      	beq.n	810bca4 <pvPortMalloc+0xfc>
	__asm volatile
 810bc8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bc90:	f383 8811 	msr	BASEPRI, r3
 810bc94:	f3bf 8f6f 	isb	sy
 810bc98:	f3bf 8f4f 	dsb	sy
 810bc9c:	613b      	str	r3, [r7, #16]
}
 810bc9e:	bf00      	nop
 810bca0:	bf00      	nop
 810bca2:	e7fd      	b.n	810bca0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810bca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bca6:	685a      	ldr	r2, [r3, #4]
 810bca8:	687b      	ldr	r3, [r7, #4]
 810bcaa:	1ad2      	subs	r2, r2, r3
 810bcac:	69bb      	ldr	r3, [r7, #24]
 810bcae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810bcb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bcb2:	687a      	ldr	r2, [r7, #4]
 810bcb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810bcb6:	69b8      	ldr	r0, [r7, #24]
 810bcb8:	f000 f90a 	bl	810bed0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810bcbc:	4b1d      	ldr	r3, [pc, #116]	@ (810bd34 <pvPortMalloc+0x18c>)
 810bcbe:	681a      	ldr	r2, [r3, #0]
 810bcc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bcc2:	685b      	ldr	r3, [r3, #4]
 810bcc4:	1ad3      	subs	r3, r2, r3
 810bcc6:	4a1b      	ldr	r2, [pc, #108]	@ (810bd34 <pvPortMalloc+0x18c>)
 810bcc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810bcca:	4b1a      	ldr	r3, [pc, #104]	@ (810bd34 <pvPortMalloc+0x18c>)
 810bccc:	681a      	ldr	r2, [r3, #0]
 810bcce:	4b1b      	ldr	r3, [pc, #108]	@ (810bd3c <pvPortMalloc+0x194>)
 810bcd0:	681b      	ldr	r3, [r3, #0]
 810bcd2:	429a      	cmp	r2, r3
 810bcd4:	d203      	bcs.n	810bcde <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810bcd6:	4b17      	ldr	r3, [pc, #92]	@ (810bd34 <pvPortMalloc+0x18c>)
 810bcd8:	681b      	ldr	r3, [r3, #0]
 810bcda:	4a18      	ldr	r2, [pc, #96]	@ (810bd3c <pvPortMalloc+0x194>)
 810bcdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810bcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bce0:	685a      	ldr	r2, [r3, #4]
 810bce2:	4b13      	ldr	r3, [pc, #76]	@ (810bd30 <pvPortMalloc+0x188>)
 810bce4:	681b      	ldr	r3, [r3, #0]
 810bce6:	431a      	orrs	r2, r3
 810bce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bcea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810bcec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bcee:	2200      	movs	r2, #0
 810bcf0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810bcf2:	4b13      	ldr	r3, [pc, #76]	@ (810bd40 <pvPortMalloc+0x198>)
 810bcf4:	681b      	ldr	r3, [r3, #0]
 810bcf6:	3301      	adds	r3, #1
 810bcf8:	4a11      	ldr	r2, [pc, #68]	@ (810bd40 <pvPortMalloc+0x198>)
 810bcfa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810bcfc:	f001 fb92 	bl	810d424 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810bd00:	69fb      	ldr	r3, [r7, #28]
 810bd02:	f003 0307 	and.w	r3, r3, #7
 810bd06:	2b00      	cmp	r3, #0
 810bd08:	d00b      	beq.n	810bd22 <pvPortMalloc+0x17a>
	__asm volatile
 810bd0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bd0e:	f383 8811 	msr	BASEPRI, r3
 810bd12:	f3bf 8f6f 	isb	sy
 810bd16:	f3bf 8f4f 	dsb	sy
 810bd1a:	60fb      	str	r3, [r7, #12]
}
 810bd1c:	bf00      	nop
 810bd1e:	bf00      	nop
 810bd20:	e7fd      	b.n	810bd1e <pvPortMalloc+0x176>
	return pvReturn;
 810bd22:	69fb      	ldr	r3, [r7, #28]
}
 810bd24:	4618      	mov	r0, r3
 810bd26:	3728      	adds	r7, #40	@ 0x28
 810bd28:	46bd      	mov	sp, r7
 810bd2a:	bd80      	pop	{r7, pc}
 810bd2c:	1000491c 	.word	0x1000491c
 810bd30:	10004930 	.word	0x10004930
 810bd34:	10004920 	.word	0x10004920
 810bd38:	10004914 	.word	0x10004914
 810bd3c:	10004924 	.word	0x10004924
 810bd40:	10004928 	.word	0x10004928

0810bd44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810bd44:	b580      	push	{r7, lr}
 810bd46:	b086      	sub	sp, #24
 810bd48:	af00      	add	r7, sp, #0
 810bd4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810bd4c:	687b      	ldr	r3, [r7, #4]
 810bd4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810bd50:	687b      	ldr	r3, [r7, #4]
 810bd52:	2b00      	cmp	r3, #0
 810bd54:	d04f      	beq.n	810bdf6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810bd56:	2308      	movs	r3, #8
 810bd58:	425b      	negs	r3, r3
 810bd5a:	697a      	ldr	r2, [r7, #20]
 810bd5c:	4413      	add	r3, r2
 810bd5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810bd60:	697b      	ldr	r3, [r7, #20]
 810bd62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810bd64:	693b      	ldr	r3, [r7, #16]
 810bd66:	685a      	ldr	r2, [r3, #4]
 810bd68:	4b25      	ldr	r3, [pc, #148]	@ (810be00 <vPortFree+0xbc>)
 810bd6a:	681b      	ldr	r3, [r3, #0]
 810bd6c:	4013      	ands	r3, r2
 810bd6e:	2b00      	cmp	r3, #0
 810bd70:	d10b      	bne.n	810bd8a <vPortFree+0x46>
	__asm volatile
 810bd72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bd76:	f383 8811 	msr	BASEPRI, r3
 810bd7a:	f3bf 8f6f 	isb	sy
 810bd7e:	f3bf 8f4f 	dsb	sy
 810bd82:	60fb      	str	r3, [r7, #12]
}
 810bd84:	bf00      	nop
 810bd86:	bf00      	nop
 810bd88:	e7fd      	b.n	810bd86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810bd8a:	693b      	ldr	r3, [r7, #16]
 810bd8c:	681b      	ldr	r3, [r3, #0]
 810bd8e:	2b00      	cmp	r3, #0
 810bd90:	d00b      	beq.n	810bdaa <vPortFree+0x66>
	__asm volatile
 810bd92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bd96:	f383 8811 	msr	BASEPRI, r3
 810bd9a:	f3bf 8f6f 	isb	sy
 810bd9e:	f3bf 8f4f 	dsb	sy
 810bda2:	60bb      	str	r3, [r7, #8]
}
 810bda4:	bf00      	nop
 810bda6:	bf00      	nop
 810bda8:	e7fd      	b.n	810bda6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810bdaa:	693b      	ldr	r3, [r7, #16]
 810bdac:	685a      	ldr	r2, [r3, #4]
 810bdae:	4b14      	ldr	r3, [pc, #80]	@ (810be00 <vPortFree+0xbc>)
 810bdb0:	681b      	ldr	r3, [r3, #0]
 810bdb2:	4013      	ands	r3, r2
 810bdb4:	2b00      	cmp	r3, #0
 810bdb6:	d01e      	beq.n	810bdf6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810bdb8:	693b      	ldr	r3, [r7, #16]
 810bdba:	681b      	ldr	r3, [r3, #0]
 810bdbc:	2b00      	cmp	r3, #0
 810bdbe:	d11a      	bne.n	810bdf6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810bdc0:	693b      	ldr	r3, [r7, #16]
 810bdc2:	685a      	ldr	r2, [r3, #4]
 810bdc4:	4b0e      	ldr	r3, [pc, #56]	@ (810be00 <vPortFree+0xbc>)
 810bdc6:	681b      	ldr	r3, [r3, #0]
 810bdc8:	43db      	mvns	r3, r3
 810bdca:	401a      	ands	r2, r3
 810bdcc:	693b      	ldr	r3, [r7, #16]
 810bdce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810bdd0:	f001 fb1a 	bl	810d408 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810bdd4:	693b      	ldr	r3, [r7, #16]
 810bdd6:	685a      	ldr	r2, [r3, #4]
 810bdd8:	4b0a      	ldr	r3, [pc, #40]	@ (810be04 <vPortFree+0xc0>)
 810bdda:	681b      	ldr	r3, [r3, #0]
 810bddc:	4413      	add	r3, r2
 810bdde:	4a09      	ldr	r2, [pc, #36]	@ (810be04 <vPortFree+0xc0>)
 810bde0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810bde2:	6938      	ldr	r0, [r7, #16]
 810bde4:	f000 f874 	bl	810bed0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810bde8:	4b07      	ldr	r3, [pc, #28]	@ (810be08 <vPortFree+0xc4>)
 810bdea:	681b      	ldr	r3, [r3, #0]
 810bdec:	3301      	adds	r3, #1
 810bdee:	4a06      	ldr	r2, [pc, #24]	@ (810be08 <vPortFree+0xc4>)
 810bdf0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810bdf2:	f001 fb17 	bl	810d424 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810bdf6:	bf00      	nop
 810bdf8:	3718      	adds	r7, #24
 810bdfa:	46bd      	mov	sp, r7
 810bdfc:	bd80      	pop	{r7, pc}
 810bdfe:	bf00      	nop
 810be00:	10004930 	.word	0x10004930
 810be04:	10004920 	.word	0x10004920
 810be08:	1000492c 	.word	0x1000492c

0810be0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810be0c:	b480      	push	{r7}
 810be0e:	b085      	sub	sp, #20
 810be10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810be12:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 810be16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810be18:	4b27      	ldr	r3, [pc, #156]	@ (810beb8 <prvHeapInit+0xac>)
 810be1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810be1c:	68fb      	ldr	r3, [r7, #12]
 810be1e:	f003 0307 	and.w	r3, r3, #7
 810be22:	2b00      	cmp	r3, #0
 810be24:	d00c      	beq.n	810be40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810be26:	68fb      	ldr	r3, [r7, #12]
 810be28:	3307      	adds	r3, #7
 810be2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810be2c:	68fb      	ldr	r3, [r7, #12]
 810be2e:	f023 0307 	bic.w	r3, r3, #7
 810be32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810be34:	68ba      	ldr	r2, [r7, #8]
 810be36:	68fb      	ldr	r3, [r7, #12]
 810be38:	1ad3      	subs	r3, r2, r3
 810be3a:	4a1f      	ldr	r2, [pc, #124]	@ (810beb8 <prvHeapInit+0xac>)
 810be3c:	4413      	add	r3, r2
 810be3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810be40:	68fb      	ldr	r3, [r7, #12]
 810be42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810be44:	4a1d      	ldr	r2, [pc, #116]	@ (810bebc <prvHeapInit+0xb0>)
 810be46:	687b      	ldr	r3, [r7, #4]
 810be48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810be4a:	4b1c      	ldr	r3, [pc, #112]	@ (810bebc <prvHeapInit+0xb0>)
 810be4c:	2200      	movs	r2, #0
 810be4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810be50:	687b      	ldr	r3, [r7, #4]
 810be52:	68ba      	ldr	r2, [r7, #8]
 810be54:	4413      	add	r3, r2
 810be56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810be58:	2208      	movs	r2, #8
 810be5a:	68fb      	ldr	r3, [r7, #12]
 810be5c:	1a9b      	subs	r3, r3, r2
 810be5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810be60:	68fb      	ldr	r3, [r7, #12]
 810be62:	f023 0307 	bic.w	r3, r3, #7
 810be66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810be68:	68fb      	ldr	r3, [r7, #12]
 810be6a:	4a15      	ldr	r2, [pc, #84]	@ (810bec0 <prvHeapInit+0xb4>)
 810be6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810be6e:	4b14      	ldr	r3, [pc, #80]	@ (810bec0 <prvHeapInit+0xb4>)
 810be70:	681b      	ldr	r3, [r3, #0]
 810be72:	2200      	movs	r2, #0
 810be74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810be76:	4b12      	ldr	r3, [pc, #72]	@ (810bec0 <prvHeapInit+0xb4>)
 810be78:	681b      	ldr	r3, [r3, #0]
 810be7a:	2200      	movs	r2, #0
 810be7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810be7e:	687b      	ldr	r3, [r7, #4]
 810be80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810be82:	683b      	ldr	r3, [r7, #0]
 810be84:	68fa      	ldr	r2, [r7, #12]
 810be86:	1ad2      	subs	r2, r2, r3
 810be88:	683b      	ldr	r3, [r7, #0]
 810be8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810be8c:	4b0c      	ldr	r3, [pc, #48]	@ (810bec0 <prvHeapInit+0xb4>)
 810be8e:	681a      	ldr	r2, [r3, #0]
 810be90:	683b      	ldr	r3, [r7, #0]
 810be92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810be94:	683b      	ldr	r3, [r7, #0]
 810be96:	685b      	ldr	r3, [r3, #4]
 810be98:	4a0a      	ldr	r2, [pc, #40]	@ (810bec4 <prvHeapInit+0xb8>)
 810be9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810be9c:	683b      	ldr	r3, [r7, #0]
 810be9e:	685b      	ldr	r3, [r3, #4]
 810bea0:	4a09      	ldr	r2, [pc, #36]	@ (810bec8 <prvHeapInit+0xbc>)
 810bea2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810bea4:	4b09      	ldr	r3, [pc, #36]	@ (810becc <prvHeapInit+0xc0>)
 810bea6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810beaa:	601a      	str	r2, [r3, #0]
}
 810beac:	bf00      	nop
 810beae:	3714      	adds	r7, #20
 810beb0:	46bd      	mov	sp, r7
 810beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810beb6:	4770      	bx	lr
 810beb8:	10000d14 	.word	0x10000d14
 810bebc:	10004914 	.word	0x10004914
 810bec0:	1000491c 	.word	0x1000491c
 810bec4:	10004924 	.word	0x10004924
 810bec8:	10004920 	.word	0x10004920
 810becc:	10004930 	.word	0x10004930

0810bed0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810bed0:	b480      	push	{r7}
 810bed2:	b085      	sub	sp, #20
 810bed4:	af00      	add	r7, sp, #0
 810bed6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810bed8:	4b28      	ldr	r3, [pc, #160]	@ (810bf7c <prvInsertBlockIntoFreeList+0xac>)
 810beda:	60fb      	str	r3, [r7, #12]
 810bedc:	e002      	b.n	810bee4 <prvInsertBlockIntoFreeList+0x14>
 810bede:	68fb      	ldr	r3, [r7, #12]
 810bee0:	681b      	ldr	r3, [r3, #0]
 810bee2:	60fb      	str	r3, [r7, #12]
 810bee4:	68fb      	ldr	r3, [r7, #12]
 810bee6:	681b      	ldr	r3, [r3, #0]
 810bee8:	687a      	ldr	r2, [r7, #4]
 810beea:	429a      	cmp	r2, r3
 810beec:	d8f7      	bhi.n	810bede <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810beee:	68fb      	ldr	r3, [r7, #12]
 810bef0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810bef2:	68fb      	ldr	r3, [r7, #12]
 810bef4:	685b      	ldr	r3, [r3, #4]
 810bef6:	68ba      	ldr	r2, [r7, #8]
 810bef8:	4413      	add	r3, r2
 810befa:	687a      	ldr	r2, [r7, #4]
 810befc:	429a      	cmp	r2, r3
 810befe:	d108      	bne.n	810bf12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810bf00:	68fb      	ldr	r3, [r7, #12]
 810bf02:	685a      	ldr	r2, [r3, #4]
 810bf04:	687b      	ldr	r3, [r7, #4]
 810bf06:	685b      	ldr	r3, [r3, #4]
 810bf08:	441a      	add	r2, r3
 810bf0a:	68fb      	ldr	r3, [r7, #12]
 810bf0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810bf0e:	68fb      	ldr	r3, [r7, #12]
 810bf10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810bf12:	687b      	ldr	r3, [r7, #4]
 810bf14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810bf16:	687b      	ldr	r3, [r7, #4]
 810bf18:	685b      	ldr	r3, [r3, #4]
 810bf1a:	68ba      	ldr	r2, [r7, #8]
 810bf1c:	441a      	add	r2, r3
 810bf1e:	68fb      	ldr	r3, [r7, #12]
 810bf20:	681b      	ldr	r3, [r3, #0]
 810bf22:	429a      	cmp	r2, r3
 810bf24:	d118      	bne.n	810bf58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810bf26:	68fb      	ldr	r3, [r7, #12]
 810bf28:	681a      	ldr	r2, [r3, #0]
 810bf2a:	4b15      	ldr	r3, [pc, #84]	@ (810bf80 <prvInsertBlockIntoFreeList+0xb0>)
 810bf2c:	681b      	ldr	r3, [r3, #0]
 810bf2e:	429a      	cmp	r2, r3
 810bf30:	d00d      	beq.n	810bf4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810bf32:	687b      	ldr	r3, [r7, #4]
 810bf34:	685a      	ldr	r2, [r3, #4]
 810bf36:	68fb      	ldr	r3, [r7, #12]
 810bf38:	681b      	ldr	r3, [r3, #0]
 810bf3a:	685b      	ldr	r3, [r3, #4]
 810bf3c:	441a      	add	r2, r3
 810bf3e:	687b      	ldr	r3, [r7, #4]
 810bf40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810bf42:	68fb      	ldr	r3, [r7, #12]
 810bf44:	681b      	ldr	r3, [r3, #0]
 810bf46:	681a      	ldr	r2, [r3, #0]
 810bf48:	687b      	ldr	r3, [r7, #4]
 810bf4a:	601a      	str	r2, [r3, #0]
 810bf4c:	e008      	b.n	810bf60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810bf4e:	4b0c      	ldr	r3, [pc, #48]	@ (810bf80 <prvInsertBlockIntoFreeList+0xb0>)
 810bf50:	681a      	ldr	r2, [r3, #0]
 810bf52:	687b      	ldr	r3, [r7, #4]
 810bf54:	601a      	str	r2, [r3, #0]
 810bf56:	e003      	b.n	810bf60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810bf58:	68fb      	ldr	r3, [r7, #12]
 810bf5a:	681a      	ldr	r2, [r3, #0]
 810bf5c:	687b      	ldr	r3, [r7, #4]
 810bf5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810bf60:	68fa      	ldr	r2, [r7, #12]
 810bf62:	687b      	ldr	r3, [r7, #4]
 810bf64:	429a      	cmp	r2, r3
 810bf66:	d002      	beq.n	810bf6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810bf68:	68fb      	ldr	r3, [r7, #12]
 810bf6a:	687a      	ldr	r2, [r7, #4]
 810bf6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810bf6e:	bf00      	nop
 810bf70:	3714      	adds	r7, #20
 810bf72:	46bd      	mov	sp, r7
 810bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf78:	4770      	bx	lr
 810bf7a:	bf00      	nop
 810bf7c:	10004914 	.word	0x10004914
 810bf80:	1000491c 	.word	0x1000491c

0810bf84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810bf84:	b480      	push	{r7}
 810bf86:	b083      	sub	sp, #12
 810bf88:	af00      	add	r7, sp, #0
 810bf8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810bf8c:	687b      	ldr	r3, [r7, #4]
 810bf8e:	f103 0208 	add.w	r2, r3, #8
 810bf92:	687b      	ldr	r3, [r7, #4]
 810bf94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810bf96:	687b      	ldr	r3, [r7, #4]
 810bf98:	f04f 32ff 	mov.w	r2, #4294967295
 810bf9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810bf9e:	687b      	ldr	r3, [r7, #4]
 810bfa0:	f103 0208 	add.w	r2, r3, #8
 810bfa4:	687b      	ldr	r3, [r7, #4]
 810bfa6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810bfa8:	687b      	ldr	r3, [r7, #4]
 810bfaa:	f103 0208 	add.w	r2, r3, #8
 810bfae:	687b      	ldr	r3, [r7, #4]
 810bfb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810bfb2:	687b      	ldr	r3, [r7, #4]
 810bfb4:	2200      	movs	r2, #0
 810bfb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810bfb8:	bf00      	nop
 810bfba:	370c      	adds	r7, #12
 810bfbc:	46bd      	mov	sp, r7
 810bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bfc2:	4770      	bx	lr

0810bfc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810bfc4:	b480      	push	{r7}
 810bfc6:	b083      	sub	sp, #12
 810bfc8:	af00      	add	r7, sp, #0
 810bfca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810bfcc:	687b      	ldr	r3, [r7, #4]
 810bfce:	2200      	movs	r2, #0
 810bfd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810bfd2:	bf00      	nop
 810bfd4:	370c      	adds	r7, #12
 810bfd6:	46bd      	mov	sp, r7
 810bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bfdc:	4770      	bx	lr

0810bfde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810bfde:	b480      	push	{r7}
 810bfe0:	b085      	sub	sp, #20
 810bfe2:	af00      	add	r7, sp, #0
 810bfe4:	6078      	str	r0, [r7, #4]
 810bfe6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810bfe8:	687b      	ldr	r3, [r7, #4]
 810bfea:	685b      	ldr	r3, [r3, #4]
 810bfec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810bfee:	683b      	ldr	r3, [r7, #0]
 810bff0:	68fa      	ldr	r2, [r7, #12]
 810bff2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810bff4:	68fb      	ldr	r3, [r7, #12]
 810bff6:	689a      	ldr	r2, [r3, #8]
 810bff8:	683b      	ldr	r3, [r7, #0]
 810bffa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810bffc:	68fb      	ldr	r3, [r7, #12]
 810bffe:	689b      	ldr	r3, [r3, #8]
 810c000:	683a      	ldr	r2, [r7, #0]
 810c002:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810c004:	68fb      	ldr	r3, [r7, #12]
 810c006:	683a      	ldr	r2, [r7, #0]
 810c008:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810c00a:	683b      	ldr	r3, [r7, #0]
 810c00c:	687a      	ldr	r2, [r7, #4]
 810c00e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810c010:	687b      	ldr	r3, [r7, #4]
 810c012:	681b      	ldr	r3, [r3, #0]
 810c014:	1c5a      	adds	r2, r3, #1
 810c016:	687b      	ldr	r3, [r7, #4]
 810c018:	601a      	str	r2, [r3, #0]
}
 810c01a:	bf00      	nop
 810c01c:	3714      	adds	r7, #20
 810c01e:	46bd      	mov	sp, r7
 810c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c024:	4770      	bx	lr

0810c026 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810c026:	b480      	push	{r7}
 810c028:	b085      	sub	sp, #20
 810c02a:	af00      	add	r7, sp, #0
 810c02c:	6078      	str	r0, [r7, #4]
 810c02e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810c030:	683b      	ldr	r3, [r7, #0]
 810c032:	681b      	ldr	r3, [r3, #0]
 810c034:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810c036:	68bb      	ldr	r3, [r7, #8]
 810c038:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c03c:	d103      	bne.n	810c046 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810c03e:	687b      	ldr	r3, [r7, #4]
 810c040:	691b      	ldr	r3, [r3, #16]
 810c042:	60fb      	str	r3, [r7, #12]
 810c044:	e00c      	b.n	810c060 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810c046:	687b      	ldr	r3, [r7, #4]
 810c048:	3308      	adds	r3, #8
 810c04a:	60fb      	str	r3, [r7, #12]
 810c04c:	e002      	b.n	810c054 <vListInsert+0x2e>
 810c04e:	68fb      	ldr	r3, [r7, #12]
 810c050:	685b      	ldr	r3, [r3, #4]
 810c052:	60fb      	str	r3, [r7, #12]
 810c054:	68fb      	ldr	r3, [r7, #12]
 810c056:	685b      	ldr	r3, [r3, #4]
 810c058:	681b      	ldr	r3, [r3, #0]
 810c05a:	68ba      	ldr	r2, [r7, #8]
 810c05c:	429a      	cmp	r2, r3
 810c05e:	d2f6      	bcs.n	810c04e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810c060:	68fb      	ldr	r3, [r7, #12]
 810c062:	685a      	ldr	r2, [r3, #4]
 810c064:	683b      	ldr	r3, [r7, #0]
 810c066:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810c068:	683b      	ldr	r3, [r7, #0]
 810c06a:	685b      	ldr	r3, [r3, #4]
 810c06c:	683a      	ldr	r2, [r7, #0]
 810c06e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810c070:	683b      	ldr	r3, [r7, #0]
 810c072:	68fa      	ldr	r2, [r7, #12]
 810c074:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810c076:	68fb      	ldr	r3, [r7, #12]
 810c078:	683a      	ldr	r2, [r7, #0]
 810c07a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810c07c:	683b      	ldr	r3, [r7, #0]
 810c07e:	687a      	ldr	r2, [r7, #4]
 810c080:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810c082:	687b      	ldr	r3, [r7, #4]
 810c084:	681b      	ldr	r3, [r3, #0]
 810c086:	1c5a      	adds	r2, r3, #1
 810c088:	687b      	ldr	r3, [r7, #4]
 810c08a:	601a      	str	r2, [r3, #0]
}
 810c08c:	bf00      	nop
 810c08e:	3714      	adds	r7, #20
 810c090:	46bd      	mov	sp, r7
 810c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c096:	4770      	bx	lr

0810c098 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810c098:	b480      	push	{r7}
 810c09a:	b085      	sub	sp, #20
 810c09c:	af00      	add	r7, sp, #0
 810c09e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810c0a0:	687b      	ldr	r3, [r7, #4]
 810c0a2:	691b      	ldr	r3, [r3, #16]
 810c0a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810c0a6:	687b      	ldr	r3, [r7, #4]
 810c0a8:	685b      	ldr	r3, [r3, #4]
 810c0aa:	687a      	ldr	r2, [r7, #4]
 810c0ac:	6892      	ldr	r2, [r2, #8]
 810c0ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810c0b0:	687b      	ldr	r3, [r7, #4]
 810c0b2:	689b      	ldr	r3, [r3, #8]
 810c0b4:	687a      	ldr	r2, [r7, #4]
 810c0b6:	6852      	ldr	r2, [r2, #4]
 810c0b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810c0ba:	68fb      	ldr	r3, [r7, #12]
 810c0bc:	685b      	ldr	r3, [r3, #4]
 810c0be:	687a      	ldr	r2, [r7, #4]
 810c0c0:	429a      	cmp	r2, r3
 810c0c2:	d103      	bne.n	810c0cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810c0c4:	687b      	ldr	r3, [r7, #4]
 810c0c6:	689a      	ldr	r2, [r3, #8]
 810c0c8:	68fb      	ldr	r3, [r7, #12]
 810c0ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810c0cc:	687b      	ldr	r3, [r7, #4]
 810c0ce:	2200      	movs	r2, #0
 810c0d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810c0d2:	68fb      	ldr	r3, [r7, #12]
 810c0d4:	681b      	ldr	r3, [r3, #0]
 810c0d6:	1e5a      	subs	r2, r3, #1
 810c0d8:	68fb      	ldr	r3, [r7, #12]
 810c0da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810c0dc:	68fb      	ldr	r3, [r7, #12]
 810c0de:	681b      	ldr	r3, [r3, #0]
}
 810c0e0:	4618      	mov	r0, r3
 810c0e2:	3714      	adds	r7, #20
 810c0e4:	46bd      	mov	sp, r7
 810c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0ea:	4770      	bx	lr

0810c0ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810c0ec:	b480      	push	{r7}
 810c0ee:	b085      	sub	sp, #20
 810c0f0:	af00      	add	r7, sp, #0
 810c0f2:	60f8      	str	r0, [r7, #12]
 810c0f4:	60b9      	str	r1, [r7, #8]
 810c0f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810c0f8:	68fb      	ldr	r3, [r7, #12]
 810c0fa:	3b04      	subs	r3, #4
 810c0fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810c0fe:	68fb      	ldr	r3, [r7, #12]
 810c100:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 810c104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810c106:	68fb      	ldr	r3, [r7, #12]
 810c108:	3b04      	subs	r3, #4
 810c10a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810c10c:	68bb      	ldr	r3, [r7, #8]
 810c10e:	f023 0201 	bic.w	r2, r3, #1
 810c112:	68fb      	ldr	r3, [r7, #12]
 810c114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810c116:	68fb      	ldr	r3, [r7, #12]
 810c118:	3b04      	subs	r3, #4
 810c11a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810c11c:	4a0c      	ldr	r2, [pc, #48]	@ (810c150 <pxPortInitialiseStack+0x64>)
 810c11e:	68fb      	ldr	r3, [r7, #12]
 810c120:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810c122:	68fb      	ldr	r3, [r7, #12]
 810c124:	3b14      	subs	r3, #20
 810c126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810c128:	687a      	ldr	r2, [r7, #4]
 810c12a:	68fb      	ldr	r3, [r7, #12]
 810c12c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810c12e:	68fb      	ldr	r3, [r7, #12]
 810c130:	3b04      	subs	r3, #4
 810c132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810c134:	68fb      	ldr	r3, [r7, #12]
 810c136:	f06f 0202 	mvn.w	r2, #2
 810c13a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810c13c:	68fb      	ldr	r3, [r7, #12]
 810c13e:	3b20      	subs	r3, #32
 810c140:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810c142:	68fb      	ldr	r3, [r7, #12]
}
 810c144:	4618      	mov	r0, r3
 810c146:	3714      	adds	r7, #20
 810c148:	46bd      	mov	sp, r7
 810c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c14e:	4770      	bx	lr
 810c150:	0810c155 	.word	0x0810c155

0810c154 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810c154:	b480      	push	{r7}
 810c156:	b085      	sub	sp, #20
 810c158:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810c15a:	2300      	movs	r3, #0
 810c15c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810c15e:	4b13      	ldr	r3, [pc, #76]	@ (810c1ac <prvTaskExitError+0x58>)
 810c160:	681b      	ldr	r3, [r3, #0]
 810c162:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c166:	d00b      	beq.n	810c180 <prvTaskExitError+0x2c>
	__asm volatile
 810c168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c16c:	f383 8811 	msr	BASEPRI, r3
 810c170:	f3bf 8f6f 	isb	sy
 810c174:	f3bf 8f4f 	dsb	sy
 810c178:	60fb      	str	r3, [r7, #12]
}
 810c17a:	bf00      	nop
 810c17c:	bf00      	nop
 810c17e:	e7fd      	b.n	810c17c <prvTaskExitError+0x28>
	__asm volatile
 810c180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c184:	f383 8811 	msr	BASEPRI, r3
 810c188:	f3bf 8f6f 	isb	sy
 810c18c:	f3bf 8f4f 	dsb	sy
 810c190:	60bb      	str	r3, [r7, #8]
}
 810c192:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810c194:	bf00      	nop
 810c196:	687b      	ldr	r3, [r7, #4]
 810c198:	2b00      	cmp	r3, #0
 810c19a:	d0fc      	beq.n	810c196 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810c19c:	bf00      	nop
 810c19e:	bf00      	nop
 810c1a0:	3714      	adds	r7, #20
 810c1a2:	46bd      	mov	sp, r7
 810c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c1a8:	4770      	bx	lr
 810c1aa:	bf00      	nop
 810c1ac:	10000064 	.word	0x10000064

0810c1b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 810c1b0:	4b07      	ldr	r3, [pc, #28]	@ (810c1d0 <pxCurrentTCBConst2>)
 810c1b2:	6819      	ldr	r1, [r3, #0]
 810c1b4:	6808      	ldr	r0, [r1, #0]
 810c1b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c1ba:	f380 8809 	msr	PSP, r0
 810c1be:	f3bf 8f6f 	isb	sy
 810c1c2:	f04f 0000 	mov.w	r0, #0
 810c1c6:	f380 8811 	msr	BASEPRI, r0
 810c1ca:	4770      	bx	lr
 810c1cc:	f3af 8000 	nop.w

0810c1d0 <pxCurrentTCBConst2>:
 810c1d0:	1000497c 	.word	0x1000497c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 810c1d4:	bf00      	nop
 810c1d6:	bf00      	nop

0810c1d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 810c1d8:	4808      	ldr	r0, [pc, #32]	@ (810c1fc <prvPortStartFirstTask+0x24>)
 810c1da:	6800      	ldr	r0, [r0, #0]
 810c1dc:	6800      	ldr	r0, [r0, #0]
 810c1de:	f380 8808 	msr	MSP, r0
 810c1e2:	f04f 0000 	mov.w	r0, #0
 810c1e6:	f380 8814 	msr	CONTROL, r0
 810c1ea:	b662      	cpsie	i
 810c1ec:	b661      	cpsie	f
 810c1ee:	f3bf 8f4f 	dsb	sy
 810c1f2:	f3bf 8f6f 	isb	sy
 810c1f6:	df00      	svc	0
 810c1f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810c1fa:	bf00      	nop
 810c1fc:	e000ed08 	.word	0xe000ed08

0810c200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 810c200:	b580      	push	{r7, lr}
 810c202:	b086      	sub	sp, #24
 810c204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 810c206:	4b47      	ldr	r3, [pc, #284]	@ (810c324 <xPortStartScheduler+0x124>)
 810c208:	681b      	ldr	r3, [r3, #0]
 810c20a:	4a47      	ldr	r2, [pc, #284]	@ (810c328 <xPortStartScheduler+0x128>)
 810c20c:	4293      	cmp	r3, r2
 810c20e:	d10b      	bne.n	810c228 <xPortStartScheduler+0x28>
	__asm volatile
 810c210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c214:	f383 8811 	msr	BASEPRI, r3
 810c218:	f3bf 8f6f 	isb	sy
 810c21c:	f3bf 8f4f 	dsb	sy
 810c220:	60fb      	str	r3, [r7, #12]
}
 810c222:	bf00      	nop
 810c224:	bf00      	nop
 810c226:	e7fd      	b.n	810c224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 810c228:	4b3e      	ldr	r3, [pc, #248]	@ (810c324 <xPortStartScheduler+0x124>)
 810c22a:	681b      	ldr	r3, [r3, #0]
 810c22c:	4a3f      	ldr	r2, [pc, #252]	@ (810c32c <xPortStartScheduler+0x12c>)
 810c22e:	4293      	cmp	r3, r2
 810c230:	d10b      	bne.n	810c24a <xPortStartScheduler+0x4a>
	__asm volatile
 810c232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c236:	f383 8811 	msr	BASEPRI, r3
 810c23a:	f3bf 8f6f 	isb	sy
 810c23e:	f3bf 8f4f 	dsb	sy
 810c242:	613b      	str	r3, [r7, #16]
}
 810c244:	bf00      	nop
 810c246:	bf00      	nop
 810c248:	e7fd      	b.n	810c246 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810c24a:	4b39      	ldr	r3, [pc, #228]	@ (810c330 <xPortStartScheduler+0x130>)
 810c24c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810c24e:	697b      	ldr	r3, [r7, #20]
 810c250:	781b      	ldrb	r3, [r3, #0]
 810c252:	b2db      	uxtb	r3, r3
 810c254:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810c256:	697b      	ldr	r3, [r7, #20]
 810c258:	22ff      	movs	r2, #255	@ 0xff
 810c25a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810c25c:	697b      	ldr	r3, [r7, #20]
 810c25e:	781b      	ldrb	r3, [r3, #0]
 810c260:	b2db      	uxtb	r3, r3
 810c262:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810c264:	78fb      	ldrb	r3, [r7, #3]
 810c266:	b2db      	uxtb	r3, r3
 810c268:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810c26c:	b2da      	uxtb	r2, r3
 810c26e:	4b31      	ldr	r3, [pc, #196]	@ (810c334 <xPortStartScheduler+0x134>)
 810c270:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810c272:	4b31      	ldr	r3, [pc, #196]	@ (810c338 <xPortStartScheduler+0x138>)
 810c274:	2207      	movs	r2, #7
 810c276:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810c278:	e009      	b.n	810c28e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810c27a:	4b2f      	ldr	r3, [pc, #188]	@ (810c338 <xPortStartScheduler+0x138>)
 810c27c:	681b      	ldr	r3, [r3, #0]
 810c27e:	3b01      	subs	r3, #1
 810c280:	4a2d      	ldr	r2, [pc, #180]	@ (810c338 <xPortStartScheduler+0x138>)
 810c282:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810c284:	78fb      	ldrb	r3, [r7, #3]
 810c286:	b2db      	uxtb	r3, r3
 810c288:	005b      	lsls	r3, r3, #1
 810c28a:	b2db      	uxtb	r3, r3
 810c28c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810c28e:	78fb      	ldrb	r3, [r7, #3]
 810c290:	b2db      	uxtb	r3, r3
 810c292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810c296:	2b80      	cmp	r3, #128	@ 0x80
 810c298:	d0ef      	beq.n	810c27a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810c29a:	4b27      	ldr	r3, [pc, #156]	@ (810c338 <xPortStartScheduler+0x138>)
 810c29c:	681b      	ldr	r3, [r3, #0]
 810c29e:	f1c3 0307 	rsb	r3, r3, #7
 810c2a2:	2b04      	cmp	r3, #4
 810c2a4:	d00b      	beq.n	810c2be <xPortStartScheduler+0xbe>
	__asm volatile
 810c2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c2aa:	f383 8811 	msr	BASEPRI, r3
 810c2ae:	f3bf 8f6f 	isb	sy
 810c2b2:	f3bf 8f4f 	dsb	sy
 810c2b6:	60bb      	str	r3, [r7, #8]
}
 810c2b8:	bf00      	nop
 810c2ba:	bf00      	nop
 810c2bc:	e7fd      	b.n	810c2ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810c2be:	4b1e      	ldr	r3, [pc, #120]	@ (810c338 <xPortStartScheduler+0x138>)
 810c2c0:	681b      	ldr	r3, [r3, #0]
 810c2c2:	021b      	lsls	r3, r3, #8
 810c2c4:	4a1c      	ldr	r2, [pc, #112]	@ (810c338 <xPortStartScheduler+0x138>)
 810c2c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810c2c8:	4b1b      	ldr	r3, [pc, #108]	@ (810c338 <xPortStartScheduler+0x138>)
 810c2ca:	681b      	ldr	r3, [r3, #0]
 810c2cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 810c2d0:	4a19      	ldr	r2, [pc, #100]	@ (810c338 <xPortStartScheduler+0x138>)
 810c2d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810c2d4:	687b      	ldr	r3, [r7, #4]
 810c2d6:	b2da      	uxtb	r2, r3
 810c2d8:	697b      	ldr	r3, [r7, #20]
 810c2da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810c2dc:	4b17      	ldr	r3, [pc, #92]	@ (810c33c <xPortStartScheduler+0x13c>)
 810c2de:	681b      	ldr	r3, [r3, #0]
 810c2e0:	4a16      	ldr	r2, [pc, #88]	@ (810c33c <xPortStartScheduler+0x13c>)
 810c2e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810c2e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810c2e8:	4b14      	ldr	r3, [pc, #80]	@ (810c33c <xPortStartScheduler+0x13c>)
 810c2ea:	681b      	ldr	r3, [r3, #0]
 810c2ec:	4a13      	ldr	r2, [pc, #76]	@ (810c33c <xPortStartScheduler+0x13c>)
 810c2ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 810c2f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810c2f4:	f000 f8da 	bl	810c4ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810c2f8:	4b11      	ldr	r3, [pc, #68]	@ (810c340 <xPortStartScheduler+0x140>)
 810c2fa:	2200      	movs	r2, #0
 810c2fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810c2fe:	f000 f8f9 	bl	810c4f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810c302:	4b10      	ldr	r3, [pc, #64]	@ (810c344 <xPortStartScheduler+0x144>)
 810c304:	681b      	ldr	r3, [r3, #0]
 810c306:	4a0f      	ldr	r2, [pc, #60]	@ (810c344 <xPortStartScheduler+0x144>)
 810c308:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 810c30c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810c30e:	f7ff ff63 	bl	810c1d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810c312:	f001 f9ef 	bl	810d6f4 <vTaskSwitchContext>
	prvTaskExitError();
 810c316:	f7ff ff1d 	bl	810c154 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810c31a:	2300      	movs	r3, #0
}
 810c31c:	4618      	mov	r0, r3
 810c31e:	3718      	adds	r7, #24
 810c320:	46bd      	mov	sp, r7
 810c322:	bd80      	pop	{r7, pc}
 810c324:	e000ed00 	.word	0xe000ed00
 810c328:	410fc271 	.word	0x410fc271
 810c32c:	410fc270 	.word	0x410fc270
 810c330:	e000e400 	.word	0xe000e400
 810c334:	10004934 	.word	0x10004934
 810c338:	10004938 	.word	0x10004938
 810c33c:	e000ed20 	.word	0xe000ed20
 810c340:	10000064 	.word	0x10000064
 810c344:	e000ef34 	.word	0xe000ef34

0810c348 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810c348:	b480      	push	{r7}
 810c34a:	b083      	sub	sp, #12
 810c34c:	af00      	add	r7, sp, #0
	__asm volatile
 810c34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c352:	f383 8811 	msr	BASEPRI, r3
 810c356:	f3bf 8f6f 	isb	sy
 810c35a:	f3bf 8f4f 	dsb	sy
 810c35e:	607b      	str	r3, [r7, #4]
}
 810c360:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810c362:	4b10      	ldr	r3, [pc, #64]	@ (810c3a4 <vPortEnterCritical+0x5c>)
 810c364:	681b      	ldr	r3, [r3, #0]
 810c366:	3301      	adds	r3, #1
 810c368:	4a0e      	ldr	r2, [pc, #56]	@ (810c3a4 <vPortEnterCritical+0x5c>)
 810c36a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810c36c:	4b0d      	ldr	r3, [pc, #52]	@ (810c3a4 <vPortEnterCritical+0x5c>)
 810c36e:	681b      	ldr	r3, [r3, #0]
 810c370:	2b01      	cmp	r3, #1
 810c372:	d110      	bne.n	810c396 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810c374:	4b0c      	ldr	r3, [pc, #48]	@ (810c3a8 <vPortEnterCritical+0x60>)
 810c376:	681b      	ldr	r3, [r3, #0]
 810c378:	b2db      	uxtb	r3, r3
 810c37a:	2b00      	cmp	r3, #0
 810c37c:	d00b      	beq.n	810c396 <vPortEnterCritical+0x4e>
	__asm volatile
 810c37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c382:	f383 8811 	msr	BASEPRI, r3
 810c386:	f3bf 8f6f 	isb	sy
 810c38a:	f3bf 8f4f 	dsb	sy
 810c38e:	603b      	str	r3, [r7, #0]
}
 810c390:	bf00      	nop
 810c392:	bf00      	nop
 810c394:	e7fd      	b.n	810c392 <vPortEnterCritical+0x4a>
	}
}
 810c396:	bf00      	nop
 810c398:	370c      	adds	r7, #12
 810c39a:	46bd      	mov	sp, r7
 810c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c3a0:	4770      	bx	lr
 810c3a2:	bf00      	nop
 810c3a4:	10000064 	.word	0x10000064
 810c3a8:	e000ed04 	.word	0xe000ed04

0810c3ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810c3ac:	b480      	push	{r7}
 810c3ae:	b083      	sub	sp, #12
 810c3b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810c3b2:	4b12      	ldr	r3, [pc, #72]	@ (810c3fc <vPortExitCritical+0x50>)
 810c3b4:	681b      	ldr	r3, [r3, #0]
 810c3b6:	2b00      	cmp	r3, #0
 810c3b8:	d10b      	bne.n	810c3d2 <vPortExitCritical+0x26>
	__asm volatile
 810c3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c3be:	f383 8811 	msr	BASEPRI, r3
 810c3c2:	f3bf 8f6f 	isb	sy
 810c3c6:	f3bf 8f4f 	dsb	sy
 810c3ca:	607b      	str	r3, [r7, #4]
}
 810c3cc:	bf00      	nop
 810c3ce:	bf00      	nop
 810c3d0:	e7fd      	b.n	810c3ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 810c3d2:	4b0a      	ldr	r3, [pc, #40]	@ (810c3fc <vPortExitCritical+0x50>)
 810c3d4:	681b      	ldr	r3, [r3, #0]
 810c3d6:	3b01      	subs	r3, #1
 810c3d8:	4a08      	ldr	r2, [pc, #32]	@ (810c3fc <vPortExitCritical+0x50>)
 810c3da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810c3dc:	4b07      	ldr	r3, [pc, #28]	@ (810c3fc <vPortExitCritical+0x50>)
 810c3de:	681b      	ldr	r3, [r3, #0]
 810c3e0:	2b00      	cmp	r3, #0
 810c3e2:	d105      	bne.n	810c3f0 <vPortExitCritical+0x44>
 810c3e4:	2300      	movs	r3, #0
 810c3e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 810c3e8:	683b      	ldr	r3, [r7, #0]
 810c3ea:	f383 8811 	msr	BASEPRI, r3
}
 810c3ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 810c3f0:	bf00      	nop
 810c3f2:	370c      	adds	r7, #12
 810c3f4:	46bd      	mov	sp, r7
 810c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c3fa:	4770      	bx	lr
 810c3fc:	10000064 	.word	0x10000064

0810c400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810c400:	f3ef 8009 	mrs	r0, PSP
 810c404:	f3bf 8f6f 	isb	sy
 810c408:	4b15      	ldr	r3, [pc, #84]	@ (810c460 <pxCurrentTCBConst>)
 810c40a:	681a      	ldr	r2, [r3, #0]
 810c40c:	f01e 0f10 	tst.w	lr, #16
 810c410:	bf08      	it	eq
 810c412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810c416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c41a:	6010      	str	r0, [r2, #0]
 810c41c:	e92d 0009 	stmdb	sp!, {r0, r3}
 810c420:	f04f 0050 	mov.w	r0, #80	@ 0x50
 810c424:	f380 8811 	msr	BASEPRI, r0
 810c428:	f3bf 8f4f 	dsb	sy
 810c42c:	f3bf 8f6f 	isb	sy
 810c430:	f001 f960 	bl	810d6f4 <vTaskSwitchContext>
 810c434:	f04f 0000 	mov.w	r0, #0
 810c438:	f380 8811 	msr	BASEPRI, r0
 810c43c:	bc09      	pop	{r0, r3}
 810c43e:	6819      	ldr	r1, [r3, #0]
 810c440:	6808      	ldr	r0, [r1, #0]
 810c442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c446:	f01e 0f10 	tst.w	lr, #16
 810c44a:	bf08      	it	eq
 810c44c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810c450:	f380 8809 	msr	PSP, r0
 810c454:	f3bf 8f6f 	isb	sy
 810c458:	4770      	bx	lr
 810c45a:	bf00      	nop
 810c45c:	f3af 8000 	nop.w

0810c460 <pxCurrentTCBConst>:
 810c460:	1000497c 	.word	0x1000497c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810c464:	bf00      	nop
 810c466:	bf00      	nop

0810c468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 810c468:	b580      	push	{r7, lr}
 810c46a:	b082      	sub	sp, #8
 810c46c:	af00      	add	r7, sp, #0
	__asm volatile
 810c46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c472:	f383 8811 	msr	BASEPRI, r3
 810c476:	f3bf 8f6f 	isb	sy
 810c47a:	f3bf 8f4f 	dsb	sy
 810c47e:	607b      	str	r3, [r7, #4]
}
 810c480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 810c482:	f001 f87d 	bl	810d580 <xTaskIncrementTick>
 810c486:	4603      	mov	r3, r0
 810c488:	2b00      	cmp	r3, #0
 810c48a:	d003      	beq.n	810c494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810c48c:	4b06      	ldr	r3, [pc, #24]	@ (810c4a8 <xPortSysTickHandler+0x40>)
 810c48e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c492:	601a      	str	r2, [r3, #0]
 810c494:	2300      	movs	r3, #0
 810c496:	603b      	str	r3, [r7, #0]
	__asm volatile
 810c498:	683b      	ldr	r3, [r7, #0]
 810c49a:	f383 8811 	msr	BASEPRI, r3
}
 810c49e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 810c4a0:	bf00      	nop
 810c4a2:	3708      	adds	r7, #8
 810c4a4:	46bd      	mov	sp, r7
 810c4a6:	bd80      	pop	{r7, pc}
 810c4a8:	e000ed04 	.word	0xe000ed04

0810c4ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810c4ac:	b480      	push	{r7}
 810c4ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810c4b0:	4b0b      	ldr	r3, [pc, #44]	@ (810c4e0 <vPortSetupTimerInterrupt+0x34>)
 810c4b2:	2200      	movs	r2, #0
 810c4b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810c4b6:	4b0b      	ldr	r3, [pc, #44]	@ (810c4e4 <vPortSetupTimerInterrupt+0x38>)
 810c4b8:	2200      	movs	r2, #0
 810c4ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810c4bc:	4b0a      	ldr	r3, [pc, #40]	@ (810c4e8 <vPortSetupTimerInterrupt+0x3c>)
 810c4be:	681b      	ldr	r3, [r3, #0]
 810c4c0:	4a0a      	ldr	r2, [pc, #40]	@ (810c4ec <vPortSetupTimerInterrupt+0x40>)
 810c4c2:	fba2 2303 	umull	r2, r3, r2, r3
 810c4c6:	099b      	lsrs	r3, r3, #6
 810c4c8:	4a09      	ldr	r2, [pc, #36]	@ (810c4f0 <vPortSetupTimerInterrupt+0x44>)
 810c4ca:	3b01      	subs	r3, #1
 810c4cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810c4ce:	4b04      	ldr	r3, [pc, #16]	@ (810c4e0 <vPortSetupTimerInterrupt+0x34>)
 810c4d0:	2207      	movs	r2, #7
 810c4d2:	601a      	str	r2, [r3, #0]
}
 810c4d4:	bf00      	nop
 810c4d6:	46bd      	mov	sp, r7
 810c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c4dc:	4770      	bx	lr
 810c4de:	bf00      	nop
 810c4e0:	e000e010 	.word	0xe000e010
 810c4e4:	e000e018 	.word	0xe000e018
 810c4e8:	10000004 	.word	0x10000004
 810c4ec:	10624dd3 	.word	0x10624dd3
 810c4f0:	e000e014 	.word	0xe000e014

0810c4f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810c4f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 810c504 <vPortEnableVFP+0x10>
 810c4f8:	6801      	ldr	r1, [r0, #0]
 810c4fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810c4fe:	6001      	str	r1, [r0, #0]
 810c500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810c502:	bf00      	nop
 810c504:	e000ed88 	.word	0xe000ed88

0810c508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810c508:	b480      	push	{r7}
 810c50a:	b085      	sub	sp, #20
 810c50c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810c50e:	f3ef 8305 	mrs	r3, IPSR
 810c512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810c514:	68fb      	ldr	r3, [r7, #12]
 810c516:	2b0f      	cmp	r3, #15
 810c518:	d915      	bls.n	810c546 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810c51a:	4a18      	ldr	r2, [pc, #96]	@ (810c57c <vPortValidateInterruptPriority+0x74>)
 810c51c:	68fb      	ldr	r3, [r7, #12]
 810c51e:	4413      	add	r3, r2
 810c520:	781b      	ldrb	r3, [r3, #0]
 810c522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810c524:	4b16      	ldr	r3, [pc, #88]	@ (810c580 <vPortValidateInterruptPriority+0x78>)
 810c526:	781b      	ldrb	r3, [r3, #0]
 810c528:	7afa      	ldrb	r2, [r7, #11]
 810c52a:	429a      	cmp	r2, r3
 810c52c:	d20b      	bcs.n	810c546 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 810c52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c532:	f383 8811 	msr	BASEPRI, r3
 810c536:	f3bf 8f6f 	isb	sy
 810c53a:	f3bf 8f4f 	dsb	sy
 810c53e:	607b      	str	r3, [r7, #4]
}
 810c540:	bf00      	nop
 810c542:	bf00      	nop
 810c544:	e7fd      	b.n	810c542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810c546:	4b0f      	ldr	r3, [pc, #60]	@ (810c584 <vPortValidateInterruptPriority+0x7c>)
 810c548:	681b      	ldr	r3, [r3, #0]
 810c54a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810c54e:	4b0e      	ldr	r3, [pc, #56]	@ (810c588 <vPortValidateInterruptPriority+0x80>)
 810c550:	681b      	ldr	r3, [r3, #0]
 810c552:	429a      	cmp	r2, r3
 810c554:	d90b      	bls.n	810c56e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 810c556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c55a:	f383 8811 	msr	BASEPRI, r3
 810c55e:	f3bf 8f6f 	isb	sy
 810c562:	f3bf 8f4f 	dsb	sy
 810c566:	603b      	str	r3, [r7, #0]
}
 810c568:	bf00      	nop
 810c56a:	bf00      	nop
 810c56c:	e7fd      	b.n	810c56a <vPortValidateInterruptPriority+0x62>
	}
 810c56e:	bf00      	nop
 810c570:	3714      	adds	r7, #20
 810c572:	46bd      	mov	sp, r7
 810c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c578:	4770      	bx	lr
 810c57a:	bf00      	nop
 810c57c:	e000e3f0 	.word	0xe000e3f0
 810c580:	10004934 	.word	0x10004934
 810c584:	e000ed0c 	.word	0xe000ed0c
 810c588:	10004938 	.word	0x10004938

0810c58c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810c58c:	b580      	push	{r7, lr}
 810c58e:	b084      	sub	sp, #16
 810c590:	af00      	add	r7, sp, #0
 810c592:	6078      	str	r0, [r7, #4]
 810c594:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810c596:	687b      	ldr	r3, [r7, #4]
 810c598:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810c59a:	68fb      	ldr	r3, [r7, #12]
 810c59c:	2b00      	cmp	r3, #0
 810c59e:	d10b      	bne.n	810c5b8 <xQueueGenericReset+0x2c>
	__asm volatile
 810c5a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c5a4:	f383 8811 	msr	BASEPRI, r3
 810c5a8:	f3bf 8f6f 	isb	sy
 810c5ac:	f3bf 8f4f 	dsb	sy
 810c5b0:	60bb      	str	r3, [r7, #8]
}
 810c5b2:	bf00      	nop
 810c5b4:	bf00      	nop
 810c5b6:	e7fd      	b.n	810c5b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 810c5b8:	f7ff fec6 	bl	810c348 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810c5bc:	68fb      	ldr	r3, [r7, #12]
 810c5be:	681a      	ldr	r2, [r3, #0]
 810c5c0:	68fb      	ldr	r3, [r7, #12]
 810c5c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810c5c4:	68f9      	ldr	r1, [r7, #12]
 810c5c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810c5c8:	fb01 f303 	mul.w	r3, r1, r3
 810c5cc:	441a      	add	r2, r3
 810c5ce:	68fb      	ldr	r3, [r7, #12]
 810c5d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810c5d2:	68fb      	ldr	r3, [r7, #12]
 810c5d4:	2200      	movs	r2, #0
 810c5d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810c5d8:	68fb      	ldr	r3, [r7, #12]
 810c5da:	681a      	ldr	r2, [r3, #0]
 810c5dc:	68fb      	ldr	r3, [r7, #12]
 810c5de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810c5e0:	68fb      	ldr	r3, [r7, #12]
 810c5e2:	681a      	ldr	r2, [r3, #0]
 810c5e4:	68fb      	ldr	r3, [r7, #12]
 810c5e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810c5e8:	3b01      	subs	r3, #1
 810c5ea:	68f9      	ldr	r1, [r7, #12]
 810c5ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810c5ee:	fb01 f303 	mul.w	r3, r1, r3
 810c5f2:	441a      	add	r2, r3
 810c5f4:	68fb      	ldr	r3, [r7, #12]
 810c5f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810c5f8:	68fb      	ldr	r3, [r7, #12]
 810c5fa:	22ff      	movs	r2, #255	@ 0xff
 810c5fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810c600:	68fb      	ldr	r3, [r7, #12]
 810c602:	22ff      	movs	r2, #255	@ 0xff
 810c604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 810c608:	683b      	ldr	r3, [r7, #0]
 810c60a:	2b00      	cmp	r3, #0
 810c60c:	d114      	bne.n	810c638 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810c60e:	68fb      	ldr	r3, [r7, #12]
 810c610:	691b      	ldr	r3, [r3, #16]
 810c612:	2b00      	cmp	r3, #0
 810c614:	d01a      	beq.n	810c64c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810c616:	68fb      	ldr	r3, [r7, #12]
 810c618:	3310      	adds	r3, #16
 810c61a:	4618      	mov	r0, r3
 810c61c:	f001 f91a 	bl	810d854 <xTaskRemoveFromEventList>
 810c620:	4603      	mov	r3, r0
 810c622:	2b00      	cmp	r3, #0
 810c624:	d012      	beq.n	810c64c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810c626:	4b0d      	ldr	r3, [pc, #52]	@ (810c65c <xQueueGenericReset+0xd0>)
 810c628:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c62c:	601a      	str	r2, [r3, #0]
 810c62e:	f3bf 8f4f 	dsb	sy
 810c632:	f3bf 8f6f 	isb	sy
 810c636:	e009      	b.n	810c64c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810c638:	68fb      	ldr	r3, [r7, #12]
 810c63a:	3310      	adds	r3, #16
 810c63c:	4618      	mov	r0, r3
 810c63e:	f7ff fca1 	bl	810bf84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810c642:	68fb      	ldr	r3, [r7, #12]
 810c644:	3324      	adds	r3, #36	@ 0x24
 810c646:	4618      	mov	r0, r3
 810c648:	f7ff fc9c 	bl	810bf84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810c64c:	f7ff feae 	bl	810c3ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810c650:	2301      	movs	r3, #1
}
 810c652:	4618      	mov	r0, r3
 810c654:	3710      	adds	r7, #16
 810c656:	46bd      	mov	sp, r7
 810c658:	bd80      	pop	{r7, pc}
 810c65a:	bf00      	nop
 810c65c:	e000ed04 	.word	0xe000ed04

0810c660 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810c660:	b580      	push	{r7, lr}
 810c662:	b08e      	sub	sp, #56	@ 0x38
 810c664:	af02      	add	r7, sp, #8
 810c666:	60f8      	str	r0, [r7, #12]
 810c668:	60b9      	str	r1, [r7, #8]
 810c66a:	607a      	str	r2, [r7, #4]
 810c66c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810c66e:	68fb      	ldr	r3, [r7, #12]
 810c670:	2b00      	cmp	r3, #0
 810c672:	d10b      	bne.n	810c68c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 810c674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c678:	f383 8811 	msr	BASEPRI, r3
 810c67c:	f3bf 8f6f 	isb	sy
 810c680:	f3bf 8f4f 	dsb	sy
 810c684:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810c686:	bf00      	nop
 810c688:	bf00      	nop
 810c68a:	e7fd      	b.n	810c688 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810c68c:	683b      	ldr	r3, [r7, #0]
 810c68e:	2b00      	cmp	r3, #0
 810c690:	d10b      	bne.n	810c6aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 810c692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c696:	f383 8811 	msr	BASEPRI, r3
 810c69a:	f3bf 8f6f 	isb	sy
 810c69e:	f3bf 8f4f 	dsb	sy
 810c6a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810c6a4:	bf00      	nop
 810c6a6:	bf00      	nop
 810c6a8:	e7fd      	b.n	810c6a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810c6aa:	687b      	ldr	r3, [r7, #4]
 810c6ac:	2b00      	cmp	r3, #0
 810c6ae:	d002      	beq.n	810c6b6 <xQueueGenericCreateStatic+0x56>
 810c6b0:	68bb      	ldr	r3, [r7, #8]
 810c6b2:	2b00      	cmp	r3, #0
 810c6b4:	d001      	beq.n	810c6ba <xQueueGenericCreateStatic+0x5a>
 810c6b6:	2301      	movs	r3, #1
 810c6b8:	e000      	b.n	810c6bc <xQueueGenericCreateStatic+0x5c>
 810c6ba:	2300      	movs	r3, #0
 810c6bc:	2b00      	cmp	r3, #0
 810c6be:	d10b      	bne.n	810c6d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 810c6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c6c4:	f383 8811 	msr	BASEPRI, r3
 810c6c8:	f3bf 8f6f 	isb	sy
 810c6cc:	f3bf 8f4f 	dsb	sy
 810c6d0:	623b      	str	r3, [r7, #32]
}
 810c6d2:	bf00      	nop
 810c6d4:	bf00      	nop
 810c6d6:	e7fd      	b.n	810c6d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810c6d8:	687b      	ldr	r3, [r7, #4]
 810c6da:	2b00      	cmp	r3, #0
 810c6dc:	d102      	bne.n	810c6e4 <xQueueGenericCreateStatic+0x84>
 810c6de:	68bb      	ldr	r3, [r7, #8]
 810c6e0:	2b00      	cmp	r3, #0
 810c6e2:	d101      	bne.n	810c6e8 <xQueueGenericCreateStatic+0x88>
 810c6e4:	2301      	movs	r3, #1
 810c6e6:	e000      	b.n	810c6ea <xQueueGenericCreateStatic+0x8a>
 810c6e8:	2300      	movs	r3, #0
 810c6ea:	2b00      	cmp	r3, #0
 810c6ec:	d10b      	bne.n	810c706 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 810c6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c6f2:	f383 8811 	msr	BASEPRI, r3
 810c6f6:	f3bf 8f6f 	isb	sy
 810c6fa:	f3bf 8f4f 	dsb	sy
 810c6fe:	61fb      	str	r3, [r7, #28]
}
 810c700:	bf00      	nop
 810c702:	bf00      	nop
 810c704:	e7fd      	b.n	810c702 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810c706:	2350      	movs	r3, #80	@ 0x50
 810c708:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810c70a:	697b      	ldr	r3, [r7, #20]
 810c70c:	2b50      	cmp	r3, #80	@ 0x50
 810c70e:	d00b      	beq.n	810c728 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 810c710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c714:	f383 8811 	msr	BASEPRI, r3
 810c718:	f3bf 8f6f 	isb	sy
 810c71c:	f3bf 8f4f 	dsb	sy
 810c720:	61bb      	str	r3, [r7, #24]
}
 810c722:	bf00      	nop
 810c724:	bf00      	nop
 810c726:	e7fd      	b.n	810c724 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810c728:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810c72a:	683b      	ldr	r3, [r7, #0]
 810c72c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 810c72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c730:	2b00      	cmp	r3, #0
 810c732:	d00d      	beq.n	810c750 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810c734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c736:	2201      	movs	r2, #1
 810c738:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810c73c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 810c740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c742:	9300      	str	r3, [sp, #0]
 810c744:	4613      	mov	r3, r2
 810c746:	687a      	ldr	r2, [r7, #4]
 810c748:	68b9      	ldr	r1, [r7, #8]
 810c74a:	68f8      	ldr	r0, [r7, #12]
 810c74c:	f000 f805 	bl	810c75a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810c750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 810c752:	4618      	mov	r0, r3
 810c754:	3730      	adds	r7, #48	@ 0x30
 810c756:	46bd      	mov	sp, r7
 810c758:	bd80      	pop	{r7, pc}

0810c75a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810c75a:	b580      	push	{r7, lr}
 810c75c:	b084      	sub	sp, #16
 810c75e:	af00      	add	r7, sp, #0
 810c760:	60f8      	str	r0, [r7, #12]
 810c762:	60b9      	str	r1, [r7, #8]
 810c764:	607a      	str	r2, [r7, #4]
 810c766:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810c768:	68bb      	ldr	r3, [r7, #8]
 810c76a:	2b00      	cmp	r3, #0
 810c76c:	d103      	bne.n	810c776 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810c76e:	69bb      	ldr	r3, [r7, #24]
 810c770:	69ba      	ldr	r2, [r7, #24]
 810c772:	601a      	str	r2, [r3, #0]
 810c774:	e002      	b.n	810c77c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810c776:	69bb      	ldr	r3, [r7, #24]
 810c778:	687a      	ldr	r2, [r7, #4]
 810c77a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810c77c:	69bb      	ldr	r3, [r7, #24]
 810c77e:	68fa      	ldr	r2, [r7, #12]
 810c780:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810c782:	69bb      	ldr	r3, [r7, #24]
 810c784:	68ba      	ldr	r2, [r7, #8]
 810c786:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810c788:	2101      	movs	r1, #1
 810c78a:	69b8      	ldr	r0, [r7, #24]
 810c78c:	f7ff fefe 	bl	810c58c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810c790:	69bb      	ldr	r3, [r7, #24]
 810c792:	78fa      	ldrb	r2, [r7, #3]
 810c794:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810c798:	bf00      	nop
 810c79a:	3710      	adds	r7, #16
 810c79c:	46bd      	mov	sp, r7
 810c79e:	bd80      	pop	{r7, pc}

0810c7a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810c7a0:	b580      	push	{r7, lr}
 810c7a2:	b08e      	sub	sp, #56	@ 0x38
 810c7a4:	af00      	add	r7, sp, #0
 810c7a6:	60f8      	str	r0, [r7, #12]
 810c7a8:	60b9      	str	r1, [r7, #8]
 810c7aa:	607a      	str	r2, [r7, #4]
 810c7ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810c7ae:	2300      	movs	r3, #0
 810c7b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810c7b2:	68fb      	ldr	r3, [r7, #12]
 810c7b4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810c7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c7b8:	2b00      	cmp	r3, #0
 810c7ba:	d10b      	bne.n	810c7d4 <xQueueGenericSend+0x34>
	__asm volatile
 810c7bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c7c0:	f383 8811 	msr	BASEPRI, r3
 810c7c4:	f3bf 8f6f 	isb	sy
 810c7c8:	f3bf 8f4f 	dsb	sy
 810c7cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810c7ce:	bf00      	nop
 810c7d0:	bf00      	nop
 810c7d2:	e7fd      	b.n	810c7d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810c7d4:	68bb      	ldr	r3, [r7, #8]
 810c7d6:	2b00      	cmp	r3, #0
 810c7d8:	d103      	bne.n	810c7e2 <xQueueGenericSend+0x42>
 810c7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c7dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c7de:	2b00      	cmp	r3, #0
 810c7e0:	d101      	bne.n	810c7e6 <xQueueGenericSend+0x46>
 810c7e2:	2301      	movs	r3, #1
 810c7e4:	e000      	b.n	810c7e8 <xQueueGenericSend+0x48>
 810c7e6:	2300      	movs	r3, #0
 810c7e8:	2b00      	cmp	r3, #0
 810c7ea:	d10b      	bne.n	810c804 <xQueueGenericSend+0x64>
	__asm volatile
 810c7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c7f0:	f383 8811 	msr	BASEPRI, r3
 810c7f4:	f3bf 8f6f 	isb	sy
 810c7f8:	f3bf 8f4f 	dsb	sy
 810c7fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810c7fe:	bf00      	nop
 810c800:	bf00      	nop
 810c802:	e7fd      	b.n	810c800 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810c804:	683b      	ldr	r3, [r7, #0]
 810c806:	2b02      	cmp	r3, #2
 810c808:	d103      	bne.n	810c812 <xQueueGenericSend+0x72>
 810c80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c80c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810c80e:	2b01      	cmp	r3, #1
 810c810:	d101      	bne.n	810c816 <xQueueGenericSend+0x76>
 810c812:	2301      	movs	r3, #1
 810c814:	e000      	b.n	810c818 <xQueueGenericSend+0x78>
 810c816:	2300      	movs	r3, #0
 810c818:	2b00      	cmp	r3, #0
 810c81a:	d10b      	bne.n	810c834 <xQueueGenericSend+0x94>
	__asm volatile
 810c81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c820:	f383 8811 	msr	BASEPRI, r3
 810c824:	f3bf 8f6f 	isb	sy
 810c828:	f3bf 8f4f 	dsb	sy
 810c82c:	623b      	str	r3, [r7, #32]
}
 810c82e:	bf00      	nop
 810c830:	bf00      	nop
 810c832:	e7fd      	b.n	810c830 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810c834:	f001 f9ce 	bl	810dbd4 <xTaskGetSchedulerState>
 810c838:	4603      	mov	r3, r0
 810c83a:	2b00      	cmp	r3, #0
 810c83c:	d102      	bne.n	810c844 <xQueueGenericSend+0xa4>
 810c83e:	687b      	ldr	r3, [r7, #4]
 810c840:	2b00      	cmp	r3, #0
 810c842:	d101      	bne.n	810c848 <xQueueGenericSend+0xa8>
 810c844:	2301      	movs	r3, #1
 810c846:	e000      	b.n	810c84a <xQueueGenericSend+0xaa>
 810c848:	2300      	movs	r3, #0
 810c84a:	2b00      	cmp	r3, #0
 810c84c:	d10b      	bne.n	810c866 <xQueueGenericSend+0xc6>
	__asm volatile
 810c84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c852:	f383 8811 	msr	BASEPRI, r3
 810c856:	f3bf 8f6f 	isb	sy
 810c85a:	f3bf 8f4f 	dsb	sy
 810c85e:	61fb      	str	r3, [r7, #28]
}
 810c860:	bf00      	nop
 810c862:	bf00      	nop
 810c864:	e7fd      	b.n	810c862 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810c866:	f7ff fd6f 	bl	810c348 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810c86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c86c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810c86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810c872:	429a      	cmp	r2, r3
 810c874:	d302      	bcc.n	810c87c <xQueueGenericSend+0xdc>
 810c876:	683b      	ldr	r3, [r7, #0]
 810c878:	2b02      	cmp	r3, #2
 810c87a:	d129      	bne.n	810c8d0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810c87c:	683a      	ldr	r2, [r7, #0]
 810c87e:	68b9      	ldr	r1, [r7, #8]
 810c880:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810c882:	f000 fa0f 	bl	810cca4 <prvCopyDataToQueue>
 810c886:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810c888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c88a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c88c:	2b00      	cmp	r3, #0
 810c88e:	d010      	beq.n	810c8b2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810c890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c892:	3324      	adds	r3, #36	@ 0x24
 810c894:	4618      	mov	r0, r3
 810c896:	f000 ffdd 	bl	810d854 <xTaskRemoveFromEventList>
 810c89a:	4603      	mov	r3, r0
 810c89c:	2b00      	cmp	r3, #0
 810c89e:	d013      	beq.n	810c8c8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810c8a0:	4b3f      	ldr	r3, [pc, #252]	@ (810c9a0 <xQueueGenericSend+0x200>)
 810c8a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c8a6:	601a      	str	r2, [r3, #0]
 810c8a8:	f3bf 8f4f 	dsb	sy
 810c8ac:	f3bf 8f6f 	isb	sy
 810c8b0:	e00a      	b.n	810c8c8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810c8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810c8b4:	2b00      	cmp	r3, #0
 810c8b6:	d007      	beq.n	810c8c8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810c8b8:	4b39      	ldr	r3, [pc, #228]	@ (810c9a0 <xQueueGenericSend+0x200>)
 810c8ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c8be:	601a      	str	r2, [r3, #0]
 810c8c0:	f3bf 8f4f 	dsb	sy
 810c8c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810c8c8:	f7ff fd70 	bl	810c3ac <vPortExitCritical>
				return pdPASS;
 810c8cc:	2301      	movs	r3, #1
 810c8ce:	e063      	b.n	810c998 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810c8d0:	687b      	ldr	r3, [r7, #4]
 810c8d2:	2b00      	cmp	r3, #0
 810c8d4:	d103      	bne.n	810c8de <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810c8d6:	f7ff fd69 	bl	810c3ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810c8da:	2300      	movs	r3, #0
 810c8dc:	e05c      	b.n	810c998 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810c8de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c8e0:	2b00      	cmp	r3, #0
 810c8e2:	d106      	bne.n	810c8f2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810c8e4:	f107 0314 	add.w	r3, r7, #20
 810c8e8:	4618      	mov	r0, r3
 810c8ea:	f001 f817 	bl	810d91c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810c8ee:	2301      	movs	r3, #1
 810c8f0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810c8f2:	f7ff fd5b 	bl	810c3ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810c8f6:	f000 fd87 	bl	810d408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810c8fa:	f7ff fd25 	bl	810c348 <vPortEnterCritical>
 810c8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c900:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810c904:	b25b      	sxtb	r3, r3
 810c906:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c90a:	d103      	bne.n	810c914 <xQueueGenericSend+0x174>
 810c90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c90e:	2200      	movs	r2, #0
 810c910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810c914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c916:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810c91a:	b25b      	sxtb	r3, r3
 810c91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c920:	d103      	bne.n	810c92a <xQueueGenericSend+0x18a>
 810c922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c924:	2200      	movs	r2, #0
 810c926:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810c92a:	f7ff fd3f 	bl	810c3ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810c92e:	1d3a      	adds	r2, r7, #4
 810c930:	f107 0314 	add.w	r3, r7, #20
 810c934:	4611      	mov	r1, r2
 810c936:	4618      	mov	r0, r3
 810c938:	f001 f806 	bl	810d948 <xTaskCheckForTimeOut>
 810c93c:	4603      	mov	r3, r0
 810c93e:	2b00      	cmp	r3, #0
 810c940:	d124      	bne.n	810c98c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810c942:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810c944:	f000 faa6 	bl	810ce94 <prvIsQueueFull>
 810c948:	4603      	mov	r3, r0
 810c94a:	2b00      	cmp	r3, #0
 810c94c:	d018      	beq.n	810c980 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810c94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c950:	3310      	adds	r3, #16
 810c952:	687a      	ldr	r2, [r7, #4]
 810c954:	4611      	mov	r1, r2
 810c956:	4618      	mov	r0, r3
 810c958:	f000 ff2a 	bl	810d7b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810c95c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810c95e:	f000 fa31 	bl	810cdc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810c962:	f000 fd5f 	bl	810d424 <xTaskResumeAll>
 810c966:	4603      	mov	r3, r0
 810c968:	2b00      	cmp	r3, #0
 810c96a:	f47f af7c 	bne.w	810c866 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 810c96e:	4b0c      	ldr	r3, [pc, #48]	@ (810c9a0 <xQueueGenericSend+0x200>)
 810c970:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c974:	601a      	str	r2, [r3, #0]
 810c976:	f3bf 8f4f 	dsb	sy
 810c97a:	f3bf 8f6f 	isb	sy
 810c97e:	e772      	b.n	810c866 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810c980:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810c982:	f000 fa1f 	bl	810cdc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810c986:	f000 fd4d 	bl	810d424 <xTaskResumeAll>
 810c98a:	e76c      	b.n	810c866 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810c98c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810c98e:	f000 fa19 	bl	810cdc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810c992:	f000 fd47 	bl	810d424 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810c996:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810c998:	4618      	mov	r0, r3
 810c99a:	3738      	adds	r7, #56	@ 0x38
 810c99c:	46bd      	mov	sp, r7
 810c99e:	bd80      	pop	{r7, pc}
 810c9a0:	e000ed04 	.word	0xe000ed04

0810c9a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810c9a4:	b580      	push	{r7, lr}
 810c9a6:	b090      	sub	sp, #64	@ 0x40
 810c9a8:	af00      	add	r7, sp, #0
 810c9aa:	60f8      	str	r0, [r7, #12]
 810c9ac:	60b9      	str	r1, [r7, #8]
 810c9ae:	607a      	str	r2, [r7, #4]
 810c9b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810c9b2:	68fb      	ldr	r3, [r7, #12]
 810c9b4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 810c9b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c9b8:	2b00      	cmp	r3, #0
 810c9ba:	d10b      	bne.n	810c9d4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 810c9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c9c0:	f383 8811 	msr	BASEPRI, r3
 810c9c4:	f3bf 8f6f 	isb	sy
 810c9c8:	f3bf 8f4f 	dsb	sy
 810c9cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810c9ce:	bf00      	nop
 810c9d0:	bf00      	nop
 810c9d2:	e7fd      	b.n	810c9d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810c9d4:	68bb      	ldr	r3, [r7, #8]
 810c9d6:	2b00      	cmp	r3, #0
 810c9d8:	d103      	bne.n	810c9e2 <xQueueGenericSendFromISR+0x3e>
 810c9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c9dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810c9de:	2b00      	cmp	r3, #0
 810c9e0:	d101      	bne.n	810c9e6 <xQueueGenericSendFromISR+0x42>
 810c9e2:	2301      	movs	r3, #1
 810c9e4:	e000      	b.n	810c9e8 <xQueueGenericSendFromISR+0x44>
 810c9e6:	2300      	movs	r3, #0
 810c9e8:	2b00      	cmp	r3, #0
 810c9ea:	d10b      	bne.n	810ca04 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 810c9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c9f0:	f383 8811 	msr	BASEPRI, r3
 810c9f4:	f3bf 8f6f 	isb	sy
 810c9f8:	f3bf 8f4f 	dsb	sy
 810c9fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810c9fe:	bf00      	nop
 810ca00:	bf00      	nop
 810ca02:	e7fd      	b.n	810ca00 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810ca04:	683b      	ldr	r3, [r7, #0]
 810ca06:	2b02      	cmp	r3, #2
 810ca08:	d103      	bne.n	810ca12 <xQueueGenericSendFromISR+0x6e>
 810ca0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ca0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ca0e:	2b01      	cmp	r3, #1
 810ca10:	d101      	bne.n	810ca16 <xQueueGenericSendFromISR+0x72>
 810ca12:	2301      	movs	r3, #1
 810ca14:	e000      	b.n	810ca18 <xQueueGenericSendFromISR+0x74>
 810ca16:	2300      	movs	r3, #0
 810ca18:	2b00      	cmp	r3, #0
 810ca1a:	d10b      	bne.n	810ca34 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 810ca1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ca20:	f383 8811 	msr	BASEPRI, r3
 810ca24:	f3bf 8f6f 	isb	sy
 810ca28:	f3bf 8f4f 	dsb	sy
 810ca2c:	623b      	str	r3, [r7, #32]
}
 810ca2e:	bf00      	nop
 810ca30:	bf00      	nop
 810ca32:	e7fd      	b.n	810ca30 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810ca34:	f7ff fd68 	bl	810c508 <vPortValidateInterruptPriority>
	__asm volatile
 810ca38:	f3ef 8211 	mrs	r2, BASEPRI
 810ca3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ca40:	f383 8811 	msr	BASEPRI, r3
 810ca44:	f3bf 8f6f 	isb	sy
 810ca48:	f3bf 8f4f 	dsb	sy
 810ca4c:	61fa      	str	r2, [r7, #28]
 810ca4e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 810ca50:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810ca52:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810ca54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ca56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810ca58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ca5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ca5c:	429a      	cmp	r2, r3
 810ca5e:	d302      	bcc.n	810ca66 <xQueueGenericSendFromISR+0xc2>
 810ca60:	683b      	ldr	r3, [r7, #0]
 810ca62:	2b02      	cmp	r3, #2
 810ca64:	d12f      	bne.n	810cac6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810ca66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ca68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810ca6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 810ca70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ca72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810ca74:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810ca76:	683a      	ldr	r2, [r7, #0]
 810ca78:	68b9      	ldr	r1, [r7, #8]
 810ca7a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810ca7c:	f000 f912 	bl	810cca4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810ca80:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 810ca84:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ca88:	d112      	bne.n	810cab0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810ca8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ca8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ca8e:	2b00      	cmp	r3, #0
 810ca90:	d016      	beq.n	810cac0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810ca92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ca94:	3324      	adds	r3, #36	@ 0x24
 810ca96:	4618      	mov	r0, r3
 810ca98:	f000 fedc 	bl	810d854 <xTaskRemoveFromEventList>
 810ca9c:	4603      	mov	r3, r0
 810ca9e:	2b00      	cmp	r3, #0
 810caa0:	d00e      	beq.n	810cac0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810caa2:	687b      	ldr	r3, [r7, #4]
 810caa4:	2b00      	cmp	r3, #0
 810caa6:	d00b      	beq.n	810cac0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810caa8:	687b      	ldr	r3, [r7, #4]
 810caaa:	2201      	movs	r2, #1
 810caac:	601a      	str	r2, [r3, #0]
 810caae:	e007      	b.n	810cac0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810cab0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810cab4:	3301      	adds	r3, #1
 810cab6:	b2db      	uxtb	r3, r3
 810cab8:	b25a      	sxtb	r2, r3
 810caba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cabc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 810cac0:	2301      	movs	r3, #1
 810cac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 810cac4:	e001      	b.n	810caca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810cac6:	2300      	movs	r3, #0
 810cac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810caca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810cacc:	617b      	str	r3, [r7, #20]
	__asm volatile
 810cace:	697b      	ldr	r3, [r7, #20]
 810cad0:	f383 8811 	msr	BASEPRI, r3
}
 810cad4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810cad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810cad8:	4618      	mov	r0, r3
 810cada:	3740      	adds	r7, #64	@ 0x40
 810cadc:	46bd      	mov	sp, r7
 810cade:	bd80      	pop	{r7, pc}

0810cae0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810cae0:	b580      	push	{r7, lr}
 810cae2:	b08c      	sub	sp, #48	@ 0x30
 810cae4:	af00      	add	r7, sp, #0
 810cae6:	60f8      	str	r0, [r7, #12]
 810cae8:	60b9      	str	r1, [r7, #8]
 810caea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810caec:	2300      	movs	r3, #0
 810caee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810caf0:	68fb      	ldr	r3, [r7, #12]
 810caf2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810caf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810caf6:	2b00      	cmp	r3, #0
 810caf8:	d10b      	bne.n	810cb12 <xQueueReceive+0x32>
	__asm volatile
 810cafa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cafe:	f383 8811 	msr	BASEPRI, r3
 810cb02:	f3bf 8f6f 	isb	sy
 810cb06:	f3bf 8f4f 	dsb	sy
 810cb0a:	623b      	str	r3, [r7, #32]
}
 810cb0c:	bf00      	nop
 810cb0e:	bf00      	nop
 810cb10:	e7fd      	b.n	810cb0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810cb12:	68bb      	ldr	r3, [r7, #8]
 810cb14:	2b00      	cmp	r3, #0
 810cb16:	d103      	bne.n	810cb20 <xQueueReceive+0x40>
 810cb18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cb1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810cb1c:	2b00      	cmp	r3, #0
 810cb1e:	d101      	bne.n	810cb24 <xQueueReceive+0x44>
 810cb20:	2301      	movs	r3, #1
 810cb22:	e000      	b.n	810cb26 <xQueueReceive+0x46>
 810cb24:	2300      	movs	r3, #0
 810cb26:	2b00      	cmp	r3, #0
 810cb28:	d10b      	bne.n	810cb42 <xQueueReceive+0x62>
	__asm volatile
 810cb2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cb2e:	f383 8811 	msr	BASEPRI, r3
 810cb32:	f3bf 8f6f 	isb	sy
 810cb36:	f3bf 8f4f 	dsb	sy
 810cb3a:	61fb      	str	r3, [r7, #28]
}
 810cb3c:	bf00      	nop
 810cb3e:	bf00      	nop
 810cb40:	e7fd      	b.n	810cb3e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810cb42:	f001 f847 	bl	810dbd4 <xTaskGetSchedulerState>
 810cb46:	4603      	mov	r3, r0
 810cb48:	2b00      	cmp	r3, #0
 810cb4a:	d102      	bne.n	810cb52 <xQueueReceive+0x72>
 810cb4c:	687b      	ldr	r3, [r7, #4]
 810cb4e:	2b00      	cmp	r3, #0
 810cb50:	d101      	bne.n	810cb56 <xQueueReceive+0x76>
 810cb52:	2301      	movs	r3, #1
 810cb54:	e000      	b.n	810cb58 <xQueueReceive+0x78>
 810cb56:	2300      	movs	r3, #0
 810cb58:	2b00      	cmp	r3, #0
 810cb5a:	d10b      	bne.n	810cb74 <xQueueReceive+0x94>
	__asm volatile
 810cb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cb60:	f383 8811 	msr	BASEPRI, r3
 810cb64:	f3bf 8f6f 	isb	sy
 810cb68:	f3bf 8f4f 	dsb	sy
 810cb6c:	61bb      	str	r3, [r7, #24]
}
 810cb6e:	bf00      	nop
 810cb70:	bf00      	nop
 810cb72:	e7fd      	b.n	810cb70 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810cb74:	f7ff fbe8 	bl	810c348 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810cb78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cb7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810cb7c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810cb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cb80:	2b00      	cmp	r3, #0
 810cb82:	d01f      	beq.n	810cbc4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810cb84:	68b9      	ldr	r1, [r7, #8]
 810cb86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810cb88:	f000 f8f6 	bl	810cd78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810cb8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cb8e:	1e5a      	subs	r2, r3, #1
 810cb90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cb92:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810cb94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cb96:	691b      	ldr	r3, [r3, #16]
 810cb98:	2b00      	cmp	r3, #0
 810cb9a:	d00f      	beq.n	810cbbc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810cb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cb9e:	3310      	adds	r3, #16
 810cba0:	4618      	mov	r0, r3
 810cba2:	f000 fe57 	bl	810d854 <xTaskRemoveFromEventList>
 810cba6:	4603      	mov	r3, r0
 810cba8:	2b00      	cmp	r3, #0
 810cbaa:	d007      	beq.n	810cbbc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810cbac:	4b3c      	ldr	r3, [pc, #240]	@ (810cca0 <xQueueReceive+0x1c0>)
 810cbae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810cbb2:	601a      	str	r2, [r3, #0]
 810cbb4:	f3bf 8f4f 	dsb	sy
 810cbb8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810cbbc:	f7ff fbf6 	bl	810c3ac <vPortExitCritical>
				return pdPASS;
 810cbc0:	2301      	movs	r3, #1
 810cbc2:	e069      	b.n	810cc98 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810cbc4:	687b      	ldr	r3, [r7, #4]
 810cbc6:	2b00      	cmp	r3, #0
 810cbc8:	d103      	bne.n	810cbd2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810cbca:	f7ff fbef 	bl	810c3ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810cbce:	2300      	movs	r3, #0
 810cbd0:	e062      	b.n	810cc98 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810cbd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cbd4:	2b00      	cmp	r3, #0
 810cbd6:	d106      	bne.n	810cbe6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810cbd8:	f107 0310 	add.w	r3, r7, #16
 810cbdc:	4618      	mov	r0, r3
 810cbde:	f000 fe9d 	bl	810d91c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810cbe2:	2301      	movs	r3, #1
 810cbe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810cbe6:	f7ff fbe1 	bl	810c3ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810cbea:	f000 fc0d 	bl	810d408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810cbee:	f7ff fbab 	bl	810c348 <vPortEnterCritical>
 810cbf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cbf4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810cbf8:	b25b      	sxtb	r3, r3
 810cbfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cbfe:	d103      	bne.n	810cc08 <xQueueReceive+0x128>
 810cc00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cc02:	2200      	movs	r2, #0
 810cc04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810cc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cc0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810cc0e:	b25b      	sxtb	r3, r3
 810cc10:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cc14:	d103      	bne.n	810cc1e <xQueueReceive+0x13e>
 810cc16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cc18:	2200      	movs	r2, #0
 810cc1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810cc1e:	f7ff fbc5 	bl	810c3ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810cc22:	1d3a      	adds	r2, r7, #4
 810cc24:	f107 0310 	add.w	r3, r7, #16
 810cc28:	4611      	mov	r1, r2
 810cc2a:	4618      	mov	r0, r3
 810cc2c:	f000 fe8c 	bl	810d948 <xTaskCheckForTimeOut>
 810cc30:	4603      	mov	r3, r0
 810cc32:	2b00      	cmp	r3, #0
 810cc34:	d123      	bne.n	810cc7e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810cc36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810cc38:	f000 f916 	bl	810ce68 <prvIsQueueEmpty>
 810cc3c:	4603      	mov	r3, r0
 810cc3e:	2b00      	cmp	r3, #0
 810cc40:	d017      	beq.n	810cc72 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810cc42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810cc44:	3324      	adds	r3, #36	@ 0x24
 810cc46:	687a      	ldr	r2, [r7, #4]
 810cc48:	4611      	mov	r1, r2
 810cc4a:	4618      	mov	r0, r3
 810cc4c:	f000 fdb0 	bl	810d7b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810cc50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810cc52:	f000 f8b7 	bl	810cdc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810cc56:	f000 fbe5 	bl	810d424 <xTaskResumeAll>
 810cc5a:	4603      	mov	r3, r0
 810cc5c:	2b00      	cmp	r3, #0
 810cc5e:	d189      	bne.n	810cb74 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 810cc60:	4b0f      	ldr	r3, [pc, #60]	@ (810cca0 <xQueueReceive+0x1c0>)
 810cc62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810cc66:	601a      	str	r2, [r3, #0]
 810cc68:	f3bf 8f4f 	dsb	sy
 810cc6c:	f3bf 8f6f 	isb	sy
 810cc70:	e780      	b.n	810cb74 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810cc72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810cc74:	f000 f8a6 	bl	810cdc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810cc78:	f000 fbd4 	bl	810d424 <xTaskResumeAll>
 810cc7c:	e77a      	b.n	810cb74 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810cc7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810cc80:	f000 f8a0 	bl	810cdc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810cc84:	f000 fbce 	bl	810d424 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810cc88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810cc8a:	f000 f8ed 	bl	810ce68 <prvIsQueueEmpty>
 810cc8e:	4603      	mov	r3, r0
 810cc90:	2b00      	cmp	r3, #0
 810cc92:	f43f af6f 	beq.w	810cb74 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810cc96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810cc98:	4618      	mov	r0, r3
 810cc9a:	3730      	adds	r7, #48	@ 0x30
 810cc9c:	46bd      	mov	sp, r7
 810cc9e:	bd80      	pop	{r7, pc}
 810cca0:	e000ed04 	.word	0xe000ed04

0810cca4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810cca4:	b580      	push	{r7, lr}
 810cca6:	b086      	sub	sp, #24
 810cca8:	af00      	add	r7, sp, #0
 810ccaa:	60f8      	str	r0, [r7, #12]
 810ccac:	60b9      	str	r1, [r7, #8]
 810ccae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810ccb0:	2300      	movs	r3, #0
 810ccb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810ccb4:	68fb      	ldr	r3, [r7, #12]
 810ccb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810ccb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810ccba:	68fb      	ldr	r3, [r7, #12]
 810ccbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810ccbe:	2b00      	cmp	r3, #0
 810ccc0:	d10d      	bne.n	810ccde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810ccc2:	68fb      	ldr	r3, [r7, #12]
 810ccc4:	681b      	ldr	r3, [r3, #0]
 810ccc6:	2b00      	cmp	r3, #0
 810ccc8:	d14d      	bne.n	810cd66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810ccca:	68fb      	ldr	r3, [r7, #12]
 810cccc:	689b      	ldr	r3, [r3, #8]
 810ccce:	4618      	mov	r0, r3
 810ccd0:	f000 ff9e 	bl	810dc10 <xTaskPriorityDisinherit>
 810ccd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810ccd6:	68fb      	ldr	r3, [r7, #12]
 810ccd8:	2200      	movs	r2, #0
 810ccda:	609a      	str	r2, [r3, #8]
 810ccdc:	e043      	b.n	810cd66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810ccde:	687b      	ldr	r3, [r7, #4]
 810cce0:	2b00      	cmp	r3, #0
 810cce2:	d119      	bne.n	810cd18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810cce4:	68fb      	ldr	r3, [r7, #12]
 810cce6:	6858      	ldr	r0, [r3, #4]
 810cce8:	68fb      	ldr	r3, [r7, #12]
 810ccea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810ccec:	461a      	mov	r2, r3
 810ccee:	68b9      	ldr	r1, [r7, #8]
 810ccf0:	f003 fbfe 	bl	81104f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810ccf4:	68fb      	ldr	r3, [r7, #12]
 810ccf6:	685a      	ldr	r2, [r3, #4]
 810ccf8:	68fb      	ldr	r3, [r7, #12]
 810ccfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810ccfc:	441a      	add	r2, r3
 810ccfe:	68fb      	ldr	r3, [r7, #12]
 810cd00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810cd02:	68fb      	ldr	r3, [r7, #12]
 810cd04:	685a      	ldr	r2, [r3, #4]
 810cd06:	68fb      	ldr	r3, [r7, #12]
 810cd08:	689b      	ldr	r3, [r3, #8]
 810cd0a:	429a      	cmp	r2, r3
 810cd0c:	d32b      	bcc.n	810cd66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810cd0e:	68fb      	ldr	r3, [r7, #12]
 810cd10:	681a      	ldr	r2, [r3, #0]
 810cd12:	68fb      	ldr	r3, [r7, #12]
 810cd14:	605a      	str	r2, [r3, #4]
 810cd16:	e026      	b.n	810cd66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810cd18:	68fb      	ldr	r3, [r7, #12]
 810cd1a:	68d8      	ldr	r0, [r3, #12]
 810cd1c:	68fb      	ldr	r3, [r7, #12]
 810cd1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810cd20:	461a      	mov	r2, r3
 810cd22:	68b9      	ldr	r1, [r7, #8]
 810cd24:	f003 fbe4 	bl	81104f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810cd28:	68fb      	ldr	r3, [r7, #12]
 810cd2a:	68da      	ldr	r2, [r3, #12]
 810cd2c:	68fb      	ldr	r3, [r7, #12]
 810cd2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810cd30:	425b      	negs	r3, r3
 810cd32:	441a      	add	r2, r3
 810cd34:	68fb      	ldr	r3, [r7, #12]
 810cd36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810cd38:	68fb      	ldr	r3, [r7, #12]
 810cd3a:	68da      	ldr	r2, [r3, #12]
 810cd3c:	68fb      	ldr	r3, [r7, #12]
 810cd3e:	681b      	ldr	r3, [r3, #0]
 810cd40:	429a      	cmp	r2, r3
 810cd42:	d207      	bcs.n	810cd54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810cd44:	68fb      	ldr	r3, [r7, #12]
 810cd46:	689a      	ldr	r2, [r3, #8]
 810cd48:	68fb      	ldr	r3, [r7, #12]
 810cd4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810cd4c:	425b      	negs	r3, r3
 810cd4e:	441a      	add	r2, r3
 810cd50:	68fb      	ldr	r3, [r7, #12]
 810cd52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810cd54:	687b      	ldr	r3, [r7, #4]
 810cd56:	2b02      	cmp	r3, #2
 810cd58:	d105      	bne.n	810cd66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810cd5a:	693b      	ldr	r3, [r7, #16]
 810cd5c:	2b00      	cmp	r3, #0
 810cd5e:	d002      	beq.n	810cd66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810cd60:	693b      	ldr	r3, [r7, #16]
 810cd62:	3b01      	subs	r3, #1
 810cd64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810cd66:	693b      	ldr	r3, [r7, #16]
 810cd68:	1c5a      	adds	r2, r3, #1
 810cd6a:	68fb      	ldr	r3, [r7, #12]
 810cd6c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 810cd6e:	697b      	ldr	r3, [r7, #20]
}
 810cd70:	4618      	mov	r0, r3
 810cd72:	3718      	adds	r7, #24
 810cd74:	46bd      	mov	sp, r7
 810cd76:	bd80      	pop	{r7, pc}

0810cd78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810cd78:	b580      	push	{r7, lr}
 810cd7a:	b082      	sub	sp, #8
 810cd7c:	af00      	add	r7, sp, #0
 810cd7e:	6078      	str	r0, [r7, #4]
 810cd80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810cd82:	687b      	ldr	r3, [r7, #4]
 810cd84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810cd86:	2b00      	cmp	r3, #0
 810cd88:	d018      	beq.n	810cdbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810cd8a:	687b      	ldr	r3, [r7, #4]
 810cd8c:	68da      	ldr	r2, [r3, #12]
 810cd8e:	687b      	ldr	r3, [r7, #4]
 810cd90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810cd92:	441a      	add	r2, r3
 810cd94:	687b      	ldr	r3, [r7, #4]
 810cd96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810cd98:	687b      	ldr	r3, [r7, #4]
 810cd9a:	68da      	ldr	r2, [r3, #12]
 810cd9c:	687b      	ldr	r3, [r7, #4]
 810cd9e:	689b      	ldr	r3, [r3, #8]
 810cda0:	429a      	cmp	r2, r3
 810cda2:	d303      	bcc.n	810cdac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810cda4:	687b      	ldr	r3, [r7, #4]
 810cda6:	681a      	ldr	r2, [r3, #0]
 810cda8:	687b      	ldr	r3, [r7, #4]
 810cdaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810cdac:	687b      	ldr	r3, [r7, #4]
 810cdae:	68d9      	ldr	r1, [r3, #12]
 810cdb0:	687b      	ldr	r3, [r7, #4]
 810cdb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810cdb4:	461a      	mov	r2, r3
 810cdb6:	6838      	ldr	r0, [r7, #0]
 810cdb8:	f003 fb9a 	bl	81104f0 <memcpy>
	}
}
 810cdbc:	bf00      	nop
 810cdbe:	3708      	adds	r7, #8
 810cdc0:	46bd      	mov	sp, r7
 810cdc2:	bd80      	pop	{r7, pc}

0810cdc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810cdc4:	b580      	push	{r7, lr}
 810cdc6:	b084      	sub	sp, #16
 810cdc8:	af00      	add	r7, sp, #0
 810cdca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810cdcc:	f7ff fabc 	bl	810c348 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810cdd0:	687b      	ldr	r3, [r7, #4]
 810cdd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810cdd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810cdd8:	e011      	b.n	810cdfe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810cdda:	687b      	ldr	r3, [r7, #4]
 810cddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810cdde:	2b00      	cmp	r3, #0
 810cde0:	d012      	beq.n	810ce08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810cde2:	687b      	ldr	r3, [r7, #4]
 810cde4:	3324      	adds	r3, #36	@ 0x24
 810cde6:	4618      	mov	r0, r3
 810cde8:	f000 fd34 	bl	810d854 <xTaskRemoveFromEventList>
 810cdec:	4603      	mov	r3, r0
 810cdee:	2b00      	cmp	r3, #0
 810cdf0:	d001      	beq.n	810cdf6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810cdf2:	f000 fe0d 	bl	810da10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810cdf6:	7bfb      	ldrb	r3, [r7, #15]
 810cdf8:	3b01      	subs	r3, #1
 810cdfa:	b2db      	uxtb	r3, r3
 810cdfc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810cdfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810ce02:	2b00      	cmp	r3, #0
 810ce04:	dce9      	bgt.n	810cdda <prvUnlockQueue+0x16>
 810ce06:	e000      	b.n	810ce0a <prvUnlockQueue+0x46>
					break;
 810ce08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810ce0a:	687b      	ldr	r3, [r7, #4]
 810ce0c:	22ff      	movs	r2, #255	@ 0xff
 810ce0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 810ce12:	f7ff facb 	bl	810c3ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810ce16:	f7ff fa97 	bl	810c348 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810ce1a:	687b      	ldr	r3, [r7, #4]
 810ce1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810ce20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810ce22:	e011      	b.n	810ce48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810ce24:	687b      	ldr	r3, [r7, #4]
 810ce26:	691b      	ldr	r3, [r3, #16]
 810ce28:	2b00      	cmp	r3, #0
 810ce2a:	d012      	beq.n	810ce52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810ce2c:	687b      	ldr	r3, [r7, #4]
 810ce2e:	3310      	adds	r3, #16
 810ce30:	4618      	mov	r0, r3
 810ce32:	f000 fd0f 	bl	810d854 <xTaskRemoveFromEventList>
 810ce36:	4603      	mov	r3, r0
 810ce38:	2b00      	cmp	r3, #0
 810ce3a:	d001      	beq.n	810ce40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810ce3c:	f000 fde8 	bl	810da10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810ce40:	7bbb      	ldrb	r3, [r7, #14]
 810ce42:	3b01      	subs	r3, #1
 810ce44:	b2db      	uxtb	r3, r3
 810ce46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810ce48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810ce4c:	2b00      	cmp	r3, #0
 810ce4e:	dce9      	bgt.n	810ce24 <prvUnlockQueue+0x60>
 810ce50:	e000      	b.n	810ce54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810ce52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810ce54:	687b      	ldr	r3, [r7, #4]
 810ce56:	22ff      	movs	r2, #255	@ 0xff
 810ce58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 810ce5c:	f7ff faa6 	bl	810c3ac <vPortExitCritical>
}
 810ce60:	bf00      	nop
 810ce62:	3710      	adds	r7, #16
 810ce64:	46bd      	mov	sp, r7
 810ce66:	bd80      	pop	{r7, pc}

0810ce68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810ce68:	b580      	push	{r7, lr}
 810ce6a:	b084      	sub	sp, #16
 810ce6c:	af00      	add	r7, sp, #0
 810ce6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810ce70:	f7ff fa6a 	bl	810c348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810ce74:	687b      	ldr	r3, [r7, #4]
 810ce76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810ce78:	2b00      	cmp	r3, #0
 810ce7a:	d102      	bne.n	810ce82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810ce7c:	2301      	movs	r3, #1
 810ce7e:	60fb      	str	r3, [r7, #12]
 810ce80:	e001      	b.n	810ce86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810ce82:	2300      	movs	r3, #0
 810ce84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810ce86:	f7ff fa91 	bl	810c3ac <vPortExitCritical>

	return xReturn;
 810ce8a:	68fb      	ldr	r3, [r7, #12]
}
 810ce8c:	4618      	mov	r0, r3
 810ce8e:	3710      	adds	r7, #16
 810ce90:	46bd      	mov	sp, r7
 810ce92:	bd80      	pop	{r7, pc}

0810ce94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810ce94:	b580      	push	{r7, lr}
 810ce96:	b084      	sub	sp, #16
 810ce98:	af00      	add	r7, sp, #0
 810ce9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810ce9c:	f7ff fa54 	bl	810c348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810cea0:	687b      	ldr	r3, [r7, #4]
 810cea2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810cea4:	687b      	ldr	r3, [r7, #4]
 810cea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810cea8:	429a      	cmp	r2, r3
 810ceaa:	d102      	bne.n	810ceb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810ceac:	2301      	movs	r3, #1
 810ceae:	60fb      	str	r3, [r7, #12]
 810ceb0:	e001      	b.n	810ceb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810ceb2:	2300      	movs	r3, #0
 810ceb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810ceb6:	f7ff fa79 	bl	810c3ac <vPortExitCritical>

	return xReturn;
 810ceba:	68fb      	ldr	r3, [r7, #12]
}
 810cebc:	4618      	mov	r0, r3
 810cebe:	3710      	adds	r7, #16
 810cec0:	46bd      	mov	sp, r7
 810cec2:	bd80      	pop	{r7, pc}

0810cec4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810cec4:	b480      	push	{r7}
 810cec6:	b085      	sub	sp, #20
 810cec8:	af00      	add	r7, sp, #0
 810ceca:	6078      	str	r0, [r7, #4]
 810cecc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810cece:	2300      	movs	r3, #0
 810ced0:	60fb      	str	r3, [r7, #12]
 810ced2:	e014      	b.n	810cefe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810ced4:	4a0f      	ldr	r2, [pc, #60]	@ (810cf14 <vQueueAddToRegistry+0x50>)
 810ced6:	68fb      	ldr	r3, [r7, #12]
 810ced8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810cedc:	2b00      	cmp	r3, #0
 810cede:	d10b      	bne.n	810cef8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810cee0:	490c      	ldr	r1, [pc, #48]	@ (810cf14 <vQueueAddToRegistry+0x50>)
 810cee2:	68fb      	ldr	r3, [r7, #12]
 810cee4:	683a      	ldr	r2, [r7, #0]
 810cee6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810ceea:	4a0a      	ldr	r2, [pc, #40]	@ (810cf14 <vQueueAddToRegistry+0x50>)
 810ceec:	68fb      	ldr	r3, [r7, #12]
 810ceee:	00db      	lsls	r3, r3, #3
 810cef0:	4413      	add	r3, r2
 810cef2:	687a      	ldr	r2, [r7, #4]
 810cef4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810cef6:	e006      	b.n	810cf06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810cef8:	68fb      	ldr	r3, [r7, #12]
 810cefa:	3301      	adds	r3, #1
 810cefc:	60fb      	str	r3, [r7, #12]
 810cefe:	68fb      	ldr	r3, [r7, #12]
 810cf00:	2b07      	cmp	r3, #7
 810cf02:	d9e7      	bls.n	810ced4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810cf04:	bf00      	nop
 810cf06:	bf00      	nop
 810cf08:	3714      	adds	r7, #20
 810cf0a:	46bd      	mov	sp, r7
 810cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf10:	4770      	bx	lr
 810cf12:	bf00      	nop
 810cf14:	1000493c 	.word	0x1000493c

0810cf18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810cf18:	b580      	push	{r7, lr}
 810cf1a:	b086      	sub	sp, #24
 810cf1c:	af00      	add	r7, sp, #0
 810cf1e:	60f8      	str	r0, [r7, #12]
 810cf20:	60b9      	str	r1, [r7, #8]
 810cf22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810cf24:	68fb      	ldr	r3, [r7, #12]
 810cf26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810cf28:	f7ff fa0e 	bl	810c348 <vPortEnterCritical>
 810cf2c:	697b      	ldr	r3, [r7, #20]
 810cf2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810cf32:	b25b      	sxtb	r3, r3
 810cf34:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cf38:	d103      	bne.n	810cf42 <vQueueWaitForMessageRestricted+0x2a>
 810cf3a:	697b      	ldr	r3, [r7, #20]
 810cf3c:	2200      	movs	r2, #0
 810cf3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810cf42:	697b      	ldr	r3, [r7, #20]
 810cf44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810cf48:	b25b      	sxtb	r3, r3
 810cf4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cf4e:	d103      	bne.n	810cf58 <vQueueWaitForMessageRestricted+0x40>
 810cf50:	697b      	ldr	r3, [r7, #20]
 810cf52:	2200      	movs	r2, #0
 810cf54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810cf58:	f7ff fa28 	bl	810c3ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810cf5c:	697b      	ldr	r3, [r7, #20]
 810cf5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810cf60:	2b00      	cmp	r3, #0
 810cf62:	d106      	bne.n	810cf72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810cf64:	697b      	ldr	r3, [r7, #20]
 810cf66:	3324      	adds	r3, #36	@ 0x24
 810cf68:	687a      	ldr	r2, [r7, #4]
 810cf6a:	68b9      	ldr	r1, [r7, #8]
 810cf6c:	4618      	mov	r0, r3
 810cf6e:	f000 fc45 	bl	810d7fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810cf72:	6978      	ldr	r0, [r7, #20]
 810cf74:	f7ff ff26 	bl	810cdc4 <prvUnlockQueue>
	}
 810cf78:	bf00      	nop
 810cf7a:	3718      	adds	r7, #24
 810cf7c:	46bd      	mov	sp, r7
 810cf7e:	bd80      	pop	{r7, pc}

0810cf80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810cf80:	b580      	push	{r7, lr}
 810cf82:	b08e      	sub	sp, #56	@ 0x38
 810cf84:	af04      	add	r7, sp, #16
 810cf86:	60f8      	str	r0, [r7, #12]
 810cf88:	60b9      	str	r1, [r7, #8]
 810cf8a:	607a      	str	r2, [r7, #4]
 810cf8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810cf8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810cf90:	2b00      	cmp	r3, #0
 810cf92:	d10b      	bne.n	810cfac <xTaskCreateStatic+0x2c>
	__asm volatile
 810cf94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cf98:	f383 8811 	msr	BASEPRI, r3
 810cf9c:	f3bf 8f6f 	isb	sy
 810cfa0:	f3bf 8f4f 	dsb	sy
 810cfa4:	623b      	str	r3, [r7, #32]
}
 810cfa6:	bf00      	nop
 810cfa8:	bf00      	nop
 810cfaa:	e7fd      	b.n	810cfa8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810cfac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cfae:	2b00      	cmp	r3, #0
 810cfb0:	d10b      	bne.n	810cfca <xTaskCreateStatic+0x4a>
	__asm volatile
 810cfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cfb6:	f383 8811 	msr	BASEPRI, r3
 810cfba:	f3bf 8f6f 	isb	sy
 810cfbe:	f3bf 8f4f 	dsb	sy
 810cfc2:	61fb      	str	r3, [r7, #28]
}
 810cfc4:	bf00      	nop
 810cfc6:	bf00      	nop
 810cfc8:	e7fd      	b.n	810cfc6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810cfca:	235c      	movs	r3, #92	@ 0x5c
 810cfcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810cfce:	693b      	ldr	r3, [r7, #16]
 810cfd0:	2b5c      	cmp	r3, #92	@ 0x5c
 810cfd2:	d00b      	beq.n	810cfec <xTaskCreateStatic+0x6c>
	__asm volatile
 810cfd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cfd8:	f383 8811 	msr	BASEPRI, r3
 810cfdc:	f3bf 8f6f 	isb	sy
 810cfe0:	f3bf 8f4f 	dsb	sy
 810cfe4:	61bb      	str	r3, [r7, #24]
}
 810cfe6:	bf00      	nop
 810cfe8:	bf00      	nop
 810cfea:	e7fd      	b.n	810cfe8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810cfec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810cfee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cff0:	2b00      	cmp	r3, #0
 810cff2:	d01e      	beq.n	810d032 <xTaskCreateStatic+0xb2>
 810cff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810cff6:	2b00      	cmp	r3, #0
 810cff8:	d01b      	beq.n	810d032 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810cffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cffc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810cffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d000:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810d002:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810d004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d006:	2202      	movs	r2, #2
 810d008:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810d00c:	2300      	movs	r3, #0
 810d00e:	9303      	str	r3, [sp, #12]
 810d010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d012:	9302      	str	r3, [sp, #8]
 810d014:	f107 0314 	add.w	r3, r7, #20
 810d018:	9301      	str	r3, [sp, #4]
 810d01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d01c:	9300      	str	r3, [sp, #0]
 810d01e:	683b      	ldr	r3, [r7, #0]
 810d020:	687a      	ldr	r2, [r7, #4]
 810d022:	68b9      	ldr	r1, [r7, #8]
 810d024:	68f8      	ldr	r0, [r7, #12]
 810d026:	f000 f850 	bl	810d0ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810d02a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810d02c:	f000 f8de 	bl	810d1ec <prvAddNewTaskToReadyList>
 810d030:	e001      	b.n	810d036 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 810d032:	2300      	movs	r3, #0
 810d034:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810d036:	697b      	ldr	r3, [r7, #20]
	}
 810d038:	4618      	mov	r0, r3
 810d03a:	3728      	adds	r7, #40	@ 0x28
 810d03c:	46bd      	mov	sp, r7
 810d03e:	bd80      	pop	{r7, pc}

0810d040 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810d040:	b580      	push	{r7, lr}
 810d042:	b08c      	sub	sp, #48	@ 0x30
 810d044:	af04      	add	r7, sp, #16
 810d046:	60f8      	str	r0, [r7, #12]
 810d048:	60b9      	str	r1, [r7, #8]
 810d04a:	603b      	str	r3, [r7, #0]
 810d04c:	4613      	mov	r3, r2
 810d04e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810d050:	88fb      	ldrh	r3, [r7, #6]
 810d052:	009b      	lsls	r3, r3, #2
 810d054:	4618      	mov	r0, r3
 810d056:	f7fe fda7 	bl	810bba8 <pvPortMalloc>
 810d05a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810d05c:	697b      	ldr	r3, [r7, #20]
 810d05e:	2b00      	cmp	r3, #0
 810d060:	d00e      	beq.n	810d080 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810d062:	205c      	movs	r0, #92	@ 0x5c
 810d064:	f7fe fda0 	bl	810bba8 <pvPortMalloc>
 810d068:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810d06a:	69fb      	ldr	r3, [r7, #28]
 810d06c:	2b00      	cmp	r3, #0
 810d06e:	d003      	beq.n	810d078 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810d070:	69fb      	ldr	r3, [r7, #28]
 810d072:	697a      	ldr	r2, [r7, #20]
 810d074:	631a      	str	r2, [r3, #48]	@ 0x30
 810d076:	e005      	b.n	810d084 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810d078:	6978      	ldr	r0, [r7, #20]
 810d07a:	f7fe fe63 	bl	810bd44 <vPortFree>
 810d07e:	e001      	b.n	810d084 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810d080:	2300      	movs	r3, #0
 810d082:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810d084:	69fb      	ldr	r3, [r7, #28]
 810d086:	2b00      	cmp	r3, #0
 810d088:	d017      	beq.n	810d0ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810d08a:	69fb      	ldr	r3, [r7, #28]
 810d08c:	2200      	movs	r2, #0
 810d08e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810d092:	88fa      	ldrh	r2, [r7, #6]
 810d094:	2300      	movs	r3, #0
 810d096:	9303      	str	r3, [sp, #12]
 810d098:	69fb      	ldr	r3, [r7, #28]
 810d09a:	9302      	str	r3, [sp, #8]
 810d09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d09e:	9301      	str	r3, [sp, #4]
 810d0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d0a2:	9300      	str	r3, [sp, #0]
 810d0a4:	683b      	ldr	r3, [r7, #0]
 810d0a6:	68b9      	ldr	r1, [r7, #8]
 810d0a8:	68f8      	ldr	r0, [r7, #12]
 810d0aa:	f000 f80e 	bl	810d0ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810d0ae:	69f8      	ldr	r0, [r7, #28]
 810d0b0:	f000 f89c 	bl	810d1ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810d0b4:	2301      	movs	r3, #1
 810d0b6:	61bb      	str	r3, [r7, #24]
 810d0b8:	e002      	b.n	810d0c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810d0ba:	f04f 33ff 	mov.w	r3, #4294967295
 810d0be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810d0c0:	69bb      	ldr	r3, [r7, #24]
	}
 810d0c2:	4618      	mov	r0, r3
 810d0c4:	3720      	adds	r7, #32
 810d0c6:	46bd      	mov	sp, r7
 810d0c8:	bd80      	pop	{r7, pc}

0810d0ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810d0ca:	b580      	push	{r7, lr}
 810d0cc:	b088      	sub	sp, #32
 810d0ce:	af00      	add	r7, sp, #0
 810d0d0:	60f8      	str	r0, [r7, #12]
 810d0d2:	60b9      	str	r1, [r7, #8]
 810d0d4:	607a      	str	r2, [r7, #4]
 810d0d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810d0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d0da:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 810d0dc:	687b      	ldr	r3, [r7, #4]
 810d0de:	009b      	lsls	r3, r3, #2
 810d0e0:	461a      	mov	r2, r3
 810d0e2:	21a5      	movs	r1, #165	@ 0xa5
 810d0e4:	f003 f966 	bl	81103b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810d0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d0ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810d0ec:	687b      	ldr	r3, [r7, #4]
 810d0ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 810d0f2:	3b01      	subs	r3, #1
 810d0f4:	009b      	lsls	r3, r3, #2
 810d0f6:	4413      	add	r3, r2
 810d0f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810d0fa:	69bb      	ldr	r3, [r7, #24]
 810d0fc:	f023 0307 	bic.w	r3, r3, #7
 810d100:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810d102:	69bb      	ldr	r3, [r7, #24]
 810d104:	f003 0307 	and.w	r3, r3, #7
 810d108:	2b00      	cmp	r3, #0
 810d10a:	d00b      	beq.n	810d124 <prvInitialiseNewTask+0x5a>
	__asm volatile
 810d10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d110:	f383 8811 	msr	BASEPRI, r3
 810d114:	f3bf 8f6f 	isb	sy
 810d118:	f3bf 8f4f 	dsb	sy
 810d11c:	617b      	str	r3, [r7, #20]
}
 810d11e:	bf00      	nop
 810d120:	bf00      	nop
 810d122:	e7fd      	b.n	810d120 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810d124:	68bb      	ldr	r3, [r7, #8]
 810d126:	2b00      	cmp	r3, #0
 810d128:	d01f      	beq.n	810d16a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810d12a:	2300      	movs	r3, #0
 810d12c:	61fb      	str	r3, [r7, #28]
 810d12e:	e012      	b.n	810d156 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810d130:	68ba      	ldr	r2, [r7, #8]
 810d132:	69fb      	ldr	r3, [r7, #28]
 810d134:	4413      	add	r3, r2
 810d136:	7819      	ldrb	r1, [r3, #0]
 810d138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d13a:	69fb      	ldr	r3, [r7, #28]
 810d13c:	4413      	add	r3, r2
 810d13e:	3334      	adds	r3, #52	@ 0x34
 810d140:	460a      	mov	r2, r1
 810d142:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810d144:	68ba      	ldr	r2, [r7, #8]
 810d146:	69fb      	ldr	r3, [r7, #28]
 810d148:	4413      	add	r3, r2
 810d14a:	781b      	ldrb	r3, [r3, #0]
 810d14c:	2b00      	cmp	r3, #0
 810d14e:	d006      	beq.n	810d15e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810d150:	69fb      	ldr	r3, [r7, #28]
 810d152:	3301      	adds	r3, #1
 810d154:	61fb      	str	r3, [r7, #28]
 810d156:	69fb      	ldr	r3, [r7, #28]
 810d158:	2b0f      	cmp	r3, #15
 810d15a:	d9e9      	bls.n	810d130 <prvInitialiseNewTask+0x66>
 810d15c:	e000      	b.n	810d160 <prvInitialiseNewTask+0x96>
			{
				break;
 810d15e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810d160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d162:	2200      	movs	r2, #0
 810d164:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 810d168:	e003      	b.n	810d172 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810d16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d16c:	2200      	movs	r2, #0
 810d16e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810d172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d174:	2b37      	cmp	r3, #55	@ 0x37
 810d176:	d901      	bls.n	810d17c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810d178:	2337      	movs	r3, #55	@ 0x37
 810d17a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810d17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d17e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810d180:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810d182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d184:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810d186:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810d188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d18a:	2200      	movs	r2, #0
 810d18c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810d18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d190:	3304      	adds	r3, #4
 810d192:	4618      	mov	r0, r3
 810d194:	f7fe ff16 	bl	810bfc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810d198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d19a:	3318      	adds	r3, #24
 810d19c:	4618      	mov	r0, r3
 810d19e:	f7fe ff11 	bl	810bfc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810d1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d1a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d1a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810d1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d1aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810d1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d1b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810d1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d1b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d1b6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810d1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d1ba:	2200      	movs	r2, #0
 810d1bc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810d1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d1c0:	2200      	movs	r2, #0
 810d1c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810d1c6:	683a      	ldr	r2, [r7, #0]
 810d1c8:	68f9      	ldr	r1, [r7, #12]
 810d1ca:	69b8      	ldr	r0, [r7, #24]
 810d1cc:	f7fe ff8e 	bl	810c0ec <pxPortInitialiseStack>
 810d1d0:	4602      	mov	r2, r0
 810d1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d1d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810d1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d1d8:	2b00      	cmp	r3, #0
 810d1da:	d002      	beq.n	810d1e2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810d1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d1de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d1e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810d1e2:	bf00      	nop
 810d1e4:	3720      	adds	r7, #32
 810d1e6:	46bd      	mov	sp, r7
 810d1e8:	bd80      	pop	{r7, pc}
	...

0810d1ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810d1ec:	b580      	push	{r7, lr}
 810d1ee:	b082      	sub	sp, #8
 810d1f0:	af00      	add	r7, sp, #0
 810d1f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810d1f4:	f7ff f8a8 	bl	810c348 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810d1f8:	4b2d      	ldr	r3, [pc, #180]	@ (810d2b0 <prvAddNewTaskToReadyList+0xc4>)
 810d1fa:	681b      	ldr	r3, [r3, #0]
 810d1fc:	3301      	adds	r3, #1
 810d1fe:	4a2c      	ldr	r2, [pc, #176]	@ (810d2b0 <prvAddNewTaskToReadyList+0xc4>)
 810d200:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810d202:	4b2c      	ldr	r3, [pc, #176]	@ (810d2b4 <prvAddNewTaskToReadyList+0xc8>)
 810d204:	681b      	ldr	r3, [r3, #0]
 810d206:	2b00      	cmp	r3, #0
 810d208:	d109      	bne.n	810d21e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810d20a:	4a2a      	ldr	r2, [pc, #168]	@ (810d2b4 <prvAddNewTaskToReadyList+0xc8>)
 810d20c:	687b      	ldr	r3, [r7, #4]
 810d20e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810d210:	4b27      	ldr	r3, [pc, #156]	@ (810d2b0 <prvAddNewTaskToReadyList+0xc4>)
 810d212:	681b      	ldr	r3, [r3, #0]
 810d214:	2b01      	cmp	r3, #1
 810d216:	d110      	bne.n	810d23a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810d218:	f000 fc1e 	bl	810da58 <prvInitialiseTaskLists>
 810d21c:	e00d      	b.n	810d23a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810d21e:	4b26      	ldr	r3, [pc, #152]	@ (810d2b8 <prvAddNewTaskToReadyList+0xcc>)
 810d220:	681b      	ldr	r3, [r3, #0]
 810d222:	2b00      	cmp	r3, #0
 810d224:	d109      	bne.n	810d23a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810d226:	4b23      	ldr	r3, [pc, #140]	@ (810d2b4 <prvAddNewTaskToReadyList+0xc8>)
 810d228:	681b      	ldr	r3, [r3, #0]
 810d22a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d22c:	687b      	ldr	r3, [r7, #4]
 810d22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d230:	429a      	cmp	r2, r3
 810d232:	d802      	bhi.n	810d23a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810d234:	4a1f      	ldr	r2, [pc, #124]	@ (810d2b4 <prvAddNewTaskToReadyList+0xc8>)
 810d236:	687b      	ldr	r3, [r7, #4]
 810d238:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810d23a:	4b20      	ldr	r3, [pc, #128]	@ (810d2bc <prvAddNewTaskToReadyList+0xd0>)
 810d23c:	681b      	ldr	r3, [r3, #0]
 810d23e:	3301      	adds	r3, #1
 810d240:	4a1e      	ldr	r2, [pc, #120]	@ (810d2bc <prvAddNewTaskToReadyList+0xd0>)
 810d242:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810d244:	4b1d      	ldr	r3, [pc, #116]	@ (810d2bc <prvAddNewTaskToReadyList+0xd0>)
 810d246:	681a      	ldr	r2, [r3, #0]
 810d248:	687b      	ldr	r3, [r7, #4]
 810d24a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810d24c:	687b      	ldr	r3, [r7, #4]
 810d24e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d250:	4b1b      	ldr	r3, [pc, #108]	@ (810d2c0 <prvAddNewTaskToReadyList+0xd4>)
 810d252:	681b      	ldr	r3, [r3, #0]
 810d254:	429a      	cmp	r2, r3
 810d256:	d903      	bls.n	810d260 <prvAddNewTaskToReadyList+0x74>
 810d258:	687b      	ldr	r3, [r7, #4]
 810d25a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d25c:	4a18      	ldr	r2, [pc, #96]	@ (810d2c0 <prvAddNewTaskToReadyList+0xd4>)
 810d25e:	6013      	str	r3, [r2, #0]
 810d260:	687b      	ldr	r3, [r7, #4]
 810d262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d264:	4613      	mov	r3, r2
 810d266:	009b      	lsls	r3, r3, #2
 810d268:	4413      	add	r3, r2
 810d26a:	009b      	lsls	r3, r3, #2
 810d26c:	4a15      	ldr	r2, [pc, #84]	@ (810d2c4 <prvAddNewTaskToReadyList+0xd8>)
 810d26e:	441a      	add	r2, r3
 810d270:	687b      	ldr	r3, [r7, #4]
 810d272:	3304      	adds	r3, #4
 810d274:	4619      	mov	r1, r3
 810d276:	4610      	mov	r0, r2
 810d278:	f7fe feb1 	bl	810bfde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810d27c:	f7ff f896 	bl	810c3ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810d280:	4b0d      	ldr	r3, [pc, #52]	@ (810d2b8 <prvAddNewTaskToReadyList+0xcc>)
 810d282:	681b      	ldr	r3, [r3, #0]
 810d284:	2b00      	cmp	r3, #0
 810d286:	d00e      	beq.n	810d2a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810d288:	4b0a      	ldr	r3, [pc, #40]	@ (810d2b4 <prvAddNewTaskToReadyList+0xc8>)
 810d28a:	681b      	ldr	r3, [r3, #0]
 810d28c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d28e:	687b      	ldr	r3, [r7, #4]
 810d290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d292:	429a      	cmp	r2, r3
 810d294:	d207      	bcs.n	810d2a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810d296:	4b0c      	ldr	r3, [pc, #48]	@ (810d2c8 <prvAddNewTaskToReadyList+0xdc>)
 810d298:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d29c:	601a      	str	r2, [r3, #0]
 810d29e:	f3bf 8f4f 	dsb	sy
 810d2a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810d2a6:	bf00      	nop
 810d2a8:	3708      	adds	r7, #8
 810d2aa:	46bd      	mov	sp, r7
 810d2ac:	bd80      	pop	{r7, pc}
 810d2ae:	bf00      	nop
 810d2b0:	10004e50 	.word	0x10004e50
 810d2b4:	1000497c 	.word	0x1000497c
 810d2b8:	10004e5c 	.word	0x10004e5c
 810d2bc:	10004e6c 	.word	0x10004e6c
 810d2c0:	10004e58 	.word	0x10004e58
 810d2c4:	10004980 	.word	0x10004980
 810d2c8:	e000ed04 	.word	0xe000ed04

0810d2cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810d2cc:	b580      	push	{r7, lr}
 810d2ce:	b084      	sub	sp, #16
 810d2d0:	af00      	add	r7, sp, #0
 810d2d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810d2d4:	2300      	movs	r3, #0
 810d2d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810d2d8:	687b      	ldr	r3, [r7, #4]
 810d2da:	2b00      	cmp	r3, #0
 810d2dc:	d018      	beq.n	810d310 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810d2de:	4b14      	ldr	r3, [pc, #80]	@ (810d330 <vTaskDelay+0x64>)
 810d2e0:	681b      	ldr	r3, [r3, #0]
 810d2e2:	2b00      	cmp	r3, #0
 810d2e4:	d00b      	beq.n	810d2fe <vTaskDelay+0x32>
	__asm volatile
 810d2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d2ea:	f383 8811 	msr	BASEPRI, r3
 810d2ee:	f3bf 8f6f 	isb	sy
 810d2f2:	f3bf 8f4f 	dsb	sy
 810d2f6:	60bb      	str	r3, [r7, #8]
}
 810d2f8:	bf00      	nop
 810d2fa:	bf00      	nop
 810d2fc:	e7fd      	b.n	810d2fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810d2fe:	f000 f883 	bl	810d408 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810d302:	2100      	movs	r1, #0
 810d304:	6878      	ldr	r0, [r7, #4]
 810d306:	f000 fcf3 	bl	810dcf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810d30a:	f000 f88b 	bl	810d424 <xTaskResumeAll>
 810d30e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810d310:	68fb      	ldr	r3, [r7, #12]
 810d312:	2b00      	cmp	r3, #0
 810d314:	d107      	bne.n	810d326 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 810d316:	4b07      	ldr	r3, [pc, #28]	@ (810d334 <vTaskDelay+0x68>)
 810d318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d31c:	601a      	str	r2, [r3, #0]
 810d31e:	f3bf 8f4f 	dsb	sy
 810d322:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810d326:	bf00      	nop
 810d328:	3710      	adds	r7, #16
 810d32a:	46bd      	mov	sp, r7
 810d32c:	bd80      	pop	{r7, pc}
 810d32e:	bf00      	nop
 810d330:	10004e78 	.word	0x10004e78
 810d334:	e000ed04 	.word	0xe000ed04

0810d338 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810d338:	b580      	push	{r7, lr}
 810d33a:	b08a      	sub	sp, #40	@ 0x28
 810d33c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810d33e:	2300      	movs	r3, #0
 810d340:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810d342:	2300      	movs	r3, #0
 810d344:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810d346:	463a      	mov	r2, r7
 810d348:	1d39      	adds	r1, r7, #4
 810d34a:	f107 0308 	add.w	r3, r7, #8
 810d34e:	4618      	mov	r0, r3
 810d350:	f7fe fbf6 	bl	810bb40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810d354:	6839      	ldr	r1, [r7, #0]
 810d356:	687b      	ldr	r3, [r7, #4]
 810d358:	68ba      	ldr	r2, [r7, #8]
 810d35a:	9202      	str	r2, [sp, #8]
 810d35c:	9301      	str	r3, [sp, #4]
 810d35e:	2300      	movs	r3, #0
 810d360:	9300      	str	r3, [sp, #0]
 810d362:	2300      	movs	r3, #0
 810d364:	460a      	mov	r2, r1
 810d366:	4922      	ldr	r1, [pc, #136]	@ (810d3f0 <vTaskStartScheduler+0xb8>)
 810d368:	4822      	ldr	r0, [pc, #136]	@ (810d3f4 <vTaskStartScheduler+0xbc>)
 810d36a:	f7ff fe09 	bl	810cf80 <xTaskCreateStatic>
 810d36e:	4603      	mov	r3, r0
 810d370:	4a21      	ldr	r2, [pc, #132]	@ (810d3f8 <vTaskStartScheduler+0xc0>)
 810d372:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810d374:	4b20      	ldr	r3, [pc, #128]	@ (810d3f8 <vTaskStartScheduler+0xc0>)
 810d376:	681b      	ldr	r3, [r3, #0]
 810d378:	2b00      	cmp	r3, #0
 810d37a:	d002      	beq.n	810d382 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810d37c:	2301      	movs	r3, #1
 810d37e:	617b      	str	r3, [r7, #20]
 810d380:	e001      	b.n	810d386 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810d382:	2300      	movs	r3, #0
 810d384:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810d386:	697b      	ldr	r3, [r7, #20]
 810d388:	2b01      	cmp	r3, #1
 810d38a:	d102      	bne.n	810d392 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810d38c:	f000 fd04 	bl	810dd98 <xTimerCreateTimerTask>
 810d390:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810d392:	697b      	ldr	r3, [r7, #20]
 810d394:	2b01      	cmp	r3, #1
 810d396:	d116      	bne.n	810d3c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 810d398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d39c:	f383 8811 	msr	BASEPRI, r3
 810d3a0:	f3bf 8f6f 	isb	sy
 810d3a4:	f3bf 8f4f 	dsb	sy
 810d3a8:	613b      	str	r3, [r7, #16]
}
 810d3aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810d3ac:	4b13      	ldr	r3, [pc, #76]	@ (810d3fc <vTaskStartScheduler+0xc4>)
 810d3ae:	f04f 32ff 	mov.w	r2, #4294967295
 810d3b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810d3b4:	4b12      	ldr	r3, [pc, #72]	@ (810d400 <vTaskStartScheduler+0xc8>)
 810d3b6:	2201      	movs	r2, #1
 810d3b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810d3ba:	4b12      	ldr	r3, [pc, #72]	@ (810d404 <vTaskStartScheduler+0xcc>)
 810d3bc:	2200      	movs	r2, #0
 810d3be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810d3c0:	f7fe ff1e 	bl	810c200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810d3c4:	e00f      	b.n	810d3e6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810d3c6:	697b      	ldr	r3, [r7, #20]
 810d3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d3cc:	d10b      	bne.n	810d3e6 <vTaskStartScheduler+0xae>
	__asm volatile
 810d3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d3d2:	f383 8811 	msr	BASEPRI, r3
 810d3d6:	f3bf 8f6f 	isb	sy
 810d3da:	f3bf 8f4f 	dsb	sy
 810d3de:	60fb      	str	r3, [r7, #12]
}
 810d3e0:	bf00      	nop
 810d3e2:	bf00      	nop
 810d3e4:	e7fd      	b.n	810d3e2 <vTaskStartScheduler+0xaa>
}
 810d3e6:	bf00      	nop
 810d3e8:	3718      	adds	r7, #24
 810d3ea:	46bd      	mov	sp, r7
 810d3ec:	bd80      	pop	{r7, pc}
 810d3ee:	bf00      	nop
 810d3f0:	08112f3c 	.word	0x08112f3c
 810d3f4:	0810da29 	.word	0x0810da29
 810d3f8:	10004e74 	.word	0x10004e74
 810d3fc:	10004e70 	.word	0x10004e70
 810d400:	10004e5c 	.word	0x10004e5c
 810d404:	10004e54 	.word	0x10004e54

0810d408 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810d408:	b480      	push	{r7}
 810d40a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810d40c:	4b04      	ldr	r3, [pc, #16]	@ (810d420 <vTaskSuspendAll+0x18>)
 810d40e:	681b      	ldr	r3, [r3, #0]
 810d410:	3301      	adds	r3, #1
 810d412:	4a03      	ldr	r2, [pc, #12]	@ (810d420 <vTaskSuspendAll+0x18>)
 810d414:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810d416:	bf00      	nop
 810d418:	46bd      	mov	sp, r7
 810d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d41e:	4770      	bx	lr
 810d420:	10004e78 	.word	0x10004e78

0810d424 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810d424:	b580      	push	{r7, lr}
 810d426:	b084      	sub	sp, #16
 810d428:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810d42a:	2300      	movs	r3, #0
 810d42c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810d42e:	2300      	movs	r3, #0
 810d430:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810d432:	4b42      	ldr	r3, [pc, #264]	@ (810d53c <xTaskResumeAll+0x118>)
 810d434:	681b      	ldr	r3, [r3, #0]
 810d436:	2b00      	cmp	r3, #0
 810d438:	d10b      	bne.n	810d452 <xTaskResumeAll+0x2e>
	__asm volatile
 810d43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d43e:	f383 8811 	msr	BASEPRI, r3
 810d442:	f3bf 8f6f 	isb	sy
 810d446:	f3bf 8f4f 	dsb	sy
 810d44a:	603b      	str	r3, [r7, #0]
}
 810d44c:	bf00      	nop
 810d44e:	bf00      	nop
 810d450:	e7fd      	b.n	810d44e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810d452:	f7fe ff79 	bl	810c348 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810d456:	4b39      	ldr	r3, [pc, #228]	@ (810d53c <xTaskResumeAll+0x118>)
 810d458:	681b      	ldr	r3, [r3, #0]
 810d45a:	3b01      	subs	r3, #1
 810d45c:	4a37      	ldr	r2, [pc, #220]	@ (810d53c <xTaskResumeAll+0x118>)
 810d45e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810d460:	4b36      	ldr	r3, [pc, #216]	@ (810d53c <xTaskResumeAll+0x118>)
 810d462:	681b      	ldr	r3, [r3, #0]
 810d464:	2b00      	cmp	r3, #0
 810d466:	d162      	bne.n	810d52e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810d468:	4b35      	ldr	r3, [pc, #212]	@ (810d540 <xTaskResumeAll+0x11c>)
 810d46a:	681b      	ldr	r3, [r3, #0]
 810d46c:	2b00      	cmp	r3, #0
 810d46e:	d05e      	beq.n	810d52e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810d470:	e02f      	b.n	810d4d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810d472:	4b34      	ldr	r3, [pc, #208]	@ (810d544 <xTaskResumeAll+0x120>)
 810d474:	68db      	ldr	r3, [r3, #12]
 810d476:	68db      	ldr	r3, [r3, #12]
 810d478:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810d47a:	68fb      	ldr	r3, [r7, #12]
 810d47c:	3318      	adds	r3, #24
 810d47e:	4618      	mov	r0, r3
 810d480:	f7fe fe0a 	bl	810c098 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810d484:	68fb      	ldr	r3, [r7, #12]
 810d486:	3304      	adds	r3, #4
 810d488:	4618      	mov	r0, r3
 810d48a:	f7fe fe05 	bl	810c098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810d48e:	68fb      	ldr	r3, [r7, #12]
 810d490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d492:	4b2d      	ldr	r3, [pc, #180]	@ (810d548 <xTaskResumeAll+0x124>)
 810d494:	681b      	ldr	r3, [r3, #0]
 810d496:	429a      	cmp	r2, r3
 810d498:	d903      	bls.n	810d4a2 <xTaskResumeAll+0x7e>
 810d49a:	68fb      	ldr	r3, [r7, #12]
 810d49c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d49e:	4a2a      	ldr	r2, [pc, #168]	@ (810d548 <xTaskResumeAll+0x124>)
 810d4a0:	6013      	str	r3, [r2, #0]
 810d4a2:	68fb      	ldr	r3, [r7, #12]
 810d4a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d4a6:	4613      	mov	r3, r2
 810d4a8:	009b      	lsls	r3, r3, #2
 810d4aa:	4413      	add	r3, r2
 810d4ac:	009b      	lsls	r3, r3, #2
 810d4ae:	4a27      	ldr	r2, [pc, #156]	@ (810d54c <xTaskResumeAll+0x128>)
 810d4b0:	441a      	add	r2, r3
 810d4b2:	68fb      	ldr	r3, [r7, #12]
 810d4b4:	3304      	adds	r3, #4
 810d4b6:	4619      	mov	r1, r3
 810d4b8:	4610      	mov	r0, r2
 810d4ba:	f7fe fd90 	bl	810bfde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810d4be:	68fb      	ldr	r3, [r7, #12]
 810d4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d4c2:	4b23      	ldr	r3, [pc, #140]	@ (810d550 <xTaskResumeAll+0x12c>)
 810d4c4:	681b      	ldr	r3, [r3, #0]
 810d4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d4c8:	429a      	cmp	r2, r3
 810d4ca:	d302      	bcc.n	810d4d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 810d4cc:	4b21      	ldr	r3, [pc, #132]	@ (810d554 <xTaskResumeAll+0x130>)
 810d4ce:	2201      	movs	r2, #1
 810d4d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810d4d2:	4b1c      	ldr	r3, [pc, #112]	@ (810d544 <xTaskResumeAll+0x120>)
 810d4d4:	681b      	ldr	r3, [r3, #0]
 810d4d6:	2b00      	cmp	r3, #0
 810d4d8:	d1cb      	bne.n	810d472 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810d4da:	68fb      	ldr	r3, [r7, #12]
 810d4dc:	2b00      	cmp	r3, #0
 810d4de:	d001      	beq.n	810d4e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810d4e0:	f000 fb58 	bl	810db94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810d4e4:	4b1c      	ldr	r3, [pc, #112]	@ (810d558 <xTaskResumeAll+0x134>)
 810d4e6:	681b      	ldr	r3, [r3, #0]
 810d4e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810d4ea:	687b      	ldr	r3, [r7, #4]
 810d4ec:	2b00      	cmp	r3, #0
 810d4ee:	d010      	beq.n	810d512 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810d4f0:	f000 f846 	bl	810d580 <xTaskIncrementTick>
 810d4f4:	4603      	mov	r3, r0
 810d4f6:	2b00      	cmp	r3, #0
 810d4f8:	d002      	beq.n	810d500 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 810d4fa:	4b16      	ldr	r3, [pc, #88]	@ (810d554 <xTaskResumeAll+0x130>)
 810d4fc:	2201      	movs	r2, #1
 810d4fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810d500:	687b      	ldr	r3, [r7, #4]
 810d502:	3b01      	subs	r3, #1
 810d504:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810d506:	687b      	ldr	r3, [r7, #4]
 810d508:	2b00      	cmp	r3, #0
 810d50a:	d1f1      	bne.n	810d4f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 810d50c:	4b12      	ldr	r3, [pc, #72]	@ (810d558 <xTaskResumeAll+0x134>)
 810d50e:	2200      	movs	r2, #0
 810d510:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810d512:	4b10      	ldr	r3, [pc, #64]	@ (810d554 <xTaskResumeAll+0x130>)
 810d514:	681b      	ldr	r3, [r3, #0]
 810d516:	2b00      	cmp	r3, #0
 810d518:	d009      	beq.n	810d52e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810d51a:	2301      	movs	r3, #1
 810d51c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810d51e:	4b0f      	ldr	r3, [pc, #60]	@ (810d55c <xTaskResumeAll+0x138>)
 810d520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d524:	601a      	str	r2, [r3, #0]
 810d526:	f3bf 8f4f 	dsb	sy
 810d52a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810d52e:	f7fe ff3d 	bl	810c3ac <vPortExitCritical>

	return xAlreadyYielded;
 810d532:	68bb      	ldr	r3, [r7, #8]
}
 810d534:	4618      	mov	r0, r3
 810d536:	3710      	adds	r7, #16
 810d538:	46bd      	mov	sp, r7
 810d53a:	bd80      	pop	{r7, pc}
 810d53c:	10004e78 	.word	0x10004e78
 810d540:	10004e50 	.word	0x10004e50
 810d544:	10004e10 	.word	0x10004e10
 810d548:	10004e58 	.word	0x10004e58
 810d54c:	10004980 	.word	0x10004980
 810d550:	1000497c 	.word	0x1000497c
 810d554:	10004e64 	.word	0x10004e64
 810d558:	10004e60 	.word	0x10004e60
 810d55c:	e000ed04 	.word	0xe000ed04

0810d560 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810d560:	b480      	push	{r7}
 810d562:	b083      	sub	sp, #12
 810d564:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810d566:	4b05      	ldr	r3, [pc, #20]	@ (810d57c <xTaskGetTickCount+0x1c>)
 810d568:	681b      	ldr	r3, [r3, #0]
 810d56a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810d56c:	687b      	ldr	r3, [r7, #4]
}
 810d56e:	4618      	mov	r0, r3
 810d570:	370c      	adds	r7, #12
 810d572:	46bd      	mov	sp, r7
 810d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d578:	4770      	bx	lr
 810d57a:	bf00      	nop
 810d57c:	10004e54 	.word	0x10004e54

0810d580 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810d580:	b580      	push	{r7, lr}
 810d582:	b086      	sub	sp, #24
 810d584:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810d586:	2300      	movs	r3, #0
 810d588:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810d58a:	4b4f      	ldr	r3, [pc, #316]	@ (810d6c8 <xTaskIncrementTick+0x148>)
 810d58c:	681b      	ldr	r3, [r3, #0]
 810d58e:	2b00      	cmp	r3, #0
 810d590:	f040 8090 	bne.w	810d6b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810d594:	4b4d      	ldr	r3, [pc, #308]	@ (810d6cc <xTaskIncrementTick+0x14c>)
 810d596:	681b      	ldr	r3, [r3, #0]
 810d598:	3301      	adds	r3, #1
 810d59a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810d59c:	4a4b      	ldr	r2, [pc, #300]	@ (810d6cc <xTaskIncrementTick+0x14c>)
 810d59e:	693b      	ldr	r3, [r7, #16]
 810d5a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810d5a2:	693b      	ldr	r3, [r7, #16]
 810d5a4:	2b00      	cmp	r3, #0
 810d5a6:	d121      	bne.n	810d5ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 810d5a8:	4b49      	ldr	r3, [pc, #292]	@ (810d6d0 <xTaskIncrementTick+0x150>)
 810d5aa:	681b      	ldr	r3, [r3, #0]
 810d5ac:	681b      	ldr	r3, [r3, #0]
 810d5ae:	2b00      	cmp	r3, #0
 810d5b0:	d00b      	beq.n	810d5ca <xTaskIncrementTick+0x4a>
	__asm volatile
 810d5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d5b6:	f383 8811 	msr	BASEPRI, r3
 810d5ba:	f3bf 8f6f 	isb	sy
 810d5be:	f3bf 8f4f 	dsb	sy
 810d5c2:	603b      	str	r3, [r7, #0]
}
 810d5c4:	bf00      	nop
 810d5c6:	bf00      	nop
 810d5c8:	e7fd      	b.n	810d5c6 <xTaskIncrementTick+0x46>
 810d5ca:	4b41      	ldr	r3, [pc, #260]	@ (810d6d0 <xTaskIncrementTick+0x150>)
 810d5cc:	681b      	ldr	r3, [r3, #0]
 810d5ce:	60fb      	str	r3, [r7, #12]
 810d5d0:	4b40      	ldr	r3, [pc, #256]	@ (810d6d4 <xTaskIncrementTick+0x154>)
 810d5d2:	681b      	ldr	r3, [r3, #0]
 810d5d4:	4a3e      	ldr	r2, [pc, #248]	@ (810d6d0 <xTaskIncrementTick+0x150>)
 810d5d6:	6013      	str	r3, [r2, #0]
 810d5d8:	4a3e      	ldr	r2, [pc, #248]	@ (810d6d4 <xTaskIncrementTick+0x154>)
 810d5da:	68fb      	ldr	r3, [r7, #12]
 810d5dc:	6013      	str	r3, [r2, #0]
 810d5de:	4b3e      	ldr	r3, [pc, #248]	@ (810d6d8 <xTaskIncrementTick+0x158>)
 810d5e0:	681b      	ldr	r3, [r3, #0]
 810d5e2:	3301      	adds	r3, #1
 810d5e4:	4a3c      	ldr	r2, [pc, #240]	@ (810d6d8 <xTaskIncrementTick+0x158>)
 810d5e6:	6013      	str	r3, [r2, #0]
 810d5e8:	f000 fad4 	bl	810db94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810d5ec:	4b3b      	ldr	r3, [pc, #236]	@ (810d6dc <xTaskIncrementTick+0x15c>)
 810d5ee:	681b      	ldr	r3, [r3, #0]
 810d5f0:	693a      	ldr	r2, [r7, #16]
 810d5f2:	429a      	cmp	r2, r3
 810d5f4:	d349      	bcc.n	810d68a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810d5f6:	4b36      	ldr	r3, [pc, #216]	@ (810d6d0 <xTaskIncrementTick+0x150>)
 810d5f8:	681b      	ldr	r3, [r3, #0]
 810d5fa:	681b      	ldr	r3, [r3, #0]
 810d5fc:	2b00      	cmp	r3, #0
 810d5fe:	d104      	bne.n	810d60a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810d600:	4b36      	ldr	r3, [pc, #216]	@ (810d6dc <xTaskIncrementTick+0x15c>)
 810d602:	f04f 32ff 	mov.w	r2, #4294967295
 810d606:	601a      	str	r2, [r3, #0]
					break;
 810d608:	e03f      	b.n	810d68a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810d60a:	4b31      	ldr	r3, [pc, #196]	@ (810d6d0 <xTaskIncrementTick+0x150>)
 810d60c:	681b      	ldr	r3, [r3, #0]
 810d60e:	68db      	ldr	r3, [r3, #12]
 810d610:	68db      	ldr	r3, [r3, #12]
 810d612:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810d614:	68bb      	ldr	r3, [r7, #8]
 810d616:	685b      	ldr	r3, [r3, #4]
 810d618:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810d61a:	693a      	ldr	r2, [r7, #16]
 810d61c:	687b      	ldr	r3, [r7, #4]
 810d61e:	429a      	cmp	r2, r3
 810d620:	d203      	bcs.n	810d62a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810d622:	4a2e      	ldr	r2, [pc, #184]	@ (810d6dc <xTaskIncrementTick+0x15c>)
 810d624:	687b      	ldr	r3, [r7, #4]
 810d626:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810d628:	e02f      	b.n	810d68a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810d62a:	68bb      	ldr	r3, [r7, #8]
 810d62c:	3304      	adds	r3, #4
 810d62e:	4618      	mov	r0, r3
 810d630:	f7fe fd32 	bl	810c098 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810d634:	68bb      	ldr	r3, [r7, #8]
 810d636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d638:	2b00      	cmp	r3, #0
 810d63a:	d004      	beq.n	810d646 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810d63c:	68bb      	ldr	r3, [r7, #8]
 810d63e:	3318      	adds	r3, #24
 810d640:	4618      	mov	r0, r3
 810d642:	f7fe fd29 	bl	810c098 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810d646:	68bb      	ldr	r3, [r7, #8]
 810d648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d64a:	4b25      	ldr	r3, [pc, #148]	@ (810d6e0 <xTaskIncrementTick+0x160>)
 810d64c:	681b      	ldr	r3, [r3, #0]
 810d64e:	429a      	cmp	r2, r3
 810d650:	d903      	bls.n	810d65a <xTaskIncrementTick+0xda>
 810d652:	68bb      	ldr	r3, [r7, #8]
 810d654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d656:	4a22      	ldr	r2, [pc, #136]	@ (810d6e0 <xTaskIncrementTick+0x160>)
 810d658:	6013      	str	r3, [r2, #0]
 810d65a:	68bb      	ldr	r3, [r7, #8]
 810d65c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d65e:	4613      	mov	r3, r2
 810d660:	009b      	lsls	r3, r3, #2
 810d662:	4413      	add	r3, r2
 810d664:	009b      	lsls	r3, r3, #2
 810d666:	4a1f      	ldr	r2, [pc, #124]	@ (810d6e4 <xTaskIncrementTick+0x164>)
 810d668:	441a      	add	r2, r3
 810d66a:	68bb      	ldr	r3, [r7, #8]
 810d66c:	3304      	adds	r3, #4
 810d66e:	4619      	mov	r1, r3
 810d670:	4610      	mov	r0, r2
 810d672:	f7fe fcb4 	bl	810bfde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810d676:	68bb      	ldr	r3, [r7, #8]
 810d678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d67a:	4b1b      	ldr	r3, [pc, #108]	@ (810d6e8 <xTaskIncrementTick+0x168>)
 810d67c:	681b      	ldr	r3, [r3, #0]
 810d67e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d680:	429a      	cmp	r2, r3
 810d682:	d3b8      	bcc.n	810d5f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 810d684:	2301      	movs	r3, #1
 810d686:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810d688:	e7b5      	b.n	810d5f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810d68a:	4b17      	ldr	r3, [pc, #92]	@ (810d6e8 <xTaskIncrementTick+0x168>)
 810d68c:	681b      	ldr	r3, [r3, #0]
 810d68e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d690:	4914      	ldr	r1, [pc, #80]	@ (810d6e4 <xTaskIncrementTick+0x164>)
 810d692:	4613      	mov	r3, r2
 810d694:	009b      	lsls	r3, r3, #2
 810d696:	4413      	add	r3, r2
 810d698:	009b      	lsls	r3, r3, #2
 810d69a:	440b      	add	r3, r1
 810d69c:	681b      	ldr	r3, [r3, #0]
 810d69e:	2b01      	cmp	r3, #1
 810d6a0:	d901      	bls.n	810d6a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810d6a2:	2301      	movs	r3, #1
 810d6a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810d6a6:	4b11      	ldr	r3, [pc, #68]	@ (810d6ec <xTaskIncrementTick+0x16c>)
 810d6a8:	681b      	ldr	r3, [r3, #0]
 810d6aa:	2b00      	cmp	r3, #0
 810d6ac:	d007      	beq.n	810d6be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810d6ae:	2301      	movs	r3, #1
 810d6b0:	617b      	str	r3, [r7, #20]
 810d6b2:	e004      	b.n	810d6be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810d6b4:	4b0e      	ldr	r3, [pc, #56]	@ (810d6f0 <xTaskIncrementTick+0x170>)
 810d6b6:	681b      	ldr	r3, [r3, #0]
 810d6b8:	3301      	adds	r3, #1
 810d6ba:	4a0d      	ldr	r2, [pc, #52]	@ (810d6f0 <xTaskIncrementTick+0x170>)
 810d6bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810d6be:	697b      	ldr	r3, [r7, #20]
}
 810d6c0:	4618      	mov	r0, r3
 810d6c2:	3718      	adds	r7, #24
 810d6c4:	46bd      	mov	sp, r7
 810d6c6:	bd80      	pop	{r7, pc}
 810d6c8:	10004e78 	.word	0x10004e78
 810d6cc:	10004e54 	.word	0x10004e54
 810d6d0:	10004e08 	.word	0x10004e08
 810d6d4:	10004e0c 	.word	0x10004e0c
 810d6d8:	10004e68 	.word	0x10004e68
 810d6dc:	10004e70 	.word	0x10004e70
 810d6e0:	10004e58 	.word	0x10004e58
 810d6e4:	10004980 	.word	0x10004980
 810d6e8:	1000497c 	.word	0x1000497c
 810d6ec:	10004e64 	.word	0x10004e64
 810d6f0:	10004e60 	.word	0x10004e60

0810d6f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810d6f4:	b480      	push	{r7}
 810d6f6:	b085      	sub	sp, #20
 810d6f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810d6fa:	4b28      	ldr	r3, [pc, #160]	@ (810d79c <vTaskSwitchContext+0xa8>)
 810d6fc:	681b      	ldr	r3, [r3, #0]
 810d6fe:	2b00      	cmp	r3, #0
 810d700:	d003      	beq.n	810d70a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810d702:	4b27      	ldr	r3, [pc, #156]	@ (810d7a0 <vTaskSwitchContext+0xac>)
 810d704:	2201      	movs	r2, #1
 810d706:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810d708:	e042      	b.n	810d790 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 810d70a:	4b25      	ldr	r3, [pc, #148]	@ (810d7a0 <vTaskSwitchContext+0xac>)
 810d70c:	2200      	movs	r2, #0
 810d70e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810d710:	4b24      	ldr	r3, [pc, #144]	@ (810d7a4 <vTaskSwitchContext+0xb0>)
 810d712:	681b      	ldr	r3, [r3, #0]
 810d714:	60fb      	str	r3, [r7, #12]
 810d716:	e011      	b.n	810d73c <vTaskSwitchContext+0x48>
 810d718:	68fb      	ldr	r3, [r7, #12]
 810d71a:	2b00      	cmp	r3, #0
 810d71c:	d10b      	bne.n	810d736 <vTaskSwitchContext+0x42>
	__asm volatile
 810d71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d722:	f383 8811 	msr	BASEPRI, r3
 810d726:	f3bf 8f6f 	isb	sy
 810d72a:	f3bf 8f4f 	dsb	sy
 810d72e:	607b      	str	r3, [r7, #4]
}
 810d730:	bf00      	nop
 810d732:	bf00      	nop
 810d734:	e7fd      	b.n	810d732 <vTaskSwitchContext+0x3e>
 810d736:	68fb      	ldr	r3, [r7, #12]
 810d738:	3b01      	subs	r3, #1
 810d73a:	60fb      	str	r3, [r7, #12]
 810d73c:	491a      	ldr	r1, [pc, #104]	@ (810d7a8 <vTaskSwitchContext+0xb4>)
 810d73e:	68fa      	ldr	r2, [r7, #12]
 810d740:	4613      	mov	r3, r2
 810d742:	009b      	lsls	r3, r3, #2
 810d744:	4413      	add	r3, r2
 810d746:	009b      	lsls	r3, r3, #2
 810d748:	440b      	add	r3, r1
 810d74a:	681b      	ldr	r3, [r3, #0]
 810d74c:	2b00      	cmp	r3, #0
 810d74e:	d0e3      	beq.n	810d718 <vTaskSwitchContext+0x24>
 810d750:	68fa      	ldr	r2, [r7, #12]
 810d752:	4613      	mov	r3, r2
 810d754:	009b      	lsls	r3, r3, #2
 810d756:	4413      	add	r3, r2
 810d758:	009b      	lsls	r3, r3, #2
 810d75a:	4a13      	ldr	r2, [pc, #76]	@ (810d7a8 <vTaskSwitchContext+0xb4>)
 810d75c:	4413      	add	r3, r2
 810d75e:	60bb      	str	r3, [r7, #8]
 810d760:	68bb      	ldr	r3, [r7, #8]
 810d762:	685b      	ldr	r3, [r3, #4]
 810d764:	685a      	ldr	r2, [r3, #4]
 810d766:	68bb      	ldr	r3, [r7, #8]
 810d768:	605a      	str	r2, [r3, #4]
 810d76a:	68bb      	ldr	r3, [r7, #8]
 810d76c:	685a      	ldr	r2, [r3, #4]
 810d76e:	68bb      	ldr	r3, [r7, #8]
 810d770:	3308      	adds	r3, #8
 810d772:	429a      	cmp	r2, r3
 810d774:	d104      	bne.n	810d780 <vTaskSwitchContext+0x8c>
 810d776:	68bb      	ldr	r3, [r7, #8]
 810d778:	685b      	ldr	r3, [r3, #4]
 810d77a:	685a      	ldr	r2, [r3, #4]
 810d77c:	68bb      	ldr	r3, [r7, #8]
 810d77e:	605a      	str	r2, [r3, #4]
 810d780:	68bb      	ldr	r3, [r7, #8]
 810d782:	685b      	ldr	r3, [r3, #4]
 810d784:	68db      	ldr	r3, [r3, #12]
 810d786:	4a09      	ldr	r2, [pc, #36]	@ (810d7ac <vTaskSwitchContext+0xb8>)
 810d788:	6013      	str	r3, [r2, #0]
 810d78a:	4a06      	ldr	r2, [pc, #24]	@ (810d7a4 <vTaskSwitchContext+0xb0>)
 810d78c:	68fb      	ldr	r3, [r7, #12]
 810d78e:	6013      	str	r3, [r2, #0]
}
 810d790:	bf00      	nop
 810d792:	3714      	adds	r7, #20
 810d794:	46bd      	mov	sp, r7
 810d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d79a:	4770      	bx	lr
 810d79c:	10004e78 	.word	0x10004e78
 810d7a0:	10004e64 	.word	0x10004e64
 810d7a4:	10004e58 	.word	0x10004e58
 810d7a8:	10004980 	.word	0x10004980
 810d7ac:	1000497c 	.word	0x1000497c

0810d7b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810d7b0:	b580      	push	{r7, lr}
 810d7b2:	b084      	sub	sp, #16
 810d7b4:	af00      	add	r7, sp, #0
 810d7b6:	6078      	str	r0, [r7, #4]
 810d7b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810d7ba:	687b      	ldr	r3, [r7, #4]
 810d7bc:	2b00      	cmp	r3, #0
 810d7be:	d10b      	bne.n	810d7d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 810d7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d7c4:	f383 8811 	msr	BASEPRI, r3
 810d7c8:	f3bf 8f6f 	isb	sy
 810d7cc:	f3bf 8f4f 	dsb	sy
 810d7d0:	60fb      	str	r3, [r7, #12]
}
 810d7d2:	bf00      	nop
 810d7d4:	bf00      	nop
 810d7d6:	e7fd      	b.n	810d7d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810d7d8:	4b07      	ldr	r3, [pc, #28]	@ (810d7f8 <vTaskPlaceOnEventList+0x48>)
 810d7da:	681b      	ldr	r3, [r3, #0]
 810d7dc:	3318      	adds	r3, #24
 810d7de:	4619      	mov	r1, r3
 810d7e0:	6878      	ldr	r0, [r7, #4]
 810d7e2:	f7fe fc20 	bl	810c026 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810d7e6:	2101      	movs	r1, #1
 810d7e8:	6838      	ldr	r0, [r7, #0]
 810d7ea:	f000 fa81 	bl	810dcf0 <prvAddCurrentTaskToDelayedList>
}
 810d7ee:	bf00      	nop
 810d7f0:	3710      	adds	r7, #16
 810d7f2:	46bd      	mov	sp, r7
 810d7f4:	bd80      	pop	{r7, pc}
 810d7f6:	bf00      	nop
 810d7f8:	1000497c 	.word	0x1000497c

0810d7fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810d7fc:	b580      	push	{r7, lr}
 810d7fe:	b086      	sub	sp, #24
 810d800:	af00      	add	r7, sp, #0
 810d802:	60f8      	str	r0, [r7, #12]
 810d804:	60b9      	str	r1, [r7, #8]
 810d806:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810d808:	68fb      	ldr	r3, [r7, #12]
 810d80a:	2b00      	cmp	r3, #0
 810d80c:	d10b      	bne.n	810d826 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 810d80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d812:	f383 8811 	msr	BASEPRI, r3
 810d816:	f3bf 8f6f 	isb	sy
 810d81a:	f3bf 8f4f 	dsb	sy
 810d81e:	617b      	str	r3, [r7, #20]
}
 810d820:	bf00      	nop
 810d822:	bf00      	nop
 810d824:	e7fd      	b.n	810d822 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810d826:	4b0a      	ldr	r3, [pc, #40]	@ (810d850 <vTaskPlaceOnEventListRestricted+0x54>)
 810d828:	681b      	ldr	r3, [r3, #0]
 810d82a:	3318      	adds	r3, #24
 810d82c:	4619      	mov	r1, r3
 810d82e:	68f8      	ldr	r0, [r7, #12]
 810d830:	f7fe fbd5 	bl	810bfde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810d834:	687b      	ldr	r3, [r7, #4]
 810d836:	2b00      	cmp	r3, #0
 810d838:	d002      	beq.n	810d840 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 810d83a:	f04f 33ff 	mov.w	r3, #4294967295
 810d83e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810d840:	6879      	ldr	r1, [r7, #4]
 810d842:	68b8      	ldr	r0, [r7, #8]
 810d844:	f000 fa54 	bl	810dcf0 <prvAddCurrentTaskToDelayedList>
	}
 810d848:	bf00      	nop
 810d84a:	3718      	adds	r7, #24
 810d84c:	46bd      	mov	sp, r7
 810d84e:	bd80      	pop	{r7, pc}
 810d850:	1000497c 	.word	0x1000497c

0810d854 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810d854:	b580      	push	{r7, lr}
 810d856:	b086      	sub	sp, #24
 810d858:	af00      	add	r7, sp, #0
 810d85a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810d85c:	687b      	ldr	r3, [r7, #4]
 810d85e:	68db      	ldr	r3, [r3, #12]
 810d860:	68db      	ldr	r3, [r3, #12]
 810d862:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810d864:	693b      	ldr	r3, [r7, #16]
 810d866:	2b00      	cmp	r3, #0
 810d868:	d10b      	bne.n	810d882 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810d86a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d86e:	f383 8811 	msr	BASEPRI, r3
 810d872:	f3bf 8f6f 	isb	sy
 810d876:	f3bf 8f4f 	dsb	sy
 810d87a:	60fb      	str	r3, [r7, #12]
}
 810d87c:	bf00      	nop
 810d87e:	bf00      	nop
 810d880:	e7fd      	b.n	810d87e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810d882:	693b      	ldr	r3, [r7, #16]
 810d884:	3318      	adds	r3, #24
 810d886:	4618      	mov	r0, r3
 810d888:	f7fe fc06 	bl	810c098 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810d88c:	4b1d      	ldr	r3, [pc, #116]	@ (810d904 <xTaskRemoveFromEventList+0xb0>)
 810d88e:	681b      	ldr	r3, [r3, #0]
 810d890:	2b00      	cmp	r3, #0
 810d892:	d11d      	bne.n	810d8d0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810d894:	693b      	ldr	r3, [r7, #16]
 810d896:	3304      	adds	r3, #4
 810d898:	4618      	mov	r0, r3
 810d89a:	f7fe fbfd 	bl	810c098 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810d89e:	693b      	ldr	r3, [r7, #16]
 810d8a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d8a2:	4b19      	ldr	r3, [pc, #100]	@ (810d908 <xTaskRemoveFromEventList+0xb4>)
 810d8a4:	681b      	ldr	r3, [r3, #0]
 810d8a6:	429a      	cmp	r2, r3
 810d8a8:	d903      	bls.n	810d8b2 <xTaskRemoveFromEventList+0x5e>
 810d8aa:	693b      	ldr	r3, [r7, #16]
 810d8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d8ae:	4a16      	ldr	r2, [pc, #88]	@ (810d908 <xTaskRemoveFromEventList+0xb4>)
 810d8b0:	6013      	str	r3, [r2, #0]
 810d8b2:	693b      	ldr	r3, [r7, #16]
 810d8b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d8b6:	4613      	mov	r3, r2
 810d8b8:	009b      	lsls	r3, r3, #2
 810d8ba:	4413      	add	r3, r2
 810d8bc:	009b      	lsls	r3, r3, #2
 810d8be:	4a13      	ldr	r2, [pc, #76]	@ (810d90c <xTaskRemoveFromEventList+0xb8>)
 810d8c0:	441a      	add	r2, r3
 810d8c2:	693b      	ldr	r3, [r7, #16]
 810d8c4:	3304      	adds	r3, #4
 810d8c6:	4619      	mov	r1, r3
 810d8c8:	4610      	mov	r0, r2
 810d8ca:	f7fe fb88 	bl	810bfde <vListInsertEnd>
 810d8ce:	e005      	b.n	810d8dc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810d8d0:	693b      	ldr	r3, [r7, #16]
 810d8d2:	3318      	adds	r3, #24
 810d8d4:	4619      	mov	r1, r3
 810d8d6:	480e      	ldr	r0, [pc, #56]	@ (810d910 <xTaskRemoveFromEventList+0xbc>)
 810d8d8:	f7fe fb81 	bl	810bfde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810d8dc:	693b      	ldr	r3, [r7, #16]
 810d8de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810d8e0:	4b0c      	ldr	r3, [pc, #48]	@ (810d914 <xTaskRemoveFromEventList+0xc0>)
 810d8e2:	681b      	ldr	r3, [r3, #0]
 810d8e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d8e6:	429a      	cmp	r2, r3
 810d8e8:	d905      	bls.n	810d8f6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810d8ea:	2301      	movs	r3, #1
 810d8ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810d8ee:	4b0a      	ldr	r3, [pc, #40]	@ (810d918 <xTaskRemoveFromEventList+0xc4>)
 810d8f0:	2201      	movs	r2, #1
 810d8f2:	601a      	str	r2, [r3, #0]
 810d8f4:	e001      	b.n	810d8fa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 810d8f6:	2300      	movs	r3, #0
 810d8f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810d8fa:	697b      	ldr	r3, [r7, #20]
}
 810d8fc:	4618      	mov	r0, r3
 810d8fe:	3718      	adds	r7, #24
 810d900:	46bd      	mov	sp, r7
 810d902:	bd80      	pop	{r7, pc}
 810d904:	10004e78 	.word	0x10004e78
 810d908:	10004e58 	.word	0x10004e58
 810d90c:	10004980 	.word	0x10004980
 810d910:	10004e10 	.word	0x10004e10
 810d914:	1000497c 	.word	0x1000497c
 810d918:	10004e64 	.word	0x10004e64

0810d91c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810d91c:	b480      	push	{r7}
 810d91e:	b083      	sub	sp, #12
 810d920:	af00      	add	r7, sp, #0
 810d922:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810d924:	4b06      	ldr	r3, [pc, #24]	@ (810d940 <vTaskInternalSetTimeOutState+0x24>)
 810d926:	681a      	ldr	r2, [r3, #0]
 810d928:	687b      	ldr	r3, [r7, #4]
 810d92a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810d92c:	4b05      	ldr	r3, [pc, #20]	@ (810d944 <vTaskInternalSetTimeOutState+0x28>)
 810d92e:	681a      	ldr	r2, [r3, #0]
 810d930:	687b      	ldr	r3, [r7, #4]
 810d932:	605a      	str	r2, [r3, #4]
}
 810d934:	bf00      	nop
 810d936:	370c      	adds	r7, #12
 810d938:	46bd      	mov	sp, r7
 810d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d93e:	4770      	bx	lr
 810d940:	10004e68 	.word	0x10004e68
 810d944:	10004e54 	.word	0x10004e54

0810d948 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810d948:	b580      	push	{r7, lr}
 810d94a:	b088      	sub	sp, #32
 810d94c:	af00      	add	r7, sp, #0
 810d94e:	6078      	str	r0, [r7, #4]
 810d950:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810d952:	687b      	ldr	r3, [r7, #4]
 810d954:	2b00      	cmp	r3, #0
 810d956:	d10b      	bne.n	810d970 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 810d958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d95c:	f383 8811 	msr	BASEPRI, r3
 810d960:	f3bf 8f6f 	isb	sy
 810d964:	f3bf 8f4f 	dsb	sy
 810d968:	613b      	str	r3, [r7, #16]
}
 810d96a:	bf00      	nop
 810d96c:	bf00      	nop
 810d96e:	e7fd      	b.n	810d96c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810d970:	683b      	ldr	r3, [r7, #0]
 810d972:	2b00      	cmp	r3, #0
 810d974:	d10b      	bne.n	810d98e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 810d976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d97a:	f383 8811 	msr	BASEPRI, r3
 810d97e:	f3bf 8f6f 	isb	sy
 810d982:	f3bf 8f4f 	dsb	sy
 810d986:	60fb      	str	r3, [r7, #12]
}
 810d988:	bf00      	nop
 810d98a:	bf00      	nop
 810d98c:	e7fd      	b.n	810d98a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810d98e:	f7fe fcdb 	bl	810c348 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810d992:	4b1d      	ldr	r3, [pc, #116]	@ (810da08 <xTaskCheckForTimeOut+0xc0>)
 810d994:	681b      	ldr	r3, [r3, #0]
 810d996:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810d998:	687b      	ldr	r3, [r7, #4]
 810d99a:	685b      	ldr	r3, [r3, #4]
 810d99c:	69ba      	ldr	r2, [r7, #24]
 810d99e:	1ad3      	subs	r3, r2, r3
 810d9a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810d9a2:	683b      	ldr	r3, [r7, #0]
 810d9a4:	681b      	ldr	r3, [r3, #0]
 810d9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d9aa:	d102      	bne.n	810d9b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810d9ac:	2300      	movs	r3, #0
 810d9ae:	61fb      	str	r3, [r7, #28]
 810d9b0:	e023      	b.n	810d9fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810d9b2:	687b      	ldr	r3, [r7, #4]
 810d9b4:	681a      	ldr	r2, [r3, #0]
 810d9b6:	4b15      	ldr	r3, [pc, #84]	@ (810da0c <xTaskCheckForTimeOut+0xc4>)
 810d9b8:	681b      	ldr	r3, [r3, #0]
 810d9ba:	429a      	cmp	r2, r3
 810d9bc:	d007      	beq.n	810d9ce <xTaskCheckForTimeOut+0x86>
 810d9be:	687b      	ldr	r3, [r7, #4]
 810d9c0:	685b      	ldr	r3, [r3, #4]
 810d9c2:	69ba      	ldr	r2, [r7, #24]
 810d9c4:	429a      	cmp	r2, r3
 810d9c6:	d302      	bcc.n	810d9ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810d9c8:	2301      	movs	r3, #1
 810d9ca:	61fb      	str	r3, [r7, #28]
 810d9cc:	e015      	b.n	810d9fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810d9ce:	683b      	ldr	r3, [r7, #0]
 810d9d0:	681b      	ldr	r3, [r3, #0]
 810d9d2:	697a      	ldr	r2, [r7, #20]
 810d9d4:	429a      	cmp	r2, r3
 810d9d6:	d20b      	bcs.n	810d9f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810d9d8:	683b      	ldr	r3, [r7, #0]
 810d9da:	681a      	ldr	r2, [r3, #0]
 810d9dc:	697b      	ldr	r3, [r7, #20]
 810d9de:	1ad2      	subs	r2, r2, r3
 810d9e0:	683b      	ldr	r3, [r7, #0]
 810d9e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810d9e4:	6878      	ldr	r0, [r7, #4]
 810d9e6:	f7ff ff99 	bl	810d91c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810d9ea:	2300      	movs	r3, #0
 810d9ec:	61fb      	str	r3, [r7, #28]
 810d9ee:	e004      	b.n	810d9fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 810d9f0:	683b      	ldr	r3, [r7, #0]
 810d9f2:	2200      	movs	r2, #0
 810d9f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810d9f6:	2301      	movs	r3, #1
 810d9f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810d9fa:	f7fe fcd7 	bl	810c3ac <vPortExitCritical>

	return xReturn;
 810d9fe:	69fb      	ldr	r3, [r7, #28]
}
 810da00:	4618      	mov	r0, r3
 810da02:	3720      	adds	r7, #32
 810da04:	46bd      	mov	sp, r7
 810da06:	bd80      	pop	{r7, pc}
 810da08:	10004e54 	.word	0x10004e54
 810da0c:	10004e68 	.word	0x10004e68

0810da10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810da10:	b480      	push	{r7}
 810da12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810da14:	4b03      	ldr	r3, [pc, #12]	@ (810da24 <vTaskMissedYield+0x14>)
 810da16:	2201      	movs	r2, #1
 810da18:	601a      	str	r2, [r3, #0]
}
 810da1a:	bf00      	nop
 810da1c:	46bd      	mov	sp, r7
 810da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da22:	4770      	bx	lr
 810da24:	10004e64 	.word	0x10004e64

0810da28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810da28:	b580      	push	{r7, lr}
 810da2a:	b082      	sub	sp, #8
 810da2c:	af00      	add	r7, sp, #0
 810da2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810da30:	f000 f852 	bl	810dad8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810da34:	4b06      	ldr	r3, [pc, #24]	@ (810da50 <prvIdleTask+0x28>)
 810da36:	681b      	ldr	r3, [r3, #0]
 810da38:	2b01      	cmp	r3, #1
 810da3a:	d9f9      	bls.n	810da30 <prvIdleTask+0x8>
			{
				taskYIELD();
 810da3c:	4b05      	ldr	r3, [pc, #20]	@ (810da54 <prvIdleTask+0x2c>)
 810da3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810da42:	601a      	str	r2, [r3, #0]
 810da44:	f3bf 8f4f 	dsb	sy
 810da48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810da4c:	e7f0      	b.n	810da30 <prvIdleTask+0x8>
 810da4e:	bf00      	nop
 810da50:	10004980 	.word	0x10004980
 810da54:	e000ed04 	.word	0xe000ed04

0810da58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810da58:	b580      	push	{r7, lr}
 810da5a:	b082      	sub	sp, #8
 810da5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810da5e:	2300      	movs	r3, #0
 810da60:	607b      	str	r3, [r7, #4]
 810da62:	e00c      	b.n	810da7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810da64:	687a      	ldr	r2, [r7, #4]
 810da66:	4613      	mov	r3, r2
 810da68:	009b      	lsls	r3, r3, #2
 810da6a:	4413      	add	r3, r2
 810da6c:	009b      	lsls	r3, r3, #2
 810da6e:	4a12      	ldr	r2, [pc, #72]	@ (810dab8 <prvInitialiseTaskLists+0x60>)
 810da70:	4413      	add	r3, r2
 810da72:	4618      	mov	r0, r3
 810da74:	f7fe fa86 	bl	810bf84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810da78:	687b      	ldr	r3, [r7, #4]
 810da7a:	3301      	adds	r3, #1
 810da7c:	607b      	str	r3, [r7, #4]
 810da7e:	687b      	ldr	r3, [r7, #4]
 810da80:	2b37      	cmp	r3, #55	@ 0x37
 810da82:	d9ef      	bls.n	810da64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810da84:	480d      	ldr	r0, [pc, #52]	@ (810dabc <prvInitialiseTaskLists+0x64>)
 810da86:	f7fe fa7d 	bl	810bf84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810da8a:	480d      	ldr	r0, [pc, #52]	@ (810dac0 <prvInitialiseTaskLists+0x68>)
 810da8c:	f7fe fa7a 	bl	810bf84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810da90:	480c      	ldr	r0, [pc, #48]	@ (810dac4 <prvInitialiseTaskLists+0x6c>)
 810da92:	f7fe fa77 	bl	810bf84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810da96:	480c      	ldr	r0, [pc, #48]	@ (810dac8 <prvInitialiseTaskLists+0x70>)
 810da98:	f7fe fa74 	bl	810bf84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810da9c:	480b      	ldr	r0, [pc, #44]	@ (810dacc <prvInitialiseTaskLists+0x74>)
 810da9e:	f7fe fa71 	bl	810bf84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810daa2:	4b0b      	ldr	r3, [pc, #44]	@ (810dad0 <prvInitialiseTaskLists+0x78>)
 810daa4:	4a05      	ldr	r2, [pc, #20]	@ (810dabc <prvInitialiseTaskLists+0x64>)
 810daa6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810daa8:	4b0a      	ldr	r3, [pc, #40]	@ (810dad4 <prvInitialiseTaskLists+0x7c>)
 810daaa:	4a05      	ldr	r2, [pc, #20]	@ (810dac0 <prvInitialiseTaskLists+0x68>)
 810daac:	601a      	str	r2, [r3, #0]
}
 810daae:	bf00      	nop
 810dab0:	3708      	adds	r7, #8
 810dab2:	46bd      	mov	sp, r7
 810dab4:	bd80      	pop	{r7, pc}
 810dab6:	bf00      	nop
 810dab8:	10004980 	.word	0x10004980
 810dabc:	10004de0 	.word	0x10004de0
 810dac0:	10004df4 	.word	0x10004df4
 810dac4:	10004e10 	.word	0x10004e10
 810dac8:	10004e24 	.word	0x10004e24
 810dacc:	10004e3c 	.word	0x10004e3c
 810dad0:	10004e08 	.word	0x10004e08
 810dad4:	10004e0c 	.word	0x10004e0c

0810dad8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810dad8:	b580      	push	{r7, lr}
 810dada:	b082      	sub	sp, #8
 810dadc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810dade:	e019      	b.n	810db14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810dae0:	f7fe fc32 	bl	810c348 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810dae4:	4b10      	ldr	r3, [pc, #64]	@ (810db28 <prvCheckTasksWaitingTermination+0x50>)
 810dae6:	68db      	ldr	r3, [r3, #12]
 810dae8:	68db      	ldr	r3, [r3, #12]
 810daea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810daec:	687b      	ldr	r3, [r7, #4]
 810daee:	3304      	adds	r3, #4
 810daf0:	4618      	mov	r0, r3
 810daf2:	f7fe fad1 	bl	810c098 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810daf6:	4b0d      	ldr	r3, [pc, #52]	@ (810db2c <prvCheckTasksWaitingTermination+0x54>)
 810daf8:	681b      	ldr	r3, [r3, #0]
 810dafa:	3b01      	subs	r3, #1
 810dafc:	4a0b      	ldr	r2, [pc, #44]	@ (810db2c <prvCheckTasksWaitingTermination+0x54>)
 810dafe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810db00:	4b0b      	ldr	r3, [pc, #44]	@ (810db30 <prvCheckTasksWaitingTermination+0x58>)
 810db02:	681b      	ldr	r3, [r3, #0]
 810db04:	3b01      	subs	r3, #1
 810db06:	4a0a      	ldr	r2, [pc, #40]	@ (810db30 <prvCheckTasksWaitingTermination+0x58>)
 810db08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810db0a:	f7fe fc4f 	bl	810c3ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810db0e:	6878      	ldr	r0, [r7, #4]
 810db10:	f000 f810 	bl	810db34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810db14:	4b06      	ldr	r3, [pc, #24]	@ (810db30 <prvCheckTasksWaitingTermination+0x58>)
 810db16:	681b      	ldr	r3, [r3, #0]
 810db18:	2b00      	cmp	r3, #0
 810db1a:	d1e1      	bne.n	810dae0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810db1c:	bf00      	nop
 810db1e:	bf00      	nop
 810db20:	3708      	adds	r7, #8
 810db22:	46bd      	mov	sp, r7
 810db24:	bd80      	pop	{r7, pc}
 810db26:	bf00      	nop
 810db28:	10004e24 	.word	0x10004e24
 810db2c:	10004e50 	.word	0x10004e50
 810db30:	10004e38 	.word	0x10004e38

0810db34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810db34:	b580      	push	{r7, lr}
 810db36:	b084      	sub	sp, #16
 810db38:	af00      	add	r7, sp, #0
 810db3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810db3c:	687b      	ldr	r3, [r7, #4]
 810db3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 810db42:	2b00      	cmp	r3, #0
 810db44:	d108      	bne.n	810db58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810db46:	687b      	ldr	r3, [r7, #4]
 810db48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810db4a:	4618      	mov	r0, r3
 810db4c:	f7fe f8fa 	bl	810bd44 <vPortFree>
				vPortFree( pxTCB );
 810db50:	6878      	ldr	r0, [r7, #4]
 810db52:	f7fe f8f7 	bl	810bd44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810db56:	e019      	b.n	810db8c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810db58:	687b      	ldr	r3, [r7, #4]
 810db5a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 810db5e:	2b01      	cmp	r3, #1
 810db60:	d103      	bne.n	810db6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810db62:	6878      	ldr	r0, [r7, #4]
 810db64:	f7fe f8ee 	bl	810bd44 <vPortFree>
	}
 810db68:	e010      	b.n	810db8c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810db6a:	687b      	ldr	r3, [r7, #4]
 810db6c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 810db70:	2b02      	cmp	r3, #2
 810db72:	d00b      	beq.n	810db8c <prvDeleteTCB+0x58>
	__asm volatile
 810db74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810db78:	f383 8811 	msr	BASEPRI, r3
 810db7c:	f3bf 8f6f 	isb	sy
 810db80:	f3bf 8f4f 	dsb	sy
 810db84:	60fb      	str	r3, [r7, #12]
}
 810db86:	bf00      	nop
 810db88:	bf00      	nop
 810db8a:	e7fd      	b.n	810db88 <prvDeleteTCB+0x54>
	}
 810db8c:	bf00      	nop
 810db8e:	3710      	adds	r7, #16
 810db90:	46bd      	mov	sp, r7
 810db92:	bd80      	pop	{r7, pc}

0810db94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810db94:	b480      	push	{r7}
 810db96:	b083      	sub	sp, #12
 810db98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810db9a:	4b0c      	ldr	r3, [pc, #48]	@ (810dbcc <prvResetNextTaskUnblockTime+0x38>)
 810db9c:	681b      	ldr	r3, [r3, #0]
 810db9e:	681b      	ldr	r3, [r3, #0]
 810dba0:	2b00      	cmp	r3, #0
 810dba2:	d104      	bne.n	810dbae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810dba4:	4b0a      	ldr	r3, [pc, #40]	@ (810dbd0 <prvResetNextTaskUnblockTime+0x3c>)
 810dba6:	f04f 32ff 	mov.w	r2, #4294967295
 810dbaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810dbac:	e008      	b.n	810dbc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810dbae:	4b07      	ldr	r3, [pc, #28]	@ (810dbcc <prvResetNextTaskUnblockTime+0x38>)
 810dbb0:	681b      	ldr	r3, [r3, #0]
 810dbb2:	68db      	ldr	r3, [r3, #12]
 810dbb4:	68db      	ldr	r3, [r3, #12]
 810dbb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810dbb8:	687b      	ldr	r3, [r7, #4]
 810dbba:	685b      	ldr	r3, [r3, #4]
 810dbbc:	4a04      	ldr	r2, [pc, #16]	@ (810dbd0 <prvResetNextTaskUnblockTime+0x3c>)
 810dbbe:	6013      	str	r3, [r2, #0]
}
 810dbc0:	bf00      	nop
 810dbc2:	370c      	adds	r7, #12
 810dbc4:	46bd      	mov	sp, r7
 810dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dbca:	4770      	bx	lr
 810dbcc:	10004e08 	.word	0x10004e08
 810dbd0:	10004e70 	.word	0x10004e70

0810dbd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810dbd4:	b480      	push	{r7}
 810dbd6:	b083      	sub	sp, #12
 810dbd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810dbda:	4b0b      	ldr	r3, [pc, #44]	@ (810dc08 <xTaskGetSchedulerState+0x34>)
 810dbdc:	681b      	ldr	r3, [r3, #0]
 810dbde:	2b00      	cmp	r3, #0
 810dbe0:	d102      	bne.n	810dbe8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810dbe2:	2301      	movs	r3, #1
 810dbe4:	607b      	str	r3, [r7, #4]
 810dbe6:	e008      	b.n	810dbfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810dbe8:	4b08      	ldr	r3, [pc, #32]	@ (810dc0c <xTaskGetSchedulerState+0x38>)
 810dbea:	681b      	ldr	r3, [r3, #0]
 810dbec:	2b00      	cmp	r3, #0
 810dbee:	d102      	bne.n	810dbf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810dbf0:	2302      	movs	r3, #2
 810dbf2:	607b      	str	r3, [r7, #4]
 810dbf4:	e001      	b.n	810dbfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810dbf6:	2300      	movs	r3, #0
 810dbf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810dbfa:	687b      	ldr	r3, [r7, #4]
	}
 810dbfc:	4618      	mov	r0, r3
 810dbfe:	370c      	adds	r7, #12
 810dc00:	46bd      	mov	sp, r7
 810dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dc06:	4770      	bx	lr
 810dc08:	10004e5c 	.word	0x10004e5c
 810dc0c:	10004e78 	.word	0x10004e78

0810dc10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810dc10:	b580      	push	{r7, lr}
 810dc12:	b086      	sub	sp, #24
 810dc14:	af00      	add	r7, sp, #0
 810dc16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810dc18:	687b      	ldr	r3, [r7, #4]
 810dc1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810dc1c:	2300      	movs	r3, #0
 810dc1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810dc20:	687b      	ldr	r3, [r7, #4]
 810dc22:	2b00      	cmp	r3, #0
 810dc24:	d058      	beq.n	810dcd8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810dc26:	4b2f      	ldr	r3, [pc, #188]	@ (810dce4 <xTaskPriorityDisinherit+0xd4>)
 810dc28:	681b      	ldr	r3, [r3, #0]
 810dc2a:	693a      	ldr	r2, [r7, #16]
 810dc2c:	429a      	cmp	r2, r3
 810dc2e:	d00b      	beq.n	810dc48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 810dc30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dc34:	f383 8811 	msr	BASEPRI, r3
 810dc38:	f3bf 8f6f 	isb	sy
 810dc3c:	f3bf 8f4f 	dsb	sy
 810dc40:	60fb      	str	r3, [r7, #12]
}
 810dc42:	bf00      	nop
 810dc44:	bf00      	nop
 810dc46:	e7fd      	b.n	810dc44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810dc48:	693b      	ldr	r3, [r7, #16]
 810dc4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810dc4c:	2b00      	cmp	r3, #0
 810dc4e:	d10b      	bne.n	810dc68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 810dc50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dc54:	f383 8811 	msr	BASEPRI, r3
 810dc58:	f3bf 8f6f 	isb	sy
 810dc5c:	f3bf 8f4f 	dsb	sy
 810dc60:	60bb      	str	r3, [r7, #8]
}
 810dc62:	bf00      	nop
 810dc64:	bf00      	nop
 810dc66:	e7fd      	b.n	810dc64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 810dc68:	693b      	ldr	r3, [r7, #16]
 810dc6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810dc6c:	1e5a      	subs	r2, r3, #1
 810dc6e:	693b      	ldr	r3, [r7, #16]
 810dc70:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810dc72:	693b      	ldr	r3, [r7, #16]
 810dc74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810dc76:	693b      	ldr	r3, [r7, #16]
 810dc78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810dc7a:	429a      	cmp	r2, r3
 810dc7c:	d02c      	beq.n	810dcd8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810dc7e:	693b      	ldr	r3, [r7, #16]
 810dc80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810dc82:	2b00      	cmp	r3, #0
 810dc84:	d128      	bne.n	810dcd8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810dc86:	693b      	ldr	r3, [r7, #16]
 810dc88:	3304      	adds	r3, #4
 810dc8a:	4618      	mov	r0, r3
 810dc8c:	f7fe fa04 	bl	810c098 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810dc90:	693b      	ldr	r3, [r7, #16]
 810dc92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810dc94:	693b      	ldr	r3, [r7, #16]
 810dc96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810dc98:	693b      	ldr	r3, [r7, #16]
 810dc9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810dc9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810dca0:	693b      	ldr	r3, [r7, #16]
 810dca2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810dca4:	693b      	ldr	r3, [r7, #16]
 810dca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810dca8:	4b0f      	ldr	r3, [pc, #60]	@ (810dce8 <xTaskPriorityDisinherit+0xd8>)
 810dcaa:	681b      	ldr	r3, [r3, #0]
 810dcac:	429a      	cmp	r2, r3
 810dcae:	d903      	bls.n	810dcb8 <xTaskPriorityDisinherit+0xa8>
 810dcb0:	693b      	ldr	r3, [r7, #16]
 810dcb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810dcb4:	4a0c      	ldr	r2, [pc, #48]	@ (810dce8 <xTaskPriorityDisinherit+0xd8>)
 810dcb6:	6013      	str	r3, [r2, #0]
 810dcb8:	693b      	ldr	r3, [r7, #16]
 810dcba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810dcbc:	4613      	mov	r3, r2
 810dcbe:	009b      	lsls	r3, r3, #2
 810dcc0:	4413      	add	r3, r2
 810dcc2:	009b      	lsls	r3, r3, #2
 810dcc4:	4a09      	ldr	r2, [pc, #36]	@ (810dcec <xTaskPriorityDisinherit+0xdc>)
 810dcc6:	441a      	add	r2, r3
 810dcc8:	693b      	ldr	r3, [r7, #16]
 810dcca:	3304      	adds	r3, #4
 810dccc:	4619      	mov	r1, r3
 810dcce:	4610      	mov	r0, r2
 810dcd0:	f7fe f985 	bl	810bfde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810dcd4:	2301      	movs	r3, #1
 810dcd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810dcd8:	697b      	ldr	r3, [r7, #20]
	}
 810dcda:	4618      	mov	r0, r3
 810dcdc:	3718      	adds	r7, #24
 810dcde:	46bd      	mov	sp, r7
 810dce0:	bd80      	pop	{r7, pc}
 810dce2:	bf00      	nop
 810dce4:	1000497c 	.word	0x1000497c
 810dce8:	10004e58 	.word	0x10004e58
 810dcec:	10004980 	.word	0x10004980

0810dcf0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810dcf0:	b580      	push	{r7, lr}
 810dcf2:	b084      	sub	sp, #16
 810dcf4:	af00      	add	r7, sp, #0
 810dcf6:	6078      	str	r0, [r7, #4]
 810dcf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810dcfa:	4b21      	ldr	r3, [pc, #132]	@ (810dd80 <prvAddCurrentTaskToDelayedList+0x90>)
 810dcfc:	681b      	ldr	r3, [r3, #0]
 810dcfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810dd00:	4b20      	ldr	r3, [pc, #128]	@ (810dd84 <prvAddCurrentTaskToDelayedList+0x94>)
 810dd02:	681b      	ldr	r3, [r3, #0]
 810dd04:	3304      	adds	r3, #4
 810dd06:	4618      	mov	r0, r3
 810dd08:	f7fe f9c6 	bl	810c098 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810dd0c:	687b      	ldr	r3, [r7, #4]
 810dd0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810dd12:	d10a      	bne.n	810dd2a <prvAddCurrentTaskToDelayedList+0x3a>
 810dd14:	683b      	ldr	r3, [r7, #0]
 810dd16:	2b00      	cmp	r3, #0
 810dd18:	d007      	beq.n	810dd2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810dd1a:	4b1a      	ldr	r3, [pc, #104]	@ (810dd84 <prvAddCurrentTaskToDelayedList+0x94>)
 810dd1c:	681b      	ldr	r3, [r3, #0]
 810dd1e:	3304      	adds	r3, #4
 810dd20:	4619      	mov	r1, r3
 810dd22:	4819      	ldr	r0, [pc, #100]	@ (810dd88 <prvAddCurrentTaskToDelayedList+0x98>)
 810dd24:	f7fe f95b 	bl	810bfde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810dd28:	e026      	b.n	810dd78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810dd2a:	68fa      	ldr	r2, [r7, #12]
 810dd2c:	687b      	ldr	r3, [r7, #4]
 810dd2e:	4413      	add	r3, r2
 810dd30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810dd32:	4b14      	ldr	r3, [pc, #80]	@ (810dd84 <prvAddCurrentTaskToDelayedList+0x94>)
 810dd34:	681b      	ldr	r3, [r3, #0]
 810dd36:	68ba      	ldr	r2, [r7, #8]
 810dd38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810dd3a:	68ba      	ldr	r2, [r7, #8]
 810dd3c:	68fb      	ldr	r3, [r7, #12]
 810dd3e:	429a      	cmp	r2, r3
 810dd40:	d209      	bcs.n	810dd56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810dd42:	4b12      	ldr	r3, [pc, #72]	@ (810dd8c <prvAddCurrentTaskToDelayedList+0x9c>)
 810dd44:	681a      	ldr	r2, [r3, #0]
 810dd46:	4b0f      	ldr	r3, [pc, #60]	@ (810dd84 <prvAddCurrentTaskToDelayedList+0x94>)
 810dd48:	681b      	ldr	r3, [r3, #0]
 810dd4a:	3304      	adds	r3, #4
 810dd4c:	4619      	mov	r1, r3
 810dd4e:	4610      	mov	r0, r2
 810dd50:	f7fe f969 	bl	810c026 <vListInsert>
}
 810dd54:	e010      	b.n	810dd78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810dd56:	4b0e      	ldr	r3, [pc, #56]	@ (810dd90 <prvAddCurrentTaskToDelayedList+0xa0>)
 810dd58:	681a      	ldr	r2, [r3, #0]
 810dd5a:	4b0a      	ldr	r3, [pc, #40]	@ (810dd84 <prvAddCurrentTaskToDelayedList+0x94>)
 810dd5c:	681b      	ldr	r3, [r3, #0]
 810dd5e:	3304      	adds	r3, #4
 810dd60:	4619      	mov	r1, r3
 810dd62:	4610      	mov	r0, r2
 810dd64:	f7fe f95f 	bl	810c026 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810dd68:	4b0a      	ldr	r3, [pc, #40]	@ (810dd94 <prvAddCurrentTaskToDelayedList+0xa4>)
 810dd6a:	681b      	ldr	r3, [r3, #0]
 810dd6c:	68ba      	ldr	r2, [r7, #8]
 810dd6e:	429a      	cmp	r2, r3
 810dd70:	d202      	bcs.n	810dd78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810dd72:	4a08      	ldr	r2, [pc, #32]	@ (810dd94 <prvAddCurrentTaskToDelayedList+0xa4>)
 810dd74:	68bb      	ldr	r3, [r7, #8]
 810dd76:	6013      	str	r3, [r2, #0]
}
 810dd78:	bf00      	nop
 810dd7a:	3710      	adds	r7, #16
 810dd7c:	46bd      	mov	sp, r7
 810dd7e:	bd80      	pop	{r7, pc}
 810dd80:	10004e54 	.word	0x10004e54
 810dd84:	1000497c 	.word	0x1000497c
 810dd88:	10004e3c 	.word	0x10004e3c
 810dd8c:	10004e0c 	.word	0x10004e0c
 810dd90:	10004e08 	.word	0x10004e08
 810dd94:	10004e70 	.word	0x10004e70

0810dd98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810dd98:	b580      	push	{r7, lr}
 810dd9a:	b08a      	sub	sp, #40	@ 0x28
 810dd9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810dd9e:	2300      	movs	r3, #0
 810dda0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810dda2:	f000 fb13 	bl	810e3cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810dda6:	4b1d      	ldr	r3, [pc, #116]	@ (810de1c <xTimerCreateTimerTask+0x84>)
 810dda8:	681b      	ldr	r3, [r3, #0]
 810ddaa:	2b00      	cmp	r3, #0
 810ddac:	d021      	beq.n	810ddf2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810ddae:	2300      	movs	r3, #0
 810ddb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810ddb2:	2300      	movs	r3, #0
 810ddb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810ddb6:	1d3a      	adds	r2, r7, #4
 810ddb8:	f107 0108 	add.w	r1, r7, #8
 810ddbc:	f107 030c 	add.w	r3, r7, #12
 810ddc0:	4618      	mov	r0, r3
 810ddc2:	f7fd fed7 	bl	810bb74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810ddc6:	6879      	ldr	r1, [r7, #4]
 810ddc8:	68bb      	ldr	r3, [r7, #8]
 810ddca:	68fa      	ldr	r2, [r7, #12]
 810ddcc:	9202      	str	r2, [sp, #8]
 810ddce:	9301      	str	r3, [sp, #4]
 810ddd0:	2302      	movs	r3, #2
 810ddd2:	9300      	str	r3, [sp, #0]
 810ddd4:	2300      	movs	r3, #0
 810ddd6:	460a      	mov	r2, r1
 810ddd8:	4911      	ldr	r1, [pc, #68]	@ (810de20 <xTimerCreateTimerTask+0x88>)
 810ddda:	4812      	ldr	r0, [pc, #72]	@ (810de24 <xTimerCreateTimerTask+0x8c>)
 810dddc:	f7ff f8d0 	bl	810cf80 <xTaskCreateStatic>
 810dde0:	4603      	mov	r3, r0
 810dde2:	4a11      	ldr	r2, [pc, #68]	@ (810de28 <xTimerCreateTimerTask+0x90>)
 810dde4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810dde6:	4b10      	ldr	r3, [pc, #64]	@ (810de28 <xTimerCreateTimerTask+0x90>)
 810dde8:	681b      	ldr	r3, [r3, #0]
 810ddea:	2b00      	cmp	r3, #0
 810ddec:	d001      	beq.n	810ddf2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810ddee:	2301      	movs	r3, #1
 810ddf0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810ddf2:	697b      	ldr	r3, [r7, #20]
 810ddf4:	2b00      	cmp	r3, #0
 810ddf6:	d10b      	bne.n	810de10 <xTimerCreateTimerTask+0x78>
	__asm volatile
 810ddf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ddfc:	f383 8811 	msr	BASEPRI, r3
 810de00:	f3bf 8f6f 	isb	sy
 810de04:	f3bf 8f4f 	dsb	sy
 810de08:	613b      	str	r3, [r7, #16]
}
 810de0a:	bf00      	nop
 810de0c:	bf00      	nop
 810de0e:	e7fd      	b.n	810de0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 810de10:	697b      	ldr	r3, [r7, #20]
}
 810de12:	4618      	mov	r0, r3
 810de14:	3718      	adds	r7, #24
 810de16:	46bd      	mov	sp, r7
 810de18:	bd80      	pop	{r7, pc}
 810de1a:	bf00      	nop
 810de1c:	10004eac 	.word	0x10004eac
 810de20:	08112f44 	.word	0x08112f44
 810de24:	0810df65 	.word	0x0810df65
 810de28:	10004eb0 	.word	0x10004eb0

0810de2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810de2c:	b580      	push	{r7, lr}
 810de2e:	b08a      	sub	sp, #40	@ 0x28
 810de30:	af00      	add	r7, sp, #0
 810de32:	60f8      	str	r0, [r7, #12]
 810de34:	60b9      	str	r1, [r7, #8]
 810de36:	607a      	str	r2, [r7, #4]
 810de38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810de3a:	2300      	movs	r3, #0
 810de3c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810de3e:	68fb      	ldr	r3, [r7, #12]
 810de40:	2b00      	cmp	r3, #0
 810de42:	d10b      	bne.n	810de5c <xTimerGenericCommand+0x30>
	__asm volatile
 810de44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810de48:	f383 8811 	msr	BASEPRI, r3
 810de4c:	f3bf 8f6f 	isb	sy
 810de50:	f3bf 8f4f 	dsb	sy
 810de54:	623b      	str	r3, [r7, #32]
}
 810de56:	bf00      	nop
 810de58:	bf00      	nop
 810de5a:	e7fd      	b.n	810de58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810de5c:	4b19      	ldr	r3, [pc, #100]	@ (810dec4 <xTimerGenericCommand+0x98>)
 810de5e:	681b      	ldr	r3, [r3, #0]
 810de60:	2b00      	cmp	r3, #0
 810de62:	d02a      	beq.n	810deba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810de64:	68bb      	ldr	r3, [r7, #8]
 810de66:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810de68:	687b      	ldr	r3, [r7, #4]
 810de6a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810de6c:	68fb      	ldr	r3, [r7, #12]
 810de6e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810de70:	68bb      	ldr	r3, [r7, #8]
 810de72:	2b05      	cmp	r3, #5
 810de74:	dc18      	bgt.n	810dea8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810de76:	f7ff fead 	bl	810dbd4 <xTaskGetSchedulerState>
 810de7a:	4603      	mov	r3, r0
 810de7c:	2b02      	cmp	r3, #2
 810de7e:	d109      	bne.n	810de94 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810de80:	4b10      	ldr	r3, [pc, #64]	@ (810dec4 <xTimerGenericCommand+0x98>)
 810de82:	6818      	ldr	r0, [r3, #0]
 810de84:	f107 0110 	add.w	r1, r7, #16
 810de88:	2300      	movs	r3, #0
 810de8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810de8c:	f7fe fc88 	bl	810c7a0 <xQueueGenericSend>
 810de90:	6278      	str	r0, [r7, #36]	@ 0x24
 810de92:	e012      	b.n	810deba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810de94:	4b0b      	ldr	r3, [pc, #44]	@ (810dec4 <xTimerGenericCommand+0x98>)
 810de96:	6818      	ldr	r0, [r3, #0]
 810de98:	f107 0110 	add.w	r1, r7, #16
 810de9c:	2300      	movs	r3, #0
 810de9e:	2200      	movs	r2, #0
 810dea0:	f7fe fc7e 	bl	810c7a0 <xQueueGenericSend>
 810dea4:	6278      	str	r0, [r7, #36]	@ 0x24
 810dea6:	e008      	b.n	810deba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810dea8:	4b06      	ldr	r3, [pc, #24]	@ (810dec4 <xTimerGenericCommand+0x98>)
 810deaa:	6818      	ldr	r0, [r3, #0]
 810deac:	f107 0110 	add.w	r1, r7, #16
 810deb0:	2300      	movs	r3, #0
 810deb2:	683a      	ldr	r2, [r7, #0]
 810deb4:	f7fe fd76 	bl	810c9a4 <xQueueGenericSendFromISR>
 810deb8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810deba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810debc:	4618      	mov	r0, r3
 810debe:	3728      	adds	r7, #40	@ 0x28
 810dec0:	46bd      	mov	sp, r7
 810dec2:	bd80      	pop	{r7, pc}
 810dec4:	10004eac 	.word	0x10004eac

0810dec8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810dec8:	b580      	push	{r7, lr}
 810deca:	b088      	sub	sp, #32
 810decc:	af02      	add	r7, sp, #8
 810dece:	6078      	str	r0, [r7, #4]
 810ded0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810ded2:	4b23      	ldr	r3, [pc, #140]	@ (810df60 <prvProcessExpiredTimer+0x98>)
 810ded4:	681b      	ldr	r3, [r3, #0]
 810ded6:	68db      	ldr	r3, [r3, #12]
 810ded8:	68db      	ldr	r3, [r3, #12]
 810deda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810dedc:	697b      	ldr	r3, [r7, #20]
 810dede:	3304      	adds	r3, #4
 810dee0:	4618      	mov	r0, r3
 810dee2:	f7fe f8d9 	bl	810c098 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810dee6:	697b      	ldr	r3, [r7, #20]
 810dee8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810deec:	f003 0304 	and.w	r3, r3, #4
 810def0:	2b00      	cmp	r3, #0
 810def2:	d023      	beq.n	810df3c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810def4:	697b      	ldr	r3, [r7, #20]
 810def6:	699a      	ldr	r2, [r3, #24]
 810def8:	687b      	ldr	r3, [r7, #4]
 810defa:	18d1      	adds	r1, r2, r3
 810defc:	687b      	ldr	r3, [r7, #4]
 810defe:	683a      	ldr	r2, [r7, #0]
 810df00:	6978      	ldr	r0, [r7, #20]
 810df02:	f000 f8d5 	bl	810e0b0 <prvInsertTimerInActiveList>
 810df06:	4603      	mov	r3, r0
 810df08:	2b00      	cmp	r3, #0
 810df0a:	d020      	beq.n	810df4e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810df0c:	2300      	movs	r3, #0
 810df0e:	9300      	str	r3, [sp, #0]
 810df10:	2300      	movs	r3, #0
 810df12:	687a      	ldr	r2, [r7, #4]
 810df14:	2100      	movs	r1, #0
 810df16:	6978      	ldr	r0, [r7, #20]
 810df18:	f7ff ff88 	bl	810de2c <xTimerGenericCommand>
 810df1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810df1e:	693b      	ldr	r3, [r7, #16]
 810df20:	2b00      	cmp	r3, #0
 810df22:	d114      	bne.n	810df4e <prvProcessExpiredTimer+0x86>
	__asm volatile
 810df24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810df28:	f383 8811 	msr	BASEPRI, r3
 810df2c:	f3bf 8f6f 	isb	sy
 810df30:	f3bf 8f4f 	dsb	sy
 810df34:	60fb      	str	r3, [r7, #12]
}
 810df36:	bf00      	nop
 810df38:	bf00      	nop
 810df3a:	e7fd      	b.n	810df38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810df3c:	697b      	ldr	r3, [r7, #20]
 810df3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810df42:	f023 0301 	bic.w	r3, r3, #1
 810df46:	b2da      	uxtb	r2, r3
 810df48:	697b      	ldr	r3, [r7, #20]
 810df4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810df4e:	697b      	ldr	r3, [r7, #20]
 810df50:	6a1b      	ldr	r3, [r3, #32]
 810df52:	6978      	ldr	r0, [r7, #20]
 810df54:	4798      	blx	r3
}
 810df56:	bf00      	nop
 810df58:	3718      	adds	r7, #24
 810df5a:	46bd      	mov	sp, r7
 810df5c:	bd80      	pop	{r7, pc}
 810df5e:	bf00      	nop
 810df60:	10004ea4 	.word	0x10004ea4

0810df64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810df64:	b580      	push	{r7, lr}
 810df66:	b084      	sub	sp, #16
 810df68:	af00      	add	r7, sp, #0
 810df6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810df6c:	f107 0308 	add.w	r3, r7, #8
 810df70:	4618      	mov	r0, r3
 810df72:	f000 f859 	bl	810e028 <prvGetNextExpireTime>
 810df76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810df78:	68bb      	ldr	r3, [r7, #8]
 810df7a:	4619      	mov	r1, r3
 810df7c:	68f8      	ldr	r0, [r7, #12]
 810df7e:	f000 f805 	bl	810df8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810df82:	f000 f8d7 	bl	810e134 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810df86:	bf00      	nop
 810df88:	e7f0      	b.n	810df6c <prvTimerTask+0x8>
	...

0810df8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810df8c:	b580      	push	{r7, lr}
 810df8e:	b084      	sub	sp, #16
 810df90:	af00      	add	r7, sp, #0
 810df92:	6078      	str	r0, [r7, #4]
 810df94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810df96:	f7ff fa37 	bl	810d408 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810df9a:	f107 0308 	add.w	r3, r7, #8
 810df9e:	4618      	mov	r0, r3
 810dfa0:	f000 f866 	bl	810e070 <prvSampleTimeNow>
 810dfa4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810dfa6:	68bb      	ldr	r3, [r7, #8]
 810dfa8:	2b00      	cmp	r3, #0
 810dfaa:	d130      	bne.n	810e00e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810dfac:	683b      	ldr	r3, [r7, #0]
 810dfae:	2b00      	cmp	r3, #0
 810dfb0:	d10a      	bne.n	810dfc8 <prvProcessTimerOrBlockTask+0x3c>
 810dfb2:	687a      	ldr	r2, [r7, #4]
 810dfb4:	68fb      	ldr	r3, [r7, #12]
 810dfb6:	429a      	cmp	r2, r3
 810dfb8:	d806      	bhi.n	810dfc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810dfba:	f7ff fa33 	bl	810d424 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810dfbe:	68f9      	ldr	r1, [r7, #12]
 810dfc0:	6878      	ldr	r0, [r7, #4]
 810dfc2:	f7ff ff81 	bl	810dec8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810dfc6:	e024      	b.n	810e012 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810dfc8:	683b      	ldr	r3, [r7, #0]
 810dfca:	2b00      	cmp	r3, #0
 810dfcc:	d008      	beq.n	810dfe0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810dfce:	4b13      	ldr	r3, [pc, #76]	@ (810e01c <prvProcessTimerOrBlockTask+0x90>)
 810dfd0:	681b      	ldr	r3, [r3, #0]
 810dfd2:	681b      	ldr	r3, [r3, #0]
 810dfd4:	2b00      	cmp	r3, #0
 810dfd6:	d101      	bne.n	810dfdc <prvProcessTimerOrBlockTask+0x50>
 810dfd8:	2301      	movs	r3, #1
 810dfda:	e000      	b.n	810dfde <prvProcessTimerOrBlockTask+0x52>
 810dfdc:	2300      	movs	r3, #0
 810dfde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810dfe0:	4b0f      	ldr	r3, [pc, #60]	@ (810e020 <prvProcessTimerOrBlockTask+0x94>)
 810dfe2:	6818      	ldr	r0, [r3, #0]
 810dfe4:	687a      	ldr	r2, [r7, #4]
 810dfe6:	68fb      	ldr	r3, [r7, #12]
 810dfe8:	1ad3      	subs	r3, r2, r3
 810dfea:	683a      	ldr	r2, [r7, #0]
 810dfec:	4619      	mov	r1, r3
 810dfee:	f7fe ff93 	bl	810cf18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810dff2:	f7ff fa17 	bl	810d424 <xTaskResumeAll>
 810dff6:	4603      	mov	r3, r0
 810dff8:	2b00      	cmp	r3, #0
 810dffa:	d10a      	bne.n	810e012 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810dffc:	4b09      	ldr	r3, [pc, #36]	@ (810e024 <prvProcessTimerOrBlockTask+0x98>)
 810dffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e002:	601a      	str	r2, [r3, #0]
 810e004:	f3bf 8f4f 	dsb	sy
 810e008:	f3bf 8f6f 	isb	sy
}
 810e00c:	e001      	b.n	810e012 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810e00e:	f7ff fa09 	bl	810d424 <xTaskResumeAll>
}
 810e012:	bf00      	nop
 810e014:	3710      	adds	r7, #16
 810e016:	46bd      	mov	sp, r7
 810e018:	bd80      	pop	{r7, pc}
 810e01a:	bf00      	nop
 810e01c:	10004ea8 	.word	0x10004ea8
 810e020:	10004eac 	.word	0x10004eac
 810e024:	e000ed04 	.word	0xe000ed04

0810e028 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810e028:	b480      	push	{r7}
 810e02a:	b085      	sub	sp, #20
 810e02c:	af00      	add	r7, sp, #0
 810e02e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810e030:	4b0e      	ldr	r3, [pc, #56]	@ (810e06c <prvGetNextExpireTime+0x44>)
 810e032:	681b      	ldr	r3, [r3, #0]
 810e034:	681b      	ldr	r3, [r3, #0]
 810e036:	2b00      	cmp	r3, #0
 810e038:	d101      	bne.n	810e03e <prvGetNextExpireTime+0x16>
 810e03a:	2201      	movs	r2, #1
 810e03c:	e000      	b.n	810e040 <prvGetNextExpireTime+0x18>
 810e03e:	2200      	movs	r2, #0
 810e040:	687b      	ldr	r3, [r7, #4]
 810e042:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810e044:	687b      	ldr	r3, [r7, #4]
 810e046:	681b      	ldr	r3, [r3, #0]
 810e048:	2b00      	cmp	r3, #0
 810e04a:	d105      	bne.n	810e058 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810e04c:	4b07      	ldr	r3, [pc, #28]	@ (810e06c <prvGetNextExpireTime+0x44>)
 810e04e:	681b      	ldr	r3, [r3, #0]
 810e050:	68db      	ldr	r3, [r3, #12]
 810e052:	681b      	ldr	r3, [r3, #0]
 810e054:	60fb      	str	r3, [r7, #12]
 810e056:	e001      	b.n	810e05c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810e058:	2300      	movs	r3, #0
 810e05a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810e05c:	68fb      	ldr	r3, [r7, #12]
}
 810e05e:	4618      	mov	r0, r3
 810e060:	3714      	adds	r7, #20
 810e062:	46bd      	mov	sp, r7
 810e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e068:	4770      	bx	lr
 810e06a:	bf00      	nop
 810e06c:	10004ea4 	.word	0x10004ea4

0810e070 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810e070:	b580      	push	{r7, lr}
 810e072:	b084      	sub	sp, #16
 810e074:	af00      	add	r7, sp, #0
 810e076:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810e078:	f7ff fa72 	bl	810d560 <xTaskGetTickCount>
 810e07c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810e07e:	4b0b      	ldr	r3, [pc, #44]	@ (810e0ac <prvSampleTimeNow+0x3c>)
 810e080:	681b      	ldr	r3, [r3, #0]
 810e082:	68fa      	ldr	r2, [r7, #12]
 810e084:	429a      	cmp	r2, r3
 810e086:	d205      	bcs.n	810e094 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810e088:	f000 f93a 	bl	810e300 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810e08c:	687b      	ldr	r3, [r7, #4]
 810e08e:	2201      	movs	r2, #1
 810e090:	601a      	str	r2, [r3, #0]
 810e092:	e002      	b.n	810e09a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810e094:	687b      	ldr	r3, [r7, #4]
 810e096:	2200      	movs	r2, #0
 810e098:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810e09a:	4a04      	ldr	r2, [pc, #16]	@ (810e0ac <prvSampleTimeNow+0x3c>)
 810e09c:	68fb      	ldr	r3, [r7, #12]
 810e09e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810e0a0:	68fb      	ldr	r3, [r7, #12]
}
 810e0a2:	4618      	mov	r0, r3
 810e0a4:	3710      	adds	r7, #16
 810e0a6:	46bd      	mov	sp, r7
 810e0a8:	bd80      	pop	{r7, pc}
 810e0aa:	bf00      	nop
 810e0ac:	10004eb4 	.word	0x10004eb4

0810e0b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810e0b0:	b580      	push	{r7, lr}
 810e0b2:	b086      	sub	sp, #24
 810e0b4:	af00      	add	r7, sp, #0
 810e0b6:	60f8      	str	r0, [r7, #12]
 810e0b8:	60b9      	str	r1, [r7, #8]
 810e0ba:	607a      	str	r2, [r7, #4]
 810e0bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810e0be:	2300      	movs	r3, #0
 810e0c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810e0c2:	68fb      	ldr	r3, [r7, #12]
 810e0c4:	68ba      	ldr	r2, [r7, #8]
 810e0c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810e0c8:	68fb      	ldr	r3, [r7, #12]
 810e0ca:	68fa      	ldr	r2, [r7, #12]
 810e0cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810e0ce:	68ba      	ldr	r2, [r7, #8]
 810e0d0:	687b      	ldr	r3, [r7, #4]
 810e0d2:	429a      	cmp	r2, r3
 810e0d4:	d812      	bhi.n	810e0fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810e0d6:	687a      	ldr	r2, [r7, #4]
 810e0d8:	683b      	ldr	r3, [r7, #0]
 810e0da:	1ad2      	subs	r2, r2, r3
 810e0dc:	68fb      	ldr	r3, [r7, #12]
 810e0de:	699b      	ldr	r3, [r3, #24]
 810e0e0:	429a      	cmp	r2, r3
 810e0e2:	d302      	bcc.n	810e0ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810e0e4:	2301      	movs	r3, #1
 810e0e6:	617b      	str	r3, [r7, #20]
 810e0e8:	e01b      	b.n	810e122 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810e0ea:	4b10      	ldr	r3, [pc, #64]	@ (810e12c <prvInsertTimerInActiveList+0x7c>)
 810e0ec:	681a      	ldr	r2, [r3, #0]
 810e0ee:	68fb      	ldr	r3, [r7, #12]
 810e0f0:	3304      	adds	r3, #4
 810e0f2:	4619      	mov	r1, r3
 810e0f4:	4610      	mov	r0, r2
 810e0f6:	f7fd ff96 	bl	810c026 <vListInsert>
 810e0fa:	e012      	b.n	810e122 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810e0fc:	687a      	ldr	r2, [r7, #4]
 810e0fe:	683b      	ldr	r3, [r7, #0]
 810e100:	429a      	cmp	r2, r3
 810e102:	d206      	bcs.n	810e112 <prvInsertTimerInActiveList+0x62>
 810e104:	68ba      	ldr	r2, [r7, #8]
 810e106:	683b      	ldr	r3, [r7, #0]
 810e108:	429a      	cmp	r2, r3
 810e10a:	d302      	bcc.n	810e112 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810e10c:	2301      	movs	r3, #1
 810e10e:	617b      	str	r3, [r7, #20]
 810e110:	e007      	b.n	810e122 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810e112:	4b07      	ldr	r3, [pc, #28]	@ (810e130 <prvInsertTimerInActiveList+0x80>)
 810e114:	681a      	ldr	r2, [r3, #0]
 810e116:	68fb      	ldr	r3, [r7, #12]
 810e118:	3304      	adds	r3, #4
 810e11a:	4619      	mov	r1, r3
 810e11c:	4610      	mov	r0, r2
 810e11e:	f7fd ff82 	bl	810c026 <vListInsert>
		}
	}

	return xProcessTimerNow;
 810e122:	697b      	ldr	r3, [r7, #20]
}
 810e124:	4618      	mov	r0, r3
 810e126:	3718      	adds	r7, #24
 810e128:	46bd      	mov	sp, r7
 810e12a:	bd80      	pop	{r7, pc}
 810e12c:	10004ea8 	.word	0x10004ea8
 810e130:	10004ea4 	.word	0x10004ea4

0810e134 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810e134:	b580      	push	{r7, lr}
 810e136:	b08e      	sub	sp, #56	@ 0x38
 810e138:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810e13a:	e0ce      	b.n	810e2da <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810e13c:	687b      	ldr	r3, [r7, #4]
 810e13e:	2b00      	cmp	r3, #0
 810e140:	da19      	bge.n	810e176 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810e142:	1d3b      	adds	r3, r7, #4
 810e144:	3304      	adds	r3, #4
 810e146:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810e148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e14a:	2b00      	cmp	r3, #0
 810e14c:	d10b      	bne.n	810e166 <prvProcessReceivedCommands+0x32>
	__asm volatile
 810e14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e152:	f383 8811 	msr	BASEPRI, r3
 810e156:	f3bf 8f6f 	isb	sy
 810e15a:	f3bf 8f4f 	dsb	sy
 810e15e:	61fb      	str	r3, [r7, #28]
}
 810e160:	bf00      	nop
 810e162:	bf00      	nop
 810e164:	e7fd      	b.n	810e162 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810e166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e168:	681b      	ldr	r3, [r3, #0]
 810e16a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810e16c:	6850      	ldr	r0, [r2, #4]
 810e16e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810e170:	6892      	ldr	r2, [r2, #8]
 810e172:	4611      	mov	r1, r2
 810e174:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810e176:	687b      	ldr	r3, [r7, #4]
 810e178:	2b00      	cmp	r3, #0
 810e17a:	f2c0 80ae 	blt.w	810e2da <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810e17e:	68fb      	ldr	r3, [r7, #12]
 810e180:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810e182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e184:	695b      	ldr	r3, [r3, #20]
 810e186:	2b00      	cmp	r3, #0
 810e188:	d004      	beq.n	810e194 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810e18a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e18c:	3304      	adds	r3, #4
 810e18e:	4618      	mov	r0, r3
 810e190:	f7fd ff82 	bl	810c098 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810e194:	463b      	mov	r3, r7
 810e196:	4618      	mov	r0, r3
 810e198:	f7ff ff6a 	bl	810e070 <prvSampleTimeNow>
 810e19c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 810e19e:	687b      	ldr	r3, [r7, #4]
 810e1a0:	2b09      	cmp	r3, #9
 810e1a2:	f200 8097 	bhi.w	810e2d4 <prvProcessReceivedCommands+0x1a0>
 810e1a6:	a201      	add	r2, pc, #4	@ (adr r2, 810e1ac <prvProcessReceivedCommands+0x78>)
 810e1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810e1ac:	0810e1d5 	.word	0x0810e1d5
 810e1b0:	0810e1d5 	.word	0x0810e1d5
 810e1b4:	0810e1d5 	.word	0x0810e1d5
 810e1b8:	0810e24b 	.word	0x0810e24b
 810e1bc:	0810e25f 	.word	0x0810e25f
 810e1c0:	0810e2ab 	.word	0x0810e2ab
 810e1c4:	0810e1d5 	.word	0x0810e1d5
 810e1c8:	0810e1d5 	.word	0x0810e1d5
 810e1cc:	0810e24b 	.word	0x0810e24b
 810e1d0:	0810e25f 	.word	0x0810e25f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810e1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e1d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810e1da:	f043 0301 	orr.w	r3, r3, #1
 810e1de:	b2da      	uxtb	r2, r3
 810e1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e1e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810e1e6:	68ba      	ldr	r2, [r7, #8]
 810e1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e1ea:	699b      	ldr	r3, [r3, #24]
 810e1ec:	18d1      	adds	r1, r2, r3
 810e1ee:	68bb      	ldr	r3, [r7, #8]
 810e1f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e1f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810e1f4:	f7ff ff5c 	bl	810e0b0 <prvInsertTimerInActiveList>
 810e1f8:	4603      	mov	r3, r0
 810e1fa:	2b00      	cmp	r3, #0
 810e1fc:	d06c      	beq.n	810e2d8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810e1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e200:	6a1b      	ldr	r3, [r3, #32]
 810e202:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810e204:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810e206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e208:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810e20c:	f003 0304 	and.w	r3, r3, #4
 810e210:	2b00      	cmp	r3, #0
 810e212:	d061      	beq.n	810e2d8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810e214:	68ba      	ldr	r2, [r7, #8]
 810e216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e218:	699b      	ldr	r3, [r3, #24]
 810e21a:	441a      	add	r2, r3
 810e21c:	2300      	movs	r3, #0
 810e21e:	9300      	str	r3, [sp, #0]
 810e220:	2300      	movs	r3, #0
 810e222:	2100      	movs	r1, #0
 810e224:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810e226:	f7ff fe01 	bl	810de2c <xTimerGenericCommand>
 810e22a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810e22c:	6a3b      	ldr	r3, [r7, #32]
 810e22e:	2b00      	cmp	r3, #0
 810e230:	d152      	bne.n	810e2d8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 810e232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e236:	f383 8811 	msr	BASEPRI, r3
 810e23a:	f3bf 8f6f 	isb	sy
 810e23e:	f3bf 8f4f 	dsb	sy
 810e242:	61bb      	str	r3, [r7, #24]
}
 810e244:	bf00      	nop
 810e246:	bf00      	nop
 810e248:	e7fd      	b.n	810e246 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810e24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e24c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810e250:	f023 0301 	bic.w	r3, r3, #1
 810e254:	b2da      	uxtb	r2, r3
 810e256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e258:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810e25c:	e03d      	b.n	810e2da <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810e25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e260:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810e264:	f043 0301 	orr.w	r3, r3, #1
 810e268:	b2da      	uxtb	r2, r3
 810e26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e26c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810e270:	68ba      	ldr	r2, [r7, #8]
 810e272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e274:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810e276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e278:	699b      	ldr	r3, [r3, #24]
 810e27a:	2b00      	cmp	r3, #0
 810e27c:	d10b      	bne.n	810e296 <prvProcessReceivedCommands+0x162>
	__asm volatile
 810e27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e282:	f383 8811 	msr	BASEPRI, r3
 810e286:	f3bf 8f6f 	isb	sy
 810e28a:	f3bf 8f4f 	dsb	sy
 810e28e:	617b      	str	r3, [r7, #20]
}
 810e290:	bf00      	nop
 810e292:	bf00      	nop
 810e294:	e7fd      	b.n	810e292 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810e296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e298:	699a      	ldr	r2, [r3, #24]
 810e29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e29c:	18d1      	adds	r1, r2, r3
 810e29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810e2a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810e2a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810e2a4:	f7ff ff04 	bl	810e0b0 <prvInsertTimerInActiveList>
					break;
 810e2a8:	e017      	b.n	810e2da <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810e2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e2ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810e2b0:	f003 0302 	and.w	r3, r3, #2
 810e2b4:	2b00      	cmp	r3, #0
 810e2b6:	d103      	bne.n	810e2c0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 810e2b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810e2ba:	f7fd fd43 	bl	810bd44 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810e2be:	e00c      	b.n	810e2da <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810e2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e2c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810e2c6:	f023 0301 	bic.w	r3, r3, #1
 810e2ca:	b2da      	uxtb	r2, r3
 810e2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e2ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810e2d2:	e002      	b.n	810e2da <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 810e2d4:	bf00      	nop
 810e2d6:	e000      	b.n	810e2da <prvProcessReceivedCommands+0x1a6>
					break;
 810e2d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810e2da:	4b08      	ldr	r3, [pc, #32]	@ (810e2fc <prvProcessReceivedCommands+0x1c8>)
 810e2dc:	681b      	ldr	r3, [r3, #0]
 810e2de:	1d39      	adds	r1, r7, #4
 810e2e0:	2200      	movs	r2, #0
 810e2e2:	4618      	mov	r0, r3
 810e2e4:	f7fe fbfc 	bl	810cae0 <xQueueReceive>
 810e2e8:	4603      	mov	r3, r0
 810e2ea:	2b00      	cmp	r3, #0
 810e2ec:	f47f af26 	bne.w	810e13c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 810e2f0:	bf00      	nop
 810e2f2:	bf00      	nop
 810e2f4:	3730      	adds	r7, #48	@ 0x30
 810e2f6:	46bd      	mov	sp, r7
 810e2f8:	bd80      	pop	{r7, pc}
 810e2fa:	bf00      	nop
 810e2fc:	10004eac 	.word	0x10004eac

0810e300 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810e300:	b580      	push	{r7, lr}
 810e302:	b088      	sub	sp, #32
 810e304:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810e306:	e049      	b.n	810e39c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810e308:	4b2e      	ldr	r3, [pc, #184]	@ (810e3c4 <prvSwitchTimerLists+0xc4>)
 810e30a:	681b      	ldr	r3, [r3, #0]
 810e30c:	68db      	ldr	r3, [r3, #12]
 810e30e:	681b      	ldr	r3, [r3, #0]
 810e310:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e312:	4b2c      	ldr	r3, [pc, #176]	@ (810e3c4 <prvSwitchTimerLists+0xc4>)
 810e314:	681b      	ldr	r3, [r3, #0]
 810e316:	68db      	ldr	r3, [r3, #12]
 810e318:	68db      	ldr	r3, [r3, #12]
 810e31a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810e31c:	68fb      	ldr	r3, [r7, #12]
 810e31e:	3304      	adds	r3, #4
 810e320:	4618      	mov	r0, r3
 810e322:	f7fd feb9 	bl	810c098 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810e326:	68fb      	ldr	r3, [r7, #12]
 810e328:	6a1b      	ldr	r3, [r3, #32]
 810e32a:	68f8      	ldr	r0, [r7, #12]
 810e32c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810e32e:	68fb      	ldr	r3, [r7, #12]
 810e330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810e334:	f003 0304 	and.w	r3, r3, #4
 810e338:	2b00      	cmp	r3, #0
 810e33a:	d02f      	beq.n	810e39c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810e33c:	68fb      	ldr	r3, [r7, #12]
 810e33e:	699b      	ldr	r3, [r3, #24]
 810e340:	693a      	ldr	r2, [r7, #16]
 810e342:	4413      	add	r3, r2
 810e344:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810e346:	68ba      	ldr	r2, [r7, #8]
 810e348:	693b      	ldr	r3, [r7, #16]
 810e34a:	429a      	cmp	r2, r3
 810e34c:	d90e      	bls.n	810e36c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810e34e:	68fb      	ldr	r3, [r7, #12]
 810e350:	68ba      	ldr	r2, [r7, #8]
 810e352:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810e354:	68fb      	ldr	r3, [r7, #12]
 810e356:	68fa      	ldr	r2, [r7, #12]
 810e358:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810e35a:	4b1a      	ldr	r3, [pc, #104]	@ (810e3c4 <prvSwitchTimerLists+0xc4>)
 810e35c:	681a      	ldr	r2, [r3, #0]
 810e35e:	68fb      	ldr	r3, [r7, #12]
 810e360:	3304      	adds	r3, #4
 810e362:	4619      	mov	r1, r3
 810e364:	4610      	mov	r0, r2
 810e366:	f7fd fe5e 	bl	810c026 <vListInsert>
 810e36a:	e017      	b.n	810e39c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810e36c:	2300      	movs	r3, #0
 810e36e:	9300      	str	r3, [sp, #0]
 810e370:	2300      	movs	r3, #0
 810e372:	693a      	ldr	r2, [r7, #16]
 810e374:	2100      	movs	r1, #0
 810e376:	68f8      	ldr	r0, [r7, #12]
 810e378:	f7ff fd58 	bl	810de2c <xTimerGenericCommand>
 810e37c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810e37e:	687b      	ldr	r3, [r7, #4]
 810e380:	2b00      	cmp	r3, #0
 810e382:	d10b      	bne.n	810e39c <prvSwitchTimerLists+0x9c>
	__asm volatile
 810e384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e388:	f383 8811 	msr	BASEPRI, r3
 810e38c:	f3bf 8f6f 	isb	sy
 810e390:	f3bf 8f4f 	dsb	sy
 810e394:	603b      	str	r3, [r7, #0]
}
 810e396:	bf00      	nop
 810e398:	bf00      	nop
 810e39a:	e7fd      	b.n	810e398 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810e39c:	4b09      	ldr	r3, [pc, #36]	@ (810e3c4 <prvSwitchTimerLists+0xc4>)
 810e39e:	681b      	ldr	r3, [r3, #0]
 810e3a0:	681b      	ldr	r3, [r3, #0]
 810e3a2:	2b00      	cmp	r3, #0
 810e3a4:	d1b0      	bne.n	810e308 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810e3a6:	4b07      	ldr	r3, [pc, #28]	@ (810e3c4 <prvSwitchTimerLists+0xc4>)
 810e3a8:	681b      	ldr	r3, [r3, #0]
 810e3aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810e3ac:	4b06      	ldr	r3, [pc, #24]	@ (810e3c8 <prvSwitchTimerLists+0xc8>)
 810e3ae:	681b      	ldr	r3, [r3, #0]
 810e3b0:	4a04      	ldr	r2, [pc, #16]	@ (810e3c4 <prvSwitchTimerLists+0xc4>)
 810e3b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810e3b4:	4a04      	ldr	r2, [pc, #16]	@ (810e3c8 <prvSwitchTimerLists+0xc8>)
 810e3b6:	697b      	ldr	r3, [r7, #20]
 810e3b8:	6013      	str	r3, [r2, #0]
}
 810e3ba:	bf00      	nop
 810e3bc:	3718      	adds	r7, #24
 810e3be:	46bd      	mov	sp, r7
 810e3c0:	bd80      	pop	{r7, pc}
 810e3c2:	bf00      	nop
 810e3c4:	10004ea4 	.word	0x10004ea4
 810e3c8:	10004ea8 	.word	0x10004ea8

0810e3cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810e3cc:	b580      	push	{r7, lr}
 810e3ce:	b082      	sub	sp, #8
 810e3d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810e3d2:	f7fd ffb9 	bl	810c348 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810e3d6:	4b15      	ldr	r3, [pc, #84]	@ (810e42c <prvCheckForValidListAndQueue+0x60>)
 810e3d8:	681b      	ldr	r3, [r3, #0]
 810e3da:	2b00      	cmp	r3, #0
 810e3dc:	d120      	bne.n	810e420 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810e3de:	4814      	ldr	r0, [pc, #80]	@ (810e430 <prvCheckForValidListAndQueue+0x64>)
 810e3e0:	f7fd fdd0 	bl	810bf84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810e3e4:	4813      	ldr	r0, [pc, #76]	@ (810e434 <prvCheckForValidListAndQueue+0x68>)
 810e3e6:	f7fd fdcd 	bl	810bf84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810e3ea:	4b13      	ldr	r3, [pc, #76]	@ (810e438 <prvCheckForValidListAndQueue+0x6c>)
 810e3ec:	4a10      	ldr	r2, [pc, #64]	@ (810e430 <prvCheckForValidListAndQueue+0x64>)
 810e3ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810e3f0:	4b12      	ldr	r3, [pc, #72]	@ (810e43c <prvCheckForValidListAndQueue+0x70>)
 810e3f2:	4a10      	ldr	r2, [pc, #64]	@ (810e434 <prvCheckForValidListAndQueue+0x68>)
 810e3f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810e3f6:	2300      	movs	r3, #0
 810e3f8:	9300      	str	r3, [sp, #0]
 810e3fa:	4b11      	ldr	r3, [pc, #68]	@ (810e440 <prvCheckForValidListAndQueue+0x74>)
 810e3fc:	4a11      	ldr	r2, [pc, #68]	@ (810e444 <prvCheckForValidListAndQueue+0x78>)
 810e3fe:	2110      	movs	r1, #16
 810e400:	200a      	movs	r0, #10
 810e402:	f7fe f92d 	bl	810c660 <xQueueGenericCreateStatic>
 810e406:	4603      	mov	r3, r0
 810e408:	4a08      	ldr	r2, [pc, #32]	@ (810e42c <prvCheckForValidListAndQueue+0x60>)
 810e40a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810e40c:	4b07      	ldr	r3, [pc, #28]	@ (810e42c <prvCheckForValidListAndQueue+0x60>)
 810e40e:	681b      	ldr	r3, [r3, #0]
 810e410:	2b00      	cmp	r3, #0
 810e412:	d005      	beq.n	810e420 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810e414:	4b05      	ldr	r3, [pc, #20]	@ (810e42c <prvCheckForValidListAndQueue+0x60>)
 810e416:	681b      	ldr	r3, [r3, #0]
 810e418:	490b      	ldr	r1, [pc, #44]	@ (810e448 <prvCheckForValidListAndQueue+0x7c>)
 810e41a:	4618      	mov	r0, r3
 810e41c:	f7fe fd52 	bl	810cec4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810e420:	f7fd ffc4 	bl	810c3ac <vPortExitCritical>
}
 810e424:	bf00      	nop
 810e426:	46bd      	mov	sp, r7
 810e428:	bd80      	pop	{r7, pc}
 810e42a:	bf00      	nop
 810e42c:	10004eac 	.word	0x10004eac
 810e430:	10004e7c 	.word	0x10004e7c
 810e434:	10004e90 	.word	0x10004e90
 810e438:	10004ea4 	.word	0x10004ea4
 810e43c:	10004ea8 	.word	0x10004ea8
 810e440:	10004f58 	.word	0x10004f58
 810e444:	10004eb8 	.word	0x10004eb8
 810e448:	08112f4c 	.word	0x08112f4c

0810e44c <malloc>:
 810e44c:	4b02      	ldr	r3, [pc, #8]	@ (810e458 <malloc+0xc>)
 810e44e:	4601      	mov	r1, r0
 810e450:	6818      	ldr	r0, [r3, #0]
 810e452:	f000 b825 	b.w	810e4a0 <_malloc_r>
 810e456:	bf00      	nop
 810e458:	100001e0 	.word	0x100001e0

0810e45c <sbrk_aligned>:
 810e45c:	b570      	push	{r4, r5, r6, lr}
 810e45e:	4e0f      	ldr	r6, [pc, #60]	@ (810e49c <sbrk_aligned+0x40>)
 810e460:	460c      	mov	r4, r1
 810e462:	6831      	ldr	r1, [r6, #0]
 810e464:	4605      	mov	r5, r0
 810e466:	b911      	cbnz	r1, 810e46e <sbrk_aligned+0x12>
 810e468:	f001 fff6 	bl	8110458 <_sbrk_r>
 810e46c:	6030      	str	r0, [r6, #0]
 810e46e:	4621      	mov	r1, r4
 810e470:	4628      	mov	r0, r5
 810e472:	f001 fff1 	bl	8110458 <_sbrk_r>
 810e476:	1c43      	adds	r3, r0, #1
 810e478:	d103      	bne.n	810e482 <sbrk_aligned+0x26>
 810e47a:	f04f 34ff 	mov.w	r4, #4294967295
 810e47e:	4620      	mov	r0, r4
 810e480:	bd70      	pop	{r4, r5, r6, pc}
 810e482:	1cc4      	adds	r4, r0, #3
 810e484:	f024 0403 	bic.w	r4, r4, #3
 810e488:	42a0      	cmp	r0, r4
 810e48a:	d0f8      	beq.n	810e47e <sbrk_aligned+0x22>
 810e48c:	1a21      	subs	r1, r4, r0
 810e48e:	4628      	mov	r0, r5
 810e490:	f001 ffe2 	bl	8110458 <_sbrk_r>
 810e494:	3001      	adds	r0, #1
 810e496:	d1f2      	bne.n	810e47e <sbrk_aligned+0x22>
 810e498:	e7ef      	b.n	810e47a <sbrk_aligned+0x1e>
 810e49a:	bf00      	nop
 810e49c:	10004fa8 	.word	0x10004fa8

0810e4a0 <_malloc_r>:
 810e4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810e4a4:	1ccd      	adds	r5, r1, #3
 810e4a6:	f025 0503 	bic.w	r5, r5, #3
 810e4aa:	3508      	adds	r5, #8
 810e4ac:	2d0c      	cmp	r5, #12
 810e4ae:	bf38      	it	cc
 810e4b0:	250c      	movcc	r5, #12
 810e4b2:	2d00      	cmp	r5, #0
 810e4b4:	4606      	mov	r6, r0
 810e4b6:	db01      	blt.n	810e4bc <_malloc_r+0x1c>
 810e4b8:	42a9      	cmp	r1, r5
 810e4ba:	d904      	bls.n	810e4c6 <_malloc_r+0x26>
 810e4bc:	230c      	movs	r3, #12
 810e4be:	6033      	str	r3, [r6, #0]
 810e4c0:	2000      	movs	r0, #0
 810e4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810e4c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810e59c <_malloc_r+0xfc>
 810e4ca:	f000 f869 	bl	810e5a0 <__malloc_lock>
 810e4ce:	f8d8 3000 	ldr.w	r3, [r8]
 810e4d2:	461c      	mov	r4, r3
 810e4d4:	bb44      	cbnz	r4, 810e528 <_malloc_r+0x88>
 810e4d6:	4629      	mov	r1, r5
 810e4d8:	4630      	mov	r0, r6
 810e4da:	f7ff ffbf 	bl	810e45c <sbrk_aligned>
 810e4de:	1c43      	adds	r3, r0, #1
 810e4e0:	4604      	mov	r4, r0
 810e4e2:	d158      	bne.n	810e596 <_malloc_r+0xf6>
 810e4e4:	f8d8 4000 	ldr.w	r4, [r8]
 810e4e8:	4627      	mov	r7, r4
 810e4ea:	2f00      	cmp	r7, #0
 810e4ec:	d143      	bne.n	810e576 <_malloc_r+0xd6>
 810e4ee:	2c00      	cmp	r4, #0
 810e4f0:	d04b      	beq.n	810e58a <_malloc_r+0xea>
 810e4f2:	6823      	ldr	r3, [r4, #0]
 810e4f4:	4639      	mov	r1, r7
 810e4f6:	4630      	mov	r0, r6
 810e4f8:	eb04 0903 	add.w	r9, r4, r3
 810e4fc:	f001 ffac 	bl	8110458 <_sbrk_r>
 810e500:	4581      	cmp	r9, r0
 810e502:	d142      	bne.n	810e58a <_malloc_r+0xea>
 810e504:	6821      	ldr	r1, [r4, #0]
 810e506:	1a6d      	subs	r5, r5, r1
 810e508:	4629      	mov	r1, r5
 810e50a:	4630      	mov	r0, r6
 810e50c:	f7ff ffa6 	bl	810e45c <sbrk_aligned>
 810e510:	3001      	adds	r0, #1
 810e512:	d03a      	beq.n	810e58a <_malloc_r+0xea>
 810e514:	6823      	ldr	r3, [r4, #0]
 810e516:	442b      	add	r3, r5
 810e518:	6023      	str	r3, [r4, #0]
 810e51a:	f8d8 3000 	ldr.w	r3, [r8]
 810e51e:	685a      	ldr	r2, [r3, #4]
 810e520:	bb62      	cbnz	r2, 810e57c <_malloc_r+0xdc>
 810e522:	f8c8 7000 	str.w	r7, [r8]
 810e526:	e00f      	b.n	810e548 <_malloc_r+0xa8>
 810e528:	6822      	ldr	r2, [r4, #0]
 810e52a:	1b52      	subs	r2, r2, r5
 810e52c:	d420      	bmi.n	810e570 <_malloc_r+0xd0>
 810e52e:	2a0b      	cmp	r2, #11
 810e530:	d917      	bls.n	810e562 <_malloc_r+0xc2>
 810e532:	1961      	adds	r1, r4, r5
 810e534:	42a3      	cmp	r3, r4
 810e536:	6025      	str	r5, [r4, #0]
 810e538:	bf18      	it	ne
 810e53a:	6059      	strne	r1, [r3, #4]
 810e53c:	6863      	ldr	r3, [r4, #4]
 810e53e:	bf08      	it	eq
 810e540:	f8c8 1000 	streq.w	r1, [r8]
 810e544:	5162      	str	r2, [r4, r5]
 810e546:	604b      	str	r3, [r1, #4]
 810e548:	4630      	mov	r0, r6
 810e54a:	f000 f82f 	bl	810e5ac <__malloc_unlock>
 810e54e:	f104 000b 	add.w	r0, r4, #11
 810e552:	1d23      	adds	r3, r4, #4
 810e554:	f020 0007 	bic.w	r0, r0, #7
 810e558:	1ac2      	subs	r2, r0, r3
 810e55a:	bf1c      	itt	ne
 810e55c:	1a1b      	subne	r3, r3, r0
 810e55e:	50a3      	strne	r3, [r4, r2]
 810e560:	e7af      	b.n	810e4c2 <_malloc_r+0x22>
 810e562:	6862      	ldr	r2, [r4, #4]
 810e564:	42a3      	cmp	r3, r4
 810e566:	bf0c      	ite	eq
 810e568:	f8c8 2000 	streq.w	r2, [r8]
 810e56c:	605a      	strne	r2, [r3, #4]
 810e56e:	e7eb      	b.n	810e548 <_malloc_r+0xa8>
 810e570:	4623      	mov	r3, r4
 810e572:	6864      	ldr	r4, [r4, #4]
 810e574:	e7ae      	b.n	810e4d4 <_malloc_r+0x34>
 810e576:	463c      	mov	r4, r7
 810e578:	687f      	ldr	r7, [r7, #4]
 810e57a:	e7b6      	b.n	810e4ea <_malloc_r+0x4a>
 810e57c:	461a      	mov	r2, r3
 810e57e:	685b      	ldr	r3, [r3, #4]
 810e580:	42a3      	cmp	r3, r4
 810e582:	d1fb      	bne.n	810e57c <_malloc_r+0xdc>
 810e584:	2300      	movs	r3, #0
 810e586:	6053      	str	r3, [r2, #4]
 810e588:	e7de      	b.n	810e548 <_malloc_r+0xa8>
 810e58a:	230c      	movs	r3, #12
 810e58c:	6033      	str	r3, [r6, #0]
 810e58e:	4630      	mov	r0, r6
 810e590:	f000 f80c 	bl	810e5ac <__malloc_unlock>
 810e594:	e794      	b.n	810e4c0 <_malloc_r+0x20>
 810e596:	6005      	str	r5, [r0, #0]
 810e598:	e7d6      	b.n	810e548 <_malloc_r+0xa8>
 810e59a:	bf00      	nop
 810e59c:	10004fac 	.word	0x10004fac

0810e5a0 <__malloc_lock>:
 810e5a0:	4801      	ldr	r0, [pc, #4]	@ (810e5a8 <__malloc_lock+0x8>)
 810e5a2:	f7f7 bb61 	b.w	8105c68 <__retarget_lock_acquire_recursive>
 810e5a6:	bf00      	nop
 810e5a8:	100005b4 	.word	0x100005b4

0810e5ac <__malloc_unlock>:
 810e5ac:	4801      	ldr	r0, [pc, #4]	@ (810e5b4 <__malloc_unlock+0x8>)
 810e5ae:	f7f7 bb70 	b.w	8105c92 <__retarget_lock_release_recursive>
 810e5b2:	bf00      	nop
 810e5b4:	100005b4 	.word	0x100005b4

0810e5b8 <sulp>:
 810e5b8:	b570      	push	{r4, r5, r6, lr}
 810e5ba:	4604      	mov	r4, r0
 810e5bc:	460d      	mov	r5, r1
 810e5be:	ec45 4b10 	vmov	d0, r4, r5
 810e5c2:	4616      	mov	r6, r2
 810e5c4:	f003 fd0e 	bl	8111fe4 <__ulp>
 810e5c8:	ec51 0b10 	vmov	r0, r1, d0
 810e5cc:	b17e      	cbz	r6, 810e5ee <sulp+0x36>
 810e5ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810e5d2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810e5d6:	2b00      	cmp	r3, #0
 810e5d8:	dd09      	ble.n	810e5ee <sulp+0x36>
 810e5da:	051b      	lsls	r3, r3, #20
 810e5dc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 810e5e0:	2400      	movs	r4, #0
 810e5e2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 810e5e6:	4622      	mov	r2, r4
 810e5e8:	462b      	mov	r3, r5
 810e5ea:	f7f2 f88d 	bl	8100708 <__aeabi_dmul>
 810e5ee:	ec41 0b10 	vmov	d0, r0, r1
 810e5f2:	bd70      	pop	{r4, r5, r6, pc}
 810e5f4:	0000      	movs	r0, r0
	...

0810e5f8 <_strtod_l>:
 810e5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e5fc:	b09f      	sub	sp, #124	@ 0x7c
 810e5fe:	460c      	mov	r4, r1
 810e600:	9217      	str	r2, [sp, #92]	@ 0x5c
 810e602:	2200      	movs	r2, #0
 810e604:	921a      	str	r2, [sp, #104]	@ 0x68
 810e606:	9005      	str	r0, [sp, #20]
 810e608:	f04f 0a00 	mov.w	sl, #0
 810e60c:	f04f 0b00 	mov.w	fp, #0
 810e610:	460a      	mov	r2, r1
 810e612:	9219      	str	r2, [sp, #100]	@ 0x64
 810e614:	7811      	ldrb	r1, [r2, #0]
 810e616:	292b      	cmp	r1, #43	@ 0x2b
 810e618:	d04a      	beq.n	810e6b0 <_strtod_l+0xb8>
 810e61a:	d838      	bhi.n	810e68e <_strtod_l+0x96>
 810e61c:	290d      	cmp	r1, #13
 810e61e:	d832      	bhi.n	810e686 <_strtod_l+0x8e>
 810e620:	2908      	cmp	r1, #8
 810e622:	d832      	bhi.n	810e68a <_strtod_l+0x92>
 810e624:	2900      	cmp	r1, #0
 810e626:	d03b      	beq.n	810e6a0 <_strtod_l+0xa8>
 810e628:	2200      	movs	r2, #0
 810e62a:	920e      	str	r2, [sp, #56]	@ 0x38
 810e62c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 810e62e:	782a      	ldrb	r2, [r5, #0]
 810e630:	2a30      	cmp	r2, #48	@ 0x30
 810e632:	f040 80b2 	bne.w	810e79a <_strtod_l+0x1a2>
 810e636:	786a      	ldrb	r2, [r5, #1]
 810e638:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810e63c:	2a58      	cmp	r2, #88	@ 0x58
 810e63e:	d16e      	bne.n	810e71e <_strtod_l+0x126>
 810e640:	9302      	str	r3, [sp, #8]
 810e642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810e644:	9301      	str	r3, [sp, #4]
 810e646:	ab1a      	add	r3, sp, #104	@ 0x68
 810e648:	9300      	str	r3, [sp, #0]
 810e64a:	4a8f      	ldr	r2, [pc, #572]	@ (810e888 <_strtod_l+0x290>)
 810e64c:	9805      	ldr	r0, [sp, #20]
 810e64e:	ab1b      	add	r3, sp, #108	@ 0x6c
 810e650:	a919      	add	r1, sp, #100	@ 0x64
 810e652:	f002 fe77 	bl	8111344 <__gethex>
 810e656:	f010 060f 	ands.w	r6, r0, #15
 810e65a:	4604      	mov	r4, r0
 810e65c:	d005      	beq.n	810e66a <_strtod_l+0x72>
 810e65e:	2e06      	cmp	r6, #6
 810e660:	d128      	bne.n	810e6b4 <_strtod_l+0xbc>
 810e662:	3501      	adds	r5, #1
 810e664:	2300      	movs	r3, #0
 810e666:	9519      	str	r5, [sp, #100]	@ 0x64
 810e668:	930e      	str	r3, [sp, #56]	@ 0x38
 810e66a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810e66c:	2b00      	cmp	r3, #0
 810e66e:	f040 858e 	bne.w	810f18e <_strtod_l+0xb96>
 810e672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810e674:	b1cb      	cbz	r3, 810e6aa <_strtod_l+0xb2>
 810e676:	4652      	mov	r2, sl
 810e678:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 810e67c:	ec43 2b10 	vmov	d0, r2, r3
 810e680:	b01f      	add	sp, #124	@ 0x7c
 810e682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e686:	2920      	cmp	r1, #32
 810e688:	d1ce      	bne.n	810e628 <_strtod_l+0x30>
 810e68a:	3201      	adds	r2, #1
 810e68c:	e7c1      	b.n	810e612 <_strtod_l+0x1a>
 810e68e:	292d      	cmp	r1, #45	@ 0x2d
 810e690:	d1ca      	bne.n	810e628 <_strtod_l+0x30>
 810e692:	2101      	movs	r1, #1
 810e694:	910e      	str	r1, [sp, #56]	@ 0x38
 810e696:	1c51      	adds	r1, r2, #1
 810e698:	9119      	str	r1, [sp, #100]	@ 0x64
 810e69a:	7852      	ldrb	r2, [r2, #1]
 810e69c:	2a00      	cmp	r2, #0
 810e69e:	d1c5      	bne.n	810e62c <_strtod_l+0x34>
 810e6a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810e6a2:	9419      	str	r4, [sp, #100]	@ 0x64
 810e6a4:	2b00      	cmp	r3, #0
 810e6a6:	f040 8570 	bne.w	810f18a <_strtod_l+0xb92>
 810e6aa:	4652      	mov	r2, sl
 810e6ac:	465b      	mov	r3, fp
 810e6ae:	e7e5      	b.n	810e67c <_strtod_l+0x84>
 810e6b0:	2100      	movs	r1, #0
 810e6b2:	e7ef      	b.n	810e694 <_strtod_l+0x9c>
 810e6b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810e6b6:	b13a      	cbz	r2, 810e6c8 <_strtod_l+0xd0>
 810e6b8:	2135      	movs	r1, #53	@ 0x35
 810e6ba:	a81c      	add	r0, sp, #112	@ 0x70
 810e6bc:	f003 fd8c 	bl	81121d8 <__copybits>
 810e6c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810e6c2:	9805      	ldr	r0, [sp, #20]
 810e6c4:	f003 f962 	bl	811198c <_Bfree>
 810e6c8:	3e01      	subs	r6, #1
 810e6ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 810e6cc:	2e04      	cmp	r6, #4
 810e6ce:	d806      	bhi.n	810e6de <_strtod_l+0xe6>
 810e6d0:	e8df f006 	tbb	[pc, r6]
 810e6d4:	201d0314 	.word	0x201d0314
 810e6d8:	14          	.byte	0x14
 810e6d9:	00          	.byte	0x00
 810e6da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 810e6de:	05e1      	lsls	r1, r4, #23
 810e6e0:	bf48      	it	mi
 810e6e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 810e6e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810e6ea:	0d1b      	lsrs	r3, r3, #20
 810e6ec:	051b      	lsls	r3, r3, #20
 810e6ee:	2b00      	cmp	r3, #0
 810e6f0:	d1bb      	bne.n	810e66a <_strtod_l+0x72>
 810e6f2:	f001 fed3 	bl	811049c <__errno>
 810e6f6:	2322      	movs	r3, #34	@ 0x22
 810e6f8:	6003      	str	r3, [r0, #0]
 810e6fa:	e7b6      	b.n	810e66a <_strtod_l+0x72>
 810e6fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 810e700:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 810e704:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 810e708:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810e70c:	e7e7      	b.n	810e6de <_strtod_l+0xe6>
 810e70e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 810e890 <_strtod_l+0x298>
 810e712:	e7e4      	b.n	810e6de <_strtod_l+0xe6>
 810e714:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 810e718:	f04f 3aff 	mov.w	sl, #4294967295
 810e71c:	e7df      	b.n	810e6de <_strtod_l+0xe6>
 810e71e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810e720:	1c5a      	adds	r2, r3, #1
 810e722:	9219      	str	r2, [sp, #100]	@ 0x64
 810e724:	785b      	ldrb	r3, [r3, #1]
 810e726:	2b30      	cmp	r3, #48	@ 0x30
 810e728:	d0f9      	beq.n	810e71e <_strtod_l+0x126>
 810e72a:	2b00      	cmp	r3, #0
 810e72c:	d09d      	beq.n	810e66a <_strtod_l+0x72>
 810e72e:	2301      	movs	r3, #1
 810e730:	2700      	movs	r7, #0
 810e732:	9308      	str	r3, [sp, #32]
 810e734:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810e736:	930c      	str	r3, [sp, #48]	@ 0x30
 810e738:	970b      	str	r7, [sp, #44]	@ 0x2c
 810e73a:	46b9      	mov	r9, r7
 810e73c:	220a      	movs	r2, #10
 810e73e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 810e740:	7805      	ldrb	r5, [r0, #0]
 810e742:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 810e746:	b2d9      	uxtb	r1, r3
 810e748:	2909      	cmp	r1, #9
 810e74a:	d928      	bls.n	810e79e <_strtod_l+0x1a6>
 810e74c:	494f      	ldr	r1, [pc, #316]	@ (810e88c <_strtod_l+0x294>)
 810e74e:	2201      	movs	r2, #1
 810e750:	f001 fe38 	bl	81103c4 <strncmp>
 810e754:	2800      	cmp	r0, #0
 810e756:	d032      	beq.n	810e7be <_strtod_l+0x1c6>
 810e758:	2000      	movs	r0, #0
 810e75a:	462a      	mov	r2, r5
 810e75c:	900a      	str	r0, [sp, #40]	@ 0x28
 810e75e:	464d      	mov	r5, r9
 810e760:	4603      	mov	r3, r0
 810e762:	2a65      	cmp	r2, #101	@ 0x65
 810e764:	d001      	beq.n	810e76a <_strtod_l+0x172>
 810e766:	2a45      	cmp	r2, #69	@ 0x45
 810e768:	d114      	bne.n	810e794 <_strtod_l+0x19c>
 810e76a:	b91d      	cbnz	r5, 810e774 <_strtod_l+0x17c>
 810e76c:	9a08      	ldr	r2, [sp, #32]
 810e76e:	4302      	orrs	r2, r0
 810e770:	d096      	beq.n	810e6a0 <_strtod_l+0xa8>
 810e772:	2500      	movs	r5, #0
 810e774:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 810e776:	1c62      	adds	r2, r4, #1
 810e778:	9219      	str	r2, [sp, #100]	@ 0x64
 810e77a:	7862      	ldrb	r2, [r4, #1]
 810e77c:	2a2b      	cmp	r2, #43	@ 0x2b
 810e77e:	d07a      	beq.n	810e876 <_strtod_l+0x27e>
 810e780:	2a2d      	cmp	r2, #45	@ 0x2d
 810e782:	d07e      	beq.n	810e882 <_strtod_l+0x28a>
 810e784:	f04f 0c00 	mov.w	ip, #0
 810e788:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 810e78c:	2909      	cmp	r1, #9
 810e78e:	f240 8085 	bls.w	810e89c <_strtod_l+0x2a4>
 810e792:	9419      	str	r4, [sp, #100]	@ 0x64
 810e794:	f04f 0800 	mov.w	r8, #0
 810e798:	e0a5      	b.n	810e8e6 <_strtod_l+0x2ee>
 810e79a:	2300      	movs	r3, #0
 810e79c:	e7c8      	b.n	810e730 <_strtod_l+0x138>
 810e79e:	f1b9 0f08 	cmp.w	r9, #8
 810e7a2:	bfd8      	it	le
 810e7a4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 810e7a6:	f100 0001 	add.w	r0, r0, #1
 810e7aa:	bfda      	itte	le
 810e7ac:	fb02 3301 	mlale	r3, r2, r1, r3
 810e7b0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 810e7b2:	fb02 3707 	mlagt	r7, r2, r7, r3
 810e7b6:	f109 0901 	add.w	r9, r9, #1
 810e7ba:	9019      	str	r0, [sp, #100]	@ 0x64
 810e7bc:	e7bf      	b.n	810e73e <_strtod_l+0x146>
 810e7be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810e7c0:	1c5a      	adds	r2, r3, #1
 810e7c2:	9219      	str	r2, [sp, #100]	@ 0x64
 810e7c4:	785a      	ldrb	r2, [r3, #1]
 810e7c6:	f1b9 0f00 	cmp.w	r9, #0
 810e7ca:	d03b      	beq.n	810e844 <_strtod_l+0x24c>
 810e7cc:	900a      	str	r0, [sp, #40]	@ 0x28
 810e7ce:	464d      	mov	r5, r9
 810e7d0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 810e7d4:	2b09      	cmp	r3, #9
 810e7d6:	d912      	bls.n	810e7fe <_strtod_l+0x206>
 810e7d8:	2301      	movs	r3, #1
 810e7da:	e7c2      	b.n	810e762 <_strtod_l+0x16a>
 810e7dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810e7de:	1c5a      	adds	r2, r3, #1
 810e7e0:	9219      	str	r2, [sp, #100]	@ 0x64
 810e7e2:	785a      	ldrb	r2, [r3, #1]
 810e7e4:	3001      	adds	r0, #1
 810e7e6:	2a30      	cmp	r2, #48	@ 0x30
 810e7e8:	d0f8      	beq.n	810e7dc <_strtod_l+0x1e4>
 810e7ea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 810e7ee:	2b08      	cmp	r3, #8
 810e7f0:	f200 84d2 	bhi.w	810f198 <_strtod_l+0xba0>
 810e7f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810e7f6:	900a      	str	r0, [sp, #40]	@ 0x28
 810e7f8:	2000      	movs	r0, #0
 810e7fa:	930c      	str	r3, [sp, #48]	@ 0x30
 810e7fc:	4605      	mov	r5, r0
 810e7fe:	3a30      	subs	r2, #48	@ 0x30
 810e800:	f100 0301 	add.w	r3, r0, #1
 810e804:	d018      	beq.n	810e838 <_strtod_l+0x240>
 810e806:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810e808:	4419      	add	r1, r3
 810e80a:	910a      	str	r1, [sp, #40]	@ 0x28
 810e80c:	462e      	mov	r6, r5
 810e80e:	f04f 0e0a 	mov.w	lr, #10
 810e812:	1c71      	adds	r1, r6, #1
 810e814:	eba1 0c05 	sub.w	ip, r1, r5
 810e818:	4563      	cmp	r3, ip
 810e81a:	dc15      	bgt.n	810e848 <_strtod_l+0x250>
 810e81c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 810e820:	182b      	adds	r3, r5, r0
 810e822:	2b08      	cmp	r3, #8
 810e824:	f105 0501 	add.w	r5, r5, #1
 810e828:	4405      	add	r5, r0
 810e82a:	dc1a      	bgt.n	810e862 <_strtod_l+0x26a>
 810e82c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810e82e:	230a      	movs	r3, #10
 810e830:	fb03 2301 	mla	r3, r3, r1, r2
 810e834:	930b      	str	r3, [sp, #44]	@ 0x2c
 810e836:	2300      	movs	r3, #0
 810e838:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810e83a:	1c51      	adds	r1, r2, #1
 810e83c:	9119      	str	r1, [sp, #100]	@ 0x64
 810e83e:	7852      	ldrb	r2, [r2, #1]
 810e840:	4618      	mov	r0, r3
 810e842:	e7c5      	b.n	810e7d0 <_strtod_l+0x1d8>
 810e844:	4648      	mov	r0, r9
 810e846:	e7ce      	b.n	810e7e6 <_strtod_l+0x1ee>
 810e848:	2e08      	cmp	r6, #8
 810e84a:	dc05      	bgt.n	810e858 <_strtod_l+0x260>
 810e84c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 810e84e:	fb0e f606 	mul.w	r6, lr, r6
 810e852:	960b      	str	r6, [sp, #44]	@ 0x2c
 810e854:	460e      	mov	r6, r1
 810e856:	e7dc      	b.n	810e812 <_strtod_l+0x21a>
 810e858:	2910      	cmp	r1, #16
 810e85a:	bfd8      	it	le
 810e85c:	fb0e f707 	mulle.w	r7, lr, r7
 810e860:	e7f8      	b.n	810e854 <_strtod_l+0x25c>
 810e862:	2b0f      	cmp	r3, #15
 810e864:	bfdc      	itt	le
 810e866:	230a      	movle	r3, #10
 810e868:	fb03 2707 	mlale	r7, r3, r7, r2
 810e86c:	e7e3      	b.n	810e836 <_strtod_l+0x23e>
 810e86e:	2300      	movs	r3, #0
 810e870:	930a      	str	r3, [sp, #40]	@ 0x28
 810e872:	2301      	movs	r3, #1
 810e874:	e77a      	b.n	810e76c <_strtod_l+0x174>
 810e876:	f04f 0c00 	mov.w	ip, #0
 810e87a:	1ca2      	adds	r2, r4, #2
 810e87c:	9219      	str	r2, [sp, #100]	@ 0x64
 810e87e:	78a2      	ldrb	r2, [r4, #2]
 810e880:	e782      	b.n	810e788 <_strtod_l+0x190>
 810e882:	f04f 0c01 	mov.w	ip, #1
 810e886:	e7f8      	b.n	810e87a <_strtod_l+0x282>
 810e888:	081131c8 	.word	0x081131c8
 810e88c:	08112fdc 	.word	0x08112fdc
 810e890:	7ff00000 	.word	0x7ff00000
 810e894:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810e896:	1c51      	adds	r1, r2, #1
 810e898:	9119      	str	r1, [sp, #100]	@ 0x64
 810e89a:	7852      	ldrb	r2, [r2, #1]
 810e89c:	2a30      	cmp	r2, #48	@ 0x30
 810e89e:	d0f9      	beq.n	810e894 <_strtod_l+0x29c>
 810e8a0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 810e8a4:	2908      	cmp	r1, #8
 810e8a6:	f63f af75 	bhi.w	810e794 <_strtod_l+0x19c>
 810e8aa:	3a30      	subs	r2, #48	@ 0x30
 810e8ac:	9209      	str	r2, [sp, #36]	@ 0x24
 810e8ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810e8b0:	920f      	str	r2, [sp, #60]	@ 0x3c
 810e8b2:	f04f 080a 	mov.w	r8, #10
 810e8b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810e8b8:	1c56      	adds	r6, r2, #1
 810e8ba:	9619      	str	r6, [sp, #100]	@ 0x64
 810e8bc:	7852      	ldrb	r2, [r2, #1]
 810e8be:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 810e8c2:	f1be 0f09 	cmp.w	lr, #9
 810e8c6:	d939      	bls.n	810e93c <_strtod_l+0x344>
 810e8c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 810e8ca:	1a76      	subs	r6, r6, r1
 810e8cc:	2e08      	cmp	r6, #8
 810e8ce:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 810e8d2:	dc03      	bgt.n	810e8dc <_strtod_l+0x2e4>
 810e8d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810e8d6:	4588      	cmp	r8, r1
 810e8d8:	bfa8      	it	ge
 810e8da:	4688      	movge	r8, r1
 810e8dc:	f1bc 0f00 	cmp.w	ip, #0
 810e8e0:	d001      	beq.n	810e8e6 <_strtod_l+0x2ee>
 810e8e2:	f1c8 0800 	rsb	r8, r8, #0
 810e8e6:	2d00      	cmp	r5, #0
 810e8e8:	d14e      	bne.n	810e988 <_strtod_l+0x390>
 810e8ea:	9908      	ldr	r1, [sp, #32]
 810e8ec:	4308      	orrs	r0, r1
 810e8ee:	f47f aebc 	bne.w	810e66a <_strtod_l+0x72>
 810e8f2:	2b00      	cmp	r3, #0
 810e8f4:	f47f aed4 	bne.w	810e6a0 <_strtod_l+0xa8>
 810e8f8:	2a69      	cmp	r2, #105	@ 0x69
 810e8fa:	d028      	beq.n	810e94e <_strtod_l+0x356>
 810e8fc:	dc25      	bgt.n	810e94a <_strtod_l+0x352>
 810e8fe:	2a49      	cmp	r2, #73	@ 0x49
 810e900:	d025      	beq.n	810e94e <_strtod_l+0x356>
 810e902:	2a4e      	cmp	r2, #78	@ 0x4e
 810e904:	f47f aecc 	bne.w	810e6a0 <_strtod_l+0xa8>
 810e908:	499a      	ldr	r1, [pc, #616]	@ (810eb74 <_strtod_l+0x57c>)
 810e90a:	a819      	add	r0, sp, #100	@ 0x64
 810e90c:	f002 ff3c 	bl	8111788 <__match>
 810e910:	2800      	cmp	r0, #0
 810e912:	f43f aec5 	beq.w	810e6a0 <_strtod_l+0xa8>
 810e916:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810e918:	781b      	ldrb	r3, [r3, #0]
 810e91a:	2b28      	cmp	r3, #40	@ 0x28
 810e91c:	d12e      	bne.n	810e97c <_strtod_l+0x384>
 810e91e:	4996      	ldr	r1, [pc, #600]	@ (810eb78 <_strtod_l+0x580>)
 810e920:	aa1c      	add	r2, sp, #112	@ 0x70
 810e922:	a819      	add	r0, sp, #100	@ 0x64
 810e924:	f002 ff44 	bl	81117b0 <__hexnan>
 810e928:	2805      	cmp	r0, #5
 810e92a:	d127      	bne.n	810e97c <_strtod_l+0x384>
 810e92c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 810e92e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 810e932:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 810e936:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 810e93a:	e696      	b.n	810e66a <_strtod_l+0x72>
 810e93c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810e93e:	fb08 2101 	mla	r1, r8, r1, r2
 810e942:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 810e946:	9209      	str	r2, [sp, #36]	@ 0x24
 810e948:	e7b5      	b.n	810e8b6 <_strtod_l+0x2be>
 810e94a:	2a6e      	cmp	r2, #110	@ 0x6e
 810e94c:	e7da      	b.n	810e904 <_strtod_l+0x30c>
 810e94e:	498b      	ldr	r1, [pc, #556]	@ (810eb7c <_strtod_l+0x584>)
 810e950:	a819      	add	r0, sp, #100	@ 0x64
 810e952:	f002 ff19 	bl	8111788 <__match>
 810e956:	2800      	cmp	r0, #0
 810e958:	f43f aea2 	beq.w	810e6a0 <_strtod_l+0xa8>
 810e95c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810e95e:	4988      	ldr	r1, [pc, #544]	@ (810eb80 <_strtod_l+0x588>)
 810e960:	3b01      	subs	r3, #1
 810e962:	a819      	add	r0, sp, #100	@ 0x64
 810e964:	9319      	str	r3, [sp, #100]	@ 0x64
 810e966:	f002 ff0f 	bl	8111788 <__match>
 810e96a:	b910      	cbnz	r0, 810e972 <_strtod_l+0x37a>
 810e96c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810e96e:	3301      	adds	r3, #1
 810e970:	9319      	str	r3, [sp, #100]	@ 0x64
 810e972:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 810eb90 <_strtod_l+0x598>
 810e976:	f04f 0a00 	mov.w	sl, #0
 810e97a:	e676      	b.n	810e66a <_strtod_l+0x72>
 810e97c:	4881      	ldr	r0, [pc, #516]	@ (810eb84 <_strtod_l+0x58c>)
 810e97e:	f001 fdc7 	bl	8110510 <nan>
 810e982:	ec5b ab10 	vmov	sl, fp, d0
 810e986:	e670      	b.n	810e66a <_strtod_l+0x72>
 810e988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810e98a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 810e98c:	eba8 0303 	sub.w	r3, r8, r3
 810e990:	f1b9 0f00 	cmp.w	r9, #0
 810e994:	bf08      	it	eq
 810e996:	46a9      	moveq	r9, r5
 810e998:	2d10      	cmp	r5, #16
 810e99a:	9309      	str	r3, [sp, #36]	@ 0x24
 810e99c:	462c      	mov	r4, r5
 810e99e:	bfa8      	it	ge
 810e9a0:	2410      	movge	r4, #16
 810e9a2:	f7f1 fe37 	bl	8100614 <__aeabi_ui2d>
 810e9a6:	2d09      	cmp	r5, #9
 810e9a8:	4682      	mov	sl, r0
 810e9aa:	468b      	mov	fp, r1
 810e9ac:	dc13      	bgt.n	810e9d6 <_strtod_l+0x3de>
 810e9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810e9b0:	2b00      	cmp	r3, #0
 810e9b2:	f43f ae5a 	beq.w	810e66a <_strtod_l+0x72>
 810e9b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810e9b8:	dd78      	ble.n	810eaac <_strtod_l+0x4b4>
 810e9ba:	2b16      	cmp	r3, #22
 810e9bc:	dc5f      	bgt.n	810ea7e <_strtod_l+0x486>
 810e9be:	4972      	ldr	r1, [pc, #456]	@ (810eb88 <_strtod_l+0x590>)
 810e9c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810e9c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e9c8:	4652      	mov	r2, sl
 810e9ca:	465b      	mov	r3, fp
 810e9cc:	f7f1 fe9c 	bl	8100708 <__aeabi_dmul>
 810e9d0:	4682      	mov	sl, r0
 810e9d2:	468b      	mov	fp, r1
 810e9d4:	e649      	b.n	810e66a <_strtod_l+0x72>
 810e9d6:	4b6c      	ldr	r3, [pc, #432]	@ (810eb88 <_strtod_l+0x590>)
 810e9d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810e9dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 810e9e0:	f7f1 fe92 	bl	8100708 <__aeabi_dmul>
 810e9e4:	4682      	mov	sl, r0
 810e9e6:	4638      	mov	r0, r7
 810e9e8:	468b      	mov	fp, r1
 810e9ea:	f7f1 fe13 	bl	8100614 <__aeabi_ui2d>
 810e9ee:	4602      	mov	r2, r0
 810e9f0:	460b      	mov	r3, r1
 810e9f2:	4650      	mov	r0, sl
 810e9f4:	4659      	mov	r1, fp
 810e9f6:	f7f1 fcd1 	bl	810039c <__adddf3>
 810e9fa:	2d0f      	cmp	r5, #15
 810e9fc:	4682      	mov	sl, r0
 810e9fe:	468b      	mov	fp, r1
 810ea00:	ddd5      	ble.n	810e9ae <_strtod_l+0x3b6>
 810ea02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ea04:	1b2c      	subs	r4, r5, r4
 810ea06:	441c      	add	r4, r3
 810ea08:	2c00      	cmp	r4, #0
 810ea0a:	f340 8093 	ble.w	810eb34 <_strtod_l+0x53c>
 810ea0e:	f014 030f 	ands.w	r3, r4, #15
 810ea12:	d00a      	beq.n	810ea2a <_strtod_l+0x432>
 810ea14:	495c      	ldr	r1, [pc, #368]	@ (810eb88 <_strtod_l+0x590>)
 810ea16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810ea1a:	4652      	mov	r2, sl
 810ea1c:	465b      	mov	r3, fp
 810ea1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810ea22:	f7f1 fe71 	bl	8100708 <__aeabi_dmul>
 810ea26:	4682      	mov	sl, r0
 810ea28:	468b      	mov	fp, r1
 810ea2a:	f034 040f 	bics.w	r4, r4, #15
 810ea2e:	d073      	beq.n	810eb18 <_strtod_l+0x520>
 810ea30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 810ea34:	dd49      	ble.n	810eaca <_strtod_l+0x4d2>
 810ea36:	2400      	movs	r4, #0
 810ea38:	46a0      	mov	r8, r4
 810ea3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 810ea3c:	46a1      	mov	r9, r4
 810ea3e:	9a05      	ldr	r2, [sp, #20]
 810ea40:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 810eb90 <_strtod_l+0x598>
 810ea44:	2322      	movs	r3, #34	@ 0x22
 810ea46:	6013      	str	r3, [r2, #0]
 810ea48:	f04f 0a00 	mov.w	sl, #0
 810ea4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810ea4e:	2b00      	cmp	r3, #0
 810ea50:	f43f ae0b 	beq.w	810e66a <_strtod_l+0x72>
 810ea54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810ea56:	9805      	ldr	r0, [sp, #20]
 810ea58:	f002 ff98 	bl	811198c <_Bfree>
 810ea5c:	9805      	ldr	r0, [sp, #20]
 810ea5e:	4649      	mov	r1, r9
 810ea60:	f002 ff94 	bl	811198c <_Bfree>
 810ea64:	9805      	ldr	r0, [sp, #20]
 810ea66:	4641      	mov	r1, r8
 810ea68:	f002 ff90 	bl	811198c <_Bfree>
 810ea6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810ea6e:	9805      	ldr	r0, [sp, #20]
 810ea70:	f002 ff8c 	bl	811198c <_Bfree>
 810ea74:	9805      	ldr	r0, [sp, #20]
 810ea76:	4621      	mov	r1, r4
 810ea78:	f002 ff88 	bl	811198c <_Bfree>
 810ea7c:	e5f5      	b.n	810e66a <_strtod_l+0x72>
 810ea7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810ea80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 810ea84:	4293      	cmp	r3, r2
 810ea86:	dbbc      	blt.n	810ea02 <_strtod_l+0x40a>
 810ea88:	4c3f      	ldr	r4, [pc, #252]	@ (810eb88 <_strtod_l+0x590>)
 810ea8a:	f1c5 050f 	rsb	r5, r5, #15
 810ea8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810ea92:	4652      	mov	r2, sl
 810ea94:	465b      	mov	r3, fp
 810ea96:	e9d1 0100 	ldrd	r0, r1, [r1]
 810ea9a:	f7f1 fe35 	bl	8100708 <__aeabi_dmul>
 810ea9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810eaa0:	1b5d      	subs	r5, r3, r5
 810eaa2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810eaa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 810eaaa:	e78f      	b.n	810e9cc <_strtod_l+0x3d4>
 810eaac:	3316      	adds	r3, #22
 810eaae:	dba8      	blt.n	810ea02 <_strtod_l+0x40a>
 810eab0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810eab2:	eba3 0808 	sub.w	r8, r3, r8
 810eab6:	4b34      	ldr	r3, [pc, #208]	@ (810eb88 <_strtod_l+0x590>)
 810eab8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 810eabc:	e9d8 2300 	ldrd	r2, r3, [r8]
 810eac0:	4650      	mov	r0, sl
 810eac2:	4659      	mov	r1, fp
 810eac4:	f7f1 ff4a 	bl	810095c <__aeabi_ddiv>
 810eac8:	e782      	b.n	810e9d0 <_strtod_l+0x3d8>
 810eaca:	2300      	movs	r3, #0
 810eacc:	4f2f      	ldr	r7, [pc, #188]	@ (810eb8c <_strtod_l+0x594>)
 810eace:	1124      	asrs	r4, r4, #4
 810ead0:	4650      	mov	r0, sl
 810ead2:	4659      	mov	r1, fp
 810ead4:	461e      	mov	r6, r3
 810ead6:	2c01      	cmp	r4, #1
 810ead8:	dc21      	bgt.n	810eb1e <_strtod_l+0x526>
 810eada:	b10b      	cbz	r3, 810eae0 <_strtod_l+0x4e8>
 810eadc:	4682      	mov	sl, r0
 810eade:	468b      	mov	fp, r1
 810eae0:	492a      	ldr	r1, [pc, #168]	@ (810eb8c <_strtod_l+0x594>)
 810eae2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 810eae6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 810eaea:	4652      	mov	r2, sl
 810eaec:	465b      	mov	r3, fp
 810eaee:	e9d1 0100 	ldrd	r0, r1, [r1]
 810eaf2:	f7f1 fe09 	bl	8100708 <__aeabi_dmul>
 810eaf6:	4b26      	ldr	r3, [pc, #152]	@ (810eb90 <_strtod_l+0x598>)
 810eaf8:	460a      	mov	r2, r1
 810eafa:	400b      	ands	r3, r1
 810eafc:	4925      	ldr	r1, [pc, #148]	@ (810eb94 <_strtod_l+0x59c>)
 810eafe:	428b      	cmp	r3, r1
 810eb00:	4682      	mov	sl, r0
 810eb02:	d898      	bhi.n	810ea36 <_strtod_l+0x43e>
 810eb04:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 810eb08:	428b      	cmp	r3, r1
 810eb0a:	bf86      	itte	hi
 810eb0c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 810eb98 <_strtod_l+0x5a0>
 810eb10:	f04f 3aff 	movhi.w	sl, #4294967295
 810eb14:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 810eb18:	2300      	movs	r3, #0
 810eb1a:	9308      	str	r3, [sp, #32]
 810eb1c:	e076      	b.n	810ec0c <_strtod_l+0x614>
 810eb1e:	07e2      	lsls	r2, r4, #31
 810eb20:	d504      	bpl.n	810eb2c <_strtod_l+0x534>
 810eb22:	e9d7 2300 	ldrd	r2, r3, [r7]
 810eb26:	f7f1 fdef 	bl	8100708 <__aeabi_dmul>
 810eb2a:	2301      	movs	r3, #1
 810eb2c:	3601      	adds	r6, #1
 810eb2e:	1064      	asrs	r4, r4, #1
 810eb30:	3708      	adds	r7, #8
 810eb32:	e7d0      	b.n	810ead6 <_strtod_l+0x4de>
 810eb34:	d0f0      	beq.n	810eb18 <_strtod_l+0x520>
 810eb36:	4264      	negs	r4, r4
 810eb38:	f014 020f 	ands.w	r2, r4, #15
 810eb3c:	d00a      	beq.n	810eb54 <_strtod_l+0x55c>
 810eb3e:	4b12      	ldr	r3, [pc, #72]	@ (810eb88 <_strtod_l+0x590>)
 810eb40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810eb44:	4650      	mov	r0, sl
 810eb46:	4659      	mov	r1, fp
 810eb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 810eb4c:	f7f1 ff06 	bl	810095c <__aeabi_ddiv>
 810eb50:	4682      	mov	sl, r0
 810eb52:	468b      	mov	fp, r1
 810eb54:	1124      	asrs	r4, r4, #4
 810eb56:	d0df      	beq.n	810eb18 <_strtod_l+0x520>
 810eb58:	2c1f      	cmp	r4, #31
 810eb5a:	dd1f      	ble.n	810eb9c <_strtod_l+0x5a4>
 810eb5c:	2400      	movs	r4, #0
 810eb5e:	46a0      	mov	r8, r4
 810eb60:	940b      	str	r4, [sp, #44]	@ 0x2c
 810eb62:	46a1      	mov	r9, r4
 810eb64:	9a05      	ldr	r2, [sp, #20]
 810eb66:	2322      	movs	r3, #34	@ 0x22
 810eb68:	f04f 0a00 	mov.w	sl, #0
 810eb6c:	f04f 0b00 	mov.w	fp, #0
 810eb70:	6013      	str	r3, [r2, #0]
 810eb72:	e76b      	b.n	810ea4c <_strtod_l+0x454>
 810eb74:	08112feb 	.word	0x08112feb
 810eb78:	081131b4 	.word	0x081131b4
 810eb7c:	08112fe3 	.word	0x08112fe3
 810eb80:	08113022 	.word	0x08113022
 810eb84:	081131b1 	.word	0x081131b1
 810eb88:	08113240 	.word	0x08113240
 810eb8c:	08113218 	.word	0x08113218
 810eb90:	7ff00000 	.word	0x7ff00000
 810eb94:	7ca00000 	.word	0x7ca00000
 810eb98:	7fefffff 	.word	0x7fefffff
 810eb9c:	f014 0310 	ands.w	r3, r4, #16
 810eba0:	bf18      	it	ne
 810eba2:	236a      	movne	r3, #106	@ 0x6a
 810eba4:	4ea9      	ldr	r6, [pc, #676]	@ (810ee4c <_strtod_l+0x854>)
 810eba6:	9308      	str	r3, [sp, #32]
 810eba8:	4650      	mov	r0, sl
 810ebaa:	4659      	mov	r1, fp
 810ebac:	2300      	movs	r3, #0
 810ebae:	07e7      	lsls	r7, r4, #31
 810ebb0:	d504      	bpl.n	810ebbc <_strtod_l+0x5c4>
 810ebb2:	e9d6 2300 	ldrd	r2, r3, [r6]
 810ebb6:	f7f1 fda7 	bl	8100708 <__aeabi_dmul>
 810ebba:	2301      	movs	r3, #1
 810ebbc:	1064      	asrs	r4, r4, #1
 810ebbe:	f106 0608 	add.w	r6, r6, #8
 810ebc2:	d1f4      	bne.n	810ebae <_strtod_l+0x5b6>
 810ebc4:	b10b      	cbz	r3, 810ebca <_strtod_l+0x5d2>
 810ebc6:	4682      	mov	sl, r0
 810ebc8:	468b      	mov	fp, r1
 810ebca:	9b08      	ldr	r3, [sp, #32]
 810ebcc:	b1b3      	cbz	r3, 810ebfc <_strtod_l+0x604>
 810ebce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810ebd2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 810ebd6:	2b00      	cmp	r3, #0
 810ebd8:	4659      	mov	r1, fp
 810ebda:	dd0f      	ble.n	810ebfc <_strtod_l+0x604>
 810ebdc:	2b1f      	cmp	r3, #31
 810ebde:	dd56      	ble.n	810ec8e <_strtod_l+0x696>
 810ebe0:	2b34      	cmp	r3, #52	@ 0x34
 810ebe2:	bfde      	ittt	le
 810ebe4:	f04f 33ff 	movle.w	r3, #4294967295
 810ebe8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 810ebec:	4093      	lslle	r3, r2
 810ebee:	f04f 0a00 	mov.w	sl, #0
 810ebf2:	bfcc      	ite	gt
 810ebf4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 810ebf8:	ea03 0b01 	andle.w	fp, r3, r1
 810ebfc:	2200      	movs	r2, #0
 810ebfe:	2300      	movs	r3, #0
 810ec00:	4650      	mov	r0, sl
 810ec02:	4659      	mov	r1, fp
 810ec04:	f7f1 ffe8 	bl	8100bd8 <__aeabi_dcmpeq>
 810ec08:	2800      	cmp	r0, #0
 810ec0a:	d1a7      	bne.n	810eb5c <_strtod_l+0x564>
 810ec0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810ec0e:	9300      	str	r3, [sp, #0]
 810ec10:	990c      	ldr	r1, [sp, #48]	@ 0x30
 810ec12:	9805      	ldr	r0, [sp, #20]
 810ec14:	462b      	mov	r3, r5
 810ec16:	464a      	mov	r2, r9
 810ec18:	f002 ff20 	bl	8111a5c <__s2b>
 810ec1c:	900b      	str	r0, [sp, #44]	@ 0x2c
 810ec1e:	2800      	cmp	r0, #0
 810ec20:	f43f af09 	beq.w	810ea36 <_strtod_l+0x43e>
 810ec24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810ec26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810ec28:	2a00      	cmp	r2, #0
 810ec2a:	eba3 0308 	sub.w	r3, r3, r8
 810ec2e:	bfa8      	it	ge
 810ec30:	2300      	movge	r3, #0
 810ec32:	9312      	str	r3, [sp, #72]	@ 0x48
 810ec34:	2400      	movs	r4, #0
 810ec36:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810ec3a:	9316      	str	r3, [sp, #88]	@ 0x58
 810ec3c:	46a0      	mov	r8, r4
 810ec3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810ec40:	9805      	ldr	r0, [sp, #20]
 810ec42:	6859      	ldr	r1, [r3, #4]
 810ec44:	f002 fe62 	bl	811190c <_Balloc>
 810ec48:	4681      	mov	r9, r0
 810ec4a:	2800      	cmp	r0, #0
 810ec4c:	f43f aef7 	beq.w	810ea3e <_strtod_l+0x446>
 810ec50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810ec52:	691a      	ldr	r2, [r3, #16]
 810ec54:	3202      	adds	r2, #2
 810ec56:	f103 010c 	add.w	r1, r3, #12
 810ec5a:	0092      	lsls	r2, r2, #2
 810ec5c:	300c      	adds	r0, #12
 810ec5e:	f001 fc47 	bl	81104f0 <memcpy>
 810ec62:	ec4b ab10 	vmov	d0, sl, fp
 810ec66:	9805      	ldr	r0, [sp, #20]
 810ec68:	aa1c      	add	r2, sp, #112	@ 0x70
 810ec6a:	a91b      	add	r1, sp, #108	@ 0x6c
 810ec6c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 810ec70:	f003 fa28 	bl	81120c4 <__d2b>
 810ec74:	901a      	str	r0, [sp, #104]	@ 0x68
 810ec76:	2800      	cmp	r0, #0
 810ec78:	f43f aee1 	beq.w	810ea3e <_strtod_l+0x446>
 810ec7c:	9805      	ldr	r0, [sp, #20]
 810ec7e:	2101      	movs	r1, #1
 810ec80:	f002 ff82 	bl	8111b88 <__i2b>
 810ec84:	4680      	mov	r8, r0
 810ec86:	b948      	cbnz	r0, 810ec9c <_strtod_l+0x6a4>
 810ec88:	f04f 0800 	mov.w	r8, #0
 810ec8c:	e6d7      	b.n	810ea3e <_strtod_l+0x446>
 810ec8e:	f04f 32ff 	mov.w	r2, #4294967295
 810ec92:	fa02 f303 	lsl.w	r3, r2, r3
 810ec96:	ea03 0a0a 	and.w	sl, r3, sl
 810ec9a:	e7af      	b.n	810ebfc <_strtod_l+0x604>
 810ec9c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 810ec9e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 810eca0:	2d00      	cmp	r5, #0
 810eca2:	bfab      	itete	ge
 810eca4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 810eca6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 810eca8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 810ecaa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 810ecac:	bfac      	ite	ge
 810ecae:	18ef      	addge	r7, r5, r3
 810ecb0:	1b5e      	sublt	r6, r3, r5
 810ecb2:	9b08      	ldr	r3, [sp, #32]
 810ecb4:	1aed      	subs	r5, r5, r3
 810ecb6:	4415      	add	r5, r2
 810ecb8:	4b65      	ldr	r3, [pc, #404]	@ (810ee50 <_strtod_l+0x858>)
 810ecba:	3d01      	subs	r5, #1
 810ecbc:	429d      	cmp	r5, r3
 810ecbe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 810ecc2:	da50      	bge.n	810ed66 <_strtod_l+0x76e>
 810ecc4:	1b5b      	subs	r3, r3, r5
 810ecc6:	2b1f      	cmp	r3, #31
 810ecc8:	eba2 0203 	sub.w	r2, r2, r3
 810eccc:	f04f 0101 	mov.w	r1, #1
 810ecd0:	dc3d      	bgt.n	810ed4e <_strtod_l+0x756>
 810ecd2:	fa01 f303 	lsl.w	r3, r1, r3
 810ecd6:	9313      	str	r3, [sp, #76]	@ 0x4c
 810ecd8:	2300      	movs	r3, #0
 810ecda:	9310      	str	r3, [sp, #64]	@ 0x40
 810ecdc:	18bd      	adds	r5, r7, r2
 810ecde:	9b08      	ldr	r3, [sp, #32]
 810ece0:	42af      	cmp	r7, r5
 810ece2:	4416      	add	r6, r2
 810ece4:	441e      	add	r6, r3
 810ece6:	463b      	mov	r3, r7
 810ece8:	bfa8      	it	ge
 810ecea:	462b      	movge	r3, r5
 810ecec:	42b3      	cmp	r3, r6
 810ecee:	bfa8      	it	ge
 810ecf0:	4633      	movge	r3, r6
 810ecf2:	2b00      	cmp	r3, #0
 810ecf4:	bfc2      	ittt	gt
 810ecf6:	1aed      	subgt	r5, r5, r3
 810ecf8:	1af6      	subgt	r6, r6, r3
 810ecfa:	1aff      	subgt	r7, r7, r3
 810ecfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810ecfe:	2b00      	cmp	r3, #0
 810ed00:	dd16      	ble.n	810ed30 <_strtod_l+0x738>
 810ed02:	4641      	mov	r1, r8
 810ed04:	9805      	ldr	r0, [sp, #20]
 810ed06:	461a      	mov	r2, r3
 810ed08:	f002 fff6 	bl	8111cf8 <__pow5mult>
 810ed0c:	4680      	mov	r8, r0
 810ed0e:	2800      	cmp	r0, #0
 810ed10:	d0ba      	beq.n	810ec88 <_strtod_l+0x690>
 810ed12:	4601      	mov	r1, r0
 810ed14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810ed16:	9805      	ldr	r0, [sp, #20]
 810ed18:	f002 ff4c 	bl	8111bb4 <__multiply>
 810ed1c:	900a      	str	r0, [sp, #40]	@ 0x28
 810ed1e:	2800      	cmp	r0, #0
 810ed20:	f43f ae8d 	beq.w	810ea3e <_strtod_l+0x446>
 810ed24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810ed26:	9805      	ldr	r0, [sp, #20]
 810ed28:	f002 fe30 	bl	811198c <_Bfree>
 810ed2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810ed2e:	931a      	str	r3, [sp, #104]	@ 0x68
 810ed30:	2d00      	cmp	r5, #0
 810ed32:	dc1d      	bgt.n	810ed70 <_strtod_l+0x778>
 810ed34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ed36:	2b00      	cmp	r3, #0
 810ed38:	dd23      	ble.n	810ed82 <_strtod_l+0x78a>
 810ed3a:	4649      	mov	r1, r9
 810ed3c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 810ed3e:	9805      	ldr	r0, [sp, #20]
 810ed40:	f002 ffda 	bl	8111cf8 <__pow5mult>
 810ed44:	4681      	mov	r9, r0
 810ed46:	b9e0      	cbnz	r0, 810ed82 <_strtod_l+0x78a>
 810ed48:	f04f 0900 	mov.w	r9, #0
 810ed4c:	e677      	b.n	810ea3e <_strtod_l+0x446>
 810ed4e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 810ed52:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 810ed56:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 810ed5a:	35e2      	adds	r5, #226	@ 0xe2
 810ed5c:	fa01 f305 	lsl.w	r3, r1, r5
 810ed60:	9310      	str	r3, [sp, #64]	@ 0x40
 810ed62:	9113      	str	r1, [sp, #76]	@ 0x4c
 810ed64:	e7ba      	b.n	810ecdc <_strtod_l+0x6e4>
 810ed66:	2300      	movs	r3, #0
 810ed68:	9310      	str	r3, [sp, #64]	@ 0x40
 810ed6a:	2301      	movs	r3, #1
 810ed6c:	9313      	str	r3, [sp, #76]	@ 0x4c
 810ed6e:	e7b5      	b.n	810ecdc <_strtod_l+0x6e4>
 810ed70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810ed72:	9805      	ldr	r0, [sp, #20]
 810ed74:	462a      	mov	r2, r5
 810ed76:	f003 f819 	bl	8111dac <__lshift>
 810ed7a:	901a      	str	r0, [sp, #104]	@ 0x68
 810ed7c:	2800      	cmp	r0, #0
 810ed7e:	d1d9      	bne.n	810ed34 <_strtod_l+0x73c>
 810ed80:	e65d      	b.n	810ea3e <_strtod_l+0x446>
 810ed82:	2e00      	cmp	r6, #0
 810ed84:	dd07      	ble.n	810ed96 <_strtod_l+0x79e>
 810ed86:	4649      	mov	r1, r9
 810ed88:	9805      	ldr	r0, [sp, #20]
 810ed8a:	4632      	mov	r2, r6
 810ed8c:	f003 f80e 	bl	8111dac <__lshift>
 810ed90:	4681      	mov	r9, r0
 810ed92:	2800      	cmp	r0, #0
 810ed94:	d0d8      	beq.n	810ed48 <_strtod_l+0x750>
 810ed96:	2f00      	cmp	r7, #0
 810ed98:	dd08      	ble.n	810edac <_strtod_l+0x7b4>
 810ed9a:	4641      	mov	r1, r8
 810ed9c:	9805      	ldr	r0, [sp, #20]
 810ed9e:	463a      	mov	r2, r7
 810eda0:	f003 f804 	bl	8111dac <__lshift>
 810eda4:	4680      	mov	r8, r0
 810eda6:	2800      	cmp	r0, #0
 810eda8:	f43f ae49 	beq.w	810ea3e <_strtod_l+0x446>
 810edac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810edae:	9805      	ldr	r0, [sp, #20]
 810edb0:	464a      	mov	r2, r9
 810edb2:	f003 f883 	bl	8111ebc <__mdiff>
 810edb6:	4604      	mov	r4, r0
 810edb8:	2800      	cmp	r0, #0
 810edba:	f43f ae40 	beq.w	810ea3e <_strtod_l+0x446>
 810edbe:	68c3      	ldr	r3, [r0, #12]
 810edc0:	930f      	str	r3, [sp, #60]	@ 0x3c
 810edc2:	2300      	movs	r3, #0
 810edc4:	60c3      	str	r3, [r0, #12]
 810edc6:	4641      	mov	r1, r8
 810edc8:	f003 f85c 	bl	8111e84 <__mcmp>
 810edcc:	2800      	cmp	r0, #0
 810edce:	da45      	bge.n	810ee5c <_strtod_l+0x864>
 810edd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810edd2:	ea53 030a 	orrs.w	r3, r3, sl
 810edd6:	d16b      	bne.n	810eeb0 <_strtod_l+0x8b8>
 810edd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810eddc:	2b00      	cmp	r3, #0
 810edde:	d167      	bne.n	810eeb0 <_strtod_l+0x8b8>
 810ede0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810ede4:	0d1b      	lsrs	r3, r3, #20
 810ede6:	051b      	lsls	r3, r3, #20
 810ede8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810edec:	d960      	bls.n	810eeb0 <_strtod_l+0x8b8>
 810edee:	6963      	ldr	r3, [r4, #20]
 810edf0:	b913      	cbnz	r3, 810edf8 <_strtod_l+0x800>
 810edf2:	6923      	ldr	r3, [r4, #16]
 810edf4:	2b01      	cmp	r3, #1
 810edf6:	dd5b      	ble.n	810eeb0 <_strtod_l+0x8b8>
 810edf8:	4621      	mov	r1, r4
 810edfa:	2201      	movs	r2, #1
 810edfc:	9805      	ldr	r0, [sp, #20]
 810edfe:	f002 ffd5 	bl	8111dac <__lshift>
 810ee02:	4641      	mov	r1, r8
 810ee04:	4604      	mov	r4, r0
 810ee06:	f003 f83d 	bl	8111e84 <__mcmp>
 810ee0a:	2800      	cmp	r0, #0
 810ee0c:	dd50      	ble.n	810eeb0 <_strtod_l+0x8b8>
 810ee0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810ee12:	9a08      	ldr	r2, [sp, #32]
 810ee14:	0d1b      	lsrs	r3, r3, #20
 810ee16:	051b      	lsls	r3, r3, #20
 810ee18:	2a00      	cmp	r2, #0
 810ee1a:	d06a      	beq.n	810eef2 <_strtod_l+0x8fa>
 810ee1c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810ee20:	d867      	bhi.n	810eef2 <_strtod_l+0x8fa>
 810ee22:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 810ee26:	f67f ae9d 	bls.w	810eb64 <_strtod_l+0x56c>
 810ee2a:	4b0a      	ldr	r3, [pc, #40]	@ (810ee54 <_strtod_l+0x85c>)
 810ee2c:	4650      	mov	r0, sl
 810ee2e:	4659      	mov	r1, fp
 810ee30:	2200      	movs	r2, #0
 810ee32:	f7f1 fc69 	bl	8100708 <__aeabi_dmul>
 810ee36:	4b08      	ldr	r3, [pc, #32]	@ (810ee58 <_strtod_l+0x860>)
 810ee38:	400b      	ands	r3, r1
 810ee3a:	4682      	mov	sl, r0
 810ee3c:	468b      	mov	fp, r1
 810ee3e:	2b00      	cmp	r3, #0
 810ee40:	f47f ae08 	bne.w	810ea54 <_strtod_l+0x45c>
 810ee44:	9a05      	ldr	r2, [sp, #20]
 810ee46:	2322      	movs	r3, #34	@ 0x22
 810ee48:	6013      	str	r3, [r2, #0]
 810ee4a:	e603      	b.n	810ea54 <_strtod_l+0x45c>
 810ee4c:	081131e0 	.word	0x081131e0
 810ee50:	fffffc02 	.word	0xfffffc02
 810ee54:	39500000 	.word	0x39500000
 810ee58:	7ff00000 	.word	0x7ff00000
 810ee5c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 810ee60:	d165      	bne.n	810ef2e <_strtod_l+0x936>
 810ee62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 810ee64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810ee68:	b35a      	cbz	r2, 810eec2 <_strtod_l+0x8ca>
 810ee6a:	4a9f      	ldr	r2, [pc, #636]	@ (810f0e8 <_strtod_l+0xaf0>)
 810ee6c:	4293      	cmp	r3, r2
 810ee6e:	d12b      	bne.n	810eec8 <_strtod_l+0x8d0>
 810ee70:	9b08      	ldr	r3, [sp, #32]
 810ee72:	4651      	mov	r1, sl
 810ee74:	b303      	cbz	r3, 810eeb8 <_strtod_l+0x8c0>
 810ee76:	4b9d      	ldr	r3, [pc, #628]	@ (810f0ec <_strtod_l+0xaf4>)
 810ee78:	465a      	mov	r2, fp
 810ee7a:	4013      	ands	r3, r2
 810ee7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 810ee80:	f04f 32ff 	mov.w	r2, #4294967295
 810ee84:	d81b      	bhi.n	810eebe <_strtod_l+0x8c6>
 810ee86:	0d1b      	lsrs	r3, r3, #20
 810ee88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810ee8c:	fa02 f303 	lsl.w	r3, r2, r3
 810ee90:	4299      	cmp	r1, r3
 810ee92:	d119      	bne.n	810eec8 <_strtod_l+0x8d0>
 810ee94:	4b96      	ldr	r3, [pc, #600]	@ (810f0f0 <_strtod_l+0xaf8>)
 810ee96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810ee98:	429a      	cmp	r2, r3
 810ee9a:	d102      	bne.n	810eea2 <_strtod_l+0x8aa>
 810ee9c:	3101      	adds	r1, #1
 810ee9e:	f43f adce 	beq.w	810ea3e <_strtod_l+0x446>
 810eea2:	4b92      	ldr	r3, [pc, #584]	@ (810f0ec <_strtod_l+0xaf4>)
 810eea4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810eea6:	401a      	ands	r2, r3
 810eea8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 810eeac:	f04f 0a00 	mov.w	sl, #0
 810eeb0:	9b08      	ldr	r3, [sp, #32]
 810eeb2:	2b00      	cmp	r3, #0
 810eeb4:	d1b9      	bne.n	810ee2a <_strtod_l+0x832>
 810eeb6:	e5cd      	b.n	810ea54 <_strtod_l+0x45c>
 810eeb8:	f04f 33ff 	mov.w	r3, #4294967295
 810eebc:	e7e8      	b.n	810ee90 <_strtod_l+0x898>
 810eebe:	4613      	mov	r3, r2
 810eec0:	e7e6      	b.n	810ee90 <_strtod_l+0x898>
 810eec2:	ea53 030a 	orrs.w	r3, r3, sl
 810eec6:	d0a2      	beq.n	810ee0e <_strtod_l+0x816>
 810eec8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 810eeca:	b1db      	cbz	r3, 810ef04 <_strtod_l+0x90c>
 810eecc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810eece:	4213      	tst	r3, r2
 810eed0:	d0ee      	beq.n	810eeb0 <_strtod_l+0x8b8>
 810eed2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810eed4:	9a08      	ldr	r2, [sp, #32]
 810eed6:	4650      	mov	r0, sl
 810eed8:	4659      	mov	r1, fp
 810eeda:	b1bb      	cbz	r3, 810ef0c <_strtod_l+0x914>
 810eedc:	f7ff fb6c 	bl	810e5b8 <sulp>
 810eee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810eee4:	ec53 2b10 	vmov	r2, r3, d0
 810eee8:	f7f1 fa58 	bl	810039c <__adddf3>
 810eeec:	4682      	mov	sl, r0
 810eeee:	468b      	mov	fp, r1
 810eef0:	e7de      	b.n	810eeb0 <_strtod_l+0x8b8>
 810eef2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 810eef6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810eefa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810eefe:	f04f 3aff 	mov.w	sl, #4294967295
 810ef02:	e7d5      	b.n	810eeb0 <_strtod_l+0x8b8>
 810ef04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810ef06:	ea13 0f0a 	tst.w	r3, sl
 810ef0a:	e7e1      	b.n	810eed0 <_strtod_l+0x8d8>
 810ef0c:	f7ff fb54 	bl	810e5b8 <sulp>
 810ef10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810ef14:	ec53 2b10 	vmov	r2, r3, d0
 810ef18:	f7f1 fa3e 	bl	8100398 <__aeabi_dsub>
 810ef1c:	2200      	movs	r2, #0
 810ef1e:	2300      	movs	r3, #0
 810ef20:	4682      	mov	sl, r0
 810ef22:	468b      	mov	fp, r1
 810ef24:	f7f1 fe58 	bl	8100bd8 <__aeabi_dcmpeq>
 810ef28:	2800      	cmp	r0, #0
 810ef2a:	d0c1      	beq.n	810eeb0 <_strtod_l+0x8b8>
 810ef2c:	e61a      	b.n	810eb64 <_strtod_l+0x56c>
 810ef2e:	4641      	mov	r1, r8
 810ef30:	4620      	mov	r0, r4
 810ef32:	f003 f91f 	bl	8112174 <__ratio>
 810ef36:	ec57 6b10 	vmov	r6, r7, d0
 810ef3a:	2200      	movs	r2, #0
 810ef3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 810ef40:	4630      	mov	r0, r6
 810ef42:	4639      	mov	r1, r7
 810ef44:	f7f1 fe5c 	bl	8100c00 <__aeabi_dcmple>
 810ef48:	2800      	cmp	r0, #0
 810ef4a:	d06f      	beq.n	810f02c <_strtod_l+0xa34>
 810ef4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810ef4e:	2b00      	cmp	r3, #0
 810ef50:	d17a      	bne.n	810f048 <_strtod_l+0xa50>
 810ef52:	f1ba 0f00 	cmp.w	sl, #0
 810ef56:	d158      	bne.n	810f00a <_strtod_l+0xa12>
 810ef58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810ef5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810ef5e:	2b00      	cmp	r3, #0
 810ef60:	d15a      	bne.n	810f018 <_strtod_l+0xa20>
 810ef62:	4b64      	ldr	r3, [pc, #400]	@ (810f0f4 <_strtod_l+0xafc>)
 810ef64:	2200      	movs	r2, #0
 810ef66:	4630      	mov	r0, r6
 810ef68:	4639      	mov	r1, r7
 810ef6a:	f7f1 fe3f 	bl	8100bec <__aeabi_dcmplt>
 810ef6e:	2800      	cmp	r0, #0
 810ef70:	d159      	bne.n	810f026 <_strtod_l+0xa2e>
 810ef72:	4630      	mov	r0, r6
 810ef74:	4639      	mov	r1, r7
 810ef76:	4b60      	ldr	r3, [pc, #384]	@ (810f0f8 <_strtod_l+0xb00>)
 810ef78:	2200      	movs	r2, #0
 810ef7a:	f7f1 fbc5 	bl	8100708 <__aeabi_dmul>
 810ef7e:	4606      	mov	r6, r0
 810ef80:	460f      	mov	r7, r1
 810ef82:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 810ef86:	9606      	str	r6, [sp, #24]
 810ef88:	9307      	str	r3, [sp, #28]
 810ef8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810ef8e:	4d57      	ldr	r5, [pc, #348]	@ (810f0ec <_strtod_l+0xaf4>)
 810ef90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810ef94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810ef96:	401d      	ands	r5, r3
 810ef98:	4b58      	ldr	r3, [pc, #352]	@ (810f0fc <_strtod_l+0xb04>)
 810ef9a:	429d      	cmp	r5, r3
 810ef9c:	f040 80b2 	bne.w	810f104 <_strtod_l+0xb0c>
 810efa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810efa2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 810efa6:	ec4b ab10 	vmov	d0, sl, fp
 810efaa:	f003 f81b 	bl	8111fe4 <__ulp>
 810efae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810efb2:	ec51 0b10 	vmov	r0, r1, d0
 810efb6:	f7f1 fba7 	bl	8100708 <__aeabi_dmul>
 810efba:	4652      	mov	r2, sl
 810efbc:	465b      	mov	r3, fp
 810efbe:	f7f1 f9ed 	bl	810039c <__adddf3>
 810efc2:	460b      	mov	r3, r1
 810efc4:	4949      	ldr	r1, [pc, #292]	@ (810f0ec <_strtod_l+0xaf4>)
 810efc6:	4a4e      	ldr	r2, [pc, #312]	@ (810f100 <_strtod_l+0xb08>)
 810efc8:	4019      	ands	r1, r3
 810efca:	4291      	cmp	r1, r2
 810efcc:	4682      	mov	sl, r0
 810efce:	d942      	bls.n	810f056 <_strtod_l+0xa5e>
 810efd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 810efd2:	4b47      	ldr	r3, [pc, #284]	@ (810f0f0 <_strtod_l+0xaf8>)
 810efd4:	429a      	cmp	r2, r3
 810efd6:	d103      	bne.n	810efe0 <_strtod_l+0x9e8>
 810efd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 810efda:	3301      	adds	r3, #1
 810efdc:	f43f ad2f 	beq.w	810ea3e <_strtod_l+0x446>
 810efe0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 810f0f0 <_strtod_l+0xaf8>
 810efe4:	f04f 3aff 	mov.w	sl, #4294967295
 810efe8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810efea:	9805      	ldr	r0, [sp, #20]
 810efec:	f002 fcce 	bl	811198c <_Bfree>
 810eff0:	9805      	ldr	r0, [sp, #20]
 810eff2:	4649      	mov	r1, r9
 810eff4:	f002 fcca 	bl	811198c <_Bfree>
 810eff8:	9805      	ldr	r0, [sp, #20]
 810effa:	4641      	mov	r1, r8
 810effc:	f002 fcc6 	bl	811198c <_Bfree>
 810f000:	9805      	ldr	r0, [sp, #20]
 810f002:	4621      	mov	r1, r4
 810f004:	f002 fcc2 	bl	811198c <_Bfree>
 810f008:	e619      	b.n	810ec3e <_strtod_l+0x646>
 810f00a:	f1ba 0f01 	cmp.w	sl, #1
 810f00e:	d103      	bne.n	810f018 <_strtod_l+0xa20>
 810f010:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810f012:	2b00      	cmp	r3, #0
 810f014:	f43f ada6 	beq.w	810eb64 <_strtod_l+0x56c>
 810f018:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 810f0c8 <_strtod_l+0xad0>
 810f01c:	4f35      	ldr	r7, [pc, #212]	@ (810f0f4 <_strtod_l+0xafc>)
 810f01e:	ed8d 7b06 	vstr	d7, [sp, #24]
 810f022:	2600      	movs	r6, #0
 810f024:	e7b1      	b.n	810ef8a <_strtod_l+0x992>
 810f026:	4f34      	ldr	r7, [pc, #208]	@ (810f0f8 <_strtod_l+0xb00>)
 810f028:	2600      	movs	r6, #0
 810f02a:	e7aa      	b.n	810ef82 <_strtod_l+0x98a>
 810f02c:	4b32      	ldr	r3, [pc, #200]	@ (810f0f8 <_strtod_l+0xb00>)
 810f02e:	4630      	mov	r0, r6
 810f030:	4639      	mov	r1, r7
 810f032:	2200      	movs	r2, #0
 810f034:	f7f1 fb68 	bl	8100708 <__aeabi_dmul>
 810f038:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810f03a:	4606      	mov	r6, r0
 810f03c:	460f      	mov	r7, r1
 810f03e:	2b00      	cmp	r3, #0
 810f040:	d09f      	beq.n	810ef82 <_strtod_l+0x98a>
 810f042:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810f046:	e7a0      	b.n	810ef8a <_strtod_l+0x992>
 810f048:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 810f0d0 <_strtod_l+0xad8>
 810f04c:	ed8d 7b06 	vstr	d7, [sp, #24]
 810f050:	ec57 6b17 	vmov	r6, r7, d7
 810f054:	e799      	b.n	810ef8a <_strtod_l+0x992>
 810f056:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 810f05a:	9b08      	ldr	r3, [sp, #32]
 810f05c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 810f060:	2b00      	cmp	r3, #0
 810f062:	d1c1      	bne.n	810efe8 <_strtod_l+0x9f0>
 810f064:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810f068:	0d1b      	lsrs	r3, r3, #20
 810f06a:	051b      	lsls	r3, r3, #20
 810f06c:	429d      	cmp	r5, r3
 810f06e:	d1bb      	bne.n	810efe8 <_strtod_l+0x9f0>
 810f070:	4630      	mov	r0, r6
 810f072:	4639      	mov	r1, r7
 810f074:	f7f1 fea8 	bl	8100dc8 <__aeabi_d2lz>
 810f078:	f7f1 fb18 	bl	81006ac <__aeabi_l2d>
 810f07c:	4602      	mov	r2, r0
 810f07e:	460b      	mov	r3, r1
 810f080:	4630      	mov	r0, r6
 810f082:	4639      	mov	r1, r7
 810f084:	f7f1 f988 	bl	8100398 <__aeabi_dsub>
 810f088:	460b      	mov	r3, r1
 810f08a:	4602      	mov	r2, r0
 810f08c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 810f090:	f3cb 0613 	ubfx	r6, fp, #0, #20
 810f094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810f096:	ea46 060a 	orr.w	r6, r6, sl
 810f09a:	431e      	orrs	r6, r3
 810f09c:	d06f      	beq.n	810f17e <_strtod_l+0xb86>
 810f09e:	a30e      	add	r3, pc, #56	@ (adr r3, 810f0d8 <_strtod_l+0xae0>)
 810f0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f0a4:	f7f1 fda2 	bl	8100bec <__aeabi_dcmplt>
 810f0a8:	2800      	cmp	r0, #0
 810f0aa:	f47f acd3 	bne.w	810ea54 <_strtod_l+0x45c>
 810f0ae:	a30c      	add	r3, pc, #48	@ (adr r3, 810f0e0 <_strtod_l+0xae8>)
 810f0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f0b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810f0b8:	f7f1 fdb6 	bl	8100c28 <__aeabi_dcmpgt>
 810f0bc:	2800      	cmp	r0, #0
 810f0be:	d093      	beq.n	810efe8 <_strtod_l+0x9f0>
 810f0c0:	e4c8      	b.n	810ea54 <_strtod_l+0x45c>
 810f0c2:	bf00      	nop
 810f0c4:	f3af 8000 	nop.w
 810f0c8:	00000000 	.word	0x00000000
 810f0cc:	bff00000 	.word	0xbff00000
 810f0d0:	00000000 	.word	0x00000000
 810f0d4:	3ff00000 	.word	0x3ff00000
 810f0d8:	94a03595 	.word	0x94a03595
 810f0dc:	3fdfffff 	.word	0x3fdfffff
 810f0e0:	35afe535 	.word	0x35afe535
 810f0e4:	3fe00000 	.word	0x3fe00000
 810f0e8:	000fffff 	.word	0x000fffff
 810f0ec:	7ff00000 	.word	0x7ff00000
 810f0f0:	7fefffff 	.word	0x7fefffff
 810f0f4:	3ff00000 	.word	0x3ff00000
 810f0f8:	3fe00000 	.word	0x3fe00000
 810f0fc:	7fe00000 	.word	0x7fe00000
 810f100:	7c9fffff 	.word	0x7c9fffff
 810f104:	9b08      	ldr	r3, [sp, #32]
 810f106:	b323      	cbz	r3, 810f152 <_strtod_l+0xb5a>
 810f108:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 810f10c:	d821      	bhi.n	810f152 <_strtod_l+0xb5a>
 810f10e:	a328      	add	r3, pc, #160	@ (adr r3, 810f1b0 <_strtod_l+0xbb8>)
 810f110:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f114:	4630      	mov	r0, r6
 810f116:	4639      	mov	r1, r7
 810f118:	f7f1 fd72 	bl	8100c00 <__aeabi_dcmple>
 810f11c:	b1a0      	cbz	r0, 810f148 <_strtod_l+0xb50>
 810f11e:	4639      	mov	r1, r7
 810f120:	4630      	mov	r0, r6
 810f122:	f7f1 fdc9 	bl	8100cb8 <__aeabi_d2uiz>
 810f126:	2801      	cmp	r0, #1
 810f128:	bf38      	it	cc
 810f12a:	2001      	movcc	r0, #1
 810f12c:	f7f1 fa72 	bl	8100614 <__aeabi_ui2d>
 810f130:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810f132:	4606      	mov	r6, r0
 810f134:	460f      	mov	r7, r1
 810f136:	b9fb      	cbnz	r3, 810f178 <_strtod_l+0xb80>
 810f138:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 810f13c:	9014      	str	r0, [sp, #80]	@ 0x50
 810f13e:	9315      	str	r3, [sp, #84]	@ 0x54
 810f140:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 810f144:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810f148:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 810f14a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 810f14e:	1b5b      	subs	r3, r3, r5
 810f150:	9311      	str	r3, [sp, #68]	@ 0x44
 810f152:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810f156:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 810f15a:	f002 ff43 	bl	8111fe4 <__ulp>
 810f15e:	4650      	mov	r0, sl
 810f160:	ec53 2b10 	vmov	r2, r3, d0
 810f164:	4659      	mov	r1, fp
 810f166:	f7f1 facf 	bl	8100708 <__aeabi_dmul>
 810f16a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 810f16e:	f7f1 f915 	bl	810039c <__adddf3>
 810f172:	4682      	mov	sl, r0
 810f174:	468b      	mov	fp, r1
 810f176:	e770      	b.n	810f05a <_strtod_l+0xa62>
 810f178:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 810f17c:	e7e0      	b.n	810f140 <_strtod_l+0xb48>
 810f17e:	a30e      	add	r3, pc, #56	@ (adr r3, 810f1b8 <_strtod_l+0xbc0>)
 810f180:	e9d3 2300 	ldrd	r2, r3, [r3]
 810f184:	f7f1 fd32 	bl	8100bec <__aeabi_dcmplt>
 810f188:	e798      	b.n	810f0bc <_strtod_l+0xac4>
 810f18a:	2300      	movs	r3, #0
 810f18c:	930e      	str	r3, [sp, #56]	@ 0x38
 810f18e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 810f190:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810f192:	6013      	str	r3, [r2, #0]
 810f194:	f7ff ba6d 	b.w	810e672 <_strtod_l+0x7a>
 810f198:	2a65      	cmp	r2, #101	@ 0x65
 810f19a:	f43f ab68 	beq.w	810e86e <_strtod_l+0x276>
 810f19e:	2a45      	cmp	r2, #69	@ 0x45
 810f1a0:	f43f ab65 	beq.w	810e86e <_strtod_l+0x276>
 810f1a4:	2301      	movs	r3, #1
 810f1a6:	f7ff bba0 	b.w	810e8ea <_strtod_l+0x2f2>
 810f1aa:	bf00      	nop
 810f1ac:	f3af 8000 	nop.w
 810f1b0:	ffc00000 	.word	0xffc00000
 810f1b4:	41dfffff 	.word	0x41dfffff
 810f1b8:	94a03595 	.word	0x94a03595
 810f1bc:	3fcfffff 	.word	0x3fcfffff

0810f1c0 <_strtod_r>:
 810f1c0:	4b01      	ldr	r3, [pc, #4]	@ (810f1c8 <_strtod_r+0x8>)
 810f1c2:	f7ff ba19 	b.w	810e5f8 <_strtod_l>
 810f1c6:	bf00      	nop
 810f1c8:	10000074 	.word	0x10000074

0810f1cc <strtof>:
 810f1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810f1d0:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 810f290 <strtof+0xc4>
 810f1d4:	4b29      	ldr	r3, [pc, #164]	@ (810f27c <strtof+0xb0>)
 810f1d6:	460a      	mov	r2, r1
 810f1d8:	ed2d 8b02 	vpush	{d8}
 810f1dc:	4601      	mov	r1, r0
 810f1de:	f8d8 0000 	ldr.w	r0, [r8]
 810f1e2:	f7ff fa09 	bl	810e5f8 <_strtod_l>
 810f1e6:	ec55 4b10 	vmov	r4, r5, d0
 810f1ea:	4622      	mov	r2, r4
 810f1ec:	462b      	mov	r3, r5
 810f1ee:	4620      	mov	r0, r4
 810f1f0:	4629      	mov	r1, r5
 810f1f2:	f7f1 fd23 	bl	8100c3c <__aeabi_dcmpun>
 810f1f6:	b190      	cbz	r0, 810f21e <strtof+0x52>
 810f1f8:	2d00      	cmp	r5, #0
 810f1fa:	4821      	ldr	r0, [pc, #132]	@ (810f280 <strtof+0xb4>)
 810f1fc:	da09      	bge.n	810f212 <strtof+0x46>
 810f1fe:	f001 f98f 	bl	8110520 <nanf>
 810f202:	eeb1 8a40 	vneg.f32	s16, s0
 810f206:	eeb0 0a48 	vmov.f32	s0, s16
 810f20a:	ecbd 8b02 	vpop	{d8}
 810f20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810f212:	ecbd 8b02 	vpop	{d8}
 810f216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f21a:	f001 b981 	b.w	8110520 <nanf>
 810f21e:	4620      	mov	r0, r4
 810f220:	4629      	mov	r1, r5
 810f222:	f7f1 fd69 	bl	8100cf8 <__aeabi_d2f>
 810f226:	ee08 0a10 	vmov	s16, r0
 810f22a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 810f284 <strtof+0xb8>
 810f22e:	eeb0 7ac8 	vabs.f32	s14, s16
 810f232:	eeb4 7a67 	vcmp.f32	s14, s15
 810f236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f23a:	dd11      	ble.n	810f260 <strtof+0x94>
 810f23c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 810f240:	4b11      	ldr	r3, [pc, #68]	@ (810f288 <strtof+0xbc>)
 810f242:	f04f 32ff 	mov.w	r2, #4294967295
 810f246:	4620      	mov	r0, r4
 810f248:	4639      	mov	r1, r7
 810f24a:	f7f1 fcf7 	bl	8100c3c <__aeabi_dcmpun>
 810f24e:	b980      	cbnz	r0, 810f272 <strtof+0xa6>
 810f250:	4b0d      	ldr	r3, [pc, #52]	@ (810f288 <strtof+0xbc>)
 810f252:	f04f 32ff 	mov.w	r2, #4294967295
 810f256:	4620      	mov	r0, r4
 810f258:	4639      	mov	r1, r7
 810f25a:	f7f1 fcd1 	bl	8100c00 <__aeabi_dcmple>
 810f25e:	b940      	cbnz	r0, 810f272 <strtof+0xa6>
 810f260:	ee18 3a10 	vmov	r3, s16
 810f264:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 810f268:	d1cd      	bne.n	810f206 <strtof+0x3a>
 810f26a:	4b08      	ldr	r3, [pc, #32]	@ (810f28c <strtof+0xc0>)
 810f26c:	402b      	ands	r3, r5
 810f26e:	2b00      	cmp	r3, #0
 810f270:	d0c9      	beq.n	810f206 <strtof+0x3a>
 810f272:	f8d8 3000 	ldr.w	r3, [r8]
 810f276:	2222      	movs	r2, #34	@ 0x22
 810f278:	601a      	str	r2, [r3, #0]
 810f27a:	e7c4      	b.n	810f206 <strtof+0x3a>
 810f27c:	10000074 	.word	0x10000074
 810f280:	081131b1 	.word	0x081131b1
 810f284:	7f7fffff 	.word	0x7f7fffff
 810f288:	7fefffff 	.word	0x7fefffff
 810f28c:	7ff00000 	.word	0x7ff00000
 810f290:	100001e0 	.word	0x100001e0

0810f294 <__cvt>:
 810f294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810f298:	ec57 6b10 	vmov	r6, r7, d0
 810f29c:	2f00      	cmp	r7, #0
 810f29e:	460c      	mov	r4, r1
 810f2a0:	4619      	mov	r1, r3
 810f2a2:	463b      	mov	r3, r7
 810f2a4:	bfbb      	ittet	lt
 810f2a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 810f2aa:	461f      	movlt	r7, r3
 810f2ac:	2300      	movge	r3, #0
 810f2ae:	232d      	movlt	r3, #45	@ 0x2d
 810f2b0:	700b      	strb	r3, [r1, #0]
 810f2b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810f2b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 810f2b8:	4691      	mov	r9, r2
 810f2ba:	f023 0820 	bic.w	r8, r3, #32
 810f2be:	bfbc      	itt	lt
 810f2c0:	4632      	movlt	r2, r6
 810f2c2:	4616      	movlt	r6, r2
 810f2c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810f2c8:	d005      	beq.n	810f2d6 <__cvt+0x42>
 810f2ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 810f2ce:	d100      	bne.n	810f2d2 <__cvt+0x3e>
 810f2d0:	3401      	adds	r4, #1
 810f2d2:	2102      	movs	r1, #2
 810f2d4:	e000      	b.n	810f2d8 <__cvt+0x44>
 810f2d6:	2103      	movs	r1, #3
 810f2d8:	ab03      	add	r3, sp, #12
 810f2da:	9301      	str	r3, [sp, #4]
 810f2dc:	ab02      	add	r3, sp, #8
 810f2de:	9300      	str	r3, [sp, #0]
 810f2e0:	ec47 6b10 	vmov	d0, r6, r7
 810f2e4:	4653      	mov	r3, sl
 810f2e6:	4622      	mov	r2, r4
 810f2e8:	f001 f9aa 	bl	8110640 <_dtoa_r>
 810f2ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 810f2f0:	4605      	mov	r5, r0
 810f2f2:	d119      	bne.n	810f328 <__cvt+0x94>
 810f2f4:	f019 0f01 	tst.w	r9, #1
 810f2f8:	d00e      	beq.n	810f318 <__cvt+0x84>
 810f2fa:	eb00 0904 	add.w	r9, r0, r4
 810f2fe:	2200      	movs	r2, #0
 810f300:	2300      	movs	r3, #0
 810f302:	4630      	mov	r0, r6
 810f304:	4639      	mov	r1, r7
 810f306:	f7f1 fc67 	bl	8100bd8 <__aeabi_dcmpeq>
 810f30a:	b108      	cbz	r0, 810f310 <__cvt+0x7c>
 810f30c:	f8cd 900c 	str.w	r9, [sp, #12]
 810f310:	2230      	movs	r2, #48	@ 0x30
 810f312:	9b03      	ldr	r3, [sp, #12]
 810f314:	454b      	cmp	r3, r9
 810f316:	d31e      	bcc.n	810f356 <__cvt+0xc2>
 810f318:	9b03      	ldr	r3, [sp, #12]
 810f31a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810f31c:	1b5b      	subs	r3, r3, r5
 810f31e:	4628      	mov	r0, r5
 810f320:	6013      	str	r3, [r2, #0]
 810f322:	b004      	add	sp, #16
 810f324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f328:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810f32c:	eb00 0904 	add.w	r9, r0, r4
 810f330:	d1e5      	bne.n	810f2fe <__cvt+0x6a>
 810f332:	7803      	ldrb	r3, [r0, #0]
 810f334:	2b30      	cmp	r3, #48	@ 0x30
 810f336:	d10a      	bne.n	810f34e <__cvt+0xba>
 810f338:	2200      	movs	r2, #0
 810f33a:	2300      	movs	r3, #0
 810f33c:	4630      	mov	r0, r6
 810f33e:	4639      	mov	r1, r7
 810f340:	f7f1 fc4a 	bl	8100bd8 <__aeabi_dcmpeq>
 810f344:	b918      	cbnz	r0, 810f34e <__cvt+0xba>
 810f346:	f1c4 0401 	rsb	r4, r4, #1
 810f34a:	f8ca 4000 	str.w	r4, [sl]
 810f34e:	f8da 3000 	ldr.w	r3, [sl]
 810f352:	4499      	add	r9, r3
 810f354:	e7d3      	b.n	810f2fe <__cvt+0x6a>
 810f356:	1c59      	adds	r1, r3, #1
 810f358:	9103      	str	r1, [sp, #12]
 810f35a:	701a      	strb	r2, [r3, #0]
 810f35c:	e7d9      	b.n	810f312 <__cvt+0x7e>

0810f35e <__exponent>:
 810f35e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810f360:	2900      	cmp	r1, #0
 810f362:	bfba      	itte	lt
 810f364:	4249      	neglt	r1, r1
 810f366:	232d      	movlt	r3, #45	@ 0x2d
 810f368:	232b      	movge	r3, #43	@ 0x2b
 810f36a:	2909      	cmp	r1, #9
 810f36c:	7002      	strb	r2, [r0, #0]
 810f36e:	7043      	strb	r3, [r0, #1]
 810f370:	dd29      	ble.n	810f3c6 <__exponent+0x68>
 810f372:	f10d 0307 	add.w	r3, sp, #7
 810f376:	461d      	mov	r5, r3
 810f378:	270a      	movs	r7, #10
 810f37a:	461a      	mov	r2, r3
 810f37c:	fbb1 f6f7 	udiv	r6, r1, r7
 810f380:	fb07 1416 	mls	r4, r7, r6, r1
 810f384:	3430      	adds	r4, #48	@ 0x30
 810f386:	f802 4c01 	strb.w	r4, [r2, #-1]
 810f38a:	460c      	mov	r4, r1
 810f38c:	2c63      	cmp	r4, #99	@ 0x63
 810f38e:	f103 33ff 	add.w	r3, r3, #4294967295
 810f392:	4631      	mov	r1, r6
 810f394:	dcf1      	bgt.n	810f37a <__exponent+0x1c>
 810f396:	3130      	adds	r1, #48	@ 0x30
 810f398:	1e94      	subs	r4, r2, #2
 810f39a:	f803 1c01 	strb.w	r1, [r3, #-1]
 810f39e:	1c41      	adds	r1, r0, #1
 810f3a0:	4623      	mov	r3, r4
 810f3a2:	42ab      	cmp	r3, r5
 810f3a4:	d30a      	bcc.n	810f3bc <__exponent+0x5e>
 810f3a6:	f10d 0309 	add.w	r3, sp, #9
 810f3aa:	1a9b      	subs	r3, r3, r2
 810f3ac:	42ac      	cmp	r4, r5
 810f3ae:	bf88      	it	hi
 810f3b0:	2300      	movhi	r3, #0
 810f3b2:	3302      	adds	r3, #2
 810f3b4:	4403      	add	r3, r0
 810f3b6:	1a18      	subs	r0, r3, r0
 810f3b8:	b003      	add	sp, #12
 810f3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810f3bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 810f3c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 810f3c4:	e7ed      	b.n	810f3a2 <__exponent+0x44>
 810f3c6:	2330      	movs	r3, #48	@ 0x30
 810f3c8:	3130      	adds	r1, #48	@ 0x30
 810f3ca:	7083      	strb	r3, [r0, #2]
 810f3cc:	70c1      	strb	r1, [r0, #3]
 810f3ce:	1d03      	adds	r3, r0, #4
 810f3d0:	e7f1      	b.n	810f3b6 <__exponent+0x58>
	...

0810f3d4 <_printf_float>:
 810f3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f3d8:	b08d      	sub	sp, #52	@ 0x34
 810f3da:	460c      	mov	r4, r1
 810f3dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 810f3e0:	4616      	mov	r6, r2
 810f3e2:	461f      	mov	r7, r3
 810f3e4:	4605      	mov	r5, r0
 810f3e6:	f000 ffff 	bl	81103e8 <_localeconv_r>
 810f3ea:	6803      	ldr	r3, [r0, #0]
 810f3ec:	9304      	str	r3, [sp, #16]
 810f3ee:	4618      	mov	r0, r3
 810f3f0:	f7f0 ffc6 	bl	8100380 <strlen>
 810f3f4:	2300      	movs	r3, #0
 810f3f6:	930a      	str	r3, [sp, #40]	@ 0x28
 810f3f8:	f8d8 3000 	ldr.w	r3, [r8]
 810f3fc:	9005      	str	r0, [sp, #20]
 810f3fe:	3307      	adds	r3, #7
 810f400:	f023 0307 	bic.w	r3, r3, #7
 810f404:	f103 0208 	add.w	r2, r3, #8
 810f408:	f894 a018 	ldrb.w	sl, [r4, #24]
 810f40c:	f8d4 b000 	ldr.w	fp, [r4]
 810f410:	f8c8 2000 	str.w	r2, [r8]
 810f414:	e9d3 8900 	ldrd	r8, r9, [r3]
 810f418:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 810f41c:	9307      	str	r3, [sp, #28]
 810f41e:	f8cd 8018 	str.w	r8, [sp, #24]
 810f422:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 810f426:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810f42a:	4b9c      	ldr	r3, [pc, #624]	@ (810f69c <_printf_float+0x2c8>)
 810f42c:	f04f 32ff 	mov.w	r2, #4294967295
 810f430:	f7f1 fc04 	bl	8100c3c <__aeabi_dcmpun>
 810f434:	bb70      	cbnz	r0, 810f494 <_printf_float+0xc0>
 810f436:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810f43a:	4b98      	ldr	r3, [pc, #608]	@ (810f69c <_printf_float+0x2c8>)
 810f43c:	f04f 32ff 	mov.w	r2, #4294967295
 810f440:	f7f1 fbde 	bl	8100c00 <__aeabi_dcmple>
 810f444:	bb30      	cbnz	r0, 810f494 <_printf_float+0xc0>
 810f446:	2200      	movs	r2, #0
 810f448:	2300      	movs	r3, #0
 810f44a:	4640      	mov	r0, r8
 810f44c:	4649      	mov	r1, r9
 810f44e:	f7f1 fbcd 	bl	8100bec <__aeabi_dcmplt>
 810f452:	b110      	cbz	r0, 810f45a <_printf_float+0x86>
 810f454:	232d      	movs	r3, #45	@ 0x2d
 810f456:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810f45a:	4a91      	ldr	r2, [pc, #580]	@ (810f6a0 <_printf_float+0x2cc>)
 810f45c:	4b91      	ldr	r3, [pc, #580]	@ (810f6a4 <_printf_float+0x2d0>)
 810f45e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 810f462:	bf8c      	ite	hi
 810f464:	4690      	movhi	r8, r2
 810f466:	4698      	movls	r8, r3
 810f468:	2303      	movs	r3, #3
 810f46a:	6123      	str	r3, [r4, #16]
 810f46c:	f02b 0304 	bic.w	r3, fp, #4
 810f470:	6023      	str	r3, [r4, #0]
 810f472:	f04f 0900 	mov.w	r9, #0
 810f476:	9700      	str	r7, [sp, #0]
 810f478:	4633      	mov	r3, r6
 810f47a:	aa0b      	add	r2, sp, #44	@ 0x2c
 810f47c:	4621      	mov	r1, r4
 810f47e:	4628      	mov	r0, r5
 810f480:	f000 f9d2 	bl	810f828 <_printf_common>
 810f484:	3001      	adds	r0, #1
 810f486:	f040 808d 	bne.w	810f5a4 <_printf_float+0x1d0>
 810f48a:	f04f 30ff 	mov.w	r0, #4294967295
 810f48e:	b00d      	add	sp, #52	@ 0x34
 810f490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f494:	4642      	mov	r2, r8
 810f496:	464b      	mov	r3, r9
 810f498:	4640      	mov	r0, r8
 810f49a:	4649      	mov	r1, r9
 810f49c:	f7f1 fbce 	bl	8100c3c <__aeabi_dcmpun>
 810f4a0:	b140      	cbz	r0, 810f4b4 <_printf_float+0xe0>
 810f4a2:	464b      	mov	r3, r9
 810f4a4:	2b00      	cmp	r3, #0
 810f4a6:	bfbc      	itt	lt
 810f4a8:	232d      	movlt	r3, #45	@ 0x2d
 810f4aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 810f4ae:	4a7e      	ldr	r2, [pc, #504]	@ (810f6a8 <_printf_float+0x2d4>)
 810f4b0:	4b7e      	ldr	r3, [pc, #504]	@ (810f6ac <_printf_float+0x2d8>)
 810f4b2:	e7d4      	b.n	810f45e <_printf_float+0x8a>
 810f4b4:	6863      	ldr	r3, [r4, #4]
 810f4b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 810f4ba:	9206      	str	r2, [sp, #24]
 810f4bc:	1c5a      	adds	r2, r3, #1
 810f4be:	d13b      	bne.n	810f538 <_printf_float+0x164>
 810f4c0:	2306      	movs	r3, #6
 810f4c2:	6063      	str	r3, [r4, #4]
 810f4c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 810f4c8:	2300      	movs	r3, #0
 810f4ca:	6022      	str	r2, [r4, #0]
 810f4cc:	9303      	str	r3, [sp, #12]
 810f4ce:	ab0a      	add	r3, sp, #40	@ 0x28
 810f4d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 810f4d4:	ab09      	add	r3, sp, #36	@ 0x24
 810f4d6:	9300      	str	r3, [sp, #0]
 810f4d8:	6861      	ldr	r1, [r4, #4]
 810f4da:	ec49 8b10 	vmov	d0, r8, r9
 810f4de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 810f4e2:	4628      	mov	r0, r5
 810f4e4:	f7ff fed6 	bl	810f294 <__cvt>
 810f4e8:	9b06      	ldr	r3, [sp, #24]
 810f4ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810f4ec:	2b47      	cmp	r3, #71	@ 0x47
 810f4ee:	4680      	mov	r8, r0
 810f4f0:	d129      	bne.n	810f546 <_printf_float+0x172>
 810f4f2:	1cc8      	adds	r0, r1, #3
 810f4f4:	db02      	blt.n	810f4fc <_printf_float+0x128>
 810f4f6:	6863      	ldr	r3, [r4, #4]
 810f4f8:	4299      	cmp	r1, r3
 810f4fa:	dd41      	ble.n	810f580 <_printf_float+0x1ac>
 810f4fc:	f1aa 0a02 	sub.w	sl, sl, #2
 810f500:	fa5f fa8a 	uxtb.w	sl, sl
 810f504:	3901      	subs	r1, #1
 810f506:	4652      	mov	r2, sl
 810f508:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 810f50c:	9109      	str	r1, [sp, #36]	@ 0x24
 810f50e:	f7ff ff26 	bl	810f35e <__exponent>
 810f512:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810f514:	1813      	adds	r3, r2, r0
 810f516:	2a01      	cmp	r2, #1
 810f518:	4681      	mov	r9, r0
 810f51a:	6123      	str	r3, [r4, #16]
 810f51c:	dc02      	bgt.n	810f524 <_printf_float+0x150>
 810f51e:	6822      	ldr	r2, [r4, #0]
 810f520:	07d2      	lsls	r2, r2, #31
 810f522:	d501      	bpl.n	810f528 <_printf_float+0x154>
 810f524:	3301      	adds	r3, #1
 810f526:	6123      	str	r3, [r4, #16]
 810f528:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 810f52c:	2b00      	cmp	r3, #0
 810f52e:	d0a2      	beq.n	810f476 <_printf_float+0xa2>
 810f530:	232d      	movs	r3, #45	@ 0x2d
 810f532:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810f536:	e79e      	b.n	810f476 <_printf_float+0xa2>
 810f538:	9a06      	ldr	r2, [sp, #24]
 810f53a:	2a47      	cmp	r2, #71	@ 0x47
 810f53c:	d1c2      	bne.n	810f4c4 <_printf_float+0xf0>
 810f53e:	2b00      	cmp	r3, #0
 810f540:	d1c0      	bne.n	810f4c4 <_printf_float+0xf0>
 810f542:	2301      	movs	r3, #1
 810f544:	e7bd      	b.n	810f4c2 <_printf_float+0xee>
 810f546:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810f54a:	d9db      	bls.n	810f504 <_printf_float+0x130>
 810f54c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 810f550:	d118      	bne.n	810f584 <_printf_float+0x1b0>
 810f552:	2900      	cmp	r1, #0
 810f554:	6863      	ldr	r3, [r4, #4]
 810f556:	dd0b      	ble.n	810f570 <_printf_float+0x19c>
 810f558:	6121      	str	r1, [r4, #16]
 810f55a:	b913      	cbnz	r3, 810f562 <_printf_float+0x18e>
 810f55c:	6822      	ldr	r2, [r4, #0]
 810f55e:	07d0      	lsls	r0, r2, #31
 810f560:	d502      	bpl.n	810f568 <_printf_float+0x194>
 810f562:	3301      	adds	r3, #1
 810f564:	440b      	add	r3, r1
 810f566:	6123      	str	r3, [r4, #16]
 810f568:	65a1      	str	r1, [r4, #88]	@ 0x58
 810f56a:	f04f 0900 	mov.w	r9, #0
 810f56e:	e7db      	b.n	810f528 <_printf_float+0x154>
 810f570:	b913      	cbnz	r3, 810f578 <_printf_float+0x1a4>
 810f572:	6822      	ldr	r2, [r4, #0]
 810f574:	07d2      	lsls	r2, r2, #31
 810f576:	d501      	bpl.n	810f57c <_printf_float+0x1a8>
 810f578:	3302      	adds	r3, #2
 810f57a:	e7f4      	b.n	810f566 <_printf_float+0x192>
 810f57c:	2301      	movs	r3, #1
 810f57e:	e7f2      	b.n	810f566 <_printf_float+0x192>
 810f580:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 810f584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810f586:	4299      	cmp	r1, r3
 810f588:	db05      	blt.n	810f596 <_printf_float+0x1c2>
 810f58a:	6823      	ldr	r3, [r4, #0]
 810f58c:	6121      	str	r1, [r4, #16]
 810f58e:	07d8      	lsls	r0, r3, #31
 810f590:	d5ea      	bpl.n	810f568 <_printf_float+0x194>
 810f592:	1c4b      	adds	r3, r1, #1
 810f594:	e7e7      	b.n	810f566 <_printf_float+0x192>
 810f596:	2900      	cmp	r1, #0
 810f598:	bfd4      	ite	le
 810f59a:	f1c1 0202 	rsble	r2, r1, #2
 810f59e:	2201      	movgt	r2, #1
 810f5a0:	4413      	add	r3, r2
 810f5a2:	e7e0      	b.n	810f566 <_printf_float+0x192>
 810f5a4:	6823      	ldr	r3, [r4, #0]
 810f5a6:	055a      	lsls	r2, r3, #21
 810f5a8:	d407      	bmi.n	810f5ba <_printf_float+0x1e6>
 810f5aa:	6923      	ldr	r3, [r4, #16]
 810f5ac:	4642      	mov	r2, r8
 810f5ae:	4631      	mov	r1, r6
 810f5b0:	4628      	mov	r0, r5
 810f5b2:	47b8      	blx	r7
 810f5b4:	3001      	adds	r0, #1
 810f5b6:	d12b      	bne.n	810f610 <_printf_float+0x23c>
 810f5b8:	e767      	b.n	810f48a <_printf_float+0xb6>
 810f5ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810f5be:	f240 80dd 	bls.w	810f77c <_printf_float+0x3a8>
 810f5c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810f5c6:	2200      	movs	r2, #0
 810f5c8:	2300      	movs	r3, #0
 810f5ca:	f7f1 fb05 	bl	8100bd8 <__aeabi_dcmpeq>
 810f5ce:	2800      	cmp	r0, #0
 810f5d0:	d033      	beq.n	810f63a <_printf_float+0x266>
 810f5d2:	4a37      	ldr	r2, [pc, #220]	@ (810f6b0 <_printf_float+0x2dc>)
 810f5d4:	2301      	movs	r3, #1
 810f5d6:	4631      	mov	r1, r6
 810f5d8:	4628      	mov	r0, r5
 810f5da:	47b8      	blx	r7
 810f5dc:	3001      	adds	r0, #1
 810f5de:	f43f af54 	beq.w	810f48a <_printf_float+0xb6>
 810f5e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 810f5e6:	4543      	cmp	r3, r8
 810f5e8:	db02      	blt.n	810f5f0 <_printf_float+0x21c>
 810f5ea:	6823      	ldr	r3, [r4, #0]
 810f5ec:	07d8      	lsls	r0, r3, #31
 810f5ee:	d50f      	bpl.n	810f610 <_printf_float+0x23c>
 810f5f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f5f4:	4631      	mov	r1, r6
 810f5f6:	4628      	mov	r0, r5
 810f5f8:	47b8      	blx	r7
 810f5fa:	3001      	adds	r0, #1
 810f5fc:	f43f af45 	beq.w	810f48a <_printf_float+0xb6>
 810f600:	f04f 0900 	mov.w	r9, #0
 810f604:	f108 38ff 	add.w	r8, r8, #4294967295
 810f608:	f104 0a1a 	add.w	sl, r4, #26
 810f60c:	45c8      	cmp	r8, r9
 810f60e:	dc09      	bgt.n	810f624 <_printf_float+0x250>
 810f610:	6823      	ldr	r3, [r4, #0]
 810f612:	079b      	lsls	r3, r3, #30
 810f614:	f100 8103 	bmi.w	810f81e <_printf_float+0x44a>
 810f618:	68e0      	ldr	r0, [r4, #12]
 810f61a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810f61c:	4298      	cmp	r0, r3
 810f61e:	bfb8      	it	lt
 810f620:	4618      	movlt	r0, r3
 810f622:	e734      	b.n	810f48e <_printf_float+0xba>
 810f624:	2301      	movs	r3, #1
 810f626:	4652      	mov	r2, sl
 810f628:	4631      	mov	r1, r6
 810f62a:	4628      	mov	r0, r5
 810f62c:	47b8      	blx	r7
 810f62e:	3001      	adds	r0, #1
 810f630:	f43f af2b 	beq.w	810f48a <_printf_float+0xb6>
 810f634:	f109 0901 	add.w	r9, r9, #1
 810f638:	e7e8      	b.n	810f60c <_printf_float+0x238>
 810f63a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f63c:	2b00      	cmp	r3, #0
 810f63e:	dc39      	bgt.n	810f6b4 <_printf_float+0x2e0>
 810f640:	4a1b      	ldr	r2, [pc, #108]	@ (810f6b0 <_printf_float+0x2dc>)
 810f642:	2301      	movs	r3, #1
 810f644:	4631      	mov	r1, r6
 810f646:	4628      	mov	r0, r5
 810f648:	47b8      	blx	r7
 810f64a:	3001      	adds	r0, #1
 810f64c:	f43f af1d 	beq.w	810f48a <_printf_float+0xb6>
 810f650:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 810f654:	ea59 0303 	orrs.w	r3, r9, r3
 810f658:	d102      	bne.n	810f660 <_printf_float+0x28c>
 810f65a:	6823      	ldr	r3, [r4, #0]
 810f65c:	07d9      	lsls	r1, r3, #31
 810f65e:	d5d7      	bpl.n	810f610 <_printf_float+0x23c>
 810f660:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f664:	4631      	mov	r1, r6
 810f666:	4628      	mov	r0, r5
 810f668:	47b8      	blx	r7
 810f66a:	3001      	adds	r0, #1
 810f66c:	f43f af0d 	beq.w	810f48a <_printf_float+0xb6>
 810f670:	f04f 0a00 	mov.w	sl, #0
 810f674:	f104 0b1a 	add.w	fp, r4, #26
 810f678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f67a:	425b      	negs	r3, r3
 810f67c:	4553      	cmp	r3, sl
 810f67e:	dc01      	bgt.n	810f684 <_printf_float+0x2b0>
 810f680:	464b      	mov	r3, r9
 810f682:	e793      	b.n	810f5ac <_printf_float+0x1d8>
 810f684:	2301      	movs	r3, #1
 810f686:	465a      	mov	r2, fp
 810f688:	4631      	mov	r1, r6
 810f68a:	4628      	mov	r0, r5
 810f68c:	47b8      	blx	r7
 810f68e:	3001      	adds	r0, #1
 810f690:	f43f aefb 	beq.w	810f48a <_printf_float+0xb6>
 810f694:	f10a 0a01 	add.w	sl, sl, #1
 810f698:	e7ee      	b.n	810f678 <_printf_float+0x2a4>
 810f69a:	bf00      	nop
 810f69c:	7fefffff 	.word	0x7fefffff
 810f6a0:	08112fe2 	.word	0x08112fe2
 810f6a4:	08112fde 	.word	0x08112fde
 810f6a8:	08112fea 	.word	0x08112fea
 810f6ac:	08112fe6 	.word	0x08112fe6
 810f6b0:	08112fee 	.word	0x08112fee
 810f6b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810f6b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810f6ba:	4553      	cmp	r3, sl
 810f6bc:	bfa8      	it	ge
 810f6be:	4653      	movge	r3, sl
 810f6c0:	2b00      	cmp	r3, #0
 810f6c2:	4699      	mov	r9, r3
 810f6c4:	dc36      	bgt.n	810f734 <_printf_float+0x360>
 810f6c6:	f04f 0b00 	mov.w	fp, #0
 810f6ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810f6ce:	f104 021a 	add.w	r2, r4, #26
 810f6d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810f6d4:	9306      	str	r3, [sp, #24]
 810f6d6:	eba3 0309 	sub.w	r3, r3, r9
 810f6da:	455b      	cmp	r3, fp
 810f6dc:	dc31      	bgt.n	810f742 <_printf_float+0x36e>
 810f6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f6e0:	459a      	cmp	sl, r3
 810f6e2:	dc3a      	bgt.n	810f75a <_printf_float+0x386>
 810f6e4:	6823      	ldr	r3, [r4, #0]
 810f6e6:	07da      	lsls	r2, r3, #31
 810f6e8:	d437      	bmi.n	810f75a <_printf_float+0x386>
 810f6ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f6ec:	ebaa 0903 	sub.w	r9, sl, r3
 810f6f0:	9b06      	ldr	r3, [sp, #24]
 810f6f2:	ebaa 0303 	sub.w	r3, sl, r3
 810f6f6:	4599      	cmp	r9, r3
 810f6f8:	bfa8      	it	ge
 810f6fa:	4699      	movge	r9, r3
 810f6fc:	f1b9 0f00 	cmp.w	r9, #0
 810f700:	dc33      	bgt.n	810f76a <_printf_float+0x396>
 810f702:	f04f 0800 	mov.w	r8, #0
 810f706:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810f70a:	f104 0b1a 	add.w	fp, r4, #26
 810f70e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f710:	ebaa 0303 	sub.w	r3, sl, r3
 810f714:	eba3 0309 	sub.w	r3, r3, r9
 810f718:	4543      	cmp	r3, r8
 810f71a:	f77f af79 	ble.w	810f610 <_printf_float+0x23c>
 810f71e:	2301      	movs	r3, #1
 810f720:	465a      	mov	r2, fp
 810f722:	4631      	mov	r1, r6
 810f724:	4628      	mov	r0, r5
 810f726:	47b8      	blx	r7
 810f728:	3001      	adds	r0, #1
 810f72a:	f43f aeae 	beq.w	810f48a <_printf_float+0xb6>
 810f72e:	f108 0801 	add.w	r8, r8, #1
 810f732:	e7ec      	b.n	810f70e <_printf_float+0x33a>
 810f734:	4642      	mov	r2, r8
 810f736:	4631      	mov	r1, r6
 810f738:	4628      	mov	r0, r5
 810f73a:	47b8      	blx	r7
 810f73c:	3001      	adds	r0, #1
 810f73e:	d1c2      	bne.n	810f6c6 <_printf_float+0x2f2>
 810f740:	e6a3      	b.n	810f48a <_printf_float+0xb6>
 810f742:	2301      	movs	r3, #1
 810f744:	4631      	mov	r1, r6
 810f746:	4628      	mov	r0, r5
 810f748:	9206      	str	r2, [sp, #24]
 810f74a:	47b8      	blx	r7
 810f74c:	3001      	adds	r0, #1
 810f74e:	f43f ae9c 	beq.w	810f48a <_printf_float+0xb6>
 810f752:	9a06      	ldr	r2, [sp, #24]
 810f754:	f10b 0b01 	add.w	fp, fp, #1
 810f758:	e7bb      	b.n	810f6d2 <_printf_float+0x2fe>
 810f75a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f75e:	4631      	mov	r1, r6
 810f760:	4628      	mov	r0, r5
 810f762:	47b8      	blx	r7
 810f764:	3001      	adds	r0, #1
 810f766:	d1c0      	bne.n	810f6ea <_printf_float+0x316>
 810f768:	e68f      	b.n	810f48a <_printf_float+0xb6>
 810f76a:	9a06      	ldr	r2, [sp, #24]
 810f76c:	464b      	mov	r3, r9
 810f76e:	4442      	add	r2, r8
 810f770:	4631      	mov	r1, r6
 810f772:	4628      	mov	r0, r5
 810f774:	47b8      	blx	r7
 810f776:	3001      	adds	r0, #1
 810f778:	d1c3      	bne.n	810f702 <_printf_float+0x32e>
 810f77a:	e686      	b.n	810f48a <_printf_float+0xb6>
 810f77c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810f780:	f1ba 0f01 	cmp.w	sl, #1
 810f784:	dc01      	bgt.n	810f78a <_printf_float+0x3b6>
 810f786:	07db      	lsls	r3, r3, #31
 810f788:	d536      	bpl.n	810f7f8 <_printf_float+0x424>
 810f78a:	2301      	movs	r3, #1
 810f78c:	4642      	mov	r2, r8
 810f78e:	4631      	mov	r1, r6
 810f790:	4628      	mov	r0, r5
 810f792:	47b8      	blx	r7
 810f794:	3001      	adds	r0, #1
 810f796:	f43f ae78 	beq.w	810f48a <_printf_float+0xb6>
 810f79a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810f79e:	4631      	mov	r1, r6
 810f7a0:	4628      	mov	r0, r5
 810f7a2:	47b8      	blx	r7
 810f7a4:	3001      	adds	r0, #1
 810f7a6:	f43f ae70 	beq.w	810f48a <_printf_float+0xb6>
 810f7aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810f7ae:	2200      	movs	r2, #0
 810f7b0:	2300      	movs	r3, #0
 810f7b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 810f7b6:	f7f1 fa0f 	bl	8100bd8 <__aeabi_dcmpeq>
 810f7ba:	b9c0      	cbnz	r0, 810f7ee <_printf_float+0x41a>
 810f7bc:	4653      	mov	r3, sl
 810f7be:	f108 0201 	add.w	r2, r8, #1
 810f7c2:	4631      	mov	r1, r6
 810f7c4:	4628      	mov	r0, r5
 810f7c6:	47b8      	blx	r7
 810f7c8:	3001      	adds	r0, #1
 810f7ca:	d10c      	bne.n	810f7e6 <_printf_float+0x412>
 810f7cc:	e65d      	b.n	810f48a <_printf_float+0xb6>
 810f7ce:	2301      	movs	r3, #1
 810f7d0:	465a      	mov	r2, fp
 810f7d2:	4631      	mov	r1, r6
 810f7d4:	4628      	mov	r0, r5
 810f7d6:	47b8      	blx	r7
 810f7d8:	3001      	adds	r0, #1
 810f7da:	f43f ae56 	beq.w	810f48a <_printf_float+0xb6>
 810f7de:	f108 0801 	add.w	r8, r8, #1
 810f7e2:	45d0      	cmp	r8, sl
 810f7e4:	dbf3      	blt.n	810f7ce <_printf_float+0x3fa>
 810f7e6:	464b      	mov	r3, r9
 810f7e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 810f7ec:	e6df      	b.n	810f5ae <_printf_float+0x1da>
 810f7ee:	f04f 0800 	mov.w	r8, #0
 810f7f2:	f104 0b1a 	add.w	fp, r4, #26
 810f7f6:	e7f4      	b.n	810f7e2 <_printf_float+0x40e>
 810f7f8:	2301      	movs	r3, #1
 810f7fa:	4642      	mov	r2, r8
 810f7fc:	e7e1      	b.n	810f7c2 <_printf_float+0x3ee>
 810f7fe:	2301      	movs	r3, #1
 810f800:	464a      	mov	r2, r9
 810f802:	4631      	mov	r1, r6
 810f804:	4628      	mov	r0, r5
 810f806:	47b8      	blx	r7
 810f808:	3001      	adds	r0, #1
 810f80a:	f43f ae3e 	beq.w	810f48a <_printf_float+0xb6>
 810f80e:	f108 0801 	add.w	r8, r8, #1
 810f812:	68e3      	ldr	r3, [r4, #12]
 810f814:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810f816:	1a5b      	subs	r3, r3, r1
 810f818:	4543      	cmp	r3, r8
 810f81a:	dcf0      	bgt.n	810f7fe <_printf_float+0x42a>
 810f81c:	e6fc      	b.n	810f618 <_printf_float+0x244>
 810f81e:	f04f 0800 	mov.w	r8, #0
 810f822:	f104 0919 	add.w	r9, r4, #25
 810f826:	e7f4      	b.n	810f812 <_printf_float+0x43e>

0810f828 <_printf_common>:
 810f828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810f82c:	4616      	mov	r6, r2
 810f82e:	4698      	mov	r8, r3
 810f830:	688a      	ldr	r2, [r1, #8]
 810f832:	690b      	ldr	r3, [r1, #16]
 810f834:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810f838:	4293      	cmp	r3, r2
 810f83a:	bfb8      	it	lt
 810f83c:	4613      	movlt	r3, r2
 810f83e:	6033      	str	r3, [r6, #0]
 810f840:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 810f844:	4607      	mov	r7, r0
 810f846:	460c      	mov	r4, r1
 810f848:	b10a      	cbz	r2, 810f84e <_printf_common+0x26>
 810f84a:	3301      	adds	r3, #1
 810f84c:	6033      	str	r3, [r6, #0]
 810f84e:	6823      	ldr	r3, [r4, #0]
 810f850:	0699      	lsls	r1, r3, #26
 810f852:	bf42      	ittt	mi
 810f854:	6833      	ldrmi	r3, [r6, #0]
 810f856:	3302      	addmi	r3, #2
 810f858:	6033      	strmi	r3, [r6, #0]
 810f85a:	6825      	ldr	r5, [r4, #0]
 810f85c:	f015 0506 	ands.w	r5, r5, #6
 810f860:	d106      	bne.n	810f870 <_printf_common+0x48>
 810f862:	f104 0a19 	add.w	sl, r4, #25
 810f866:	68e3      	ldr	r3, [r4, #12]
 810f868:	6832      	ldr	r2, [r6, #0]
 810f86a:	1a9b      	subs	r3, r3, r2
 810f86c:	42ab      	cmp	r3, r5
 810f86e:	dc26      	bgt.n	810f8be <_printf_common+0x96>
 810f870:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 810f874:	6822      	ldr	r2, [r4, #0]
 810f876:	3b00      	subs	r3, #0
 810f878:	bf18      	it	ne
 810f87a:	2301      	movne	r3, #1
 810f87c:	0692      	lsls	r2, r2, #26
 810f87e:	d42b      	bmi.n	810f8d8 <_printf_common+0xb0>
 810f880:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810f884:	4641      	mov	r1, r8
 810f886:	4638      	mov	r0, r7
 810f888:	47c8      	blx	r9
 810f88a:	3001      	adds	r0, #1
 810f88c:	d01e      	beq.n	810f8cc <_printf_common+0xa4>
 810f88e:	6823      	ldr	r3, [r4, #0]
 810f890:	6922      	ldr	r2, [r4, #16]
 810f892:	f003 0306 	and.w	r3, r3, #6
 810f896:	2b04      	cmp	r3, #4
 810f898:	bf02      	ittt	eq
 810f89a:	68e5      	ldreq	r5, [r4, #12]
 810f89c:	6833      	ldreq	r3, [r6, #0]
 810f89e:	1aed      	subeq	r5, r5, r3
 810f8a0:	68a3      	ldr	r3, [r4, #8]
 810f8a2:	bf0c      	ite	eq
 810f8a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810f8a8:	2500      	movne	r5, #0
 810f8aa:	4293      	cmp	r3, r2
 810f8ac:	bfc4      	itt	gt
 810f8ae:	1a9b      	subgt	r3, r3, r2
 810f8b0:	18ed      	addgt	r5, r5, r3
 810f8b2:	2600      	movs	r6, #0
 810f8b4:	341a      	adds	r4, #26
 810f8b6:	42b5      	cmp	r5, r6
 810f8b8:	d11a      	bne.n	810f8f0 <_printf_common+0xc8>
 810f8ba:	2000      	movs	r0, #0
 810f8bc:	e008      	b.n	810f8d0 <_printf_common+0xa8>
 810f8be:	2301      	movs	r3, #1
 810f8c0:	4652      	mov	r2, sl
 810f8c2:	4641      	mov	r1, r8
 810f8c4:	4638      	mov	r0, r7
 810f8c6:	47c8      	blx	r9
 810f8c8:	3001      	adds	r0, #1
 810f8ca:	d103      	bne.n	810f8d4 <_printf_common+0xac>
 810f8cc:	f04f 30ff 	mov.w	r0, #4294967295
 810f8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f8d4:	3501      	adds	r5, #1
 810f8d6:	e7c6      	b.n	810f866 <_printf_common+0x3e>
 810f8d8:	18e1      	adds	r1, r4, r3
 810f8da:	1c5a      	adds	r2, r3, #1
 810f8dc:	2030      	movs	r0, #48	@ 0x30
 810f8de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810f8e2:	4422      	add	r2, r4
 810f8e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810f8e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810f8ec:	3302      	adds	r3, #2
 810f8ee:	e7c7      	b.n	810f880 <_printf_common+0x58>
 810f8f0:	2301      	movs	r3, #1
 810f8f2:	4622      	mov	r2, r4
 810f8f4:	4641      	mov	r1, r8
 810f8f6:	4638      	mov	r0, r7
 810f8f8:	47c8      	blx	r9
 810f8fa:	3001      	adds	r0, #1
 810f8fc:	d0e6      	beq.n	810f8cc <_printf_common+0xa4>
 810f8fe:	3601      	adds	r6, #1
 810f900:	e7d9      	b.n	810f8b6 <_printf_common+0x8e>
	...

0810f904 <_printf_i>:
 810f904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810f908:	7e0f      	ldrb	r7, [r1, #24]
 810f90a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810f90c:	2f78      	cmp	r7, #120	@ 0x78
 810f90e:	4691      	mov	r9, r2
 810f910:	4680      	mov	r8, r0
 810f912:	460c      	mov	r4, r1
 810f914:	469a      	mov	sl, r3
 810f916:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810f91a:	d807      	bhi.n	810f92c <_printf_i+0x28>
 810f91c:	2f62      	cmp	r7, #98	@ 0x62
 810f91e:	d80a      	bhi.n	810f936 <_printf_i+0x32>
 810f920:	2f00      	cmp	r7, #0
 810f922:	f000 80d1 	beq.w	810fac8 <_printf_i+0x1c4>
 810f926:	2f58      	cmp	r7, #88	@ 0x58
 810f928:	f000 80b8 	beq.w	810fa9c <_printf_i+0x198>
 810f92c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810f930:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 810f934:	e03a      	b.n	810f9ac <_printf_i+0xa8>
 810f936:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810f93a:	2b15      	cmp	r3, #21
 810f93c:	d8f6      	bhi.n	810f92c <_printf_i+0x28>
 810f93e:	a101      	add	r1, pc, #4	@ (adr r1, 810f944 <_printf_i+0x40>)
 810f940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810f944:	0810f99d 	.word	0x0810f99d
 810f948:	0810f9b1 	.word	0x0810f9b1
 810f94c:	0810f92d 	.word	0x0810f92d
 810f950:	0810f92d 	.word	0x0810f92d
 810f954:	0810f92d 	.word	0x0810f92d
 810f958:	0810f92d 	.word	0x0810f92d
 810f95c:	0810f9b1 	.word	0x0810f9b1
 810f960:	0810f92d 	.word	0x0810f92d
 810f964:	0810f92d 	.word	0x0810f92d
 810f968:	0810f92d 	.word	0x0810f92d
 810f96c:	0810f92d 	.word	0x0810f92d
 810f970:	0810faaf 	.word	0x0810faaf
 810f974:	0810f9db 	.word	0x0810f9db
 810f978:	0810fa69 	.word	0x0810fa69
 810f97c:	0810f92d 	.word	0x0810f92d
 810f980:	0810f92d 	.word	0x0810f92d
 810f984:	0810fad1 	.word	0x0810fad1
 810f988:	0810f92d 	.word	0x0810f92d
 810f98c:	0810f9db 	.word	0x0810f9db
 810f990:	0810f92d 	.word	0x0810f92d
 810f994:	0810f92d 	.word	0x0810f92d
 810f998:	0810fa71 	.word	0x0810fa71
 810f99c:	6833      	ldr	r3, [r6, #0]
 810f99e:	1d1a      	adds	r2, r3, #4
 810f9a0:	681b      	ldr	r3, [r3, #0]
 810f9a2:	6032      	str	r2, [r6, #0]
 810f9a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810f9a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810f9ac:	2301      	movs	r3, #1
 810f9ae:	e09c      	b.n	810faea <_printf_i+0x1e6>
 810f9b0:	6833      	ldr	r3, [r6, #0]
 810f9b2:	6820      	ldr	r0, [r4, #0]
 810f9b4:	1d19      	adds	r1, r3, #4
 810f9b6:	6031      	str	r1, [r6, #0]
 810f9b8:	0606      	lsls	r6, r0, #24
 810f9ba:	d501      	bpl.n	810f9c0 <_printf_i+0xbc>
 810f9bc:	681d      	ldr	r5, [r3, #0]
 810f9be:	e003      	b.n	810f9c8 <_printf_i+0xc4>
 810f9c0:	0645      	lsls	r5, r0, #25
 810f9c2:	d5fb      	bpl.n	810f9bc <_printf_i+0xb8>
 810f9c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 810f9c8:	2d00      	cmp	r5, #0
 810f9ca:	da03      	bge.n	810f9d4 <_printf_i+0xd0>
 810f9cc:	232d      	movs	r3, #45	@ 0x2d
 810f9ce:	426d      	negs	r5, r5
 810f9d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810f9d4:	4858      	ldr	r0, [pc, #352]	@ (810fb38 <_printf_i+0x234>)
 810f9d6:	230a      	movs	r3, #10
 810f9d8:	e011      	b.n	810f9fe <_printf_i+0xfa>
 810f9da:	6821      	ldr	r1, [r4, #0]
 810f9dc:	6833      	ldr	r3, [r6, #0]
 810f9de:	0608      	lsls	r0, r1, #24
 810f9e0:	f853 5b04 	ldr.w	r5, [r3], #4
 810f9e4:	d402      	bmi.n	810f9ec <_printf_i+0xe8>
 810f9e6:	0649      	lsls	r1, r1, #25
 810f9e8:	bf48      	it	mi
 810f9ea:	b2ad      	uxthmi	r5, r5
 810f9ec:	2f6f      	cmp	r7, #111	@ 0x6f
 810f9ee:	4852      	ldr	r0, [pc, #328]	@ (810fb38 <_printf_i+0x234>)
 810f9f0:	6033      	str	r3, [r6, #0]
 810f9f2:	bf14      	ite	ne
 810f9f4:	230a      	movne	r3, #10
 810f9f6:	2308      	moveq	r3, #8
 810f9f8:	2100      	movs	r1, #0
 810f9fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810f9fe:	6866      	ldr	r6, [r4, #4]
 810fa00:	60a6      	str	r6, [r4, #8]
 810fa02:	2e00      	cmp	r6, #0
 810fa04:	db05      	blt.n	810fa12 <_printf_i+0x10e>
 810fa06:	6821      	ldr	r1, [r4, #0]
 810fa08:	432e      	orrs	r6, r5
 810fa0a:	f021 0104 	bic.w	r1, r1, #4
 810fa0e:	6021      	str	r1, [r4, #0]
 810fa10:	d04b      	beq.n	810faaa <_printf_i+0x1a6>
 810fa12:	4616      	mov	r6, r2
 810fa14:	fbb5 f1f3 	udiv	r1, r5, r3
 810fa18:	fb03 5711 	mls	r7, r3, r1, r5
 810fa1c:	5dc7      	ldrb	r7, [r0, r7]
 810fa1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810fa22:	462f      	mov	r7, r5
 810fa24:	42bb      	cmp	r3, r7
 810fa26:	460d      	mov	r5, r1
 810fa28:	d9f4      	bls.n	810fa14 <_printf_i+0x110>
 810fa2a:	2b08      	cmp	r3, #8
 810fa2c:	d10b      	bne.n	810fa46 <_printf_i+0x142>
 810fa2e:	6823      	ldr	r3, [r4, #0]
 810fa30:	07df      	lsls	r7, r3, #31
 810fa32:	d508      	bpl.n	810fa46 <_printf_i+0x142>
 810fa34:	6923      	ldr	r3, [r4, #16]
 810fa36:	6861      	ldr	r1, [r4, #4]
 810fa38:	4299      	cmp	r1, r3
 810fa3a:	bfde      	ittt	le
 810fa3c:	2330      	movle	r3, #48	@ 0x30
 810fa3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 810fa42:	f106 36ff 	addle.w	r6, r6, #4294967295
 810fa46:	1b92      	subs	r2, r2, r6
 810fa48:	6122      	str	r2, [r4, #16]
 810fa4a:	f8cd a000 	str.w	sl, [sp]
 810fa4e:	464b      	mov	r3, r9
 810fa50:	aa03      	add	r2, sp, #12
 810fa52:	4621      	mov	r1, r4
 810fa54:	4640      	mov	r0, r8
 810fa56:	f7ff fee7 	bl	810f828 <_printf_common>
 810fa5a:	3001      	adds	r0, #1
 810fa5c:	d14a      	bne.n	810faf4 <_printf_i+0x1f0>
 810fa5e:	f04f 30ff 	mov.w	r0, #4294967295
 810fa62:	b004      	add	sp, #16
 810fa64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810fa68:	6823      	ldr	r3, [r4, #0]
 810fa6a:	f043 0320 	orr.w	r3, r3, #32
 810fa6e:	6023      	str	r3, [r4, #0]
 810fa70:	4832      	ldr	r0, [pc, #200]	@ (810fb3c <_printf_i+0x238>)
 810fa72:	2778      	movs	r7, #120	@ 0x78
 810fa74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810fa78:	6823      	ldr	r3, [r4, #0]
 810fa7a:	6831      	ldr	r1, [r6, #0]
 810fa7c:	061f      	lsls	r7, r3, #24
 810fa7e:	f851 5b04 	ldr.w	r5, [r1], #4
 810fa82:	d402      	bmi.n	810fa8a <_printf_i+0x186>
 810fa84:	065f      	lsls	r7, r3, #25
 810fa86:	bf48      	it	mi
 810fa88:	b2ad      	uxthmi	r5, r5
 810fa8a:	6031      	str	r1, [r6, #0]
 810fa8c:	07d9      	lsls	r1, r3, #31
 810fa8e:	bf44      	itt	mi
 810fa90:	f043 0320 	orrmi.w	r3, r3, #32
 810fa94:	6023      	strmi	r3, [r4, #0]
 810fa96:	b11d      	cbz	r5, 810faa0 <_printf_i+0x19c>
 810fa98:	2310      	movs	r3, #16
 810fa9a:	e7ad      	b.n	810f9f8 <_printf_i+0xf4>
 810fa9c:	4826      	ldr	r0, [pc, #152]	@ (810fb38 <_printf_i+0x234>)
 810fa9e:	e7e9      	b.n	810fa74 <_printf_i+0x170>
 810faa0:	6823      	ldr	r3, [r4, #0]
 810faa2:	f023 0320 	bic.w	r3, r3, #32
 810faa6:	6023      	str	r3, [r4, #0]
 810faa8:	e7f6      	b.n	810fa98 <_printf_i+0x194>
 810faaa:	4616      	mov	r6, r2
 810faac:	e7bd      	b.n	810fa2a <_printf_i+0x126>
 810faae:	6833      	ldr	r3, [r6, #0]
 810fab0:	6825      	ldr	r5, [r4, #0]
 810fab2:	6961      	ldr	r1, [r4, #20]
 810fab4:	1d18      	adds	r0, r3, #4
 810fab6:	6030      	str	r0, [r6, #0]
 810fab8:	062e      	lsls	r6, r5, #24
 810faba:	681b      	ldr	r3, [r3, #0]
 810fabc:	d501      	bpl.n	810fac2 <_printf_i+0x1be>
 810fabe:	6019      	str	r1, [r3, #0]
 810fac0:	e002      	b.n	810fac8 <_printf_i+0x1c4>
 810fac2:	0668      	lsls	r0, r5, #25
 810fac4:	d5fb      	bpl.n	810fabe <_printf_i+0x1ba>
 810fac6:	8019      	strh	r1, [r3, #0]
 810fac8:	2300      	movs	r3, #0
 810faca:	6123      	str	r3, [r4, #16]
 810facc:	4616      	mov	r6, r2
 810face:	e7bc      	b.n	810fa4a <_printf_i+0x146>
 810fad0:	6833      	ldr	r3, [r6, #0]
 810fad2:	1d1a      	adds	r2, r3, #4
 810fad4:	6032      	str	r2, [r6, #0]
 810fad6:	681e      	ldr	r6, [r3, #0]
 810fad8:	6862      	ldr	r2, [r4, #4]
 810fada:	2100      	movs	r1, #0
 810fadc:	4630      	mov	r0, r6
 810fade:	f7f0 fbff 	bl	81002e0 <memchr>
 810fae2:	b108      	cbz	r0, 810fae8 <_printf_i+0x1e4>
 810fae4:	1b80      	subs	r0, r0, r6
 810fae6:	6060      	str	r0, [r4, #4]
 810fae8:	6863      	ldr	r3, [r4, #4]
 810faea:	6123      	str	r3, [r4, #16]
 810faec:	2300      	movs	r3, #0
 810faee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810faf2:	e7aa      	b.n	810fa4a <_printf_i+0x146>
 810faf4:	6923      	ldr	r3, [r4, #16]
 810faf6:	4632      	mov	r2, r6
 810faf8:	4649      	mov	r1, r9
 810fafa:	4640      	mov	r0, r8
 810fafc:	47d0      	blx	sl
 810fafe:	3001      	adds	r0, #1
 810fb00:	d0ad      	beq.n	810fa5e <_printf_i+0x15a>
 810fb02:	6823      	ldr	r3, [r4, #0]
 810fb04:	079b      	lsls	r3, r3, #30
 810fb06:	d413      	bmi.n	810fb30 <_printf_i+0x22c>
 810fb08:	68e0      	ldr	r0, [r4, #12]
 810fb0a:	9b03      	ldr	r3, [sp, #12]
 810fb0c:	4298      	cmp	r0, r3
 810fb0e:	bfb8      	it	lt
 810fb10:	4618      	movlt	r0, r3
 810fb12:	e7a6      	b.n	810fa62 <_printf_i+0x15e>
 810fb14:	2301      	movs	r3, #1
 810fb16:	4632      	mov	r2, r6
 810fb18:	4649      	mov	r1, r9
 810fb1a:	4640      	mov	r0, r8
 810fb1c:	47d0      	blx	sl
 810fb1e:	3001      	adds	r0, #1
 810fb20:	d09d      	beq.n	810fa5e <_printf_i+0x15a>
 810fb22:	3501      	adds	r5, #1
 810fb24:	68e3      	ldr	r3, [r4, #12]
 810fb26:	9903      	ldr	r1, [sp, #12]
 810fb28:	1a5b      	subs	r3, r3, r1
 810fb2a:	42ab      	cmp	r3, r5
 810fb2c:	dcf2      	bgt.n	810fb14 <_printf_i+0x210>
 810fb2e:	e7eb      	b.n	810fb08 <_printf_i+0x204>
 810fb30:	2500      	movs	r5, #0
 810fb32:	f104 0619 	add.w	r6, r4, #25
 810fb36:	e7f5      	b.n	810fb24 <_printf_i+0x220>
 810fb38:	08112ff0 	.word	0x08112ff0
 810fb3c:	08113001 	.word	0x08113001

0810fb40 <_scanf_float>:
 810fb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810fb44:	b087      	sub	sp, #28
 810fb46:	4691      	mov	r9, r2
 810fb48:	9303      	str	r3, [sp, #12]
 810fb4a:	688b      	ldr	r3, [r1, #8]
 810fb4c:	1e5a      	subs	r2, r3, #1
 810fb4e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 810fb52:	bf81      	itttt	hi
 810fb54:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 810fb58:	eb03 0b05 	addhi.w	fp, r3, r5
 810fb5c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 810fb60:	608b      	strhi	r3, [r1, #8]
 810fb62:	680b      	ldr	r3, [r1, #0]
 810fb64:	460a      	mov	r2, r1
 810fb66:	f04f 0500 	mov.w	r5, #0
 810fb6a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 810fb6e:	f842 3b1c 	str.w	r3, [r2], #28
 810fb72:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810fb76:	4680      	mov	r8, r0
 810fb78:	460c      	mov	r4, r1
 810fb7a:	bf98      	it	ls
 810fb7c:	f04f 0b00 	movls.w	fp, #0
 810fb80:	9201      	str	r2, [sp, #4]
 810fb82:	4616      	mov	r6, r2
 810fb84:	46aa      	mov	sl, r5
 810fb86:	462f      	mov	r7, r5
 810fb88:	9502      	str	r5, [sp, #8]
 810fb8a:	68a2      	ldr	r2, [r4, #8]
 810fb8c:	b15a      	cbz	r2, 810fba6 <_scanf_float+0x66>
 810fb8e:	f8d9 3000 	ldr.w	r3, [r9]
 810fb92:	781b      	ldrb	r3, [r3, #0]
 810fb94:	2b4e      	cmp	r3, #78	@ 0x4e
 810fb96:	d863      	bhi.n	810fc60 <_scanf_float+0x120>
 810fb98:	2b40      	cmp	r3, #64	@ 0x40
 810fb9a:	d83b      	bhi.n	810fc14 <_scanf_float+0xd4>
 810fb9c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 810fba0:	b2c8      	uxtb	r0, r1
 810fba2:	280e      	cmp	r0, #14
 810fba4:	d939      	bls.n	810fc1a <_scanf_float+0xda>
 810fba6:	b11f      	cbz	r7, 810fbb0 <_scanf_float+0x70>
 810fba8:	6823      	ldr	r3, [r4, #0]
 810fbaa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810fbae:	6023      	str	r3, [r4, #0]
 810fbb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 810fbb4:	f1ba 0f01 	cmp.w	sl, #1
 810fbb8:	f200 8114 	bhi.w	810fde4 <_scanf_float+0x2a4>
 810fbbc:	9b01      	ldr	r3, [sp, #4]
 810fbbe:	429e      	cmp	r6, r3
 810fbc0:	f200 8105 	bhi.w	810fdce <_scanf_float+0x28e>
 810fbc4:	2001      	movs	r0, #1
 810fbc6:	b007      	add	sp, #28
 810fbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810fbcc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 810fbd0:	2a0d      	cmp	r2, #13
 810fbd2:	d8e8      	bhi.n	810fba6 <_scanf_float+0x66>
 810fbd4:	a101      	add	r1, pc, #4	@ (adr r1, 810fbdc <_scanf_float+0x9c>)
 810fbd6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810fbda:	bf00      	nop
 810fbdc:	0810fd25 	.word	0x0810fd25
 810fbe0:	0810fba7 	.word	0x0810fba7
 810fbe4:	0810fba7 	.word	0x0810fba7
 810fbe8:	0810fba7 	.word	0x0810fba7
 810fbec:	0810fd81 	.word	0x0810fd81
 810fbf0:	0810fd5b 	.word	0x0810fd5b
 810fbf4:	0810fba7 	.word	0x0810fba7
 810fbf8:	0810fba7 	.word	0x0810fba7
 810fbfc:	0810fd33 	.word	0x0810fd33
 810fc00:	0810fba7 	.word	0x0810fba7
 810fc04:	0810fba7 	.word	0x0810fba7
 810fc08:	0810fba7 	.word	0x0810fba7
 810fc0c:	0810fba7 	.word	0x0810fba7
 810fc10:	0810fcef 	.word	0x0810fcef
 810fc14:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 810fc18:	e7da      	b.n	810fbd0 <_scanf_float+0x90>
 810fc1a:	290e      	cmp	r1, #14
 810fc1c:	d8c3      	bhi.n	810fba6 <_scanf_float+0x66>
 810fc1e:	a001      	add	r0, pc, #4	@ (adr r0, 810fc24 <_scanf_float+0xe4>)
 810fc20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810fc24:	0810fcdf 	.word	0x0810fcdf
 810fc28:	0810fba7 	.word	0x0810fba7
 810fc2c:	0810fcdf 	.word	0x0810fcdf
 810fc30:	0810fd6f 	.word	0x0810fd6f
 810fc34:	0810fba7 	.word	0x0810fba7
 810fc38:	0810fc81 	.word	0x0810fc81
 810fc3c:	0810fcc5 	.word	0x0810fcc5
 810fc40:	0810fcc5 	.word	0x0810fcc5
 810fc44:	0810fcc5 	.word	0x0810fcc5
 810fc48:	0810fcc5 	.word	0x0810fcc5
 810fc4c:	0810fcc5 	.word	0x0810fcc5
 810fc50:	0810fcc5 	.word	0x0810fcc5
 810fc54:	0810fcc5 	.word	0x0810fcc5
 810fc58:	0810fcc5 	.word	0x0810fcc5
 810fc5c:	0810fcc5 	.word	0x0810fcc5
 810fc60:	2b6e      	cmp	r3, #110	@ 0x6e
 810fc62:	d809      	bhi.n	810fc78 <_scanf_float+0x138>
 810fc64:	2b60      	cmp	r3, #96	@ 0x60
 810fc66:	d8b1      	bhi.n	810fbcc <_scanf_float+0x8c>
 810fc68:	2b54      	cmp	r3, #84	@ 0x54
 810fc6a:	d07b      	beq.n	810fd64 <_scanf_float+0x224>
 810fc6c:	2b59      	cmp	r3, #89	@ 0x59
 810fc6e:	d19a      	bne.n	810fba6 <_scanf_float+0x66>
 810fc70:	2d07      	cmp	r5, #7
 810fc72:	d198      	bne.n	810fba6 <_scanf_float+0x66>
 810fc74:	2508      	movs	r5, #8
 810fc76:	e02f      	b.n	810fcd8 <_scanf_float+0x198>
 810fc78:	2b74      	cmp	r3, #116	@ 0x74
 810fc7a:	d073      	beq.n	810fd64 <_scanf_float+0x224>
 810fc7c:	2b79      	cmp	r3, #121	@ 0x79
 810fc7e:	e7f6      	b.n	810fc6e <_scanf_float+0x12e>
 810fc80:	6821      	ldr	r1, [r4, #0]
 810fc82:	05c8      	lsls	r0, r1, #23
 810fc84:	d51e      	bpl.n	810fcc4 <_scanf_float+0x184>
 810fc86:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 810fc8a:	6021      	str	r1, [r4, #0]
 810fc8c:	3701      	adds	r7, #1
 810fc8e:	f1bb 0f00 	cmp.w	fp, #0
 810fc92:	d003      	beq.n	810fc9c <_scanf_float+0x15c>
 810fc94:	3201      	adds	r2, #1
 810fc96:	f10b 3bff 	add.w	fp, fp, #4294967295
 810fc9a:	60a2      	str	r2, [r4, #8]
 810fc9c:	68a3      	ldr	r3, [r4, #8]
 810fc9e:	3b01      	subs	r3, #1
 810fca0:	60a3      	str	r3, [r4, #8]
 810fca2:	6923      	ldr	r3, [r4, #16]
 810fca4:	3301      	adds	r3, #1
 810fca6:	6123      	str	r3, [r4, #16]
 810fca8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 810fcac:	3b01      	subs	r3, #1
 810fcae:	2b00      	cmp	r3, #0
 810fcb0:	f8c9 3004 	str.w	r3, [r9, #4]
 810fcb4:	f340 8082 	ble.w	810fdbc <_scanf_float+0x27c>
 810fcb8:	f8d9 3000 	ldr.w	r3, [r9]
 810fcbc:	3301      	adds	r3, #1
 810fcbe:	f8c9 3000 	str.w	r3, [r9]
 810fcc2:	e762      	b.n	810fb8a <_scanf_float+0x4a>
 810fcc4:	eb1a 0105 	adds.w	r1, sl, r5
 810fcc8:	f47f af6d 	bne.w	810fba6 <_scanf_float+0x66>
 810fccc:	6822      	ldr	r2, [r4, #0]
 810fcce:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 810fcd2:	6022      	str	r2, [r4, #0]
 810fcd4:	460d      	mov	r5, r1
 810fcd6:	468a      	mov	sl, r1
 810fcd8:	f806 3b01 	strb.w	r3, [r6], #1
 810fcdc:	e7de      	b.n	810fc9c <_scanf_float+0x15c>
 810fcde:	6822      	ldr	r2, [r4, #0]
 810fce0:	0610      	lsls	r0, r2, #24
 810fce2:	f57f af60 	bpl.w	810fba6 <_scanf_float+0x66>
 810fce6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810fcea:	6022      	str	r2, [r4, #0]
 810fcec:	e7f4      	b.n	810fcd8 <_scanf_float+0x198>
 810fcee:	f1ba 0f00 	cmp.w	sl, #0
 810fcf2:	d10c      	bne.n	810fd0e <_scanf_float+0x1ce>
 810fcf4:	b977      	cbnz	r7, 810fd14 <_scanf_float+0x1d4>
 810fcf6:	6822      	ldr	r2, [r4, #0]
 810fcf8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810fcfc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810fd00:	d108      	bne.n	810fd14 <_scanf_float+0x1d4>
 810fd02:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810fd06:	6022      	str	r2, [r4, #0]
 810fd08:	f04f 0a01 	mov.w	sl, #1
 810fd0c:	e7e4      	b.n	810fcd8 <_scanf_float+0x198>
 810fd0e:	f1ba 0f02 	cmp.w	sl, #2
 810fd12:	d050      	beq.n	810fdb6 <_scanf_float+0x276>
 810fd14:	2d01      	cmp	r5, #1
 810fd16:	d002      	beq.n	810fd1e <_scanf_float+0x1de>
 810fd18:	2d04      	cmp	r5, #4
 810fd1a:	f47f af44 	bne.w	810fba6 <_scanf_float+0x66>
 810fd1e:	3501      	adds	r5, #1
 810fd20:	b2ed      	uxtb	r5, r5
 810fd22:	e7d9      	b.n	810fcd8 <_scanf_float+0x198>
 810fd24:	f1ba 0f01 	cmp.w	sl, #1
 810fd28:	f47f af3d 	bne.w	810fba6 <_scanf_float+0x66>
 810fd2c:	f04f 0a02 	mov.w	sl, #2
 810fd30:	e7d2      	b.n	810fcd8 <_scanf_float+0x198>
 810fd32:	b975      	cbnz	r5, 810fd52 <_scanf_float+0x212>
 810fd34:	2f00      	cmp	r7, #0
 810fd36:	f47f af37 	bne.w	810fba8 <_scanf_float+0x68>
 810fd3a:	6822      	ldr	r2, [r4, #0]
 810fd3c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810fd40:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810fd44:	f040 8103 	bne.w	810ff4e <_scanf_float+0x40e>
 810fd48:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810fd4c:	6022      	str	r2, [r4, #0]
 810fd4e:	2501      	movs	r5, #1
 810fd50:	e7c2      	b.n	810fcd8 <_scanf_float+0x198>
 810fd52:	2d03      	cmp	r5, #3
 810fd54:	d0e3      	beq.n	810fd1e <_scanf_float+0x1de>
 810fd56:	2d05      	cmp	r5, #5
 810fd58:	e7df      	b.n	810fd1a <_scanf_float+0x1da>
 810fd5a:	2d02      	cmp	r5, #2
 810fd5c:	f47f af23 	bne.w	810fba6 <_scanf_float+0x66>
 810fd60:	2503      	movs	r5, #3
 810fd62:	e7b9      	b.n	810fcd8 <_scanf_float+0x198>
 810fd64:	2d06      	cmp	r5, #6
 810fd66:	f47f af1e 	bne.w	810fba6 <_scanf_float+0x66>
 810fd6a:	2507      	movs	r5, #7
 810fd6c:	e7b4      	b.n	810fcd8 <_scanf_float+0x198>
 810fd6e:	6822      	ldr	r2, [r4, #0]
 810fd70:	0591      	lsls	r1, r2, #22
 810fd72:	f57f af18 	bpl.w	810fba6 <_scanf_float+0x66>
 810fd76:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 810fd7a:	6022      	str	r2, [r4, #0]
 810fd7c:	9702      	str	r7, [sp, #8]
 810fd7e:	e7ab      	b.n	810fcd8 <_scanf_float+0x198>
 810fd80:	6822      	ldr	r2, [r4, #0]
 810fd82:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 810fd86:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 810fd8a:	d005      	beq.n	810fd98 <_scanf_float+0x258>
 810fd8c:	0550      	lsls	r0, r2, #21
 810fd8e:	f57f af0a 	bpl.w	810fba6 <_scanf_float+0x66>
 810fd92:	2f00      	cmp	r7, #0
 810fd94:	f000 80db 	beq.w	810ff4e <_scanf_float+0x40e>
 810fd98:	0591      	lsls	r1, r2, #22
 810fd9a:	bf58      	it	pl
 810fd9c:	9902      	ldrpl	r1, [sp, #8]
 810fd9e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810fda2:	bf58      	it	pl
 810fda4:	1a79      	subpl	r1, r7, r1
 810fda6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 810fdaa:	bf58      	it	pl
 810fdac:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810fdb0:	6022      	str	r2, [r4, #0]
 810fdb2:	2700      	movs	r7, #0
 810fdb4:	e790      	b.n	810fcd8 <_scanf_float+0x198>
 810fdb6:	f04f 0a03 	mov.w	sl, #3
 810fdba:	e78d      	b.n	810fcd8 <_scanf_float+0x198>
 810fdbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 810fdc0:	4649      	mov	r1, r9
 810fdc2:	4640      	mov	r0, r8
 810fdc4:	4798      	blx	r3
 810fdc6:	2800      	cmp	r0, #0
 810fdc8:	f43f aedf 	beq.w	810fb8a <_scanf_float+0x4a>
 810fdcc:	e6eb      	b.n	810fba6 <_scanf_float+0x66>
 810fdce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fdd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810fdd6:	464a      	mov	r2, r9
 810fdd8:	4640      	mov	r0, r8
 810fdda:	4798      	blx	r3
 810fddc:	6923      	ldr	r3, [r4, #16]
 810fdde:	3b01      	subs	r3, #1
 810fde0:	6123      	str	r3, [r4, #16]
 810fde2:	e6eb      	b.n	810fbbc <_scanf_float+0x7c>
 810fde4:	1e6b      	subs	r3, r5, #1
 810fde6:	2b06      	cmp	r3, #6
 810fde8:	d824      	bhi.n	810fe34 <_scanf_float+0x2f4>
 810fdea:	2d02      	cmp	r5, #2
 810fdec:	d836      	bhi.n	810fe5c <_scanf_float+0x31c>
 810fdee:	9b01      	ldr	r3, [sp, #4]
 810fdf0:	429e      	cmp	r6, r3
 810fdf2:	f67f aee7 	bls.w	810fbc4 <_scanf_float+0x84>
 810fdf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fdfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810fdfe:	464a      	mov	r2, r9
 810fe00:	4640      	mov	r0, r8
 810fe02:	4798      	blx	r3
 810fe04:	6923      	ldr	r3, [r4, #16]
 810fe06:	3b01      	subs	r3, #1
 810fe08:	6123      	str	r3, [r4, #16]
 810fe0a:	e7f0      	b.n	810fdee <_scanf_float+0x2ae>
 810fe0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fe10:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 810fe14:	464a      	mov	r2, r9
 810fe16:	4640      	mov	r0, r8
 810fe18:	4798      	blx	r3
 810fe1a:	6923      	ldr	r3, [r4, #16]
 810fe1c:	3b01      	subs	r3, #1
 810fe1e:	6123      	str	r3, [r4, #16]
 810fe20:	f10a 3aff 	add.w	sl, sl, #4294967295
 810fe24:	fa5f fa8a 	uxtb.w	sl, sl
 810fe28:	f1ba 0f02 	cmp.w	sl, #2
 810fe2c:	d1ee      	bne.n	810fe0c <_scanf_float+0x2cc>
 810fe2e:	3d03      	subs	r5, #3
 810fe30:	b2ed      	uxtb	r5, r5
 810fe32:	1b76      	subs	r6, r6, r5
 810fe34:	6823      	ldr	r3, [r4, #0]
 810fe36:	05da      	lsls	r2, r3, #23
 810fe38:	d530      	bpl.n	810fe9c <_scanf_float+0x35c>
 810fe3a:	055b      	lsls	r3, r3, #21
 810fe3c:	d511      	bpl.n	810fe62 <_scanf_float+0x322>
 810fe3e:	9b01      	ldr	r3, [sp, #4]
 810fe40:	429e      	cmp	r6, r3
 810fe42:	f67f aebf 	bls.w	810fbc4 <_scanf_float+0x84>
 810fe46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fe4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810fe4e:	464a      	mov	r2, r9
 810fe50:	4640      	mov	r0, r8
 810fe52:	4798      	blx	r3
 810fe54:	6923      	ldr	r3, [r4, #16]
 810fe56:	3b01      	subs	r3, #1
 810fe58:	6123      	str	r3, [r4, #16]
 810fe5a:	e7f0      	b.n	810fe3e <_scanf_float+0x2fe>
 810fe5c:	46aa      	mov	sl, r5
 810fe5e:	46b3      	mov	fp, r6
 810fe60:	e7de      	b.n	810fe20 <_scanf_float+0x2e0>
 810fe62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810fe66:	6923      	ldr	r3, [r4, #16]
 810fe68:	2965      	cmp	r1, #101	@ 0x65
 810fe6a:	f103 33ff 	add.w	r3, r3, #4294967295
 810fe6e:	f106 35ff 	add.w	r5, r6, #4294967295
 810fe72:	6123      	str	r3, [r4, #16]
 810fe74:	d00c      	beq.n	810fe90 <_scanf_float+0x350>
 810fe76:	2945      	cmp	r1, #69	@ 0x45
 810fe78:	d00a      	beq.n	810fe90 <_scanf_float+0x350>
 810fe7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fe7e:	464a      	mov	r2, r9
 810fe80:	4640      	mov	r0, r8
 810fe82:	4798      	blx	r3
 810fe84:	6923      	ldr	r3, [r4, #16]
 810fe86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810fe8a:	3b01      	subs	r3, #1
 810fe8c:	1eb5      	subs	r5, r6, #2
 810fe8e:	6123      	str	r3, [r4, #16]
 810fe90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810fe94:	464a      	mov	r2, r9
 810fe96:	4640      	mov	r0, r8
 810fe98:	4798      	blx	r3
 810fe9a:	462e      	mov	r6, r5
 810fe9c:	6822      	ldr	r2, [r4, #0]
 810fe9e:	f012 0210 	ands.w	r2, r2, #16
 810fea2:	d001      	beq.n	810fea8 <_scanf_float+0x368>
 810fea4:	2000      	movs	r0, #0
 810fea6:	e68e      	b.n	810fbc6 <_scanf_float+0x86>
 810fea8:	7032      	strb	r2, [r6, #0]
 810feaa:	6823      	ldr	r3, [r4, #0]
 810feac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 810feb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810feb4:	d125      	bne.n	810ff02 <_scanf_float+0x3c2>
 810feb6:	9b02      	ldr	r3, [sp, #8]
 810feb8:	429f      	cmp	r7, r3
 810feba:	d00a      	beq.n	810fed2 <_scanf_float+0x392>
 810febc:	1bda      	subs	r2, r3, r7
 810febe:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 810fec2:	429e      	cmp	r6, r3
 810fec4:	bf28      	it	cs
 810fec6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 810feca:	4922      	ldr	r1, [pc, #136]	@ (810ff54 <_scanf_float+0x414>)
 810fecc:	4630      	mov	r0, r6
 810fece:	f000 f977 	bl	81101c0 <siprintf>
 810fed2:	9901      	ldr	r1, [sp, #4]
 810fed4:	2200      	movs	r2, #0
 810fed6:	4640      	mov	r0, r8
 810fed8:	f7ff f972 	bl	810f1c0 <_strtod_r>
 810fedc:	9b03      	ldr	r3, [sp, #12]
 810fede:	6821      	ldr	r1, [r4, #0]
 810fee0:	681b      	ldr	r3, [r3, #0]
 810fee2:	f011 0f02 	tst.w	r1, #2
 810fee6:	ec57 6b10 	vmov	r6, r7, d0
 810feea:	f103 0204 	add.w	r2, r3, #4
 810feee:	d015      	beq.n	810ff1c <_scanf_float+0x3dc>
 810fef0:	9903      	ldr	r1, [sp, #12]
 810fef2:	600a      	str	r2, [r1, #0]
 810fef4:	681b      	ldr	r3, [r3, #0]
 810fef6:	e9c3 6700 	strd	r6, r7, [r3]
 810fefa:	68e3      	ldr	r3, [r4, #12]
 810fefc:	3301      	adds	r3, #1
 810fefe:	60e3      	str	r3, [r4, #12]
 810ff00:	e7d0      	b.n	810fea4 <_scanf_float+0x364>
 810ff02:	9b04      	ldr	r3, [sp, #16]
 810ff04:	2b00      	cmp	r3, #0
 810ff06:	d0e4      	beq.n	810fed2 <_scanf_float+0x392>
 810ff08:	9905      	ldr	r1, [sp, #20]
 810ff0a:	230a      	movs	r3, #10
 810ff0c:	3101      	adds	r1, #1
 810ff0e:	4640      	mov	r0, r8
 810ff10:	f002 fa20 	bl	8112354 <_strtol_r>
 810ff14:	9b04      	ldr	r3, [sp, #16]
 810ff16:	9e05      	ldr	r6, [sp, #20]
 810ff18:	1ac2      	subs	r2, r0, r3
 810ff1a:	e7d0      	b.n	810febe <_scanf_float+0x37e>
 810ff1c:	f011 0f04 	tst.w	r1, #4
 810ff20:	9903      	ldr	r1, [sp, #12]
 810ff22:	600a      	str	r2, [r1, #0]
 810ff24:	d1e6      	bne.n	810fef4 <_scanf_float+0x3b4>
 810ff26:	681d      	ldr	r5, [r3, #0]
 810ff28:	4632      	mov	r2, r6
 810ff2a:	463b      	mov	r3, r7
 810ff2c:	4630      	mov	r0, r6
 810ff2e:	4639      	mov	r1, r7
 810ff30:	f7f0 fe84 	bl	8100c3c <__aeabi_dcmpun>
 810ff34:	b128      	cbz	r0, 810ff42 <_scanf_float+0x402>
 810ff36:	4808      	ldr	r0, [pc, #32]	@ (810ff58 <_scanf_float+0x418>)
 810ff38:	f000 faf2 	bl	8110520 <nanf>
 810ff3c:	ed85 0a00 	vstr	s0, [r5]
 810ff40:	e7db      	b.n	810fefa <_scanf_float+0x3ba>
 810ff42:	4630      	mov	r0, r6
 810ff44:	4639      	mov	r1, r7
 810ff46:	f7f0 fed7 	bl	8100cf8 <__aeabi_d2f>
 810ff4a:	6028      	str	r0, [r5, #0]
 810ff4c:	e7d5      	b.n	810fefa <_scanf_float+0x3ba>
 810ff4e:	2700      	movs	r7, #0
 810ff50:	e62e      	b.n	810fbb0 <_scanf_float+0x70>
 810ff52:	bf00      	nop
 810ff54:	08113012 	.word	0x08113012
 810ff58:	081131b1 	.word	0x081131b1

0810ff5c <std>:
 810ff5c:	2300      	movs	r3, #0
 810ff5e:	b510      	push	{r4, lr}
 810ff60:	4604      	mov	r4, r0
 810ff62:	e9c0 3300 	strd	r3, r3, [r0]
 810ff66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810ff6a:	6083      	str	r3, [r0, #8]
 810ff6c:	8181      	strh	r1, [r0, #12]
 810ff6e:	6643      	str	r3, [r0, #100]	@ 0x64
 810ff70:	81c2      	strh	r2, [r0, #14]
 810ff72:	6183      	str	r3, [r0, #24]
 810ff74:	4619      	mov	r1, r3
 810ff76:	2208      	movs	r2, #8
 810ff78:	305c      	adds	r0, #92	@ 0x5c
 810ff7a:	f000 fa1b 	bl	81103b4 <memset>
 810ff7e:	4b0d      	ldr	r3, [pc, #52]	@ (810ffb4 <std+0x58>)
 810ff80:	6263      	str	r3, [r4, #36]	@ 0x24
 810ff82:	4b0d      	ldr	r3, [pc, #52]	@ (810ffb8 <std+0x5c>)
 810ff84:	62a3      	str	r3, [r4, #40]	@ 0x28
 810ff86:	4b0d      	ldr	r3, [pc, #52]	@ (810ffbc <std+0x60>)
 810ff88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810ff8a:	4b0d      	ldr	r3, [pc, #52]	@ (810ffc0 <std+0x64>)
 810ff8c:	6323      	str	r3, [r4, #48]	@ 0x30
 810ff8e:	4b0d      	ldr	r3, [pc, #52]	@ (810ffc4 <std+0x68>)
 810ff90:	6224      	str	r4, [r4, #32]
 810ff92:	429c      	cmp	r4, r3
 810ff94:	d006      	beq.n	810ffa4 <std+0x48>
 810ff96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810ff9a:	4294      	cmp	r4, r2
 810ff9c:	d002      	beq.n	810ffa4 <std+0x48>
 810ff9e:	33d0      	adds	r3, #208	@ 0xd0
 810ffa0:	429c      	cmp	r4, r3
 810ffa2:	d105      	bne.n	810ffb0 <std+0x54>
 810ffa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810ffa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810ffac:	f7f5 be35 	b.w	8105c1a <__retarget_lock_init_recursive>
 810ffb0:	bd10      	pop	{r4, pc}
 810ffb2:	bf00      	nop
 810ffb4:	08110205 	.word	0x08110205
 810ffb8:	08110227 	.word	0x08110227
 810ffbc:	0811025f 	.word	0x0811025f
 810ffc0:	08110283 	.word	0x08110283
 810ffc4:	10004fb0 	.word	0x10004fb0

0810ffc8 <stdio_exit_handler>:
 810ffc8:	4a02      	ldr	r2, [pc, #8]	@ (810ffd4 <stdio_exit_handler+0xc>)
 810ffca:	4903      	ldr	r1, [pc, #12]	@ (810ffd8 <stdio_exit_handler+0x10>)
 810ffcc:	4803      	ldr	r0, [pc, #12]	@ (810ffdc <stdio_exit_handler+0x14>)
 810ffce:	f000 b869 	b.w	81100a4 <_fwalk_sglue>
 810ffd2:	bf00      	nop
 810ffd4:	10000068 	.word	0x10000068
 810ffd8:	081129ad 	.word	0x081129ad
 810ffdc:	100001e4 	.word	0x100001e4

0810ffe0 <cleanup_stdio>:
 810ffe0:	6841      	ldr	r1, [r0, #4]
 810ffe2:	4b0c      	ldr	r3, [pc, #48]	@ (8110014 <cleanup_stdio+0x34>)
 810ffe4:	4299      	cmp	r1, r3
 810ffe6:	b510      	push	{r4, lr}
 810ffe8:	4604      	mov	r4, r0
 810ffea:	d001      	beq.n	810fff0 <cleanup_stdio+0x10>
 810ffec:	f002 fcde 	bl	81129ac <_fflush_r>
 810fff0:	68a1      	ldr	r1, [r4, #8]
 810fff2:	4b09      	ldr	r3, [pc, #36]	@ (8110018 <cleanup_stdio+0x38>)
 810fff4:	4299      	cmp	r1, r3
 810fff6:	d002      	beq.n	810fffe <cleanup_stdio+0x1e>
 810fff8:	4620      	mov	r0, r4
 810fffa:	f002 fcd7 	bl	81129ac <_fflush_r>
 810fffe:	68e1      	ldr	r1, [r4, #12]
 8110000:	4b06      	ldr	r3, [pc, #24]	@ (811001c <cleanup_stdio+0x3c>)
 8110002:	4299      	cmp	r1, r3
 8110004:	d004      	beq.n	8110010 <cleanup_stdio+0x30>
 8110006:	4620      	mov	r0, r4
 8110008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811000c:	f002 bcce 	b.w	81129ac <_fflush_r>
 8110010:	bd10      	pop	{r4, pc}
 8110012:	bf00      	nop
 8110014:	10004fb0 	.word	0x10004fb0
 8110018:	10005018 	.word	0x10005018
 811001c:	10005080 	.word	0x10005080

08110020 <global_stdio_init.part.0>:
 8110020:	b510      	push	{r4, lr}
 8110022:	4b0b      	ldr	r3, [pc, #44]	@ (8110050 <global_stdio_init.part.0+0x30>)
 8110024:	4c0b      	ldr	r4, [pc, #44]	@ (8110054 <global_stdio_init.part.0+0x34>)
 8110026:	4a0c      	ldr	r2, [pc, #48]	@ (8110058 <global_stdio_init.part.0+0x38>)
 8110028:	601a      	str	r2, [r3, #0]
 811002a:	4620      	mov	r0, r4
 811002c:	2200      	movs	r2, #0
 811002e:	2104      	movs	r1, #4
 8110030:	f7ff ff94 	bl	810ff5c <std>
 8110034:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8110038:	2201      	movs	r2, #1
 811003a:	2109      	movs	r1, #9
 811003c:	f7ff ff8e 	bl	810ff5c <std>
 8110040:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8110044:	2202      	movs	r2, #2
 8110046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811004a:	2112      	movs	r1, #18
 811004c:	f7ff bf86 	b.w	810ff5c <std>
 8110050:	100050e8 	.word	0x100050e8
 8110054:	10004fb0 	.word	0x10004fb0
 8110058:	0810ffc9 	.word	0x0810ffc9

0811005c <__sfp_lock_acquire>:
 811005c:	4801      	ldr	r0, [pc, #4]	@ (8110064 <__sfp_lock_acquire+0x8>)
 811005e:	f7f5 be03 	b.w	8105c68 <__retarget_lock_acquire_recursive>
 8110062:	bf00      	nop
 8110064:	100005a8 	.word	0x100005a8

08110068 <__sfp_lock_release>:
 8110068:	4801      	ldr	r0, [pc, #4]	@ (8110070 <__sfp_lock_release+0x8>)
 811006a:	f7f5 be12 	b.w	8105c92 <__retarget_lock_release_recursive>
 811006e:	bf00      	nop
 8110070:	100005a8 	.word	0x100005a8

08110074 <__sinit>:
 8110074:	b510      	push	{r4, lr}
 8110076:	4604      	mov	r4, r0
 8110078:	f7ff fff0 	bl	811005c <__sfp_lock_acquire>
 811007c:	6a23      	ldr	r3, [r4, #32]
 811007e:	b11b      	cbz	r3, 8110088 <__sinit+0x14>
 8110080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8110084:	f7ff bff0 	b.w	8110068 <__sfp_lock_release>
 8110088:	4b04      	ldr	r3, [pc, #16]	@ (811009c <__sinit+0x28>)
 811008a:	6223      	str	r3, [r4, #32]
 811008c:	4b04      	ldr	r3, [pc, #16]	@ (81100a0 <__sinit+0x2c>)
 811008e:	681b      	ldr	r3, [r3, #0]
 8110090:	2b00      	cmp	r3, #0
 8110092:	d1f5      	bne.n	8110080 <__sinit+0xc>
 8110094:	f7ff ffc4 	bl	8110020 <global_stdio_init.part.0>
 8110098:	e7f2      	b.n	8110080 <__sinit+0xc>
 811009a:	bf00      	nop
 811009c:	0810ffe1 	.word	0x0810ffe1
 81100a0:	100050e8 	.word	0x100050e8

081100a4 <_fwalk_sglue>:
 81100a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81100a8:	4607      	mov	r7, r0
 81100aa:	4688      	mov	r8, r1
 81100ac:	4614      	mov	r4, r2
 81100ae:	2600      	movs	r6, #0
 81100b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 81100b4:	f1b9 0901 	subs.w	r9, r9, #1
 81100b8:	d505      	bpl.n	81100c6 <_fwalk_sglue+0x22>
 81100ba:	6824      	ldr	r4, [r4, #0]
 81100bc:	2c00      	cmp	r4, #0
 81100be:	d1f7      	bne.n	81100b0 <_fwalk_sglue+0xc>
 81100c0:	4630      	mov	r0, r6
 81100c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81100c6:	89ab      	ldrh	r3, [r5, #12]
 81100c8:	2b01      	cmp	r3, #1
 81100ca:	d907      	bls.n	81100dc <_fwalk_sglue+0x38>
 81100cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81100d0:	3301      	adds	r3, #1
 81100d2:	d003      	beq.n	81100dc <_fwalk_sglue+0x38>
 81100d4:	4629      	mov	r1, r5
 81100d6:	4638      	mov	r0, r7
 81100d8:	47c0      	blx	r8
 81100da:	4306      	orrs	r6, r0
 81100dc:	3568      	adds	r5, #104	@ 0x68
 81100de:	e7e9      	b.n	81100b4 <_fwalk_sglue+0x10>

081100e0 <iprintf>:
 81100e0:	b40f      	push	{r0, r1, r2, r3}
 81100e2:	b507      	push	{r0, r1, r2, lr}
 81100e4:	4906      	ldr	r1, [pc, #24]	@ (8110100 <iprintf+0x20>)
 81100e6:	ab04      	add	r3, sp, #16
 81100e8:	6808      	ldr	r0, [r1, #0]
 81100ea:	f853 2b04 	ldr.w	r2, [r3], #4
 81100ee:	6881      	ldr	r1, [r0, #8]
 81100f0:	9301      	str	r3, [sp, #4]
 81100f2:	f002 fabf 	bl	8112674 <_vfiprintf_r>
 81100f6:	b003      	add	sp, #12
 81100f8:	f85d eb04 	ldr.w	lr, [sp], #4
 81100fc:	b004      	add	sp, #16
 81100fe:	4770      	bx	lr
 8110100:	100001e0 	.word	0x100001e0

08110104 <_puts_r>:
 8110104:	6a03      	ldr	r3, [r0, #32]
 8110106:	b570      	push	{r4, r5, r6, lr}
 8110108:	6884      	ldr	r4, [r0, #8]
 811010a:	4605      	mov	r5, r0
 811010c:	460e      	mov	r6, r1
 811010e:	b90b      	cbnz	r3, 8110114 <_puts_r+0x10>
 8110110:	f7ff ffb0 	bl	8110074 <__sinit>
 8110114:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8110116:	07db      	lsls	r3, r3, #31
 8110118:	d405      	bmi.n	8110126 <_puts_r+0x22>
 811011a:	89a3      	ldrh	r3, [r4, #12]
 811011c:	0598      	lsls	r0, r3, #22
 811011e:	d402      	bmi.n	8110126 <_puts_r+0x22>
 8110120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8110122:	f7f5 fda1 	bl	8105c68 <__retarget_lock_acquire_recursive>
 8110126:	89a3      	ldrh	r3, [r4, #12]
 8110128:	0719      	lsls	r1, r3, #28
 811012a:	d502      	bpl.n	8110132 <_puts_r+0x2e>
 811012c:	6923      	ldr	r3, [r4, #16]
 811012e:	2b00      	cmp	r3, #0
 8110130:	d135      	bne.n	811019e <_puts_r+0x9a>
 8110132:	4621      	mov	r1, r4
 8110134:	4628      	mov	r0, r5
 8110136:	f000 f8e7 	bl	8110308 <__swsetup_r>
 811013a:	b380      	cbz	r0, 811019e <_puts_r+0x9a>
 811013c:	f04f 35ff 	mov.w	r5, #4294967295
 8110140:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8110142:	07da      	lsls	r2, r3, #31
 8110144:	d405      	bmi.n	8110152 <_puts_r+0x4e>
 8110146:	89a3      	ldrh	r3, [r4, #12]
 8110148:	059b      	lsls	r3, r3, #22
 811014a:	d402      	bmi.n	8110152 <_puts_r+0x4e>
 811014c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811014e:	f7f5 fda0 	bl	8105c92 <__retarget_lock_release_recursive>
 8110152:	4628      	mov	r0, r5
 8110154:	bd70      	pop	{r4, r5, r6, pc}
 8110156:	2b00      	cmp	r3, #0
 8110158:	da04      	bge.n	8110164 <_puts_r+0x60>
 811015a:	69a2      	ldr	r2, [r4, #24]
 811015c:	429a      	cmp	r2, r3
 811015e:	dc17      	bgt.n	8110190 <_puts_r+0x8c>
 8110160:	290a      	cmp	r1, #10
 8110162:	d015      	beq.n	8110190 <_puts_r+0x8c>
 8110164:	6823      	ldr	r3, [r4, #0]
 8110166:	1c5a      	adds	r2, r3, #1
 8110168:	6022      	str	r2, [r4, #0]
 811016a:	7019      	strb	r1, [r3, #0]
 811016c:	68a3      	ldr	r3, [r4, #8]
 811016e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8110172:	3b01      	subs	r3, #1
 8110174:	60a3      	str	r3, [r4, #8]
 8110176:	2900      	cmp	r1, #0
 8110178:	d1ed      	bne.n	8110156 <_puts_r+0x52>
 811017a:	2b00      	cmp	r3, #0
 811017c:	da11      	bge.n	81101a2 <_puts_r+0x9e>
 811017e:	4622      	mov	r2, r4
 8110180:	210a      	movs	r1, #10
 8110182:	4628      	mov	r0, r5
 8110184:	f000 f881 	bl	811028a <__swbuf_r>
 8110188:	3001      	adds	r0, #1
 811018a:	d0d7      	beq.n	811013c <_puts_r+0x38>
 811018c:	250a      	movs	r5, #10
 811018e:	e7d7      	b.n	8110140 <_puts_r+0x3c>
 8110190:	4622      	mov	r2, r4
 8110192:	4628      	mov	r0, r5
 8110194:	f000 f879 	bl	811028a <__swbuf_r>
 8110198:	3001      	adds	r0, #1
 811019a:	d1e7      	bne.n	811016c <_puts_r+0x68>
 811019c:	e7ce      	b.n	811013c <_puts_r+0x38>
 811019e:	3e01      	subs	r6, #1
 81101a0:	e7e4      	b.n	811016c <_puts_r+0x68>
 81101a2:	6823      	ldr	r3, [r4, #0]
 81101a4:	1c5a      	adds	r2, r3, #1
 81101a6:	6022      	str	r2, [r4, #0]
 81101a8:	220a      	movs	r2, #10
 81101aa:	701a      	strb	r2, [r3, #0]
 81101ac:	e7ee      	b.n	811018c <_puts_r+0x88>
	...

081101b0 <puts>:
 81101b0:	4b02      	ldr	r3, [pc, #8]	@ (81101bc <puts+0xc>)
 81101b2:	4601      	mov	r1, r0
 81101b4:	6818      	ldr	r0, [r3, #0]
 81101b6:	f7ff bfa5 	b.w	8110104 <_puts_r>
 81101ba:	bf00      	nop
 81101bc:	100001e0 	.word	0x100001e0

081101c0 <siprintf>:
 81101c0:	b40e      	push	{r1, r2, r3}
 81101c2:	b510      	push	{r4, lr}
 81101c4:	b09d      	sub	sp, #116	@ 0x74
 81101c6:	ab1f      	add	r3, sp, #124	@ 0x7c
 81101c8:	9002      	str	r0, [sp, #8]
 81101ca:	9006      	str	r0, [sp, #24]
 81101cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 81101d0:	480a      	ldr	r0, [pc, #40]	@ (81101fc <siprintf+0x3c>)
 81101d2:	9107      	str	r1, [sp, #28]
 81101d4:	9104      	str	r1, [sp, #16]
 81101d6:	490a      	ldr	r1, [pc, #40]	@ (8110200 <siprintf+0x40>)
 81101d8:	f853 2b04 	ldr.w	r2, [r3], #4
 81101dc:	9105      	str	r1, [sp, #20]
 81101de:	2400      	movs	r4, #0
 81101e0:	a902      	add	r1, sp, #8
 81101e2:	6800      	ldr	r0, [r0, #0]
 81101e4:	9301      	str	r3, [sp, #4]
 81101e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 81101e8:	f002 f91e 	bl	8112428 <_svfiprintf_r>
 81101ec:	9b02      	ldr	r3, [sp, #8]
 81101ee:	701c      	strb	r4, [r3, #0]
 81101f0:	b01d      	add	sp, #116	@ 0x74
 81101f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81101f6:	b003      	add	sp, #12
 81101f8:	4770      	bx	lr
 81101fa:	bf00      	nop
 81101fc:	100001e0 	.word	0x100001e0
 8110200:	ffff0208 	.word	0xffff0208

08110204 <__sread>:
 8110204:	b510      	push	{r4, lr}
 8110206:	460c      	mov	r4, r1
 8110208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811020c:	f000 f912 	bl	8110434 <_read_r>
 8110210:	2800      	cmp	r0, #0
 8110212:	bfab      	itete	ge
 8110214:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8110216:	89a3      	ldrhlt	r3, [r4, #12]
 8110218:	181b      	addge	r3, r3, r0
 811021a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 811021e:	bfac      	ite	ge
 8110220:	6563      	strge	r3, [r4, #84]	@ 0x54
 8110222:	81a3      	strhlt	r3, [r4, #12]
 8110224:	bd10      	pop	{r4, pc}

08110226 <__swrite>:
 8110226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811022a:	461f      	mov	r7, r3
 811022c:	898b      	ldrh	r3, [r1, #12]
 811022e:	05db      	lsls	r3, r3, #23
 8110230:	4605      	mov	r5, r0
 8110232:	460c      	mov	r4, r1
 8110234:	4616      	mov	r6, r2
 8110236:	d505      	bpl.n	8110244 <__swrite+0x1e>
 8110238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811023c:	2302      	movs	r3, #2
 811023e:	2200      	movs	r2, #0
 8110240:	f000 f8e6 	bl	8110410 <_lseek_r>
 8110244:	89a3      	ldrh	r3, [r4, #12]
 8110246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811024a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 811024e:	81a3      	strh	r3, [r4, #12]
 8110250:	4632      	mov	r2, r6
 8110252:	463b      	mov	r3, r7
 8110254:	4628      	mov	r0, r5
 8110256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 811025a:	f000 b90d 	b.w	8110478 <_write_r>

0811025e <__sseek>:
 811025e:	b510      	push	{r4, lr}
 8110260:	460c      	mov	r4, r1
 8110262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8110266:	f000 f8d3 	bl	8110410 <_lseek_r>
 811026a:	1c43      	adds	r3, r0, #1
 811026c:	89a3      	ldrh	r3, [r4, #12]
 811026e:	bf15      	itete	ne
 8110270:	6560      	strne	r0, [r4, #84]	@ 0x54
 8110272:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8110276:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 811027a:	81a3      	strheq	r3, [r4, #12]
 811027c:	bf18      	it	ne
 811027e:	81a3      	strhne	r3, [r4, #12]
 8110280:	bd10      	pop	{r4, pc}

08110282 <__sclose>:
 8110282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8110286:	f000 b8b3 	b.w	81103f0 <_close_r>

0811028a <__swbuf_r>:
 811028a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811028c:	460e      	mov	r6, r1
 811028e:	4614      	mov	r4, r2
 8110290:	4605      	mov	r5, r0
 8110292:	b118      	cbz	r0, 811029c <__swbuf_r+0x12>
 8110294:	6a03      	ldr	r3, [r0, #32]
 8110296:	b90b      	cbnz	r3, 811029c <__swbuf_r+0x12>
 8110298:	f7ff feec 	bl	8110074 <__sinit>
 811029c:	69a3      	ldr	r3, [r4, #24]
 811029e:	60a3      	str	r3, [r4, #8]
 81102a0:	89a3      	ldrh	r3, [r4, #12]
 81102a2:	071a      	lsls	r2, r3, #28
 81102a4:	d501      	bpl.n	81102aa <__swbuf_r+0x20>
 81102a6:	6923      	ldr	r3, [r4, #16]
 81102a8:	b943      	cbnz	r3, 81102bc <__swbuf_r+0x32>
 81102aa:	4621      	mov	r1, r4
 81102ac:	4628      	mov	r0, r5
 81102ae:	f000 f82b 	bl	8110308 <__swsetup_r>
 81102b2:	b118      	cbz	r0, 81102bc <__swbuf_r+0x32>
 81102b4:	f04f 37ff 	mov.w	r7, #4294967295
 81102b8:	4638      	mov	r0, r7
 81102ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81102bc:	6823      	ldr	r3, [r4, #0]
 81102be:	6922      	ldr	r2, [r4, #16]
 81102c0:	1a98      	subs	r0, r3, r2
 81102c2:	6963      	ldr	r3, [r4, #20]
 81102c4:	b2f6      	uxtb	r6, r6
 81102c6:	4283      	cmp	r3, r0
 81102c8:	4637      	mov	r7, r6
 81102ca:	dc05      	bgt.n	81102d8 <__swbuf_r+0x4e>
 81102cc:	4621      	mov	r1, r4
 81102ce:	4628      	mov	r0, r5
 81102d0:	f002 fb6c 	bl	81129ac <_fflush_r>
 81102d4:	2800      	cmp	r0, #0
 81102d6:	d1ed      	bne.n	81102b4 <__swbuf_r+0x2a>
 81102d8:	68a3      	ldr	r3, [r4, #8]
 81102da:	3b01      	subs	r3, #1
 81102dc:	60a3      	str	r3, [r4, #8]
 81102de:	6823      	ldr	r3, [r4, #0]
 81102e0:	1c5a      	adds	r2, r3, #1
 81102e2:	6022      	str	r2, [r4, #0]
 81102e4:	701e      	strb	r6, [r3, #0]
 81102e6:	6962      	ldr	r2, [r4, #20]
 81102e8:	1c43      	adds	r3, r0, #1
 81102ea:	429a      	cmp	r2, r3
 81102ec:	d004      	beq.n	81102f8 <__swbuf_r+0x6e>
 81102ee:	89a3      	ldrh	r3, [r4, #12]
 81102f0:	07db      	lsls	r3, r3, #31
 81102f2:	d5e1      	bpl.n	81102b8 <__swbuf_r+0x2e>
 81102f4:	2e0a      	cmp	r6, #10
 81102f6:	d1df      	bne.n	81102b8 <__swbuf_r+0x2e>
 81102f8:	4621      	mov	r1, r4
 81102fa:	4628      	mov	r0, r5
 81102fc:	f002 fb56 	bl	81129ac <_fflush_r>
 8110300:	2800      	cmp	r0, #0
 8110302:	d0d9      	beq.n	81102b8 <__swbuf_r+0x2e>
 8110304:	e7d6      	b.n	81102b4 <__swbuf_r+0x2a>
	...

08110308 <__swsetup_r>:
 8110308:	b538      	push	{r3, r4, r5, lr}
 811030a:	4b29      	ldr	r3, [pc, #164]	@ (81103b0 <__swsetup_r+0xa8>)
 811030c:	4605      	mov	r5, r0
 811030e:	6818      	ldr	r0, [r3, #0]
 8110310:	460c      	mov	r4, r1
 8110312:	b118      	cbz	r0, 811031c <__swsetup_r+0x14>
 8110314:	6a03      	ldr	r3, [r0, #32]
 8110316:	b90b      	cbnz	r3, 811031c <__swsetup_r+0x14>
 8110318:	f7ff feac 	bl	8110074 <__sinit>
 811031c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8110320:	0719      	lsls	r1, r3, #28
 8110322:	d422      	bmi.n	811036a <__swsetup_r+0x62>
 8110324:	06da      	lsls	r2, r3, #27
 8110326:	d407      	bmi.n	8110338 <__swsetup_r+0x30>
 8110328:	2209      	movs	r2, #9
 811032a:	602a      	str	r2, [r5, #0]
 811032c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8110330:	81a3      	strh	r3, [r4, #12]
 8110332:	f04f 30ff 	mov.w	r0, #4294967295
 8110336:	e033      	b.n	81103a0 <__swsetup_r+0x98>
 8110338:	0758      	lsls	r0, r3, #29
 811033a:	d512      	bpl.n	8110362 <__swsetup_r+0x5a>
 811033c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 811033e:	b141      	cbz	r1, 8110352 <__swsetup_r+0x4a>
 8110340:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8110344:	4299      	cmp	r1, r3
 8110346:	d002      	beq.n	811034e <__swsetup_r+0x46>
 8110348:	4628      	mov	r0, r5
 811034a:	f000 ff49 	bl	81111e0 <_free_r>
 811034e:	2300      	movs	r3, #0
 8110350:	6363      	str	r3, [r4, #52]	@ 0x34
 8110352:	89a3      	ldrh	r3, [r4, #12]
 8110354:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8110358:	81a3      	strh	r3, [r4, #12]
 811035a:	2300      	movs	r3, #0
 811035c:	6063      	str	r3, [r4, #4]
 811035e:	6923      	ldr	r3, [r4, #16]
 8110360:	6023      	str	r3, [r4, #0]
 8110362:	89a3      	ldrh	r3, [r4, #12]
 8110364:	f043 0308 	orr.w	r3, r3, #8
 8110368:	81a3      	strh	r3, [r4, #12]
 811036a:	6923      	ldr	r3, [r4, #16]
 811036c:	b94b      	cbnz	r3, 8110382 <__swsetup_r+0x7a>
 811036e:	89a3      	ldrh	r3, [r4, #12]
 8110370:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8110374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8110378:	d003      	beq.n	8110382 <__swsetup_r+0x7a>
 811037a:	4621      	mov	r1, r4
 811037c:	4628      	mov	r0, r5
 811037e:	f002 fb63 	bl	8112a48 <__smakebuf_r>
 8110382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8110386:	f013 0201 	ands.w	r2, r3, #1
 811038a:	d00a      	beq.n	81103a2 <__swsetup_r+0x9a>
 811038c:	2200      	movs	r2, #0
 811038e:	60a2      	str	r2, [r4, #8]
 8110390:	6962      	ldr	r2, [r4, #20]
 8110392:	4252      	negs	r2, r2
 8110394:	61a2      	str	r2, [r4, #24]
 8110396:	6922      	ldr	r2, [r4, #16]
 8110398:	b942      	cbnz	r2, 81103ac <__swsetup_r+0xa4>
 811039a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 811039e:	d1c5      	bne.n	811032c <__swsetup_r+0x24>
 81103a0:	bd38      	pop	{r3, r4, r5, pc}
 81103a2:	0799      	lsls	r1, r3, #30
 81103a4:	bf58      	it	pl
 81103a6:	6962      	ldrpl	r2, [r4, #20]
 81103a8:	60a2      	str	r2, [r4, #8]
 81103aa:	e7f4      	b.n	8110396 <__swsetup_r+0x8e>
 81103ac:	2000      	movs	r0, #0
 81103ae:	e7f7      	b.n	81103a0 <__swsetup_r+0x98>
 81103b0:	100001e0 	.word	0x100001e0

081103b4 <memset>:
 81103b4:	4402      	add	r2, r0
 81103b6:	4603      	mov	r3, r0
 81103b8:	4293      	cmp	r3, r2
 81103ba:	d100      	bne.n	81103be <memset+0xa>
 81103bc:	4770      	bx	lr
 81103be:	f803 1b01 	strb.w	r1, [r3], #1
 81103c2:	e7f9      	b.n	81103b8 <memset+0x4>

081103c4 <strncmp>:
 81103c4:	b510      	push	{r4, lr}
 81103c6:	b16a      	cbz	r2, 81103e4 <strncmp+0x20>
 81103c8:	3901      	subs	r1, #1
 81103ca:	1884      	adds	r4, r0, r2
 81103cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 81103d0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 81103d4:	429a      	cmp	r2, r3
 81103d6:	d103      	bne.n	81103e0 <strncmp+0x1c>
 81103d8:	42a0      	cmp	r0, r4
 81103da:	d001      	beq.n	81103e0 <strncmp+0x1c>
 81103dc:	2a00      	cmp	r2, #0
 81103de:	d1f5      	bne.n	81103cc <strncmp+0x8>
 81103e0:	1ad0      	subs	r0, r2, r3
 81103e2:	bd10      	pop	{r4, pc}
 81103e4:	4610      	mov	r0, r2
 81103e6:	e7fc      	b.n	81103e2 <strncmp+0x1e>

081103e8 <_localeconv_r>:
 81103e8:	4800      	ldr	r0, [pc, #0]	@ (81103ec <_localeconv_r+0x4>)
 81103ea:	4770      	bx	lr
 81103ec:	10000164 	.word	0x10000164

081103f0 <_close_r>:
 81103f0:	b538      	push	{r3, r4, r5, lr}
 81103f2:	4d06      	ldr	r5, [pc, #24]	@ (811040c <_close_r+0x1c>)
 81103f4:	2300      	movs	r3, #0
 81103f6:	4604      	mov	r4, r0
 81103f8:	4608      	mov	r0, r1
 81103fa:	602b      	str	r3, [r5, #0]
 81103fc:	f7f1 fa28 	bl	8101850 <_close>
 8110400:	1c43      	adds	r3, r0, #1
 8110402:	d102      	bne.n	811040a <_close_r+0x1a>
 8110404:	682b      	ldr	r3, [r5, #0]
 8110406:	b103      	cbz	r3, 811040a <_close_r+0x1a>
 8110408:	6023      	str	r3, [r4, #0]
 811040a:	bd38      	pop	{r3, r4, r5, pc}
 811040c:	100050ec 	.word	0x100050ec

08110410 <_lseek_r>:
 8110410:	b538      	push	{r3, r4, r5, lr}
 8110412:	4d07      	ldr	r5, [pc, #28]	@ (8110430 <_lseek_r+0x20>)
 8110414:	4604      	mov	r4, r0
 8110416:	4608      	mov	r0, r1
 8110418:	4611      	mov	r1, r2
 811041a:	2200      	movs	r2, #0
 811041c:	602a      	str	r2, [r5, #0]
 811041e:	461a      	mov	r2, r3
 8110420:	f7f1 fa3d 	bl	810189e <_lseek>
 8110424:	1c43      	adds	r3, r0, #1
 8110426:	d102      	bne.n	811042e <_lseek_r+0x1e>
 8110428:	682b      	ldr	r3, [r5, #0]
 811042a:	b103      	cbz	r3, 811042e <_lseek_r+0x1e>
 811042c:	6023      	str	r3, [r4, #0]
 811042e:	bd38      	pop	{r3, r4, r5, pc}
 8110430:	100050ec 	.word	0x100050ec

08110434 <_read_r>:
 8110434:	b538      	push	{r3, r4, r5, lr}
 8110436:	4d07      	ldr	r5, [pc, #28]	@ (8110454 <_read_r+0x20>)
 8110438:	4604      	mov	r4, r0
 811043a:	4608      	mov	r0, r1
 811043c:	4611      	mov	r1, r2
 811043e:	2200      	movs	r2, #0
 8110440:	602a      	str	r2, [r5, #0]
 8110442:	461a      	mov	r2, r3
 8110444:	f7f1 f9e7 	bl	8101816 <_read>
 8110448:	1c43      	adds	r3, r0, #1
 811044a:	d102      	bne.n	8110452 <_read_r+0x1e>
 811044c:	682b      	ldr	r3, [r5, #0]
 811044e:	b103      	cbz	r3, 8110452 <_read_r+0x1e>
 8110450:	6023      	str	r3, [r4, #0]
 8110452:	bd38      	pop	{r3, r4, r5, pc}
 8110454:	100050ec 	.word	0x100050ec

08110458 <_sbrk_r>:
 8110458:	b538      	push	{r3, r4, r5, lr}
 811045a:	4d06      	ldr	r5, [pc, #24]	@ (8110474 <_sbrk_r+0x1c>)
 811045c:	2300      	movs	r3, #0
 811045e:	4604      	mov	r4, r0
 8110460:	4608      	mov	r0, r1
 8110462:	602b      	str	r3, [r5, #0]
 8110464:	f7f1 fa28 	bl	81018b8 <_sbrk>
 8110468:	1c43      	adds	r3, r0, #1
 811046a:	d102      	bne.n	8110472 <_sbrk_r+0x1a>
 811046c:	682b      	ldr	r3, [r5, #0]
 811046e:	b103      	cbz	r3, 8110472 <_sbrk_r+0x1a>
 8110470:	6023      	str	r3, [r4, #0]
 8110472:	bd38      	pop	{r3, r4, r5, pc}
 8110474:	100050ec 	.word	0x100050ec

08110478 <_write_r>:
 8110478:	b538      	push	{r3, r4, r5, lr}
 811047a:	4d07      	ldr	r5, [pc, #28]	@ (8110498 <_write_r+0x20>)
 811047c:	4604      	mov	r4, r0
 811047e:	4608      	mov	r0, r1
 8110480:	4611      	mov	r1, r2
 8110482:	2200      	movs	r2, #0
 8110484:	602a      	str	r2, [r5, #0]
 8110486:	461a      	mov	r2, r3
 8110488:	f7f1 f8b8 	bl	81015fc <_write>
 811048c:	1c43      	adds	r3, r0, #1
 811048e:	d102      	bne.n	8110496 <_write_r+0x1e>
 8110490:	682b      	ldr	r3, [r5, #0]
 8110492:	b103      	cbz	r3, 8110496 <_write_r+0x1e>
 8110494:	6023      	str	r3, [r4, #0]
 8110496:	bd38      	pop	{r3, r4, r5, pc}
 8110498:	100050ec 	.word	0x100050ec

0811049c <__errno>:
 811049c:	4b01      	ldr	r3, [pc, #4]	@ (81104a4 <__errno+0x8>)
 811049e:	6818      	ldr	r0, [r3, #0]
 81104a0:	4770      	bx	lr
 81104a2:	bf00      	nop
 81104a4:	100001e0 	.word	0x100001e0

081104a8 <__libc_init_array>:
 81104a8:	b570      	push	{r4, r5, r6, lr}
 81104aa:	4d0d      	ldr	r5, [pc, #52]	@ (81104e0 <__libc_init_array+0x38>)
 81104ac:	4c0d      	ldr	r4, [pc, #52]	@ (81104e4 <__libc_init_array+0x3c>)
 81104ae:	1b64      	subs	r4, r4, r5
 81104b0:	10a4      	asrs	r4, r4, #2
 81104b2:	2600      	movs	r6, #0
 81104b4:	42a6      	cmp	r6, r4
 81104b6:	d109      	bne.n	81104cc <__libc_init_array+0x24>
 81104b8:	4d0b      	ldr	r5, [pc, #44]	@ (81104e8 <__libc_init_array+0x40>)
 81104ba:	4c0c      	ldr	r4, [pc, #48]	@ (81104ec <__libc_init_array+0x44>)
 81104bc:	f002 fd04 	bl	8112ec8 <_init>
 81104c0:	1b64      	subs	r4, r4, r5
 81104c2:	10a4      	asrs	r4, r4, #2
 81104c4:	2600      	movs	r6, #0
 81104c6:	42a6      	cmp	r6, r4
 81104c8:	d105      	bne.n	81104d6 <__libc_init_array+0x2e>
 81104ca:	bd70      	pop	{r4, r5, r6, pc}
 81104cc:	f855 3b04 	ldr.w	r3, [r5], #4
 81104d0:	4798      	blx	r3
 81104d2:	3601      	adds	r6, #1
 81104d4:	e7ee      	b.n	81104b4 <__libc_init_array+0xc>
 81104d6:	f855 3b04 	ldr.w	r3, [r5], #4
 81104da:	4798      	blx	r3
 81104dc:	3601      	adds	r6, #1
 81104de:	e7f2      	b.n	81104c6 <__libc_init_array+0x1e>
 81104e0:	08113428 	.word	0x08113428
 81104e4:	08113428 	.word	0x08113428
 81104e8:	08113428 	.word	0x08113428
 81104ec:	0811342c 	.word	0x0811342c

081104f0 <memcpy>:
 81104f0:	440a      	add	r2, r1
 81104f2:	4291      	cmp	r1, r2
 81104f4:	f100 33ff 	add.w	r3, r0, #4294967295
 81104f8:	d100      	bne.n	81104fc <memcpy+0xc>
 81104fa:	4770      	bx	lr
 81104fc:	b510      	push	{r4, lr}
 81104fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8110502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8110506:	4291      	cmp	r1, r2
 8110508:	d1f9      	bne.n	81104fe <memcpy+0xe>
 811050a:	bd10      	pop	{r4, pc}
 811050c:	0000      	movs	r0, r0
	...

08110510 <nan>:
 8110510:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8110518 <nan+0x8>
 8110514:	4770      	bx	lr
 8110516:	bf00      	nop
 8110518:	00000000 	.word	0x00000000
 811051c:	7ff80000 	.word	0x7ff80000

08110520 <nanf>:
 8110520:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8110528 <nanf+0x8>
 8110524:	4770      	bx	lr
 8110526:	bf00      	nop
 8110528:	7fc00000 	.word	0x7fc00000

0811052c <quorem>:
 811052c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110530:	6903      	ldr	r3, [r0, #16]
 8110532:	690c      	ldr	r4, [r1, #16]
 8110534:	42a3      	cmp	r3, r4
 8110536:	4607      	mov	r7, r0
 8110538:	db7e      	blt.n	8110638 <quorem+0x10c>
 811053a:	3c01      	subs	r4, #1
 811053c:	f101 0814 	add.w	r8, r1, #20
 8110540:	00a3      	lsls	r3, r4, #2
 8110542:	f100 0514 	add.w	r5, r0, #20
 8110546:	9300      	str	r3, [sp, #0]
 8110548:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 811054c:	9301      	str	r3, [sp, #4]
 811054e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8110552:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8110556:	3301      	adds	r3, #1
 8110558:	429a      	cmp	r2, r3
 811055a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 811055e:	fbb2 f6f3 	udiv	r6, r2, r3
 8110562:	d32e      	bcc.n	81105c2 <quorem+0x96>
 8110564:	f04f 0a00 	mov.w	sl, #0
 8110568:	46c4      	mov	ip, r8
 811056a:	46ae      	mov	lr, r5
 811056c:	46d3      	mov	fp, sl
 811056e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8110572:	b298      	uxth	r0, r3
 8110574:	fb06 a000 	mla	r0, r6, r0, sl
 8110578:	0c02      	lsrs	r2, r0, #16
 811057a:	0c1b      	lsrs	r3, r3, #16
 811057c:	fb06 2303 	mla	r3, r6, r3, r2
 8110580:	f8de 2000 	ldr.w	r2, [lr]
 8110584:	b280      	uxth	r0, r0
 8110586:	b292      	uxth	r2, r2
 8110588:	1a12      	subs	r2, r2, r0
 811058a:	445a      	add	r2, fp
 811058c:	f8de 0000 	ldr.w	r0, [lr]
 8110590:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8110594:	b29b      	uxth	r3, r3
 8110596:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 811059a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 811059e:	b292      	uxth	r2, r2
 81105a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 81105a4:	45e1      	cmp	r9, ip
 81105a6:	f84e 2b04 	str.w	r2, [lr], #4
 81105aa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 81105ae:	d2de      	bcs.n	811056e <quorem+0x42>
 81105b0:	9b00      	ldr	r3, [sp, #0]
 81105b2:	58eb      	ldr	r3, [r5, r3]
 81105b4:	b92b      	cbnz	r3, 81105c2 <quorem+0x96>
 81105b6:	9b01      	ldr	r3, [sp, #4]
 81105b8:	3b04      	subs	r3, #4
 81105ba:	429d      	cmp	r5, r3
 81105bc:	461a      	mov	r2, r3
 81105be:	d32f      	bcc.n	8110620 <quorem+0xf4>
 81105c0:	613c      	str	r4, [r7, #16]
 81105c2:	4638      	mov	r0, r7
 81105c4:	f001 fc5e 	bl	8111e84 <__mcmp>
 81105c8:	2800      	cmp	r0, #0
 81105ca:	db25      	blt.n	8110618 <quorem+0xec>
 81105cc:	4629      	mov	r1, r5
 81105ce:	2000      	movs	r0, #0
 81105d0:	f858 2b04 	ldr.w	r2, [r8], #4
 81105d4:	f8d1 c000 	ldr.w	ip, [r1]
 81105d8:	fa1f fe82 	uxth.w	lr, r2
 81105dc:	fa1f f38c 	uxth.w	r3, ip
 81105e0:	eba3 030e 	sub.w	r3, r3, lr
 81105e4:	4403      	add	r3, r0
 81105e6:	0c12      	lsrs	r2, r2, #16
 81105e8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 81105ec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 81105f0:	b29b      	uxth	r3, r3
 81105f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81105f6:	45c1      	cmp	r9, r8
 81105f8:	f841 3b04 	str.w	r3, [r1], #4
 81105fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8110600:	d2e6      	bcs.n	81105d0 <quorem+0xa4>
 8110602:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8110606:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 811060a:	b922      	cbnz	r2, 8110616 <quorem+0xea>
 811060c:	3b04      	subs	r3, #4
 811060e:	429d      	cmp	r5, r3
 8110610:	461a      	mov	r2, r3
 8110612:	d30b      	bcc.n	811062c <quorem+0x100>
 8110614:	613c      	str	r4, [r7, #16]
 8110616:	3601      	adds	r6, #1
 8110618:	4630      	mov	r0, r6
 811061a:	b003      	add	sp, #12
 811061c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110620:	6812      	ldr	r2, [r2, #0]
 8110622:	3b04      	subs	r3, #4
 8110624:	2a00      	cmp	r2, #0
 8110626:	d1cb      	bne.n	81105c0 <quorem+0x94>
 8110628:	3c01      	subs	r4, #1
 811062a:	e7c6      	b.n	81105ba <quorem+0x8e>
 811062c:	6812      	ldr	r2, [r2, #0]
 811062e:	3b04      	subs	r3, #4
 8110630:	2a00      	cmp	r2, #0
 8110632:	d1ef      	bne.n	8110614 <quorem+0xe8>
 8110634:	3c01      	subs	r4, #1
 8110636:	e7ea      	b.n	811060e <quorem+0xe2>
 8110638:	2000      	movs	r0, #0
 811063a:	e7ee      	b.n	811061a <quorem+0xee>
 811063c:	0000      	movs	r0, r0
	...

08110640 <_dtoa_r>:
 8110640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110644:	69c7      	ldr	r7, [r0, #28]
 8110646:	b097      	sub	sp, #92	@ 0x5c
 8110648:	ed8d 0b04 	vstr	d0, [sp, #16]
 811064c:	ec55 4b10 	vmov	r4, r5, d0
 8110650:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8110652:	9107      	str	r1, [sp, #28]
 8110654:	4681      	mov	r9, r0
 8110656:	920c      	str	r2, [sp, #48]	@ 0x30
 8110658:	9311      	str	r3, [sp, #68]	@ 0x44
 811065a:	b97f      	cbnz	r7, 811067c <_dtoa_r+0x3c>
 811065c:	2010      	movs	r0, #16
 811065e:	f7fd fef5 	bl	810e44c <malloc>
 8110662:	4602      	mov	r2, r0
 8110664:	f8c9 001c 	str.w	r0, [r9, #28]
 8110668:	b920      	cbnz	r0, 8110674 <_dtoa_r+0x34>
 811066a:	4ba9      	ldr	r3, [pc, #676]	@ (8110910 <_dtoa_r+0x2d0>)
 811066c:	21ef      	movs	r1, #239	@ 0xef
 811066e:	48a9      	ldr	r0, [pc, #676]	@ (8110914 <_dtoa_r+0x2d4>)
 8110670:	f002 fa62 	bl	8112b38 <__assert_func>
 8110674:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8110678:	6007      	str	r7, [r0, #0]
 811067a:	60c7      	str	r7, [r0, #12]
 811067c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8110680:	6819      	ldr	r1, [r3, #0]
 8110682:	b159      	cbz	r1, 811069c <_dtoa_r+0x5c>
 8110684:	685a      	ldr	r2, [r3, #4]
 8110686:	604a      	str	r2, [r1, #4]
 8110688:	2301      	movs	r3, #1
 811068a:	4093      	lsls	r3, r2
 811068c:	608b      	str	r3, [r1, #8]
 811068e:	4648      	mov	r0, r9
 8110690:	f001 f97c 	bl	811198c <_Bfree>
 8110694:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8110698:	2200      	movs	r2, #0
 811069a:	601a      	str	r2, [r3, #0]
 811069c:	1e2b      	subs	r3, r5, #0
 811069e:	bfb9      	ittee	lt
 81106a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 81106a4:	9305      	strlt	r3, [sp, #20]
 81106a6:	2300      	movge	r3, #0
 81106a8:	6033      	strge	r3, [r6, #0]
 81106aa:	9f05      	ldr	r7, [sp, #20]
 81106ac:	4b9a      	ldr	r3, [pc, #616]	@ (8110918 <_dtoa_r+0x2d8>)
 81106ae:	bfbc      	itt	lt
 81106b0:	2201      	movlt	r2, #1
 81106b2:	6032      	strlt	r2, [r6, #0]
 81106b4:	43bb      	bics	r3, r7
 81106b6:	d112      	bne.n	81106de <_dtoa_r+0x9e>
 81106b8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 81106ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 81106be:	6013      	str	r3, [r2, #0]
 81106c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 81106c4:	4323      	orrs	r3, r4
 81106c6:	f000 855a 	beq.w	811117e <_dtoa_r+0xb3e>
 81106ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 81106cc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 811092c <_dtoa_r+0x2ec>
 81106d0:	2b00      	cmp	r3, #0
 81106d2:	f000 855c 	beq.w	811118e <_dtoa_r+0xb4e>
 81106d6:	f10a 0303 	add.w	r3, sl, #3
 81106da:	f000 bd56 	b.w	811118a <_dtoa_r+0xb4a>
 81106de:	ed9d 7b04 	vldr	d7, [sp, #16]
 81106e2:	2200      	movs	r2, #0
 81106e4:	ec51 0b17 	vmov	r0, r1, d7
 81106e8:	2300      	movs	r3, #0
 81106ea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 81106ee:	f7f0 fa73 	bl	8100bd8 <__aeabi_dcmpeq>
 81106f2:	4680      	mov	r8, r0
 81106f4:	b158      	cbz	r0, 811070e <_dtoa_r+0xce>
 81106f6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 81106f8:	2301      	movs	r3, #1
 81106fa:	6013      	str	r3, [r2, #0]
 81106fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 81106fe:	b113      	cbz	r3, 8110706 <_dtoa_r+0xc6>
 8110700:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8110702:	4b86      	ldr	r3, [pc, #536]	@ (811091c <_dtoa_r+0x2dc>)
 8110704:	6013      	str	r3, [r2, #0]
 8110706:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8110930 <_dtoa_r+0x2f0>
 811070a:	f000 bd40 	b.w	811118e <_dtoa_r+0xb4e>
 811070e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8110712:	aa14      	add	r2, sp, #80	@ 0x50
 8110714:	a915      	add	r1, sp, #84	@ 0x54
 8110716:	4648      	mov	r0, r9
 8110718:	f001 fcd4 	bl	81120c4 <__d2b>
 811071c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8110720:	9002      	str	r0, [sp, #8]
 8110722:	2e00      	cmp	r6, #0
 8110724:	d078      	beq.n	8110818 <_dtoa_r+0x1d8>
 8110726:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8110728:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 811072c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8110730:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8110734:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8110738:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 811073c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8110740:	4619      	mov	r1, r3
 8110742:	2200      	movs	r2, #0
 8110744:	4b76      	ldr	r3, [pc, #472]	@ (8110920 <_dtoa_r+0x2e0>)
 8110746:	f7ef fe27 	bl	8100398 <__aeabi_dsub>
 811074a:	a36b      	add	r3, pc, #428	@ (adr r3, 81108f8 <_dtoa_r+0x2b8>)
 811074c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8110750:	f7ef ffda 	bl	8100708 <__aeabi_dmul>
 8110754:	a36a      	add	r3, pc, #424	@ (adr r3, 8110900 <_dtoa_r+0x2c0>)
 8110756:	e9d3 2300 	ldrd	r2, r3, [r3]
 811075a:	f7ef fe1f 	bl	810039c <__adddf3>
 811075e:	4604      	mov	r4, r0
 8110760:	4630      	mov	r0, r6
 8110762:	460d      	mov	r5, r1
 8110764:	f7ef ff66 	bl	8100634 <__aeabi_i2d>
 8110768:	a367      	add	r3, pc, #412	@ (adr r3, 8110908 <_dtoa_r+0x2c8>)
 811076a:	e9d3 2300 	ldrd	r2, r3, [r3]
 811076e:	f7ef ffcb 	bl	8100708 <__aeabi_dmul>
 8110772:	4602      	mov	r2, r0
 8110774:	460b      	mov	r3, r1
 8110776:	4620      	mov	r0, r4
 8110778:	4629      	mov	r1, r5
 811077a:	f7ef fe0f 	bl	810039c <__adddf3>
 811077e:	4604      	mov	r4, r0
 8110780:	460d      	mov	r5, r1
 8110782:	f7f0 fa71 	bl	8100c68 <__aeabi_d2iz>
 8110786:	2200      	movs	r2, #0
 8110788:	4607      	mov	r7, r0
 811078a:	2300      	movs	r3, #0
 811078c:	4620      	mov	r0, r4
 811078e:	4629      	mov	r1, r5
 8110790:	f7f0 fa2c 	bl	8100bec <__aeabi_dcmplt>
 8110794:	b140      	cbz	r0, 81107a8 <_dtoa_r+0x168>
 8110796:	4638      	mov	r0, r7
 8110798:	f7ef ff4c 	bl	8100634 <__aeabi_i2d>
 811079c:	4622      	mov	r2, r4
 811079e:	462b      	mov	r3, r5
 81107a0:	f7f0 fa1a 	bl	8100bd8 <__aeabi_dcmpeq>
 81107a4:	b900      	cbnz	r0, 81107a8 <_dtoa_r+0x168>
 81107a6:	3f01      	subs	r7, #1
 81107a8:	2f16      	cmp	r7, #22
 81107aa:	d852      	bhi.n	8110852 <_dtoa_r+0x212>
 81107ac:	4b5d      	ldr	r3, [pc, #372]	@ (8110924 <_dtoa_r+0x2e4>)
 81107ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 81107b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81107b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 81107ba:	f7f0 fa17 	bl	8100bec <__aeabi_dcmplt>
 81107be:	2800      	cmp	r0, #0
 81107c0:	d049      	beq.n	8110856 <_dtoa_r+0x216>
 81107c2:	3f01      	subs	r7, #1
 81107c4:	2300      	movs	r3, #0
 81107c6:	9310      	str	r3, [sp, #64]	@ 0x40
 81107c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 81107ca:	1b9b      	subs	r3, r3, r6
 81107cc:	1e5a      	subs	r2, r3, #1
 81107ce:	bf45      	ittet	mi
 81107d0:	f1c3 0301 	rsbmi	r3, r3, #1
 81107d4:	9300      	strmi	r3, [sp, #0]
 81107d6:	2300      	movpl	r3, #0
 81107d8:	2300      	movmi	r3, #0
 81107da:	9206      	str	r2, [sp, #24]
 81107dc:	bf54      	ite	pl
 81107de:	9300      	strpl	r3, [sp, #0]
 81107e0:	9306      	strmi	r3, [sp, #24]
 81107e2:	2f00      	cmp	r7, #0
 81107e4:	db39      	blt.n	811085a <_dtoa_r+0x21a>
 81107e6:	9b06      	ldr	r3, [sp, #24]
 81107e8:	970d      	str	r7, [sp, #52]	@ 0x34
 81107ea:	443b      	add	r3, r7
 81107ec:	9306      	str	r3, [sp, #24]
 81107ee:	2300      	movs	r3, #0
 81107f0:	9308      	str	r3, [sp, #32]
 81107f2:	9b07      	ldr	r3, [sp, #28]
 81107f4:	2b09      	cmp	r3, #9
 81107f6:	d863      	bhi.n	81108c0 <_dtoa_r+0x280>
 81107f8:	2b05      	cmp	r3, #5
 81107fa:	bfc4      	itt	gt
 81107fc:	3b04      	subgt	r3, #4
 81107fe:	9307      	strgt	r3, [sp, #28]
 8110800:	9b07      	ldr	r3, [sp, #28]
 8110802:	f1a3 0302 	sub.w	r3, r3, #2
 8110806:	bfcc      	ite	gt
 8110808:	2400      	movgt	r4, #0
 811080a:	2401      	movle	r4, #1
 811080c:	2b03      	cmp	r3, #3
 811080e:	d863      	bhi.n	81108d8 <_dtoa_r+0x298>
 8110810:	e8df f003 	tbb	[pc, r3]
 8110814:	2b375452 	.word	0x2b375452
 8110818:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 811081c:	441e      	add	r6, r3
 811081e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8110822:	2b20      	cmp	r3, #32
 8110824:	bfc1      	itttt	gt
 8110826:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 811082a:	409f      	lslgt	r7, r3
 811082c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8110830:	fa24 f303 	lsrgt.w	r3, r4, r3
 8110834:	bfd6      	itet	le
 8110836:	f1c3 0320 	rsble	r3, r3, #32
 811083a:	ea47 0003 	orrgt.w	r0, r7, r3
 811083e:	fa04 f003 	lslle.w	r0, r4, r3
 8110842:	f7ef fee7 	bl	8100614 <__aeabi_ui2d>
 8110846:	2201      	movs	r2, #1
 8110848:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 811084c:	3e01      	subs	r6, #1
 811084e:	9212      	str	r2, [sp, #72]	@ 0x48
 8110850:	e776      	b.n	8110740 <_dtoa_r+0x100>
 8110852:	2301      	movs	r3, #1
 8110854:	e7b7      	b.n	81107c6 <_dtoa_r+0x186>
 8110856:	9010      	str	r0, [sp, #64]	@ 0x40
 8110858:	e7b6      	b.n	81107c8 <_dtoa_r+0x188>
 811085a:	9b00      	ldr	r3, [sp, #0]
 811085c:	1bdb      	subs	r3, r3, r7
 811085e:	9300      	str	r3, [sp, #0]
 8110860:	427b      	negs	r3, r7
 8110862:	9308      	str	r3, [sp, #32]
 8110864:	2300      	movs	r3, #0
 8110866:	930d      	str	r3, [sp, #52]	@ 0x34
 8110868:	e7c3      	b.n	81107f2 <_dtoa_r+0x1b2>
 811086a:	2301      	movs	r3, #1
 811086c:	9309      	str	r3, [sp, #36]	@ 0x24
 811086e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8110870:	eb07 0b03 	add.w	fp, r7, r3
 8110874:	f10b 0301 	add.w	r3, fp, #1
 8110878:	2b01      	cmp	r3, #1
 811087a:	9303      	str	r3, [sp, #12]
 811087c:	bfb8      	it	lt
 811087e:	2301      	movlt	r3, #1
 8110880:	e006      	b.n	8110890 <_dtoa_r+0x250>
 8110882:	2301      	movs	r3, #1
 8110884:	9309      	str	r3, [sp, #36]	@ 0x24
 8110886:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8110888:	2b00      	cmp	r3, #0
 811088a:	dd28      	ble.n	81108de <_dtoa_r+0x29e>
 811088c:	469b      	mov	fp, r3
 811088e:	9303      	str	r3, [sp, #12]
 8110890:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8110894:	2100      	movs	r1, #0
 8110896:	2204      	movs	r2, #4
 8110898:	f102 0514 	add.w	r5, r2, #20
 811089c:	429d      	cmp	r5, r3
 811089e:	d926      	bls.n	81108ee <_dtoa_r+0x2ae>
 81108a0:	6041      	str	r1, [r0, #4]
 81108a2:	4648      	mov	r0, r9
 81108a4:	f001 f832 	bl	811190c <_Balloc>
 81108a8:	4682      	mov	sl, r0
 81108aa:	2800      	cmp	r0, #0
 81108ac:	d142      	bne.n	8110934 <_dtoa_r+0x2f4>
 81108ae:	4b1e      	ldr	r3, [pc, #120]	@ (8110928 <_dtoa_r+0x2e8>)
 81108b0:	4602      	mov	r2, r0
 81108b2:	f240 11af 	movw	r1, #431	@ 0x1af
 81108b6:	e6da      	b.n	811066e <_dtoa_r+0x2e>
 81108b8:	2300      	movs	r3, #0
 81108ba:	e7e3      	b.n	8110884 <_dtoa_r+0x244>
 81108bc:	2300      	movs	r3, #0
 81108be:	e7d5      	b.n	811086c <_dtoa_r+0x22c>
 81108c0:	2401      	movs	r4, #1
 81108c2:	2300      	movs	r3, #0
 81108c4:	9307      	str	r3, [sp, #28]
 81108c6:	9409      	str	r4, [sp, #36]	@ 0x24
 81108c8:	f04f 3bff 	mov.w	fp, #4294967295
 81108cc:	2200      	movs	r2, #0
 81108ce:	f8cd b00c 	str.w	fp, [sp, #12]
 81108d2:	2312      	movs	r3, #18
 81108d4:	920c      	str	r2, [sp, #48]	@ 0x30
 81108d6:	e7db      	b.n	8110890 <_dtoa_r+0x250>
 81108d8:	2301      	movs	r3, #1
 81108da:	9309      	str	r3, [sp, #36]	@ 0x24
 81108dc:	e7f4      	b.n	81108c8 <_dtoa_r+0x288>
 81108de:	f04f 0b01 	mov.w	fp, #1
 81108e2:	f8cd b00c 	str.w	fp, [sp, #12]
 81108e6:	465b      	mov	r3, fp
 81108e8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 81108ec:	e7d0      	b.n	8110890 <_dtoa_r+0x250>
 81108ee:	3101      	adds	r1, #1
 81108f0:	0052      	lsls	r2, r2, #1
 81108f2:	e7d1      	b.n	8110898 <_dtoa_r+0x258>
 81108f4:	f3af 8000 	nop.w
 81108f8:	636f4361 	.word	0x636f4361
 81108fc:	3fd287a7 	.word	0x3fd287a7
 8110900:	8b60c8b3 	.word	0x8b60c8b3
 8110904:	3fc68a28 	.word	0x3fc68a28
 8110908:	509f79fb 	.word	0x509f79fb
 811090c:	3fd34413 	.word	0x3fd34413
 8110910:	0811302c 	.word	0x0811302c
 8110914:	08113043 	.word	0x08113043
 8110918:	7ff00000 	.word	0x7ff00000
 811091c:	08112fef 	.word	0x08112fef
 8110920:	3ff80000 	.word	0x3ff80000
 8110924:	08113240 	.word	0x08113240
 8110928:	0811309b 	.word	0x0811309b
 811092c:	08113028 	.word	0x08113028
 8110930:	08112fee 	.word	0x08112fee
 8110934:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8110938:	6018      	str	r0, [r3, #0]
 811093a:	9b03      	ldr	r3, [sp, #12]
 811093c:	2b0e      	cmp	r3, #14
 811093e:	f200 80a1 	bhi.w	8110a84 <_dtoa_r+0x444>
 8110942:	2c00      	cmp	r4, #0
 8110944:	f000 809e 	beq.w	8110a84 <_dtoa_r+0x444>
 8110948:	2f00      	cmp	r7, #0
 811094a:	dd33      	ble.n	81109b4 <_dtoa_r+0x374>
 811094c:	4b9c      	ldr	r3, [pc, #624]	@ (8110bc0 <_dtoa_r+0x580>)
 811094e:	f007 020f 	and.w	r2, r7, #15
 8110952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8110956:	ed93 7b00 	vldr	d7, [r3]
 811095a:	05f8      	lsls	r0, r7, #23
 811095c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8110960:	ea4f 1427 	mov.w	r4, r7, asr #4
 8110964:	d516      	bpl.n	8110994 <_dtoa_r+0x354>
 8110966:	4b97      	ldr	r3, [pc, #604]	@ (8110bc4 <_dtoa_r+0x584>)
 8110968:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 811096c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8110970:	f7ef fff4 	bl	810095c <__aeabi_ddiv>
 8110974:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8110978:	f004 040f 	and.w	r4, r4, #15
 811097c:	2603      	movs	r6, #3
 811097e:	4d91      	ldr	r5, [pc, #580]	@ (8110bc4 <_dtoa_r+0x584>)
 8110980:	b954      	cbnz	r4, 8110998 <_dtoa_r+0x358>
 8110982:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8110986:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 811098a:	f7ef ffe7 	bl	810095c <__aeabi_ddiv>
 811098e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8110992:	e028      	b.n	81109e6 <_dtoa_r+0x3a6>
 8110994:	2602      	movs	r6, #2
 8110996:	e7f2      	b.n	811097e <_dtoa_r+0x33e>
 8110998:	07e1      	lsls	r1, r4, #31
 811099a:	d508      	bpl.n	81109ae <_dtoa_r+0x36e>
 811099c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 81109a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 81109a4:	f7ef feb0 	bl	8100708 <__aeabi_dmul>
 81109a8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 81109ac:	3601      	adds	r6, #1
 81109ae:	1064      	asrs	r4, r4, #1
 81109b0:	3508      	adds	r5, #8
 81109b2:	e7e5      	b.n	8110980 <_dtoa_r+0x340>
 81109b4:	f000 80af 	beq.w	8110b16 <_dtoa_r+0x4d6>
 81109b8:	427c      	negs	r4, r7
 81109ba:	4b81      	ldr	r3, [pc, #516]	@ (8110bc0 <_dtoa_r+0x580>)
 81109bc:	4d81      	ldr	r5, [pc, #516]	@ (8110bc4 <_dtoa_r+0x584>)
 81109be:	f004 020f 	and.w	r2, r4, #15
 81109c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81109c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81109ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 81109ce:	f7ef fe9b 	bl	8100708 <__aeabi_dmul>
 81109d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 81109d6:	1124      	asrs	r4, r4, #4
 81109d8:	2300      	movs	r3, #0
 81109da:	2602      	movs	r6, #2
 81109dc:	2c00      	cmp	r4, #0
 81109de:	f040 808f 	bne.w	8110b00 <_dtoa_r+0x4c0>
 81109e2:	2b00      	cmp	r3, #0
 81109e4:	d1d3      	bne.n	811098e <_dtoa_r+0x34e>
 81109e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 81109e8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 81109ec:	2b00      	cmp	r3, #0
 81109ee:	f000 8094 	beq.w	8110b1a <_dtoa_r+0x4da>
 81109f2:	4b75      	ldr	r3, [pc, #468]	@ (8110bc8 <_dtoa_r+0x588>)
 81109f4:	2200      	movs	r2, #0
 81109f6:	4620      	mov	r0, r4
 81109f8:	4629      	mov	r1, r5
 81109fa:	f7f0 f8f7 	bl	8100bec <__aeabi_dcmplt>
 81109fe:	2800      	cmp	r0, #0
 8110a00:	f000 808b 	beq.w	8110b1a <_dtoa_r+0x4da>
 8110a04:	9b03      	ldr	r3, [sp, #12]
 8110a06:	2b00      	cmp	r3, #0
 8110a08:	f000 8087 	beq.w	8110b1a <_dtoa_r+0x4da>
 8110a0c:	f1bb 0f00 	cmp.w	fp, #0
 8110a10:	dd34      	ble.n	8110a7c <_dtoa_r+0x43c>
 8110a12:	4620      	mov	r0, r4
 8110a14:	4b6d      	ldr	r3, [pc, #436]	@ (8110bcc <_dtoa_r+0x58c>)
 8110a16:	2200      	movs	r2, #0
 8110a18:	4629      	mov	r1, r5
 8110a1a:	f7ef fe75 	bl	8100708 <__aeabi_dmul>
 8110a1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8110a22:	f107 38ff 	add.w	r8, r7, #4294967295
 8110a26:	3601      	adds	r6, #1
 8110a28:	465c      	mov	r4, fp
 8110a2a:	4630      	mov	r0, r6
 8110a2c:	f7ef fe02 	bl	8100634 <__aeabi_i2d>
 8110a30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8110a34:	f7ef fe68 	bl	8100708 <__aeabi_dmul>
 8110a38:	4b65      	ldr	r3, [pc, #404]	@ (8110bd0 <_dtoa_r+0x590>)
 8110a3a:	2200      	movs	r2, #0
 8110a3c:	f7ef fcae 	bl	810039c <__adddf3>
 8110a40:	4605      	mov	r5, r0
 8110a42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8110a46:	2c00      	cmp	r4, #0
 8110a48:	d16a      	bne.n	8110b20 <_dtoa_r+0x4e0>
 8110a4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8110a4e:	4b61      	ldr	r3, [pc, #388]	@ (8110bd4 <_dtoa_r+0x594>)
 8110a50:	2200      	movs	r2, #0
 8110a52:	f7ef fca1 	bl	8100398 <__aeabi_dsub>
 8110a56:	4602      	mov	r2, r0
 8110a58:	460b      	mov	r3, r1
 8110a5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8110a5e:	462a      	mov	r2, r5
 8110a60:	4633      	mov	r3, r6
 8110a62:	f7f0 f8e1 	bl	8100c28 <__aeabi_dcmpgt>
 8110a66:	2800      	cmp	r0, #0
 8110a68:	f040 8298 	bne.w	8110f9c <_dtoa_r+0x95c>
 8110a6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8110a70:	462a      	mov	r2, r5
 8110a72:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8110a76:	f7f0 f8b9 	bl	8100bec <__aeabi_dcmplt>
 8110a7a:	bb38      	cbnz	r0, 8110acc <_dtoa_r+0x48c>
 8110a7c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8110a80:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8110a84:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8110a86:	2b00      	cmp	r3, #0
 8110a88:	f2c0 8157 	blt.w	8110d3a <_dtoa_r+0x6fa>
 8110a8c:	2f0e      	cmp	r7, #14
 8110a8e:	f300 8154 	bgt.w	8110d3a <_dtoa_r+0x6fa>
 8110a92:	4b4b      	ldr	r3, [pc, #300]	@ (8110bc0 <_dtoa_r+0x580>)
 8110a94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8110a98:	ed93 7b00 	vldr	d7, [r3]
 8110a9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8110a9e:	2b00      	cmp	r3, #0
 8110aa0:	ed8d 7b00 	vstr	d7, [sp]
 8110aa4:	f280 80e5 	bge.w	8110c72 <_dtoa_r+0x632>
 8110aa8:	9b03      	ldr	r3, [sp, #12]
 8110aaa:	2b00      	cmp	r3, #0
 8110aac:	f300 80e1 	bgt.w	8110c72 <_dtoa_r+0x632>
 8110ab0:	d10c      	bne.n	8110acc <_dtoa_r+0x48c>
 8110ab2:	4b48      	ldr	r3, [pc, #288]	@ (8110bd4 <_dtoa_r+0x594>)
 8110ab4:	2200      	movs	r2, #0
 8110ab6:	ec51 0b17 	vmov	r0, r1, d7
 8110aba:	f7ef fe25 	bl	8100708 <__aeabi_dmul>
 8110abe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8110ac2:	f7f0 f8a7 	bl	8100c14 <__aeabi_dcmpge>
 8110ac6:	2800      	cmp	r0, #0
 8110ac8:	f000 8266 	beq.w	8110f98 <_dtoa_r+0x958>
 8110acc:	2400      	movs	r4, #0
 8110ace:	4625      	mov	r5, r4
 8110ad0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8110ad2:	4656      	mov	r6, sl
 8110ad4:	ea6f 0803 	mvn.w	r8, r3
 8110ad8:	2700      	movs	r7, #0
 8110ada:	4621      	mov	r1, r4
 8110adc:	4648      	mov	r0, r9
 8110ade:	f000 ff55 	bl	811198c <_Bfree>
 8110ae2:	2d00      	cmp	r5, #0
 8110ae4:	f000 80bd 	beq.w	8110c62 <_dtoa_r+0x622>
 8110ae8:	b12f      	cbz	r7, 8110af6 <_dtoa_r+0x4b6>
 8110aea:	42af      	cmp	r7, r5
 8110aec:	d003      	beq.n	8110af6 <_dtoa_r+0x4b6>
 8110aee:	4639      	mov	r1, r7
 8110af0:	4648      	mov	r0, r9
 8110af2:	f000 ff4b 	bl	811198c <_Bfree>
 8110af6:	4629      	mov	r1, r5
 8110af8:	4648      	mov	r0, r9
 8110afa:	f000 ff47 	bl	811198c <_Bfree>
 8110afe:	e0b0      	b.n	8110c62 <_dtoa_r+0x622>
 8110b00:	07e2      	lsls	r2, r4, #31
 8110b02:	d505      	bpl.n	8110b10 <_dtoa_r+0x4d0>
 8110b04:	e9d5 2300 	ldrd	r2, r3, [r5]
 8110b08:	f7ef fdfe 	bl	8100708 <__aeabi_dmul>
 8110b0c:	3601      	adds	r6, #1
 8110b0e:	2301      	movs	r3, #1
 8110b10:	1064      	asrs	r4, r4, #1
 8110b12:	3508      	adds	r5, #8
 8110b14:	e762      	b.n	81109dc <_dtoa_r+0x39c>
 8110b16:	2602      	movs	r6, #2
 8110b18:	e765      	b.n	81109e6 <_dtoa_r+0x3a6>
 8110b1a:	9c03      	ldr	r4, [sp, #12]
 8110b1c:	46b8      	mov	r8, r7
 8110b1e:	e784      	b.n	8110a2a <_dtoa_r+0x3ea>
 8110b20:	4b27      	ldr	r3, [pc, #156]	@ (8110bc0 <_dtoa_r+0x580>)
 8110b22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8110b24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8110b28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8110b2c:	4454      	add	r4, sl
 8110b2e:	2900      	cmp	r1, #0
 8110b30:	d054      	beq.n	8110bdc <_dtoa_r+0x59c>
 8110b32:	4929      	ldr	r1, [pc, #164]	@ (8110bd8 <_dtoa_r+0x598>)
 8110b34:	2000      	movs	r0, #0
 8110b36:	f7ef ff11 	bl	810095c <__aeabi_ddiv>
 8110b3a:	4633      	mov	r3, r6
 8110b3c:	462a      	mov	r2, r5
 8110b3e:	f7ef fc2b 	bl	8100398 <__aeabi_dsub>
 8110b42:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8110b46:	4656      	mov	r6, sl
 8110b48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8110b4c:	f7f0 f88c 	bl	8100c68 <__aeabi_d2iz>
 8110b50:	4605      	mov	r5, r0
 8110b52:	f7ef fd6f 	bl	8100634 <__aeabi_i2d>
 8110b56:	4602      	mov	r2, r0
 8110b58:	460b      	mov	r3, r1
 8110b5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8110b5e:	f7ef fc1b 	bl	8100398 <__aeabi_dsub>
 8110b62:	3530      	adds	r5, #48	@ 0x30
 8110b64:	4602      	mov	r2, r0
 8110b66:	460b      	mov	r3, r1
 8110b68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8110b6c:	f806 5b01 	strb.w	r5, [r6], #1
 8110b70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8110b74:	f7f0 f83a 	bl	8100bec <__aeabi_dcmplt>
 8110b78:	2800      	cmp	r0, #0
 8110b7a:	d172      	bne.n	8110c62 <_dtoa_r+0x622>
 8110b7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8110b80:	4911      	ldr	r1, [pc, #68]	@ (8110bc8 <_dtoa_r+0x588>)
 8110b82:	2000      	movs	r0, #0
 8110b84:	f7ef fc08 	bl	8100398 <__aeabi_dsub>
 8110b88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8110b8c:	f7f0 f82e 	bl	8100bec <__aeabi_dcmplt>
 8110b90:	2800      	cmp	r0, #0
 8110b92:	f040 80b4 	bne.w	8110cfe <_dtoa_r+0x6be>
 8110b96:	42a6      	cmp	r6, r4
 8110b98:	f43f af70 	beq.w	8110a7c <_dtoa_r+0x43c>
 8110b9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8110ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8110bcc <_dtoa_r+0x58c>)
 8110ba2:	2200      	movs	r2, #0
 8110ba4:	f7ef fdb0 	bl	8100708 <__aeabi_dmul>
 8110ba8:	4b08      	ldr	r3, [pc, #32]	@ (8110bcc <_dtoa_r+0x58c>)
 8110baa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8110bae:	2200      	movs	r2, #0
 8110bb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8110bb4:	f7ef fda8 	bl	8100708 <__aeabi_dmul>
 8110bb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8110bbc:	e7c4      	b.n	8110b48 <_dtoa_r+0x508>
 8110bbe:	bf00      	nop
 8110bc0:	08113240 	.word	0x08113240
 8110bc4:	08113218 	.word	0x08113218
 8110bc8:	3ff00000 	.word	0x3ff00000
 8110bcc:	40240000 	.word	0x40240000
 8110bd0:	401c0000 	.word	0x401c0000
 8110bd4:	40140000 	.word	0x40140000
 8110bd8:	3fe00000 	.word	0x3fe00000
 8110bdc:	4631      	mov	r1, r6
 8110bde:	4628      	mov	r0, r5
 8110be0:	f7ef fd92 	bl	8100708 <__aeabi_dmul>
 8110be4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8110be8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8110bea:	4656      	mov	r6, sl
 8110bec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8110bf0:	f7f0 f83a 	bl	8100c68 <__aeabi_d2iz>
 8110bf4:	4605      	mov	r5, r0
 8110bf6:	f7ef fd1d 	bl	8100634 <__aeabi_i2d>
 8110bfa:	4602      	mov	r2, r0
 8110bfc:	460b      	mov	r3, r1
 8110bfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8110c02:	f7ef fbc9 	bl	8100398 <__aeabi_dsub>
 8110c06:	3530      	adds	r5, #48	@ 0x30
 8110c08:	f806 5b01 	strb.w	r5, [r6], #1
 8110c0c:	4602      	mov	r2, r0
 8110c0e:	460b      	mov	r3, r1
 8110c10:	42a6      	cmp	r6, r4
 8110c12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8110c16:	f04f 0200 	mov.w	r2, #0
 8110c1a:	d124      	bne.n	8110c66 <_dtoa_r+0x626>
 8110c1c:	4baf      	ldr	r3, [pc, #700]	@ (8110edc <_dtoa_r+0x89c>)
 8110c1e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8110c22:	f7ef fbbb 	bl	810039c <__adddf3>
 8110c26:	4602      	mov	r2, r0
 8110c28:	460b      	mov	r3, r1
 8110c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8110c2e:	f7ef fffb 	bl	8100c28 <__aeabi_dcmpgt>
 8110c32:	2800      	cmp	r0, #0
 8110c34:	d163      	bne.n	8110cfe <_dtoa_r+0x6be>
 8110c36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8110c3a:	49a8      	ldr	r1, [pc, #672]	@ (8110edc <_dtoa_r+0x89c>)
 8110c3c:	2000      	movs	r0, #0
 8110c3e:	f7ef fbab 	bl	8100398 <__aeabi_dsub>
 8110c42:	4602      	mov	r2, r0
 8110c44:	460b      	mov	r3, r1
 8110c46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8110c4a:	f7ef ffcf 	bl	8100bec <__aeabi_dcmplt>
 8110c4e:	2800      	cmp	r0, #0
 8110c50:	f43f af14 	beq.w	8110a7c <_dtoa_r+0x43c>
 8110c54:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8110c56:	1e73      	subs	r3, r6, #1
 8110c58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8110c5a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8110c5e:	2b30      	cmp	r3, #48	@ 0x30
 8110c60:	d0f8      	beq.n	8110c54 <_dtoa_r+0x614>
 8110c62:	4647      	mov	r7, r8
 8110c64:	e03b      	b.n	8110cde <_dtoa_r+0x69e>
 8110c66:	4b9e      	ldr	r3, [pc, #632]	@ (8110ee0 <_dtoa_r+0x8a0>)
 8110c68:	f7ef fd4e 	bl	8100708 <__aeabi_dmul>
 8110c6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8110c70:	e7bc      	b.n	8110bec <_dtoa_r+0x5ac>
 8110c72:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8110c76:	4656      	mov	r6, sl
 8110c78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110c7c:	4620      	mov	r0, r4
 8110c7e:	4629      	mov	r1, r5
 8110c80:	f7ef fe6c 	bl	810095c <__aeabi_ddiv>
 8110c84:	f7ef fff0 	bl	8100c68 <__aeabi_d2iz>
 8110c88:	4680      	mov	r8, r0
 8110c8a:	f7ef fcd3 	bl	8100634 <__aeabi_i2d>
 8110c8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110c92:	f7ef fd39 	bl	8100708 <__aeabi_dmul>
 8110c96:	4602      	mov	r2, r0
 8110c98:	460b      	mov	r3, r1
 8110c9a:	4620      	mov	r0, r4
 8110c9c:	4629      	mov	r1, r5
 8110c9e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8110ca2:	f7ef fb79 	bl	8100398 <__aeabi_dsub>
 8110ca6:	f806 4b01 	strb.w	r4, [r6], #1
 8110caa:	9d03      	ldr	r5, [sp, #12]
 8110cac:	eba6 040a 	sub.w	r4, r6, sl
 8110cb0:	42a5      	cmp	r5, r4
 8110cb2:	4602      	mov	r2, r0
 8110cb4:	460b      	mov	r3, r1
 8110cb6:	d133      	bne.n	8110d20 <_dtoa_r+0x6e0>
 8110cb8:	f7ef fb70 	bl	810039c <__adddf3>
 8110cbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110cc0:	4604      	mov	r4, r0
 8110cc2:	460d      	mov	r5, r1
 8110cc4:	f7ef ffb0 	bl	8100c28 <__aeabi_dcmpgt>
 8110cc8:	b9c0      	cbnz	r0, 8110cfc <_dtoa_r+0x6bc>
 8110cca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8110cce:	4620      	mov	r0, r4
 8110cd0:	4629      	mov	r1, r5
 8110cd2:	f7ef ff81 	bl	8100bd8 <__aeabi_dcmpeq>
 8110cd6:	b110      	cbz	r0, 8110cde <_dtoa_r+0x69e>
 8110cd8:	f018 0f01 	tst.w	r8, #1
 8110cdc:	d10e      	bne.n	8110cfc <_dtoa_r+0x6bc>
 8110cde:	9902      	ldr	r1, [sp, #8]
 8110ce0:	4648      	mov	r0, r9
 8110ce2:	f000 fe53 	bl	811198c <_Bfree>
 8110ce6:	2300      	movs	r3, #0
 8110ce8:	7033      	strb	r3, [r6, #0]
 8110cea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8110cec:	3701      	adds	r7, #1
 8110cee:	601f      	str	r7, [r3, #0]
 8110cf0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8110cf2:	2b00      	cmp	r3, #0
 8110cf4:	f000 824b 	beq.w	811118e <_dtoa_r+0xb4e>
 8110cf8:	601e      	str	r6, [r3, #0]
 8110cfa:	e248      	b.n	811118e <_dtoa_r+0xb4e>
 8110cfc:	46b8      	mov	r8, r7
 8110cfe:	4633      	mov	r3, r6
 8110d00:	461e      	mov	r6, r3
 8110d02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8110d06:	2a39      	cmp	r2, #57	@ 0x39
 8110d08:	d106      	bne.n	8110d18 <_dtoa_r+0x6d8>
 8110d0a:	459a      	cmp	sl, r3
 8110d0c:	d1f8      	bne.n	8110d00 <_dtoa_r+0x6c0>
 8110d0e:	2230      	movs	r2, #48	@ 0x30
 8110d10:	f108 0801 	add.w	r8, r8, #1
 8110d14:	f88a 2000 	strb.w	r2, [sl]
 8110d18:	781a      	ldrb	r2, [r3, #0]
 8110d1a:	3201      	adds	r2, #1
 8110d1c:	701a      	strb	r2, [r3, #0]
 8110d1e:	e7a0      	b.n	8110c62 <_dtoa_r+0x622>
 8110d20:	4b6f      	ldr	r3, [pc, #444]	@ (8110ee0 <_dtoa_r+0x8a0>)
 8110d22:	2200      	movs	r2, #0
 8110d24:	f7ef fcf0 	bl	8100708 <__aeabi_dmul>
 8110d28:	2200      	movs	r2, #0
 8110d2a:	2300      	movs	r3, #0
 8110d2c:	4604      	mov	r4, r0
 8110d2e:	460d      	mov	r5, r1
 8110d30:	f7ef ff52 	bl	8100bd8 <__aeabi_dcmpeq>
 8110d34:	2800      	cmp	r0, #0
 8110d36:	d09f      	beq.n	8110c78 <_dtoa_r+0x638>
 8110d38:	e7d1      	b.n	8110cde <_dtoa_r+0x69e>
 8110d3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8110d3c:	2a00      	cmp	r2, #0
 8110d3e:	f000 80ea 	beq.w	8110f16 <_dtoa_r+0x8d6>
 8110d42:	9a07      	ldr	r2, [sp, #28]
 8110d44:	2a01      	cmp	r2, #1
 8110d46:	f300 80cd 	bgt.w	8110ee4 <_dtoa_r+0x8a4>
 8110d4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8110d4c:	2a00      	cmp	r2, #0
 8110d4e:	f000 80c1 	beq.w	8110ed4 <_dtoa_r+0x894>
 8110d52:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8110d56:	9c08      	ldr	r4, [sp, #32]
 8110d58:	9e00      	ldr	r6, [sp, #0]
 8110d5a:	9a00      	ldr	r2, [sp, #0]
 8110d5c:	441a      	add	r2, r3
 8110d5e:	9200      	str	r2, [sp, #0]
 8110d60:	9a06      	ldr	r2, [sp, #24]
 8110d62:	2101      	movs	r1, #1
 8110d64:	441a      	add	r2, r3
 8110d66:	4648      	mov	r0, r9
 8110d68:	9206      	str	r2, [sp, #24]
 8110d6a:	f000 ff0d 	bl	8111b88 <__i2b>
 8110d6e:	4605      	mov	r5, r0
 8110d70:	b166      	cbz	r6, 8110d8c <_dtoa_r+0x74c>
 8110d72:	9b06      	ldr	r3, [sp, #24]
 8110d74:	2b00      	cmp	r3, #0
 8110d76:	dd09      	ble.n	8110d8c <_dtoa_r+0x74c>
 8110d78:	42b3      	cmp	r3, r6
 8110d7a:	9a00      	ldr	r2, [sp, #0]
 8110d7c:	bfa8      	it	ge
 8110d7e:	4633      	movge	r3, r6
 8110d80:	1ad2      	subs	r2, r2, r3
 8110d82:	9200      	str	r2, [sp, #0]
 8110d84:	9a06      	ldr	r2, [sp, #24]
 8110d86:	1af6      	subs	r6, r6, r3
 8110d88:	1ad3      	subs	r3, r2, r3
 8110d8a:	9306      	str	r3, [sp, #24]
 8110d8c:	9b08      	ldr	r3, [sp, #32]
 8110d8e:	b30b      	cbz	r3, 8110dd4 <_dtoa_r+0x794>
 8110d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110d92:	2b00      	cmp	r3, #0
 8110d94:	f000 80c6 	beq.w	8110f24 <_dtoa_r+0x8e4>
 8110d98:	2c00      	cmp	r4, #0
 8110d9a:	f000 80c0 	beq.w	8110f1e <_dtoa_r+0x8de>
 8110d9e:	4629      	mov	r1, r5
 8110da0:	4622      	mov	r2, r4
 8110da2:	4648      	mov	r0, r9
 8110da4:	f000 ffa8 	bl	8111cf8 <__pow5mult>
 8110da8:	9a02      	ldr	r2, [sp, #8]
 8110daa:	4601      	mov	r1, r0
 8110dac:	4605      	mov	r5, r0
 8110dae:	4648      	mov	r0, r9
 8110db0:	f000 ff00 	bl	8111bb4 <__multiply>
 8110db4:	9902      	ldr	r1, [sp, #8]
 8110db6:	4680      	mov	r8, r0
 8110db8:	4648      	mov	r0, r9
 8110dba:	f000 fde7 	bl	811198c <_Bfree>
 8110dbe:	9b08      	ldr	r3, [sp, #32]
 8110dc0:	1b1b      	subs	r3, r3, r4
 8110dc2:	9308      	str	r3, [sp, #32]
 8110dc4:	f000 80b1 	beq.w	8110f2a <_dtoa_r+0x8ea>
 8110dc8:	9a08      	ldr	r2, [sp, #32]
 8110dca:	4641      	mov	r1, r8
 8110dcc:	4648      	mov	r0, r9
 8110dce:	f000 ff93 	bl	8111cf8 <__pow5mult>
 8110dd2:	9002      	str	r0, [sp, #8]
 8110dd4:	2101      	movs	r1, #1
 8110dd6:	4648      	mov	r0, r9
 8110dd8:	f000 fed6 	bl	8111b88 <__i2b>
 8110ddc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8110dde:	4604      	mov	r4, r0
 8110de0:	2b00      	cmp	r3, #0
 8110de2:	f000 81d8 	beq.w	8111196 <_dtoa_r+0xb56>
 8110de6:	461a      	mov	r2, r3
 8110de8:	4601      	mov	r1, r0
 8110dea:	4648      	mov	r0, r9
 8110dec:	f000 ff84 	bl	8111cf8 <__pow5mult>
 8110df0:	9b07      	ldr	r3, [sp, #28]
 8110df2:	2b01      	cmp	r3, #1
 8110df4:	4604      	mov	r4, r0
 8110df6:	f300 809f 	bgt.w	8110f38 <_dtoa_r+0x8f8>
 8110dfa:	9b04      	ldr	r3, [sp, #16]
 8110dfc:	2b00      	cmp	r3, #0
 8110dfe:	f040 8097 	bne.w	8110f30 <_dtoa_r+0x8f0>
 8110e02:	9b05      	ldr	r3, [sp, #20]
 8110e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8110e08:	2b00      	cmp	r3, #0
 8110e0a:	f040 8093 	bne.w	8110f34 <_dtoa_r+0x8f4>
 8110e0e:	9b05      	ldr	r3, [sp, #20]
 8110e10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8110e14:	0d1b      	lsrs	r3, r3, #20
 8110e16:	051b      	lsls	r3, r3, #20
 8110e18:	b133      	cbz	r3, 8110e28 <_dtoa_r+0x7e8>
 8110e1a:	9b00      	ldr	r3, [sp, #0]
 8110e1c:	3301      	adds	r3, #1
 8110e1e:	9300      	str	r3, [sp, #0]
 8110e20:	9b06      	ldr	r3, [sp, #24]
 8110e22:	3301      	adds	r3, #1
 8110e24:	9306      	str	r3, [sp, #24]
 8110e26:	2301      	movs	r3, #1
 8110e28:	9308      	str	r3, [sp, #32]
 8110e2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8110e2c:	2b00      	cmp	r3, #0
 8110e2e:	f000 81b8 	beq.w	81111a2 <_dtoa_r+0xb62>
 8110e32:	6923      	ldr	r3, [r4, #16]
 8110e34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8110e38:	6918      	ldr	r0, [r3, #16]
 8110e3a:	f000 fe59 	bl	8111af0 <__hi0bits>
 8110e3e:	f1c0 0020 	rsb	r0, r0, #32
 8110e42:	9b06      	ldr	r3, [sp, #24]
 8110e44:	4418      	add	r0, r3
 8110e46:	f010 001f 	ands.w	r0, r0, #31
 8110e4a:	f000 8082 	beq.w	8110f52 <_dtoa_r+0x912>
 8110e4e:	f1c0 0320 	rsb	r3, r0, #32
 8110e52:	2b04      	cmp	r3, #4
 8110e54:	dd73      	ble.n	8110f3e <_dtoa_r+0x8fe>
 8110e56:	9b00      	ldr	r3, [sp, #0]
 8110e58:	f1c0 001c 	rsb	r0, r0, #28
 8110e5c:	4403      	add	r3, r0
 8110e5e:	9300      	str	r3, [sp, #0]
 8110e60:	9b06      	ldr	r3, [sp, #24]
 8110e62:	4403      	add	r3, r0
 8110e64:	4406      	add	r6, r0
 8110e66:	9306      	str	r3, [sp, #24]
 8110e68:	9b00      	ldr	r3, [sp, #0]
 8110e6a:	2b00      	cmp	r3, #0
 8110e6c:	dd05      	ble.n	8110e7a <_dtoa_r+0x83a>
 8110e6e:	9902      	ldr	r1, [sp, #8]
 8110e70:	461a      	mov	r2, r3
 8110e72:	4648      	mov	r0, r9
 8110e74:	f000 ff9a 	bl	8111dac <__lshift>
 8110e78:	9002      	str	r0, [sp, #8]
 8110e7a:	9b06      	ldr	r3, [sp, #24]
 8110e7c:	2b00      	cmp	r3, #0
 8110e7e:	dd05      	ble.n	8110e8c <_dtoa_r+0x84c>
 8110e80:	4621      	mov	r1, r4
 8110e82:	461a      	mov	r2, r3
 8110e84:	4648      	mov	r0, r9
 8110e86:	f000 ff91 	bl	8111dac <__lshift>
 8110e8a:	4604      	mov	r4, r0
 8110e8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8110e8e:	2b00      	cmp	r3, #0
 8110e90:	d061      	beq.n	8110f56 <_dtoa_r+0x916>
 8110e92:	9802      	ldr	r0, [sp, #8]
 8110e94:	4621      	mov	r1, r4
 8110e96:	f000 fff5 	bl	8111e84 <__mcmp>
 8110e9a:	2800      	cmp	r0, #0
 8110e9c:	da5b      	bge.n	8110f56 <_dtoa_r+0x916>
 8110e9e:	2300      	movs	r3, #0
 8110ea0:	9902      	ldr	r1, [sp, #8]
 8110ea2:	220a      	movs	r2, #10
 8110ea4:	4648      	mov	r0, r9
 8110ea6:	f000 fd93 	bl	81119d0 <__multadd>
 8110eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110eac:	9002      	str	r0, [sp, #8]
 8110eae:	f107 38ff 	add.w	r8, r7, #4294967295
 8110eb2:	2b00      	cmp	r3, #0
 8110eb4:	f000 8177 	beq.w	81111a6 <_dtoa_r+0xb66>
 8110eb8:	4629      	mov	r1, r5
 8110eba:	2300      	movs	r3, #0
 8110ebc:	220a      	movs	r2, #10
 8110ebe:	4648      	mov	r0, r9
 8110ec0:	f000 fd86 	bl	81119d0 <__multadd>
 8110ec4:	f1bb 0f00 	cmp.w	fp, #0
 8110ec8:	4605      	mov	r5, r0
 8110eca:	dc6f      	bgt.n	8110fac <_dtoa_r+0x96c>
 8110ecc:	9b07      	ldr	r3, [sp, #28]
 8110ece:	2b02      	cmp	r3, #2
 8110ed0:	dc49      	bgt.n	8110f66 <_dtoa_r+0x926>
 8110ed2:	e06b      	b.n	8110fac <_dtoa_r+0x96c>
 8110ed4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8110ed6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8110eda:	e73c      	b.n	8110d56 <_dtoa_r+0x716>
 8110edc:	3fe00000 	.word	0x3fe00000
 8110ee0:	40240000 	.word	0x40240000
 8110ee4:	9b03      	ldr	r3, [sp, #12]
 8110ee6:	1e5c      	subs	r4, r3, #1
 8110ee8:	9b08      	ldr	r3, [sp, #32]
 8110eea:	42a3      	cmp	r3, r4
 8110eec:	db09      	blt.n	8110f02 <_dtoa_r+0x8c2>
 8110eee:	1b1c      	subs	r4, r3, r4
 8110ef0:	9b03      	ldr	r3, [sp, #12]
 8110ef2:	2b00      	cmp	r3, #0
 8110ef4:	f6bf af30 	bge.w	8110d58 <_dtoa_r+0x718>
 8110ef8:	9b00      	ldr	r3, [sp, #0]
 8110efa:	9a03      	ldr	r2, [sp, #12]
 8110efc:	1a9e      	subs	r6, r3, r2
 8110efe:	2300      	movs	r3, #0
 8110f00:	e72b      	b.n	8110d5a <_dtoa_r+0x71a>
 8110f02:	9b08      	ldr	r3, [sp, #32]
 8110f04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8110f06:	9408      	str	r4, [sp, #32]
 8110f08:	1ae3      	subs	r3, r4, r3
 8110f0a:	441a      	add	r2, r3
 8110f0c:	9e00      	ldr	r6, [sp, #0]
 8110f0e:	9b03      	ldr	r3, [sp, #12]
 8110f10:	920d      	str	r2, [sp, #52]	@ 0x34
 8110f12:	2400      	movs	r4, #0
 8110f14:	e721      	b.n	8110d5a <_dtoa_r+0x71a>
 8110f16:	9c08      	ldr	r4, [sp, #32]
 8110f18:	9e00      	ldr	r6, [sp, #0]
 8110f1a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8110f1c:	e728      	b.n	8110d70 <_dtoa_r+0x730>
 8110f1e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8110f22:	e751      	b.n	8110dc8 <_dtoa_r+0x788>
 8110f24:	9a08      	ldr	r2, [sp, #32]
 8110f26:	9902      	ldr	r1, [sp, #8]
 8110f28:	e750      	b.n	8110dcc <_dtoa_r+0x78c>
 8110f2a:	f8cd 8008 	str.w	r8, [sp, #8]
 8110f2e:	e751      	b.n	8110dd4 <_dtoa_r+0x794>
 8110f30:	2300      	movs	r3, #0
 8110f32:	e779      	b.n	8110e28 <_dtoa_r+0x7e8>
 8110f34:	9b04      	ldr	r3, [sp, #16]
 8110f36:	e777      	b.n	8110e28 <_dtoa_r+0x7e8>
 8110f38:	2300      	movs	r3, #0
 8110f3a:	9308      	str	r3, [sp, #32]
 8110f3c:	e779      	b.n	8110e32 <_dtoa_r+0x7f2>
 8110f3e:	d093      	beq.n	8110e68 <_dtoa_r+0x828>
 8110f40:	9a00      	ldr	r2, [sp, #0]
 8110f42:	331c      	adds	r3, #28
 8110f44:	441a      	add	r2, r3
 8110f46:	9200      	str	r2, [sp, #0]
 8110f48:	9a06      	ldr	r2, [sp, #24]
 8110f4a:	441a      	add	r2, r3
 8110f4c:	441e      	add	r6, r3
 8110f4e:	9206      	str	r2, [sp, #24]
 8110f50:	e78a      	b.n	8110e68 <_dtoa_r+0x828>
 8110f52:	4603      	mov	r3, r0
 8110f54:	e7f4      	b.n	8110f40 <_dtoa_r+0x900>
 8110f56:	9b03      	ldr	r3, [sp, #12]
 8110f58:	2b00      	cmp	r3, #0
 8110f5a:	46b8      	mov	r8, r7
 8110f5c:	dc20      	bgt.n	8110fa0 <_dtoa_r+0x960>
 8110f5e:	469b      	mov	fp, r3
 8110f60:	9b07      	ldr	r3, [sp, #28]
 8110f62:	2b02      	cmp	r3, #2
 8110f64:	dd1e      	ble.n	8110fa4 <_dtoa_r+0x964>
 8110f66:	f1bb 0f00 	cmp.w	fp, #0
 8110f6a:	f47f adb1 	bne.w	8110ad0 <_dtoa_r+0x490>
 8110f6e:	4621      	mov	r1, r4
 8110f70:	465b      	mov	r3, fp
 8110f72:	2205      	movs	r2, #5
 8110f74:	4648      	mov	r0, r9
 8110f76:	f000 fd2b 	bl	81119d0 <__multadd>
 8110f7a:	4601      	mov	r1, r0
 8110f7c:	4604      	mov	r4, r0
 8110f7e:	9802      	ldr	r0, [sp, #8]
 8110f80:	f000 ff80 	bl	8111e84 <__mcmp>
 8110f84:	2800      	cmp	r0, #0
 8110f86:	f77f ada3 	ble.w	8110ad0 <_dtoa_r+0x490>
 8110f8a:	4656      	mov	r6, sl
 8110f8c:	2331      	movs	r3, #49	@ 0x31
 8110f8e:	f806 3b01 	strb.w	r3, [r6], #1
 8110f92:	f108 0801 	add.w	r8, r8, #1
 8110f96:	e59f      	b.n	8110ad8 <_dtoa_r+0x498>
 8110f98:	9c03      	ldr	r4, [sp, #12]
 8110f9a:	46b8      	mov	r8, r7
 8110f9c:	4625      	mov	r5, r4
 8110f9e:	e7f4      	b.n	8110f8a <_dtoa_r+0x94a>
 8110fa0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8110fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8110fa6:	2b00      	cmp	r3, #0
 8110fa8:	f000 8101 	beq.w	81111ae <_dtoa_r+0xb6e>
 8110fac:	2e00      	cmp	r6, #0
 8110fae:	dd05      	ble.n	8110fbc <_dtoa_r+0x97c>
 8110fb0:	4629      	mov	r1, r5
 8110fb2:	4632      	mov	r2, r6
 8110fb4:	4648      	mov	r0, r9
 8110fb6:	f000 fef9 	bl	8111dac <__lshift>
 8110fba:	4605      	mov	r5, r0
 8110fbc:	9b08      	ldr	r3, [sp, #32]
 8110fbe:	2b00      	cmp	r3, #0
 8110fc0:	d05c      	beq.n	811107c <_dtoa_r+0xa3c>
 8110fc2:	6869      	ldr	r1, [r5, #4]
 8110fc4:	4648      	mov	r0, r9
 8110fc6:	f000 fca1 	bl	811190c <_Balloc>
 8110fca:	4606      	mov	r6, r0
 8110fcc:	b928      	cbnz	r0, 8110fda <_dtoa_r+0x99a>
 8110fce:	4b82      	ldr	r3, [pc, #520]	@ (81111d8 <_dtoa_r+0xb98>)
 8110fd0:	4602      	mov	r2, r0
 8110fd2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8110fd6:	f7ff bb4a 	b.w	811066e <_dtoa_r+0x2e>
 8110fda:	692a      	ldr	r2, [r5, #16]
 8110fdc:	3202      	adds	r2, #2
 8110fde:	0092      	lsls	r2, r2, #2
 8110fe0:	f105 010c 	add.w	r1, r5, #12
 8110fe4:	300c      	adds	r0, #12
 8110fe6:	f7ff fa83 	bl	81104f0 <memcpy>
 8110fea:	2201      	movs	r2, #1
 8110fec:	4631      	mov	r1, r6
 8110fee:	4648      	mov	r0, r9
 8110ff0:	f000 fedc 	bl	8111dac <__lshift>
 8110ff4:	f10a 0301 	add.w	r3, sl, #1
 8110ff8:	9300      	str	r3, [sp, #0]
 8110ffa:	eb0a 030b 	add.w	r3, sl, fp
 8110ffe:	9308      	str	r3, [sp, #32]
 8111000:	9b04      	ldr	r3, [sp, #16]
 8111002:	f003 0301 	and.w	r3, r3, #1
 8111006:	462f      	mov	r7, r5
 8111008:	9306      	str	r3, [sp, #24]
 811100a:	4605      	mov	r5, r0
 811100c:	9b00      	ldr	r3, [sp, #0]
 811100e:	9802      	ldr	r0, [sp, #8]
 8111010:	4621      	mov	r1, r4
 8111012:	f103 3bff 	add.w	fp, r3, #4294967295
 8111016:	f7ff fa89 	bl	811052c <quorem>
 811101a:	4603      	mov	r3, r0
 811101c:	3330      	adds	r3, #48	@ 0x30
 811101e:	9003      	str	r0, [sp, #12]
 8111020:	4639      	mov	r1, r7
 8111022:	9802      	ldr	r0, [sp, #8]
 8111024:	9309      	str	r3, [sp, #36]	@ 0x24
 8111026:	f000 ff2d 	bl	8111e84 <__mcmp>
 811102a:	462a      	mov	r2, r5
 811102c:	9004      	str	r0, [sp, #16]
 811102e:	4621      	mov	r1, r4
 8111030:	4648      	mov	r0, r9
 8111032:	f000 ff43 	bl	8111ebc <__mdiff>
 8111036:	68c2      	ldr	r2, [r0, #12]
 8111038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811103a:	4606      	mov	r6, r0
 811103c:	bb02      	cbnz	r2, 8111080 <_dtoa_r+0xa40>
 811103e:	4601      	mov	r1, r0
 8111040:	9802      	ldr	r0, [sp, #8]
 8111042:	f000 ff1f 	bl	8111e84 <__mcmp>
 8111046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111048:	4602      	mov	r2, r0
 811104a:	4631      	mov	r1, r6
 811104c:	4648      	mov	r0, r9
 811104e:	920c      	str	r2, [sp, #48]	@ 0x30
 8111050:	9309      	str	r3, [sp, #36]	@ 0x24
 8111052:	f000 fc9b 	bl	811198c <_Bfree>
 8111056:	9b07      	ldr	r3, [sp, #28]
 8111058:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 811105a:	9e00      	ldr	r6, [sp, #0]
 811105c:	ea42 0103 	orr.w	r1, r2, r3
 8111060:	9b06      	ldr	r3, [sp, #24]
 8111062:	4319      	orrs	r1, r3
 8111064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8111066:	d10d      	bne.n	8111084 <_dtoa_r+0xa44>
 8111068:	2b39      	cmp	r3, #57	@ 0x39
 811106a:	d027      	beq.n	81110bc <_dtoa_r+0xa7c>
 811106c:	9a04      	ldr	r2, [sp, #16]
 811106e:	2a00      	cmp	r2, #0
 8111070:	dd01      	ble.n	8111076 <_dtoa_r+0xa36>
 8111072:	9b03      	ldr	r3, [sp, #12]
 8111074:	3331      	adds	r3, #49	@ 0x31
 8111076:	f88b 3000 	strb.w	r3, [fp]
 811107a:	e52e      	b.n	8110ada <_dtoa_r+0x49a>
 811107c:	4628      	mov	r0, r5
 811107e:	e7b9      	b.n	8110ff4 <_dtoa_r+0x9b4>
 8111080:	2201      	movs	r2, #1
 8111082:	e7e2      	b.n	811104a <_dtoa_r+0xa0a>
 8111084:	9904      	ldr	r1, [sp, #16]
 8111086:	2900      	cmp	r1, #0
 8111088:	db04      	blt.n	8111094 <_dtoa_r+0xa54>
 811108a:	9807      	ldr	r0, [sp, #28]
 811108c:	4301      	orrs	r1, r0
 811108e:	9806      	ldr	r0, [sp, #24]
 8111090:	4301      	orrs	r1, r0
 8111092:	d120      	bne.n	81110d6 <_dtoa_r+0xa96>
 8111094:	2a00      	cmp	r2, #0
 8111096:	ddee      	ble.n	8111076 <_dtoa_r+0xa36>
 8111098:	9902      	ldr	r1, [sp, #8]
 811109a:	9300      	str	r3, [sp, #0]
 811109c:	2201      	movs	r2, #1
 811109e:	4648      	mov	r0, r9
 81110a0:	f000 fe84 	bl	8111dac <__lshift>
 81110a4:	4621      	mov	r1, r4
 81110a6:	9002      	str	r0, [sp, #8]
 81110a8:	f000 feec 	bl	8111e84 <__mcmp>
 81110ac:	2800      	cmp	r0, #0
 81110ae:	9b00      	ldr	r3, [sp, #0]
 81110b0:	dc02      	bgt.n	81110b8 <_dtoa_r+0xa78>
 81110b2:	d1e0      	bne.n	8111076 <_dtoa_r+0xa36>
 81110b4:	07da      	lsls	r2, r3, #31
 81110b6:	d5de      	bpl.n	8111076 <_dtoa_r+0xa36>
 81110b8:	2b39      	cmp	r3, #57	@ 0x39
 81110ba:	d1da      	bne.n	8111072 <_dtoa_r+0xa32>
 81110bc:	2339      	movs	r3, #57	@ 0x39
 81110be:	f88b 3000 	strb.w	r3, [fp]
 81110c2:	4633      	mov	r3, r6
 81110c4:	461e      	mov	r6, r3
 81110c6:	3b01      	subs	r3, #1
 81110c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 81110cc:	2a39      	cmp	r2, #57	@ 0x39
 81110ce:	d04e      	beq.n	811116e <_dtoa_r+0xb2e>
 81110d0:	3201      	adds	r2, #1
 81110d2:	701a      	strb	r2, [r3, #0]
 81110d4:	e501      	b.n	8110ada <_dtoa_r+0x49a>
 81110d6:	2a00      	cmp	r2, #0
 81110d8:	dd03      	ble.n	81110e2 <_dtoa_r+0xaa2>
 81110da:	2b39      	cmp	r3, #57	@ 0x39
 81110dc:	d0ee      	beq.n	81110bc <_dtoa_r+0xa7c>
 81110de:	3301      	adds	r3, #1
 81110e0:	e7c9      	b.n	8111076 <_dtoa_r+0xa36>
 81110e2:	9a00      	ldr	r2, [sp, #0]
 81110e4:	9908      	ldr	r1, [sp, #32]
 81110e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 81110ea:	428a      	cmp	r2, r1
 81110ec:	d028      	beq.n	8111140 <_dtoa_r+0xb00>
 81110ee:	9902      	ldr	r1, [sp, #8]
 81110f0:	2300      	movs	r3, #0
 81110f2:	220a      	movs	r2, #10
 81110f4:	4648      	mov	r0, r9
 81110f6:	f000 fc6b 	bl	81119d0 <__multadd>
 81110fa:	42af      	cmp	r7, r5
 81110fc:	9002      	str	r0, [sp, #8]
 81110fe:	f04f 0300 	mov.w	r3, #0
 8111102:	f04f 020a 	mov.w	r2, #10
 8111106:	4639      	mov	r1, r7
 8111108:	4648      	mov	r0, r9
 811110a:	d107      	bne.n	811111c <_dtoa_r+0xadc>
 811110c:	f000 fc60 	bl	81119d0 <__multadd>
 8111110:	4607      	mov	r7, r0
 8111112:	4605      	mov	r5, r0
 8111114:	9b00      	ldr	r3, [sp, #0]
 8111116:	3301      	adds	r3, #1
 8111118:	9300      	str	r3, [sp, #0]
 811111a:	e777      	b.n	811100c <_dtoa_r+0x9cc>
 811111c:	f000 fc58 	bl	81119d0 <__multadd>
 8111120:	4629      	mov	r1, r5
 8111122:	4607      	mov	r7, r0
 8111124:	2300      	movs	r3, #0
 8111126:	220a      	movs	r2, #10
 8111128:	4648      	mov	r0, r9
 811112a:	f000 fc51 	bl	81119d0 <__multadd>
 811112e:	4605      	mov	r5, r0
 8111130:	e7f0      	b.n	8111114 <_dtoa_r+0xad4>
 8111132:	f1bb 0f00 	cmp.w	fp, #0
 8111136:	bfcc      	ite	gt
 8111138:	465e      	movgt	r6, fp
 811113a:	2601      	movle	r6, #1
 811113c:	4456      	add	r6, sl
 811113e:	2700      	movs	r7, #0
 8111140:	9902      	ldr	r1, [sp, #8]
 8111142:	9300      	str	r3, [sp, #0]
 8111144:	2201      	movs	r2, #1
 8111146:	4648      	mov	r0, r9
 8111148:	f000 fe30 	bl	8111dac <__lshift>
 811114c:	4621      	mov	r1, r4
 811114e:	9002      	str	r0, [sp, #8]
 8111150:	f000 fe98 	bl	8111e84 <__mcmp>
 8111154:	2800      	cmp	r0, #0
 8111156:	dcb4      	bgt.n	81110c2 <_dtoa_r+0xa82>
 8111158:	d102      	bne.n	8111160 <_dtoa_r+0xb20>
 811115a:	9b00      	ldr	r3, [sp, #0]
 811115c:	07db      	lsls	r3, r3, #31
 811115e:	d4b0      	bmi.n	81110c2 <_dtoa_r+0xa82>
 8111160:	4633      	mov	r3, r6
 8111162:	461e      	mov	r6, r3
 8111164:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8111168:	2a30      	cmp	r2, #48	@ 0x30
 811116a:	d0fa      	beq.n	8111162 <_dtoa_r+0xb22>
 811116c:	e4b5      	b.n	8110ada <_dtoa_r+0x49a>
 811116e:	459a      	cmp	sl, r3
 8111170:	d1a8      	bne.n	81110c4 <_dtoa_r+0xa84>
 8111172:	2331      	movs	r3, #49	@ 0x31
 8111174:	f108 0801 	add.w	r8, r8, #1
 8111178:	f88a 3000 	strb.w	r3, [sl]
 811117c:	e4ad      	b.n	8110ada <_dtoa_r+0x49a>
 811117e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8111180:	f8df a058 	ldr.w	sl, [pc, #88]	@ 81111dc <_dtoa_r+0xb9c>
 8111184:	b11b      	cbz	r3, 811118e <_dtoa_r+0xb4e>
 8111186:	f10a 0308 	add.w	r3, sl, #8
 811118a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 811118c:	6013      	str	r3, [r2, #0]
 811118e:	4650      	mov	r0, sl
 8111190:	b017      	add	sp, #92	@ 0x5c
 8111192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111196:	9b07      	ldr	r3, [sp, #28]
 8111198:	2b01      	cmp	r3, #1
 811119a:	f77f ae2e 	ble.w	8110dfa <_dtoa_r+0x7ba>
 811119e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 81111a0:	9308      	str	r3, [sp, #32]
 81111a2:	2001      	movs	r0, #1
 81111a4:	e64d      	b.n	8110e42 <_dtoa_r+0x802>
 81111a6:	f1bb 0f00 	cmp.w	fp, #0
 81111aa:	f77f aed9 	ble.w	8110f60 <_dtoa_r+0x920>
 81111ae:	4656      	mov	r6, sl
 81111b0:	9802      	ldr	r0, [sp, #8]
 81111b2:	4621      	mov	r1, r4
 81111b4:	f7ff f9ba 	bl	811052c <quorem>
 81111b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 81111bc:	f806 3b01 	strb.w	r3, [r6], #1
 81111c0:	eba6 020a 	sub.w	r2, r6, sl
 81111c4:	4593      	cmp	fp, r2
 81111c6:	ddb4      	ble.n	8111132 <_dtoa_r+0xaf2>
 81111c8:	9902      	ldr	r1, [sp, #8]
 81111ca:	2300      	movs	r3, #0
 81111cc:	220a      	movs	r2, #10
 81111ce:	4648      	mov	r0, r9
 81111d0:	f000 fbfe 	bl	81119d0 <__multadd>
 81111d4:	9002      	str	r0, [sp, #8]
 81111d6:	e7eb      	b.n	81111b0 <_dtoa_r+0xb70>
 81111d8:	0811309b 	.word	0x0811309b
 81111dc:	0811301f 	.word	0x0811301f

081111e0 <_free_r>:
 81111e0:	b538      	push	{r3, r4, r5, lr}
 81111e2:	4605      	mov	r5, r0
 81111e4:	2900      	cmp	r1, #0
 81111e6:	d041      	beq.n	811126c <_free_r+0x8c>
 81111e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81111ec:	1f0c      	subs	r4, r1, #4
 81111ee:	2b00      	cmp	r3, #0
 81111f0:	bfb8      	it	lt
 81111f2:	18e4      	addlt	r4, r4, r3
 81111f4:	f7fd f9d4 	bl	810e5a0 <__malloc_lock>
 81111f8:	4a1d      	ldr	r2, [pc, #116]	@ (8111270 <_free_r+0x90>)
 81111fa:	6813      	ldr	r3, [r2, #0]
 81111fc:	b933      	cbnz	r3, 811120c <_free_r+0x2c>
 81111fe:	6063      	str	r3, [r4, #4]
 8111200:	6014      	str	r4, [r2, #0]
 8111202:	4628      	mov	r0, r5
 8111204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8111208:	f7fd b9d0 	b.w	810e5ac <__malloc_unlock>
 811120c:	42a3      	cmp	r3, r4
 811120e:	d908      	bls.n	8111222 <_free_r+0x42>
 8111210:	6820      	ldr	r0, [r4, #0]
 8111212:	1821      	adds	r1, r4, r0
 8111214:	428b      	cmp	r3, r1
 8111216:	bf01      	itttt	eq
 8111218:	6819      	ldreq	r1, [r3, #0]
 811121a:	685b      	ldreq	r3, [r3, #4]
 811121c:	1809      	addeq	r1, r1, r0
 811121e:	6021      	streq	r1, [r4, #0]
 8111220:	e7ed      	b.n	81111fe <_free_r+0x1e>
 8111222:	461a      	mov	r2, r3
 8111224:	685b      	ldr	r3, [r3, #4]
 8111226:	b10b      	cbz	r3, 811122c <_free_r+0x4c>
 8111228:	42a3      	cmp	r3, r4
 811122a:	d9fa      	bls.n	8111222 <_free_r+0x42>
 811122c:	6811      	ldr	r1, [r2, #0]
 811122e:	1850      	adds	r0, r2, r1
 8111230:	42a0      	cmp	r0, r4
 8111232:	d10b      	bne.n	811124c <_free_r+0x6c>
 8111234:	6820      	ldr	r0, [r4, #0]
 8111236:	4401      	add	r1, r0
 8111238:	1850      	adds	r0, r2, r1
 811123a:	4283      	cmp	r3, r0
 811123c:	6011      	str	r1, [r2, #0]
 811123e:	d1e0      	bne.n	8111202 <_free_r+0x22>
 8111240:	6818      	ldr	r0, [r3, #0]
 8111242:	685b      	ldr	r3, [r3, #4]
 8111244:	6053      	str	r3, [r2, #4]
 8111246:	4408      	add	r0, r1
 8111248:	6010      	str	r0, [r2, #0]
 811124a:	e7da      	b.n	8111202 <_free_r+0x22>
 811124c:	d902      	bls.n	8111254 <_free_r+0x74>
 811124e:	230c      	movs	r3, #12
 8111250:	602b      	str	r3, [r5, #0]
 8111252:	e7d6      	b.n	8111202 <_free_r+0x22>
 8111254:	6820      	ldr	r0, [r4, #0]
 8111256:	1821      	adds	r1, r4, r0
 8111258:	428b      	cmp	r3, r1
 811125a:	bf04      	itt	eq
 811125c:	6819      	ldreq	r1, [r3, #0]
 811125e:	685b      	ldreq	r3, [r3, #4]
 8111260:	6063      	str	r3, [r4, #4]
 8111262:	bf04      	itt	eq
 8111264:	1809      	addeq	r1, r1, r0
 8111266:	6021      	streq	r1, [r4, #0]
 8111268:	6054      	str	r4, [r2, #4]
 811126a:	e7ca      	b.n	8111202 <_free_r+0x22>
 811126c:	bd38      	pop	{r3, r4, r5, pc}
 811126e:	bf00      	nop
 8111270:	10004fac 	.word	0x10004fac

08111274 <rshift>:
 8111274:	6903      	ldr	r3, [r0, #16]
 8111276:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 811127a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 811127e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8111282:	f100 0414 	add.w	r4, r0, #20
 8111286:	dd45      	ble.n	8111314 <rshift+0xa0>
 8111288:	f011 011f 	ands.w	r1, r1, #31
 811128c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8111290:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8111294:	d10c      	bne.n	81112b0 <rshift+0x3c>
 8111296:	f100 0710 	add.w	r7, r0, #16
 811129a:	4629      	mov	r1, r5
 811129c:	42b1      	cmp	r1, r6
 811129e:	d334      	bcc.n	811130a <rshift+0x96>
 81112a0:	1a9b      	subs	r3, r3, r2
 81112a2:	009b      	lsls	r3, r3, #2
 81112a4:	1eea      	subs	r2, r5, #3
 81112a6:	4296      	cmp	r6, r2
 81112a8:	bf38      	it	cc
 81112aa:	2300      	movcc	r3, #0
 81112ac:	4423      	add	r3, r4
 81112ae:	e015      	b.n	81112dc <rshift+0x68>
 81112b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 81112b4:	f1c1 0820 	rsb	r8, r1, #32
 81112b8:	40cf      	lsrs	r7, r1
 81112ba:	f105 0e04 	add.w	lr, r5, #4
 81112be:	46a1      	mov	r9, r4
 81112c0:	4576      	cmp	r6, lr
 81112c2:	46f4      	mov	ip, lr
 81112c4:	d815      	bhi.n	81112f2 <rshift+0x7e>
 81112c6:	1a9a      	subs	r2, r3, r2
 81112c8:	0092      	lsls	r2, r2, #2
 81112ca:	3a04      	subs	r2, #4
 81112cc:	3501      	adds	r5, #1
 81112ce:	42ae      	cmp	r6, r5
 81112d0:	bf38      	it	cc
 81112d2:	2200      	movcc	r2, #0
 81112d4:	18a3      	adds	r3, r4, r2
 81112d6:	50a7      	str	r7, [r4, r2]
 81112d8:	b107      	cbz	r7, 81112dc <rshift+0x68>
 81112da:	3304      	adds	r3, #4
 81112dc:	1b1a      	subs	r2, r3, r4
 81112de:	42a3      	cmp	r3, r4
 81112e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 81112e4:	bf08      	it	eq
 81112e6:	2300      	moveq	r3, #0
 81112e8:	6102      	str	r2, [r0, #16]
 81112ea:	bf08      	it	eq
 81112ec:	6143      	streq	r3, [r0, #20]
 81112ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81112f2:	f8dc c000 	ldr.w	ip, [ip]
 81112f6:	fa0c fc08 	lsl.w	ip, ip, r8
 81112fa:	ea4c 0707 	orr.w	r7, ip, r7
 81112fe:	f849 7b04 	str.w	r7, [r9], #4
 8111302:	f85e 7b04 	ldr.w	r7, [lr], #4
 8111306:	40cf      	lsrs	r7, r1
 8111308:	e7da      	b.n	81112c0 <rshift+0x4c>
 811130a:	f851 cb04 	ldr.w	ip, [r1], #4
 811130e:	f847 cf04 	str.w	ip, [r7, #4]!
 8111312:	e7c3      	b.n	811129c <rshift+0x28>
 8111314:	4623      	mov	r3, r4
 8111316:	e7e1      	b.n	81112dc <rshift+0x68>

08111318 <__hexdig_fun>:
 8111318:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 811131c:	2b09      	cmp	r3, #9
 811131e:	d802      	bhi.n	8111326 <__hexdig_fun+0xe>
 8111320:	3820      	subs	r0, #32
 8111322:	b2c0      	uxtb	r0, r0
 8111324:	4770      	bx	lr
 8111326:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 811132a:	2b05      	cmp	r3, #5
 811132c:	d801      	bhi.n	8111332 <__hexdig_fun+0x1a>
 811132e:	3847      	subs	r0, #71	@ 0x47
 8111330:	e7f7      	b.n	8111322 <__hexdig_fun+0xa>
 8111332:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8111336:	2b05      	cmp	r3, #5
 8111338:	d801      	bhi.n	811133e <__hexdig_fun+0x26>
 811133a:	3827      	subs	r0, #39	@ 0x27
 811133c:	e7f1      	b.n	8111322 <__hexdig_fun+0xa>
 811133e:	2000      	movs	r0, #0
 8111340:	4770      	bx	lr
	...

08111344 <__gethex>:
 8111344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111348:	b085      	sub	sp, #20
 811134a:	468a      	mov	sl, r1
 811134c:	9302      	str	r3, [sp, #8]
 811134e:	680b      	ldr	r3, [r1, #0]
 8111350:	9001      	str	r0, [sp, #4]
 8111352:	4690      	mov	r8, r2
 8111354:	1c9c      	adds	r4, r3, #2
 8111356:	46a1      	mov	r9, r4
 8111358:	f814 0b01 	ldrb.w	r0, [r4], #1
 811135c:	2830      	cmp	r0, #48	@ 0x30
 811135e:	d0fa      	beq.n	8111356 <__gethex+0x12>
 8111360:	eba9 0303 	sub.w	r3, r9, r3
 8111364:	f1a3 0b02 	sub.w	fp, r3, #2
 8111368:	f7ff ffd6 	bl	8111318 <__hexdig_fun>
 811136c:	4605      	mov	r5, r0
 811136e:	2800      	cmp	r0, #0
 8111370:	d168      	bne.n	8111444 <__gethex+0x100>
 8111372:	49a0      	ldr	r1, [pc, #640]	@ (81115f4 <__gethex+0x2b0>)
 8111374:	2201      	movs	r2, #1
 8111376:	4648      	mov	r0, r9
 8111378:	f7ff f824 	bl	81103c4 <strncmp>
 811137c:	4607      	mov	r7, r0
 811137e:	2800      	cmp	r0, #0
 8111380:	d167      	bne.n	8111452 <__gethex+0x10e>
 8111382:	f899 0001 	ldrb.w	r0, [r9, #1]
 8111386:	4626      	mov	r6, r4
 8111388:	f7ff ffc6 	bl	8111318 <__hexdig_fun>
 811138c:	2800      	cmp	r0, #0
 811138e:	d062      	beq.n	8111456 <__gethex+0x112>
 8111390:	4623      	mov	r3, r4
 8111392:	7818      	ldrb	r0, [r3, #0]
 8111394:	2830      	cmp	r0, #48	@ 0x30
 8111396:	4699      	mov	r9, r3
 8111398:	f103 0301 	add.w	r3, r3, #1
 811139c:	d0f9      	beq.n	8111392 <__gethex+0x4e>
 811139e:	f7ff ffbb 	bl	8111318 <__hexdig_fun>
 81113a2:	fab0 f580 	clz	r5, r0
 81113a6:	096d      	lsrs	r5, r5, #5
 81113a8:	f04f 0b01 	mov.w	fp, #1
 81113ac:	464a      	mov	r2, r9
 81113ae:	4616      	mov	r6, r2
 81113b0:	3201      	adds	r2, #1
 81113b2:	7830      	ldrb	r0, [r6, #0]
 81113b4:	f7ff ffb0 	bl	8111318 <__hexdig_fun>
 81113b8:	2800      	cmp	r0, #0
 81113ba:	d1f8      	bne.n	81113ae <__gethex+0x6a>
 81113bc:	498d      	ldr	r1, [pc, #564]	@ (81115f4 <__gethex+0x2b0>)
 81113be:	2201      	movs	r2, #1
 81113c0:	4630      	mov	r0, r6
 81113c2:	f7fe ffff 	bl	81103c4 <strncmp>
 81113c6:	2800      	cmp	r0, #0
 81113c8:	d13f      	bne.n	811144a <__gethex+0x106>
 81113ca:	b944      	cbnz	r4, 81113de <__gethex+0x9a>
 81113cc:	1c74      	adds	r4, r6, #1
 81113ce:	4622      	mov	r2, r4
 81113d0:	4616      	mov	r6, r2
 81113d2:	3201      	adds	r2, #1
 81113d4:	7830      	ldrb	r0, [r6, #0]
 81113d6:	f7ff ff9f 	bl	8111318 <__hexdig_fun>
 81113da:	2800      	cmp	r0, #0
 81113dc:	d1f8      	bne.n	81113d0 <__gethex+0x8c>
 81113de:	1ba4      	subs	r4, r4, r6
 81113e0:	00a7      	lsls	r7, r4, #2
 81113e2:	7833      	ldrb	r3, [r6, #0]
 81113e4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 81113e8:	2b50      	cmp	r3, #80	@ 0x50
 81113ea:	d13e      	bne.n	811146a <__gethex+0x126>
 81113ec:	7873      	ldrb	r3, [r6, #1]
 81113ee:	2b2b      	cmp	r3, #43	@ 0x2b
 81113f0:	d033      	beq.n	811145a <__gethex+0x116>
 81113f2:	2b2d      	cmp	r3, #45	@ 0x2d
 81113f4:	d034      	beq.n	8111460 <__gethex+0x11c>
 81113f6:	1c71      	adds	r1, r6, #1
 81113f8:	2400      	movs	r4, #0
 81113fa:	7808      	ldrb	r0, [r1, #0]
 81113fc:	f7ff ff8c 	bl	8111318 <__hexdig_fun>
 8111400:	1e43      	subs	r3, r0, #1
 8111402:	b2db      	uxtb	r3, r3
 8111404:	2b18      	cmp	r3, #24
 8111406:	d830      	bhi.n	811146a <__gethex+0x126>
 8111408:	f1a0 0210 	sub.w	r2, r0, #16
 811140c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8111410:	f7ff ff82 	bl	8111318 <__hexdig_fun>
 8111414:	f100 3cff 	add.w	ip, r0, #4294967295
 8111418:	fa5f fc8c 	uxtb.w	ip, ip
 811141c:	f1bc 0f18 	cmp.w	ip, #24
 8111420:	f04f 030a 	mov.w	r3, #10
 8111424:	d91e      	bls.n	8111464 <__gethex+0x120>
 8111426:	b104      	cbz	r4, 811142a <__gethex+0xe6>
 8111428:	4252      	negs	r2, r2
 811142a:	4417      	add	r7, r2
 811142c:	f8ca 1000 	str.w	r1, [sl]
 8111430:	b1ed      	cbz	r5, 811146e <__gethex+0x12a>
 8111432:	f1bb 0f00 	cmp.w	fp, #0
 8111436:	bf0c      	ite	eq
 8111438:	2506      	moveq	r5, #6
 811143a:	2500      	movne	r5, #0
 811143c:	4628      	mov	r0, r5
 811143e:	b005      	add	sp, #20
 8111440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111444:	2500      	movs	r5, #0
 8111446:	462c      	mov	r4, r5
 8111448:	e7b0      	b.n	81113ac <__gethex+0x68>
 811144a:	2c00      	cmp	r4, #0
 811144c:	d1c7      	bne.n	81113de <__gethex+0x9a>
 811144e:	4627      	mov	r7, r4
 8111450:	e7c7      	b.n	81113e2 <__gethex+0x9e>
 8111452:	464e      	mov	r6, r9
 8111454:	462f      	mov	r7, r5
 8111456:	2501      	movs	r5, #1
 8111458:	e7c3      	b.n	81113e2 <__gethex+0x9e>
 811145a:	2400      	movs	r4, #0
 811145c:	1cb1      	adds	r1, r6, #2
 811145e:	e7cc      	b.n	81113fa <__gethex+0xb6>
 8111460:	2401      	movs	r4, #1
 8111462:	e7fb      	b.n	811145c <__gethex+0x118>
 8111464:	fb03 0002 	mla	r0, r3, r2, r0
 8111468:	e7ce      	b.n	8111408 <__gethex+0xc4>
 811146a:	4631      	mov	r1, r6
 811146c:	e7de      	b.n	811142c <__gethex+0xe8>
 811146e:	eba6 0309 	sub.w	r3, r6, r9
 8111472:	3b01      	subs	r3, #1
 8111474:	4629      	mov	r1, r5
 8111476:	2b07      	cmp	r3, #7
 8111478:	dc0a      	bgt.n	8111490 <__gethex+0x14c>
 811147a:	9801      	ldr	r0, [sp, #4]
 811147c:	f000 fa46 	bl	811190c <_Balloc>
 8111480:	4604      	mov	r4, r0
 8111482:	b940      	cbnz	r0, 8111496 <__gethex+0x152>
 8111484:	4b5c      	ldr	r3, [pc, #368]	@ (81115f8 <__gethex+0x2b4>)
 8111486:	4602      	mov	r2, r0
 8111488:	21e4      	movs	r1, #228	@ 0xe4
 811148a:	485c      	ldr	r0, [pc, #368]	@ (81115fc <__gethex+0x2b8>)
 811148c:	f001 fb54 	bl	8112b38 <__assert_func>
 8111490:	3101      	adds	r1, #1
 8111492:	105b      	asrs	r3, r3, #1
 8111494:	e7ef      	b.n	8111476 <__gethex+0x132>
 8111496:	f100 0a14 	add.w	sl, r0, #20
 811149a:	2300      	movs	r3, #0
 811149c:	4655      	mov	r5, sl
 811149e:	469b      	mov	fp, r3
 81114a0:	45b1      	cmp	r9, r6
 81114a2:	d337      	bcc.n	8111514 <__gethex+0x1d0>
 81114a4:	f845 bb04 	str.w	fp, [r5], #4
 81114a8:	eba5 050a 	sub.w	r5, r5, sl
 81114ac:	10ad      	asrs	r5, r5, #2
 81114ae:	6125      	str	r5, [r4, #16]
 81114b0:	4658      	mov	r0, fp
 81114b2:	f000 fb1d 	bl	8111af0 <__hi0bits>
 81114b6:	016d      	lsls	r5, r5, #5
 81114b8:	f8d8 6000 	ldr.w	r6, [r8]
 81114bc:	1a2d      	subs	r5, r5, r0
 81114be:	42b5      	cmp	r5, r6
 81114c0:	dd54      	ble.n	811156c <__gethex+0x228>
 81114c2:	1bad      	subs	r5, r5, r6
 81114c4:	4629      	mov	r1, r5
 81114c6:	4620      	mov	r0, r4
 81114c8:	f000 fea9 	bl	811221e <__any_on>
 81114cc:	4681      	mov	r9, r0
 81114ce:	b178      	cbz	r0, 81114f0 <__gethex+0x1ac>
 81114d0:	1e6b      	subs	r3, r5, #1
 81114d2:	1159      	asrs	r1, r3, #5
 81114d4:	f003 021f 	and.w	r2, r3, #31
 81114d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 81114dc:	f04f 0901 	mov.w	r9, #1
 81114e0:	fa09 f202 	lsl.w	r2, r9, r2
 81114e4:	420a      	tst	r2, r1
 81114e6:	d003      	beq.n	81114f0 <__gethex+0x1ac>
 81114e8:	454b      	cmp	r3, r9
 81114ea:	dc36      	bgt.n	811155a <__gethex+0x216>
 81114ec:	f04f 0902 	mov.w	r9, #2
 81114f0:	4629      	mov	r1, r5
 81114f2:	4620      	mov	r0, r4
 81114f4:	f7ff febe 	bl	8111274 <rshift>
 81114f8:	442f      	add	r7, r5
 81114fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 81114fe:	42bb      	cmp	r3, r7
 8111500:	da42      	bge.n	8111588 <__gethex+0x244>
 8111502:	9801      	ldr	r0, [sp, #4]
 8111504:	4621      	mov	r1, r4
 8111506:	f000 fa41 	bl	811198c <_Bfree>
 811150a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 811150c:	2300      	movs	r3, #0
 811150e:	6013      	str	r3, [r2, #0]
 8111510:	25a3      	movs	r5, #163	@ 0xa3
 8111512:	e793      	b.n	811143c <__gethex+0xf8>
 8111514:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8111518:	2a2e      	cmp	r2, #46	@ 0x2e
 811151a:	d012      	beq.n	8111542 <__gethex+0x1fe>
 811151c:	2b20      	cmp	r3, #32
 811151e:	d104      	bne.n	811152a <__gethex+0x1e6>
 8111520:	f845 bb04 	str.w	fp, [r5], #4
 8111524:	f04f 0b00 	mov.w	fp, #0
 8111528:	465b      	mov	r3, fp
 811152a:	7830      	ldrb	r0, [r6, #0]
 811152c:	9303      	str	r3, [sp, #12]
 811152e:	f7ff fef3 	bl	8111318 <__hexdig_fun>
 8111532:	9b03      	ldr	r3, [sp, #12]
 8111534:	f000 000f 	and.w	r0, r0, #15
 8111538:	4098      	lsls	r0, r3
 811153a:	ea4b 0b00 	orr.w	fp, fp, r0
 811153e:	3304      	adds	r3, #4
 8111540:	e7ae      	b.n	81114a0 <__gethex+0x15c>
 8111542:	45b1      	cmp	r9, r6
 8111544:	d8ea      	bhi.n	811151c <__gethex+0x1d8>
 8111546:	492b      	ldr	r1, [pc, #172]	@ (81115f4 <__gethex+0x2b0>)
 8111548:	9303      	str	r3, [sp, #12]
 811154a:	2201      	movs	r2, #1
 811154c:	4630      	mov	r0, r6
 811154e:	f7fe ff39 	bl	81103c4 <strncmp>
 8111552:	9b03      	ldr	r3, [sp, #12]
 8111554:	2800      	cmp	r0, #0
 8111556:	d1e1      	bne.n	811151c <__gethex+0x1d8>
 8111558:	e7a2      	b.n	81114a0 <__gethex+0x15c>
 811155a:	1ea9      	subs	r1, r5, #2
 811155c:	4620      	mov	r0, r4
 811155e:	f000 fe5e 	bl	811221e <__any_on>
 8111562:	2800      	cmp	r0, #0
 8111564:	d0c2      	beq.n	81114ec <__gethex+0x1a8>
 8111566:	f04f 0903 	mov.w	r9, #3
 811156a:	e7c1      	b.n	81114f0 <__gethex+0x1ac>
 811156c:	da09      	bge.n	8111582 <__gethex+0x23e>
 811156e:	1b75      	subs	r5, r6, r5
 8111570:	4621      	mov	r1, r4
 8111572:	9801      	ldr	r0, [sp, #4]
 8111574:	462a      	mov	r2, r5
 8111576:	f000 fc19 	bl	8111dac <__lshift>
 811157a:	1b7f      	subs	r7, r7, r5
 811157c:	4604      	mov	r4, r0
 811157e:	f100 0a14 	add.w	sl, r0, #20
 8111582:	f04f 0900 	mov.w	r9, #0
 8111586:	e7b8      	b.n	81114fa <__gethex+0x1b6>
 8111588:	f8d8 5004 	ldr.w	r5, [r8, #4]
 811158c:	42bd      	cmp	r5, r7
 811158e:	dd6f      	ble.n	8111670 <__gethex+0x32c>
 8111590:	1bed      	subs	r5, r5, r7
 8111592:	42ae      	cmp	r6, r5
 8111594:	dc34      	bgt.n	8111600 <__gethex+0x2bc>
 8111596:	f8d8 300c 	ldr.w	r3, [r8, #12]
 811159a:	2b02      	cmp	r3, #2
 811159c:	d022      	beq.n	81115e4 <__gethex+0x2a0>
 811159e:	2b03      	cmp	r3, #3
 81115a0:	d024      	beq.n	81115ec <__gethex+0x2a8>
 81115a2:	2b01      	cmp	r3, #1
 81115a4:	d115      	bne.n	81115d2 <__gethex+0x28e>
 81115a6:	42ae      	cmp	r6, r5
 81115a8:	d113      	bne.n	81115d2 <__gethex+0x28e>
 81115aa:	2e01      	cmp	r6, #1
 81115ac:	d10b      	bne.n	81115c6 <__gethex+0x282>
 81115ae:	9a02      	ldr	r2, [sp, #8]
 81115b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 81115b4:	6013      	str	r3, [r2, #0]
 81115b6:	2301      	movs	r3, #1
 81115b8:	6123      	str	r3, [r4, #16]
 81115ba:	f8ca 3000 	str.w	r3, [sl]
 81115be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81115c0:	2562      	movs	r5, #98	@ 0x62
 81115c2:	601c      	str	r4, [r3, #0]
 81115c4:	e73a      	b.n	811143c <__gethex+0xf8>
 81115c6:	1e71      	subs	r1, r6, #1
 81115c8:	4620      	mov	r0, r4
 81115ca:	f000 fe28 	bl	811221e <__any_on>
 81115ce:	2800      	cmp	r0, #0
 81115d0:	d1ed      	bne.n	81115ae <__gethex+0x26a>
 81115d2:	9801      	ldr	r0, [sp, #4]
 81115d4:	4621      	mov	r1, r4
 81115d6:	f000 f9d9 	bl	811198c <_Bfree>
 81115da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81115dc:	2300      	movs	r3, #0
 81115de:	6013      	str	r3, [r2, #0]
 81115e0:	2550      	movs	r5, #80	@ 0x50
 81115e2:	e72b      	b.n	811143c <__gethex+0xf8>
 81115e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81115e6:	2b00      	cmp	r3, #0
 81115e8:	d1f3      	bne.n	81115d2 <__gethex+0x28e>
 81115ea:	e7e0      	b.n	81115ae <__gethex+0x26a>
 81115ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81115ee:	2b00      	cmp	r3, #0
 81115f0:	d1dd      	bne.n	81115ae <__gethex+0x26a>
 81115f2:	e7ee      	b.n	81115d2 <__gethex+0x28e>
 81115f4:	08112fdc 	.word	0x08112fdc
 81115f8:	0811309b 	.word	0x0811309b
 81115fc:	081130ac 	.word	0x081130ac
 8111600:	1e6f      	subs	r7, r5, #1
 8111602:	f1b9 0f00 	cmp.w	r9, #0
 8111606:	d130      	bne.n	811166a <__gethex+0x326>
 8111608:	b127      	cbz	r7, 8111614 <__gethex+0x2d0>
 811160a:	4639      	mov	r1, r7
 811160c:	4620      	mov	r0, r4
 811160e:	f000 fe06 	bl	811221e <__any_on>
 8111612:	4681      	mov	r9, r0
 8111614:	117a      	asrs	r2, r7, #5
 8111616:	2301      	movs	r3, #1
 8111618:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 811161c:	f007 071f 	and.w	r7, r7, #31
 8111620:	40bb      	lsls	r3, r7
 8111622:	4213      	tst	r3, r2
 8111624:	4629      	mov	r1, r5
 8111626:	4620      	mov	r0, r4
 8111628:	bf18      	it	ne
 811162a:	f049 0902 	orrne.w	r9, r9, #2
 811162e:	f7ff fe21 	bl	8111274 <rshift>
 8111632:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8111636:	1b76      	subs	r6, r6, r5
 8111638:	2502      	movs	r5, #2
 811163a:	f1b9 0f00 	cmp.w	r9, #0
 811163e:	d047      	beq.n	81116d0 <__gethex+0x38c>
 8111640:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8111644:	2b02      	cmp	r3, #2
 8111646:	d015      	beq.n	8111674 <__gethex+0x330>
 8111648:	2b03      	cmp	r3, #3
 811164a:	d017      	beq.n	811167c <__gethex+0x338>
 811164c:	2b01      	cmp	r3, #1
 811164e:	d109      	bne.n	8111664 <__gethex+0x320>
 8111650:	f019 0f02 	tst.w	r9, #2
 8111654:	d006      	beq.n	8111664 <__gethex+0x320>
 8111656:	f8da 3000 	ldr.w	r3, [sl]
 811165a:	ea49 0903 	orr.w	r9, r9, r3
 811165e:	f019 0f01 	tst.w	r9, #1
 8111662:	d10e      	bne.n	8111682 <__gethex+0x33e>
 8111664:	f045 0510 	orr.w	r5, r5, #16
 8111668:	e032      	b.n	81116d0 <__gethex+0x38c>
 811166a:	f04f 0901 	mov.w	r9, #1
 811166e:	e7d1      	b.n	8111614 <__gethex+0x2d0>
 8111670:	2501      	movs	r5, #1
 8111672:	e7e2      	b.n	811163a <__gethex+0x2f6>
 8111674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8111676:	f1c3 0301 	rsb	r3, r3, #1
 811167a:	930f      	str	r3, [sp, #60]	@ 0x3c
 811167c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 811167e:	2b00      	cmp	r3, #0
 8111680:	d0f0      	beq.n	8111664 <__gethex+0x320>
 8111682:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8111686:	f104 0314 	add.w	r3, r4, #20
 811168a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 811168e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8111692:	f04f 0c00 	mov.w	ip, #0
 8111696:	4618      	mov	r0, r3
 8111698:	f853 2b04 	ldr.w	r2, [r3], #4
 811169c:	f1b2 3fff 	cmp.w	r2, #4294967295
 81116a0:	d01b      	beq.n	81116da <__gethex+0x396>
 81116a2:	3201      	adds	r2, #1
 81116a4:	6002      	str	r2, [r0, #0]
 81116a6:	2d02      	cmp	r5, #2
 81116a8:	f104 0314 	add.w	r3, r4, #20
 81116ac:	d13c      	bne.n	8111728 <__gethex+0x3e4>
 81116ae:	f8d8 2000 	ldr.w	r2, [r8]
 81116b2:	3a01      	subs	r2, #1
 81116b4:	42b2      	cmp	r2, r6
 81116b6:	d109      	bne.n	81116cc <__gethex+0x388>
 81116b8:	1171      	asrs	r1, r6, #5
 81116ba:	2201      	movs	r2, #1
 81116bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 81116c0:	f006 061f 	and.w	r6, r6, #31
 81116c4:	fa02 f606 	lsl.w	r6, r2, r6
 81116c8:	421e      	tst	r6, r3
 81116ca:	d13a      	bne.n	8111742 <__gethex+0x3fe>
 81116cc:	f045 0520 	orr.w	r5, r5, #32
 81116d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81116d2:	601c      	str	r4, [r3, #0]
 81116d4:	9b02      	ldr	r3, [sp, #8]
 81116d6:	601f      	str	r7, [r3, #0]
 81116d8:	e6b0      	b.n	811143c <__gethex+0xf8>
 81116da:	4299      	cmp	r1, r3
 81116dc:	f843 cc04 	str.w	ip, [r3, #-4]
 81116e0:	d8d9      	bhi.n	8111696 <__gethex+0x352>
 81116e2:	68a3      	ldr	r3, [r4, #8]
 81116e4:	459b      	cmp	fp, r3
 81116e6:	db17      	blt.n	8111718 <__gethex+0x3d4>
 81116e8:	6861      	ldr	r1, [r4, #4]
 81116ea:	9801      	ldr	r0, [sp, #4]
 81116ec:	3101      	adds	r1, #1
 81116ee:	f000 f90d 	bl	811190c <_Balloc>
 81116f2:	4681      	mov	r9, r0
 81116f4:	b918      	cbnz	r0, 81116fe <__gethex+0x3ba>
 81116f6:	4b1a      	ldr	r3, [pc, #104]	@ (8111760 <__gethex+0x41c>)
 81116f8:	4602      	mov	r2, r0
 81116fa:	2184      	movs	r1, #132	@ 0x84
 81116fc:	e6c5      	b.n	811148a <__gethex+0x146>
 81116fe:	6922      	ldr	r2, [r4, #16]
 8111700:	3202      	adds	r2, #2
 8111702:	f104 010c 	add.w	r1, r4, #12
 8111706:	0092      	lsls	r2, r2, #2
 8111708:	300c      	adds	r0, #12
 811170a:	f7fe fef1 	bl	81104f0 <memcpy>
 811170e:	4621      	mov	r1, r4
 8111710:	9801      	ldr	r0, [sp, #4]
 8111712:	f000 f93b 	bl	811198c <_Bfree>
 8111716:	464c      	mov	r4, r9
 8111718:	6923      	ldr	r3, [r4, #16]
 811171a:	1c5a      	adds	r2, r3, #1
 811171c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8111720:	6122      	str	r2, [r4, #16]
 8111722:	2201      	movs	r2, #1
 8111724:	615a      	str	r2, [r3, #20]
 8111726:	e7be      	b.n	81116a6 <__gethex+0x362>
 8111728:	6922      	ldr	r2, [r4, #16]
 811172a:	455a      	cmp	r2, fp
 811172c:	dd0b      	ble.n	8111746 <__gethex+0x402>
 811172e:	2101      	movs	r1, #1
 8111730:	4620      	mov	r0, r4
 8111732:	f7ff fd9f 	bl	8111274 <rshift>
 8111736:	f8d8 3008 	ldr.w	r3, [r8, #8]
 811173a:	3701      	adds	r7, #1
 811173c:	42bb      	cmp	r3, r7
 811173e:	f6ff aee0 	blt.w	8111502 <__gethex+0x1be>
 8111742:	2501      	movs	r5, #1
 8111744:	e7c2      	b.n	81116cc <__gethex+0x388>
 8111746:	f016 061f 	ands.w	r6, r6, #31
 811174a:	d0fa      	beq.n	8111742 <__gethex+0x3fe>
 811174c:	4453      	add	r3, sl
 811174e:	f1c6 0620 	rsb	r6, r6, #32
 8111752:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8111756:	f000 f9cb 	bl	8111af0 <__hi0bits>
 811175a:	42b0      	cmp	r0, r6
 811175c:	dbe7      	blt.n	811172e <__gethex+0x3ea>
 811175e:	e7f0      	b.n	8111742 <__gethex+0x3fe>
 8111760:	0811309b 	.word	0x0811309b

08111764 <L_shift>:
 8111764:	f1c2 0208 	rsb	r2, r2, #8
 8111768:	0092      	lsls	r2, r2, #2
 811176a:	b570      	push	{r4, r5, r6, lr}
 811176c:	f1c2 0620 	rsb	r6, r2, #32
 8111770:	6843      	ldr	r3, [r0, #4]
 8111772:	6804      	ldr	r4, [r0, #0]
 8111774:	fa03 f506 	lsl.w	r5, r3, r6
 8111778:	432c      	orrs	r4, r5
 811177a:	40d3      	lsrs	r3, r2
 811177c:	6004      	str	r4, [r0, #0]
 811177e:	f840 3f04 	str.w	r3, [r0, #4]!
 8111782:	4288      	cmp	r0, r1
 8111784:	d3f4      	bcc.n	8111770 <L_shift+0xc>
 8111786:	bd70      	pop	{r4, r5, r6, pc}

08111788 <__match>:
 8111788:	b530      	push	{r4, r5, lr}
 811178a:	6803      	ldr	r3, [r0, #0]
 811178c:	3301      	adds	r3, #1
 811178e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8111792:	b914      	cbnz	r4, 811179a <__match+0x12>
 8111794:	6003      	str	r3, [r0, #0]
 8111796:	2001      	movs	r0, #1
 8111798:	bd30      	pop	{r4, r5, pc}
 811179a:	f813 2b01 	ldrb.w	r2, [r3], #1
 811179e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 81117a2:	2d19      	cmp	r5, #25
 81117a4:	bf98      	it	ls
 81117a6:	3220      	addls	r2, #32
 81117a8:	42a2      	cmp	r2, r4
 81117aa:	d0f0      	beq.n	811178e <__match+0x6>
 81117ac:	2000      	movs	r0, #0
 81117ae:	e7f3      	b.n	8111798 <__match+0x10>

081117b0 <__hexnan>:
 81117b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81117b4:	680b      	ldr	r3, [r1, #0]
 81117b6:	6801      	ldr	r1, [r0, #0]
 81117b8:	115e      	asrs	r6, r3, #5
 81117ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 81117be:	f013 031f 	ands.w	r3, r3, #31
 81117c2:	b087      	sub	sp, #28
 81117c4:	bf18      	it	ne
 81117c6:	3604      	addne	r6, #4
 81117c8:	2500      	movs	r5, #0
 81117ca:	1f37      	subs	r7, r6, #4
 81117cc:	4682      	mov	sl, r0
 81117ce:	4690      	mov	r8, r2
 81117d0:	9301      	str	r3, [sp, #4]
 81117d2:	f846 5c04 	str.w	r5, [r6, #-4]
 81117d6:	46b9      	mov	r9, r7
 81117d8:	463c      	mov	r4, r7
 81117da:	9502      	str	r5, [sp, #8]
 81117dc:	46ab      	mov	fp, r5
 81117de:	784a      	ldrb	r2, [r1, #1]
 81117e0:	1c4b      	adds	r3, r1, #1
 81117e2:	9303      	str	r3, [sp, #12]
 81117e4:	b342      	cbz	r2, 8111838 <__hexnan+0x88>
 81117e6:	4610      	mov	r0, r2
 81117e8:	9105      	str	r1, [sp, #20]
 81117ea:	9204      	str	r2, [sp, #16]
 81117ec:	f7ff fd94 	bl	8111318 <__hexdig_fun>
 81117f0:	2800      	cmp	r0, #0
 81117f2:	d151      	bne.n	8111898 <__hexnan+0xe8>
 81117f4:	9a04      	ldr	r2, [sp, #16]
 81117f6:	9905      	ldr	r1, [sp, #20]
 81117f8:	2a20      	cmp	r2, #32
 81117fa:	d818      	bhi.n	811182e <__hexnan+0x7e>
 81117fc:	9b02      	ldr	r3, [sp, #8]
 81117fe:	459b      	cmp	fp, r3
 8111800:	dd13      	ble.n	811182a <__hexnan+0x7a>
 8111802:	454c      	cmp	r4, r9
 8111804:	d206      	bcs.n	8111814 <__hexnan+0x64>
 8111806:	2d07      	cmp	r5, #7
 8111808:	dc04      	bgt.n	8111814 <__hexnan+0x64>
 811180a:	462a      	mov	r2, r5
 811180c:	4649      	mov	r1, r9
 811180e:	4620      	mov	r0, r4
 8111810:	f7ff ffa8 	bl	8111764 <L_shift>
 8111814:	4544      	cmp	r4, r8
 8111816:	d952      	bls.n	81118be <__hexnan+0x10e>
 8111818:	2300      	movs	r3, #0
 811181a:	f1a4 0904 	sub.w	r9, r4, #4
 811181e:	f844 3c04 	str.w	r3, [r4, #-4]
 8111822:	f8cd b008 	str.w	fp, [sp, #8]
 8111826:	464c      	mov	r4, r9
 8111828:	461d      	mov	r5, r3
 811182a:	9903      	ldr	r1, [sp, #12]
 811182c:	e7d7      	b.n	81117de <__hexnan+0x2e>
 811182e:	2a29      	cmp	r2, #41	@ 0x29
 8111830:	d157      	bne.n	81118e2 <__hexnan+0x132>
 8111832:	3102      	adds	r1, #2
 8111834:	f8ca 1000 	str.w	r1, [sl]
 8111838:	f1bb 0f00 	cmp.w	fp, #0
 811183c:	d051      	beq.n	81118e2 <__hexnan+0x132>
 811183e:	454c      	cmp	r4, r9
 8111840:	d206      	bcs.n	8111850 <__hexnan+0xa0>
 8111842:	2d07      	cmp	r5, #7
 8111844:	dc04      	bgt.n	8111850 <__hexnan+0xa0>
 8111846:	462a      	mov	r2, r5
 8111848:	4649      	mov	r1, r9
 811184a:	4620      	mov	r0, r4
 811184c:	f7ff ff8a 	bl	8111764 <L_shift>
 8111850:	4544      	cmp	r4, r8
 8111852:	d936      	bls.n	81118c2 <__hexnan+0x112>
 8111854:	f1a8 0204 	sub.w	r2, r8, #4
 8111858:	4623      	mov	r3, r4
 811185a:	f853 1b04 	ldr.w	r1, [r3], #4
 811185e:	f842 1f04 	str.w	r1, [r2, #4]!
 8111862:	429f      	cmp	r7, r3
 8111864:	d2f9      	bcs.n	811185a <__hexnan+0xaa>
 8111866:	1b3b      	subs	r3, r7, r4
 8111868:	f023 0303 	bic.w	r3, r3, #3
 811186c:	3304      	adds	r3, #4
 811186e:	3401      	adds	r4, #1
 8111870:	3e03      	subs	r6, #3
 8111872:	42b4      	cmp	r4, r6
 8111874:	bf88      	it	hi
 8111876:	2304      	movhi	r3, #4
 8111878:	4443      	add	r3, r8
 811187a:	2200      	movs	r2, #0
 811187c:	f843 2b04 	str.w	r2, [r3], #4
 8111880:	429f      	cmp	r7, r3
 8111882:	d2fb      	bcs.n	811187c <__hexnan+0xcc>
 8111884:	683b      	ldr	r3, [r7, #0]
 8111886:	b91b      	cbnz	r3, 8111890 <__hexnan+0xe0>
 8111888:	4547      	cmp	r7, r8
 811188a:	d128      	bne.n	81118de <__hexnan+0x12e>
 811188c:	2301      	movs	r3, #1
 811188e:	603b      	str	r3, [r7, #0]
 8111890:	2005      	movs	r0, #5
 8111892:	b007      	add	sp, #28
 8111894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111898:	3501      	adds	r5, #1
 811189a:	2d08      	cmp	r5, #8
 811189c:	f10b 0b01 	add.w	fp, fp, #1
 81118a0:	dd06      	ble.n	81118b0 <__hexnan+0x100>
 81118a2:	4544      	cmp	r4, r8
 81118a4:	d9c1      	bls.n	811182a <__hexnan+0x7a>
 81118a6:	2300      	movs	r3, #0
 81118a8:	f844 3c04 	str.w	r3, [r4, #-4]
 81118ac:	2501      	movs	r5, #1
 81118ae:	3c04      	subs	r4, #4
 81118b0:	6822      	ldr	r2, [r4, #0]
 81118b2:	f000 000f 	and.w	r0, r0, #15
 81118b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 81118ba:	6020      	str	r0, [r4, #0]
 81118bc:	e7b5      	b.n	811182a <__hexnan+0x7a>
 81118be:	2508      	movs	r5, #8
 81118c0:	e7b3      	b.n	811182a <__hexnan+0x7a>
 81118c2:	9b01      	ldr	r3, [sp, #4]
 81118c4:	2b00      	cmp	r3, #0
 81118c6:	d0dd      	beq.n	8111884 <__hexnan+0xd4>
 81118c8:	f1c3 0320 	rsb	r3, r3, #32
 81118cc:	f04f 32ff 	mov.w	r2, #4294967295
 81118d0:	40da      	lsrs	r2, r3
 81118d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 81118d6:	4013      	ands	r3, r2
 81118d8:	f846 3c04 	str.w	r3, [r6, #-4]
 81118dc:	e7d2      	b.n	8111884 <__hexnan+0xd4>
 81118de:	3f04      	subs	r7, #4
 81118e0:	e7d0      	b.n	8111884 <__hexnan+0xd4>
 81118e2:	2004      	movs	r0, #4
 81118e4:	e7d5      	b.n	8111892 <__hexnan+0xe2>

081118e6 <__ascii_mbtowc>:
 81118e6:	b082      	sub	sp, #8
 81118e8:	b901      	cbnz	r1, 81118ec <__ascii_mbtowc+0x6>
 81118ea:	a901      	add	r1, sp, #4
 81118ec:	b142      	cbz	r2, 8111900 <__ascii_mbtowc+0x1a>
 81118ee:	b14b      	cbz	r3, 8111904 <__ascii_mbtowc+0x1e>
 81118f0:	7813      	ldrb	r3, [r2, #0]
 81118f2:	600b      	str	r3, [r1, #0]
 81118f4:	7812      	ldrb	r2, [r2, #0]
 81118f6:	1e10      	subs	r0, r2, #0
 81118f8:	bf18      	it	ne
 81118fa:	2001      	movne	r0, #1
 81118fc:	b002      	add	sp, #8
 81118fe:	4770      	bx	lr
 8111900:	4610      	mov	r0, r2
 8111902:	e7fb      	b.n	81118fc <__ascii_mbtowc+0x16>
 8111904:	f06f 0001 	mvn.w	r0, #1
 8111908:	e7f8      	b.n	81118fc <__ascii_mbtowc+0x16>
	...

0811190c <_Balloc>:
 811190c:	b570      	push	{r4, r5, r6, lr}
 811190e:	69c6      	ldr	r6, [r0, #28]
 8111910:	4604      	mov	r4, r0
 8111912:	460d      	mov	r5, r1
 8111914:	b976      	cbnz	r6, 8111934 <_Balloc+0x28>
 8111916:	2010      	movs	r0, #16
 8111918:	f7fc fd98 	bl	810e44c <malloc>
 811191c:	4602      	mov	r2, r0
 811191e:	61e0      	str	r0, [r4, #28]
 8111920:	b920      	cbnz	r0, 811192c <_Balloc+0x20>
 8111922:	4b18      	ldr	r3, [pc, #96]	@ (8111984 <_Balloc+0x78>)
 8111924:	4818      	ldr	r0, [pc, #96]	@ (8111988 <_Balloc+0x7c>)
 8111926:	216b      	movs	r1, #107	@ 0x6b
 8111928:	f001 f906 	bl	8112b38 <__assert_func>
 811192c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8111930:	6006      	str	r6, [r0, #0]
 8111932:	60c6      	str	r6, [r0, #12]
 8111934:	69e6      	ldr	r6, [r4, #28]
 8111936:	68f3      	ldr	r3, [r6, #12]
 8111938:	b183      	cbz	r3, 811195c <_Balloc+0x50>
 811193a:	69e3      	ldr	r3, [r4, #28]
 811193c:	68db      	ldr	r3, [r3, #12]
 811193e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8111942:	b9b8      	cbnz	r0, 8111974 <_Balloc+0x68>
 8111944:	2101      	movs	r1, #1
 8111946:	fa01 f605 	lsl.w	r6, r1, r5
 811194a:	1d72      	adds	r2, r6, #5
 811194c:	0092      	lsls	r2, r2, #2
 811194e:	4620      	mov	r0, r4
 8111950:	f001 f910 	bl	8112b74 <_calloc_r>
 8111954:	b160      	cbz	r0, 8111970 <_Balloc+0x64>
 8111956:	e9c0 5601 	strd	r5, r6, [r0, #4]
 811195a:	e00e      	b.n	811197a <_Balloc+0x6e>
 811195c:	2221      	movs	r2, #33	@ 0x21
 811195e:	2104      	movs	r1, #4
 8111960:	4620      	mov	r0, r4
 8111962:	f001 f907 	bl	8112b74 <_calloc_r>
 8111966:	69e3      	ldr	r3, [r4, #28]
 8111968:	60f0      	str	r0, [r6, #12]
 811196a:	68db      	ldr	r3, [r3, #12]
 811196c:	2b00      	cmp	r3, #0
 811196e:	d1e4      	bne.n	811193a <_Balloc+0x2e>
 8111970:	2000      	movs	r0, #0
 8111972:	bd70      	pop	{r4, r5, r6, pc}
 8111974:	6802      	ldr	r2, [r0, #0]
 8111976:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 811197a:	2300      	movs	r3, #0
 811197c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8111980:	e7f7      	b.n	8111972 <_Balloc+0x66>
 8111982:	bf00      	nop
 8111984:	0811302c 	.word	0x0811302c
 8111988:	0811310c 	.word	0x0811310c

0811198c <_Bfree>:
 811198c:	b570      	push	{r4, r5, r6, lr}
 811198e:	69c6      	ldr	r6, [r0, #28]
 8111990:	4605      	mov	r5, r0
 8111992:	460c      	mov	r4, r1
 8111994:	b976      	cbnz	r6, 81119b4 <_Bfree+0x28>
 8111996:	2010      	movs	r0, #16
 8111998:	f7fc fd58 	bl	810e44c <malloc>
 811199c:	4602      	mov	r2, r0
 811199e:	61e8      	str	r0, [r5, #28]
 81119a0:	b920      	cbnz	r0, 81119ac <_Bfree+0x20>
 81119a2:	4b09      	ldr	r3, [pc, #36]	@ (81119c8 <_Bfree+0x3c>)
 81119a4:	4809      	ldr	r0, [pc, #36]	@ (81119cc <_Bfree+0x40>)
 81119a6:	218f      	movs	r1, #143	@ 0x8f
 81119a8:	f001 f8c6 	bl	8112b38 <__assert_func>
 81119ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 81119b0:	6006      	str	r6, [r0, #0]
 81119b2:	60c6      	str	r6, [r0, #12]
 81119b4:	b13c      	cbz	r4, 81119c6 <_Bfree+0x3a>
 81119b6:	69eb      	ldr	r3, [r5, #28]
 81119b8:	6862      	ldr	r2, [r4, #4]
 81119ba:	68db      	ldr	r3, [r3, #12]
 81119bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 81119c0:	6021      	str	r1, [r4, #0]
 81119c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 81119c6:	bd70      	pop	{r4, r5, r6, pc}
 81119c8:	0811302c 	.word	0x0811302c
 81119cc:	0811310c 	.word	0x0811310c

081119d0 <__multadd>:
 81119d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81119d4:	690d      	ldr	r5, [r1, #16]
 81119d6:	4607      	mov	r7, r0
 81119d8:	460c      	mov	r4, r1
 81119da:	461e      	mov	r6, r3
 81119dc:	f101 0c14 	add.w	ip, r1, #20
 81119e0:	2000      	movs	r0, #0
 81119e2:	f8dc 3000 	ldr.w	r3, [ip]
 81119e6:	b299      	uxth	r1, r3
 81119e8:	fb02 6101 	mla	r1, r2, r1, r6
 81119ec:	0c1e      	lsrs	r6, r3, #16
 81119ee:	0c0b      	lsrs	r3, r1, #16
 81119f0:	fb02 3306 	mla	r3, r2, r6, r3
 81119f4:	b289      	uxth	r1, r1
 81119f6:	3001      	adds	r0, #1
 81119f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 81119fc:	4285      	cmp	r5, r0
 81119fe:	f84c 1b04 	str.w	r1, [ip], #4
 8111a02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8111a06:	dcec      	bgt.n	81119e2 <__multadd+0x12>
 8111a08:	b30e      	cbz	r6, 8111a4e <__multadd+0x7e>
 8111a0a:	68a3      	ldr	r3, [r4, #8]
 8111a0c:	42ab      	cmp	r3, r5
 8111a0e:	dc19      	bgt.n	8111a44 <__multadd+0x74>
 8111a10:	6861      	ldr	r1, [r4, #4]
 8111a12:	4638      	mov	r0, r7
 8111a14:	3101      	adds	r1, #1
 8111a16:	f7ff ff79 	bl	811190c <_Balloc>
 8111a1a:	4680      	mov	r8, r0
 8111a1c:	b928      	cbnz	r0, 8111a2a <__multadd+0x5a>
 8111a1e:	4602      	mov	r2, r0
 8111a20:	4b0c      	ldr	r3, [pc, #48]	@ (8111a54 <__multadd+0x84>)
 8111a22:	480d      	ldr	r0, [pc, #52]	@ (8111a58 <__multadd+0x88>)
 8111a24:	21ba      	movs	r1, #186	@ 0xba
 8111a26:	f001 f887 	bl	8112b38 <__assert_func>
 8111a2a:	6922      	ldr	r2, [r4, #16]
 8111a2c:	3202      	adds	r2, #2
 8111a2e:	f104 010c 	add.w	r1, r4, #12
 8111a32:	0092      	lsls	r2, r2, #2
 8111a34:	300c      	adds	r0, #12
 8111a36:	f7fe fd5b 	bl	81104f0 <memcpy>
 8111a3a:	4621      	mov	r1, r4
 8111a3c:	4638      	mov	r0, r7
 8111a3e:	f7ff ffa5 	bl	811198c <_Bfree>
 8111a42:	4644      	mov	r4, r8
 8111a44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8111a48:	3501      	adds	r5, #1
 8111a4a:	615e      	str	r6, [r3, #20]
 8111a4c:	6125      	str	r5, [r4, #16]
 8111a4e:	4620      	mov	r0, r4
 8111a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8111a54:	0811309b 	.word	0x0811309b
 8111a58:	0811310c 	.word	0x0811310c

08111a5c <__s2b>:
 8111a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8111a60:	460c      	mov	r4, r1
 8111a62:	4615      	mov	r5, r2
 8111a64:	461f      	mov	r7, r3
 8111a66:	2209      	movs	r2, #9
 8111a68:	3308      	adds	r3, #8
 8111a6a:	4606      	mov	r6, r0
 8111a6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8111a70:	2100      	movs	r1, #0
 8111a72:	2201      	movs	r2, #1
 8111a74:	429a      	cmp	r2, r3
 8111a76:	db09      	blt.n	8111a8c <__s2b+0x30>
 8111a78:	4630      	mov	r0, r6
 8111a7a:	f7ff ff47 	bl	811190c <_Balloc>
 8111a7e:	b940      	cbnz	r0, 8111a92 <__s2b+0x36>
 8111a80:	4602      	mov	r2, r0
 8111a82:	4b19      	ldr	r3, [pc, #100]	@ (8111ae8 <__s2b+0x8c>)
 8111a84:	4819      	ldr	r0, [pc, #100]	@ (8111aec <__s2b+0x90>)
 8111a86:	21d3      	movs	r1, #211	@ 0xd3
 8111a88:	f001 f856 	bl	8112b38 <__assert_func>
 8111a8c:	0052      	lsls	r2, r2, #1
 8111a8e:	3101      	adds	r1, #1
 8111a90:	e7f0      	b.n	8111a74 <__s2b+0x18>
 8111a92:	9b08      	ldr	r3, [sp, #32]
 8111a94:	6143      	str	r3, [r0, #20]
 8111a96:	2d09      	cmp	r5, #9
 8111a98:	f04f 0301 	mov.w	r3, #1
 8111a9c:	6103      	str	r3, [r0, #16]
 8111a9e:	dd16      	ble.n	8111ace <__s2b+0x72>
 8111aa0:	f104 0909 	add.w	r9, r4, #9
 8111aa4:	46c8      	mov	r8, r9
 8111aa6:	442c      	add	r4, r5
 8111aa8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8111aac:	4601      	mov	r1, r0
 8111aae:	3b30      	subs	r3, #48	@ 0x30
 8111ab0:	220a      	movs	r2, #10
 8111ab2:	4630      	mov	r0, r6
 8111ab4:	f7ff ff8c 	bl	81119d0 <__multadd>
 8111ab8:	45a0      	cmp	r8, r4
 8111aba:	d1f5      	bne.n	8111aa8 <__s2b+0x4c>
 8111abc:	f1a5 0408 	sub.w	r4, r5, #8
 8111ac0:	444c      	add	r4, r9
 8111ac2:	1b2d      	subs	r5, r5, r4
 8111ac4:	1963      	adds	r3, r4, r5
 8111ac6:	42bb      	cmp	r3, r7
 8111ac8:	db04      	blt.n	8111ad4 <__s2b+0x78>
 8111aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8111ace:	340a      	adds	r4, #10
 8111ad0:	2509      	movs	r5, #9
 8111ad2:	e7f6      	b.n	8111ac2 <__s2b+0x66>
 8111ad4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8111ad8:	4601      	mov	r1, r0
 8111ada:	3b30      	subs	r3, #48	@ 0x30
 8111adc:	220a      	movs	r2, #10
 8111ade:	4630      	mov	r0, r6
 8111ae0:	f7ff ff76 	bl	81119d0 <__multadd>
 8111ae4:	e7ee      	b.n	8111ac4 <__s2b+0x68>
 8111ae6:	bf00      	nop
 8111ae8:	0811309b 	.word	0x0811309b
 8111aec:	0811310c 	.word	0x0811310c

08111af0 <__hi0bits>:
 8111af0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8111af4:	4603      	mov	r3, r0
 8111af6:	bf36      	itet	cc
 8111af8:	0403      	lslcc	r3, r0, #16
 8111afa:	2000      	movcs	r0, #0
 8111afc:	2010      	movcc	r0, #16
 8111afe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8111b02:	bf3c      	itt	cc
 8111b04:	021b      	lslcc	r3, r3, #8
 8111b06:	3008      	addcc	r0, #8
 8111b08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8111b0c:	bf3c      	itt	cc
 8111b0e:	011b      	lslcc	r3, r3, #4
 8111b10:	3004      	addcc	r0, #4
 8111b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8111b16:	bf3c      	itt	cc
 8111b18:	009b      	lslcc	r3, r3, #2
 8111b1a:	3002      	addcc	r0, #2
 8111b1c:	2b00      	cmp	r3, #0
 8111b1e:	db05      	blt.n	8111b2c <__hi0bits+0x3c>
 8111b20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8111b24:	f100 0001 	add.w	r0, r0, #1
 8111b28:	bf08      	it	eq
 8111b2a:	2020      	moveq	r0, #32
 8111b2c:	4770      	bx	lr

08111b2e <__lo0bits>:
 8111b2e:	6803      	ldr	r3, [r0, #0]
 8111b30:	4602      	mov	r2, r0
 8111b32:	f013 0007 	ands.w	r0, r3, #7
 8111b36:	d00b      	beq.n	8111b50 <__lo0bits+0x22>
 8111b38:	07d9      	lsls	r1, r3, #31
 8111b3a:	d421      	bmi.n	8111b80 <__lo0bits+0x52>
 8111b3c:	0798      	lsls	r0, r3, #30
 8111b3e:	bf49      	itett	mi
 8111b40:	085b      	lsrmi	r3, r3, #1
 8111b42:	089b      	lsrpl	r3, r3, #2
 8111b44:	2001      	movmi	r0, #1
 8111b46:	6013      	strmi	r3, [r2, #0]
 8111b48:	bf5c      	itt	pl
 8111b4a:	6013      	strpl	r3, [r2, #0]
 8111b4c:	2002      	movpl	r0, #2
 8111b4e:	4770      	bx	lr
 8111b50:	b299      	uxth	r1, r3
 8111b52:	b909      	cbnz	r1, 8111b58 <__lo0bits+0x2a>
 8111b54:	0c1b      	lsrs	r3, r3, #16
 8111b56:	2010      	movs	r0, #16
 8111b58:	b2d9      	uxtb	r1, r3
 8111b5a:	b909      	cbnz	r1, 8111b60 <__lo0bits+0x32>
 8111b5c:	3008      	adds	r0, #8
 8111b5e:	0a1b      	lsrs	r3, r3, #8
 8111b60:	0719      	lsls	r1, r3, #28
 8111b62:	bf04      	itt	eq
 8111b64:	091b      	lsreq	r3, r3, #4
 8111b66:	3004      	addeq	r0, #4
 8111b68:	0799      	lsls	r1, r3, #30
 8111b6a:	bf04      	itt	eq
 8111b6c:	089b      	lsreq	r3, r3, #2
 8111b6e:	3002      	addeq	r0, #2
 8111b70:	07d9      	lsls	r1, r3, #31
 8111b72:	d403      	bmi.n	8111b7c <__lo0bits+0x4e>
 8111b74:	085b      	lsrs	r3, r3, #1
 8111b76:	f100 0001 	add.w	r0, r0, #1
 8111b7a:	d003      	beq.n	8111b84 <__lo0bits+0x56>
 8111b7c:	6013      	str	r3, [r2, #0]
 8111b7e:	4770      	bx	lr
 8111b80:	2000      	movs	r0, #0
 8111b82:	4770      	bx	lr
 8111b84:	2020      	movs	r0, #32
 8111b86:	4770      	bx	lr

08111b88 <__i2b>:
 8111b88:	b510      	push	{r4, lr}
 8111b8a:	460c      	mov	r4, r1
 8111b8c:	2101      	movs	r1, #1
 8111b8e:	f7ff febd 	bl	811190c <_Balloc>
 8111b92:	4602      	mov	r2, r0
 8111b94:	b928      	cbnz	r0, 8111ba2 <__i2b+0x1a>
 8111b96:	4b05      	ldr	r3, [pc, #20]	@ (8111bac <__i2b+0x24>)
 8111b98:	4805      	ldr	r0, [pc, #20]	@ (8111bb0 <__i2b+0x28>)
 8111b9a:	f240 1145 	movw	r1, #325	@ 0x145
 8111b9e:	f000 ffcb 	bl	8112b38 <__assert_func>
 8111ba2:	2301      	movs	r3, #1
 8111ba4:	6144      	str	r4, [r0, #20]
 8111ba6:	6103      	str	r3, [r0, #16]
 8111ba8:	bd10      	pop	{r4, pc}
 8111baa:	bf00      	nop
 8111bac:	0811309b 	.word	0x0811309b
 8111bb0:	0811310c 	.word	0x0811310c

08111bb4 <__multiply>:
 8111bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111bb8:	4617      	mov	r7, r2
 8111bba:	690a      	ldr	r2, [r1, #16]
 8111bbc:	693b      	ldr	r3, [r7, #16]
 8111bbe:	429a      	cmp	r2, r3
 8111bc0:	bfa8      	it	ge
 8111bc2:	463b      	movge	r3, r7
 8111bc4:	4689      	mov	r9, r1
 8111bc6:	bfa4      	itt	ge
 8111bc8:	460f      	movge	r7, r1
 8111bca:	4699      	movge	r9, r3
 8111bcc:	693d      	ldr	r5, [r7, #16]
 8111bce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8111bd2:	68bb      	ldr	r3, [r7, #8]
 8111bd4:	6879      	ldr	r1, [r7, #4]
 8111bd6:	eb05 060a 	add.w	r6, r5, sl
 8111bda:	42b3      	cmp	r3, r6
 8111bdc:	b085      	sub	sp, #20
 8111bde:	bfb8      	it	lt
 8111be0:	3101      	addlt	r1, #1
 8111be2:	f7ff fe93 	bl	811190c <_Balloc>
 8111be6:	b930      	cbnz	r0, 8111bf6 <__multiply+0x42>
 8111be8:	4602      	mov	r2, r0
 8111bea:	4b41      	ldr	r3, [pc, #260]	@ (8111cf0 <__multiply+0x13c>)
 8111bec:	4841      	ldr	r0, [pc, #260]	@ (8111cf4 <__multiply+0x140>)
 8111bee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8111bf2:	f000 ffa1 	bl	8112b38 <__assert_func>
 8111bf6:	f100 0414 	add.w	r4, r0, #20
 8111bfa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8111bfe:	4623      	mov	r3, r4
 8111c00:	2200      	movs	r2, #0
 8111c02:	4573      	cmp	r3, lr
 8111c04:	d320      	bcc.n	8111c48 <__multiply+0x94>
 8111c06:	f107 0814 	add.w	r8, r7, #20
 8111c0a:	f109 0114 	add.w	r1, r9, #20
 8111c0e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8111c12:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8111c16:	9302      	str	r3, [sp, #8]
 8111c18:	1beb      	subs	r3, r5, r7
 8111c1a:	3b15      	subs	r3, #21
 8111c1c:	f023 0303 	bic.w	r3, r3, #3
 8111c20:	3304      	adds	r3, #4
 8111c22:	3715      	adds	r7, #21
 8111c24:	42bd      	cmp	r5, r7
 8111c26:	bf38      	it	cc
 8111c28:	2304      	movcc	r3, #4
 8111c2a:	9301      	str	r3, [sp, #4]
 8111c2c:	9b02      	ldr	r3, [sp, #8]
 8111c2e:	9103      	str	r1, [sp, #12]
 8111c30:	428b      	cmp	r3, r1
 8111c32:	d80c      	bhi.n	8111c4e <__multiply+0x9a>
 8111c34:	2e00      	cmp	r6, #0
 8111c36:	dd03      	ble.n	8111c40 <__multiply+0x8c>
 8111c38:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8111c3c:	2b00      	cmp	r3, #0
 8111c3e:	d055      	beq.n	8111cec <__multiply+0x138>
 8111c40:	6106      	str	r6, [r0, #16]
 8111c42:	b005      	add	sp, #20
 8111c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111c48:	f843 2b04 	str.w	r2, [r3], #4
 8111c4c:	e7d9      	b.n	8111c02 <__multiply+0x4e>
 8111c4e:	f8b1 a000 	ldrh.w	sl, [r1]
 8111c52:	f1ba 0f00 	cmp.w	sl, #0
 8111c56:	d01f      	beq.n	8111c98 <__multiply+0xe4>
 8111c58:	46c4      	mov	ip, r8
 8111c5a:	46a1      	mov	r9, r4
 8111c5c:	2700      	movs	r7, #0
 8111c5e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8111c62:	f8d9 3000 	ldr.w	r3, [r9]
 8111c66:	fa1f fb82 	uxth.w	fp, r2
 8111c6a:	b29b      	uxth	r3, r3
 8111c6c:	fb0a 330b 	mla	r3, sl, fp, r3
 8111c70:	443b      	add	r3, r7
 8111c72:	f8d9 7000 	ldr.w	r7, [r9]
 8111c76:	0c12      	lsrs	r2, r2, #16
 8111c78:	0c3f      	lsrs	r7, r7, #16
 8111c7a:	fb0a 7202 	mla	r2, sl, r2, r7
 8111c7e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8111c82:	b29b      	uxth	r3, r3
 8111c84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8111c88:	4565      	cmp	r5, ip
 8111c8a:	f849 3b04 	str.w	r3, [r9], #4
 8111c8e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8111c92:	d8e4      	bhi.n	8111c5e <__multiply+0xaa>
 8111c94:	9b01      	ldr	r3, [sp, #4]
 8111c96:	50e7      	str	r7, [r4, r3]
 8111c98:	9b03      	ldr	r3, [sp, #12]
 8111c9a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8111c9e:	3104      	adds	r1, #4
 8111ca0:	f1b9 0f00 	cmp.w	r9, #0
 8111ca4:	d020      	beq.n	8111ce8 <__multiply+0x134>
 8111ca6:	6823      	ldr	r3, [r4, #0]
 8111ca8:	4647      	mov	r7, r8
 8111caa:	46a4      	mov	ip, r4
 8111cac:	f04f 0a00 	mov.w	sl, #0
 8111cb0:	f8b7 b000 	ldrh.w	fp, [r7]
 8111cb4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8111cb8:	fb09 220b 	mla	r2, r9, fp, r2
 8111cbc:	4452      	add	r2, sl
 8111cbe:	b29b      	uxth	r3, r3
 8111cc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8111cc4:	f84c 3b04 	str.w	r3, [ip], #4
 8111cc8:	f857 3b04 	ldr.w	r3, [r7], #4
 8111ccc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8111cd0:	f8bc 3000 	ldrh.w	r3, [ip]
 8111cd4:	fb09 330a 	mla	r3, r9, sl, r3
 8111cd8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8111cdc:	42bd      	cmp	r5, r7
 8111cde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8111ce2:	d8e5      	bhi.n	8111cb0 <__multiply+0xfc>
 8111ce4:	9a01      	ldr	r2, [sp, #4]
 8111ce6:	50a3      	str	r3, [r4, r2]
 8111ce8:	3404      	adds	r4, #4
 8111cea:	e79f      	b.n	8111c2c <__multiply+0x78>
 8111cec:	3e01      	subs	r6, #1
 8111cee:	e7a1      	b.n	8111c34 <__multiply+0x80>
 8111cf0:	0811309b 	.word	0x0811309b
 8111cf4:	0811310c 	.word	0x0811310c

08111cf8 <__pow5mult>:
 8111cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8111cfc:	4615      	mov	r5, r2
 8111cfe:	f012 0203 	ands.w	r2, r2, #3
 8111d02:	4607      	mov	r7, r0
 8111d04:	460e      	mov	r6, r1
 8111d06:	d007      	beq.n	8111d18 <__pow5mult+0x20>
 8111d08:	4c25      	ldr	r4, [pc, #148]	@ (8111da0 <__pow5mult+0xa8>)
 8111d0a:	3a01      	subs	r2, #1
 8111d0c:	2300      	movs	r3, #0
 8111d0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8111d12:	f7ff fe5d 	bl	81119d0 <__multadd>
 8111d16:	4606      	mov	r6, r0
 8111d18:	10ad      	asrs	r5, r5, #2
 8111d1a:	d03d      	beq.n	8111d98 <__pow5mult+0xa0>
 8111d1c:	69fc      	ldr	r4, [r7, #28]
 8111d1e:	b97c      	cbnz	r4, 8111d40 <__pow5mult+0x48>
 8111d20:	2010      	movs	r0, #16
 8111d22:	f7fc fb93 	bl	810e44c <malloc>
 8111d26:	4602      	mov	r2, r0
 8111d28:	61f8      	str	r0, [r7, #28]
 8111d2a:	b928      	cbnz	r0, 8111d38 <__pow5mult+0x40>
 8111d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8111da4 <__pow5mult+0xac>)
 8111d2e:	481e      	ldr	r0, [pc, #120]	@ (8111da8 <__pow5mult+0xb0>)
 8111d30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8111d34:	f000 ff00 	bl	8112b38 <__assert_func>
 8111d38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8111d3c:	6004      	str	r4, [r0, #0]
 8111d3e:	60c4      	str	r4, [r0, #12]
 8111d40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8111d44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8111d48:	b94c      	cbnz	r4, 8111d5e <__pow5mult+0x66>
 8111d4a:	f240 2171 	movw	r1, #625	@ 0x271
 8111d4e:	4638      	mov	r0, r7
 8111d50:	f7ff ff1a 	bl	8111b88 <__i2b>
 8111d54:	2300      	movs	r3, #0
 8111d56:	f8c8 0008 	str.w	r0, [r8, #8]
 8111d5a:	4604      	mov	r4, r0
 8111d5c:	6003      	str	r3, [r0, #0]
 8111d5e:	f04f 0900 	mov.w	r9, #0
 8111d62:	07eb      	lsls	r3, r5, #31
 8111d64:	d50a      	bpl.n	8111d7c <__pow5mult+0x84>
 8111d66:	4631      	mov	r1, r6
 8111d68:	4622      	mov	r2, r4
 8111d6a:	4638      	mov	r0, r7
 8111d6c:	f7ff ff22 	bl	8111bb4 <__multiply>
 8111d70:	4631      	mov	r1, r6
 8111d72:	4680      	mov	r8, r0
 8111d74:	4638      	mov	r0, r7
 8111d76:	f7ff fe09 	bl	811198c <_Bfree>
 8111d7a:	4646      	mov	r6, r8
 8111d7c:	106d      	asrs	r5, r5, #1
 8111d7e:	d00b      	beq.n	8111d98 <__pow5mult+0xa0>
 8111d80:	6820      	ldr	r0, [r4, #0]
 8111d82:	b938      	cbnz	r0, 8111d94 <__pow5mult+0x9c>
 8111d84:	4622      	mov	r2, r4
 8111d86:	4621      	mov	r1, r4
 8111d88:	4638      	mov	r0, r7
 8111d8a:	f7ff ff13 	bl	8111bb4 <__multiply>
 8111d8e:	6020      	str	r0, [r4, #0]
 8111d90:	f8c0 9000 	str.w	r9, [r0]
 8111d94:	4604      	mov	r4, r0
 8111d96:	e7e4      	b.n	8111d62 <__pow5mult+0x6a>
 8111d98:	4630      	mov	r0, r6
 8111d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8111d9e:	bf00      	nop
 8111da0:	08113208 	.word	0x08113208
 8111da4:	0811302c 	.word	0x0811302c
 8111da8:	0811310c 	.word	0x0811310c

08111dac <__lshift>:
 8111dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8111db0:	460c      	mov	r4, r1
 8111db2:	6849      	ldr	r1, [r1, #4]
 8111db4:	6923      	ldr	r3, [r4, #16]
 8111db6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8111dba:	68a3      	ldr	r3, [r4, #8]
 8111dbc:	4607      	mov	r7, r0
 8111dbe:	4691      	mov	r9, r2
 8111dc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8111dc4:	f108 0601 	add.w	r6, r8, #1
 8111dc8:	42b3      	cmp	r3, r6
 8111dca:	db0b      	blt.n	8111de4 <__lshift+0x38>
 8111dcc:	4638      	mov	r0, r7
 8111dce:	f7ff fd9d 	bl	811190c <_Balloc>
 8111dd2:	4605      	mov	r5, r0
 8111dd4:	b948      	cbnz	r0, 8111dea <__lshift+0x3e>
 8111dd6:	4602      	mov	r2, r0
 8111dd8:	4b28      	ldr	r3, [pc, #160]	@ (8111e7c <__lshift+0xd0>)
 8111dda:	4829      	ldr	r0, [pc, #164]	@ (8111e80 <__lshift+0xd4>)
 8111ddc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8111de0:	f000 feaa 	bl	8112b38 <__assert_func>
 8111de4:	3101      	adds	r1, #1
 8111de6:	005b      	lsls	r3, r3, #1
 8111de8:	e7ee      	b.n	8111dc8 <__lshift+0x1c>
 8111dea:	2300      	movs	r3, #0
 8111dec:	f100 0114 	add.w	r1, r0, #20
 8111df0:	f100 0210 	add.w	r2, r0, #16
 8111df4:	4618      	mov	r0, r3
 8111df6:	4553      	cmp	r3, sl
 8111df8:	db33      	blt.n	8111e62 <__lshift+0xb6>
 8111dfa:	6920      	ldr	r0, [r4, #16]
 8111dfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8111e00:	f104 0314 	add.w	r3, r4, #20
 8111e04:	f019 091f 	ands.w	r9, r9, #31
 8111e08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8111e0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8111e10:	d02b      	beq.n	8111e6a <__lshift+0xbe>
 8111e12:	f1c9 0e20 	rsb	lr, r9, #32
 8111e16:	468a      	mov	sl, r1
 8111e18:	2200      	movs	r2, #0
 8111e1a:	6818      	ldr	r0, [r3, #0]
 8111e1c:	fa00 f009 	lsl.w	r0, r0, r9
 8111e20:	4310      	orrs	r0, r2
 8111e22:	f84a 0b04 	str.w	r0, [sl], #4
 8111e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8111e2a:	459c      	cmp	ip, r3
 8111e2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8111e30:	d8f3      	bhi.n	8111e1a <__lshift+0x6e>
 8111e32:	ebac 0304 	sub.w	r3, ip, r4
 8111e36:	3b15      	subs	r3, #21
 8111e38:	f023 0303 	bic.w	r3, r3, #3
 8111e3c:	3304      	adds	r3, #4
 8111e3e:	f104 0015 	add.w	r0, r4, #21
 8111e42:	4560      	cmp	r0, ip
 8111e44:	bf88      	it	hi
 8111e46:	2304      	movhi	r3, #4
 8111e48:	50ca      	str	r2, [r1, r3]
 8111e4a:	b10a      	cbz	r2, 8111e50 <__lshift+0xa4>
 8111e4c:	f108 0602 	add.w	r6, r8, #2
 8111e50:	3e01      	subs	r6, #1
 8111e52:	4638      	mov	r0, r7
 8111e54:	612e      	str	r6, [r5, #16]
 8111e56:	4621      	mov	r1, r4
 8111e58:	f7ff fd98 	bl	811198c <_Bfree>
 8111e5c:	4628      	mov	r0, r5
 8111e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111e62:	f842 0f04 	str.w	r0, [r2, #4]!
 8111e66:	3301      	adds	r3, #1
 8111e68:	e7c5      	b.n	8111df6 <__lshift+0x4a>
 8111e6a:	3904      	subs	r1, #4
 8111e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8111e70:	f841 2f04 	str.w	r2, [r1, #4]!
 8111e74:	459c      	cmp	ip, r3
 8111e76:	d8f9      	bhi.n	8111e6c <__lshift+0xc0>
 8111e78:	e7ea      	b.n	8111e50 <__lshift+0xa4>
 8111e7a:	bf00      	nop
 8111e7c:	0811309b 	.word	0x0811309b
 8111e80:	0811310c 	.word	0x0811310c

08111e84 <__mcmp>:
 8111e84:	690a      	ldr	r2, [r1, #16]
 8111e86:	4603      	mov	r3, r0
 8111e88:	6900      	ldr	r0, [r0, #16]
 8111e8a:	1a80      	subs	r0, r0, r2
 8111e8c:	b530      	push	{r4, r5, lr}
 8111e8e:	d10e      	bne.n	8111eae <__mcmp+0x2a>
 8111e90:	3314      	adds	r3, #20
 8111e92:	3114      	adds	r1, #20
 8111e94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8111e98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8111e9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8111ea0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8111ea4:	4295      	cmp	r5, r2
 8111ea6:	d003      	beq.n	8111eb0 <__mcmp+0x2c>
 8111ea8:	d205      	bcs.n	8111eb6 <__mcmp+0x32>
 8111eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8111eae:	bd30      	pop	{r4, r5, pc}
 8111eb0:	42a3      	cmp	r3, r4
 8111eb2:	d3f3      	bcc.n	8111e9c <__mcmp+0x18>
 8111eb4:	e7fb      	b.n	8111eae <__mcmp+0x2a>
 8111eb6:	2001      	movs	r0, #1
 8111eb8:	e7f9      	b.n	8111eae <__mcmp+0x2a>
	...

08111ebc <__mdiff>:
 8111ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111ec0:	4689      	mov	r9, r1
 8111ec2:	4606      	mov	r6, r0
 8111ec4:	4611      	mov	r1, r2
 8111ec6:	4648      	mov	r0, r9
 8111ec8:	4614      	mov	r4, r2
 8111eca:	f7ff ffdb 	bl	8111e84 <__mcmp>
 8111ece:	1e05      	subs	r5, r0, #0
 8111ed0:	d112      	bne.n	8111ef8 <__mdiff+0x3c>
 8111ed2:	4629      	mov	r1, r5
 8111ed4:	4630      	mov	r0, r6
 8111ed6:	f7ff fd19 	bl	811190c <_Balloc>
 8111eda:	4602      	mov	r2, r0
 8111edc:	b928      	cbnz	r0, 8111eea <__mdiff+0x2e>
 8111ede:	4b3f      	ldr	r3, [pc, #252]	@ (8111fdc <__mdiff+0x120>)
 8111ee0:	f240 2137 	movw	r1, #567	@ 0x237
 8111ee4:	483e      	ldr	r0, [pc, #248]	@ (8111fe0 <__mdiff+0x124>)
 8111ee6:	f000 fe27 	bl	8112b38 <__assert_func>
 8111eea:	2301      	movs	r3, #1
 8111eec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8111ef0:	4610      	mov	r0, r2
 8111ef2:	b003      	add	sp, #12
 8111ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111ef8:	bfbc      	itt	lt
 8111efa:	464b      	movlt	r3, r9
 8111efc:	46a1      	movlt	r9, r4
 8111efe:	4630      	mov	r0, r6
 8111f00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8111f04:	bfba      	itte	lt
 8111f06:	461c      	movlt	r4, r3
 8111f08:	2501      	movlt	r5, #1
 8111f0a:	2500      	movge	r5, #0
 8111f0c:	f7ff fcfe 	bl	811190c <_Balloc>
 8111f10:	4602      	mov	r2, r0
 8111f12:	b918      	cbnz	r0, 8111f1c <__mdiff+0x60>
 8111f14:	4b31      	ldr	r3, [pc, #196]	@ (8111fdc <__mdiff+0x120>)
 8111f16:	f240 2145 	movw	r1, #581	@ 0x245
 8111f1a:	e7e3      	b.n	8111ee4 <__mdiff+0x28>
 8111f1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8111f20:	6926      	ldr	r6, [r4, #16]
 8111f22:	60c5      	str	r5, [r0, #12]
 8111f24:	f109 0310 	add.w	r3, r9, #16
 8111f28:	f109 0514 	add.w	r5, r9, #20
 8111f2c:	f104 0e14 	add.w	lr, r4, #20
 8111f30:	f100 0b14 	add.w	fp, r0, #20
 8111f34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8111f38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8111f3c:	9301      	str	r3, [sp, #4]
 8111f3e:	46d9      	mov	r9, fp
 8111f40:	f04f 0c00 	mov.w	ip, #0
 8111f44:	9b01      	ldr	r3, [sp, #4]
 8111f46:	f85e 0b04 	ldr.w	r0, [lr], #4
 8111f4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8111f4e:	9301      	str	r3, [sp, #4]
 8111f50:	fa1f f38a 	uxth.w	r3, sl
 8111f54:	4619      	mov	r1, r3
 8111f56:	b283      	uxth	r3, r0
 8111f58:	1acb      	subs	r3, r1, r3
 8111f5a:	0c00      	lsrs	r0, r0, #16
 8111f5c:	4463      	add	r3, ip
 8111f5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8111f62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8111f66:	b29b      	uxth	r3, r3
 8111f68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8111f6c:	4576      	cmp	r6, lr
 8111f6e:	f849 3b04 	str.w	r3, [r9], #4
 8111f72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8111f76:	d8e5      	bhi.n	8111f44 <__mdiff+0x88>
 8111f78:	1b33      	subs	r3, r6, r4
 8111f7a:	3b15      	subs	r3, #21
 8111f7c:	f023 0303 	bic.w	r3, r3, #3
 8111f80:	3415      	adds	r4, #21
 8111f82:	3304      	adds	r3, #4
 8111f84:	42a6      	cmp	r6, r4
 8111f86:	bf38      	it	cc
 8111f88:	2304      	movcc	r3, #4
 8111f8a:	441d      	add	r5, r3
 8111f8c:	445b      	add	r3, fp
 8111f8e:	461e      	mov	r6, r3
 8111f90:	462c      	mov	r4, r5
 8111f92:	4544      	cmp	r4, r8
 8111f94:	d30e      	bcc.n	8111fb4 <__mdiff+0xf8>
 8111f96:	f108 0103 	add.w	r1, r8, #3
 8111f9a:	1b49      	subs	r1, r1, r5
 8111f9c:	f021 0103 	bic.w	r1, r1, #3
 8111fa0:	3d03      	subs	r5, #3
 8111fa2:	45a8      	cmp	r8, r5
 8111fa4:	bf38      	it	cc
 8111fa6:	2100      	movcc	r1, #0
 8111fa8:	440b      	add	r3, r1
 8111faa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8111fae:	b191      	cbz	r1, 8111fd6 <__mdiff+0x11a>
 8111fb0:	6117      	str	r7, [r2, #16]
 8111fb2:	e79d      	b.n	8111ef0 <__mdiff+0x34>
 8111fb4:	f854 1b04 	ldr.w	r1, [r4], #4
 8111fb8:	46e6      	mov	lr, ip
 8111fba:	0c08      	lsrs	r0, r1, #16
 8111fbc:	fa1c fc81 	uxtah	ip, ip, r1
 8111fc0:	4471      	add	r1, lr
 8111fc2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8111fc6:	b289      	uxth	r1, r1
 8111fc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8111fcc:	f846 1b04 	str.w	r1, [r6], #4
 8111fd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8111fd4:	e7dd      	b.n	8111f92 <__mdiff+0xd6>
 8111fd6:	3f01      	subs	r7, #1
 8111fd8:	e7e7      	b.n	8111faa <__mdiff+0xee>
 8111fda:	bf00      	nop
 8111fdc:	0811309b 	.word	0x0811309b
 8111fe0:	0811310c 	.word	0x0811310c

08111fe4 <__ulp>:
 8111fe4:	b082      	sub	sp, #8
 8111fe6:	ed8d 0b00 	vstr	d0, [sp]
 8111fea:	9a01      	ldr	r2, [sp, #4]
 8111fec:	4b0f      	ldr	r3, [pc, #60]	@ (811202c <__ulp+0x48>)
 8111fee:	4013      	ands	r3, r2
 8111ff0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8111ff4:	2b00      	cmp	r3, #0
 8111ff6:	dc08      	bgt.n	811200a <__ulp+0x26>
 8111ff8:	425b      	negs	r3, r3
 8111ffa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8111ffe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8112002:	da04      	bge.n	811200e <__ulp+0x2a>
 8112004:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8112008:	4113      	asrs	r3, r2
 811200a:	2200      	movs	r2, #0
 811200c:	e008      	b.n	8112020 <__ulp+0x3c>
 811200e:	f1a2 0314 	sub.w	r3, r2, #20
 8112012:	2b1e      	cmp	r3, #30
 8112014:	bfda      	itte	le
 8112016:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 811201a:	40da      	lsrle	r2, r3
 811201c:	2201      	movgt	r2, #1
 811201e:	2300      	movs	r3, #0
 8112020:	4619      	mov	r1, r3
 8112022:	4610      	mov	r0, r2
 8112024:	ec41 0b10 	vmov	d0, r0, r1
 8112028:	b002      	add	sp, #8
 811202a:	4770      	bx	lr
 811202c:	7ff00000 	.word	0x7ff00000

08112030 <__b2d>:
 8112030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8112034:	6906      	ldr	r6, [r0, #16]
 8112036:	f100 0814 	add.w	r8, r0, #20
 811203a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 811203e:	1f37      	subs	r7, r6, #4
 8112040:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8112044:	4610      	mov	r0, r2
 8112046:	f7ff fd53 	bl	8111af0 <__hi0bits>
 811204a:	f1c0 0320 	rsb	r3, r0, #32
 811204e:	280a      	cmp	r0, #10
 8112050:	600b      	str	r3, [r1, #0]
 8112052:	491b      	ldr	r1, [pc, #108]	@ (81120c0 <__b2d+0x90>)
 8112054:	dc15      	bgt.n	8112082 <__b2d+0x52>
 8112056:	f1c0 0c0b 	rsb	ip, r0, #11
 811205a:	fa22 f30c 	lsr.w	r3, r2, ip
 811205e:	45b8      	cmp	r8, r7
 8112060:	ea43 0501 	orr.w	r5, r3, r1
 8112064:	bf34      	ite	cc
 8112066:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 811206a:	2300      	movcs	r3, #0
 811206c:	3015      	adds	r0, #21
 811206e:	fa02 f000 	lsl.w	r0, r2, r0
 8112072:	fa23 f30c 	lsr.w	r3, r3, ip
 8112076:	4303      	orrs	r3, r0
 8112078:	461c      	mov	r4, r3
 811207a:	ec45 4b10 	vmov	d0, r4, r5
 811207e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8112082:	45b8      	cmp	r8, r7
 8112084:	bf3a      	itte	cc
 8112086:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 811208a:	f1a6 0708 	subcc.w	r7, r6, #8
 811208e:	2300      	movcs	r3, #0
 8112090:	380b      	subs	r0, #11
 8112092:	d012      	beq.n	81120ba <__b2d+0x8a>
 8112094:	f1c0 0120 	rsb	r1, r0, #32
 8112098:	fa23 f401 	lsr.w	r4, r3, r1
 811209c:	4082      	lsls	r2, r0
 811209e:	4322      	orrs	r2, r4
 81120a0:	4547      	cmp	r7, r8
 81120a2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 81120a6:	bf8c      	ite	hi
 81120a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 81120ac:	2200      	movls	r2, #0
 81120ae:	4083      	lsls	r3, r0
 81120b0:	40ca      	lsrs	r2, r1
 81120b2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 81120b6:	4313      	orrs	r3, r2
 81120b8:	e7de      	b.n	8112078 <__b2d+0x48>
 81120ba:	ea42 0501 	orr.w	r5, r2, r1
 81120be:	e7db      	b.n	8112078 <__b2d+0x48>
 81120c0:	3ff00000 	.word	0x3ff00000

081120c4 <__d2b>:
 81120c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 81120c8:	460f      	mov	r7, r1
 81120ca:	2101      	movs	r1, #1
 81120cc:	ec59 8b10 	vmov	r8, r9, d0
 81120d0:	4616      	mov	r6, r2
 81120d2:	f7ff fc1b 	bl	811190c <_Balloc>
 81120d6:	4604      	mov	r4, r0
 81120d8:	b930      	cbnz	r0, 81120e8 <__d2b+0x24>
 81120da:	4602      	mov	r2, r0
 81120dc:	4b23      	ldr	r3, [pc, #140]	@ (811216c <__d2b+0xa8>)
 81120de:	4824      	ldr	r0, [pc, #144]	@ (8112170 <__d2b+0xac>)
 81120e0:	f240 310f 	movw	r1, #783	@ 0x30f
 81120e4:	f000 fd28 	bl	8112b38 <__assert_func>
 81120e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 81120ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 81120f0:	b10d      	cbz	r5, 81120f6 <__d2b+0x32>
 81120f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81120f6:	9301      	str	r3, [sp, #4]
 81120f8:	f1b8 0300 	subs.w	r3, r8, #0
 81120fc:	d023      	beq.n	8112146 <__d2b+0x82>
 81120fe:	4668      	mov	r0, sp
 8112100:	9300      	str	r3, [sp, #0]
 8112102:	f7ff fd14 	bl	8111b2e <__lo0bits>
 8112106:	e9dd 1200 	ldrd	r1, r2, [sp]
 811210a:	b1d0      	cbz	r0, 8112142 <__d2b+0x7e>
 811210c:	f1c0 0320 	rsb	r3, r0, #32
 8112110:	fa02 f303 	lsl.w	r3, r2, r3
 8112114:	430b      	orrs	r3, r1
 8112116:	40c2      	lsrs	r2, r0
 8112118:	6163      	str	r3, [r4, #20]
 811211a:	9201      	str	r2, [sp, #4]
 811211c:	9b01      	ldr	r3, [sp, #4]
 811211e:	61a3      	str	r3, [r4, #24]
 8112120:	2b00      	cmp	r3, #0
 8112122:	bf0c      	ite	eq
 8112124:	2201      	moveq	r2, #1
 8112126:	2202      	movne	r2, #2
 8112128:	6122      	str	r2, [r4, #16]
 811212a:	b1a5      	cbz	r5, 8112156 <__d2b+0x92>
 811212c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8112130:	4405      	add	r5, r0
 8112132:	603d      	str	r5, [r7, #0]
 8112134:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8112138:	6030      	str	r0, [r6, #0]
 811213a:	4620      	mov	r0, r4
 811213c:	b003      	add	sp, #12
 811213e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8112142:	6161      	str	r1, [r4, #20]
 8112144:	e7ea      	b.n	811211c <__d2b+0x58>
 8112146:	a801      	add	r0, sp, #4
 8112148:	f7ff fcf1 	bl	8111b2e <__lo0bits>
 811214c:	9b01      	ldr	r3, [sp, #4]
 811214e:	6163      	str	r3, [r4, #20]
 8112150:	3020      	adds	r0, #32
 8112152:	2201      	movs	r2, #1
 8112154:	e7e8      	b.n	8112128 <__d2b+0x64>
 8112156:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 811215a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 811215e:	6038      	str	r0, [r7, #0]
 8112160:	6918      	ldr	r0, [r3, #16]
 8112162:	f7ff fcc5 	bl	8111af0 <__hi0bits>
 8112166:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 811216a:	e7e5      	b.n	8112138 <__d2b+0x74>
 811216c:	0811309b 	.word	0x0811309b
 8112170:	0811310c 	.word	0x0811310c

08112174 <__ratio>:
 8112174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112178:	b085      	sub	sp, #20
 811217a:	e9cd 1000 	strd	r1, r0, [sp]
 811217e:	a902      	add	r1, sp, #8
 8112180:	f7ff ff56 	bl	8112030 <__b2d>
 8112184:	9800      	ldr	r0, [sp, #0]
 8112186:	a903      	add	r1, sp, #12
 8112188:	ec55 4b10 	vmov	r4, r5, d0
 811218c:	f7ff ff50 	bl	8112030 <__b2d>
 8112190:	9b01      	ldr	r3, [sp, #4]
 8112192:	6919      	ldr	r1, [r3, #16]
 8112194:	9b00      	ldr	r3, [sp, #0]
 8112196:	691b      	ldr	r3, [r3, #16]
 8112198:	1ac9      	subs	r1, r1, r3
 811219a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 811219e:	1a9b      	subs	r3, r3, r2
 81121a0:	ec5b ab10 	vmov	sl, fp, d0
 81121a4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 81121a8:	2b00      	cmp	r3, #0
 81121aa:	bfce      	itee	gt
 81121ac:	462a      	movgt	r2, r5
 81121ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 81121b2:	465a      	movle	r2, fp
 81121b4:	462f      	mov	r7, r5
 81121b6:	46d9      	mov	r9, fp
 81121b8:	bfcc      	ite	gt
 81121ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 81121be:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 81121c2:	464b      	mov	r3, r9
 81121c4:	4652      	mov	r2, sl
 81121c6:	4620      	mov	r0, r4
 81121c8:	4639      	mov	r1, r7
 81121ca:	f7ee fbc7 	bl	810095c <__aeabi_ddiv>
 81121ce:	ec41 0b10 	vmov	d0, r0, r1
 81121d2:	b005      	add	sp, #20
 81121d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

081121d8 <__copybits>:
 81121d8:	3901      	subs	r1, #1
 81121da:	b570      	push	{r4, r5, r6, lr}
 81121dc:	1149      	asrs	r1, r1, #5
 81121de:	6914      	ldr	r4, [r2, #16]
 81121e0:	3101      	adds	r1, #1
 81121e2:	f102 0314 	add.w	r3, r2, #20
 81121e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 81121ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 81121ee:	1f05      	subs	r5, r0, #4
 81121f0:	42a3      	cmp	r3, r4
 81121f2:	d30c      	bcc.n	811220e <__copybits+0x36>
 81121f4:	1aa3      	subs	r3, r4, r2
 81121f6:	3b11      	subs	r3, #17
 81121f8:	f023 0303 	bic.w	r3, r3, #3
 81121fc:	3211      	adds	r2, #17
 81121fe:	42a2      	cmp	r2, r4
 8112200:	bf88      	it	hi
 8112202:	2300      	movhi	r3, #0
 8112204:	4418      	add	r0, r3
 8112206:	2300      	movs	r3, #0
 8112208:	4288      	cmp	r0, r1
 811220a:	d305      	bcc.n	8112218 <__copybits+0x40>
 811220c:	bd70      	pop	{r4, r5, r6, pc}
 811220e:	f853 6b04 	ldr.w	r6, [r3], #4
 8112212:	f845 6f04 	str.w	r6, [r5, #4]!
 8112216:	e7eb      	b.n	81121f0 <__copybits+0x18>
 8112218:	f840 3b04 	str.w	r3, [r0], #4
 811221c:	e7f4      	b.n	8112208 <__copybits+0x30>

0811221e <__any_on>:
 811221e:	f100 0214 	add.w	r2, r0, #20
 8112222:	6900      	ldr	r0, [r0, #16]
 8112224:	114b      	asrs	r3, r1, #5
 8112226:	4298      	cmp	r0, r3
 8112228:	b510      	push	{r4, lr}
 811222a:	db11      	blt.n	8112250 <__any_on+0x32>
 811222c:	dd0a      	ble.n	8112244 <__any_on+0x26>
 811222e:	f011 011f 	ands.w	r1, r1, #31
 8112232:	d007      	beq.n	8112244 <__any_on+0x26>
 8112234:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8112238:	fa24 f001 	lsr.w	r0, r4, r1
 811223c:	fa00 f101 	lsl.w	r1, r0, r1
 8112240:	428c      	cmp	r4, r1
 8112242:	d10b      	bne.n	811225c <__any_on+0x3e>
 8112244:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8112248:	4293      	cmp	r3, r2
 811224a:	d803      	bhi.n	8112254 <__any_on+0x36>
 811224c:	2000      	movs	r0, #0
 811224e:	bd10      	pop	{r4, pc}
 8112250:	4603      	mov	r3, r0
 8112252:	e7f7      	b.n	8112244 <__any_on+0x26>
 8112254:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8112258:	2900      	cmp	r1, #0
 811225a:	d0f5      	beq.n	8112248 <__any_on+0x2a>
 811225c:	2001      	movs	r0, #1
 811225e:	e7f6      	b.n	811224e <__any_on+0x30>

08112260 <_strtol_l.isra.0>:
 8112260:	2b24      	cmp	r3, #36	@ 0x24
 8112262:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8112266:	4686      	mov	lr, r0
 8112268:	4690      	mov	r8, r2
 811226a:	d801      	bhi.n	8112270 <_strtol_l.isra.0+0x10>
 811226c:	2b01      	cmp	r3, #1
 811226e:	d106      	bne.n	811227e <_strtol_l.isra.0+0x1e>
 8112270:	f7fe f914 	bl	811049c <__errno>
 8112274:	2316      	movs	r3, #22
 8112276:	6003      	str	r3, [r0, #0]
 8112278:	2000      	movs	r0, #0
 811227a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811227e:	4834      	ldr	r0, [pc, #208]	@ (8112350 <_strtol_l.isra.0+0xf0>)
 8112280:	460d      	mov	r5, r1
 8112282:	462a      	mov	r2, r5
 8112284:	f815 4b01 	ldrb.w	r4, [r5], #1
 8112288:	5d06      	ldrb	r6, [r0, r4]
 811228a:	f016 0608 	ands.w	r6, r6, #8
 811228e:	d1f8      	bne.n	8112282 <_strtol_l.isra.0+0x22>
 8112290:	2c2d      	cmp	r4, #45	@ 0x2d
 8112292:	d110      	bne.n	81122b6 <_strtol_l.isra.0+0x56>
 8112294:	782c      	ldrb	r4, [r5, #0]
 8112296:	2601      	movs	r6, #1
 8112298:	1c95      	adds	r5, r2, #2
 811229a:	f033 0210 	bics.w	r2, r3, #16
 811229e:	d115      	bne.n	81122cc <_strtol_l.isra.0+0x6c>
 81122a0:	2c30      	cmp	r4, #48	@ 0x30
 81122a2:	d10d      	bne.n	81122c0 <_strtol_l.isra.0+0x60>
 81122a4:	782a      	ldrb	r2, [r5, #0]
 81122a6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 81122aa:	2a58      	cmp	r2, #88	@ 0x58
 81122ac:	d108      	bne.n	81122c0 <_strtol_l.isra.0+0x60>
 81122ae:	786c      	ldrb	r4, [r5, #1]
 81122b0:	3502      	adds	r5, #2
 81122b2:	2310      	movs	r3, #16
 81122b4:	e00a      	b.n	81122cc <_strtol_l.isra.0+0x6c>
 81122b6:	2c2b      	cmp	r4, #43	@ 0x2b
 81122b8:	bf04      	itt	eq
 81122ba:	782c      	ldrbeq	r4, [r5, #0]
 81122bc:	1c95      	addeq	r5, r2, #2
 81122be:	e7ec      	b.n	811229a <_strtol_l.isra.0+0x3a>
 81122c0:	2b00      	cmp	r3, #0
 81122c2:	d1f6      	bne.n	81122b2 <_strtol_l.isra.0+0x52>
 81122c4:	2c30      	cmp	r4, #48	@ 0x30
 81122c6:	bf14      	ite	ne
 81122c8:	230a      	movne	r3, #10
 81122ca:	2308      	moveq	r3, #8
 81122cc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 81122d0:	f10c 3cff 	add.w	ip, ip, #4294967295
 81122d4:	2200      	movs	r2, #0
 81122d6:	fbbc f9f3 	udiv	r9, ip, r3
 81122da:	4610      	mov	r0, r2
 81122dc:	fb03 ca19 	mls	sl, r3, r9, ip
 81122e0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 81122e4:	2f09      	cmp	r7, #9
 81122e6:	d80f      	bhi.n	8112308 <_strtol_l.isra.0+0xa8>
 81122e8:	463c      	mov	r4, r7
 81122ea:	42a3      	cmp	r3, r4
 81122ec:	dd1b      	ble.n	8112326 <_strtol_l.isra.0+0xc6>
 81122ee:	1c57      	adds	r7, r2, #1
 81122f0:	d007      	beq.n	8112302 <_strtol_l.isra.0+0xa2>
 81122f2:	4581      	cmp	r9, r0
 81122f4:	d314      	bcc.n	8112320 <_strtol_l.isra.0+0xc0>
 81122f6:	d101      	bne.n	81122fc <_strtol_l.isra.0+0x9c>
 81122f8:	45a2      	cmp	sl, r4
 81122fa:	db11      	blt.n	8112320 <_strtol_l.isra.0+0xc0>
 81122fc:	fb00 4003 	mla	r0, r0, r3, r4
 8112300:	2201      	movs	r2, #1
 8112302:	f815 4b01 	ldrb.w	r4, [r5], #1
 8112306:	e7eb      	b.n	81122e0 <_strtol_l.isra.0+0x80>
 8112308:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 811230c:	2f19      	cmp	r7, #25
 811230e:	d801      	bhi.n	8112314 <_strtol_l.isra.0+0xb4>
 8112310:	3c37      	subs	r4, #55	@ 0x37
 8112312:	e7ea      	b.n	81122ea <_strtol_l.isra.0+0x8a>
 8112314:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8112318:	2f19      	cmp	r7, #25
 811231a:	d804      	bhi.n	8112326 <_strtol_l.isra.0+0xc6>
 811231c:	3c57      	subs	r4, #87	@ 0x57
 811231e:	e7e4      	b.n	81122ea <_strtol_l.isra.0+0x8a>
 8112320:	f04f 32ff 	mov.w	r2, #4294967295
 8112324:	e7ed      	b.n	8112302 <_strtol_l.isra.0+0xa2>
 8112326:	1c53      	adds	r3, r2, #1
 8112328:	d108      	bne.n	811233c <_strtol_l.isra.0+0xdc>
 811232a:	2322      	movs	r3, #34	@ 0x22
 811232c:	f8ce 3000 	str.w	r3, [lr]
 8112330:	4660      	mov	r0, ip
 8112332:	f1b8 0f00 	cmp.w	r8, #0
 8112336:	d0a0      	beq.n	811227a <_strtol_l.isra.0+0x1a>
 8112338:	1e69      	subs	r1, r5, #1
 811233a:	e006      	b.n	811234a <_strtol_l.isra.0+0xea>
 811233c:	b106      	cbz	r6, 8112340 <_strtol_l.isra.0+0xe0>
 811233e:	4240      	negs	r0, r0
 8112340:	f1b8 0f00 	cmp.w	r8, #0
 8112344:	d099      	beq.n	811227a <_strtol_l.isra.0+0x1a>
 8112346:	2a00      	cmp	r2, #0
 8112348:	d1f6      	bne.n	8112338 <_strtol_l.isra.0+0xd8>
 811234a:	f8c8 1000 	str.w	r1, [r8]
 811234e:	e794      	b.n	811227a <_strtol_l.isra.0+0x1a>
 8112350:	08113309 	.word	0x08113309

08112354 <_strtol_r>:
 8112354:	f7ff bf84 	b.w	8112260 <_strtol_l.isra.0>

08112358 <__ascii_wctomb>:
 8112358:	4603      	mov	r3, r0
 811235a:	4608      	mov	r0, r1
 811235c:	b141      	cbz	r1, 8112370 <__ascii_wctomb+0x18>
 811235e:	2aff      	cmp	r2, #255	@ 0xff
 8112360:	d904      	bls.n	811236c <__ascii_wctomb+0x14>
 8112362:	228a      	movs	r2, #138	@ 0x8a
 8112364:	601a      	str	r2, [r3, #0]
 8112366:	f04f 30ff 	mov.w	r0, #4294967295
 811236a:	4770      	bx	lr
 811236c:	700a      	strb	r2, [r1, #0]
 811236e:	2001      	movs	r0, #1
 8112370:	4770      	bx	lr

08112372 <__ssputs_r>:
 8112372:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8112376:	688e      	ldr	r6, [r1, #8]
 8112378:	461f      	mov	r7, r3
 811237a:	42be      	cmp	r6, r7
 811237c:	680b      	ldr	r3, [r1, #0]
 811237e:	4682      	mov	sl, r0
 8112380:	460c      	mov	r4, r1
 8112382:	4690      	mov	r8, r2
 8112384:	d82d      	bhi.n	81123e2 <__ssputs_r+0x70>
 8112386:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 811238a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 811238e:	d026      	beq.n	81123de <__ssputs_r+0x6c>
 8112390:	6965      	ldr	r5, [r4, #20]
 8112392:	6909      	ldr	r1, [r1, #16]
 8112394:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8112398:	eba3 0901 	sub.w	r9, r3, r1
 811239c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 81123a0:	1c7b      	adds	r3, r7, #1
 81123a2:	444b      	add	r3, r9
 81123a4:	106d      	asrs	r5, r5, #1
 81123a6:	429d      	cmp	r5, r3
 81123a8:	bf38      	it	cc
 81123aa:	461d      	movcc	r5, r3
 81123ac:	0553      	lsls	r3, r2, #21
 81123ae:	d527      	bpl.n	8112400 <__ssputs_r+0x8e>
 81123b0:	4629      	mov	r1, r5
 81123b2:	f7fc f875 	bl	810e4a0 <_malloc_r>
 81123b6:	4606      	mov	r6, r0
 81123b8:	b360      	cbz	r0, 8112414 <__ssputs_r+0xa2>
 81123ba:	6921      	ldr	r1, [r4, #16]
 81123bc:	464a      	mov	r2, r9
 81123be:	f7fe f897 	bl	81104f0 <memcpy>
 81123c2:	89a3      	ldrh	r3, [r4, #12]
 81123c4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 81123c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81123cc:	81a3      	strh	r3, [r4, #12]
 81123ce:	6126      	str	r6, [r4, #16]
 81123d0:	6165      	str	r5, [r4, #20]
 81123d2:	444e      	add	r6, r9
 81123d4:	eba5 0509 	sub.w	r5, r5, r9
 81123d8:	6026      	str	r6, [r4, #0]
 81123da:	60a5      	str	r5, [r4, #8]
 81123dc:	463e      	mov	r6, r7
 81123de:	42be      	cmp	r6, r7
 81123e0:	d900      	bls.n	81123e4 <__ssputs_r+0x72>
 81123e2:	463e      	mov	r6, r7
 81123e4:	6820      	ldr	r0, [r4, #0]
 81123e6:	4632      	mov	r2, r6
 81123e8:	4641      	mov	r1, r8
 81123ea:	f000 fb69 	bl	8112ac0 <memmove>
 81123ee:	68a3      	ldr	r3, [r4, #8]
 81123f0:	1b9b      	subs	r3, r3, r6
 81123f2:	60a3      	str	r3, [r4, #8]
 81123f4:	6823      	ldr	r3, [r4, #0]
 81123f6:	4433      	add	r3, r6
 81123f8:	6023      	str	r3, [r4, #0]
 81123fa:	2000      	movs	r0, #0
 81123fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8112400:	462a      	mov	r2, r5
 8112402:	f000 fbcb 	bl	8112b9c <_realloc_r>
 8112406:	4606      	mov	r6, r0
 8112408:	2800      	cmp	r0, #0
 811240a:	d1e0      	bne.n	81123ce <__ssputs_r+0x5c>
 811240c:	6921      	ldr	r1, [r4, #16]
 811240e:	4650      	mov	r0, sl
 8112410:	f7fe fee6 	bl	81111e0 <_free_r>
 8112414:	230c      	movs	r3, #12
 8112416:	f8ca 3000 	str.w	r3, [sl]
 811241a:	89a3      	ldrh	r3, [r4, #12]
 811241c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8112420:	81a3      	strh	r3, [r4, #12]
 8112422:	f04f 30ff 	mov.w	r0, #4294967295
 8112426:	e7e9      	b.n	81123fc <__ssputs_r+0x8a>

08112428 <_svfiprintf_r>:
 8112428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811242c:	4698      	mov	r8, r3
 811242e:	898b      	ldrh	r3, [r1, #12]
 8112430:	061b      	lsls	r3, r3, #24
 8112432:	b09d      	sub	sp, #116	@ 0x74
 8112434:	4607      	mov	r7, r0
 8112436:	460d      	mov	r5, r1
 8112438:	4614      	mov	r4, r2
 811243a:	d510      	bpl.n	811245e <_svfiprintf_r+0x36>
 811243c:	690b      	ldr	r3, [r1, #16]
 811243e:	b973      	cbnz	r3, 811245e <_svfiprintf_r+0x36>
 8112440:	2140      	movs	r1, #64	@ 0x40
 8112442:	f7fc f82d 	bl	810e4a0 <_malloc_r>
 8112446:	6028      	str	r0, [r5, #0]
 8112448:	6128      	str	r0, [r5, #16]
 811244a:	b930      	cbnz	r0, 811245a <_svfiprintf_r+0x32>
 811244c:	230c      	movs	r3, #12
 811244e:	603b      	str	r3, [r7, #0]
 8112450:	f04f 30ff 	mov.w	r0, #4294967295
 8112454:	b01d      	add	sp, #116	@ 0x74
 8112456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811245a:	2340      	movs	r3, #64	@ 0x40
 811245c:	616b      	str	r3, [r5, #20]
 811245e:	2300      	movs	r3, #0
 8112460:	9309      	str	r3, [sp, #36]	@ 0x24
 8112462:	2320      	movs	r3, #32
 8112464:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8112468:	f8cd 800c 	str.w	r8, [sp, #12]
 811246c:	2330      	movs	r3, #48	@ 0x30
 811246e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 811260c <_svfiprintf_r+0x1e4>
 8112472:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8112476:	f04f 0901 	mov.w	r9, #1
 811247a:	4623      	mov	r3, r4
 811247c:	469a      	mov	sl, r3
 811247e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8112482:	b10a      	cbz	r2, 8112488 <_svfiprintf_r+0x60>
 8112484:	2a25      	cmp	r2, #37	@ 0x25
 8112486:	d1f9      	bne.n	811247c <_svfiprintf_r+0x54>
 8112488:	ebba 0b04 	subs.w	fp, sl, r4
 811248c:	d00b      	beq.n	81124a6 <_svfiprintf_r+0x7e>
 811248e:	465b      	mov	r3, fp
 8112490:	4622      	mov	r2, r4
 8112492:	4629      	mov	r1, r5
 8112494:	4638      	mov	r0, r7
 8112496:	f7ff ff6c 	bl	8112372 <__ssputs_r>
 811249a:	3001      	adds	r0, #1
 811249c:	f000 80a7 	beq.w	81125ee <_svfiprintf_r+0x1c6>
 81124a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81124a2:	445a      	add	r2, fp
 81124a4:	9209      	str	r2, [sp, #36]	@ 0x24
 81124a6:	f89a 3000 	ldrb.w	r3, [sl]
 81124aa:	2b00      	cmp	r3, #0
 81124ac:	f000 809f 	beq.w	81125ee <_svfiprintf_r+0x1c6>
 81124b0:	2300      	movs	r3, #0
 81124b2:	f04f 32ff 	mov.w	r2, #4294967295
 81124b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81124ba:	f10a 0a01 	add.w	sl, sl, #1
 81124be:	9304      	str	r3, [sp, #16]
 81124c0:	9307      	str	r3, [sp, #28]
 81124c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 81124c6:	931a      	str	r3, [sp, #104]	@ 0x68
 81124c8:	4654      	mov	r4, sl
 81124ca:	2205      	movs	r2, #5
 81124cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 81124d0:	484e      	ldr	r0, [pc, #312]	@ (811260c <_svfiprintf_r+0x1e4>)
 81124d2:	f7ed ff05 	bl	81002e0 <memchr>
 81124d6:	9a04      	ldr	r2, [sp, #16]
 81124d8:	b9d8      	cbnz	r0, 8112512 <_svfiprintf_r+0xea>
 81124da:	06d0      	lsls	r0, r2, #27
 81124dc:	bf44      	itt	mi
 81124de:	2320      	movmi	r3, #32
 81124e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81124e4:	0711      	lsls	r1, r2, #28
 81124e6:	bf44      	itt	mi
 81124e8:	232b      	movmi	r3, #43	@ 0x2b
 81124ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81124ee:	f89a 3000 	ldrb.w	r3, [sl]
 81124f2:	2b2a      	cmp	r3, #42	@ 0x2a
 81124f4:	d015      	beq.n	8112522 <_svfiprintf_r+0xfa>
 81124f6:	9a07      	ldr	r2, [sp, #28]
 81124f8:	4654      	mov	r4, sl
 81124fa:	2000      	movs	r0, #0
 81124fc:	f04f 0c0a 	mov.w	ip, #10
 8112500:	4621      	mov	r1, r4
 8112502:	f811 3b01 	ldrb.w	r3, [r1], #1
 8112506:	3b30      	subs	r3, #48	@ 0x30
 8112508:	2b09      	cmp	r3, #9
 811250a:	d94b      	bls.n	81125a4 <_svfiprintf_r+0x17c>
 811250c:	b1b0      	cbz	r0, 811253c <_svfiprintf_r+0x114>
 811250e:	9207      	str	r2, [sp, #28]
 8112510:	e014      	b.n	811253c <_svfiprintf_r+0x114>
 8112512:	eba0 0308 	sub.w	r3, r0, r8
 8112516:	fa09 f303 	lsl.w	r3, r9, r3
 811251a:	4313      	orrs	r3, r2
 811251c:	9304      	str	r3, [sp, #16]
 811251e:	46a2      	mov	sl, r4
 8112520:	e7d2      	b.n	81124c8 <_svfiprintf_r+0xa0>
 8112522:	9b03      	ldr	r3, [sp, #12]
 8112524:	1d19      	adds	r1, r3, #4
 8112526:	681b      	ldr	r3, [r3, #0]
 8112528:	9103      	str	r1, [sp, #12]
 811252a:	2b00      	cmp	r3, #0
 811252c:	bfbb      	ittet	lt
 811252e:	425b      	neglt	r3, r3
 8112530:	f042 0202 	orrlt.w	r2, r2, #2
 8112534:	9307      	strge	r3, [sp, #28]
 8112536:	9307      	strlt	r3, [sp, #28]
 8112538:	bfb8      	it	lt
 811253a:	9204      	strlt	r2, [sp, #16]
 811253c:	7823      	ldrb	r3, [r4, #0]
 811253e:	2b2e      	cmp	r3, #46	@ 0x2e
 8112540:	d10a      	bne.n	8112558 <_svfiprintf_r+0x130>
 8112542:	7863      	ldrb	r3, [r4, #1]
 8112544:	2b2a      	cmp	r3, #42	@ 0x2a
 8112546:	d132      	bne.n	81125ae <_svfiprintf_r+0x186>
 8112548:	9b03      	ldr	r3, [sp, #12]
 811254a:	1d1a      	adds	r2, r3, #4
 811254c:	681b      	ldr	r3, [r3, #0]
 811254e:	9203      	str	r2, [sp, #12]
 8112550:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8112554:	3402      	adds	r4, #2
 8112556:	9305      	str	r3, [sp, #20]
 8112558:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 811261c <_svfiprintf_r+0x1f4>
 811255c:	7821      	ldrb	r1, [r4, #0]
 811255e:	2203      	movs	r2, #3
 8112560:	4650      	mov	r0, sl
 8112562:	f7ed febd 	bl	81002e0 <memchr>
 8112566:	b138      	cbz	r0, 8112578 <_svfiprintf_r+0x150>
 8112568:	9b04      	ldr	r3, [sp, #16]
 811256a:	eba0 000a 	sub.w	r0, r0, sl
 811256e:	2240      	movs	r2, #64	@ 0x40
 8112570:	4082      	lsls	r2, r0
 8112572:	4313      	orrs	r3, r2
 8112574:	3401      	adds	r4, #1
 8112576:	9304      	str	r3, [sp, #16]
 8112578:	f814 1b01 	ldrb.w	r1, [r4], #1
 811257c:	4824      	ldr	r0, [pc, #144]	@ (8112610 <_svfiprintf_r+0x1e8>)
 811257e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8112582:	2206      	movs	r2, #6
 8112584:	f7ed feac 	bl	81002e0 <memchr>
 8112588:	2800      	cmp	r0, #0
 811258a:	d036      	beq.n	81125fa <_svfiprintf_r+0x1d2>
 811258c:	4b21      	ldr	r3, [pc, #132]	@ (8112614 <_svfiprintf_r+0x1ec>)
 811258e:	bb1b      	cbnz	r3, 81125d8 <_svfiprintf_r+0x1b0>
 8112590:	9b03      	ldr	r3, [sp, #12]
 8112592:	3307      	adds	r3, #7
 8112594:	f023 0307 	bic.w	r3, r3, #7
 8112598:	3308      	adds	r3, #8
 811259a:	9303      	str	r3, [sp, #12]
 811259c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811259e:	4433      	add	r3, r6
 81125a0:	9309      	str	r3, [sp, #36]	@ 0x24
 81125a2:	e76a      	b.n	811247a <_svfiprintf_r+0x52>
 81125a4:	fb0c 3202 	mla	r2, ip, r2, r3
 81125a8:	460c      	mov	r4, r1
 81125aa:	2001      	movs	r0, #1
 81125ac:	e7a8      	b.n	8112500 <_svfiprintf_r+0xd8>
 81125ae:	2300      	movs	r3, #0
 81125b0:	3401      	adds	r4, #1
 81125b2:	9305      	str	r3, [sp, #20]
 81125b4:	4619      	mov	r1, r3
 81125b6:	f04f 0c0a 	mov.w	ip, #10
 81125ba:	4620      	mov	r0, r4
 81125bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 81125c0:	3a30      	subs	r2, #48	@ 0x30
 81125c2:	2a09      	cmp	r2, #9
 81125c4:	d903      	bls.n	81125ce <_svfiprintf_r+0x1a6>
 81125c6:	2b00      	cmp	r3, #0
 81125c8:	d0c6      	beq.n	8112558 <_svfiprintf_r+0x130>
 81125ca:	9105      	str	r1, [sp, #20]
 81125cc:	e7c4      	b.n	8112558 <_svfiprintf_r+0x130>
 81125ce:	fb0c 2101 	mla	r1, ip, r1, r2
 81125d2:	4604      	mov	r4, r0
 81125d4:	2301      	movs	r3, #1
 81125d6:	e7f0      	b.n	81125ba <_svfiprintf_r+0x192>
 81125d8:	ab03      	add	r3, sp, #12
 81125da:	9300      	str	r3, [sp, #0]
 81125dc:	462a      	mov	r2, r5
 81125de:	4b0e      	ldr	r3, [pc, #56]	@ (8112618 <_svfiprintf_r+0x1f0>)
 81125e0:	a904      	add	r1, sp, #16
 81125e2:	4638      	mov	r0, r7
 81125e4:	f7fc fef6 	bl	810f3d4 <_printf_float>
 81125e8:	1c42      	adds	r2, r0, #1
 81125ea:	4606      	mov	r6, r0
 81125ec:	d1d6      	bne.n	811259c <_svfiprintf_r+0x174>
 81125ee:	89ab      	ldrh	r3, [r5, #12]
 81125f0:	065b      	lsls	r3, r3, #25
 81125f2:	f53f af2d 	bmi.w	8112450 <_svfiprintf_r+0x28>
 81125f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 81125f8:	e72c      	b.n	8112454 <_svfiprintf_r+0x2c>
 81125fa:	ab03      	add	r3, sp, #12
 81125fc:	9300      	str	r3, [sp, #0]
 81125fe:	462a      	mov	r2, r5
 8112600:	4b05      	ldr	r3, [pc, #20]	@ (8112618 <_svfiprintf_r+0x1f0>)
 8112602:	a904      	add	r1, sp, #16
 8112604:	4638      	mov	r0, r7
 8112606:	f7fd f97d 	bl	810f904 <_printf_i>
 811260a:	e7ed      	b.n	81125e8 <_svfiprintf_r+0x1c0>
 811260c:	08113165 	.word	0x08113165
 8112610:	0811316f 	.word	0x0811316f
 8112614:	0810f3d5 	.word	0x0810f3d5
 8112618:	08112373 	.word	0x08112373
 811261c:	0811316b 	.word	0x0811316b

08112620 <__sfputc_r>:
 8112620:	6893      	ldr	r3, [r2, #8]
 8112622:	3b01      	subs	r3, #1
 8112624:	2b00      	cmp	r3, #0
 8112626:	b410      	push	{r4}
 8112628:	6093      	str	r3, [r2, #8]
 811262a:	da08      	bge.n	811263e <__sfputc_r+0x1e>
 811262c:	6994      	ldr	r4, [r2, #24]
 811262e:	42a3      	cmp	r3, r4
 8112630:	db01      	blt.n	8112636 <__sfputc_r+0x16>
 8112632:	290a      	cmp	r1, #10
 8112634:	d103      	bne.n	811263e <__sfputc_r+0x1e>
 8112636:	f85d 4b04 	ldr.w	r4, [sp], #4
 811263a:	f7fd be26 	b.w	811028a <__swbuf_r>
 811263e:	6813      	ldr	r3, [r2, #0]
 8112640:	1c58      	adds	r0, r3, #1
 8112642:	6010      	str	r0, [r2, #0]
 8112644:	7019      	strb	r1, [r3, #0]
 8112646:	4608      	mov	r0, r1
 8112648:	f85d 4b04 	ldr.w	r4, [sp], #4
 811264c:	4770      	bx	lr

0811264e <__sfputs_r>:
 811264e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8112650:	4606      	mov	r6, r0
 8112652:	460f      	mov	r7, r1
 8112654:	4614      	mov	r4, r2
 8112656:	18d5      	adds	r5, r2, r3
 8112658:	42ac      	cmp	r4, r5
 811265a:	d101      	bne.n	8112660 <__sfputs_r+0x12>
 811265c:	2000      	movs	r0, #0
 811265e:	e007      	b.n	8112670 <__sfputs_r+0x22>
 8112660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112664:	463a      	mov	r2, r7
 8112666:	4630      	mov	r0, r6
 8112668:	f7ff ffda 	bl	8112620 <__sfputc_r>
 811266c:	1c43      	adds	r3, r0, #1
 811266e:	d1f3      	bne.n	8112658 <__sfputs_r+0xa>
 8112670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08112674 <_vfiprintf_r>:
 8112674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112678:	460d      	mov	r5, r1
 811267a:	b09d      	sub	sp, #116	@ 0x74
 811267c:	4614      	mov	r4, r2
 811267e:	4698      	mov	r8, r3
 8112680:	4606      	mov	r6, r0
 8112682:	b118      	cbz	r0, 811268c <_vfiprintf_r+0x18>
 8112684:	6a03      	ldr	r3, [r0, #32]
 8112686:	b90b      	cbnz	r3, 811268c <_vfiprintf_r+0x18>
 8112688:	f7fd fcf4 	bl	8110074 <__sinit>
 811268c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811268e:	07d9      	lsls	r1, r3, #31
 8112690:	d405      	bmi.n	811269e <_vfiprintf_r+0x2a>
 8112692:	89ab      	ldrh	r3, [r5, #12]
 8112694:	059a      	lsls	r2, r3, #22
 8112696:	d402      	bmi.n	811269e <_vfiprintf_r+0x2a>
 8112698:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811269a:	f7f3 fae5 	bl	8105c68 <__retarget_lock_acquire_recursive>
 811269e:	89ab      	ldrh	r3, [r5, #12]
 81126a0:	071b      	lsls	r3, r3, #28
 81126a2:	d501      	bpl.n	81126a8 <_vfiprintf_r+0x34>
 81126a4:	692b      	ldr	r3, [r5, #16]
 81126a6:	b99b      	cbnz	r3, 81126d0 <_vfiprintf_r+0x5c>
 81126a8:	4629      	mov	r1, r5
 81126aa:	4630      	mov	r0, r6
 81126ac:	f7fd fe2c 	bl	8110308 <__swsetup_r>
 81126b0:	b170      	cbz	r0, 81126d0 <_vfiprintf_r+0x5c>
 81126b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 81126b4:	07dc      	lsls	r4, r3, #31
 81126b6:	d504      	bpl.n	81126c2 <_vfiprintf_r+0x4e>
 81126b8:	f04f 30ff 	mov.w	r0, #4294967295
 81126bc:	b01d      	add	sp, #116	@ 0x74
 81126be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81126c2:	89ab      	ldrh	r3, [r5, #12]
 81126c4:	0598      	lsls	r0, r3, #22
 81126c6:	d4f7      	bmi.n	81126b8 <_vfiprintf_r+0x44>
 81126c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 81126ca:	f7f3 fae2 	bl	8105c92 <__retarget_lock_release_recursive>
 81126ce:	e7f3      	b.n	81126b8 <_vfiprintf_r+0x44>
 81126d0:	2300      	movs	r3, #0
 81126d2:	9309      	str	r3, [sp, #36]	@ 0x24
 81126d4:	2320      	movs	r3, #32
 81126d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 81126da:	f8cd 800c 	str.w	r8, [sp, #12]
 81126de:	2330      	movs	r3, #48	@ 0x30
 81126e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8112890 <_vfiprintf_r+0x21c>
 81126e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 81126e8:	f04f 0901 	mov.w	r9, #1
 81126ec:	4623      	mov	r3, r4
 81126ee:	469a      	mov	sl, r3
 81126f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 81126f4:	b10a      	cbz	r2, 81126fa <_vfiprintf_r+0x86>
 81126f6:	2a25      	cmp	r2, #37	@ 0x25
 81126f8:	d1f9      	bne.n	81126ee <_vfiprintf_r+0x7a>
 81126fa:	ebba 0b04 	subs.w	fp, sl, r4
 81126fe:	d00b      	beq.n	8112718 <_vfiprintf_r+0xa4>
 8112700:	465b      	mov	r3, fp
 8112702:	4622      	mov	r2, r4
 8112704:	4629      	mov	r1, r5
 8112706:	4630      	mov	r0, r6
 8112708:	f7ff ffa1 	bl	811264e <__sfputs_r>
 811270c:	3001      	adds	r0, #1
 811270e:	f000 80a7 	beq.w	8112860 <_vfiprintf_r+0x1ec>
 8112712:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8112714:	445a      	add	r2, fp
 8112716:	9209      	str	r2, [sp, #36]	@ 0x24
 8112718:	f89a 3000 	ldrb.w	r3, [sl]
 811271c:	2b00      	cmp	r3, #0
 811271e:	f000 809f 	beq.w	8112860 <_vfiprintf_r+0x1ec>
 8112722:	2300      	movs	r3, #0
 8112724:	f04f 32ff 	mov.w	r2, #4294967295
 8112728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 811272c:	f10a 0a01 	add.w	sl, sl, #1
 8112730:	9304      	str	r3, [sp, #16]
 8112732:	9307      	str	r3, [sp, #28]
 8112734:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8112738:	931a      	str	r3, [sp, #104]	@ 0x68
 811273a:	4654      	mov	r4, sl
 811273c:	2205      	movs	r2, #5
 811273e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112742:	4853      	ldr	r0, [pc, #332]	@ (8112890 <_vfiprintf_r+0x21c>)
 8112744:	f7ed fdcc 	bl	81002e0 <memchr>
 8112748:	9a04      	ldr	r2, [sp, #16]
 811274a:	b9d8      	cbnz	r0, 8112784 <_vfiprintf_r+0x110>
 811274c:	06d1      	lsls	r1, r2, #27
 811274e:	bf44      	itt	mi
 8112750:	2320      	movmi	r3, #32
 8112752:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8112756:	0713      	lsls	r3, r2, #28
 8112758:	bf44      	itt	mi
 811275a:	232b      	movmi	r3, #43	@ 0x2b
 811275c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8112760:	f89a 3000 	ldrb.w	r3, [sl]
 8112764:	2b2a      	cmp	r3, #42	@ 0x2a
 8112766:	d015      	beq.n	8112794 <_vfiprintf_r+0x120>
 8112768:	9a07      	ldr	r2, [sp, #28]
 811276a:	4654      	mov	r4, sl
 811276c:	2000      	movs	r0, #0
 811276e:	f04f 0c0a 	mov.w	ip, #10
 8112772:	4621      	mov	r1, r4
 8112774:	f811 3b01 	ldrb.w	r3, [r1], #1
 8112778:	3b30      	subs	r3, #48	@ 0x30
 811277a:	2b09      	cmp	r3, #9
 811277c:	d94b      	bls.n	8112816 <_vfiprintf_r+0x1a2>
 811277e:	b1b0      	cbz	r0, 81127ae <_vfiprintf_r+0x13a>
 8112780:	9207      	str	r2, [sp, #28]
 8112782:	e014      	b.n	81127ae <_vfiprintf_r+0x13a>
 8112784:	eba0 0308 	sub.w	r3, r0, r8
 8112788:	fa09 f303 	lsl.w	r3, r9, r3
 811278c:	4313      	orrs	r3, r2
 811278e:	9304      	str	r3, [sp, #16]
 8112790:	46a2      	mov	sl, r4
 8112792:	e7d2      	b.n	811273a <_vfiprintf_r+0xc6>
 8112794:	9b03      	ldr	r3, [sp, #12]
 8112796:	1d19      	adds	r1, r3, #4
 8112798:	681b      	ldr	r3, [r3, #0]
 811279a:	9103      	str	r1, [sp, #12]
 811279c:	2b00      	cmp	r3, #0
 811279e:	bfbb      	ittet	lt
 81127a0:	425b      	neglt	r3, r3
 81127a2:	f042 0202 	orrlt.w	r2, r2, #2
 81127a6:	9307      	strge	r3, [sp, #28]
 81127a8:	9307      	strlt	r3, [sp, #28]
 81127aa:	bfb8      	it	lt
 81127ac:	9204      	strlt	r2, [sp, #16]
 81127ae:	7823      	ldrb	r3, [r4, #0]
 81127b0:	2b2e      	cmp	r3, #46	@ 0x2e
 81127b2:	d10a      	bne.n	81127ca <_vfiprintf_r+0x156>
 81127b4:	7863      	ldrb	r3, [r4, #1]
 81127b6:	2b2a      	cmp	r3, #42	@ 0x2a
 81127b8:	d132      	bne.n	8112820 <_vfiprintf_r+0x1ac>
 81127ba:	9b03      	ldr	r3, [sp, #12]
 81127bc:	1d1a      	adds	r2, r3, #4
 81127be:	681b      	ldr	r3, [r3, #0]
 81127c0:	9203      	str	r2, [sp, #12]
 81127c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 81127c6:	3402      	adds	r4, #2
 81127c8:	9305      	str	r3, [sp, #20]
 81127ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 81128a0 <_vfiprintf_r+0x22c>
 81127ce:	7821      	ldrb	r1, [r4, #0]
 81127d0:	2203      	movs	r2, #3
 81127d2:	4650      	mov	r0, sl
 81127d4:	f7ed fd84 	bl	81002e0 <memchr>
 81127d8:	b138      	cbz	r0, 81127ea <_vfiprintf_r+0x176>
 81127da:	9b04      	ldr	r3, [sp, #16]
 81127dc:	eba0 000a 	sub.w	r0, r0, sl
 81127e0:	2240      	movs	r2, #64	@ 0x40
 81127e2:	4082      	lsls	r2, r0
 81127e4:	4313      	orrs	r3, r2
 81127e6:	3401      	adds	r4, #1
 81127e8:	9304      	str	r3, [sp, #16]
 81127ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 81127ee:	4829      	ldr	r0, [pc, #164]	@ (8112894 <_vfiprintf_r+0x220>)
 81127f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 81127f4:	2206      	movs	r2, #6
 81127f6:	f7ed fd73 	bl	81002e0 <memchr>
 81127fa:	2800      	cmp	r0, #0
 81127fc:	d03f      	beq.n	811287e <_vfiprintf_r+0x20a>
 81127fe:	4b26      	ldr	r3, [pc, #152]	@ (8112898 <_vfiprintf_r+0x224>)
 8112800:	bb1b      	cbnz	r3, 811284a <_vfiprintf_r+0x1d6>
 8112802:	9b03      	ldr	r3, [sp, #12]
 8112804:	3307      	adds	r3, #7
 8112806:	f023 0307 	bic.w	r3, r3, #7
 811280a:	3308      	adds	r3, #8
 811280c:	9303      	str	r3, [sp, #12]
 811280e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8112810:	443b      	add	r3, r7
 8112812:	9309      	str	r3, [sp, #36]	@ 0x24
 8112814:	e76a      	b.n	81126ec <_vfiprintf_r+0x78>
 8112816:	fb0c 3202 	mla	r2, ip, r2, r3
 811281a:	460c      	mov	r4, r1
 811281c:	2001      	movs	r0, #1
 811281e:	e7a8      	b.n	8112772 <_vfiprintf_r+0xfe>
 8112820:	2300      	movs	r3, #0
 8112822:	3401      	adds	r4, #1
 8112824:	9305      	str	r3, [sp, #20]
 8112826:	4619      	mov	r1, r3
 8112828:	f04f 0c0a 	mov.w	ip, #10
 811282c:	4620      	mov	r0, r4
 811282e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8112832:	3a30      	subs	r2, #48	@ 0x30
 8112834:	2a09      	cmp	r2, #9
 8112836:	d903      	bls.n	8112840 <_vfiprintf_r+0x1cc>
 8112838:	2b00      	cmp	r3, #0
 811283a:	d0c6      	beq.n	81127ca <_vfiprintf_r+0x156>
 811283c:	9105      	str	r1, [sp, #20]
 811283e:	e7c4      	b.n	81127ca <_vfiprintf_r+0x156>
 8112840:	fb0c 2101 	mla	r1, ip, r1, r2
 8112844:	4604      	mov	r4, r0
 8112846:	2301      	movs	r3, #1
 8112848:	e7f0      	b.n	811282c <_vfiprintf_r+0x1b8>
 811284a:	ab03      	add	r3, sp, #12
 811284c:	9300      	str	r3, [sp, #0]
 811284e:	462a      	mov	r2, r5
 8112850:	4b12      	ldr	r3, [pc, #72]	@ (811289c <_vfiprintf_r+0x228>)
 8112852:	a904      	add	r1, sp, #16
 8112854:	4630      	mov	r0, r6
 8112856:	f7fc fdbd 	bl	810f3d4 <_printf_float>
 811285a:	4607      	mov	r7, r0
 811285c:	1c78      	adds	r0, r7, #1
 811285e:	d1d6      	bne.n	811280e <_vfiprintf_r+0x19a>
 8112860:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8112862:	07d9      	lsls	r1, r3, #31
 8112864:	d405      	bmi.n	8112872 <_vfiprintf_r+0x1fe>
 8112866:	89ab      	ldrh	r3, [r5, #12]
 8112868:	059a      	lsls	r2, r3, #22
 811286a:	d402      	bmi.n	8112872 <_vfiprintf_r+0x1fe>
 811286c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811286e:	f7f3 fa10 	bl	8105c92 <__retarget_lock_release_recursive>
 8112872:	89ab      	ldrh	r3, [r5, #12]
 8112874:	065b      	lsls	r3, r3, #25
 8112876:	f53f af1f 	bmi.w	81126b8 <_vfiprintf_r+0x44>
 811287a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 811287c:	e71e      	b.n	81126bc <_vfiprintf_r+0x48>
 811287e:	ab03      	add	r3, sp, #12
 8112880:	9300      	str	r3, [sp, #0]
 8112882:	462a      	mov	r2, r5
 8112884:	4b05      	ldr	r3, [pc, #20]	@ (811289c <_vfiprintf_r+0x228>)
 8112886:	a904      	add	r1, sp, #16
 8112888:	4630      	mov	r0, r6
 811288a:	f7fd f83b 	bl	810f904 <_printf_i>
 811288e:	e7e4      	b.n	811285a <_vfiprintf_r+0x1e6>
 8112890:	08113165 	.word	0x08113165
 8112894:	0811316f 	.word	0x0811316f
 8112898:	0810f3d5 	.word	0x0810f3d5
 811289c:	0811264f 	.word	0x0811264f
 81128a0:	0811316b 	.word	0x0811316b

081128a4 <__sflush_r>:
 81128a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 81128a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81128ac:	0716      	lsls	r6, r2, #28
 81128ae:	4605      	mov	r5, r0
 81128b0:	460c      	mov	r4, r1
 81128b2:	d454      	bmi.n	811295e <__sflush_r+0xba>
 81128b4:	684b      	ldr	r3, [r1, #4]
 81128b6:	2b00      	cmp	r3, #0
 81128b8:	dc02      	bgt.n	81128c0 <__sflush_r+0x1c>
 81128ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 81128bc:	2b00      	cmp	r3, #0
 81128be:	dd48      	ble.n	8112952 <__sflush_r+0xae>
 81128c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81128c2:	2e00      	cmp	r6, #0
 81128c4:	d045      	beq.n	8112952 <__sflush_r+0xae>
 81128c6:	2300      	movs	r3, #0
 81128c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 81128cc:	682f      	ldr	r7, [r5, #0]
 81128ce:	6a21      	ldr	r1, [r4, #32]
 81128d0:	602b      	str	r3, [r5, #0]
 81128d2:	d030      	beq.n	8112936 <__sflush_r+0x92>
 81128d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 81128d6:	89a3      	ldrh	r3, [r4, #12]
 81128d8:	0759      	lsls	r1, r3, #29
 81128da:	d505      	bpl.n	81128e8 <__sflush_r+0x44>
 81128dc:	6863      	ldr	r3, [r4, #4]
 81128de:	1ad2      	subs	r2, r2, r3
 81128e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 81128e2:	b10b      	cbz	r3, 81128e8 <__sflush_r+0x44>
 81128e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 81128e6:	1ad2      	subs	r2, r2, r3
 81128e8:	2300      	movs	r3, #0
 81128ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81128ec:	6a21      	ldr	r1, [r4, #32]
 81128ee:	4628      	mov	r0, r5
 81128f0:	47b0      	blx	r6
 81128f2:	1c43      	adds	r3, r0, #1
 81128f4:	89a3      	ldrh	r3, [r4, #12]
 81128f6:	d106      	bne.n	8112906 <__sflush_r+0x62>
 81128f8:	6829      	ldr	r1, [r5, #0]
 81128fa:	291d      	cmp	r1, #29
 81128fc:	d82b      	bhi.n	8112956 <__sflush_r+0xb2>
 81128fe:	4a2a      	ldr	r2, [pc, #168]	@ (81129a8 <__sflush_r+0x104>)
 8112900:	40ca      	lsrs	r2, r1
 8112902:	07d6      	lsls	r6, r2, #31
 8112904:	d527      	bpl.n	8112956 <__sflush_r+0xb2>
 8112906:	2200      	movs	r2, #0
 8112908:	6062      	str	r2, [r4, #4]
 811290a:	04d9      	lsls	r1, r3, #19
 811290c:	6922      	ldr	r2, [r4, #16]
 811290e:	6022      	str	r2, [r4, #0]
 8112910:	d504      	bpl.n	811291c <__sflush_r+0x78>
 8112912:	1c42      	adds	r2, r0, #1
 8112914:	d101      	bne.n	811291a <__sflush_r+0x76>
 8112916:	682b      	ldr	r3, [r5, #0]
 8112918:	b903      	cbnz	r3, 811291c <__sflush_r+0x78>
 811291a:	6560      	str	r0, [r4, #84]	@ 0x54
 811291c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 811291e:	602f      	str	r7, [r5, #0]
 8112920:	b1b9      	cbz	r1, 8112952 <__sflush_r+0xae>
 8112922:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8112926:	4299      	cmp	r1, r3
 8112928:	d002      	beq.n	8112930 <__sflush_r+0x8c>
 811292a:	4628      	mov	r0, r5
 811292c:	f7fe fc58 	bl	81111e0 <_free_r>
 8112930:	2300      	movs	r3, #0
 8112932:	6363      	str	r3, [r4, #52]	@ 0x34
 8112934:	e00d      	b.n	8112952 <__sflush_r+0xae>
 8112936:	2301      	movs	r3, #1
 8112938:	4628      	mov	r0, r5
 811293a:	47b0      	blx	r6
 811293c:	4602      	mov	r2, r0
 811293e:	1c50      	adds	r0, r2, #1
 8112940:	d1c9      	bne.n	81128d6 <__sflush_r+0x32>
 8112942:	682b      	ldr	r3, [r5, #0]
 8112944:	2b00      	cmp	r3, #0
 8112946:	d0c6      	beq.n	81128d6 <__sflush_r+0x32>
 8112948:	2b1d      	cmp	r3, #29
 811294a:	d001      	beq.n	8112950 <__sflush_r+0xac>
 811294c:	2b16      	cmp	r3, #22
 811294e:	d11e      	bne.n	811298e <__sflush_r+0xea>
 8112950:	602f      	str	r7, [r5, #0]
 8112952:	2000      	movs	r0, #0
 8112954:	e022      	b.n	811299c <__sflush_r+0xf8>
 8112956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811295a:	b21b      	sxth	r3, r3
 811295c:	e01b      	b.n	8112996 <__sflush_r+0xf2>
 811295e:	690f      	ldr	r7, [r1, #16]
 8112960:	2f00      	cmp	r7, #0
 8112962:	d0f6      	beq.n	8112952 <__sflush_r+0xae>
 8112964:	0793      	lsls	r3, r2, #30
 8112966:	680e      	ldr	r6, [r1, #0]
 8112968:	bf08      	it	eq
 811296a:	694b      	ldreq	r3, [r1, #20]
 811296c:	600f      	str	r7, [r1, #0]
 811296e:	bf18      	it	ne
 8112970:	2300      	movne	r3, #0
 8112972:	eba6 0807 	sub.w	r8, r6, r7
 8112976:	608b      	str	r3, [r1, #8]
 8112978:	f1b8 0f00 	cmp.w	r8, #0
 811297c:	dde9      	ble.n	8112952 <__sflush_r+0xae>
 811297e:	6a21      	ldr	r1, [r4, #32]
 8112980:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8112982:	4643      	mov	r3, r8
 8112984:	463a      	mov	r2, r7
 8112986:	4628      	mov	r0, r5
 8112988:	47b0      	blx	r6
 811298a:	2800      	cmp	r0, #0
 811298c:	dc08      	bgt.n	81129a0 <__sflush_r+0xfc>
 811298e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8112992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8112996:	81a3      	strh	r3, [r4, #12]
 8112998:	f04f 30ff 	mov.w	r0, #4294967295
 811299c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81129a0:	4407      	add	r7, r0
 81129a2:	eba8 0800 	sub.w	r8, r8, r0
 81129a6:	e7e7      	b.n	8112978 <__sflush_r+0xd4>
 81129a8:	20400001 	.word	0x20400001

081129ac <_fflush_r>:
 81129ac:	b538      	push	{r3, r4, r5, lr}
 81129ae:	690b      	ldr	r3, [r1, #16]
 81129b0:	4605      	mov	r5, r0
 81129b2:	460c      	mov	r4, r1
 81129b4:	b913      	cbnz	r3, 81129bc <_fflush_r+0x10>
 81129b6:	2500      	movs	r5, #0
 81129b8:	4628      	mov	r0, r5
 81129ba:	bd38      	pop	{r3, r4, r5, pc}
 81129bc:	b118      	cbz	r0, 81129c6 <_fflush_r+0x1a>
 81129be:	6a03      	ldr	r3, [r0, #32]
 81129c0:	b90b      	cbnz	r3, 81129c6 <_fflush_r+0x1a>
 81129c2:	f7fd fb57 	bl	8110074 <__sinit>
 81129c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81129ca:	2b00      	cmp	r3, #0
 81129cc:	d0f3      	beq.n	81129b6 <_fflush_r+0xa>
 81129ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 81129d0:	07d0      	lsls	r0, r2, #31
 81129d2:	d404      	bmi.n	81129de <_fflush_r+0x32>
 81129d4:	0599      	lsls	r1, r3, #22
 81129d6:	d402      	bmi.n	81129de <_fflush_r+0x32>
 81129d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81129da:	f7f3 f945 	bl	8105c68 <__retarget_lock_acquire_recursive>
 81129de:	4628      	mov	r0, r5
 81129e0:	4621      	mov	r1, r4
 81129e2:	f7ff ff5f 	bl	81128a4 <__sflush_r>
 81129e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81129e8:	07da      	lsls	r2, r3, #31
 81129ea:	4605      	mov	r5, r0
 81129ec:	d4e4      	bmi.n	81129b8 <_fflush_r+0xc>
 81129ee:	89a3      	ldrh	r3, [r4, #12]
 81129f0:	059b      	lsls	r3, r3, #22
 81129f2:	d4e1      	bmi.n	81129b8 <_fflush_r+0xc>
 81129f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81129f6:	f7f3 f94c 	bl	8105c92 <__retarget_lock_release_recursive>
 81129fa:	e7dd      	b.n	81129b8 <_fflush_r+0xc>

081129fc <__swhatbuf_r>:
 81129fc:	b570      	push	{r4, r5, r6, lr}
 81129fe:	460c      	mov	r4, r1
 8112a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8112a04:	2900      	cmp	r1, #0
 8112a06:	b096      	sub	sp, #88	@ 0x58
 8112a08:	4615      	mov	r5, r2
 8112a0a:	461e      	mov	r6, r3
 8112a0c:	da0d      	bge.n	8112a2a <__swhatbuf_r+0x2e>
 8112a0e:	89a3      	ldrh	r3, [r4, #12]
 8112a10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8112a14:	f04f 0100 	mov.w	r1, #0
 8112a18:	bf14      	ite	ne
 8112a1a:	2340      	movne	r3, #64	@ 0x40
 8112a1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8112a20:	2000      	movs	r0, #0
 8112a22:	6031      	str	r1, [r6, #0]
 8112a24:	602b      	str	r3, [r5, #0]
 8112a26:	b016      	add	sp, #88	@ 0x58
 8112a28:	bd70      	pop	{r4, r5, r6, pc}
 8112a2a:	466a      	mov	r2, sp
 8112a2c:	f000 f862 	bl	8112af4 <_fstat_r>
 8112a30:	2800      	cmp	r0, #0
 8112a32:	dbec      	blt.n	8112a0e <__swhatbuf_r+0x12>
 8112a34:	9901      	ldr	r1, [sp, #4]
 8112a36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8112a3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8112a3e:	4259      	negs	r1, r3
 8112a40:	4159      	adcs	r1, r3
 8112a42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8112a46:	e7eb      	b.n	8112a20 <__swhatbuf_r+0x24>

08112a48 <__smakebuf_r>:
 8112a48:	898b      	ldrh	r3, [r1, #12]
 8112a4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8112a4c:	079d      	lsls	r5, r3, #30
 8112a4e:	4606      	mov	r6, r0
 8112a50:	460c      	mov	r4, r1
 8112a52:	d507      	bpl.n	8112a64 <__smakebuf_r+0x1c>
 8112a54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8112a58:	6023      	str	r3, [r4, #0]
 8112a5a:	6123      	str	r3, [r4, #16]
 8112a5c:	2301      	movs	r3, #1
 8112a5e:	6163      	str	r3, [r4, #20]
 8112a60:	b003      	add	sp, #12
 8112a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8112a64:	ab01      	add	r3, sp, #4
 8112a66:	466a      	mov	r2, sp
 8112a68:	f7ff ffc8 	bl	81129fc <__swhatbuf_r>
 8112a6c:	9f00      	ldr	r7, [sp, #0]
 8112a6e:	4605      	mov	r5, r0
 8112a70:	4639      	mov	r1, r7
 8112a72:	4630      	mov	r0, r6
 8112a74:	f7fb fd14 	bl	810e4a0 <_malloc_r>
 8112a78:	b948      	cbnz	r0, 8112a8e <__smakebuf_r+0x46>
 8112a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8112a7e:	059a      	lsls	r2, r3, #22
 8112a80:	d4ee      	bmi.n	8112a60 <__smakebuf_r+0x18>
 8112a82:	f023 0303 	bic.w	r3, r3, #3
 8112a86:	f043 0302 	orr.w	r3, r3, #2
 8112a8a:	81a3      	strh	r3, [r4, #12]
 8112a8c:	e7e2      	b.n	8112a54 <__smakebuf_r+0xc>
 8112a8e:	89a3      	ldrh	r3, [r4, #12]
 8112a90:	6020      	str	r0, [r4, #0]
 8112a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8112a96:	81a3      	strh	r3, [r4, #12]
 8112a98:	9b01      	ldr	r3, [sp, #4]
 8112a9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8112a9e:	b15b      	cbz	r3, 8112ab8 <__smakebuf_r+0x70>
 8112aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8112aa4:	4630      	mov	r0, r6
 8112aa6:	f000 f837 	bl	8112b18 <_isatty_r>
 8112aaa:	b128      	cbz	r0, 8112ab8 <__smakebuf_r+0x70>
 8112aac:	89a3      	ldrh	r3, [r4, #12]
 8112aae:	f023 0303 	bic.w	r3, r3, #3
 8112ab2:	f043 0301 	orr.w	r3, r3, #1
 8112ab6:	81a3      	strh	r3, [r4, #12]
 8112ab8:	89a3      	ldrh	r3, [r4, #12]
 8112aba:	431d      	orrs	r5, r3
 8112abc:	81a5      	strh	r5, [r4, #12]
 8112abe:	e7cf      	b.n	8112a60 <__smakebuf_r+0x18>

08112ac0 <memmove>:
 8112ac0:	4288      	cmp	r0, r1
 8112ac2:	b510      	push	{r4, lr}
 8112ac4:	eb01 0402 	add.w	r4, r1, r2
 8112ac8:	d902      	bls.n	8112ad0 <memmove+0x10>
 8112aca:	4284      	cmp	r4, r0
 8112acc:	4623      	mov	r3, r4
 8112ace:	d807      	bhi.n	8112ae0 <memmove+0x20>
 8112ad0:	1e43      	subs	r3, r0, #1
 8112ad2:	42a1      	cmp	r1, r4
 8112ad4:	d008      	beq.n	8112ae8 <memmove+0x28>
 8112ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8112ada:	f803 2f01 	strb.w	r2, [r3, #1]!
 8112ade:	e7f8      	b.n	8112ad2 <memmove+0x12>
 8112ae0:	4402      	add	r2, r0
 8112ae2:	4601      	mov	r1, r0
 8112ae4:	428a      	cmp	r2, r1
 8112ae6:	d100      	bne.n	8112aea <memmove+0x2a>
 8112ae8:	bd10      	pop	{r4, pc}
 8112aea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8112aee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8112af2:	e7f7      	b.n	8112ae4 <memmove+0x24>

08112af4 <_fstat_r>:
 8112af4:	b538      	push	{r3, r4, r5, lr}
 8112af6:	4d07      	ldr	r5, [pc, #28]	@ (8112b14 <_fstat_r+0x20>)
 8112af8:	2300      	movs	r3, #0
 8112afa:	4604      	mov	r4, r0
 8112afc:	4608      	mov	r0, r1
 8112afe:	4611      	mov	r1, r2
 8112b00:	602b      	str	r3, [r5, #0]
 8112b02:	f7ee feb1 	bl	8101868 <_fstat>
 8112b06:	1c43      	adds	r3, r0, #1
 8112b08:	d102      	bne.n	8112b10 <_fstat_r+0x1c>
 8112b0a:	682b      	ldr	r3, [r5, #0]
 8112b0c:	b103      	cbz	r3, 8112b10 <_fstat_r+0x1c>
 8112b0e:	6023      	str	r3, [r4, #0]
 8112b10:	bd38      	pop	{r3, r4, r5, pc}
 8112b12:	bf00      	nop
 8112b14:	100050ec 	.word	0x100050ec

08112b18 <_isatty_r>:
 8112b18:	b538      	push	{r3, r4, r5, lr}
 8112b1a:	4d06      	ldr	r5, [pc, #24]	@ (8112b34 <_isatty_r+0x1c>)
 8112b1c:	2300      	movs	r3, #0
 8112b1e:	4604      	mov	r4, r0
 8112b20:	4608      	mov	r0, r1
 8112b22:	602b      	str	r3, [r5, #0]
 8112b24:	f7ee feb0 	bl	8101888 <_isatty>
 8112b28:	1c43      	adds	r3, r0, #1
 8112b2a:	d102      	bne.n	8112b32 <_isatty_r+0x1a>
 8112b2c:	682b      	ldr	r3, [r5, #0]
 8112b2e:	b103      	cbz	r3, 8112b32 <_isatty_r+0x1a>
 8112b30:	6023      	str	r3, [r4, #0]
 8112b32:	bd38      	pop	{r3, r4, r5, pc}
 8112b34:	100050ec 	.word	0x100050ec

08112b38 <__assert_func>:
 8112b38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8112b3a:	4614      	mov	r4, r2
 8112b3c:	461a      	mov	r2, r3
 8112b3e:	4b09      	ldr	r3, [pc, #36]	@ (8112b64 <__assert_func+0x2c>)
 8112b40:	681b      	ldr	r3, [r3, #0]
 8112b42:	4605      	mov	r5, r0
 8112b44:	68d8      	ldr	r0, [r3, #12]
 8112b46:	b14c      	cbz	r4, 8112b5c <__assert_func+0x24>
 8112b48:	4b07      	ldr	r3, [pc, #28]	@ (8112b68 <__assert_func+0x30>)
 8112b4a:	9100      	str	r1, [sp, #0]
 8112b4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8112b50:	4906      	ldr	r1, [pc, #24]	@ (8112b6c <__assert_func+0x34>)
 8112b52:	462b      	mov	r3, r5
 8112b54:	f000 f850 	bl	8112bf8 <fiprintf>
 8112b58:	f000 f860 	bl	8112c1c <abort>
 8112b5c:	4b04      	ldr	r3, [pc, #16]	@ (8112b70 <__assert_func+0x38>)
 8112b5e:	461c      	mov	r4, r3
 8112b60:	e7f3      	b.n	8112b4a <__assert_func+0x12>
 8112b62:	bf00      	nop
 8112b64:	100001e0 	.word	0x100001e0
 8112b68:	08113176 	.word	0x08113176
 8112b6c:	08113183 	.word	0x08113183
 8112b70:	081131b1 	.word	0x081131b1

08112b74 <_calloc_r>:
 8112b74:	b570      	push	{r4, r5, r6, lr}
 8112b76:	fba1 5402 	umull	r5, r4, r1, r2
 8112b7a:	b934      	cbnz	r4, 8112b8a <_calloc_r+0x16>
 8112b7c:	4629      	mov	r1, r5
 8112b7e:	f7fb fc8f 	bl	810e4a0 <_malloc_r>
 8112b82:	4606      	mov	r6, r0
 8112b84:	b928      	cbnz	r0, 8112b92 <_calloc_r+0x1e>
 8112b86:	4630      	mov	r0, r6
 8112b88:	bd70      	pop	{r4, r5, r6, pc}
 8112b8a:	220c      	movs	r2, #12
 8112b8c:	6002      	str	r2, [r0, #0]
 8112b8e:	2600      	movs	r6, #0
 8112b90:	e7f9      	b.n	8112b86 <_calloc_r+0x12>
 8112b92:	462a      	mov	r2, r5
 8112b94:	4621      	mov	r1, r4
 8112b96:	f7fd fc0d 	bl	81103b4 <memset>
 8112b9a:	e7f4      	b.n	8112b86 <_calloc_r+0x12>

08112b9c <_realloc_r>:
 8112b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8112ba0:	4607      	mov	r7, r0
 8112ba2:	4614      	mov	r4, r2
 8112ba4:	460d      	mov	r5, r1
 8112ba6:	b921      	cbnz	r1, 8112bb2 <_realloc_r+0x16>
 8112ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8112bac:	4611      	mov	r1, r2
 8112bae:	f7fb bc77 	b.w	810e4a0 <_malloc_r>
 8112bb2:	b92a      	cbnz	r2, 8112bc0 <_realloc_r+0x24>
 8112bb4:	f7fe fb14 	bl	81111e0 <_free_r>
 8112bb8:	4625      	mov	r5, r4
 8112bba:	4628      	mov	r0, r5
 8112bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8112bc0:	f000 f833 	bl	8112c2a <_malloc_usable_size_r>
 8112bc4:	4284      	cmp	r4, r0
 8112bc6:	4606      	mov	r6, r0
 8112bc8:	d802      	bhi.n	8112bd0 <_realloc_r+0x34>
 8112bca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8112bce:	d8f4      	bhi.n	8112bba <_realloc_r+0x1e>
 8112bd0:	4621      	mov	r1, r4
 8112bd2:	4638      	mov	r0, r7
 8112bd4:	f7fb fc64 	bl	810e4a0 <_malloc_r>
 8112bd8:	4680      	mov	r8, r0
 8112bda:	b908      	cbnz	r0, 8112be0 <_realloc_r+0x44>
 8112bdc:	4645      	mov	r5, r8
 8112bde:	e7ec      	b.n	8112bba <_realloc_r+0x1e>
 8112be0:	42b4      	cmp	r4, r6
 8112be2:	4622      	mov	r2, r4
 8112be4:	4629      	mov	r1, r5
 8112be6:	bf28      	it	cs
 8112be8:	4632      	movcs	r2, r6
 8112bea:	f7fd fc81 	bl	81104f0 <memcpy>
 8112bee:	4629      	mov	r1, r5
 8112bf0:	4638      	mov	r0, r7
 8112bf2:	f7fe faf5 	bl	81111e0 <_free_r>
 8112bf6:	e7f1      	b.n	8112bdc <_realloc_r+0x40>

08112bf8 <fiprintf>:
 8112bf8:	b40e      	push	{r1, r2, r3}
 8112bfa:	b503      	push	{r0, r1, lr}
 8112bfc:	4601      	mov	r1, r0
 8112bfe:	ab03      	add	r3, sp, #12
 8112c00:	4805      	ldr	r0, [pc, #20]	@ (8112c18 <fiprintf+0x20>)
 8112c02:	f853 2b04 	ldr.w	r2, [r3], #4
 8112c06:	6800      	ldr	r0, [r0, #0]
 8112c08:	9301      	str	r3, [sp, #4]
 8112c0a:	f7ff fd33 	bl	8112674 <_vfiprintf_r>
 8112c0e:	b002      	add	sp, #8
 8112c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8112c14:	b003      	add	sp, #12
 8112c16:	4770      	bx	lr
 8112c18:	100001e0 	.word	0x100001e0

08112c1c <abort>:
 8112c1c:	b508      	push	{r3, lr}
 8112c1e:	2006      	movs	r0, #6
 8112c20:	f000 f834 	bl	8112c8c <raise>
 8112c24:	2001      	movs	r0, #1
 8112c26:	f7ee fdeb 	bl	8101800 <_exit>

08112c2a <_malloc_usable_size_r>:
 8112c2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8112c2e:	1f18      	subs	r0, r3, #4
 8112c30:	2b00      	cmp	r3, #0
 8112c32:	bfbc      	itt	lt
 8112c34:	580b      	ldrlt	r3, [r1, r0]
 8112c36:	18c0      	addlt	r0, r0, r3
 8112c38:	4770      	bx	lr

08112c3a <_raise_r>:
 8112c3a:	291f      	cmp	r1, #31
 8112c3c:	b538      	push	{r3, r4, r5, lr}
 8112c3e:	4605      	mov	r5, r0
 8112c40:	460c      	mov	r4, r1
 8112c42:	d904      	bls.n	8112c4e <_raise_r+0x14>
 8112c44:	2316      	movs	r3, #22
 8112c46:	6003      	str	r3, [r0, #0]
 8112c48:	f04f 30ff 	mov.w	r0, #4294967295
 8112c4c:	bd38      	pop	{r3, r4, r5, pc}
 8112c4e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8112c50:	b112      	cbz	r2, 8112c58 <_raise_r+0x1e>
 8112c52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8112c56:	b94b      	cbnz	r3, 8112c6c <_raise_r+0x32>
 8112c58:	4628      	mov	r0, r5
 8112c5a:	f000 f831 	bl	8112cc0 <_getpid_r>
 8112c5e:	4622      	mov	r2, r4
 8112c60:	4601      	mov	r1, r0
 8112c62:	4628      	mov	r0, r5
 8112c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8112c68:	f000 b818 	b.w	8112c9c <_kill_r>
 8112c6c:	2b01      	cmp	r3, #1
 8112c6e:	d00a      	beq.n	8112c86 <_raise_r+0x4c>
 8112c70:	1c59      	adds	r1, r3, #1
 8112c72:	d103      	bne.n	8112c7c <_raise_r+0x42>
 8112c74:	2316      	movs	r3, #22
 8112c76:	6003      	str	r3, [r0, #0]
 8112c78:	2001      	movs	r0, #1
 8112c7a:	e7e7      	b.n	8112c4c <_raise_r+0x12>
 8112c7c:	2100      	movs	r1, #0
 8112c7e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8112c82:	4620      	mov	r0, r4
 8112c84:	4798      	blx	r3
 8112c86:	2000      	movs	r0, #0
 8112c88:	e7e0      	b.n	8112c4c <_raise_r+0x12>
	...

08112c8c <raise>:
 8112c8c:	4b02      	ldr	r3, [pc, #8]	@ (8112c98 <raise+0xc>)
 8112c8e:	4601      	mov	r1, r0
 8112c90:	6818      	ldr	r0, [r3, #0]
 8112c92:	f7ff bfd2 	b.w	8112c3a <_raise_r>
 8112c96:	bf00      	nop
 8112c98:	100001e0 	.word	0x100001e0

08112c9c <_kill_r>:
 8112c9c:	b538      	push	{r3, r4, r5, lr}
 8112c9e:	4d07      	ldr	r5, [pc, #28]	@ (8112cbc <_kill_r+0x20>)
 8112ca0:	2300      	movs	r3, #0
 8112ca2:	4604      	mov	r4, r0
 8112ca4:	4608      	mov	r0, r1
 8112ca6:	4611      	mov	r1, r2
 8112ca8:	602b      	str	r3, [r5, #0]
 8112caa:	f7ee fd99 	bl	81017e0 <_kill>
 8112cae:	1c43      	adds	r3, r0, #1
 8112cb0:	d102      	bne.n	8112cb8 <_kill_r+0x1c>
 8112cb2:	682b      	ldr	r3, [r5, #0]
 8112cb4:	b103      	cbz	r3, 8112cb8 <_kill_r+0x1c>
 8112cb6:	6023      	str	r3, [r4, #0]
 8112cb8:	bd38      	pop	{r3, r4, r5, pc}
 8112cba:	bf00      	nop
 8112cbc:	100050ec 	.word	0x100050ec

08112cc0 <_getpid_r>:
 8112cc0:	f7ee bd86 	b.w	81017d0 <_getpid>

08112cc4 <sqrt>:
 8112cc4:	b538      	push	{r3, r4, r5, lr}
 8112cc6:	ed2d 8b02 	vpush	{d8}
 8112cca:	ec55 4b10 	vmov	r4, r5, d0
 8112cce:	f000 f825 	bl	8112d1c <__ieee754_sqrt>
 8112cd2:	4622      	mov	r2, r4
 8112cd4:	462b      	mov	r3, r5
 8112cd6:	4620      	mov	r0, r4
 8112cd8:	4629      	mov	r1, r5
 8112cda:	eeb0 8a40 	vmov.f32	s16, s0
 8112cde:	eef0 8a60 	vmov.f32	s17, s1
 8112ce2:	f7ed ffab 	bl	8100c3c <__aeabi_dcmpun>
 8112ce6:	b990      	cbnz	r0, 8112d0e <sqrt+0x4a>
 8112ce8:	2200      	movs	r2, #0
 8112cea:	2300      	movs	r3, #0
 8112cec:	4620      	mov	r0, r4
 8112cee:	4629      	mov	r1, r5
 8112cf0:	f7ed ff7c 	bl	8100bec <__aeabi_dcmplt>
 8112cf4:	b158      	cbz	r0, 8112d0e <sqrt+0x4a>
 8112cf6:	f7fd fbd1 	bl	811049c <__errno>
 8112cfa:	2321      	movs	r3, #33	@ 0x21
 8112cfc:	6003      	str	r3, [r0, #0]
 8112cfe:	2200      	movs	r2, #0
 8112d00:	2300      	movs	r3, #0
 8112d02:	4610      	mov	r0, r2
 8112d04:	4619      	mov	r1, r3
 8112d06:	f7ed fe29 	bl	810095c <__aeabi_ddiv>
 8112d0a:	ec41 0b18 	vmov	d8, r0, r1
 8112d0e:	eeb0 0a48 	vmov.f32	s0, s16
 8112d12:	eef0 0a68 	vmov.f32	s1, s17
 8112d16:	ecbd 8b02 	vpop	{d8}
 8112d1a:	bd38      	pop	{r3, r4, r5, pc}

08112d1c <__ieee754_sqrt>:
 8112d1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112d20:	4a66      	ldr	r2, [pc, #408]	@ (8112ebc <__ieee754_sqrt+0x1a0>)
 8112d22:	ec55 4b10 	vmov	r4, r5, d0
 8112d26:	43aa      	bics	r2, r5
 8112d28:	462b      	mov	r3, r5
 8112d2a:	4621      	mov	r1, r4
 8112d2c:	d110      	bne.n	8112d50 <__ieee754_sqrt+0x34>
 8112d2e:	4622      	mov	r2, r4
 8112d30:	4620      	mov	r0, r4
 8112d32:	4629      	mov	r1, r5
 8112d34:	f7ed fce8 	bl	8100708 <__aeabi_dmul>
 8112d38:	4602      	mov	r2, r0
 8112d3a:	460b      	mov	r3, r1
 8112d3c:	4620      	mov	r0, r4
 8112d3e:	4629      	mov	r1, r5
 8112d40:	f7ed fb2c 	bl	810039c <__adddf3>
 8112d44:	4604      	mov	r4, r0
 8112d46:	460d      	mov	r5, r1
 8112d48:	ec45 4b10 	vmov	d0, r4, r5
 8112d4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8112d50:	2d00      	cmp	r5, #0
 8112d52:	dc0e      	bgt.n	8112d72 <__ieee754_sqrt+0x56>
 8112d54:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8112d58:	4322      	orrs	r2, r4
 8112d5a:	d0f5      	beq.n	8112d48 <__ieee754_sqrt+0x2c>
 8112d5c:	b19d      	cbz	r5, 8112d86 <__ieee754_sqrt+0x6a>
 8112d5e:	4622      	mov	r2, r4
 8112d60:	4620      	mov	r0, r4
 8112d62:	4629      	mov	r1, r5
 8112d64:	f7ed fb18 	bl	8100398 <__aeabi_dsub>
 8112d68:	4602      	mov	r2, r0
 8112d6a:	460b      	mov	r3, r1
 8112d6c:	f7ed fdf6 	bl	810095c <__aeabi_ddiv>
 8112d70:	e7e8      	b.n	8112d44 <__ieee754_sqrt+0x28>
 8112d72:	152a      	asrs	r2, r5, #20
 8112d74:	d115      	bne.n	8112da2 <__ieee754_sqrt+0x86>
 8112d76:	2000      	movs	r0, #0
 8112d78:	e009      	b.n	8112d8e <__ieee754_sqrt+0x72>
 8112d7a:	0acb      	lsrs	r3, r1, #11
 8112d7c:	3a15      	subs	r2, #21
 8112d7e:	0549      	lsls	r1, r1, #21
 8112d80:	2b00      	cmp	r3, #0
 8112d82:	d0fa      	beq.n	8112d7a <__ieee754_sqrt+0x5e>
 8112d84:	e7f7      	b.n	8112d76 <__ieee754_sqrt+0x5a>
 8112d86:	462a      	mov	r2, r5
 8112d88:	e7fa      	b.n	8112d80 <__ieee754_sqrt+0x64>
 8112d8a:	005b      	lsls	r3, r3, #1
 8112d8c:	3001      	adds	r0, #1
 8112d8e:	02dc      	lsls	r4, r3, #11
 8112d90:	d5fb      	bpl.n	8112d8a <__ieee754_sqrt+0x6e>
 8112d92:	1e44      	subs	r4, r0, #1
 8112d94:	1b12      	subs	r2, r2, r4
 8112d96:	f1c0 0420 	rsb	r4, r0, #32
 8112d9a:	fa21 f404 	lsr.w	r4, r1, r4
 8112d9e:	4323      	orrs	r3, r4
 8112da0:	4081      	lsls	r1, r0
 8112da2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8112da6:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8112daa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8112dae:	07d2      	lsls	r2, r2, #31
 8112db0:	bf5c      	itt	pl
 8112db2:	005b      	lslpl	r3, r3, #1
 8112db4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8112db8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8112dbc:	bf58      	it	pl
 8112dbe:	0049      	lslpl	r1, r1, #1
 8112dc0:	2600      	movs	r6, #0
 8112dc2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8112dc6:	107f      	asrs	r7, r7, #1
 8112dc8:	0049      	lsls	r1, r1, #1
 8112dca:	2016      	movs	r0, #22
 8112dcc:	4632      	mov	r2, r6
 8112dce:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8112dd2:	1915      	adds	r5, r2, r4
 8112dd4:	429d      	cmp	r5, r3
 8112dd6:	bfde      	ittt	le
 8112dd8:	192a      	addle	r2, r5, r4
 8112dda:	1b5b      	suble	r3, r3, r5
 8112ddc:	1936      	addle	r6, r6, r4
 8112dde:	0fcd      	lsrs	r5, r1, #31
 8112de0:	3801      	subs	r0, #1
 8112de2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8112de6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8112dea:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8112dee:	d1f0      	bne.n	8112dd2 <__ieee754_sqrt+0xb6>
 8112df0:	4605      	mov	r5, r0
 8112df2:	2420      	movs	r4, #32
 8112df4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8112df8:	4293      	cmp	r3, r2
 8112dfa:	eb0c 0e00 	add.w	lr, ip, r0
 8112dfe:	dc02      	bgt.n	8112e06 <__ieee754_sqrt+0xea>
 8112e00:	d113      	bne.n	8112e2a <__ieee754_sqrt+0x10e>
 8112e02:	458e      	cmp	lr, r1
 8112e04:	d811      	bhi.n	8112e2a <__ieee754_sqrt+0x10e>
 8112e06:	f1be 0f00 	cmp.w	lr, #0
 8112e0a:	eb0e 000c 	add.w	r0, lr, ip
 8112e0e:	da3f      	bge.n	8112e90 <__ieee754_sqrt+0x174>
 8112e10:	2800      	cmp	r0, #0
 8112e12:	db3d      	blt.n	8112e90 <__ieee754_sqrt+0x174>
 8112e14:	f102 0801 	add.w	r8, r2, #1
 8112e18:	1a9b      	subs	r3, r3, r2
 8112e1a:	458e      	cmp	lr, r1
 8112e1c:	bf88      	it	hi
 8112e1e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8112e22:	eba1 010e 	sub.w	r1, r1, lr
 8112e26:	4465      	add	r5, ip
 8112e28:	4642      	mov	r2, r8
 8112e2a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8112e2e:	3c01      	subs	r4, #1
 8112e30:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8112e34:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8112e38:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8112e3c:	d1dc      	bne.n	8112df8 <__ieee754_sqrt+0xdc>
 8112e3e:	4319      	orrs	r1, r3
 8112e40:	d01b      	beq.n	8112e7a <__ieee754_sqrt+0x15e>
 8112e42:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8112ec0 <__ieee754_sqrt+0x1a4>
 8112e46:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8112ec4 <__ieee754_sqrt+0x1a8>
 8112e4a:	e9da 0100 	ldrd	r0, r1, [sl]
 8112e4e:	e9db 2300 	ldrd	r2, r3, [fp]
 8112e52:	f7ed faa1 	bl	8100398 <__aeabi_dsub>
 8112e56:	e9da 8900 	ldrd	r8, r9, [sl]
 8112e5a:	4602      	mov	r2, r0
 8112e5c:	460b      	mov	r3, r1
 8112e5e:	4640      	mov	r0, r8
 8112e60:	4649      	mov	r1, r9
 8112e62:	f7ed fecd 	bl	8100c00 <__aeabi_dcmple>
 8112e66:	b140      	cbz	r0, 8112e7a <__ieee754_sqrt+0x15e>
 8112e68:	f1b5 3fff 	cmp.w	r5, #4294967295
 8112e6c:	e9da 0100 	ldrd	r0, r1, [sl]
 8112e70:	e9db 2300 	ldrd	r2, r3, [fp]
 8112e74:	d10e      	bne.n	8112e94 <__ieee754_sqrt+0x178>
 8112e76:	3601      	adds	r6, #1
 8112e78:	4625      	mov	r5, r4
 8112e7a:	1073      	asrs	r3, r6, #1
 8112e7c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8112e80:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8112e84:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8112e88:	086b      	lsrs	r3, r5, #1
 8112e8a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8112e8e:	e759      	b.n	8112d44 <__ieee754_sqrt+0x28>
 8112e90:	4690      	mov	r8, r2
 8112e92:	e7c1      	b.n	8112e18 <__ieee754_sqrt+0xfc>
 8112e94:	f7ed fa82 	bl	810039c <__adddf3>
 8112e98:	e9da 8900 	ldrd	r8, r9, [sl]
 8112e9c:	4602      	mov	r2, r0
 8112e9e:	460b      	mov	r3, r1
 8112ea0:	4640      	mov	r0, r8
 8112ea2:	4649      	mov	r1, r9
 8112ea4:	f7ed fea2 	bl	8100bec <__aeabi_dcmplt>
 8112ea8:	b120      	cbz	r0, 8112eb4 <__ieee754_sqrt+0x198>
 8112eaa:	1cab      	adds	r3, r5, #2
 8112eac:	bf08      	it	eq
 8112eae:	3601      	addeq	r6, #1
 8112eb0:	3502      	adds	r5, #2
 8112eb2:	e7e2      	b.n	8112e7a <__ieee754_sqrt+0x15e>
 8112eb4:	1c6b      	adds	r3, r5, #1
 8112eb6:	f023 0501 	bic.w	r5, r3, #1
 8112eba:	e7de      	b.n	8112e7a <__ieee754_sqrt+0x15e>
 8112ebc:	7ff00000 	.word	0x7ff00000
 8112ec0:	08113418 	.word	0x08113418
 8112ec4:	08113410 	.word	0x08113410

08112ec8 <_init>:
 8112ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8112eca:	bf00      	nop
 8112ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8112ece:	bc08      	pop	{r3}
 8112ed0:	469e      	mov	lr, r3
 8112ed2:	4770      	bx	lr

08112ed4 <_fini>:
 8112ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8112ed6:	bf00      	nop
 8112ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8112eda:	bc08      	pop	{r3}
 8112edc:	469e      	mov	lr, r3
 8112ede:	4770      	bx	lr
