
AFR_WAYPOINTER_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c18  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003eb0  08003eb0  00004eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee4  08003ee4  0000502c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003ee4  08003ee4  00004ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003eec  08003eec  0000502c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eec  08003eec  00004eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ef0  08003ef0  00004ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  24000000  08003ef4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2400002c  08003f20  0000502c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000f8  08003f20  000050f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001065d  00000000  00000000  0000505a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000205e  00000000  00000000  000156b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  00017718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008bf  00000000  00000000  00018288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000398a8  00000000  00000000  00018b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa78  00000000  00000000  000523ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017bdd4  00000000  00000000  00061e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ddc3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e84  00000000  00000000  001ddc80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001e0b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003e98 	.word	0x08003e98

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	08003e98 	.word	0x08003e98

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000608:	4b49      	ldr	r3, [pc, #292]	@ (8000730 <SystemInit+0x12c>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800060e:	4a48      	ldr	r2, [pc, #288]	@ (8000730 <SystemInit+0x12c>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000618:	4b45      	ldr	r3, [pc, #276]	@ (8000730 <SystemInit+0x12c>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4a44      	ldr	r2, [pc, #272]	@ (8000730 <SystemInit+0x12c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000624:	4b43      	ldr	r3, [pc, #268]	@ (8000734 <SystemInit+0x130>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	2b06      	cmp	r3, #6
 800062e:	d807      	bhi.n	8000640 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000630:	4b40      	ldr	r3, [pc, #256]	@ (8000734 <SystemInit+0x130>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	4a3e      	ldr	r2, [pc, #248]	@ (8000734 <SystemInit+0x130>)
 800063a:	f043 0307 	orr.w	r3, r3, #7
 800063e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <SystemInit+0x134>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <SystemInit+0x134>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800064c:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <SystemInit+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <SystemInit+0x134>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4938      	ldr	r1, [pc, #224]	@ (8000738 <SystemInit+0x134>)
 8000658:	4b38      	ldr	r3, [pc, #224]	@ (800073c <SystemInit+0x138>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <SystemInit+0x130>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <SystemInit+0x130>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f023 030f 	bic.w	r3, r3, #15
 8000672:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <SystemInit+0x130>)
 8000674:	f043 0307 	orr.w	r3, r3, #7
 8000678:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800067a:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <SystemInit+0x134>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <SystemInit+0x134>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <SystemInit+0x134>)
 800068e:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <SystemInit+0x13c>)
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemInit+0x134>)
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <SystemInit+0x140>)
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemInit+0x134>)
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemInit+0x144>)
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800069e:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemInit+0x134>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <SystemInit+0x134>)
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <SystemInit+0x144>)
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemInit+0x134>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemInit+0x134>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <SystemInit+0x144>)
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <SystemInit+0x134>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <SystemInit+0x134>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <SystemInit+0x134>)
 80006c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <SystemInit+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemInit+0x148>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <SystemInit+0x148>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <SystemInit+0x14c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemInit+0x150>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006e6:	d202      	bcs.n	80006ee <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <SystemInit+0x154>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <SystemInit+0x134>)
 80006f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d113      	bne.n	8000724 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SystemInit+0x134>)
 80006fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <SystemInit+0x134>)
 8000704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000708:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <SystemInit+0x158>)
 800070e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000712:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <SystemInit+0x134>)
 8000716:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800071a:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <SystemInit+0x134>)
 800071c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000720:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	52002000 	.word	0x52002000
 8000738:	58024400 	.word	0x58024400
 800073c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000740:	02020200 	.word	0x02020200
 8000744:	01ff0000 	.word	0x01ff0000
 8000748:	01010280 	.word	0x01010280
 800074c:	580000c0 	.word	0x580000c0
 8000750:	5c001000 	.word	0x5c001000
 8000754:	ffff0000 	.word	0xffff0000
 8000758:	51008108 	.word	0x51008108
 800075c:	52004000 	.word	0x52004000

08000760 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <ExitRun0Mode+0x2c>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a08      	ldr	r2, [pc, #32]	@ (800078c <ExitRun0Mode+0x2c>)
 800076a:	f023 0302 	bic.w	r3, r3, #2
 800076e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000770:	bf00      	nop
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <ExitRun0Mode+0x2c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f9      	beq.n	8000772 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	58024800 	.word	0x58024800

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000796:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800079a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800079c:	bf00      	nop
 800079e:	4b37      	ldr	r3, [pc, #220]	@ (800087c <main+0xec>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d004      	beq.n	80007b4 <main+0x24>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	1e5a      	subs	r2, r3, #1
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	dcf4      	bgt.n	800079e <main+0xe>
  if ( timeout < 0 )
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	da01      	bge.n	80007be <main+0x2e>
  {
  Error_Handler();
 80007ba:	f000 f987 	bl	8000acc <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007be:	f000 fbf9 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c2:	f000 f85f 	bl	8000884 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007c6:	4b2d      	ldr	r3, [pc, #180]	@ (800087c <main+0xec>)
 80007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007cc:	4a2b      	ldr	r2, [pc, #172]	@ (800087c <main+0xec>)
 80007ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d6:	4b29      	ldr	r3, [pc, #164]	@ (800087c <main+0xec>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f001 f81d 	bl	8001824 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007ea:	2100      	movs	r1, #0
 80007ec:	2000      	movs	r0, #0
 80007ee:	f001 f833 	bl	8001858 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007f6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007f8:	bf00      	nop
 80007fa:	4b20      	ldr	r3, [pc, #128]	@ (800087c <main+0xec>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000802:	2b00      	cmp	r3, #0
 8000804:	d104      	bne.n	8000810 <main+0x80>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1e5a      	subs	r2, r3, #1
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	dcf4      	bgt.n	80007fa <main+0x6a>
if ( timeout < 0 )
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	da01      	bge.n	800081a <main+0x8a>
{
Error_Handler();
 8000816:	f000 f959 	bl	8000acc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f000 f8af 	bl	800097c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800081e:	2000      	movs	r0, #0
 8000820:	f000 f9d6 	bl	8000bd0 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000824:	2001      	movs	r0, #1
 8000826:	f000 f9d3 	bl	8000bd0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800082a:	2002      	movs	r0, #2
 800082c:	f000 f9d0 	bl	8000bd0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000830:	2101      	movs	r1, #1
 8000832:	2000      	movs	r0, #0
 8000834:	f000 fa6c 	bl	8000d10 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <main+0xf0>)
 800083a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800083e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <main+0xf0>)
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <main+0xf0>)
 8000848:	2200      	movs	r2, #0
 800084a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <main+0xf0>)
 800084e:	2200      	movs	r2, #0
 8000850:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <main+0xf0>)
 8000854:	2200      	movs	r2, #0
 8000856:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000858:	4909      	ldr	r1, [pc, #36]	@ (8000880 <main+0xf0>)
 800085a:	2000      	movs	r0, #0
 800085c:	f000 fae8 	bl	8000e30 <BSP_COM_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <main+0xda>
  {
    Error_Handler();
 8000866:	f000 f931 	bl	8000acc <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_LED_Toggle(LED_YELLOW);
 800086a:	2001      	movs	r0, #1
 800086c:	f000 fa26 	bl	8000cbc <BSP_LED_Toggle>
	  HAL_Delay(333);
 8000870:	f240 104d 	movw	r0, #333	@ 0x14d
 8000874:	f000 fc30 	bl	80010d8 <HAL_Delay>
	  BSP_LED_Toggle(LED_YELLOW);
 8000878:	bf00      	nop
 800087a:	e7f6      	b.n	800086a <main+0xda>
 800087c:	58024400 	.word	0x58024400
 8000880:	24000048 	.word	0x24000048

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b09c      	sub	sp, #112	@ 0x70
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088e:	224c      	movs	r2, #76	@ 0x4c
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f003 fad4 	bl	8003e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2220      	movs	r2, #32
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 face 	bl	8003e40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008a4:	2004      	movs	r0, #4
 80008a6:	f000 ffeb 	bl	8001880 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b31      	ldr	r3, [pc, #196]	@ (8000974 <SystemClock_Config+0xf0>)
 80008b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b2:	4a30      	ldr	r2, [pc, #192]	@ (8000974 <SystemClock_Config+0xf0>)
 80008b4:	f023 0301 	bic.w	r3, r3, #1
 80008b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000974 <SystemClock_Config+0xf0>)
 80008bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000978 <SystemClock_Config+0xf4>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a2b      	ldr	r2, [pc, #172]	@ (8000978 <SystemClock_Config+0xf4>)
 80008ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b29      	ldr	r3, [pc, #164]	@ (8000978 <SystemClock_Config+0xf4>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008dc:	bf00      	nop
 80008de:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <SystemClock_Config+0xf4>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008ea:	d1f8      	bne.n	80008de <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ec:	2302      	movs	r3, #2
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f4:	2340      	movs	r3, #64	@ 0x40
 80008f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f8:	2302      	movs	r3, #2
 80008fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008fc:	2300      	movs	r3, #0
 80008fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000900:	2304      	movs	r3, #4
 8000902:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 41;
 8000904:	2329      	movs	r3, #41	@ 0x29
 8000906:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000908:	2302      	movs	r3, #2
 800090a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800090c:	2305      	movs	r3, #5
 800090e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000910:	2302      	movs	r3, #2
 8000912:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000914:	230c      	movs	r3, #12
 8000916:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000918:	2300      	movs	r3, #0
 800091a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 800091c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000920:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000926:	4618      	mov	r0, r3
 8000928:	f001 f804 	bl	8001934 <HAL_RCC_OscConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000932:	f000 f8cb 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	233f      	movs	r3, #63	@ 0x3f
 8000938:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2303      	movs	r3, #3
 800093c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000942:	2308      	movs	r3, #8
 8000944:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000946:	2340      	movs	r3, #64	@ 0x40
 8000948:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800094a:	2340      	movs	r3, #64	@ 0x40
 800094c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800094e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000952:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000954:	2340      	movs	r3, #64	@ 0x40
 8000956:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2102      	movs	r1, #2
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fc43 	bl	80021e8 <HAL_RCC_ClockConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000968:	f000 f8b0 	bl	8000acc <Error_Handler>
  }
}
 800096c:	bf00      	nop
 800096e:	3770      	adds	r7, #112	@ 0x70
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	58000400 	.word	0x58000400
 8000978:	58024800 	.word	0x58024800

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	4b49      	ldr	r3, [pc, #292]	@ (8000ab8 <MX_GPIO_Init+0x13c>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000998:	4a47      	ldr	r2, [pc, #284]	@ (8000ab8 <MX_GPIO_Init+0x13c>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a2:	4b45      	ldr	r3, [pc, #276]	@ (8000ab8 <MX_GPIO_Init+0x13c>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b41      	ldr	r3, [pc, #260]	@ (8000ab8 <MX_GPIO_Init+0x13c>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b6:	4a40      	ldr	r2, [pc, #256]	@ (8000ab8 <MX_GPIO_Init+0x13c>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ab8 <MX_GPIO_Init+0x13c>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	4b3a      	ldr	r3, [pc, #232]	@ (8000ab8 <MX_GPIO_Init+0x13c>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d4:	4a38      	ldr	r2, [pc, #224]	@ (8000ab8 <MX_GPIO_Init+0x13c>)
 80009d6:	f043 0302 	orr.w	r3, r3, #2
 80009da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009de:	4b36      	ldr	r3, [pc, #216]	@ (8000ab8 <MX_GPIO_Init+0x13c>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e4:	f003 0302 	and.w	r3, r3, #2
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ec:	4b32      	ldr	r3, [pc, #200]	@ (8000ab8 <MX_GPIO_Init+0x13c>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f2:	4a31      	ldr	r2, [pc, #196]	@ (8000ab8 <MX_GPIO_Init+0x13c>)
 80009f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009fc:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab8 <MX_GPIO_Init+0x13c>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a0a:	2332      	movs	r3, #50	@ 0x32
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a1a:	230b      	movs	r3, #11
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4825      	ldr	r0, [pc, #148]	@ (8000abc <MX_GPIO_Init+0x140>)
 8000a26:	f000 fd19 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a2a:	2386      	movs	r3, #134	@ 0x86
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a3a:	230b      	movs	r3, #11
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	481e      	ldr	r0, [pc, #120]	@ (8000ac0 <MX_GPIO_Init+0x144>)
 8000a46:	f000 fd09 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a5c:	230b      	movs	r3, #11
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	4817      	ldr	r0, [pc, #92]	@ (8000ac4 <MX_GPIO_Init+0x148>)
 8000a68:	f000 fcf8 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000a6c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000a7e:	230a      	movs	r3, #10
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	480d      	ldr	r0, [pc, #52]	@ (8000ac0 <MX_GPIO_Init+0x144>)
 8000a8a:	f000 fce7 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000a8e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa0:	230b      	movs	r3, #11
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4807      	ldr	r0, [pc, #28]	@ (8000ac8 <MX_GPIO_Init+0x14c>)
 8000aac:	f000 fcd6 	bl	800145c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	@ 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	58024400 	.word	0x58024400
 8000abc:	58020800 	.word	0x58020800
 8000ac0:	58020000 	.word	0x58020000
 8000ac4:	58020400 	.word	0x58020400
 8000ac8:	58021800 	.word	0x58021800

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <Error_Handler+0x8>

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <HAL_MspInit+0x30>)
 8000ae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ae4:	4a08      	ldr	r2, [pc, #32]	@ (8000b08 <HAL_MspInit+0x30>)
 8000ae6:	f043 0302 	orr.w	r3, r3, #2
 8000aea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000aee:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_MspInit+0x30>)
 8000af0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	58024400 	.word	0x58024400

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <NMI_Handler+0x4>

08000b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <MemManage_Handler+0x4>

08000b24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b62:	f000 fa99 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f000 f940 	bl	8000df4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b78:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000bb4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000b7c:	f7ff fdf0 	bl	8000760 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b80:	f7ff fd40 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	@ (8000bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000baa:	f003 f951 	bl	8003e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bae:	f7ff fdef 	bl	8000790 <main>
  bx  lr
 8000bb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bb4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bb8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bbc:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8000bc0:	08003ef4 	.word	0x08003ef4
  ldr r2, =_sbss
 8000bc4:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8000bc8:	240000f8 	.word	0x240000f8

08000bcc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC3_IRQHandler>
	...

08000bd0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	@ 0x30
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d009      	beq.n	8000bf8 <BSP_LED_Init+0x28>
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d006      	beq.n	8000bf8 <BSP_LED_Init+0x28>
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d003      	beq.n	8000bf8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000bf0:	f06f 0301 	mvn.w	r3, #1
 8000bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bf6:	e055      	b.n	8000ca4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d10f      	bne.n	8000c1e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb0 <BSP_LED_Init+0xe0>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c04:	4a2a      	ldr	r2, [pc, #168]	@ (8000cb0 <BSP_LED_Init+0xe0>)
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c0e:	4b28      	ldr	r3, [pc, #160]	@ (8000cb0 <BSP_LED_Init+0xe0>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	e021      	b.n	8000c62 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d10f      	bne.n	8000c44 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000c24:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <BSP_LED_Init+0xe0>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2a:	4a21      	ldr	r2, [pc, #132]	@ (8000cb0 <BSP_LED_Init+0xe0>)
 8000c2c:	f043 0310 	orr.w	r3, r3, #16
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c34:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb0 <BSP_LED_Init+0xe0>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	e00e      	b.n	8000c62 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000c44:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <BSP_LED_Init+0xe0>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4a:	4a19      	ldr	r2, [pc, #100]	@ (8000cb0 <BSP_LED_Init+0xe0>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c54:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <BSP_LED_Init+0xe0>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4a13      	ldr	r2, [pc, #76]	@ (8000cb4 <BSP_LED_Init+0xe4>)
 8000c66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c6a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb8 <BSP_LED_Init+0xe8>)
 8000c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c80:	f107 0218 	add.w	r2, r7, #24
 8000c84:	4611      	mov	r1, r2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fbe8 	bl	800145c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <BSP_LED_Init+0xe8>)
 8000c90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	4a07      	ldr	r2, [pc, #28]	@ (8000cb4 <BSP_LED_Init+0xe4>)
 8000c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f000 fd8c 	bl	80017bc <HAL_GPIO_WritePin>
  }

  return ret;
 8000ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3730      	adds	r7, #48	@ 0x30
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	58024400 	.word	0x58024400
 8000cb4:	08003ec0 	.word	0x08003ec0
 8000cb8:	2400000c 	.word	0x2400000c

08000cbc <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d009      	beq.n	8000ce4 <BSP_LED_Toggle+0x28>
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d006      	beq.n	8000ce4 <BSP_LED_Toggle+0x28>
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d003      	beq.n	8000ce4 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000cdc:	f06f 0301 	mvn.w	r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	e00b      	b.n	8000cfc <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	4a08      	ldr	r2, [pc, #32]	@ (8000d08 <BSP_LED_Toggle+0x4c>)
 8000ce8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	4907      	ldr	r1, [pc, #28]	@ (8000d0c <BSP_LED_Toggle+0x50>)
 8000cf0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4610      	mov	r0, r2
 8000cf8:	f000 fd79 	bl	80017ee <HAL_GPIO_TogglePin>
  }

  return ret;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2400000c 	.word	0x2400000c
 8000d0c:	08003ec0 	.word	0x08003ec0

08000d10 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	460a      	mov	r2, r1
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000d20:	4b2e      	ldr	r3, [pc, #184]	@ (8000ddc <BSP_PB_Init+0xcc>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d26:	4a2d      	ldr	r2, [pc, #180]	@ (8000ddc <BSP_PB_Init+0xcc>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d30:	4b2a      	ldr	r3, [pc, #168]	@ (8000ddc <BSP_PB_Init+0xcc>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000d3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d42:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000d44:	2302      	movs	r3, #2
 8000d46:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10c      	bne.n	8000d6c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	4a21      	ldr	r2, [pc, #132]	@ (8000de0 <BSP_PB_Init+0xd0>)
 8000d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5e:	f107 020c 	add.w	r2, r7, #12
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 fb79 	bl	800145c <HAL_GPIO_Init>
 8000d6a:	e031      	b.n	8000dd0 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000d6c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d70:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	4a1a      	ldr	r2, [pc, #104]	@ (8000de0 <BSP_PB_Init+0xd0>)
 8000d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7a:	f107 020c 	add.w	r2, r7, #12
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 fb6b 	bl	800145c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	4a16      	ldr	r2, [pc, #88]	@ (8000de4 <BSP_PB_Init+0xd4>)
 8000d8c:	441a      	add	r2, r3
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	4915      	ldr	r1, [pc, #84]	@ (8000de8 <BSP_PB_Init+0xd8>)
 8000d92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d96:	4619      	mov	r1, r3
 8000d98:	4610      	mov	r0, r2
 8000d9a:	f000 fb0e 	bl	80013ba <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	4a10      	ldr	r2, [pc, #64]	@ (8000de4 <BSP_PB_Init+0xd4>)
 8000da4:	1898      	adds	r0, r3, r2
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	4a10      	ldr	r2, [pc, #64]	@ (8000dec <BSP_PB_Init+0xdc>)
 8000daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dae:	461a      	mov	r2, r3
 8000db0:	2100      	movs	r1, #0
 8000db2:	f000 fae3 	bl	800137c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000db6:	2028      	movs	r0, #40	@ 0x28
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <BSP_PB_Init+0xe0>)
 8000dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f000 fa93 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000dc8:	2328      	movs	r3, #40	@ 0x28
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 faa9 	bl	8001322 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3720      	adds	r7, #32
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	24000018 	.word	0x24000018
 8000de4:	24000058 	.word	0x24000058
 8000de8:	08003ec8 	.word	0x08003ec8
 8000dec:	2400001c 	.word	0x2400001c
 8000df0:	24000020 	.word	0x24000020

08000df4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <BSP_PB_IRQHandler+0x20>)
 8000e04:	4413      	add	r3, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 faec 	bl	80013e4 <HAL_EXTI_IRQHandler>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	24000058 	.word	0x24000058

08000e18 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e46:	f06f 0301 	mvn.w	r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	e018      	b.n	8000e80 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2294      	movs	r2, #148	@ 0x94
 8000e52:	fb02 f303 	mul.w	r3, r2, r3
 8000e56:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <BSP_COM_Init+0x5c>)
 8000e58:	4413      	add	r3, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f852 	bl	8000f04 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	2294      	movs	r2, #148	@ 0x94
 8000e64:	fb02 f303 	mul.w	r3, r2, r3
 8000e68:	4a08      	ldr	r2, [pc, #32]	@ (8000e8c <BSP_COM_Init+0x5c>)
 8000e6a:	4413      	add	r3, r2
 8000e6c:	6839      	ldr	r1, [r7, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f80e 	bl	8000e90 <MX_USART3_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d002      	beq.n	8000e80 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000e7a:	f06f 0303 	mvn.w	r3, #3
 8000e7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000e80:	68fb      	ldr	r3, [r7, #12]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	24000060 	.word	0x24000060

08000e90 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <MX_USART3_Init+0x60>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	220c      	movs	r2, #12
 8000eae:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	895b      	ldrh	r3, [r3, #10]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	891b      	ldrh	r3, [r3, #8]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	899b      	ldrh	r3, [r3, #12]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000edc:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f001 ffcc 	bl	8002e7c <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	24000008 	.word	0x24000008

08000ef4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff ff8d 	bl	8000e18 <BSP_PB_Callback>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	@ 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000f0c:	4b27      	ldr	r3, [pc, #156]	@ (8000fac <COM1_MspInit+0xa8>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f12:	4a26      	ldr	r2, [pc, #152]	@ (8000fac <COM1_MspInit+0xa8>)
 8000f14:	f043 0308 	orr.w	r3, r3, #8
 8000f18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f1c:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <COM1_MspInit+0xa8>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f22:	f003 0308 	and.w	r3, r3, #8
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000f2a:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <COM1_MspInit+0xa8>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f30:	4a1e      	ldr	r2, [pc, #120]	@ (8000fac <COM1_MspInit+0xa8>)
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <COM1_MspInit+0xa8>)
 8000f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f40:	f003 0308 	and.w	r3, r3, #8
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000f48:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <COM1_MspInit+0xa8>)
 8000f4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f4e:	4a17      	ldr	r2, [pc, #92]	@ (8000fac <COM1_MspInit+0xa8>)
 8000f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f58:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <COM1_MspInit+0xa8>)
 8000f5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8000f66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f6a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f70:	2302      	movs	r3, #2
 8000f72:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000f78:	2307      	movs	r3, #7
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	480b      	ldr	r0, [pc, #44]	@ (8000fb0 <COM1_MspInit+0xac>)
 8000f84:	f000 fa6a 	bl	800145c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000f88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f8c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000f92:	2307      	movs	r3, #7
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <COM1_MspInit+0xac>)
 8000f9e:	f000 fa5d 	bl	800145c <HAL_GPIO_Init>
}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	@ 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	58024400 	.word	0x58024400
 8000fb0:	58020c00 	.word	0x58020c00

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f000 f98c 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fc0:	f001 fac8 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_Init+0x68>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	0a1b      	lsrs	r3, r3, #8
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	4913      	ldr	r1, [pc, #76]	@ (8001020 <HAL_Init+0x6c>)
 8000fd2:	5ccb      	ldrb	r3, [r1, r3]
 8000fd4:	f003 031f 	and.w	r3, r3, #31
 8000fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fdc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <HAL_Init+0x68>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8001020 <HAL_Init+0x6c>)
 8000fe8:	5cd3      	ldrb	r3, [r2, r3]
 8000fea:	f003 031f 	and.w	r3, r3, #31
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8001024 <HAL_Init+0x70>)
 8000ff6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <HAL_Init+0x74>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 f814 	bl	800102c <HAL_InitTick>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e002      	b.n	8001014 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800100e:	f7ff fd63 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	58024400 	.word	0x58024400
 8001020:	08003eb0 	.word	0x08003eb0
 8001024:	24000004 	.word	0x24000004
 8001028:	24000000 	.word	0x24000000

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001034:	4b15      	ldr	r3, [pc, #84]	@ (800108c <HAL_InitTick+0x60>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e021      	b.n	8001084 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001040:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <HAL_InitTick+0x64>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <HAL_InitTick+0x60>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f971 	bl	800133e <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 f93b 	bl	80012ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	@ (8001094 <HAL_InitTick+0x68>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	24000028 	.word	0x24000028
 8001090:	24000000 	.word	0x24000000
 8001094:	24000024 	.word	0x24000024

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	24000028 	.word	0x24000028
 80010bc:	240000f4 	.word	0x240000f4

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	240000f4 	.word	0x240000f4

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d005      	beq.n	80010fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <HAL_Delay+0x44>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010fe:	bf00      	nop
 8001100:	f7ff ffde 	bl	80010c0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8f7      	bhi.n	8001100 <HAL_Delay+0x28>
  {
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	24000028 	.word	0x24000028

08001120 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001124:	4b03      	ldr	r3, [pc, #12]	@ (8001134 <HAL_GetREVID+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	0c1b      	lsrs	r3, r3, #16
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	5c001000 	.word	0x5c001000

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <__NVIC_SetPriorityGrouping+0x40>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	4313      	orrs	r3, r2
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	@ (8001178 <__NVIC_SetPriorityGrouping+0x40>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00
 800117c:	05fa0000 	.word	0x05fa0000

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4907      	ldr	r1, [pc, #28]	@ (80011d4 <__NVIC_EnableIRQ+0x38>)
 80011b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	@ (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	@ (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	@ 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	@ 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7ff ff8e 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff29 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012fc:	f7ff ff40 	bl	8001180 <__NVIC_GetPriorityGrouping>
 8001300:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff ff90 	bl	800122c <NVIC_EncodePriority>
 800130c:	4602      	mov	r2, r0
 800130e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff5f 	bl	80011d8 <__NVIC_SetPriority>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800132c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff33 	bl	800119c <__NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffa4 	bl	8001294 <SysTick_Config>
 800134c:	4603      	mov	r3, r0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_GetCurrentCPUID+0x20>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001364:	2b70      	cmp	r3, #112	@ 0x70
 8001366:	d101      	bne.n	800136c <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8001368:	2303      	movs	r3, #3
 800136a:	e000      	b.n	800136e <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 800136c:	2301      	movs	r3, #1
  }
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	460b      	mov	r3, r1
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e00a      	b.n	80013ae <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001398:	7afb      	ldrb	r3, [r7, #11]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d103      	bne.n	80013a6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	605a      	str	r2, [r3, #4]
      break;
 80013a4:	e002      	b.n	80013ac <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	75fb      	strb	r3, [r7, #23]
      break;
 80013aa:	bf00      	nop
  }

  return status;
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	371c      	adds	r7, #28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e003      	b.n	80013d6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80013d4:	2300      	movs	r3, #0
  }
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	0c1b      	lsrs	r3, r3, #16
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 031f 	and.w	r3, r3, #31
 8001400:	2201      	movs	r2, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001408:	f7ff ffa6 	bl	8001358 <HAL_GetCurrentCPUID>
 800140c:	4603      	mov	r3, r0
 800140e:	2b03      	cmp	r3, #3
 8001410:	d105      	bne.n	800141e <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	011a      	lsls	r2, r3, #4
 8001416:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <HAL_EXTI_IRQHandler+0x70>)
 8001418:	4413      	add	r3, r2
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	e004      	b.n	8001428 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	011a      	lsls	r2, r3, #4
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <HAL_EXTI_IRQHandler+0x74>)
 8001424:	4413      	add	r3, r2
 8001426:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4013      	ands	r3, r2
 8001430:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d009      	beq.n	800144c <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4798      	blx	r3
    }
  }
}
 800144c:	bf00      	nop
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	58000088 	.word	0x58000088
 8001458:	580000c8 	.word	0x580000c8

0800145c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	@ 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800146a:	4b89      	ldr	r3, [pc, #548]	@ (8001690 <HAL_GPIO_Init+0x234>)
 800146c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800146e:	e194      	b.n	800179a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2101      	movs	r1, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8186 	beq.w	8001794 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b01      	cmp	r3, #1
 8001492:	d005      	beq.n	80014a0 <HAL_GPIO_Init+0x44>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d130      	bne.n	8001502 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014d6:	2201      	movs	r2, #1
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	f003 0201 	and.w	r2, r3, #1
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b03      	cmp	r3, #3
 800150c:	d017      	beq.n	800153e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	2203      	movs	r2, #3
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d123      	bne.n	8001592 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	08da      	lsrs	r2, r3, #3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3208      	adds	r2, #8
 8001552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	220f      	movs	r2, #15
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	08da      	lsrs	r2, r3, #3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3208      	adds	r2, #8
 800158c:	69b9      	ldr	r1, [r7, #24]
 800158e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	2203      	movs	r2, #3
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0203 	and.w	r2, r3, #3
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80e0 	beq.w	8001794 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001694 <HAL_GPIO_Init+0x238>)
 80015d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015da:	4a2e      	ldr	r2, [pc, #184]	@ (8001694 <HAL_GPIO_Init+0x238>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001694 <HAL_GPIO_Init+0x238>)
 80015e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f2:	4a29      	ldr	r2, [pc, #164]	@ (8001698 <HAL_GPIO_Init+0x23c>)
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	220f      	movs	r2, #15
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a20      	ldr	r2, [pc, #128]	@ (800169c <HAL_GPIO_Init+0x240>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d052      	beq.n	80016c4 <HAL_GPIO_Init+0x268>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a1f      	ldr	r2, [pc, #124]	@ (80016a0 <HAL_GPIO_Init+0x244>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d031      	beq.n	800168a <HAL_GPIO_Init+0x22e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a1e      	ldr	r2, [pc, #120]	@ (80016a4 <HAL_GPIO_Init+0x248>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d02b      	beq.n	8001686 <HAL_GPIO_Init+0x22a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a1d      	ldr	r2, [pc, #116]	@ (80016a8 <HAL_GPIO_Init+0x24c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d025      	beq.n	8001682 <HAL_GPIO_Init+0x226>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a1c      	ldr	r2, [pc, #112]	@ (80016ac <HAL_GPIO_Init+0x250>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d01f      	beq.n	800167e <HAL_GPIO_Init+0x222>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a1b      	ldr	r2, [pc, #108]	@ (80016b0 <HAL_GPIO_Init+0x254>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d019      	beq.n	800167a <HAL_GPIO_Init+0x21e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a1a      	ldr	r2, [pc, #104]	@ (80016b4 <HAL_GPIO_Init+0x258>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d013      	beq.n	8001676 <HAL_GPIO_Init+0x21a>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a19      	ldr	r2, [pc, #100]	@ (80016b8 <HAL_GPIO_Init+0x25c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d00d      	beq.n	8001672 <HAL_GPIO_Init+0x216>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a18      	ldr	r2, [pc, #96]	@ (80016bc <HAL_GPIO_Init+0x260>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d007      	beq.n	800166e <HAL_GPIO_Init+0x212>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a17      	ldr	r2, [pc, #92]	@ (80016c0 <HAL_GPIO_Init+0x264>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d101      	bne.n	800166a <HAL_GPIO_Init+0x20e>
 8001666:	2309      	movs	r3, #9
 8001668:	e02d      	b.n	80016c6 <HAL_GPIO_Init+0x26a>
 800166a:	230a      	movs	r3, #10
 800166c:	e02b      	b.n	80016c6 <HAL_GPIO_Init+0x26a>
 800166e:	2308      	movs	r3, #8
 8001670:	e029      	b.n	80016c6 <HAL_GPIO_Init+0x26a>
 8001672:	2307      	movs	r3, #7
 8001674:	e027      	b.n	80016c6 <HAL_GPIO_Init+0x26a>
 8001676:	2306      	movs	r3, #6
 8001678:	e025      	b.n	80016c6 <HAL_GPIO_Init+0x26a>
 800167a:	2305      	movs	r3, #5
 800167c:	e023      	b.n	80016c6 <HAL_GPIO_Init+0x26a>
 800167e:	2304      	movs	r3, #4
 8001680:	e021      	b.n	80016c6 <HAL_GPIO_Init+0x26a>
 8001682:	2303      	movs	r3, #3
 8001684:	e01f      	b.n	80016c6 <HAL_GPIO_Init+0x26a>
 8001686:	2302      	movs	r3, #2
 8001688:	e01d      	b.n	80016c6 <HAL_GPIO_Init+0x26a>
 800168a:	2301      	movs	r3, #1
 800168c:	e01b      	b.n	80016c6 <HAL_GPIO_Init+0x26a>
 800168e:	bf00      	nop
 8001690:	58000080 	.word	0x58000080
 8001694:	58024400 	.word	0x58024400
 8001698:	58000400 	.word	0x58000400
 800169c:	58020000 	.word	0x58020000
 80016a0:	58020400 	.word	0x58020400
 80016a4:	58020800 	.word	0x58020800
 80016a8:	58020c00 	.word	0x58020c00
 80016ac:	58021000 	.word	0x58021000
 80016b0:	58021400 	.word	0x58021400
 80016b4:	58021800 	.word	0x58021800
 80016b8:	58021c00 	.word	0x58021c00
 80016bc:	58022000 	.word	0x58022000
 80016c0:	58022400 	.word	0x58022400
 80016c4:	2300      	movs	r3, #0
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	f002 0203 	and.w	r2, r2, #3
 80016cc:	0092      	lsls	r2, r2, #2
 80016ce:	4093      	lsls	r3, r2
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016d6:	4938      	ldr	r1, [pc, #224]	@ (80017b8 <HAL_GPIO_Init+0x35c>)
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	3302      	adds	r3, #2
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800170a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001738:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	3301      	adds	r3, #1
 8001798:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa22 f303 	lsr.w	r3, r2, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f47f ae63 	bne.w	8001470 <HAL_GPIO_Init+0x14>
  }
}
 80017aa:	bf00      	nop
 80017ac:	bf00      	nop
 80017ae:	3724      	adds	r7, #36	@ 0x24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	58000400 	.word	0x58000400

080017bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
 80017c8:	4613      	mov	r3, r2
 80017ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017cc:	787b      	ldrb	r3, [r7, #1]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80017d8:	e003      	b.n	80017e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017da:	887b      	ldrh	r3, [r7, #2]
 80017dc:	041a      	lsls	r2, r3, #16
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	619a      	str	r2, [r3, #24]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b085      	sub	sp, #20
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	460b      	mov	r3, r1
 80017f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001800:	887a      	ldrh	r2, [r7, #2]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4013      	ands	r3, r2
 8001806:	041a      	lsls	r2, r3, #16
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43d9      	mvns	r1, r3
 800180c:	887b      	ldrh	r3, [r7, #2]
 800180e:	400b      	ands	r3, r1
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	619a      	str	r2, [r3, #24]
}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800182c:	4a08      	ldr	r2, [pc, #32]	@ (8001850 <HAL_HSEM_FastTake+0x2c>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3320      	adds	r3, #32
 8001832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001836:	4a07      	ldr	r2, [pc, #28]	@ (8001854 <HAL_HSEM_FastTake+0x30>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d101      	bne.n	8001840 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	e000      	b.n	8001842 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	58026400 	.word	0x58026400
 8001854:	80000300 	.word	0x80000300

08001858 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001862:	4906      	ldr	r1, [pc, #24]	@ (800187c <HAL_HSEM_Release+0x24>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	58026400 	.word	0x58026400

08001880 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001888:	4b29      	ldr	r3, [pc, #164]	@ (8001930 <HAL_PWREx_ConfigSupply+0xb0>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	2b06      	cmp	r3, #6
 8001892:	d00a      	beq.n	80018aa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001894:	4b26      	ldr	r3, [pc, #152]	@ (8001930 <HAL_PWREx_ConfigSupply+0xb0>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d001      	beq.n	80018a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e040      	b.n	8001928 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e03e      	b.n	8001928 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80018aa:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80018b2:	491f      	ldr	r1, [pc, #124]	@ (8001930 <HAL_PWREx_ConfigSupply+0xb0>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80018ba:	f7ff fc01 	bl	80010c0 <HAL_GetTick>
 80018be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018c0:	e009      	b.n	80018d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018c2:	f7ff fbfd 	bl	80010c0 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018d0:	d901      	bls.n	80018d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e028      	b.n	8001928 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018d6:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <HAL_PWREx_ConfigSupply+0xb0>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018e2:	d1ee      	bne.n	80018c2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b1e      	cmp	r3, #30
 80018e8:	d008      	beq.n	80018fc <HAL_PWREx_ConfigSupply+0x7c>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80018ee:	d005      	beq.n	80018fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b1d      	cmp	r3, #29
 80018f4:	d002      	beq.n	80018fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b2d      	cmp	r3, #45	@ 0x2d
 80018fa:	d114      	bne.n	8001926 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80018fc:	f7ff fbe0 	bl	80010c0 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001902:	e009      	b.n	8001918 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001904:	f7ff fbdc 	bl	80010c0 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001912:	d901      	bls.n	8001918 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e007      	b.n	8001928 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <HAL_PWREx_ConfigSupply+0xb0>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001924:	d1ee      	bne.n	8001904 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	58024800 	.word	0x58024800

08001934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08c      	sub	sp, #48	@ 0x30
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d102      	bne.n	8001948 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	f000 bc48 	b.w	80021d8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 8088 	beq.w	8001a66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001956:	4b99      	ldr	r3, [pc, #612]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800195e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001960:	4b96      	ldr	r3, [pc, #600]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001964:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001968:	2b10      	cmp	r3, #16
 800196a:	d007      	beq.n	800197c <HAL_RCC_OscConfig+0x48>
 800196c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800196e:	2b18      	cmp	r3, #24
 8001970:	d111      	bne.n	8001996 <HAL_RCC_OscConfig+0x62>
 8001972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d10c      	bne.n	8001996 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197c:	4b8f      	ldr	r3, [pc, #572]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d06d      	beq.n	8001a64 <HAL_RCC_OscConfig+0x130>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d169      	bne.n	8001a64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	f000 bc21 	b.w	80021d8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x7a>
 80019a0:	4b86      	ldr	r3, [pc, #536]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a85      	ldr	r2, [pc, #532]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 80019a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	e02e      	b.n	8001a0c <HAL_RCC_OscConfig+0xd8>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x9c>
 80019b6:	4b81      	ldr	r3, [pc, #516]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a80      	ldr	r2, [pc, #512]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 80019bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b7e      	ldr	r3, [pc, #504]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a7d      	ldr	r2, [pc, #500]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 80019c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e01d      	b.n	8001a0c <HAL_RCC_OscConfig+0xd8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0xc0>
 80019da:	4b78      	ldr	r3, [pc, #480]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a77      	ldr	r2, [pc, #476]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 80019e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b75      	ldr	r3, [pc, #468]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a74      	ldr	r2, [pc, #464]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e00b      	b.n	8001a0c <HAL_RCC_OscConfig+0xd8>
 80019f4:	4b71      	ldr	r3, [pc, #452]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a70      	ldr	r2, [pc, #448]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 80019fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b6e      	ldr	r3, [pc, #440]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a6d      	ldr	r2, [pc, #436]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d013      	beq.n	8001a3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff fb54 	bl	80010c0 <HAL_GetTick>
 8001a18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff fb50 	bl	80010c0 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	@ 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e3d4      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a2e:	4b63      	ldr	r3, [pc, #396]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0xe8>
 8001a3a:	e014      	b.n	8001a66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fb40 	bl	80010c0 <HAL_GetTick>
 8001a40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff fb3c 	bl	80010c0 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	@ 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e3c0      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a56:	4b59      	ldr	r3, [pc, #356]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x110>
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 80ca 	beq.w	8001c08 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a74:	4b51      	ldr	r3, [pc, #324]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a7e:	4b4f      	ldr	r3, [pc, #316]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a82:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <HAL_RCC_OscConfig+0x166>
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	2b18      	cmp	r3, #24
 8001a8e:	d156      	bne.n	8001b3e <HAL_RCC_OscConfig+0x20a>
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d151      	bne.n	8001b3e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a9a:	4b48      	ldr	r3, [pc, #288]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d005      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x17e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e392      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ab2:	4b42      	ldr	r3, [pc, #264]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 0219 	bic.w	r2, r3, #25
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	493f      	ldr	r1, [pc, #252]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fafc 	bl	80010c0 <HAL_GetTick>
 8001ac8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001acc:	f7ff faf8 	bl	80010c0 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e37c      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ade:	4b37      	ldr	r3, [pc, #220]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aea:	f7ff fb19 	bl	8001120 <HAL_GetREVID>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d817      	bhi.n	8001b28 <HAL_RCC_OscConfig+0x1f4>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	2b40      	cmp	r3, #64	@ 0x40
 8001afe:	d108      	bne.n	8001b12 <HAL_RCC_OscConfig+0x1de>
 8001b00:	4b2e      	ldr	r3, [pc, #184]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b08:	4a2c      	ldr	r2, [pc, #176]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b0e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b10:	e07a      	b.n	8001c08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	4b2a      	ldr	r3, [pc, #168]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	031b      	lsls	r3, r3, #12
 8001b20:	4926      	ldr	r1, [pc, #152]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b26:	e06f      	b.n	8001c08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b24      	ldr	r3, [pc, #144]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	4921      	ldr	r1, [pc, #132]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b3c:	e064      	b.n	8001c08 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d047      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b46:	4b1d      	ldr	r3, [pc, #116]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 0219 	bic.w	r2, r3, #25
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	491a      	ldr	r1, [pc, #104]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff fab2 	bl	80010c0 <HAL_GetTick>
 8001b5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b60:	f7ff faae 	bl	80010c0 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e332      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b72:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7e:	f7ff facf 	bl	8001120 <HAL_GetREVID>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d819      	bhi.n	8001bc0 <HAL_RCC_OscConfig+0x28c>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2b40      	cmp	r3, #64	@ 0x40
 8001b92:	d108      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x272>
 8001b94:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b9c:	4a07      	ldr	r2, [pc, #28]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba2:	6053      	str	r3, [r2, #4]
 8001ba4:	e030      	b.n	8001c08 <HAL_RCC_OscConfig+0x2d4>
 8001ba6:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	031b      	lsls	r3, r3, #12
 8001bb4:	4901      	ldr	r1, [pc, #4]	@ (8001bbc <HAL_RCC_OscConfig+0x288>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
 8001bba:	e025      	b.n	8001c08 <HAL_RCC_OscConfig+0x2d4>
 8001bbc:	58024400 	.word	0x58024400
 8001bc0:	4b9a      	ldr	r3, [pc, #616]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	061b      	lsls	r3, r3, #24
 8001bce:	4997      	ldr	r1, [pc, #604]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
 8001bd4:	e018      	b.n	8001c08 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd6:	4b95      	ldr	r3, [pc, #596]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a94      	ldr	r2, [pc, #592]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be2:	f7ff fa6d 	bl	80010c0 <HAL_GetTick>
 8001be6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bea:	f7ff fa69 	bl	80010c0 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e2ed      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bfc:	4b8b      	ldr	r3, [pc, #556]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1f0      	bne.n	8001bea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80a9 	beq.w	8001d68 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c16:	4b85      	ldr	r3, [pc, #532]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c20:	4b82      	ldr	r3, [pc, #520]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c24:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d007      	beq.n	8001c3c <HAL_RCC_OscConfig+0x308>
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2b18      	cmp	r3, #24
 8001c30:	d13a      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x374>
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d135      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c3c:	4b7b      	ldr	r3, [pc, #492]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_OscConfig+0x320>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2b80      	cmp	r3, #128	@ 0x80
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e2c1      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c54:	f7ff fa64 	bl	8001120 <HAL_GetREVID>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d817      	bhi.n	8001c92 <HAL_RCC_OscConfig+0x35e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	2b20      	cmp	r3, #32
 8001c68:	d108      	bne.n	8001c7c <HAL_RCC_OscConfig+0x348>
 8001c6a:	4b70      	ldr	r3, [pc, #448]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001c72:	4a6e      	ldr	r2, [pc, #440]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001c74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c78:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c7a:	e075      	b.n	8001d68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c7c:	4b6b      	ldr	r3, [pc, #428]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	069b      	lsls	r3, r3, #26
 8001c8a:	4968      	ldr	r1, [pc, #416]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c90:	e06a      	b.n	8001d68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c92:	4b66      	ldr	r3, [pc, #408]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	061b      	lsls	r3, r3, #24
 8001ca0:	4962      	ldr	r1, [pc, #392]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ca6:	e05f      	b.n	8001d68 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d042      	beq.n	8001d36 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001cb0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a5d      	ldr	r2, [pc, #372]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fa00 	bl	80010c0 <HAL_GetTick>
 8001cc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001cc4:	f7ff f9fc 	bl	80010c0 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e280      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cd6:	4b55      	ldr	r3, [pc, #340]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ce2:	f7ff fa1d 	bl	8001120 <HAL_GetREVID>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d817      	bhi.n	8001d20 <HAL_RCC_OscConfig+0x3ec>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d108      	bne.n	8001d0a <HAL_RCC_OscConfig+0x3d6>
 8001cf8:	4b4c      	ldr	r3, [pc, #304]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001d00:	4a4a      	ldr	r2, [pc, #296]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001d02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d06:	6053      	str	r3, [r2, #4]
 8001d08:	e02e      	b.n	8001d68 <HAL_RCC_OscConfig+0x434>
 8001d0a:	4b48      	ldr	r3, [pc, #288]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	069b      	lsls	r3, r3, #26
 8001d18:	4944      	ldr	r1, [pc, #272]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]
 8001d1e:	e023      	b.n	8001d68 <HAL_RCC_OscConfig+0x434>
 8001d20:	4b42      	ldr	r3, [pc, #264]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	061b      	lsls	r3, r3, #24
 8001d2e:	493f      	ldr	r1, [pc, #252]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	60cb      	str	r3, [r1, #12]
 8001d34:	e018      	b.n	8001d68 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d36:	4b3d      	ldr	r3, [pc, #244]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001d3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7ff f9bd 	bl	80010c0 <HAL_GetTick>
 8001d46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d4a:	f7ff f9b9 	bl	80010c0 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e23d      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d5c:	4b33      	ldr	r3, [pc, #204]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f0      	bne.n	8001d4a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d036      	beq.n	8001de2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d019      	beq.n	8001db0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d80:	4a2a      	ldr	r2, [pc, #168]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff f99a 	bl	80010c0 <HAL_GetTick>
 8001d8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d90:	f7ff f996 	bl	80010c0 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e21a      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001da2:	4b22      	ldr	r3, [pc, #136]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x45c>
 8001dae:	e018      	b.n	8001de2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001db4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001db6:	f023 0301 	bic.w	r3, r3, #1
 8001dba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbc:	f7ff f980 	bl	80010c0 <HAL_GetTick>
 8001dc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7ff f97c 	bl	80010c0 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e200      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dd6:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d039      	beq.n	8001e62 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d01c      	beq.n	8001e30 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001df6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001dfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e02:	f7ff f95d 	bl	80010c0 <HAL_GetTick>
 8001e06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e0a:	f7ff f959 	bl	80010c0 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e1dd      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e1c:	4b03      	ldr	r3, [pc, #12]	@ (8001e2c <HAL_RCC_OscConfig+0x4f8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x4d6>
 8001e28:	e01b      	b.n	8001e62 <HAL_RCC_OscConfig+0x52e>
 8001e2a:	bf00      	nop
 8001e2c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e30:	4b9b      	ldr	r3, [pc, #620]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a9a      	ldr	r2, [pc, #616]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001e36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e3c:	f7ff f940 	bl	80010c0 <HAL_GetTick>
 8001e40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e44:	f7ff f93c 	bl	80010c0 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e1c0      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e56:	4b92      	ldr	r3, [pc, #584]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8081 	beq.w	8001f72 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e70:	4b8c      	ldr	r3, [pc, #560]	@ (80020a4 <HAL_RCC_OscConfig+0x770>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a8b      	ldr	r2, [pc, #556]	@ (80020a4 <HAL_RCC_OscConfig+0x770>)
 8001e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e7c:	f7ff f920 	bl	80010c0 <HAL_GetTick>
 8001e80:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e84:	f7ff f91c 	bl	80010c0 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	@ 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e1a0      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e96:	4b83      	ldr	r3, [pc, #524]	@ (80020a4 <HAL_RCC_OscConfig+0x770>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d106      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x584>
 8001eaa:	4b7d      	ldr	r3, [pc, #500]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eae:	4a7c      	ldr	r2, [pc, #496]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb6:	e02d      	b.n	8001f14 <HAL_RCC_OscConfig+0x5e0>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10c      	bne.n	8001eda <HAL_RCC_OscConfig+0x5a6>
 8001ec0:	4b77      	ldr	r3, [pc, #476]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec4:	4a76      	ldr	r2, [pc, #472]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001ec6:	f023 0301 	bic.w	r3, r3, #1
 8001eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ecc:	4b74      	ldr	r3, [pc, #464]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed0:	4a73      	ldr	r2, [pc, #460]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001ed2:	f023 0304 	bic.w	r3, r3, #4
 8001ed6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed8:	e01c      	b.n	8001f14 <HAL_RCC_OscConfig+0x5e0>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b05      	cmp	r3, #5
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x5c8>
 8001ee2:	4b6f      	ldr	r3, [pc, #444]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee6:	4a6e      	ldr	r2, [pc, #440]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eee:	4b6c      	ldr	r3, [pc, #432]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef2:	4a6b      	ldr	r2, [pc, #428]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001efa:	e00b      	b.n	8001f14 <HAL_RCC_OscConfig+0x5e0>
 8001efc:	4b68      	ldr	r3, [pc, #416]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f00:	4a67      	ldr	r2, [pc, #412]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f08:	4b65      	ldr	r3, [pc, #404]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0c:	4a64      	ldr	r2, [pc, #400]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001f0e:	f023 0304 	bic.w	r3, r3, #4
 8001f12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d015      	beq.n	8001f48 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7ff f8d0 	bl	80010c0 <HAL_GetTick>
 8001f20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	f7ff f8cc 	bl	80010c0 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e14e      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f3a:	4b59      	ldr	r3, [pc, #356]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0ee      	beq.n	8001f24 <HAL_RCC_OscConfig+0x5f0>
 8001f46:	e014      	b.n	8001f72 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f48:	f7ff f8ba 	bl	80010c0 <HAL_GetTick>
 8001f4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f7ff f8b6 	bl	80010c0 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e138      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f66:	4b4e      	ldr	r3, [pc, #312]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ee      	bne.n	8001f50 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 812d 	beq.w	80021d6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f7c:	4b48      	ldr	r3, [pc, #288]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f84:	2b18      	cmp	r3, #24
 8001f86:	f000 80bd 	beq.w	8002104 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	f040 809e 	bne.w	80020d0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f94:	4b42      	ldr	r3, [pc, #264]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a41      	ldr	r2, [pc, #260]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001f9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7ff f88e 	bl	80010c0 <HAL_GetTick>
 8001fa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7ff f88a 	bl	80010c0 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e10e      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fba:	4b39      	ldr	r3, [pc, #228]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc6:	4b36      	ldr	r3, [pc, #216]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001fc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fca:	4b37      	ldr	r3, [pc, #220]	@ (80020a8 <HAL_RCC_OscConfig+0x774>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	4931      	ldr	r1, [pc, #196]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	628b      	str	r3, [r1, #40]	@ 0x28
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	025b      	lsls	r3, r3, #9
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	041b      	lsls	r3, r3, #16
 8001ffe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002008:	3b01      	subs	r3, #1
 800200a:	061b      	lsls	r3, r3, #24
 800200c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002010:	4923      	ldr	r1, [pc, #140]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8002012:	4313      	orrs	r3, r2
 8002014:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002016:	4b22      	ldr	r3, [pc, #136]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8002018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201a:	4a21      	ldr	r2, [pc, #132]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002022:	4b1f      	ldr	r3, [pc, #124]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8002024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002026:	4b21      	ldr	r3, [pc, #132]	@ (80020ac <HAL_RCC_OscConfig+0x778>)
 8002028:	4013      	ands	r3, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800202e:	00d2      	lsls	r2, r2, #3
 8002030:	491b      	ldr	r1, [pc, #108]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8002032:	4313      	orrs	r3, r2
 8002034:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002036:	4b1a      	ldr	r3, [pc, #104]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8002038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203a:	f023 020c 	bic.w	r2, r3, #12
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	4917      	ldr	r1, [pc, #92]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8002044:	4313      	orrs	r3, r2
 8002046:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002048:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 800204a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204c:	f023 0202 	bic.w	r2, r3, #2
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002054:	4912      	ldr	r1, [pc, #72]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8002056:	4313      	orrs	r3, r2
 8002058:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800205a:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 800205c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205e:	4a10      	ldr	r2, [pc, #64]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002064:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002066:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8002068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206a:	4a0d      	ldr	r2, [pc, #52]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 800206c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002070:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002072:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8002074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002076:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8002078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800207c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800207e:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8002080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002082:	4a07      	ldr	r2, [pc, #28]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800208a:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a04      	ldr	r2, [pc, #16]	@ (80020a0 <HAL_RCC_OscConfig+0x76c>)
 8002090:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002096:	f7ff f813 	bl	80010c0 <HAL_GetTick>
 800209a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800209c:	e011      	b.n	80020c2 <HAL_RCC_OscConfig+0x78e>
 800209e:	bf00      	nop
 80020a0:	58024400 	.word	0x58024400
 80020a4:	58024800 	.word	0x58024800
 80020a8:	fffffc0c 	.word	0xfffffc0c
 80020ac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b0:	f7ff f806 	bl	80010c0 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e08a      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020c2:	4b47      	ldr	r3, [pc, #284]	@ (80021e0 <HAL_RCC_OscConfig+0x8ac>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x77c>
 80020ce:	e082      	b.n	80021d6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d0:	4b43      	ldr	r3, [pc, #268]	@ (80021e0 <HAL_RCC_OscConfig+0x8ac>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a42      	ldr	r2, [pc, #264]	@ (80021e0 <HAL_RCC_OscConfig+0x8ac>)
 80020d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7fe fff0 	bl	80010c0 <HAL_GetTick>
 80020e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e4:	f7fe ffec 	bl	80010c0 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e070      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020f6:	4b3a      	ldr	r3, [pc, #232]	@ (80021e0 <HAL_RCC_OscConfig+0x8ac>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x7b0>
 8002102:	e068      	b.n	80021d6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002104:	4b36      	ldr	r3, [pc, #216]	@ (80021e0 <HAL_RCC_OscConfig+0x8ac>)
 8002106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002108:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800210a:	4b35      	ldr	r3, [pc, #212]	@ (80021e0 <HAL_RCC_OscConfig+0x8ac>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002114:	2b01      	cmp	r3, #1
 8002116:	d031      	beq.n	800217c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f003 0203 	and.w	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002122:	429a      	cmp	r2, r3
 8002124:	d12a      	bne.n	800217c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	429a      	cmp	r2, r3
 8002134:	d122      	bne.n	800217c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002140:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d11a      	bne.n	800217c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	0a5b      	lsrs	r3, r3, #9
 800214a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002152:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002154:	429a      	cmp	r2, r3
 8002156:	d111      	bne.n	800217c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	0c1b      	lsrs	r3, r3, #16
 800215c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002164:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002166:	429a      	cmp	r2, r3
 8002168:	d108      	bne.n	800217c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	0e1b      	lsrs	r3, r3, #24
 800216e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002176:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e02b      	b.n	80021d8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002180:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <HAL_RCC_OscConfig+0x8ac>)
 8002182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002184:	08db      	lsrs	r3, r3, #3
 8002186:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800218a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	429a      	cmp	r2, r3
 8002194:	d01f      	beq.n	80021d6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002196:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <HAL_RCC_OscConfig+0x8ac>)
 8002198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219a:	4a11      	ldr	r2, [pc, #68]	@ (80021e0 <HAL_RCC_OscConfig+0x8ac>)
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021a2:	f7fe ff8d 	bl	80010c0 <HAL_GetTick>
 80021a6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80021a8:	bf00      	nop
 80021aa:	f7fe ff89 	bl	80010c0 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d0f9      	beq.n	80021aa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021b6:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <HAL_RCC_OscConfig+0x8ac>)
 80021b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ba:	4b0a      	ldr	r3, [pc, #40]	@ (80021e4 <HAL_RCC_OscConfig+0x8b0>)
 80021bc:	4013      	ands	r3, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021c2:	00d2      	lsls	r2, r2, #3
 80021c4:	4906      	ldr	r1, [pc, #24]	@ (80021e0 <HAL_RCC_OscConfig+0x8ac>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80021ca:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <HAL_RCC_OscConfig+0x8ac>)
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ce:	4a04      	ldr	r2, [pc, #16]	@ (80021e0 <HAL_RCC_OscConfig+0x8ac>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3730      	adds	r7, #48	@ 0x30
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	58024400 	.word	0x58024400
 80021e4:	ffff0007 	.word	0xffff0007

080021e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e19c      	b.n	8002536 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b8a      	ldr	r3, [pc, #552]	@ (8002428 <HAL_RCC_ClockConfig+0x240>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d910      	bls.n	800222c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b87      	ldr	r3, [pc, #540]	@ (8002428 <HAL_RCC_ClockConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 020f 	bic.w	r2, r3, #15
 8002212:	4985      	ldr	r1, [pc, #532]	@ (8002428 <HAL_RCC_ClockConfig+0x240>)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b83      	ldr	r3, [pc, #524]	@ (8002428 <HAL_RCC_ClockConfig+0x240>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e184      	b.n	8002536 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d010      	beq.n	800225a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	4b7b      	ldr	r3, [pc, #492]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002244:	429a      	cmp	r2, r3
 8002246:	d908      	bls.n	800225a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002248:	4b78      	ldr	r3, [pc, #480]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	4975      	ldr	r1, [pc, #468]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 8002256:	4313      	orrs	r3, r2
 8002258:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d010      	beq.n	8002288 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	4b70      	ldr	r3, [pc, #448]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002272:	429a      	cmp	r2, r3
 8002274:	d908      	bls.n	8002288 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002276:	4b6d      	ldr	r3, [pc, #436]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	496a      	ldr	r1, [pc, #424]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 8002284:	4313      	orrs	r3, r2
 8002286:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b00      	cmp	r3, #0
 8002292:	d010      	beq.n	80022b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699a      	ldr	r2, [r3, #24]
 8002298:	4b64      	ldr	r3, [pc, #400]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d908      	bls.n	80022b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022a4:	4b61      	ldr	r3, [pc, #388]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	495e      	ldr	r1, [pc, #376]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d010      	beq.n	80022e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	4b59      	ldr	r3, [pc, #356]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d908      	bls.n	80022e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80022d2:	4b56      	ldr	r3, [pc, #344]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	4953      	ldr	r1, [pc, #332]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d010      	beq.n	8002312 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	4b4d      	ldr	r3, [pc, #308]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d908      	bls.n	8002312 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002300:	4b4a      	ldr	r3, [pc, #296]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f023 020f 	bic.w	r2, r3, #15
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4947      	ldr	r1, [pc, #284]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 800230e:	4313      	orrs	r3, r2
 8002310:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d055      	beq.n	80023ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800231e:	4b43      	ldr	r3, [pc, #268]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	4940      	ldr	r1, [pc, #256]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 800232c:	4313      	orrs	r3, r2
 800232e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d107      	bne.n	8002348 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002338:	4b3c      	ldr	r3, [pc, #240]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d121      	bne.n	8002388 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0f6      	b.n	8002536 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d107      	bne.n	8002360 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002350:	4b36      	ldr	r3, [pc, #216]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d115      	bne.n	8002388 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0ea      	b.n	8002536 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d107      	bne.n	8002378 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002368:	4b30      	ldr	r3, [pc, #192]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0de      	b.n	8002536 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002378:	4b2c      	ldr	r3, [pc, #176]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0d6      	b.n	8002536 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002388:	4b28      	ldr	r3, [pc, #160]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f023 0207 	bic.w	r2, r3, #7
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4925      	ldr	r1, [pc, #148]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 8002396:	4313      	orrs	r3, r2
 8002398:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800239a:	f7fe fe91 	bl	80010c0 <HAL_GetTick>
 800239e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a0:	e00a      	b.n	80023b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a2:	f7fe fe8d 	bl	80010c0 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e0be      	b.n	8002536 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b8:	4b1c      	ldr	r3, [pc, #112]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d1eb      	bne.n	80023a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d010      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	4b14      	ldr	r3, [pc, #80]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d208      	bcs.n	80023f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e6:	4b11      	ldr	r3, [pc, #68]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f023 020f 	bic.w	r2, r3, #15
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	490e      	ldr	r1, [pc, #56]	@ (800242c <HAL_RCC_ClockConfig+0x244>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_RCC_ClockConfig+0x240>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d214      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b08      	ldr	r3, [pc, #32]	@ (8002428 <HAL_RCC_ClockConfig+0x240>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 020f 	bic.w	r2, r3, #15
 800240e:	4906      	ldr	r1, [pc, #24]	@ (8002428 <HAL_RCC_ClockConfig+0x240>)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <HAL_RCC_ClockConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d005      	beq.n	8002430 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e086      	b.n	8002536 <HAL_RCC_ClockConfig+0x34e>
 8002428:	52002000 	.word	0x52002000
 800242c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d010      	beq.n	800245e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	4b3f      	ldr	r3, [pc, #252]	@ (8002540 <HAL_RCC_ClockConfig+0x358>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002448:	429a      	cmp	r2, r3
 800244a:	d208      	bcs.n	800245e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800244c:	4b3c      	ldr	r3, [pc, #240]	@ (8002540 <HAL_RCC_ClockConfig+0x358>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	4939      	ldr	r1, [pc, #228]	@ (8002540 <HAL_RCC_ClockConfig+0x358>)
 800245a:	4313      	orrs	r3, r2
 800245c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d010      	beq.n	800248c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	4b34      	ldr	r3, [pc, #208]	@ (8002540 <HAL_RCC_ClockConfig+0x358>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002476:	429a      	cmp	r2, r3
 8002478:	d208      	bcs.n	800248c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800247a:	4b31      	ldr	r3, [pc, #196]	@ (8002540 <HAL_RCC_ClockConfig+0x358>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	492e      	ldr	r1, [pc, #184]	@ (8002540 <HAL_RCC_ClockConfig+0x358>)
 8002488:	4313      	orrs	r3, r2
 800248a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b00      	cmp	r3, #0
 8002496:	d010      	beq.n	80024ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699a      	ldr	r2, [r3, #24]
 800249c:	4b28      	ldr	r3, [pc, #160]	@ (8002540 <HAL_RCC_ClockConfig+0x358>)
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d208      	bcs.n	80024ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024a8:	4b25      	ldr	r3, [pc, #148]	@ (8002540 <HAL_RCC_ClockConfig+0x358>)
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	4922      	ldr	r1, [pc, #136]	@ (8002540 <HAL_RCC_ClockConfig+0x358>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d010      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69da      	ldr	r2, [r3, #28]
 80024ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002540 <HAL_RCC_ClockConfig+0x358>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d208      	bcs.n	80024e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80024d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <HAL_RCC_ClockConfig+0x358>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	4917      	ldr	r1, [pc, #92]	@ (8002540 <HAL_RCC_ClockConfig+0x358>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024e8:	f000 f834 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b14      	ldr	r3, [pc, #80]	@ (8002540 <HAL_RCC_ClockConfig+0x358>)
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	0a1b      	lsrs	r3, r3, #8
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	4912      	ldr	r1, [pc, #72]	@ (8002544 <HAL_RCC_ClockConfig+0x35c>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
 8002504:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002506:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <HAL_RCC_ClockConfig+0x358>)
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	4a0d      	ldr	r2, [pc, #52]	@ (8002544 <HAL_RCC_ClockConfig+0x35c>)
 8002510:	5cd3      	ldrb	r3, [r2, r3]
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	fa22 f303 	lsr.w	r3, r2, r3
 800251c:	4a0a      	ldr	r2, [pc, #40]	@ (8002548 <HAL_RCC_ClockConfig+0x360>)
 800251e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002520:	4a0a      	ldr	r2, [pc, #40]	@ (800254c <HAL_RCC_ClockConfig+0x364>)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002526:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <HAL_RCC_ClockConfig+0x368>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fd7e 	bl	800102c <HAL_InitTick>
 8002530:	4603      	mov	r3, r0
 8002532:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	58024400 	.word	0x58024400
 8002544:	08003eb0 	.word	0x08003eb0
 8002548:	24000004 	.word	0x24000004
 800254c:	24000000 	.word	0x24000000
 8002550:	24000024 	.word	0x24000024

08002554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	@ 0x24
 8002558:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800255a:	4bb3      	ldr	r3, [pc, #716]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002562:	2b18      	cmp	r3, #24
 8002564:	f200 8155 	bhi.w	8002812 <HAL_RCC_GetSysClockFreq+0x2be>
 8002568:	a201      	add	r2, pc, #4	@ (adr r2, 8002570 <HAL_RCC_GetSysClockFreq+0x1c>)
 800256a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256e:	bf00      	nop
 8002570:	080025d5 	.word	0x080025d5
 8002574:	08002813 	.word	0x08002813
 8002578:	08002813 	.word	0x08002813
 800257c:	08002813 	.word	0x08002813
 8002580:	08002813 	.word	0x08002813
 8002584:	08002813 	.word	0x08002813
 8002588:	08002813 	.word	0x08002813
 800258c:	08002813 	.word	0x08002813
 8002590:	080025fb 	.word	0x080025fb
 8002594:	08002813 	.word	0x08002813
 8002598:	08002813 	.word	0x08002813
 800259c:	08002813 	.word	0x08002813
 80025a0:	08002813 	.word	0x08002813
 80025a4:	08002813 	.word	0x08002813
 80025a8:	08002813 	.word	0x08002813
 80025ac:	08002813 	.word	0x08002813
 80025b0:	08002601 	.word	0x08002601
 80025b4:	08002813 	.word	0x08002813
 80025b8:	08002813 	.word	0x08002813
 80025bc:	08002813 	.word	0x08002813
 80025c0:	08002813 	.word	0x08002813
 80025c4:	08002813 	.word	0x08002813
 80025c8:	08002813 	.word	0x08002813
 80025cc:	08002813 	.word	0x08002813
 80025d0:	08002607 	.word	0x08002607
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025d4:	4b94      	ldr	r3, [pc, #592]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d009      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80025e0:	4b91      	ldr	r3, [pc, #580]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	08db      	lsrs	r3, r3, #3
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	4a90      	ldr	r2, [pc, #576]	@ (800282c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
 80025f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80025f2:	e111      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80025f4:	4b8d      	ldr	r3, [pc, #564]	@ (800282c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025f6:	61bb      	str	r3, [r7, #24]
      break;
 80025f8:	e10e      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80025fa:	4b8d      	ldr	r3, [pc, #564]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025fc:	61bb      	str	r3, [r7, #24]
      break;
 80025fe:	e10b      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002600:	4b8c      	ldr	r3, [pc, #560]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002602:	61bb      	str	r3, [r7, #24]
      break;
 8002604:	e108      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002606:	4b88      	ldr	r3, [pc, #544]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002610:	4b85      	ldr	r3, [pc, #532]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800261a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800261c:	4b82      	ldr	r3, [pc, #520]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800261e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002626:	4b80      	ldr	r3, [pc, #512]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800262a:	08db      	lsrs	r3, r3, #3
 800262c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800263e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80e1 	beq.w	800280c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b02      	cmp	r3, #2
 800264e:	f000 8083 	beq.w	8002758 <HAL_RCC_GetSysClockFreq+0x204>
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b02      	cmp	r3, #2
 8002656:	f200 80a1 	bhi.w	800279c <HAL_RCC_GetSysClockFreq+0x248>
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_RCC_GetSysClockFreq+0x114>
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d056      	beq.n	8002714 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002666:	e099      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002668:	4b6f      	ldr	r3, [pc, #444]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b00      	cmp	r3, #0
 8002672:	d02d      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002674:	4b6c      	ldr	r3, [pc, #432]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	4a6b      	ldr	r2, [pc, #428]	@ (800282c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
 8002684:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	ee07 3a90 	vmov	s15, r3
 800268c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	ee07 3a90 	vmov	s15, r3
 8002696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800269a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800269e:	4b62      	ldr	r3, [pc, #392]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a6:	ee07 3a90 	vmov	s15, r3
 80026aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80026b2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002838 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80026ce:	e087      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026da:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800283c <HAL_RCC_GetSysClockFreq+0x2e8>
 80026de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026e2:	4b51      	ldr	r3, [pc, #324]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ea:	ee07 3a90 	vmov	s15, r3
 80026ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80026f6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002838 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800270a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002712:	e065      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800271e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002840 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002726:	4b40      	ldr	r3, [pc, #256]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272e:	ee07 3a90 	vmov	s15, r3
 8002732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002736:	ed97 6a02 	vldr	s12, [r7, #8]
 800273a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002838 <HAL_RCC_GetSysClockFreq+0x2e4>
 800273e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002746:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800274a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800274e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002752:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002756:	e043      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	ee07 3a90 	vmov	s15, r3
 800275e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002762:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002844 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800276a:	4b2f      	ldr	r3, [pc, #188]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800277a:	ed97 6a02 	vldr	s12, [r7, #8]
 800277e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002838 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800278a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800278e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002796:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800279a:	e021      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	ee07 3a90 	vmov	s15, r3
 80027a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002840 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b6:	ee07 3a90 	vmov	s15, r3
 80027ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027be:	ed97 6a02 	vldr	s12, [r7, #8]
 80027c2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002838 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80027e0:	4b11      	ldr	r3, [pc, #68]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e4:	0a5b      	lsrs	r3, r3, #9
 80027e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027ea:	3301      	adds	r3, #1
 80027ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80027fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002804:	ee17 3a90 	vmov	r3, s15
 8002808:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800280a:	e005      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]
      break;
 8002810:	e002      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002812:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002814:	61bb      	str	r3, [r7, #24]
      break;
 8002816:	bf00      	nop
  }

  return sysclockfreq;
 8002818:	69bb      	ldr	r3, [r7, #24]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3724      	adds	r7, #36	@ 0x24
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	58024400 	.word	0x58024400
 800282c:	03d09000 	.word	0x03d09000
 8002830:	003d0900 	.word	0x003d0900
 8002834:	017d7840 	.word	0x017d7840
 8002838:	46000000 	.word	0x46000000
 800283c:	4c742400 	.word	0x4c742400
 8002840:	4a742400 	.word	0x4a742400
 8002844:	4bbebc20 	.word	0x4bbebc20

08002848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800284e:	f7ff fe81 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 8002852:	4602      	mov	r2, r0
 8002854:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <HAL_RCC_GetHCLKFreq+0x50>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	490f      	ldr	r1, [pc, #60]	@ (800289c <HAL_RCC_GetHCLKFreq+0x54>)
 8002860:	5ccb      	ldrb	r3, [r1, r3]
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800286c:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <HAL_RCC_GetHCLKFreq+0x50>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f003 030f 	and.w	r3, r3, #15
 8002874:	4a09      	ldr	r2, [pc, #36]	@ (800289c <HAL_RCC_GetHCLKFreq+0x54>)
 8002876:	5cd3      	ldrb	r3, [r2, r3]
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	4a07      	ldr	r2, [pc, #28]	@ (80028a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002884:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002886:	4a07      	ldr	r2, [pc, #28]	@ (80028a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800288c:	4b04      	ldr	r3, [pc, #16]	@ (80028a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800288e:	681b      	ldr	r3, [r3, #0]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	58024400 	.word	0x58024400
 800289c:	08003eb0 	.word	0x08003eb0
 80028a0:	24000004 	.word	0x24000004
 80028a4:	24000000 	.word	0x24000000

080028a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80028ac:	f7ff ffcc 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	4904      	ldr	r1, [pc, #16]	@ (80028d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028be:	5ccb      	ldrb	r3, [r1, r3]
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	58024400 	.word	0x58024400
 80028d0:	08003eb0 	.word	0x08003eb0

080028d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80028d8:	f7ff ffb6 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4904      	ldr	r1, [pc, #16]	@ (80028fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	58024400 	.word	0x58024400
 80028fc:	08003eb0 	.word	0x08003eb0

08002900 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002904:	f7ff ffa0 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4904      	ldr	r1, [pc, #16]	@ (8002928 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	58024400 	.word	0x58024400
 8002928:	08003eb0 	.word	0x08003eb0

0800292c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800292c:	b480      	push	{r7}
 800292e:	b089      	sub	sp, #36	@ 0x24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002934:	4ba1      	ldr	r3, [pc, #644]	@ (8002bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800293e:	4b9f      	ldr	r3, [pc, #636]	@ (8002bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002942:	0b1b      	lsrs	r3, r3, #12
 8002944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002948:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800294a:	4b9c      	ldr	r3, [pc, #624]	@ (8002bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800294c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002956:	4b99      	ldr	r3, [pc, #612]	@ (8002bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295a:	08db      	lsrs	r3, r3, #3
 800295c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	fb02 f303 	mul.w	r3, r2, r3
 8002966:	ee07 3a90 	vmov	s15, r3
 800296a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800296e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8111 	beq.w	8002b9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b02      	cmp	r3, #2
 800297e:	f000 8083 	beq.w	8002a88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	2b02      	cmp	r3, #2
 8002986:	f200 80a1 	bhi.w	8002acc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d056      	beq.n	8002a44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002996:	e099      	b.n	8002acc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002998:	4b88      	ldr	r3, [pc, #544]	@ (8002bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d02d      	beq.n	8002a00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029a4:	4b85      	ldr	r3, [pc, #532]	@ (8002bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	08db      	lsrs	r3, r3, #3
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	4a84      	ldr	r2, [pc, #528]	@ (8002bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
 80029b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	ee07 3a90 	vmov	s15, r3
 80029bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	ee07 3a90 	vmov	s15, r3
 80029c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ce:	4b7b      	ldr	r3, [pc, #492]	@ (8002bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d6:	ee07 3a90 	vmov	s15, r3
 80029da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029de:	ed97 6a03 	vldr	s12, [r7, #12]
 80029e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80029e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80029fe:	e087      	b.n	8002b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a0a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a12:	4b6a      	ldr	r3, [pc, #424]	@ (8002bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a1a:	ee07 3a90 	vmov	s15, r3
 8002a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a26:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a42:	e065      	b.n	8002b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002bcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a56:	4b59      	ldr	r3, [pc, #356]	@ (8002bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a6a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a86:	e043      	b.n	8002b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	ee07 3a90 	vmov	s15, r3
 8002a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a92:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a9a:	4b48      	ldr	r3, [pc, #288]	@ (8002bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa2:	ee07 3a90 	vmov	s15, r3
 8002aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8002aae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002aca:	e021      	b.n	8002b10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	ee07 3a90 	vmov	s15, r3
 8002ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002bcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ade:	4b37      	ldr	r3, [pc, #220]	@ (8002bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8002af2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002b10:	4b2a      	ldr	r3, [pc, #168]	@ (8002bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b14:	0a5b      	lsrs	r3, r3, #9
 8002b16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b1a:	ee07 3a90 	vmov	s15, r3
 8002b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b36:	ee17 2a90 	vmov	r2, s15
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b42:	0c1b      	lsrs	r3, r3, #16
 8002b44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b58:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b64:	ee17 2a90 	vmov	r2, s15
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002b6c:	4b13      	ldr	r3, [pc, #76]	@ (8002bbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b70:	0e1b      	lsrs	r3, r3, #24
 8002b72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b86:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b92:	ee17 2a90 	vmov	r2, s15
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002b9a:	e008      	b.n	8002bae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
}
 8002bae:	bf00      	nop
 8002bb0:	3724      	adds	r7, #36	@ 0x24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	03d09000 	.word	0x03d09000
 8002bc4:	46000000 	.word	0x46000000
 8002bc8:	4c742400 	.word	0x4c742400
 8002bcc:	4a742400 	.word	0x4a742400
 8002bd0:	4bbebc20 	.word	0x4bbebc20

08002bd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b089      	sub	sp, #36	@ 0x24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002bdc:	4ba1      	ldr	r3, [pc, #644]	@ (8002e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002be6:	4b9f      	ldr	r3, [pc, #636]	@ (8002e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bea:	0d1b      	lsrs	r3, r3, #20
 8002bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bf0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002bf2:	4b9c      	ldr	r3, [pc, #624]	@ (8002e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf6:	0a1b      	lsrs	r3, r3, #8
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002bfe:	4b99      	ldr	r3, [pc, #612]	@ (8002e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c02:	08db      	lsrs	r3, r3, #3
 8002c04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8111 	beq.w	8002e44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	f000 8083 	beq.w	8002d30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	f200 80a1 	bhi.w	8002d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d056      	beq.n	8002cec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002c3e:	e099      	b.n	8002d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c40:	4b88      	ldr	r3, [pc, #544]	@ (8002e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d02d      	beq.n	8002ca8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c4c:	4b85      	ldr	r3, [pc, #532]	@ (8002e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	08db      	lsrs	r3, r3, #3
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	4a84      	ldr	r2, [pc, #528]	@ (8002e68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	ee07 3a90 	vmov	s15, r3
 8002c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	ee07 3a90 	vmov	s15, r3
 8002c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c76:	4b7b      	ldr	r3, [pc, #492]	@ (8002e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7e:	ee07 3a90 	vmov	s15, r3
 8002c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002e6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002ca6:	e087      	b.n	8002db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002e70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cba:	4b6a      	ldr	r3, [pc, #424]	@ (8002e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8002cce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002e6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002cea:	e065      	b.n	8002db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	ee07 3a90 	vmov	s15, r3
 8002cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cfe:	4b59      	ldr	r3, [pc, #356]	@ (8002e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d12:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002e6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d2e:	e043      	b.n	8002db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	ee07 3a90 	vmov	s15, r3
 8002d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d3a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002e78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d42:	4b48      	ldr	r3, [pc, #288]	@ (8002e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d4a:	ee07 3a90 	vmov	s15, r3
 8002d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d56:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002e6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d72:	e021      	b.n	8002db8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d86:	4b37      	ldr	r3, [pc, #220]	@ (8002e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d8e:	ee07 3a90 	vmov	s15, r3
 8002d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d9a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002e6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002db6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002db8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbc:	0a5b      	lsrs	r3, r3, #9
 8002dbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dc2:	ee07 3a90 	vmov	s15, r3
 8002dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002dce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002dd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8002dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dde:	ee17 2a90 	vmov	r2, s15
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002de6:	4b1f      	ldr	r3, [pc, #124]	@ (8002e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	0c1b      	lsrs	r3, r3, #16
 8002dec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002df0:	ee07 3a90 	vmov	s15, r3
 8002df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002dfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e00:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e0c:	ee17 2a90 	vmov	r2, s15
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002e14:	4b13      	ldr	r3, [pc, #76]	@ (8002e64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	0e1b      	lsrs	r3, r3, #24
 8002e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e1e:	ee07 3a90 	vmov	s15, r3
 8002e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e3a:	ee17 2a90 	vmov	r2, s15
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002e42:	e008      	b.n	8002e56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
}
 8002e56:	bf00      	nop
 8002e58:	3724      	adds	r7, #36	@ 0x24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	58024400 	.word	0x58024400
 8002e68:	03d09000 	.word	0x03d09000
 8002e6c:	46000000 	.word	0x46000000
 8002e70:	4c742400 	.word	0x4c742400
 8002e74:	4a742400 	.word	0x4a742400
 8002e78:	4bbebc20 	.word	0x4bbebc20

08002e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e042      	b.n	8002f14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d106      	bne.n	8002ea6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f83b 	bl	8002f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2224      	movs	r2, #36	@ 0x24
 8002eaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0201 	bic.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fd9a 	bl	8003a00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f82f 	bl	8002f30 <UART_SetConfig>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e01b      	b.n	8002f14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fe19 	bl	8003b44 <UART_CheckIdleState>
 8002f12:	4603      	mov	r3, r0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f34:	b092      	sub	sp, #72	@ 0x48
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4bbe      	ldr	r3, [pc, #760]	@ (8003258 <UART_SetConfig+0x328>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4ab3      	ldr	r2, [pc, #716]	@ (800325c <UART_SetConfig+0x32c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	4baf      	ldr	r3, [pc, #700]	@ (8003260 <UART_SetConfig+0x330>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb6:	f023 010f 	bic.w	r1, r3, #15
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4aa6      	ldr	r2, [pc, #664]	@ (8003264 <UART_SetConfig+0x334>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d177      	bne.n	80030c0 <UART_SetConfig+0x190>
 8002fd0:	4ba5      	ldr	r3, [pc, #660]	@ (8003268 <UART_SetConfig+0x338>)
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fd8:	2b28      	cmp	r3, #40	@ 0x28
 8002fda:	d86d      	bhi.n	80030b8 <UART_SetConfig+0x188>
 8002fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe4 <UART_SetConfig+0xb4>)
 8002fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe2:	bf00      	nop
 8002fe4:	08003089 	.word	0x08003089
 8002fe8:	080030b9 	.word	0x080030b9
 8002fec:	080030b9 	.word	0x080030b9
 8002ff0:	080030b9 	.word	0x080030b9
 8002ff4:	080030b9 	.word	0x080030b9
 8002ff8:	080030b9 	.word	0x080030b9
 8002ffc:	080030b9 	.word	0x080030b9
 8003000:	080030b9 	.word	0x080030b9
 8003004:	08003091 	.word	0x08003091
 8003008:	080030b9 	.word	0x080030b9
 800300c:	080030b9 	.word	0x080030b9
 8003010:	080030b9 	.word	0x080030b9
 8003014:	080030b9 	.word	0x080030b9
 8003018:	080030b9 	.word	0x080030b9
 800301c:	080030b9 	.word	0x080030b9
 8003020:	080030b9 	.word	0x080030b9
 8003024:	08003099 	.word	0x08003099
 8003028:	080030b9 	.word	0x080030b9
 800302c:	080030b9 	.word	0x080030b9
 8003030:	080030b9 	.word	0x080030b9
 8003034:	080030b9 	.word	0x080030b9
 8003038:	080030b9 	.word	0x080030b9
 800303c:	080030b9 	.word	0x080030b9
 8003040:	080030b9 	.word	0x080030b9
 8003044:	080030a1 	.word	0x080030a1
 8003048:	080030b9 	.word	0x080030b9
 800304c:	080030b9 	.word	0x080030b9
 8003050:	080030b9 	.word	0x080030b9
 8003054:	080030b9 	.word	0x080030b9
 8003058:	080030b9 	.word	0x080030b9
 800305c:	080030b9 	.word	0x080030b9
 8003060:	080030b9 	.word	0x080030b9
 8003064:	080030a9 	.word	0x080030a9
 8003068:	080030b9 	.word	0x080030b9
 800306c:	080030b9 	.word	0x080030b9
 8003070:	080030b9 	.word	0x080030b9
 8003074:	080030b9 	.word	0x080030b9
 8003078:	080030b9 	.word	0x080030b9
 800307c:	080030b9 	.word	0x080030b9
 8003080:	080030b9 	.word	0x080030b9
 8003084:	080030b1 	.word	0x080030b1
 8003088:	2301      	movs	r3, #1
 800308a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800308e:	e222      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003090:	2304      	movs	r3, #4
 8003092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003096:	e21e      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003098:	2308      	movs	r3, #8
 800309a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800309e:	e21a      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80030a0:	2310      	movs	r3, #16
 80030a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030a6:	e216      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80030a8:	2320      	movs	r3, #32
 80030aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030ae:	e212      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80030b0:	2340      	movs	r3, #64	@ 0x40
 80030b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030b6:	e20e      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80030b8:	2380      	movs	r3, #128	@ 0x80
 80030ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030be:	e20a      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a69      	ldr	r2, [pc, #420]	@ (800326c <UART_SetConfig+0x33c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d130      	bne.n	800312c <UART_SetConfig+0x1fc>
 80030ca:	4b67      	ldr	r3, [pc, #412]	@ (8003268 <UART_SetConfig+0x338>)
 80030cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	2b05      	cmp	r3, #5
 80030d4:	d826      	bhi.n	8003124 <UART_SetConfig+0x1f4>
 80030d6:	a201      	add	r2, pc, #4	@ (adr r2, 80030dc <UART_SetConfig+0x1ac>)
 80030d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030dc:	080030f5 	.word	0x080030f5
 80030e0:	080030fd 	.word	0x080030fd
 80030e4:	08003105 	.word	0x08003105
 80030e8:	0800310d 	.word	0x0800310d
 80030ec:	08003115 	.word	0x08003115
 80030f0:	0800311d 	.word	0x0800311d
 80030f4:	2300      	movs	r3, #0
 80030f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030fa:	e1ec      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80030fc:	2304      	movs	r3, #4
 80030fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003102:	e1e8      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003104:	2308      	movs	r3, #8
 8003106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800310a:	e1e4      	b.n	80034d6 <UART_SetConfig+0x5a6>
 800310c:	2310      	movs	r3, #16
 800310e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003112:	e1e0      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003114:	2320      	movs	r3, #32
 8003116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800311a:	e1dc      	b.n	80034d6 <UART_SetConfig+0x5a6>
 800311c:	2340      	movs	r3, #64	@ 0x40
 800311e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003122:	e1d8      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003124:	2380      	movs	r3, #128	@ 0x80
 8003126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800312a:	e1d4      	b.n	80034d6 <UART_SetConfig+0x5a6>
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a4f      	ldr	r2, [pc, #316]	@ (8003270 <UART_SetConfig+0x340>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d130      	bne.n	8003198 <UART_SetConfig+0x268>
 8003136:	4b4c      	ldr	r3, [pc, #304]	@ (8003268 <UART_SetConfig+0x338>)
 8003138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	2b05      	cmp	r3, #5
 8003140:	d826      	bhi.n	8003190 <UART_SetConfig+0x260>
 8003142:	a201      	add	r2, pc, #4	@ (adr r2, 8003148 <UART_SetConfig+0x218>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	08003161 	.word	0x08003161
 800314c:	08003169 	.word	0x08003169
 8003150:	08003171 	.word	0x08003171
 8003154:	08003179 	.word	0x08003179
 8003158:	08003181 	.word	0x08003181
 800315c:	08003189 	.word	0x08003189
 8003160:	2300      	movs	r3, #0
 8003162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003166:	e1b6      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003168:	2304      	movs	r3, #4
 800316a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800316e:	e1b2      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003170:	2308      	movs	r3, #8
 8003172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003176:	e1ae      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003178:	2310      	movs	r3, #16
 800317a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800317e:	e1aa      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003180:	2320      	movs	r3, #32
 8003182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003186:	e1a6      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003188:	2340      	movs	r3, #64	@ 0x40
 800318a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800318e:	e1a2      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003190:	2380      	movs	r3, #128	@ 0x80
 8003192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003196:	e19e      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a35      	ldr	r2, [pc, #212]	@ (8003274 <UART_SetConfig+0x344>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d130      	bne.n	8003204 <UART_SetConfig+0x2d4>
 80031a2:	4b31      	ldr	r3, [pc, #196]	@ (8003268 <UART_SetConfig+0x338>)
 80031a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	2b05      	cmp	r3, #5
 80031ac:	d826      	bhi.n	80031fc <UART_SetConfig+0x2cc>
 80031ae:	a201      	add	r2, pc, #4	@ (adr r2, 80031b4 <UART_SetConfig+0x284>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031cd 	.word	0x080031cd
 80031b8:	080031d5 	.word	0x080031d5
 80031bc:	080031dd 	.word	0x080031dd
 80031c0:	080031e5 	.word	0x080031e5
 80031c4:	080031ed 	.word	0x080031ed
 80031c8:	080031f5 	.word	0x080031f5
 80031cc:	2300      	movs	r3, #0
 80031ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031d2:	e180      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80031d4:	2304      	movs	r3, #4
 80031d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031da:	e17c      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80031dc:	2308      	movs	r3, #8
 80031de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031e2:	e178      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80031e4:	2310      	movs	r3, #16
 80031e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031ea:	e174      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80031ec:	2320      	movs	r3, #32
 80031ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031f2:	e170      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80031f4:	2340      	movs	r3, #64	@ 0x40
 80031f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031fa:	e16c      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80031fc:	2380      	movs	r3, #128	@ 0x80
 80031fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003202:	e168      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1b      	ldr	r2, [pc, #108]	@ (8003278 <UART_SetConfig+0x348>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d142      	bne.n	8003294 <UART_SetConfig+0x364>
 800320e:	4b16      	ldr	r3, [pc, #88]	@ (8003268 <UART_SetConfig+0x338>)
 8003210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	2b05      	cmp	r3, #5
 8003218:	d838      	bhi.n	800328c <UART_SetConfig+0x35c>
 800321a:	a201      	add	r2, pc, #4	@ (adr r2, 8003220 <UART_SetConfig+0x2f0>)
 800321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003220:	08003239 	.word	0x08003239
 8003224:	08003241 	.word	0x08003241
 8003228:	08003249 	.word	0x08003249
 800322c:	08003251 	.word	0x08003251
 8003230:	0800327d 	.word	0x0800327d
 8003234:	08003285 	.word	0x08003285
 8003238:	2300      	movs	r3, #0
 800323a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800323e:	e14a      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003240:	2304      	movs	r3, #4
 8003242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003246:	e146      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003248:	2308      	movs	r3, #8
 800324a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800324e:	e142      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003250:	2310      	movs	r3, #16
 8003252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003256:	e13e      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003258:	cfff69f3 	.word	0xcfff69f3
 800325c:	58000c00 	.word	0x58000c00
 8003260:	11fff4ff 	.word	0x11fff4ff
 8003264:	40011000 	.word	0x40011000
 8003268:	58024400 	.word	0x58024400
 800326c:	40004400 	.word	0x40004400
 8003270:	40004800 	.word	0x40004800
 8003274:	40004c00 	.word	0x40004c00
 8003278:	40005000 	.word	0x40005000
 800327c:	2320      	movs	r3, #32
 800327e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003282:	e128      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003284:	2340      	movs	r3, #64	@ 0x40
 8003286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800328a:	e124      	b.n	80034d6 <UART_SetConfig+0x5a6>
 800328c:	2380      	movs	r3, #128	@ 0x80
 800328e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003292:	e120      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4acb      	ldr	r2, [pc, #812]	@ (80035c8 <UART_SetConfig+0x698>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d176      	bne.n	800338c <UART_SetConfig+0x45c>
 800329e:	4bcb      	ldr	r3, [pc, #812]	@ (80035cc <UART_SetConfig+0x69c>)
 80032a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032a6:	2b28      	cmp	r3, #40	@ 0x28
 80032a8:	d86c      	bhi.n	8003384 <UART_SetConfig+0x454>
 80032aa:	a201      	add	r2, pc, #4	@ (adr r2, 80032b0 <UART_SetConfig+0x380>)
 80032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b0:	08003355 	.word	0x08003355
 80032b4:	08003385 	.word	0x08003385
 80032b8:	08003385 	.word	0x08003385
 80032bc:	08003385 	.word	0x08003385
 80032c0:	08003385 	.word	0x08003385
 80032c4:	08003385 	.word	0x08003385
 80032c8:	08003385 	.word	0x08003385
 80032cc:	08003385 	.word	0x08003385
 80032d0:	0800335d 	.word	0x0800335d
 80032d4:	08003385 	.word	0x08003385
 80032d8:	08003385 	.word	0x08003385
 80032dc:	08003385 	.word	0x08003385
 80032e0:	08003385 	.word	0x08003385
 80032e4:	08003385 	.word	0x08003385
 80032e8:	08003385 	.word	0x08003385
 80032ec:	08003385 	.word	0x08003385
 80032f0:	08003365 	.word	0x08003365
 80032f4:	08003385 	.word	0x08003385
 80032f8:	08003385 	.word	0x08003385
 80032fc:	08003385 	.word	0x08003385
 8003300:	08003385 	.word	0x08003385
 8003304:	08003385 	.word	0x08003385
 8003308:	08003385 	.word	0x08003385
 800330c:	08003385 	.word	0x08003385
 8003310:	0800336d 	.word	0x0800336d
 8003314:	08003385 	.word	0x08003385
 8003318:	08003385 	.word	0x08003385
 800331c:	08003385 	.word	0x08003385
 8003320:	08003385 	.word	0x08003385
 8003324:	08003385 	.word	0x08003385
 8003328:	08003385 	.word	0x08003385
 800332c:	08003385 	.word	0x08003385
 8003330:	08003375 	.word	0x08003375
 8003334:	08003385 	.word	0x08003385
 8003338:	08003385 	.word	0x08003385
 800333c:	08003385 	.word	0x08003385
 8003340:	08003385 	.word	0x08003385
 8003344:	08003385 	.word	0x08003385
 8003348:	08003385 	.word	0x08003385
 800334c:	08003385 	.word	0x08003385
 8003350:	0800337d 	.word	0x0800337d
 8003354:	2301      	movs	r3, #1
 8003356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800335a:	e0bc      	b.n	80034d6 <UART_SetConfig+0x5a6>
 800335c:	2304      	movs	r3, #4
 800335e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003362:	e0b8      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003364:	2308      	movs	r3, #8
 8003366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800336a:	e0b4      	b.n	80034d6 <UART_SetConfig+0x5a6>
 800336c:	2310      	movs	r3, #16
 800336e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003372:	e0b0      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003374:	2320      	movs	r3, #32
 8003376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800337a:	e0ac      	b.n	80034d6 <UART_SetConfig+0x5a6>
 800337c:	2340      	movs	r3, #64	@ 0x40
 800337e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003382:	e0a8      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003384:	2380      	movs	r3, #128	@ 0x80
 8003386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800338a:	e0a4      	b.n	80034d6 <UART_SetConfig+0x5a6>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a8f      	ldr	r2, [pc, #572]	@ (80035d0 <UART_SetConfig+0x6a0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d130      	bne.n	80033f8 <UART_SetConfig+0x4c8>
 8003396:	4b8d      	ldr	r3, [pc, #564]	@ (80035cc <UART_SetConfig+0x69c>)
 8003398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	2b05      	cmp	r3, #5
 80033a0:	d826      	bhi.n	80033f0 <UART_SetConfig+0x4c0>
 80033a2:	a201      	add	r2, pc, #4	@ (adr r2, 80033a8 <UART_SetConfig+0x478>)
 80033a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a8:	080033c1 	.word	0x080033c1
 80033ac:	080033c9 	.word	0x080033c9
 80033b0:	080033d1 	.word	0x080033d1
 80033b4:	080033d9 	.word	0x080033d9
 80033b8:	080033e1 	.word	0x080033e1
 80033bc:	080033e9 	.word	0x080033e9
 80033c0:	2300      	movs	r3, #0
 80033c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033c6:	e086      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80033c8:	2304      	movs	r3, #4
 80033ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033ce:	e082      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80033d0:	2308      	movs	r3, #8
 80033d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033d6:	e07e      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80033d8:	2310      	movs	r3, #16
 80033da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033de:	e07a      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80033e0:	2320      	movs	r3, #32
 80033e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033e6:	e076      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80033e8:	2340      	movs	r3, #64	@ 0x40
 80033ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033ee:	e072      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80033f0:	2380      	movs	r3, #128	@ 0x80
 80033f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033f6:	e06e      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a75      	ldr	r2, [pc, #468]	@ (80035d4 <UART_SetConfig+0x6a4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d130      	bne.n	8003464 <UART_SetConfig+0x534>
 8003402:	4b72      	ldr	r3, [pc, #456]	@ (80035cc <UART_SetConfig+0x69c>)
 8003404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	2b05      	cmp	r3, #5
 800340c:	d826      	bhi.n	800345c <UART_SetConfig+0x52c>
 800340e:	a201      	add	r2, pc, #4	@ (adr r2, 8003414 <UART_SetConfig+0x4e4>)
 8003410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003414:	0800342d 	.word	0x0800342d
 8003418:	08003435 	.word	0x08003435
 800341c:	0800343d 	.word	0x0800343d
 8003420:	08003445 	.word	0x08003445
 8003424:	0800344d 	.word	0x0800344d
 8003428:	08003455 	.word	0x08003455
 800342c:	2300      	movs	r3, #0
 800342e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003432:	e050      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003434:	2304      	movs	r3, #4
 8003436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800343a:	e04c      	b.n	80034d6 <UART_SetConfig+0x5a6>
 800343c:	2308      	movs	r3, #8
 800343e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003442:	e048      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003444:	2310      	movs	r3, #16
 8003446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800344a:	e044      	b.n	80034d6 <UART_SetConfig+0x5a6>
 800344c:	2320      	movs	r3, #32
 800344e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003452:	e040      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003454:	2340      	movs	r3, #64	@ 0x40
 8003456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800345a:	e03c      	b.n	80034d6 <UART_SetConfig+0x5a6>
 800345c:	2380      	movs	r3, #128	@ 0x80
 800345e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003462:	e038      	b.n	80034d6 <UART_SetConfig+0x5a6>
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a5b      	ldr	r2, [pc, #364]	@ (80035d8 <UART_SetConfig+0x6a8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d130      	bne.n	80034d0 <UART_SetConfig+0x5a0>
 800346e:	4b57      	ldr	r3, [pc, #348]	@ (80035cc <UART_SetConfig+0x69c>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	2b05      	cmp	r3, #5
 8003478:	d826      	bhi.n	80034c8 <UART_SetConfig+0x598>
 800347a:	a201      	add	r2, pc, #4	@ (adr r2, 8003480 <UART_SetConfig+0x550>)
 800347c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003480:	08003499 	.word	0x08003499
 8003484:	080034a1 	.word	0x080034a1
 8003488:	080034a9 	.word	0x080034a9
 800348c:	080034b1 	.word	0x080034b1
 8003490:	080034b9 	.word	0x080034b9
 8003494:	080034c1 	.word	0x080034c1
 8003498:	2302      	movs	r3, #2
 800349a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800349e:	e01a      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80034a0:	2304      	movs	r3, #4
 80034a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034a6:	e016      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80034a8:	2308      	movs	r3, #8
 80034aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034ae:	e012      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80034b0:	2310      	movs	r3, #16
 80034b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034b6:	e00e      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80034b8:	2320      	movs	r3, #32
 80034ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034be:	e00a      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80034c0:	2340      	movs	r3, #64	@ 0x40
 80034c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034c6:	e006      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80034c8:	2380      	movs	r3, #128	@ 0x80
 80034ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034ce:	e002      	b.n	80034d6 <UART_SetConfig+0x5a6>
 80034d0:	2380      	movs	r3, #128	@ 0x80
 80034d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a3f      	ldr	r2, [pc, #252]	@ (80035d8 <UART_SetConfig+0x6a8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	f040 80f8 	bne.w	80036d2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	dc46      	bgt.n	8003578 <UART_SetConfig+0x648>
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	f2c0 8082 	blt.w	80035f4 <UART_SetConfig+0x6c4>
 80034f0:	3b02      	subs	r3, #2
 80034f2:	2b1e      	cmp	r3, #30
 80034f4:	d87e      	bhi.n	80035f4 <UART_SetConfig+0x6c4>
 80034f6:	a201      	add	r2, pc, #4	@ (adr r2, 80034fc <UART_SetConfig+0x5cc>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	0800357f 	.word	0x0800357f
 8003500:	080035f5 	.word	0x080035f5
 8003504:	08003587 	.word	0x08003587
 8003508:	080035f5 	.word	0x080035f5
 800350c:	080035f5 	.word	0x080035f5
 8003510:	080035f5 	.word	0x080035f5
 8003514:	08003597 	.word	0x08003597
 8003518:	080035f5 	.word	0x080035f5
 800351c:	080035f5 	.word	0x080035f5
 8003520:	080035f5 	.word	0x080035f5
 8003524:	080035f5 	.word	0x080035f5
 8003528:	080035f5 	.word	0x080035f5
 800352c:	080035f5 	.word	0x080035f5
 8003530:	080035f5 	.word	0x080035f5
 8003534:	080035a7 	.word	0x080035a7
 8003538:	080035f5 	.word	0x080035f5
 800353c:	080035f5 	.word	0x080035f5
 8003540:	080035f5 	.word	0x080035f5
 8003544:	080035f5 	.word	0x080035f5
 8003548:	080035f5 	.word	0x080035f5
 800354c:	080035f5 	.word	0x080035f5
 8003550:	080035f5 	.word	0x080035f5
 8003554:	080035f5 	.word	0x080035f5
 8003558:	080035f5 	.word	0x080035f5
 800355c:	080035f5 	.word	0x080035f5
 8003560:	080035f5 	.word	0x080035f5
 8003564:	080035f5 	.word	0x080035f5
 8003568:	080035f5 	.word	0x080035f5
 800356c:	080035f5 	.word	0x080035f5
 8003570:	080035f5 	.word	0x080035f5
 8003574:	080035e7 	.word	0x080035e7
 8003578:	2b40      	cmp	r3, #64	@ 0x40
 800357a:	d037      	beq.n	80035ec <UART_SetConfig+0x6bc>
 800357c:	e03a      	b.n	80035f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800357e:	f7ff f9bf 	bl	8002900 <HAL_RCCEx_GetD3PCLK1Freq>
 8003582:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003584:	e03c      	b.n	8003600 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003586:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff f9ce 	bl	800292c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003594:	e034      	b.n	8003600 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003596:	f107 0318 	add.w	r3, r7, #24
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fb1a 	bl	8002bd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80035a4:	e02c      	b.n	8003600 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035a6:	4b09      	ldr	r3, [pc, #36]	@ (80035cc <UART_SetConfig+0x69c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80035b2:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <UART_SetConfig+0x69c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	08db      	lsrs	r3, r3, #3
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	4a07      	ldr	r2, [pc, #28]	@ (80035dc <UART_SetConfig+0x6ac>)
 80035be:	fa22 f303 	lsr.w	r3, r2, r3
 80035c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80035c4:	e01c      	b.n	8003600 <UART_SetConfig+0x6d0>
 80035c6:	bf00      	nop
 80035c8:	40011400 	.word	0x40011400
 80035cc:	58024400 	.word	0x58024400
 80035d0:	40007800 	.word	0x40007800
 80035d4:	40007c00 	.word	0x40007c00
 80035d8:	58000c00 	.word	0x58000c00
 80035dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80035e0:	4b9d      	ldr	r3, [pc, #628]	@ (8003858 <UART_SetConfig+0x928>)
 80035e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80035e4:	e00c      	b.n	8003600 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80035e6:	4b9d      	ldr	r3, [pc, #628]	@ (800385c <UART_SetConfig+0x92c>)
 80035e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80035ea:	e009      	b.n	8003600 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80035f2:	e005      	b.n	8003600 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80035fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 81de 	beq.w	80039c4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	4a94      	ldr	r2, [pc, #592]	@ (8003860 <UART_SetConfig+0x930>)
 800360e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003612:	461a      	mov	r2, r3
 8003614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003616:	fbb3 f3f2 	udiv	r3, r3, r2
 800361a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4413      	add	r3, r2
 8003626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003628:	429a      	cmp	r2, r3
 800362a:	d305      	bcc.n	8003638 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003634:	429a      	cmp	r2, r3
 8003636:	d903      	bls.n	8003640 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800363e:	e1c1      	b.n	80039c4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003642:	2200      	movs	r2, #0
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	60fa      	str	r2, [r7, #12]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364c:	4a84      	ldr	r2, [pc, #528]	@ (8003860 <UART_SetConfig+0x930>)
 800364e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003652:	b29b      	uxth	r3, r3
 8003654:	2200      	movs	r2, #0
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	607a      	str	r2, [r7, #4]
 800365a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800365e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003662:	f7fc fe39 	bl	80002d8 <__aeabi_uldivmod>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	020b      	lsls	r3, r1, #8
 8003678:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800367c:	0202      	lsls	r2, r0, #8
 800367e:	6979      	ldr	r1, [r7, #20]
 8003680:	6849      	ldr	r1, [r1, #4]
 8003682:	0849      	lsrs	r1, r1, #1
 8003684:	2000      	movs	r0, #0
 8003686:	460c      	mov	r4, r1
 8003688:	4605      	mov	r5, r0
 800368a:	eb12 0804 	adds.w	r8, r2, r4
 800368e:	eb43 0905 	adc.w	r9, r3, r5
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	469a      	mov	sl, r3
 800369a:	4693      	mov	fp, r2
 800369c:	4652      	mov	r2, sl
 800369e:	465b      	mov	r3, fp
 80036a0:	4640      	mov	r0, r8
 80036a2:	4649      	mov	r1, r9
 80036a4:	f7fc fe18 	bl	80002d8 <__aeabi_uldivmod>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4613      	mov	r3, r2
 80036ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036b6:	d308      	bcc.n	80036ca <UART_SetConfig+0x79a>
 80036b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036be:	d204      	bcs.n	80036ca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036c6:	60da      	str	r2, [r3, #12]
 80036c8:	e17c      	b.n	80039c4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80036d0:	e178      	b.n	80039c4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036da:	f040 80c5 	bne.w	8003868 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80036de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	dc48      	bgt.n	8003778 <UART_SetConfig+0x848>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	db7b      	blt.n	80037e2 <UART_SetConfig+0x8b2>
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d879      	bhi.n	80037e2 <UART_SetConfig+0x8b2>
 80036ee:	a201      	add	r2, pc, #4	@ (adr r2, 80036f4 <UART_SetConfig+0x7c4>)
 80036f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f4:	0800377f 	.word	0x0800377f
 80036f8:	08003787 	.word	0x08003787
 80036fc:	080037e3 	.word	0x080037e3
 8003700:	080037e3 	.word	0x080037e3
 8003704:	0800378f 	.word	0x0800378f
 8003708:	080037e3 	.word	0x080037e3
 800370c:	080037e3 	.word	0x080037e3
 8003710:	080037e3 	.word	0x080037e3
 8003714:	0800379f 	.word	0x0800379f
 8003718:	080037e3 	.word	0x080037e3
 800371c:	080037e3 	.word	0x080037e3
 8003720:	080037e3 	.word	0x080037e3
 8003724:	080037e3 	.word	0x080037e3
 8003728:	080037e3 	.word	0x080037e3
 800372c:	080037e3 	.word	0x080037e3
 8003730:	080037e3 	.word	0x080037e3
 8003734:	080037af 	.word	0x080037af
 8003738:	080037e3 	.word	0x080037e3
 800373c:	080037e3 	.word	0x080037e3
 8003740:	080037e3 	.word	0x080037e3
 8003744:	080037e3 	.word	0x080037e3
 8003748:	080037e3 	.word	0x080037e3
 800374c:	080037e3 	.word	0x080037e3
 8003750:	080037e3 	.word	0x080037e3
 8003754:	080037e3 	.word	0x080037e3
 8003758:	080037e3 	.word	0x080037e3
 800375c:	080037e3 	.word	0x080037e3
 8003760:	080037e3 	.word	0x080037e3
 8003764:	080037e3 	.word	0x080037e3
 8003768:	080037e3 	.word	0x080037e3
 800376c:	080037e3 	.word	0x080037e3
 8003770:	080037e3 	.word	0x080037e3
 8003774:	080037d5 	.word	0x080037d5
 8003778:	2b40      	cmp	r3, #64	@ 0x40
 800377a:	d02e      	beq.n	80037da <UART_SetConfig+0x8aa>
 800377c:	e031      	b.n	80037e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800377e:	f7ff f893 	bl	80028a8 <HAL_RCC_GetPCLK1Freq>
 8003782:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003784:	e033      	b.n	80037ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003786:	f7ff f8a5 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 800378a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800378c:	e02f      	b.n	80037ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800378e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff f8ca 	bl	800292c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800379c:	e027      	b.n	80037ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800379e:	f107 0318 	add.w	r3, r7, #24
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fa16 	bl	8002bd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037ac:	e01f      	b.n	80037ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003864 <UART_SetConfig+0x934>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80037ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003864 <UART_SetConfig+0x934>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	08db      	lsrs	r3, r3, #3
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	4a24      	ldr	r2, [pc, #144]	@ (8003858 <UART_SetConfig+0x928>)
 80037c6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80037cc:	e00f      	b.n	80037ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80037ce:	4b22      	ldr	r3, [pc, #136]	@ (8003858 <UART_SetConfig+0x928>)
 80037d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037d2:	e00c      	b.n	80037ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80037d4:	4b21      	ldr	r3, [pc, #132]	@ (800385c <UART_SetConfig+0x92c>)
 80037d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037d8:	e009      	b.n	80037ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037e0:	e005      	b.n	80037ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80037ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80e7 	beq.w	80039c4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	4a19      	ldr	r2, [pc, #100]	@ (8003860 <UART_SetConfig+0x930>)
 80037fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003800:	461a      	mov	r2, r3
 8003802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003804:	fbb3 f3f2 	udiv	r3, r3, r2
 8003808:	005a      	lsls	r2, r3, #1
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	441a      	add	r2, r3
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	fbb2 f3f3 	udiv	r3, r2, r3
 800381a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800381c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381e:	2b0f      	cmp	r3, #15
 8003820:	d916      	bls.n	8003850 <UART_SetConfig+0x920>
 8003822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003828:	d212      	bcs.n	8003850 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800382a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800382c:	b29b      	uxth	r3, r3
 800382e:	f023 030f 	bic.w	r3, r3, #15
 8003832:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	b29b      	uxth	r3, r3
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	b29a      	uxth	r2, r3
 8003840:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003842:	4313      	orrs	r3, r2
 8003844:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	e0b9      	b.n	80039c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003856:	e0b5      	b.n	80039c4 <UART_SetConfig+0xa94>
 8003858:	03d09000 	.word	0x03d09000
 800385c:	003d0900 	.word	0x003d0900
 8003860:	08003ecc 	.word	0x08003ecc
 8003864:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8003868:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800386c:	2b20      	cmp	r3, #32
 800386e:	dc49      	bgt.n	8003904 <UART_SetConfig+0x9d4>
 8003870:	2b00      	cmp	r3, #0
 8003872:	db7c      	blt.n	800396e <UART_SetConfig+0xa3e>
 8003874:	2b20      	cmp	r3, #32
 8003876:	d87a      	bhi.n	800396e <UART_SetConfig+0xa3e>
 8003878:	a201      	add	r2, pc, #4	@ (adr r2, 8003880 <UART_SetConfig+0x950>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	0800390b 	.word	0x0800390b
 8003884:	08003913 	.word	0x08003913
 8003888:	0800396f 	.word	0x0800396f
 800388c:	0800396f 	.word	0x0800396f
 8003890:	0800391b 	.word	0x0800391b
 8003894:	0800396f 	.word	0x0800396f
 8003898:	0800396f 	.word	0x0800396f
 800389c:	0800396f 	.word	0x0800396f
 80038a0:	0800392b 	.word	0x0800392b
 80038a4:	0800396f 	.word	0x0800396f
 80038a8:	0800396f 	.word	0x0800396f
 80038ac:	0800396f 	.word	0x0800396f
 80038b0:	0800396f 	.word	0x0800396f
 80038b4:	0800396f 	.word	0x0800396f
 80038b8:	0800396f 	.word	0x0800396f
 80038bc:	0800396f 	.word	0x0800396f
 80038c0:	0800393b 	.word	0x0800393b
 80038c4:	0800396f 	.word	0x0800396f
 80038c8:	0800396f 	.word	0x0800396f
 80038cc:	0800396f 	.word	0x0800396f
 80038d0:	0800396f 	.word	0x0800396f
 80038d4:	0800396f 	.word	0x0800396f
 80038d8:	0800396f 	.word	0x0800396f
 80038dc:	0800396f 	.word	0x0800396f
 80038e0:	0800396f 	.word	0x0800396f
 80038e4:	0800396f 	.word	0x0800396f
 80038e8:	0800396f 	.word	0x0800396f
 80038ec:	0800396f 	.word	0x0800396f
 80038f0:	0800396f 	.word	0x0800396f
 80038f4:	0800396f 	.word	0x0800396f
 80038f8:	0800396f 	.word	0x0800396f
 80038fc:	0800396f 	.word	0x0800396f
 8003900:	08003961 	.word	0x08003961
 8003904:	2b40      	cmp	r3, #64	@ 0x40
 8003906:	d02e      	beq.n	8003966 <UART_SetConfig+0xa36>
 8003908:	e031      	b.n	800396e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800390a:	f7fe ffcd 	bl	80028a8 <HAL_RCC_GetPCLK1Freq>
 800390e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003910:	e033      	b.n	800397a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003912:	f7fe ffdf 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 8003916:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003918:	e02f      	b.n	800397a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800391a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff f804 	bl	800292c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003928:	e027      	b.n	800397a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800392a:	f107 0318 	add.w	r3, r7, #24
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff f950 	bl	8002bd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003938:	e01f      	b.n	800397a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800393a:	4b2d      	ldr	r3, [pc, #180]	@ (80039f0 <UART_SetConfig+0xac0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003946:	4b2a      	ldr	r3, [pc, #168]	@ (80039f0 <UART_SetConfig+0xac0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	08db      	lsrs	r3, r3, #3
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	4a28      	ldr	r2, [pc, #160]	@ (80039f4 <UART_SetConfig+0xac4>)
 8003952:	fa22 f303 	lsr.w	r3, r2, r3
 8003956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003958:	e00f      	b.n	800397a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800395a:	4b26      	ldr	r3, [pc, #152]	@ (80039f4 <UART_SetConfig+0xac4>)
 800395c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800395e:	e00c      	b.n	800397a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003960:	4b25      	ldr	r3, [pc, #148]	@ (80039f8 <UART_SetConfig+0xac8>)
 8003962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003964:	e009      	b.n	800397a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800396a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800396c:	e005      	b.n	800397a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003978:	bf00      	nop
    }

    if (pclk != 0U)
 800397a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800397c:	2b00      	cmp	r3, #0
 800397e:	d021      	beq.n	80039c4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	4a1d      	ldr	r2, [pc, #116]	@ (80039fc <UART_SetConfig+0xacc>)
 8003986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800398a:	461a      	mov	r2, r3
 800398c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800398e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	441a      	add	r2, r3
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a6:	2b0f      	cmp	r3, #15
 80039a8:	d909      	bls.n	80039be <UART_SetConfig+0xa8e>
 80039aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b0:	d205      	bcs.n	80039be <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60da      	str	r2, [r3, #12]
 80039bc:	e002      	b.n	80039c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2200      	movs	r2, #0
 80039d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2200      	movs	r2, #0
 80039de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80039e0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3748      	adds	r7, #72	@ 0x48
 80039e8:	46bd      	mov	sp, r7
 80039ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ee:	bf00      	nop
 80039f0:	58024400 	.word	0x58024400
 80039f4:	03d09000 	.word	0x03d09000
 80039f8:	003d0900 	.word	0x003d0900
 80039fc:	08003ecc 	.word	0x08003ecc

08003a00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01a      	beq.n	8003b16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003afe:	d10a      	bne.n	8003b16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	605a      	str	r2, [r3, #4]
  }
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b098      	sub	sp, #96	@ 0x60
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b54:	f7fd fab4 	bl	80010c0 <HAL_GetTick>
 8003b58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d12f      	bne.n	8003bc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b70:	2200      	movs	r2, #0
 8003b72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f88e 	bl	8003c98 <UART_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d022      	beq.n	8003bc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b96:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ba2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e6      	bne.n	8003b82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e063      	b.n	8003c90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d149      	bne.n	8003c6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bd6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bde:	2200      	movs	r2, #0
 8003be0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f857 	bl	8003c98 <UART_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d03c      	beq.n	8003c6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	623b      	str	r3, [r7, #32]
   return(result);
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c10:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c16:	e841 2300 	strex	r3, r2, [r1]
 8003c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e6      	bne.n	8003bf0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3308      	adds	r3, #8
 8003c28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f023 0301 	bic.w	r3, r3, #1
 8003c38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3308      	adds	r3, #8
 8003c40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c42:	61fa      	str	r2, [r7, #28]
 8003c44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	69b9      	ldr	r1, [r7, #24]
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	617b      	str	r3, [r7, #20]
   return(result);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e5      	bne.n	8003c22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e012      	b.n	8003c90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3758      	adds	r7, #88	@ 0x58
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca8:	e04f      	b.n	8003d4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d04b      	beq.n	8003d4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb2:	f7fd fa05 	bl	80010c0 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d302      	bcc.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e04e      	b.n	8003d6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d037      	beq.n	8003d4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b80      	cmp	r3, #128	@ 0x80
 8003cde:	d034      	beq.n	8003d4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b40      	cmp	r3, #64	@ 0x40
 8003ce4:	d031      	beq.n	8003d4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d110      	bne.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f839 	bl	8003d74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2208      	movs	r2, #8
 8003d06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e029      	b.n	8003d6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d24:	d111      	bne.n	8003d4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f81f 	bl	8003d74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e00f      	b.n	8003d6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69da      	ldr	r2, [r3, #28]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4013      	ands	r3, r2
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	bf0c      	ite	eq
 8003d5a:	2301      	moveq	r3, #1
 8003d5c:	2300      	movne	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	461a      	mov	r2, r3
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d0a0      	beq.n	8003caa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b095      	sub	sp, #84	@ 0x54
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003da0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e6      	bne.n	8003d7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3308      	adds	r3, #8
 8003db4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e3c <UART_EndRxTransfer+0xc8>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3308      	adds	r3, #8
 8003dcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e5      	bne.n	8003dae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d118      	bne.n	8003e1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f023 0310 	bic.w	r3, r3, #16
 8003dfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6979      	ldr	r1, [r7, #20]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	613b      	str	r3, [r7, #16]
   return(result);
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e6      	bne.n	8003dea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003e30:	bf00      	nop
 8003e32:	3754      	adds	r7, #84	@ 0x54
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	effffffe 	.word	0xeffffffe

08003e40 <memset>:
 8003e40:	4402      	add	r2, r0
 8003e42:	4603      	mov	r3, r0
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d100      	bne.n	8003e4a <memset+0xa>
 8003e48:	4770      	bx	lr
 8003e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e4e:	e7f9      	b.n	8003e44 <memset+0x4>

08003e50 <__libc_init_array>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	4d0d      	ldr	r5, [pc, #52]	@ (8003e88 <__libc_init_array+0x38>)
 8003e54:	4c0d      	ldr	r4, [pc, #52]	@ (8003e8c <__libc_init_array+0x3c>)
 8003e56:	1b64      	subs	r4, r4, r5
 8003e58:	10a4      	asrs	r4, r4, #2
 8003e5a:	2600      	movs	r6, #0
 8003e5c:	42a6      	cmp	r6, r4
 8003e5e:	d109      	bne.n	8003e74 <__libc_init_array+0x24>
 8003e60:	4d0b      	ldr	r5, [pc, #44]	@ (8003e90 <__libc_init_array+0x40>)
 8003e62:	4c0c      	ldr	r4, [pc, #48]	@ (8003e94 <__libc_init_array+0x44>)
 8003e64:	f000 f818 	bl	8003e98 <_init>
 8003e68:	1b64      	subs	r4, r4, r5
 8003e6a:	10a4      	asrs	r4, r4, #2
 8003e6c:	2600      	movs	r6, #0
 8003e6e:	42a6      	cmp	r6, r4
 8003e70:	d105      	bne.n	8003e7e <__libc_init_array+0x2e>
 8003e72:	bd70      	pop	{r4, r5, r6, pc}
 8003e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e78:	4798      	blx	r3
 8003e7a:	3601      	adds	r6, #1
 8003e7c:	e7ee      	b.n	8003e5c <__libc_init_array+0xc>
 8003e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e82:	4798      	blx	r3
 8003e84:	3601      	adds	r6, #1
 8003e86:	e7f2      	b.n	8003e6e <__libc_init_array+0x1e>
 8003e88:	08003eec 	.word	0x08003eec
 8003e8c:	08003eec 	.word	0x08003eec
 8003e90:	08003eec 	.word	0x08003eec
 8003e94:	08003ef0 	.word	0x08003ef0

08003e98 <_init>:
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9a:	bf00      	nop
 8003e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9e:	bc08      	pop	{r3}
 8003ea0:	469e      	mov	lr, r3
 8003ea2:	4770      	bx	lr

08003ea4 <_fini>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	bf00      	nop
 8003ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eaa:	bc08      	pop	{r3}
 8003eac:	469e      	mov	lr, r3
 8003eae:	4770      	bx	lr
