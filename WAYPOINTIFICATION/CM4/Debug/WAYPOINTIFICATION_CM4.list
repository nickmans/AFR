
WAYPOINTIFICATION_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006df8  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08107098  08107098  00008098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08107120  08107120  00008120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08107128  08107128  00008128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810712c  0810712c  0000812c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000020  10000000  08107130  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004a08  10000020  08107150  00009020  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10004a28  08107150  00009a28  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00009020  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001aa77  00000000  00000000  00009050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003721  00000000  00000000  00023ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013c0  00000000  00000000  000271e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f29  00000000  00000000  000285a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a961  00000000  00000000  000294d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017e6b  00000000  00000000  00063e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018572f  00000000  00000000  0007bc9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002013cc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005234  00000000  00000000  00201410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  00206644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000020 	.word	0x10000020
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08107080 	.word	0x08107080

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000024 	.word	0x10000024
 81002dc:	08107080 	.word	0x08107080

081002e0 <__aeabi_uldivmod>:
 81002e0:	b953      	cbnz	r3, 81002f8 <__aeabi_uldivmod+0x18>
 81002e2:	b94a      	cbnz	r2, 81002f8 <__aeabi_uldivmod+0x18>
 81002e4:	2900      	cmp	r1, #0
 81002e6:	bf08      	it	eq
 81002e8:	2800      	cmpeq	r0, #0
 81002ea:	bf1c      	itt	ne
 81002ec:	f04f 31ff 	movne.w	r1, #4294967295
 81002f0:	f04f 30ff 	movne.w	r0, #4294967295
 81002f4:	f000 b988 	b.w	8100608 <__aeabi_idiv0>
 81002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 81002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100300:	f000 f806 	bl	8100310 <__udivmoddi4>
 8100304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810030c:	b004      	add	sp, #16
 810030e:	4770      	bx	lr

08100310 <__udivmoddi4>:
 8100310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100314:	9d08      	ldr	r5, [sp, #32]
 8100316:	468e      	mov	lr, r1
 8100318:	4604      	mov	r4, r0
 810031a:	4688      	mov	r8, r1
 810031c:	2b00      	cmp	r3, #0
 810031e:	d14a      	bne.n	81003b6 <__udivmoddi4+0xa6>
 8100320:	428a      	cmp	r2, r1
 8100322:	4617      	mov	r7, r2
 8100324:	d962      	bls.n	81003ec <__udivmoddi4+0xdc>
 8100326:	fab2 f682 	clz	r6, r2
 810032a:	b14e      	cbz	r6, 8100340 <__udivmoddi4+0x30>
 810032c:	f1c6 0320 	rsb	r3, r6, #32
 8100330:	fa01 f806 	lsl.w	r8, r1, r6
 8100334:	fa20 f303 	lsr.w	r3, r0, r3
 8100338:	40b7      	lsls	r7, r6
 810033a:	ea43 0808 	orr.w	r8, r3, r8
 810033e:	40b4      	lsls	r4, r6
 8100340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100344:	fa1f fc87 	uxth.w	ip, r7
 8100348:	fbb8 f1fe 	udiv	r1, r8, lr
 810034c:	0c23      	lsrs	r3, r4, #16
 810034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8100352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100356:	fb01 f20c 	mul.w	r2, r1, ip
 810035a:	429a      	cmp	r2, r3
 810035c:	d909      	bls.n	8100372 <__udivmoddi4+0x62>
 810035e:	18fb      	adds	r3, r7, r3
 8100360:	f101 30ff 	add.w	r0, r1, #4294967295
 8100364:	f080 80ea 	bcs.w	810053c <__udivmoddi4+0x22c>
 8100368:	429a      	cmp	r2, r3
 810036a:	f240 80e7 	bls.w	810053c <__udivmoddi4+0x22c>
 810036e:	3902      	subs	r1, #2
 8100370:	443b      	add	r3, r7
 8100372:	1a9a      	subs	r2, r3, r2
 8100374:	b2a3      	uxth	r3, r4
 8100376:	fbb2 f0fe 	udiv	r0, r2, lr
 810037a:	fb0e 2210 	mls	r2, lr, r0, r2
 810037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8100382:	fb00 fc0c 	mul.w	ip, r0, ip
 8100386:	459c      	cmp	ip, r3
 8100388:	d909      	bls.n	810039e <__udivmoddi4+0x8e>
 810038a:	18fb      	adds	r3, r7, r3
 810038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8100390:	f080 80d6 	bcs.w	8100540 <__udivmoddi4+0x230>
 8100394:	459c      	cmp	ip, r3
 8100396:	f240 80d3 	bls.w	8100540 <__udivmoddi4+0x230>
 810039a:	443b      	add	r3, r7
 810039c:	3802      	subs	r0, #2
 810039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 81003a2:	eba3 030c 	sub.w	r3, r3, ip
 81003a6:	2100      	movs	r1, #0
 81003a8:	b11d      	cbz	r5, 81003b2 <__udivmoddi4+0xa2>
 81003aa:	40f3      	lsrs	r3, r6
 81003ac:	2200      	movs	r2, #0
 81003ae:	e9c5 3200 	strd	r3, r2, [r5]
 81003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003b6:	428b      	cmp	r3, r1
 81003b8:	d905      	bls.n	81003c6 <__udivmoddi4+0xb6>
 81003ba:	b10d      	cbz	r5, 81003c0 <__udivmoddi4+0xb0>
 81003bc:	e9c5 0100 	strd	r0, r1, [r5]
 81003c0:	2100      	movs	r1, #0
 81003c2:	4608      	mov	r0, r1
 81003c4:	e7f5      	b.n	81003b2 <__udivmoddi4+0xa2>
 81003c6:	fab3 f183 	clz	r1, r3
 81003ca:	2900      	cmp	r1, #0
 81003cc:	d146      	bne.n	810045c <__udivmoddi4+0x14c>
 81003ce:	4573      	cmp	r3, lr
 81003d0:	d302      	bcc.n	81003d8 <__udivmoddi4+0xc8>
 81003d2:	4282      	cmp	r2, r0
 81003d4:	f200 8105 	bhi.w	81005e2 <__udivmoddi4+0x2d2>
 81003d8:	1a84      	subs	r4, r0, r2
 81003da:	eb6e 0203 	sbc.w	r2, lr, r3
 81003de:	2001      	movs	r0, #1
 81003e0:	4690      	mov	r8, r2
 81003e2:	2d00      	cmp	r5, #0
 81003e4:	d0e5      	beq.n	81003b2 <__udivmoddi4+0xa2>
 81003e6:	e9c5 4800 	strd	r4, r8, [r5]
 81003ea:	e7e2      	b.n	81003b2 <__udivmoddi4+0xa2>
 81003ec:	2a00      	cmp	r2, #0
 81003ee:	f000 8090 	beq.w	8100512 <__udivmoddi4+0x202>
 81003f2:	fab2 f682 	clz	r6, r2
 81003f6:	2e00      	cmp	r6, #0
 81003f8:	f040 80a4 	bne.w	8100544 <__udivmoddi4+0x234>
 81003fc:	1a8a      	subs	r2, r1, r2
 81003fe:	0c03      	lsrs	r3, r0, #16
 8100400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100404:	b280      	uxth	r0, r0
 8100406:	b2bc      	uxth	r4, r7
 8100408:	2101      	movs	r1, #1
 810040a:	fbb2 fcfe 	udiv	ip, r2, lr
 810040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8100412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8100416:	fb04 f20c 	mul.w	r2, r4, ip
 810041a:	429a      	cmp	r2, r3
 810041c:	d907      	bls.n	810042e <__udivmoddi4+0x11e>
 810041e:	18fb      	adds	r3, r7, r3
 8100420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8100424:	d202      	bcs.n	810042c <__udivmoddi4+0x11c>
 8100426:	429a      	cmp	r2, r3
 8100428:	f200 80e0 	bhi.w	81005ec <__udivmoddi4+0x2dc>
 810042c:	46c4      	mov	ip, r8
 810042e:	1a9b      	subs	r3, r3, r2
 8100430:	fbb3 f2fe 	udiv	r2, r3, lr
 8100434:	fb0e 3312 	mls	r3, lr, r2, r3
 8100438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 810043c:	fb02 f404 	mul.w	r4, r2, r4
 8100440:	429c      	cmp	r4, r3
 8100442:	d907      	bls.n	8100454 <__udivmoddi4+0x144>
 8100444:	18fb      	adds	r3, r7, r3
 8100446:	f102 30ff 	add.w	r0, r2, #4294967295
 810044a:	d202      	bcs.n	8100452 <__udivmoddi4+0x142>
 810044c:	429c      	cmp	r4, r3
 810044e:	f200 80ca 	bhi.w	81005e6 <__udivmoddi4+0x2d6>
 8100452:	4602      	mov	r2, r0
 8100454:	1b1b      	subs	r3, r3, r4
 8100456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 810045a:	e7a5      	b.n	81003a8 <__udivmoddi4+0x98>
 810045c:	f1c1 0620 	rsb	r6, r1, #32
 8100460:	408b      	lsls	r3, r1
 8100462:	fa22 f706 	lsr.w	r7, r2, r6
 8100466:	431f      	orrs	r7, r3
 8100468:	fa0e f401 	lsl.w	r4, lr, r1
 810046c:	fa20 f306 	lsr.w	r3, r0, r6
 8100470:	fa2e fe06 	lsr.w	lr, lr, r6
 8100474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8100478:	4323      	orrs	r3, r4
 810047a:	fa00 f801 	lsl.w	r8, r0, r1
 810047e:	fa1f fc87 	uxth.w	ip, r7
 8100482:	fbbe f0f9 	udiv	r0, lr, r9
 8100486:	0c1c      	lsrs	r4, r3, #16
 8100488:	fb09 ee10 	mls	lr, r9, r0, lr
 810048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8100490:	fb00 fe0c 	mul.w	lr, r0, ip
 8100494:	45a6      	cmp	lr, r4
 8100496:	fa02 f201 	lsl.w	r2, r2, r1
 810049a:	d909      	bls.n	81004b0 <__udivmoddi4+0x1a0>
 810049c:	193c      	adds	r4, r7, r4
 810049e:	f100 3aff 	add.w	sl, r0, #4294967295
 81004a2:	f080 809c 	bcs.w	81005de <__udivmoddi4+0x2ce>
 81004a6:	45a6      	cmp	lr, r4
 81004a8:	f240 8099 	bls.w	81005de <__udivmoddi4+0x2ce>
 81004ac:	3802      	subs	r0, #2
 81004ae:	443c      	add	r4, r7
 81004b0:	eba4 040e 	sub.w	r4, r4, lr
 81004b4:	fa1f fe83 	uxth.w	lr, r3
 81004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 81004bc:	fb09 4413 	mls	r4, r9, r3, r4
 81004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 81004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 81004c8:	45a4      	cmp	ip, r4
 81004ca:	d908      	bls.n	81004de <__udivmoddi4+0x1ce>
 81004cc:	193c      	adds	r4, r7, r4
 81004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 81004d2:	f080 8082 	bcs.w	81005da <__udivmoddi4+0x2ca>
 81004d6:	45a4      	cmp	ip, r4
 81004d8:	d97f      	bls.n	81005da <__udivmoddi4+0x2ca>
 81004da:	3b02      	subs	r3, #2
 81004dc:	443c      	add	r4, r7
 81004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 81004e2:	eba4 040c 	sub.w	r4, r4, ip
 81004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 81004ea:	4564      	cmp	r4, ip
 81004ec:	4673      	mov	r3, lr
 81004ee:	46e1      	mov	r9, ip
 81004f0:	d362      	bcc.n	81005b8 <__udivmoddi4+0x2a8>
 81004f2:	d05f      	beq.n	81005b4 <__udivmoddi4+0x2a4>
 81004f4:	b15d      	cbz	r5, 810050e <__udivmoddi4+0x1fe>
 81004f6:	ebb8 0203 	subs.w	r2, r8, r3
 81004fa:	eb64 0409 	sbc.w	r4, r4, r9
 81004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8100502:	fa22 f301 	lsr.w	r3, r2, r1
 8100506:	431e      	orrs	r6, r3
 8100508:	40cc      	lsrs	r4, r1
 810050a:	e9c5 6400 	strd	r6, r4, [r5]
 810050e:	2100      	movs	r1, #0
 8100510:	e74f      	b.n	81003b2 <__udivmoddi4+0xa2>
 8100512:	fbb1 fcf2 	udiv	ip, r1, r2
 8100516:	0c01      	lsrs	r1, r0, #16
 8100518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 810051c:	b280      	uxth	r0, r0
 810051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8100522:	463b      	mov	r3, r7
 8100524:	4638      	mov	r0, r7
 8100526:	463c      	mov	r4, r7
 8100528:	46b8      	mov	r8, r7
 810052a:	46be      	mov	lr, r7
 810052c:	2620      	movs	r6, #32
 810052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8100532:	eba2 0208 	sub.w	r2, r2, r8
 8100536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 810053a:	e766      	b.n	810040a <__udivmoddi4+0xfa>
 810053c:	4601      	mov	r1, r0
 810053e:	e718      	b.n	8100372 <__udivmoddi4+0x62>
 8100540:	4610      	mov	r0, r2
 8100542:	e72c      	b.n	810039e <__udivmoddi4+0x8e>
 8100544:	f1c6 0220 	rsb	r2, r6, #32
 8100548:	fa2e f302 	lsr.w	r3, lr, r2
 810054c:	40b7      	lsls	r7, r6
 810054e:	40b1      	lsls	r1, r6
 8100550:	fa20 f202 	lsr.w	r2, r0, r2
 8100554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100558:	430a      	orrs	r2, r1
 810055a:	fbb3 f8fe 	udiv	r8, r3, lr
 810055e:	b2bc      	uxth	r4, r7
 8100560:	fb0e 3318 	mls	r3, lr, r8, r3
 8100564:	0c11      	lsrs	r1, r2, #16
 8100566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810056a:	fb08 f904 	mul.w	r9, r8, r4
 810056e:	40b0      	lsls	r0, r6
 8100570:	4589      	cmp	r9, r1
 8100572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8100576:	b280      	uxth	r0, r0
 8100578:	d93e      	bls.n	81005f8 <__udivmoddi4+0x2e8>
 810057a:	1879      	adds	r1, r7, r1
 810057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8100580:	d201      	bcs.n	8100586 <__udivmoddi4+0x276>
 8100582:	4589      	cmp	r9, r1
 8100584:	d81f      	bhi.n	81005c6 <__udivmoddi4+0x2b6>
 8100586:	eba1 0109 	sub.w	r1, r1, r9
 810058a:	fbb1 f9fe 	udiv	r9, r1, lr
 810058e:	fb09 f804 	mul.w	r8, r9, r4
 8100592:	fb0e 1119 	mls	r1, lr, r9, r1
 8100596:	b292      	uxth	r2, r2
 8100598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810059c:	4542      	cmp	r2, r8
 810059e:	d229      	bcs.n	81005f4 <__udivmoddi4+0x2e4>
 81005a0:	18ba      	adds	r2, r7, r2
 81005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 81005a6:	d2c4      	bcs.n	8100532 <__udivmoddi4+0x222>
 81005a8:	4542      	cmp	r2, r8
 81005aa:	d2c2      	bcs.n	8100532 <__udivmoddi4+0x222>
 81005ac:	f1a9 0102 	sub.w	r1, r9, #2
 81005b0:	443a      	add	r2, r7
 81005b2:	e7be      	b.n	8100532 <__udivmoddi4+0x222>
 81005b4:	45f0      	cmp	r8, lr
 81005b6:	d29d      	bcs.n	81004f4 <__udivmoddi4+0x1e4>
 81005b8:	ebbe 0302 	subs.w	r3, lr, r2
 81005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 81005c0:	3801      	subs	r0, #1
 81005c2:	46e1      	mov	r9, ip
 81005c4:	e796      	b.n	81004f4 <__udivmoddi4+0x1e4>
 81005c6:	eba7 0909 	sub.w	r9, r7, r9
 81005ca:	4449      	add	r1, r9
 81005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 81005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 81005d4:	fb09 f804 	mul.w	r8, r9, r4
 81005d8:	e7db      	b.n	8100592 <__udivmoddi4+0x282>
 81005da:	4673      	mov	r3, lr
 81005dc:	e77f      	b.n	81004de <__udivmoddi4+0x1ce>
 81005de:	4650      	mov	r0, sl
 81005e0:	e766      	b.n	81004b0 <__udivmoddi4+0x1a0>
 81005e2:	4608      	mov	r0, r1
 81005e4:	e6fd      	b.n	81003e2 <__udivmoddi4+0xd2>
 81005e6:	443b      	add	r3, r7
 81005e8:	3a02      	subs	r2, #2
 81005ea:	e733      	b.n	8100454 <__udivmoddi4+0x144>
 81005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 81005f0:	443b      	add	r3, r7
 81005f2:	e71c      	b.n	810042e <__udivmoddi4+0x11e>
 81005f4:	4649      	mov	r1, r9
 81005f6:	e79c      	b.n	8100532 <__udivmoddi4+0x222>
 81005f8:	eba1 0109 	sub.w	r1, r1, r9
 81005fc:	46c4      	mov	ip, r8
 81005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8100602:	fb09 f804 	mul.w	r8, r9, r4
 8100606:	e7c4      	b.n	8100592 <__udivmoddi4+0x282>

08100608 <__aeabi_idiv0>:
 8100608:	4770      	bx	lr
 810060a:	bf00      	nop

0810060c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 810060c:	b480      	push	{r7}
 810060e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100610:	4b09      	ldr	r3, [pc, #36]	@ (8100638 <SystemInit+0x2c>)
 8100612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100616:	4a08      	ldr	r2, [pc, #32]	@ (8100638 <SystemInit+0x2c>)
 8100618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810061c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100620:	4b05      	ldr	r3, [pc, #20]	@ (8100638 <SystemInit+0x2c>)
 8100622:	691b      	ldr	r3, [r3, #16]
 8100624:	4a04      	ldr	r2, [pc, #16]	@ (8100638 <SystemInit+0x2c>)
 8100626:	f043 0310 	orr.w	r3, r3, #16
 810062a:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 810062c:	bf00      	nop
 810062e:	46bd      	mov	sp, r7
 8100630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100634:	4770      	bx	lr
 8100636:	bf00      	nop
 8100638:	e000ed00 	.word	0xe000ed00

0810063c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 810063c:	b480      	push	{r7}
 810063e:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100640:	4b09      	ldr	r3, [pc, #36]	@ (8100668 <ExitRun0Mode+0x2c>)
 8100642:	68db      	ldr	r3, [r3, #12]
 8100644:	4a08      	ldr	r2, [pc, #32]	@ (8100668 <ExitRun0Mode+0x2c>)
 8100646:	f023 0302 	bic.w	r3, r3, #2
 810064a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 810064c:	bf00      	nop
 810064e:	4b06      	ldr	r3, [pc, #24]	@ (8100668 <ExitRun0Mode+0x2c>)
 8100650:	685b      	ldr	r3, [r3, #4]
 8100652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8100656:	2b00      	cmp	r3, #0
 8100658:	d0f9      	beq.n	810064e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 810065a:	bf00      	nop
 810065c:	bf00      	nop
 810065e:	46bd      	mov	sp, r7
 8100660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100664:	4770      	bx	lr
 8100666:	bf00      	nop
 8100668:	58024800 	.word	0x58024800

0810066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810066c:	b580      	push	{r7, lr}
 810066e:	b082      	sub	sp, #8
 8100670:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100672:	4b22      	ldr	r3, [pc, #136]	@ (81006fc <main+0x90>)
 8100674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100678:	4a20      	ldr	r2, [pc, #128]	@ (81006fc <main+0x90>)
 810067a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810067e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100682:	4b1e      	ldr	r3, [pc, #120]	@ (81006fc <main+0x90>)
 8100684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810068c:	607b      	str	r3, [r7, #4]
 810068e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100690:	2001      	movs	r0, #1
 8100692:	f000 fd8d 	bl	81011b0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100696:	f000 fe17 	bl	81012c8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810069a:	2201      	movs	r2, #1
 810069c:	2102      	movs	r1, #2
 810069e:	2000      	movs	r0, #0
 81006a0:	f000 fd98 	bl	81011d4 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006a4:	4b16      	ldr	r3, [pc, #88]	@ (8100700 <main+0x94>)
 81006a6:	681b      	ldr	r3, [r3, #0]
 81006a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81006ac:	2b70      	cmp	r3, #112	@ 0x70
 81006ae:	d108      	bne.n	81006c2 <main+0x56>
 81006b0:	4b14      	ldr	r3, [pc, #80]	@ (8100704 <main+0x98>)
 81006b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81006b6:	4a13      	ldr	r2, [pc, #76]	@ (8100704 <main+0x98>)
 81006b8:	f043 0301 	orr.w	r3, r3, #1
 81006bc:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81006c0:	e007      	b.n	81006d2 <main+0x66>
 81006c2:	4b10      	ldr	r3, [pc, #64]	@ (8100704 <main+0x98>)
 81006c4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81006c8:	4a0e      	ldr	r2, [pc, #56]	@ (8100704 <main+0x98>)
 81006ca:	f043 0301 	orr.w	r3, r3, #1
 81006ce:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81006d2:	f000 f9f9 	bl	8100ac8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81006d6:	f000 f869 	bl	81007ac <MX_GPIO_Init>
  MX_UART4_Init();
 81006da:	f000 f81b 	bl	8100714 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 81006de:	f003 ff13 	bl	8104508 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 81006e2:	4a09      	ldr	r2, [pc, #36]	@ (8100708 <main+0x9c>)
 81006e4:	2100      	movs	r1, #0
 81006e6:	4809      	ldr	r0, [pc, #36]	@ (810070c <main+0xa0>)
 81006e8:	f003 ff58 	bl	810459c <osThreadNew>
 81006ec:	4603      	mov	r3, r0
 81006ee:	4a08      	ldr	r2, [pc, #32]	@ (8100710 <main+0xa4>)
 81006f0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 81006f2:	f003 ff2d 	bl	8104550 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81006f6:	bf00      	nop
 81006f8:	e7fd      	b.n	81006f6 <main+0x8a>
 81006fa:	bf00      	nop
 81006fc:	58024400 	.word	0x58024400
 8100700:	e000ed00 	.word	0xe000ed00
 8100704:	58026400 	.word	0x58026400
 8100708:	081070cc 	.word	0x081070cc
 810070c:	08100801 	.word	0x08100801
 8100710:	100000d0 	.word	0x100000d0

08100714 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8100714:	b580      	push	{r7, lr}
 8100716:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8100718:	4b22      	ldr	r3, [pc, #136]	@ (81007a4 <MX_UART4_Init+0x90>)
 810071a:	4a23      	ldr	r2, [pc, #140]	@ (81007a8 <MX_UART4_Init+0x94>)
 810071c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 810071e:	4b21      	ldr	r3, [pc, #132]	@ (81007a4 <MX_UART4_Init+0x90>)
 8100720:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8100724:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8100726:	4b1f      	ldr	r3, [pc, #124]	@ (81007a4 <MX_UART4_Init+0x90>)
 8100728:	2200      	movs	r2, #0
 810072a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 810072c:	4b1d      	ldr	r3, [pc, #116]	@ (81007a4 <MX_UART4_Init+0x90>)
 810072e:	2200      	movs	r2, #0
 8100730:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8100732:	4b1c      	ldr	r3, [pc, #112]	@ (81007a4 <MX_UART4_Init+0x90>)
 8100734:	2200      	movs	r2, #0
 8100736:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8100738:	4b1a      	ldr	r3, [pc, #104]	@ (81007a4 <MX_UART4_Init+0x90>)
 810073a:	220c      	movs	r2, #12
 810073c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810073e:	4b19      	ldr	r3, [pc, #100]	@ (81007a4 <MX_UART4_Init+0x90>)
 8100740:	2200      	movs	r2, #0
 8100742:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8100744:	4b17      	ldr	r3, [pc, #92]	@ (81007a4 <MX_UART4_Init+0x90>)
 8100746:	2200      	movs	r2, #0
 8100748:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810074a:	4b16      	ldr	r3, [pc, #88]	@ (81007a4 <MX_UART4_Init+0x90>)
 810074c:	2200      	movs	r2, #0
 810074e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100750:	4b14      	ldr	r3, [pc, #80]	@ (81007a4 <MX_UART4_Init+0x90>)
 8100752:	2200      	movs	r2, #0
 8100754:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100756:	4b13      	ldr	r3, [pc, #76]	@ (81007a4 <MX_UART4_Init+0x90>)
 8100758:	2200      	movs	r2, #0
 810075a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 810075c:	4811      	ldr	r0, [pc, #68]	@ (81007a4 <MX_UART4_Init+0x90>)
 810075e:	f002 fdc5 	bl	81032ec <HAL_UART_Init>
 8100762:	4603      	mov	r3, r0
 8100764:	2b00      	cmp	r3, #0
 8100766:	d001      	beq.n	810076c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8100768:	f000 f87c 	bl	8100864 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810076c:	2100      	movs	r1, #0
 810076e:	480d      	ldr	r0, [pc, #52]	@ (81007a4 <MX_UART4_Init+0x90>)
 8100770:	f003 fdcc 	bl	810430c <HAL_UARTEx_SetTxFifoThreshold>
 8100774:	4603      	mov	r3, r0
 8100776:	2b00      	cmp	r3, #0
 8100778:	d001      	beq.n	810077e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 810077a:	f000 f873 	bl	8100864 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810077e:	2100      	movs	r1, #0
 8100780:	4808      	ldr	r0, [pc, #32]	@ (81007a4 <MX_UART4_Init+0x90>)
 8100782:	f003 fe01 	bl	8104388 <HAL_UARTEx_SetRxFifoThreshold>
 8100786:	4603      	mov	r3, r0
 8100788:	2b00      	cmp	r3, #0
 810078a:	d001      	beq.n	8100790 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 810078c:	f000 f86a 	bl	8100864 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8100790:	4804      	ldr	r0, [pc, #16]	@ (81007a4 <MX_UART4_Init+0x90>)
 8100792:	f003 fd82 	bl	810429a <HAL_UARTEx_DisableFifoMode>
 8100796:	4603      	mov	r3, r0
 8100798:	2b00      	cmp	r3, #0
 810079a:	d001      	beq.n	81007a0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 810079c:	f000 f862 	bl	8100864 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 81007a0:	bf00      	nop
 81007a2:	bd80      	pop	{r7, pc}
 81007a4:	1000003c 	.word	0x1000003c
 81007a8:	40004c00 	.word	0x40004c00

081007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81007ac:	b480      	push	{r7}
 81007ae:	b083      	sub	sp, #12
 81007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81007b2:	4b12      	ldr	r3, [pc, #72]	@ (81007fc <MX_GPIO_Init+0x50>)
 81007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007b8:	4a10      	ldr	r2, [pc, #64]	@ (81007fc <MX_GPIO_Init+0x50>)
 81007ba:	f043 0301 	orr.w	r3, r3, #1
 81007be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81007c2:	4b0e      	ldr	r3, [pc, #56]	@ (81007fc <MX_GPIO_Init+0x50>)
 81007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007c8:	f003 0301 	and.w	r3, r3, #1
 81007cc:	607b      	str	r3, [r7, #4]
 81007ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81007d0:	4b0a      	ldr	r3, [pc, #40]	@ (81007fc <MX_GPIO_Init+0x50>)
 81007d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007d6:	4a09      	ldr	r2, [pc, #36]	@ (81007fc <MX_GPIO_Init+0x50>)
 81007d8:	f043 0304 	orr.w	r3, r3, #4
 81007dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81007e0:	4b06      	ldr	r3, [pc, #24]	@ (81007fc <MX_GPIO_Init+0x50>)
 81007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007e6:	f003 0304 	and.w	r3, r3, #4
 81007ea:	603b      	str	r3, [r7, #0]
 81007ec:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 81007ee:	bf00      	nop
 81007f0:	370c      	adds	r7, #12
 81007f2:	46bd      	mov	sp, r7
 81007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007f8:	4770      	bx	lr
 81007fa:	bf00      	nop
 81007fc:	58024400 	.word	0x58024400

08100800 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8100800:	b580      	push	{r7, lr}
 8100802:	b084      	sub	sp, #16
 8100804:	af00      	add	r7, sp, #0
 8100806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osDelay(2000);
 8100808:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 810080c:	f003 ff58 	bl	81046c0 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	// Example: Send 16 floats
	BSP_LED_Toggle(LED_YELLOW);
 8100810:	2001      	movs	r0, #1
 8100812:	f000 f92f 	bl	8100a74 <BSP_LED_Toggle>
	for (int i = 0; i < 16; ++i)
 8100816:	2300      	movs	r3, #0
 8100818:	60fb      	str	r3, [r7, #12]
 810081a:	e012      	b.n	8100842 <StartDefaultTask+0x42>
		SHARED_MEM->buffer[i] = i * 1.1f;
 810081c:	68fb      	ldr	r3, [r7, #12]
 810081e:	ee07 3a90 	vmov	s15, r3
 8100822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100826:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 810082a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8100860 <StartDefaultTask+0x60>
 810082e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8100832:	68fb      	ldr	r3, [r7, #12]
 8100834:	009b      	lsls	r3, r3, #2
 8100836:	4413      	add	r3, r2
 8100838:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 16; ++i)
 810083c:	68fb      	ldr	r3, [r7, #12]
 810083e:	3301      	adds	r3, #1
 8100840:	60fb      	str	r3, [r7, #12]
 8100842:	68fb      	ldr	r3, [r7, #12]
 8100844:	2b0f      	cmp	r3, #15
 8100846:	dde9      	ble.n	810081c <StartDefaultTask+0x1c>
	SHARED_MEM->flag = 1;
 8100848:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 810084c:	2201      	movs	r2, #1
 810084e:	641a      	str	r2, [r3, #64]	@ 0x40
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100850:	f3bf 8f4f 	dsb	sy
}
 8100854:	bf00      	nop
	__DSB();    // ensure the write completes

    osDelay(1000);
 8100856:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 810085a:	f003 ff31 	bl	81046c0 <osDelay>
	BSP_LED_Toggle(LED_YELLOW);
 810085e:	e7d7      	b.n	8100810 <StartDefaultTask+0x10>
 8100860:	3f8ccccd 	.word	0x3f8ccccd

08100864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100864:	b480      	push	{r7}
 8100866:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8100868:	b672      	cpsid	i
}
 810086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810086c:	bf00      	nop
 810086e:	e7fd      	b.n	810086c <Error_Handler+0x8>

08100870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100870:	b580      	push	{r7, lr}
 8100872:	b082      	sub	sp, #8
 8100874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100876:	4b0c      	ldr	r3, [pc, #48]	@ (81008a8 <HAL_MspInit+0x38>)
 8100878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810087c:	4a0a      	ldr	r2, [pc, #40]	@ (81008a8 <HAL_MspInit+0x38>)
 810087e:	f043 0302 	orr.w	r3, r3, #2
 8100882:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100886:	4b08      	ldr	r3, [pc, #32]	@ (81008a8 <HAL_MspInit+0x38>)
 8100888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810088c:	f003 0302 	and.w	r3, r3, #2
 8100890:	607b      	str	r3, [r7, #4]
 8100892:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100894:	2200      	movs	r2, #0
 8100896:	210f      	movs	r1, #15
 8100898:	f06f 0001 	mvn.w	r0, #1
 810089c:	f000 fa85 	bl	8100daa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81008a0:	bf00      	nop
 81008a2:	3708      	adds	r7, #8
 81008a4:	46bd      	mov	sp, r7
 81008a6:	bd80      	pop	{r7, pc}
 81008a8:	58024400 	.word	0x58024400

081008ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81008ac:	b580      	push	{r7, lr}
 81008ae:	b0bc      	sub	sp, #240	@ 0xf0
 81008b0:	af00      	add	r7, sp, #0
 81008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81008b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81008b8:	2200      	movs	r2, #0
 81008ba:	601a      	str	r2, [r3, #0]
 81008bc:	605a      	str	r2, [r3, #4]
 81008be:	609a      	str	r2, [r3, #8]
 81008c0:	60da      	str	r2, [r3, #12]
 81008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81008c4:	f107 0318 	add.w	r3, r7, #24
 81008c8:	22c0      	movs	r2, #192	@ 0xc0
 81008ca:	2100      	movs	r1, #0
 81008cc:	4618      	mov	r0, r3
 81008ce:	f006 fb9d 	bl	810700c <memset>
  if(huart->Instance==UART4)
 81008d2:	687b      	ldr	r3, [r7, #4]
 81008d4:	681b      	ldr	r3, [r3, #0]
 81008d6:	4a39      	ldr	r2, [pc, #228]	@ (81009bc <HAL_UART_MspInit+0x110>)
 81008d8:	4293      	cmp	r3, r2
 81008da:	d16a      	bne.n	81009b2 <HAL_UART_MspInit+0x106>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 81008dc:	f04f 0202 	mov.w	r2, #2
 81008e0:	f04f 0300 	mov.w	r3, #0
 81008e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81008e8:	2300      	movs	r3, #0
 81008ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81008ee:	f107 0318 	add.w	r3, r7, #24
 81008f2:	4618      	mov	r0, r3
 81008f4:	f000 fece 	bl	8101694 <HAL_RCCEx_PeriphCLKConfig>
 81008f8:	4603      	mov	r3, r0
 81008fa:	2b00      	cmp	r3, #0
 81008fc:	d001      	beq.n	8100902 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 81008fe:	f7ff ffb1 	bl	8100864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8100902:	4b2f      	ldr	r3, [pc, #188]	@ (81009c0 <HAL_UART_MspInit+0x114>)
 8100904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100908:	4a2d      	ldr	r2, [pc, #180]	@ (81009c0 <HAL_UART_MspInit+0x114>)
 810090a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810090e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100912:	4b2b      	ldr	r3, [pc, #172]	@ (81009c0 <HAL_UART_MspInit+0x114>)
 8100914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100918:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 810091c:	617b      	str	r3, [r7, #20]
 810091e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100920:	4b27      	ldr	r3, [pc, #156]	@ (81009c0 <HAL_UART_MspInit+0x114>)
 8100922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100926:	4a26      	ldr	r2, [pc, #152]	@ (81009c0 <HAL_UART_MspInit+0x114>)
 8100928:	f043 0301 	orr.w	r3, r3, #1
 810092c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100930:	4b23      	ldr	r3, [pc, #140]	@ (81009c0 <HAL_UART_MspInit+0x114>)
 8100932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100936:	f003 0301 	and.w	r3, r3, #1
 810093a:	613b      	str	r3, [r7, #16]
 810093c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810093e:	4b20      	ldr	r3, [pc, #128]	@ (81009c0 <HAL_UART_MspInit+0x114>)
 8100940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100944:	4a1e      	ldr	r2, [pc, #120]	@ (81009c0 <HAL_UART_MspInit+0x114>)
 8100946:	f043 0304 	orr.w	r3, r3, #4
 810094a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810094e:	4b1c      	ldr	r3, [pc, #112]	@ (81009c0 <HAL_UART_MspInit+0x114>)
 8100950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100954:	f003 0304 	and.w	r3, r3, #4
 8100958:	60fb      	str	r3, [r7, #12]
 810095a:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 810095c:	2301      	movs	r3, #1
 810095e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100962:	2302      	movs	r3, #2
 8100964:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100968:	2300      	movs	r3, #0
 810096a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810096e:	2300      	movs	r3, #0
 8100970:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8100974:	2308      	movs	r3, #8
 8100976:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810097a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810097e:	4619      	mov	r1, r3
 8100980:	4810      	ldr	r0, [pc, #64]	@ (81009c4 <HAL_UART_MspInit+0x118>)
 8100982:	f000 fa4b 	bl	8100e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8100986:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810098a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810098e:	2302      	movs	r3, #2
 8100990:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100994:	2300      	movs	r3, #0
 8100996:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810099a:	2300      	movs	r3, #0
 810099c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 81009a0:	2308      	movs	r3, #8
 81009a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81009a6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81009aa:	4619      	mov	r1, r3
 81009ac:	4806      	ldr	r0, [pc, #24]	@ (81009c8 <HAL_UART_MspInit+0x11c>)
 81009ae:	f000 fa35 	bl	8100e1c <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 81009b2:	bf00      	nop
 81009b4:	37f0      	adds	r7, #240	@ 0xf0
 81009b6:	46bd      	mov	sp, r7
 81009b8:	bd80      	pop	{r7, pc}
 81009ba:	bf00      	nop
 81009bc:	40004c00 	.word	0x40004c00
 81009c0:	58024400 	.word	0x58024400
 81009c4:	58020000 	.word	0x58020000
 81009c8:	58020800 	.word	0x58020800

081009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81009cc:	b480      	push	{r7}
 81009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81009d0:	bf00      	nop
 81009d2:	e7fd      	b.n	81009d0 <NMI_Handler+0x4>

081009d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81009d4:	b480      	push	{r7}
 81009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81009d8:	bf00      	nop
 81009da:	e7fd      	b.n	81009d8 <HardFault_Handler+0x4>

081009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81009dc:	b480      	push	{r7}
 81009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81009e0:	bf00      	nop
 81009e2:	e7fd      	b.n	81009e0 <MemManage_Handler+0x4>

081009e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81009e4:	b480      	push	{r7}
 81009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81009e8:	bf00      	nop
 81009ea:	e7fd      	b.n	81009e8 <BusFault_Handler+0x4>

081009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81009ec:	b480      	push	{r7}
 81009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81009f0:	bf00      	nop
 81009f2:	e7fd      	b.n	81009f0 <UsageFault_Handler+0x4>

081009f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81009f4:	b480      	push	{r7}
 81009f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81009f8:	bf00      	nop
 81009fa:	46bd      	mov	sp, r7
 81009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a00:	4770      	bx	lr

08100a02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100a02:	b580      	push	{r7, lr}
 8100a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100a06:	f000 f8f3 	bl	8100bf0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8100a0a:	f005 fec3 	bl	8106794 <xTaskGetSchedulerState>
 8100a0e:	4603      	mov	r3, r0
 8100a10:	2b01      	cmp	r3, #1
 8100a12:	d001      	beq.n	8100a18 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8100a14:	f004 fb08 	bl	8105028 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100a18:	bf00      	nop
 8100a1a:	bd80      	pop	{r7, pc}

08100a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100a1c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8100a58 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8100a20:	f7ff fe0c 	bl	810063c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8100a24:	f7ff fdf2 	bl	810060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100a28:	480c      	ldr	r0, [pc, #48]	@ (8100a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100a2a:	490d      	ldr	r1, [pc, #52]	@ (8100a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8100a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100a30:	e002      	b.n	8100a38 <LoopCopyDataInit>

08100a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100a36:	3304      	adds	r3, #4

08100a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100a3c:	d3f9      	bcc.n	8100a32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8100a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100a40:	4c0a      	ldr	r4, [pc, #40]	@ (8100a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8100a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100a44:	e001      	b.n	8100a4a <LoopFillZerobss>

08100a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100a48:	3204      	adds	r2, #4

08100a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100a4c:	d3fb      	bcc.n	8100a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100a4e:	f006 fae5 	bl	810701c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100a52:	f7ff fe0b 	bl	810066c <main>
  bx  lr
 8100a56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100a58:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100a5c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100a60:	10000020 	.word	0x10000020
  ldr r2, =_sidata
 8100a64:	08107130 	.word	0x08107130
  ldr r2, =_sbss
 8100a68:	10000020 	.word	0x10000020
  ldr r4, =_ebss
 8100a6c:	10004a28 	.word	0x10004a28

08100a70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100a70:	e7fe      	b.n	8100a70 <ADC3_IRQHandler>
	...

08100a74 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8100a74:	b580      	push	{r7, lr}
 8100a76:	b084      	sub	sp, #16
 8100a78:	af00      	add	r7, sp, #0
 8100a7a:	4603      	mov	r3, r0
 8100a7c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8100a7e:	2300      	movs	r3, #0
 8100a80:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8100a82:	79fb      	ldrb	r3, [r7, #7]
 8100a84:	2b00      	cmp	r3, #0
 8100a86:	d009      	beq.n	8100a9c <BSP_LED_Toggle+0x28>
 8100a88:	79fb      	ldrb	r3, [r7, #7]
 8100a8a:	2b01      	cmp	r3, #1
 8100a8c:	d006      	beq.n	8100a9c <BSP_LED_Toggle+0x28>
 8100a8e:	79fb      	ldrb	r3, [r7, #7]
 8100a90:	2b02      	cmp	r3, #2
 8100a92:	d003      	beq.n	8100a9c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8100a94:	f06f 0301 	mvn.w	r3, #1
 8100a98:	60fb      	str	r3, [r7, #12]
 8100a9a:	e00b      	b.n	8100ab4 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8100a9c:	79fb      	ldrb	r3, [r7, #7]
 8100a9e:	4a08      	ldr	r2, [pc, #32]	@ (8100ac0 <BSP_LED_Toggle+0x4c>)
 8100aa0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8100aa4:	79fb      	ldrb	r3, [r7, #7]
 8100aa6:	4907      	ldr	r1, [pc, #28]	@ (8100ac4 <BSP_LED_Toggle+0x50>)
 8100aa8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8100aac:	4619      	mov	r1, r3
 8100aae:	4610      	mov	r0, r2
 8100ab0:	f000 fb64 	bl	810117c <HAL_GPIO_TogglePin>
  }

  return ret;
 8100ab4:	68fb      	ldr	r3, [r7, #12]
}
 8100ab6:	4618      	mov	r0, r3
 8100ab8:	3710      	adds	r7, #16
 8100aba:	46bd      	mov	sp, r7
 8100abc:	bd80      	pop	{r7, pc}
 8100abe:	bf00      	nop
 8100ac0:	10000008 	.word	0x10000008
 8100ac4:	081070f0 	.word	0x081070f0

08100ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100ac8:	b580      	push	{r7, lr}
 8100aca:	b082      	sub	sp, #8
 8100acc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100ace:	4b28      	ldr	r3, [pc, #160]	@ (8100b70 <HAL_Init+0xa8>)
 8100ad0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100ad4:	4a26      	ldr	r2, [pc, #152]	@ (8100b70 <HAL_Init+0xa8>)
 8100ad6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100ada:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100ade:	4b24      	ldr	r3, [pc, #144]	@ (8100b70 <HAL_Init+0xa8>)
 8100ae0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100ae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100ae8:	603b      	str	r3, [r7, #0]
 8100aea:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100aec:	4b21      	ldr	r3, [pc, #132]	@ (8100b74 <HAL_Init+0xac>)
 8100aee:	681b      	ldr	r3, [r3, #0]
 8100af0:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8100af4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8100af8:	4a1e      	ldr	r2, [pc, #120]	@ (8100b74 <HAL_Init+0xac>)
 8100afa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8100afe:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100b00:	4b1c      	ldr	r3, [pc, #112]	@ (8100b74 <HAL_Init+0xac>)
 8100b02:	681b      	ldr	r3, [r3, #0]
 8100b04:	4a1b      	ldr	r2, [pc, #108]	@ (8100b74 <HAL_Init+0xac>)
 8100b06:	f043 0301 	orr.w	r3, r3, #1
 8100b0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100b0c:	2003      	movs	r0, #3
 8100b0e:	f000 f941 	bl	8100d94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100b12:	f000 fbe7 	bl	81012e4 <HAL_RCC_GetSysClockFreq>
 8100b16:	4602      	mov	r2, r0
 8100b18:	4b15      	ldr	r3, [pc, #84]	@ (8100b70 <HAL_Init+0xa8>)
 8100b1a:	699b      	ldr	r3, [r3, #24]
 8100b1c:	0a1b      	lsrs	r3, r3, #8
 8100b1e:	f003 030f 	and.w	r3, r3, #15
 8100b22:	4915      	ldr	r1, [pc, #84]	@ (8100b78 <HAL_Init+0xb0>)
 8100b24:	5ccb      	ldrb	r3, [r1, r3]
 8100b26:	f003 031f 	and.w	r3, r3, #31
 8100b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8100b2e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100b30:	4b0f      	ldr	r3, [pc, #60]	@ (8100b70 <HAL_Init+0xa8>)
 8100b32:	699b      	ldr	r3, [r3, #24]
 8100b34:	f003 030f 	and.w	r3, r3, #15
 8100b38:	4a0f      	ldr	r2, [pc, #60]	@ (8100b78 <HAL_Init+0xb0>)
 8100b3a:	5cd3      	ldrb	r3, [r2, r3]
 8100b3c:	f003 031f 	and.w	r3, r3, #31
 8100b40:	687a      	ldr	r2, [r7, #4]
 8100b42:	fa22 f303 	lsr.w	r3, r2, r3
 8100b46:	4a0d      	ldr	r2, [pc, #52]	@ (8100b7c <HAL_Init+0xb4>)
 8100b48:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8100b7c <HAL_Init+0xb4>)
 8100b4c:	681b      	ldr	r3, [r3, #0]
 8100b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8100b80 <HAL_Init+0xb8>)
 8100b50:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100b52:	200f      	movs	r0, #15
 8100b54:	f000 f816 	bl	8100b84 <HAL_InitTick>
 8100b58:	4603      	mov	r3, r0
 8100b5a:	2b00      	cmp	r3, #0
 8100b5c:	d001      	beq.n	8100b62 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100b5e:	2301      	movs	r3, #1
 8100b60:	e002      	b.n	8100b68 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100b62:	f7ff fe85 	bl	8100870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100b66:	2300      	movs	r3, #0
}
 8100b68:	4618      	mov	r0, r3
 8100b6a:	3708      	adds	r7, #8
 8100b6c:	46bd      	mov	sp, r7
 8100b6e:	bd80      	pop	{r7, pc}
 8100b70:	58024400 	.word	0x58024400
 8100b74:	40024400 	.word	0x40024400
 8100b78:	081070bc 	.word	0x081070bc
 8100b7c:	10000004 	.word	0x10000004
 8100b80:	10000000 	.word	0x10000000

08100b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100b84:	b580      	push	{r7, lr}
 8100b86:	b082      	sub	sp, #8
 8100b88:	af00      	add	r7, sp, #0
 8100b8a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100b8c:	4b15      	ldr	r3, [pc, #84]	@ (8100be4 <HAL_InitTick+0x60>)
 8100b8e:	781b      	ldrb	r3, [r3, #0]
 8100b90:	2b00      	cmp	r3, #0
 8100b92:	d101      	bne.n	8100b98 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100b94:	2301      	movs	r3, #1
 8100b96:	e021      	b.n	8100bdc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100b98:	4b13      	ldr	r3, [pc, #76]	@ (8100be8 <HAL_InitTick+0x64>)
 8100b9a:	681a      	ldr	r2, [r3, #0]
 8100b9c:	4b11      	ldr	r3, [pc, #68]	@ (8100be4 <HAL_InitTick+0x60>)
 8100b9e:	781b      	ldrb	r3, [r3, #0]
 8100ba0:	4619      	mov	r1, r3
 8100ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8100baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8100bae:	4618      	mov	r0, r3
 8100bb0:	f000 f915 	bl	8100dde <HAL_SYSTICK_Config>
 8100bb4:	4603      	mov	r3, r0
 8100bb6:	2b00      	cmp	r3, #0
 8100bb8:	d001      	beq.n	8100bbe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100bba:	2301      	movs	r3, #1
 8100bbc:	e00e      	b.n	8100bdc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100bbe:	687b      	ldr	r3, [r7, #4]
 8100bc0:	2b0f      	cmp	r3, #15
 8100bc2:	d80a      	bhi.n	8100bda <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100bc4:	2200      	movs	r2, #0
 8100bc6:	6879      	ldr	r1, [r7, #4]
 8100bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8100bcc:	f000 f8ed 	bl	8100daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100bd0:	4a06      	ldr	r2, [pc, #24]	@ (8100bec <HAL_InitTick+0x68>)
 8100bd2:	687b      	ldr	r3, [r7, #4]
 8100bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100bd6:	2300      	movs	r3, #0
 8100bd8:	e000      	b.n	8100bdc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100bda:	2301      	movs	r3, #1
}
 8100bdc:	4618      	mov	r0, r3
 8100bde:	3708      	adds	r7, #8
 8100be0:	46bd      	mov	sp, r7
 8100be2:	bd80      	pop	{r7, pc}
 8100be4:	10000018 	.word	0x10000018
 8100be8:	10000000 	.word	0x10000000
 8100bec:	10000014 	.word	0x10000014

08100bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100bf0:	b480      	push	{r7}
 8100bf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100bf4:	4b06      	ldr	r3, [pc, #24]	@ (8100c10 <HAL_IncTick+0x20>)
 8100bf6:	781b      	ldrb	r3, [r3, #0]
 8100bf8:	461a      	mov	r2, r3
 8100bfa:	4b06      	ldr	r3, [pc, #24]	@ (8100c14 <HAL_IncTick+0x24>)
 8100bfc:	681b      	ldr	r3, [r3, #0]
 8100bfe:	4413      	add	r3, r2
 8100c00:	4a04      	ldr	r2, [pc, #16]	@ (8100c14 <HAL_IncTick+0x24>)
 8100c02:	6013      	str	r3, [r2, #0]
}
 8100c04:	bf00      	nop
 8100c06:	46bd      	mov	sp, r7
 8100c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c0c:	4770      	bx	lr
 8100c0e:	bf00      	nop
 8100c10:	10000018 	.word	0x10000018
 8100c14:	100000d4 	.word	0x100000d4

08100c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100c18:	b480      	push	{r7}
 8100c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8100c1c:	4b03      	ldr	r3, [pc, #12]	@ (8100c2c <HAL_GetTick+0x14>)
 8100c1e:	681b      	ldr	r3, [r3, #0]
}
 8100c20:	4618      	mov	r0, r3
 8100c22:	46bd      	mov	sp, r7
 8100c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c28:	4770      	bx	lr
 8100c2a:	bf00      	nop
 8100c2c:	100000d4 	.word	0x100000d4

08100c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100c30:	b480      	push	{r7}
 8100c32:	b085      	sub	sp, #20
 8100c34:	af00      	add	r7, sp, #0
 8100c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100c38:	687b      	ldr	r3, [r7, #4]
 8100c3a:	f003 0307 	and.w	r3, r3, #7
 8100c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100c40:	4b0c      	ldr	r3, [pc, #48]	@ (8100c74 <__NVIC_SetPriorityGrouping+0x44>)
 8100c42:	68db      	ldr	r3, [r3, #12]
 8100c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100c46:	68ba      	ldr	r2, [r7, #8]
 8100c48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100c4c:	4013      	ands	r3, r2
 8100c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100c50:	68fb      	ldr	r3, [r7, #12]
 8100c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100c54:	68bb      	ldr	r3, [r7, #8]
 8100c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100c58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100c62:	4a04      	ldr	r2, [pc, #16]	@ (8100c74 <__NVIC_SetPriorityGrouping+0x44>)
 8100c64:	68bb      	ldr	r3, [r7, #8]
 8100c66:	60d3      	str	r3, [r2, #12]
}
 8100c68:	bf00      	nop
 8100c6a:	3714      	adds	r7, #20
 8100c6c:	46bd      	mov	sp, r7
 8100c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c72:	4770      	bx	lr
 8100c74:	e000ed00 	.word	0xe000ed00

08100c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100c78:	b480      	push	{r7}
 8100c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100c7c:	4b04      	ldr	r3, [pc, #16]	@ (8100c90 <__NVIC_GetPriorityGrouping+0x18>)
 8100c7e:	68db      	ldr	r3, [r3, #12]
 8100c80:	0a1b      	lsrs	r3, r3, #8
 8100c82:	f003 0307 	and.w	r3, r3, #7
}
 8100c86:	4618      	mov	r0, r3
 8100c88:	46bd      	mov	sp, r7
 8100c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c8e:	4770      	bx	lr
 8100c90:	e000ed00 	.word	0xe000ed00

08100c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100c94:	b480      	push	{r7}
 8100c96:	b083      	sub	sp, #12
 8100c98:	af00      	add	r7, sp, #0
 8100c9a:	4603      	mov	r3, r0
 8100c9c:	6039      	str	r1, [r7, #0]
 8100c9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100ca0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100ca4:	2b00      	cmp	r3, #0
 8100ca6:	db0a      	blt.n	8100cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100ca8:	683b      	ldr	r3, [r7, #0]
 8100caa:	b2da      	uxtb	r2, r3
 8100cac:	490c      	ldr	r1, [pc, #48]	@ (8100ce0 <__NVIC_SetPriority+0x4c>)
 8100cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100cb2:	0112      	lsls	r2, r2, #4
 8100cb4:	b2d2      	uxtb	r2, r2
 8100cb6:	440b      	add	r3, r1
 8100cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100cbc:	e00a      	b.n	8100cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100cbe:	683b      	ldr	r3, [r7, #0]
 8100cc0:	b2da      	uxtb	r2, r3
 8100cc2:	4908      	ldr	r1, [pc, #32]	@ (8100ce4 <__NVIC_SetPriority+0x50>)
 8100cc4:	88fb      	ldrh	r3, [r7, #6]
 8100cc6:	f003 030f 	and.w	r3, r3, #15
 8100cca:	3b04      	subs	r3, #4
 8100ccc:	0112      	lsls	r2, r2, #4
 8100cce:	b2d2      	uxtb	r2, r2
 8100cd0:	440b      	add	r3, r1
 8100cd2:	761a      	strb	r2, [r3, #24]
}
 8100cd4:	bf00      	nop
 8100cd6:	370c      	adds	r7, #12
 8100cd8:	46bd      	mov	sp, r7
 8100cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cde:	4770      	bx	lr
 8100ce0:	e000e100 	.word	0xe000e100
 8100ce4:	e000ed00 	.word	0xe000ed00

08100ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100ce8:	b480      	push	{r7}
 8100cea:	b089      	sub	sp, #36	@ 0x24
 8100cec:	af00      	add	r7, sp, #0
 8100cee:	60f8      	str	r0, [r7, #12]
 8100cf0:	60b9      	str	r1, [r7, #8]
 8100cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100cf4:	68fb      	ldr	r3, [r7, #12]
 8100cf6:	f003 0307 	and.w	r3, r3, #7
 8100cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100cfc:	69fb      	ldr	r3, [r7, #28]
 8100cfe:	f1c3 0307 	rsb	r3, r3, #7
 8100d02:	2b04      	cmp	r3, #4
 8100d04:	bf28      	it	cs
 8100d06:	2304      	movcs	r3, #4
 8100d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100d0a:	69fb      	ldr	r3, [r7, #28]
 8100d0c:	3304      	adds	r3, #4
 8100d0e:	2b06      	cmp	r3, #6
 8100d10:	d902      	bls.n	8100d18 <NVIC_EncodePriority+0x30>
 8100d12:	69fb      	ldr	r3, [r7, #28]
 8100d14:	3b03      	subs	r3, #3
 8100d16:	e000      	b.n	8100d1a <NVIC_EncodePriority+0x32>
 8100d18:	2300      	movs	r3, #0
 8100d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8100d20:	69bb      	ldr	r3, [r7, #24]
 8100d22:	fa02 f303 	lsl.w	r3, r2, r3
 8100d26:	43da      	mvns	r2, r3
 8100d28:	68bb      	ldr	r3, [r7, #8]
 8100d2a:	401a      	ands	r2, r3
 8100d2c:	697b      	ldr	r3, [r7, #20]
 8100d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100d30:	f04f 31ff 	mov.w	r1, #4294967295
 8100d34:	697b      	ldr	r3, [r7, #20]
 8100d36:	fa01 f303 	lsl.w	r3, r1, r3
 8100d3a:	43d9      	mvns	r1, r3
 8100d3c:	687b      	ldr	r3, [r7, #4]
 8100d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100d40:	4313      	orrs	r3, r2
         );
}
 8100d42:	4618      	mov	r0, r3
 8100d44:	3724      	adds	r7, #36	@ 0x24
 8100d46:	46bd      	mov	sp, r7
 8100d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d4c:	4770      	bx	lr
	...

08100d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100d50:	b580      	push	{r7, lr}
 8100d52:	b082      	sub	sp, #8
 8100d54:	af00      	add	r7, sp, #0
 8100d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100d58:	687b      	ldr	r3, [r7, #4]
 8100d5a:	3b01      	subs	r3, #1
 8100d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8100d60:	d301      	bcc.n	8100d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100d62:	2301      	movs	r3, #1
 8100d64:	e00f      	b.n	8100d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100d66:	4a0a      	ldr	r2, [pc, #40]	@ (8100d90 <SysTick_Config+0x40>)
 8100d68:	687b      	ldr	r3, [r7, #4]
 8100d6a:	3b01      	subs	r3, #1
 8100d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100d6e:	210f      	movs	r1, #15
 8100d70:	f04f 30ff 	mov.w	r0, #4294967295
 8100d74:	f7ff ff8e 	bl	8100c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100d78:	4b05      	ldr	r3, [pc, #20]	@ (8100d90 <SysTick_Config+0x40>)
 8100d7a:	2200      	movs	r2, #0
 8100d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100d7e:	4b04      	ldr	r3, [pc, #16]	@ (8100d90 <SysTick_Config+0x40>)
 8100d80:	2207      	movs	r2, #7
 8100d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100d84:	2300      	movs	r3, #0
}
 8100d86:	4618      	mov	r0, r3
 8100d88:	3708      	adds	r7, #8
 8100d8a:	46bd      	mov	sp, r7
 8100d8c:	bd80      	pop	{r7, pc}
 8100d8e:	bf00      	nop
 8100d90:	e000e010 	.word	0xe000e010

08100d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100d94:	b580      	push	{r7, lr}
 8100d96:	b082      	sub	sp, #8
 8100d98:	af00      	add	r7, sp, #0
 8100d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100d9c:	6878      	ldr	r0, [r7, #4]
 8100d9e:	f7ff ff47 	bl	8100c30 <__NVIC_SetPriorityGrouping>
}
 8100da2:	bf00      	nop
 8100da4:	3708      	adds	r7, #8
 8100da6:	46bd      	mov	sp, r7
 8100da8:	bd80      	pop	{r7, pc}

08100daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100daa:	b580      	push	{r7, lr}
 8100dac:	b086      	sub	sp, #24
 8100dae:	af00      	add	r7, sp, #0
 8100db0:	4603      	mov	r3, r0
 8100db2:	60b9      	str	r1, [r7, #8]
 8100db4:	607a      	str	r2, [r7, #4]
 8100db6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100db8:	f7ff ff5e 	bl	8100c78 <__NVIC_GetPriorityGrouping>
 8100dbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100dbe:	687a      	ldr	r2, [r7, #4]
 8100dc0:	68b9      	ldr	r1, [r7, #8]
 8100dc2:	6978      	ldr	r0, [r7, #20]
 8100dc4:	f7ff ff90 	bl	8100ce8 <NVIC_EncodePriority>
 8100dc8:	4602      	mov	r2, r0
 8100dca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100dce:	4611      	mov	r1, r2
 8100dd0:	4618      	mov	r0, r3
 8100dd2:	f7ff ff5f 	bl	8100c94 <__NVIC_SetPriority>
}
 8100dd6:	bf00      	nop
 8100dd8:	3718      	adds	r7, #24
 8100dda:	46bd      	mov	sp, r7
 8100ddc:	bd80      	pop	{r7, pc}

08100dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100dde:	b580      	push	{r7, lr}
 8100de0:	b082      	sub	sp, #8
 8100de2:	af00      	add	r7, sp, #0
 8100de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100de6:	6878      	ldr	r0, [r7, #4]
 8100de8:	f7ff ffb2 	bl	8100d50 <SysTick_Config>
 8100dec:	4603      	mov	r3, r0
}
 8100dee:	4618      	mov	r0, r3
 8100df0:	3708      	adds	r7, #8
 8100df2:	46bd      	mov	sp, r7
 8100df4:	bd80      	pop	{r7, pc}
	...

08100df8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100df8:	b480      	push	{r7}
 8100dfa:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100dfc:	4b06      	ldr	r3, [pc, #24]	@ (8100e18 <HAL_GetCurrentCPUID+0x20>)
 8100dfe:	681b      	ldr	r3, [r3, #0]
 8100e00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8100e04:	2b70      	cmp	r3, #112	@ 0x70
 8100e06:	d101      	bne.n	8100e0c <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8100e08:	2303      	movs	r3, #3
 8100e0a:	e000      	b.n	8100e0e <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8100e0c:	2301      	movs	r3, #1
  }
}
 8100e0e:	4618      	mov	r0, r3
 8100e10:	46bd      	mov	sp, r7
 8100e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e16:	4770      	bx	lr
 8100e18:	e000ed00 	.word	0xe000ed00

08100e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8100e1c:	b480      	push	{r7}
 8100e1e:	b089      	sub	sp, #36	@ 0x24
 8100e20:	af00      	add	r7, sp, #0
 8100e22:	6078      	str	r0, [r7, #4]
 8100e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100e26:	2300      	movs	r3, #0
 8100e28:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100e2a:	4b89      	ldr	r3, [pc, #548]	@ (8101050 <HAL_GPIO_Init+0x234>)
 8100e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100e2e:	e194      	b.n	810115a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100e30:	683b      	ldr	r3, [r7, #0]
 8100e32:	681a      	ldr	r2, [r3, #0]
 8100e34:	2101      	movs	r1, #1
 8100e36:	69fb      	ldr	r3, [r7, #28]
 8100e38:	fa01 f303 	lsl.w	r3, r1, r3
 8100e3c:	4013      	ands	r3, r2
 8100e3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100e40:	693b      	ldr	r3, [r7, #16]
 8100e42:	2b00      	cmp	r3, #0
 8100e44:	f000 8186 	beq.w	8101154 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100e48:	683b      	ldr	r3, [r7, #0]
 8100e4a:	685b      	ldr	r3, [r3, #4]
 8100e4c:	f003 0303 	and.w	r3, r3, #3
 8100e50:	2b01      	cmp	r3, #1
 8100e52:	d005      	beq.n	8100e60 <HAL_GPIO_Init+0x44>
 8100e54:	683b      	ldr	r3, [r7, #0]
 8100e56:	685b      	ldr	r3, [r3, #4]
 8100e58:	f003 0303 	and.w	r3, r3, #3
 8100e5c:	2b02      	cmp	r3, #2
 8100e5e:	d130      	bne.n	8100ec2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100e60:	687b      	ldr	r3, [r7, #4]
 8100e62:	689b      	ldr	r3, [r3, #8]
 8100e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100e66:	69fb      	ldr	r3, [r7, #28]
 8100e68:	005b      	lsls	r3, r3, #1
 8100e6a:	2203      	movs	r2, #3
 8100e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8100e70:	43db      	mvns	r3, r3
 8100e72:	69ba      	ldr	r2, [r7, #24]
 8100e74:	4013      	ands	r3, r2
 8100e76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100e78:	683b      	ldr	r3, [r7, #0]
 8100e7a:	68da      	ldr	r2, [r3, #12]
 8100e7c:	69fb      	ldr	r3, [r7, #28]
 8100e7e:	005b      	lsls	r3, r3, #1
 8100e80:	fa02 f303 	lsl.w	r3, r2, r3
 8100e84:	69ba      	ldr	r2, [r7, #24]
 8100e86:	4313      	orrs	r3, r2
 8100e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100e8a:	687b      	ldr	r3, [r7, #4]
 8100e8c:	69ba      	ldr	r2, [r7, #24]
 8100e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100e90:	687b      	ldr	r3, [r7, #4]
 8100e92:	685b      	ldr	r3, [r3, #4]
 8100e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100e96:	2201      	movs	r2, #1
 8100e98:	69fb      	ldr	r3, [r7, #28]
 8100e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8100e9e:	43db      	mvns	r3, r3
 8100ea0:	69ba      	ldr	r2, [r7, #24]
 8100ea2:	4013      	ands	r3, r2
 8100ea4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100ea6:	683b      	ldr	r3, [r7, #0]
 8100ea8:	685b      	ldr	r3, [r3, #4]
 8100eaa:	091b      	lsrs	r3, r3, #4
 8100eac:	f003 0201 	and.w	r2, r3, #1
 8100eb0:	69fb      	ldr	r3, [r7, #28]
 8100eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8100eb6:	69ba      	ldr	r2, [r7, #24]
 8100eb8:	4313      	orrs	r3, r2
 8100eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100ebc:	687b      	ldr	r3, [r7, #4]
 8100ebe:	69ba      	ldr	r2, [r7, #24]
 8100ec0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100ec2:	683b      	ldr	r3, [r7, #0]
 8100ec4:	685b      	ldr	r3, [r3, #4]
 8100ec6:	f003 0303 	and.w	r3, r3, #3
 8100eca:	2b03      	cmp	r3, #3
 8100ecc:	d017      	beq.n	8100efe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100ece:	687b      	ldr	r3, [r7, #4]
 8100ed0:	68db      	ldr	r3, [r3, #12]
 8100ed2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100ed4:	69fb      	ldr	r3, [r7, #28]
 8100ed6:	005b      	lsls	r3, r3, #1
 8100ed8:	2203      	movs	r2, #3
 8100eda:	fa02 f303 	lsl.w	r3, r2, r3
 8100ede:	43db      	mvns	r3, r3
 8100ee0:	69ba      	ldr	r2, [r7, #24]
 8100ee2:	4013      	ands	r3, r2
 8100ee4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100ee6:	683b      	ldr	r3, [r7, #0]
 8100ee8:	689a      	ldr	r2, [r3, #8]
 8100eea:	69fb      	ldr	r3, [r7, #28]
 8100eec:	005b      	lsls	r3, r3, #1
 8100eee:	fa02 f303 	lsl.w	r3, r2, r3
 8100ef2:	69ba      	ldr	r2, [r7, #24]
 8100ef4:	4313      	orrs	r3, r2
 8100ef6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100ef8:	687b      	ldr	r3, [r7, #4]
 8100efa:	69ba      	ldr	r2, [r7, #24]
 8100efc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100efe:	683b      	ldr	r3, [r7, #0]
 8100f00:	685b      	ldr	r3, [r3, #4]
 8100f02:	f003 0303 	and.w	r3, r3, #3
 8100f06:	2b02      	cmp	r3, #2
 8100f08:	d123      	bne.n	8100f52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100f0a:	69fb      	ldr	r3, [r7, #28]
 8100f0c:	08da      	lsrs	r2, r3, #3
 8100f0e:	687b      	ldr	r3, [r7, #4]
 8100f10:	3208      	adds	r2, #8
 8100f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100f18:	69fb      	ldr	r3, [r7, #28]
 8100f1a:	f003 0307 	and.w	r3, r3, #7
 8100f1e:	009b      	lsls	r3, r3, #2
 8100f20:	220f      	movs	r2, #15
 8100f22:	fa02 f303 	lsl.w	r3, r2, r3
 8100f26:	43db      	mvns	r3, r3
 8100f28:	69ba      	ldr	r2, [r7, #24]
 8100f2a:	4013      	ands	r3, r2
 8100f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100f2e:	683b      	ldr	r3, [r7, #0]
 8100f30:	691a      	ldr	r2, [r3, #16]
 8100f32:	69fb      	ldr	r3, [r7, #28]
 8100f34:	f003 0307 	and.w	r3, r3, #7
 8100f38:	009b      	lsls	r3, r3, #2
 8100f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8100f3e:	69ba      	ldr	r2, [r7, #24]
 8100f40:	4313      	orrs	r3, r2
 8100f42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100f44:	69fb      	ldr	r3, [r7, #28]
 8100f46:	08da      	lsrs	r2, r3, #3
 8100f48:	687b      	ldr	r3, [r7, #4]
 8100f4a:	3208      	adds	r2, #8
 8100f4c:	69b9      	ldr	r1, [r7, #24]
 8100f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100f52:	687b      	ldr	r3, [r7, #4]
 8100f54:	681b      	ldr	r3, [r3, #0]
 8100f56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100f58:	69fb      	ldr	r3, [r7, #28]
 8100f5a:	005b      	lsls	r3, r3, #1
 8100f5c:	2203      	movs	r2, #3
 8100f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8100f62:	43db      	mvns	r3, r3
 8100f64:	69ba      	ldr	r2, [r7, #24]
 8100f66:	4013      	ands	r3, r2
 8100f68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100f6a:	683b      	ldr	r3, [r7, #0]
 8100f6c:	685b      	ldr	r3, [r3, #4]
 8100f6e:	f003 0203 	and.w	r2, r3, #3
 8100f72:	69fb      	ldr	r3, [r7, #28]
 8100f74:	005b      	lsls	r3, r3, #1
 8100f76:	fa02 f303 	lsl.w	r3, r2, r3
 8100f7a:	69ba      	ldr	r2, [r7, #24]
 8100f7c:	4313      	orrs	r3, r2
 8100f7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100f80:	687b      	ldr	r3, [r7, #4]
 8100f82:	69ba      	ldr	r2, [r7, #24]
 8100f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100f86:	683b      	ldr	r3, [r7, #0]
 8100f88:	685b      	ldr	r3, [r3, #4]
 8100f8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8100f8e:	2b00      	cmp	r3, #0
 8100f90:	f000 80e0 	beq.w	8101154 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100f94:	4b2f      	ldr	r3, [pc, #188]	@ (8101054 <HAL_GPIO_Init+0x238>)
 8100f96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100f9a:	4a2e      	ldr	r2, [pc, #184]	@ (8101054 <HAL_GPIO_Init+0x238>)
 8100f9c:	f043 0302 	orr.w	r3, r3, #2
 8100fa0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8101054 <HAL_GPIO_Init+0x238>)
 8100fa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100faa:	f003 0302 	and.w	r3, r3, #2
 8100fae:	60fb      	str	r3, [r7, #12]
 8100fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100fb2:	4a29      	ldr	r2, [pc, #164]	@ (8101058 <HAL_GPIO_Init+0x23c>)
 8100fb4:	69fb      	ldr	r3, [r7, #28]
 8100fb6:	089b      	lsrs	r3, r3, #2
 8100fb8:	3302      	adds	r3, #2
 8100fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100fc0:	69fb      	ldr	r3, [r7, #28]
 8100fc2:	f003 0303 	and.w	r3, r3, #3
 8100fc6:	009b      	lsls	r3, r3, #2
 8100fc8:	220f      	movs	r2, #15
 8100fca:	fa02 f303 	lsl.w	r3, r2, r3
 8100fce:	43db      	mvns	r3, r3
 8100fd0:	69ba      	ldr	r2, [r7, #24]
 8100fd2:	4013      	ands	r3, r2
 8100fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100fd6:	687b      	ldr	r3, [r7, #4]
 8100fd8:	4a20      	ldr	r2, [pc, #128]	@ (810105c <HAL_GPIO_Init+0x240>)
 8100fda:	4293      	cmp	r3, r2
 8100fdc:	d052      	beq.n	8101084 <HAL_GPIO_Init+0x268>
 8100fde:	687b      	ldr	r3, [r7, #4]
 8100fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8101060 <HAL_GPIO_Init+0x244>)
 8100fe2:	4293      	cmp	r3, r2
 8100fe4:	d031      	beq.n	810104a <HAL_GPIO_Init+0x22e>
 8100fe6:	687b      	ldr	r3, [r7, #4]
 8100fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8101064 <HAL_GPIO_Init+0x248>)
 8100fea:	4293      	cmp	r3, r2
 8100fec:	d02b      	beq.n	8101046 <HAL_GPIO_Init+0x22a>
 8100fee:	687b      	ldr	r3, [r7, #4]
 8100ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8101068 <HAL_GPIO_Init+0x24c>)
 8100ff2:	4293      	cmp	r3, r2
 8100ff4:	d025      	beq.n	8101042 <HAL_GPIO_Init+0x226>
 8100ff6:	687b      	ldr	r3, [r7, #4]
 8100ff8:	4a1c      	ldr	r2, [pc, #112]	@ (810106c <HAL_GPIO_Init+0x250>)
 8100ffa:	4293      	cmp	r3, r2
 8100ffc:	d01f      	beq.n	810103e <HAL_GPIO_Init+0x222>
 8100ffe:	687b      	ldr	r3, [r7, #4]
 8101000:	4a1b      	ldr	r2, [pc, #108]	@ (8101070 <HAL_GPIO_Init+0x254>)
 8101002:	4293      	cmp	r3, r2
 8101004:	d019      	beq.n	810103a <HAL_GPIO_Init+0x21e>
 8101006:	687b      	ldr	r3, [r7, #4]
 8101008:	4a1a      	ldr	r2, [pc, #104]	@ (8101074 <HAL_GPIO_Init+0x258>)
 810100a:	4293      	cmp	r3, r2
 810100c:	d013      	beq.n	8101036 <HAL_GPIO_Init+0x21a>
 810100e:	687b      	ldr	r3, [r7, #4]
 8101010:	4a19      	ldr	r2, [pc, #100]	@ (8101078 <HAL_GPIO_Init+0x25c>)
 8101012:	4293      	cmp	r3, r2
 8101014:	d00d      	beq.n	8101032 <HAL_GPIO_Init+0x216>
 8101016:	687b      	ldr	r3, [r7, #4]
 8101018:	4a18      	ldr	r2, [pc, #96]	@ (810107c <HAL_GPIO_Init+0x260>)
 810101a:	4293      	cmp	r3, r2
 810101c:	d007      	beq.n	810102e <HAL_GPIO_Init+0x212>
 810101e:	687b      	ldr	r3, [r7, #4]
 8101020:	4a17      	ldr	r2, [pc, #92]	@ (8101080 <HAL_GPIO_Init+0x264>)
 8101022:	4293      	cmp	r3, r2
 8101024:	d101      	bne.n	810102a <HAL_GPIO_Init+0x20e>
 8101026:	2309      	movs	r3, #9
 8101028:	e02d      	b.n	8101086 <HAL_GPIO_Init+0x26a>
 810102a:	230a      	movs	r3, #10
 810102c:	e02b      	b.n	8101086 <HAL_GPIO_Init+0x26a>
 810102e:	2308      	movs	r3, #8
 8101030:	e029      	b.n	8101086 <HAL_GPIO_Init+0x26a>
 8101032:	2307      	movs	r3, #7
 8101034:	e027      	b.n	8101086 <HAL_GPIO_Init+0x26a>
 8101036:	2306      	movs	r3, #6
 8101038:	e025      	b.n	8101086 <HAL_GPIO_Init+0x26a>
 810103a:	2305      	movs	r3, #5
 810103c:	e023      	b.n	8101086 <HAL_GPIO_Init+0x26a>
 810103e:	2304      	movs	r3, #4
 8101040:	e021      	b.n	8101086 <HAL_GPIO_Init+0x26a>
 8101042:	2303      	movs	r3, #3
 8101044:	e01f      	b.n	8101086 <HAL_GPIO_Init+0x26a>
 8101046:	2302      	movs	r3, #2
 8101048:	e01d      	b.n	8101086 <HAL_GPIO_Init+0x26a>
 810104a:	2301      	movs	r3, #1
 810104c:	e01b      	b.n	8101086 <HAL_GPIO_Init+0x26a>
 810104e:	bf00      	nop
 8101050:	580000c0 	.word	0x580000c0
 8101054:	58024400 	.word	0x58024400
 8101058:	58000400 	.word	0x58000400
 810105c:	58020000 	.word	0x58020000
 8101060:	58020400 	.word	0x58020400
 8101064:	58020800 	.word	0x58020800
 8101068:	58020c00 	.word	0x58020c00
 810106c:	58021000 	.word	0x58021000
 8101070:	58021400 	.word	0x58021400
 8101074:	58021800 	.word	0x58021800
 8101078:	58021c00 	.word	0x58021c00
 810107c:	58022000 	.word	0x58022000
 8101080:	58022400 	.word	0x58022400
 8101084:	2300      	movs	r3, #0
 8101086:	69fa      	ldr	r2, [r7, #28]
 8101088:	f002 0203 	and.w	r2, r2, #3
 810108c:	0092      	lsls	r2, r2, #2
 810108e:	4093      	lsls	r3, r2
 8101090:	69ba      	ldr	r2, [r7, #24]
 8101092:	4313      	orrs	r3, r2
 8101094:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101096:	4938      	ldr	r1, [pc, #224]	@ (8101178 <HAL_GPIO_Init+0x35c>)
 8101098:	69fb      	ldr	r3, [r7, #28]
 810109a:	089b      	lsrs	r3, r3, #2
 810109c:	3302      	adds	r3, #2
 810109e:	69ba      	ldr	r2, [r7, #24]
 81010a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81010a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81010a8:	681b      	ldr	r3, [r3, #0]
 81010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81010ac:	693b      	ldr	r3, [r7, #16]
 81010ae:	43db      	mvns	r3, r3
 81010b0:	69ba      	ldr	r2, [r7, #24]
 81010b2:	4013      	ands	r3, r2
 81010b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81010b6:	683b      	ldr	r3, [r7, #0]
 81010b8:	685b      	ldr	r3, [r3, #4]
 81010ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81010be:	2b00      	cmp	r3, #0
 81010c0:	d003      	beq.n	81010ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81010c2:	69ba      	ldr	r2, [r7, #24]
 81010c4:	693b      	ldr	r3, [r7, #16]
 81010c6:	4313      	orrs	r3, r2
 81010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81010ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81010ce:	69bb      	ldr	r3, [r7, #24]
 81010d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81010d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81010d6:	685b      	ldr	r3, [r3, #4]
 81010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81010da:	693b      	ldr	r3, [r7, #16]
 81010dc:	43db      	mvns	r3, r3
 81010de:	69ba      	ldr	r2, [r7, #24]
 81010e0:	4013      	ands	r3, r2
 81010e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81010e4:	683b      	ldr	r3, [r7, #0]
 81010e6:	685b      	ldr	r3, [r3, #4]
 81010e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81010ec:	2b00      	cmp	r3, #0
 81010ee:	d003      	beq.n	81010f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81010f0:	69ba      	ldr	r2, [r7, #24]
 81010f2:	693b      	ldr	r3, [r7, #16]
 81010f4:	4313      	orrs	r3, r2
 81010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81010f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81010fc:	69bb      	ldr	r3, [r7, #24]
 81010fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101100:	697b      	ldr	r3, [r7, #20]
 8101102:	685b      	ldr	r3, [r3, #4]
 8101104:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101106:	693b      	ldr	r3, [r7, #16]
 8101108:	43db      	mvns	r3, r3
 810110a:	69ba      	ldr	r2, [r7, #24]
 810110c:	4013      	ands	r3, r2
 810110e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101110:	683b      	ldr	r3, [r7, #0]
 8101112:	685b      	ldr	r3, [r3, #4]
 8101114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101118:	2b00      	cmp	r3, #0
 810111a:	d003      	beq.n	8101124 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810111c:	69ba      	ldr	r2, [r7, #24]
 810111e:	693b      	ldr	r3, [r7, #16]
 8101120:	4313      	orrs	r3, r2
 8101122:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101124:	697b      	ldr	r3, [r7, #20]
 8101126:	69ba      	ldr	r2, [r7, #24]
 8101128:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810112a:	697b      	ldr	r3, [r7, #20]
 810112c:	681b      	ldr	r3, [r3, #0]
 810112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101130:	693b      	ldr	r3, [r7, #16]
 8101132:	43db      	mvns	r3, r3
 8101134:	69ba      	ldr	r2, [r7, #24]
 8101136:	4013      	ands	r3, r2
 8101138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810113a:	683b      	ldr	r3, [r7, #0]
 810113c:	685b      	ldr	r3, [r3, #4]
 810113e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101142:	2b00      	cmp	r3, #0
 8101144:	d003      	beq.n	810114e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101146:	69ba      	ldr	r2, [r7, #24]
 8101148:	693b      	ldr	r3, [r7, #16]
 810114a:	4313      	orrs	r3, r2
 810114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810114e:	697b      	ldr	r3, [r7, #20]
 8101150:	69ba      	ldr	r2, [r7, #24]
 8101152:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101154:	69fb      	ldr	r3, [r7, #28]
 8101156:	3301      	adds	r3, #1
 8101158:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810115a:	683b      	ldr	r3, [r7, #0]
 810115c:	681a      	ldr	r2, [r3, #0]
 810115e:	69fb      	ldr	r3, [r7, #28]
 8101160:	fa22 f303 	lsr.w	r3, r2, r3
 8101164:	2b00      	cmp	r3, #0
 8101166:	f47f ae63 	bne.w	8100e30 <HAL_GPIO_Init+0x14>
  }
}
 810116a:	bf00      	nop
 810116c:	bf00      	nop
 810116e:	3724      	adds	r7, #36	@ 0x24
 8101170:	46bd      	mov	sp, r7
 8101172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101176:	4770      	bx	lr
 8101178:	58000400 	.word	0x58000400

0810117c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 810117c:	b480      	push	{r7}
 810117e:	b085      	sub	sp, #20
 8101180:	af00      	add	r7, sp, #0
 8101182:	6078      	str	r0, [r7, #4]
 8101184:	460b      	mov	r3, r1
 8101186:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8101188:	687b      	ldr	r3, [r7, #4]
 810118a:	695b      	ldr	r3, [r3, #20]
 810118c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 810118e:	887a      	ldrh	r2, [r7, #2]
 8101190:	68fb      	ldr	r3, [r7, #12]
 8101192:	4013      	ands	r3, r2
 8101194:	041a      	lsls	r2, r3, #16
 8101196:	68fb      	ldr	r3, [r7, #12]
 8101198:	43d9      	mvns	r1, r3
 810119a:	887b      	ldrh	r3, [r7, #2]
 810119c:	400b      	ands	r3, r1
 810119e:	431a      	orrs	r2, r3
 81011a0:	687b      	ldr	r3, [r7, #4]
 81011a2:	619a      	str	r2, [r3, #24]
}
 81011a4:	bf00      	nop
 81011a6:	3714      	adds	r7, #20
 81011a8:	46bd      	mov	sp, r7
 81011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011ae:	4770      	bx	lr

081011b0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81011b0:	b480      	push	{r7}
 81011b2:	b083      	sub	sp, #12
 81011b4:	af00      	add	r7, sp, #0
 81011b6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81011b8:	4b05      	ldr	r3, [pc, #20]	@ (81011d0 <HAL_HSEM_ActivateNotification+0x20>)
 81011ba:	681a      	ldr	r2, [r3, #0]
 81011bc:	4904      	ldr	r1, [pc, #16]	@ (81011d0 <HAL_HSEM_ActivateNotification+0x20>)
 81011be:	687b      	ldr	r3, [r7, #4]
 81011c0:	4313      	orrs	r3, r2
 81011c2:	600b      	str	r3, [r1, #0]
#endif
}
 81011c4:	bf00      	nop
 81011c6:	370c      	adds	r7, #12
 81011c8:	46bd      	mov	sp, r7
 81011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011ce:	4770      	bx	lr
 81011d0:	58026510 	.word	0x58026510

081011d4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81011d4:	b580      	push	{r7, lr}
 81011d6:	b084      	sub	sp, #16
 81011d8:	af00      	add	r7, sp, #0
 81011da:	60f8      	str	r0, [r7, #12]
 81011dc:	460b      	mov	r3, r1
 81011de:	607a      	str	r2, [r7, #4]
 81011e0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81011e2:	4b37      	ldr	r3, [pc, #220]	@ (81012c0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011e4:	681b      	ldr	r3, [r3, #0]
 81011e6:	f023 0201 	bic.w	r2, r3, #1
 81011ea:	4935      	ldr	r1, [pc, #212]	@ (81012c0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011ec:	68fb      	ldr	r3, [r7, #12]
 81011ee:	4313      	orrs	r3, r2
 81011f0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81011f2:	687b      	ldr	r3, [r7, #4]
 81011f4:	2b00      	cmp	r3, #0
 81011f6:	d123      	bne.n	8101240 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81011f8:	f7ff fdfe 	bl	8100df8 <HAL_GetCurrentCPUID>
 81011fc:	4603      	mov	r3, r0
 81011fe:	2b03      	cmp	r3, #3
 8101200:	d158      	bne.n	81012b4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101202:	4b2f      	ldr	r3, [pc, #188]	@ (81012c0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101204:	691b      	ldr	r3, [r3, #16]
 8101206:	4a2e      	ldr	r2, [pc, #184]	@ (81012c0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101208:	f023 0301 	bic.w	r3, r3, #1
 810120c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810120e:	4b2d      	ldr	r3, [pc, #180]	@ (81012c4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101210:	691b      	ldr	r3, [r3, #16]
 8101212:	4a2c      	ldr	r2, [pc, #176]	@ (81012c4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101214:	f043 0304 	orr.w	r3, r3, #4
 8101218:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810121a:	f3bf 8f4f 	dsb	sy
}
 810121e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101220:	f3bf 8f6f 	isb	sy
}
 8101224:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101226:	7afb      	ldrb	r3, [r7, #11]
 8101228:	2b01      	cmp	r3, #1
 810122a:	d101      	bne.n	8101230 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810122c:	bf30      	wfi
 810122e:	e000      	b.n	8101232 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101230:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101232:	4b24      	ldr	r3, [pc, #144]	@ (81012c4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101234:	691b      	ldr	r3, [r3, #16]
 8101236:	4a23      	ldr	r2, [pc, #140]	@ (81012c4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101238:	f023 0304 	bic.w	r3, r3, #4
 810123c:	6113      	str	r3, [r2, #16]
 810123e:	e03c      	b.n	81012ba <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101240:	687b      	ldr	r3, [r7, #4]
 8101242:	2b01      	cmp	r3, #1
 8101244:	d123      	bne.n	810128e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101246:	f7ff fdd7 	bl	8100df8 <HAL_GetCurrentCPUID>
 810124a:	4603      	mov	r3, r0
 810124c:	2b01      	cmp	r3, #1
 810124e:	d133      	bne.n	81012b8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101250:	4b1b      	ldr	r3, [pc, #108]	@ (81012c0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101252:	695b      	ldr	r3, [r3, #20]
 8101254:	4a1a      	ldr	r2, [pc, #104]	@ (81012c0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101256:	f023 0302 	bic.w	r3, r3, #2
 810125a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810125c:	4b19      	ldr	r3, [pc, #100]	@ (81012c4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810125e:	691b      	ldr	r3, [r3, #16]
 8101260:	4a18      	ldr	r2, [pc, #96]	@ (81012c4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101262:	f043 0304 	orr.w	r3, r3, #4
 8101266:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101268:	f3bf 8f4f 	dsb	sy
}
 810126c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810126e:	f3bf 8f6f 	isb	sy
}
 8101272:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101274:	7afb      	ldrb	r3, [r7, #11]
 8101276:	2b01      	cmp	r3, #1
 8101278:	d101      	bne.n	810127e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810127a:	bf30      	wfi
 810127c:	e000      	b.n	8101280 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810127e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101280:	4b10      	ldr	r3, [pc, #64]	@ (81012c4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101282:	691b      	ldr	r3, [r3, #16]
 8101284:	4a0f      	ldr	r2, [pc, #60]	@ (81012c4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101286:	f023 0304 	bic.w	r3, r3, #4
 810128a:	6113      	str	r3, [r2, #16]
 810128c:	e015      	b.n	81012ba <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810128e:	f7ff fdb3 	bl	8100df8 <HAL_GetCurrentCPUID>
 8101292:	4603      	mov	r3, r0
 8101294:	2b03      	cmp	r3, #3
 8101296:	d106      	bne.n	81012a6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101298:	4b09      	ldr	r3, [pc, #36]	@ (81012c0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810129a:	691b      	ldr	r3, [r3, #16]
 810129c:	4a08      	ldr	r2, [pc, #32]	@ (81012c0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810129e:	f023 0304 	bic.w	r3, r3, #4
 81012a2:	6113      	str	r3, [r2, #16]
 81012a4:	e009      	b.n	81012ba <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81012a6:	4b06      	ldr	r3, [pc, #24]	@ (81012c0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81012a8:	695b      	ldr	r3, [r3, #20]
 81012aa:	4a05      	ldr	r2, [pc, #20]	@ (81012c0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81012ac:	f023 0304 	bic.w	r3, r3, #4
 81012b0:	6153      	str	r3, [r2, #20]
 81012b2:	e002      	b.n	81012ba <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81012b4:	bf00      	nop
 81012b6:	e000      	b.n	81012ba <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81012b8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81012ba:	3710      	adds	r7, #16
 81012bc:	46bd      	mov	sp, r7
 81012be:	bd80      	pop	{r7, pc}
 81012c0:	58024800 	.word	0x58024800
 81012c4:	e000ed00 	.word	0xe000ed00

081012c8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81012c8:	b580      	push	{r7, lr}
 81012ca:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81012cc:	f7ff fd94 	bl	8100df8 <HAL_GetCurrentCPUID>
 81012d0:	4603      	mov	r3, r0
 81012d2:	2b03      	cmp	r3, #3
 81012d4:	d101      	bne.n	81012da <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81012d6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81012d8:	e001      	b.n	81012de <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81012da:	bf40      	sev
    __WFE ();
 81012dc:	bf20      	wfe
}
 81012de:	bf00      	nop
 81012e0:	bd80      	pop	{r7, pc}
	...

081012e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81012e4:	b480      	push	{r7}
 81012e6:	b089      	sub	sp, #36	@ 0x24
 81012e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81012ea:	4bb3      	ldr	r3, [pc, #716]	@ (81015b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012ec:	691b      	ldr	r3, [r3, #16]
 81012ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81012f2:	2b18      	cmp	r3, #24
 81012f4:	f200 8155 	bhi.w	81015a2 <HAL_RCC_GetSysClockFreq+0x2be>
 81012f8:	a201      	add	r2, pc, #4	@ (adr r2, 8101300 <HAL_RCC_GetSysClockFreq+0x1c>)
 81012fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81012fe:	bf00      	nop
 8101300:	08101365 	.word	0x08101365
 8101304:	081015a3 	.word	0x081015a3
 8101308:	081015a3 	.word	0x081015a3
 810130c:	081015a3 	.word	0x081015a3
 8101310:	081015a3 	.word	0x081015a3
 8101314:	081015a3 	.word	0x081015a3
 8101318:	081015a3 	.word	0x081015a3
 810131c:	081015a3 	.word	0x081015a3
 8101320:	0810138b 	.word	0x0810138b
 8101324:	081015a3 	.word	0x081015a3
 8101328:	081015a3 	.word	0x081015a3
 810132c:	081015a3 	.word	0x081015a3
 8101330:	081015a3 	.word	0x081015a3
 8101334:	081015a3 	.word	0x081015a3
 8101338:	081015a3 	.word	0x081015a3
 810133c:	081015a3 	.word	0x081015a3
 8101340:	08101391 	.word	0x08101391
 8101344:	081015a3 	.word	0x081015a3
 8101348:	081015a3 	.word	0x081015a3
 810134c:	081015a3 	.word	0x081015a3
 8101350:	081015a3 	.word	0x081015a3
 8101354:	081015a3 	.word	0x081015a3
 8101358:	081015a3 	.word	0x081015a3
 810135c:	081015a3 	.word	0x081015a3
 8101360:	08101397 	.word	0x08101397
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101364:	4b94      	ldr	r3, [pc, #592]	@ (81015b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101366:	681b      	ldr	r3, [r3, #0]
 8101368:	f003 0320 	and.w	r3, r3, #32
 810136c:	2b00      	cmp	r3, #0
 810136e:	d009      	beq.n	8101384 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101370:	4b91      	ldr	r3, [pc, #580]	@ (81015b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101372:	681b      	ldr	r3, [r3, #0]
 8101374:	08db      	lsrs	r3, r3, #3
 8101376:	f003 0303 	and.w	r3, r3, #3
 810137a:	4a90      	ldr	r2, [pc, #576]	@ (81015bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 810137c:	fa22 f303 	lsr.w	r3, r2, r3
 8101380:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8101382:	e111      	b.n	81015a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101384:	4b8d      	ldr	r3, [pc, #564]	@ (81015bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101386:	61bb      	str	r3, [r7, #24]
      break;
 8101388:	e10e      	b.n	81015a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810138a:	4b8d      	ldr	r3, [pc, #564]	@ (81015c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810138c:	61bb      	str	r3, [r7, #24]
      break;
 810138e:	e10b      	b.n	81015a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8101390:	4b8c      	ldr	r3, [pc, #560]	@ (81015c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101392:	61bb      	str	r3, [r7, #24]
      break;
 8101394:	e108      	b.n	81015a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101396:	4b88      	ldr	r3, [pc, #544]	@ (81015b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810139a:	f003 0303 	and.w	r3, r3, #3
 810139e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81013a0:	4b85      	ldr	r3, [pc, #532]	@ (81015b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81013a4:	091b      	lsrs	r3, r3, #4
 81013a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81013aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81013ac:	4b82      	ldr	r3, [pc, #520]	@ (81015b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81013b0:	f003 0301 	and.w	r3, r3, #1
 81013b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81013b6:	4b80      	ldr	r3, [pc, #512]	@ (81015b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81013ba:	08db      	lsrs	r3, r3, #3
 81013bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81013c0:	68fa      	ldr	r2, [r7, #12]
 81013c2:	fb02 f303 	mul.w	r3, r2, r3
 81013c6:	ee07 3a90 	vmov	s15, r3
 81013ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81013ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81013d2:	693b      	ldr	r3, [r7, #16]
 81013d4:	2b00      	cmp	r3, #0
 81013d6:	f000 80e1 	beq.w	810159c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 81013da:	697b      	ldr	r3, [r7, #20]
 81013dc:	2b02      	cmp	r3, #2
 81013de:	f000 8083 	beq.w	81014e8 <HAL_RCC_GetSysClockFreq+0x204>
 81013e2:	697b      	ldr	r3, [r7, #20]
 81013e4:	2b02      	cmp	r3, #2
 81013e6:	f200 80a1 	bhi.w	810152c <HAL_RCC_GetSysClockFreq+0x248>
 81013ea:	697b      	ldr	r3, [r7, #20]
 81013ec:	2b00      	cmp	r3, #0
 81013ee:	d003      	beq.n	81013f8 <HAL_RCC_GetSysClockFreq+0x114>
 81013f0:	697b      	ldr	r3, [r7, #20]
 81013f2:	2b01      	cmp	r3, #1
 81013f4:	d056      	beq.n	81014a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 81013f6:	e099      	b.n	810152c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81013f8:	4b6f      	ldr	r3, [pc, #444]	@ (81015b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013fa:	681b      	ldr	r3, [r3, #0]
 81013fc:	f003 0320 	and.w	r3, r3, #32
 8101400:	2b00      	cmp	r3, #0
 8101402:	d02d      	beq.n	8101460 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101404:	4b6c      	ldr	r3, [pc, #432]	@ (81015b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101406:	681b      	ldr	r3, [r3, #0]
 8101408:	08db      	lsrs	r3, r3, #3
 810140a:	f003 0303 	and.w	r3, r3, #3
 810140e:	4a6b      	ldr	r2, [pc, #428]	@ (81015bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101410:	fa22 f303 	lsr.w	r3, r2, r3
 8101414:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101416:	687b      	ldr	r3, [r7, #4]
 8101418:	ee07 3a90 	vmov	s15, r3
 810141c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101420:	693b      	ldr	r3, [r7, #16]
 8101422:	ee07 3a90 	vmov	s15, r3
 8101426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810142a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810142e:	4b62      	ldr	r3, [pc, #392]	@ (81015b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101436:	ee07 3a90 	vmov	s15, r3
 810143a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810143e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101442:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81015c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810144a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810144e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101456:	ee67 7a27 	vmul.f32	s15, s14, s15
 810145a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810145e:	e087      	b.n	8101570 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101460:	693b      	ldr	r3, [r7, #16]
 8101462:	ee07 3a90 	vmov	s15, r3
 8101466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810146a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81015cc <HAL_RCC_GetSysClockFreq+0x2e8>
 810146e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101472:	4b51      	ldr	r3, [pc, #324]	@ (81015b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810147a:	ee07 3a90 	vmov	s15, r3
 810147e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101482:	ed97 6a02 	vldr	s12, [r7, #8]
 8101486:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81015c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 810148a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810148e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810149a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810149e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81014a2:	e065      	b.n	8101570 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81014a4:	693b      	ldr	r3, [r7, #16]
 81014a6:	ee07 3a90 	vmov	s15, r3
 81014aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014ae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81015d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 81014b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81014b6:	4b40      	ldr	r3, [pc, #256]	@ (81015b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81014ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81014be:	ee07 3a90 	vmov	s15, r3
 81014c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81014c6:	ed97 6a02 	vldr	s12, [r7, #8]
 81014ca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81015c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81014ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81014d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81014d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81014da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81014de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81014e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81014e6:	e043      	b.n	8101570 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81014e8:	693b      	ldr	r3, [r7, #16]
 81014ea:	ee07 3a90 	vmov	s15, r3
 81014ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81015d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 81014f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81014fa:	4b2f      	ldr	r3, [pc, #188]	@ (81015b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81014fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101502:	ee07 3a90 	vmov	s15, r3
 8101506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810150a:	ed97 6a02 	vldr	s12, [r7, #8]
 810150e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81015c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810151a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810151e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101526:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810152a:	e021      	b.n	8101570 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810152c:	693b      	ldr	r3, [r7, #16]
 810152e:	ee07 3a90 	vmov	s15, r3
 8101532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101536:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81015d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 810153a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810153e:	4b1e      	ldr	r3, [pc, #120]	@ (81015b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101546:	ee07 3a90 	vmov	s15, r3
 810154a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810154e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101552:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81015c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810155a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810155e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101566:	ee67 7a27 	vmul.f32	s15, s14, s15
 810156a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810156e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101570:	4b11      	ldr	r3, [pc, #68]	@ (81015b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101574:	0a5b      	lsrs	r3, r3, #9
 8101576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810157a:	3301      	adds	r3, #1
 810157c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810157e:	683b      	ldr	r3, [r7, #0]
 8101580:	ee07 3a90 	vmov	s15, r3
 8101584:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101588:	edd7 6a07 	vldr	s13, [r7, #28]
 810158c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101594:	ee17 3a90 	vmov	r3, s15
 8101598:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810159a:	e005      	b.n	81015a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810159c:	2300      	movs	r3, #0
 810159e:	61bb      	str	r3, [r7, #24]
      break;
 81015a0:	e002      	b.n	81015a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81015a2:	4b07      	ldr	r3, [pc, #28]	@ (81015c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81015a4:	61bb      	str	r3, [r7, #24]
      break;
 81015a6:	bf00      	nop
  }

  return sysclockfreq;
 81015a8:	69bb      	ldr	r3, [r7, #24]
}
 81015aa:	4618      	mov	r0, r3
 81015ac:	3724      	adds	r7, #36	@ 0x24
 81015ae:	46bd      	mov	sp, r7
 81015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015b4:	4770      	bx	lr
 81015b6:	bf00      	nop
 81015b8:	58024400 	.word	0x58024400
 81015bc:	03d09000 	.word	0x03d09000
 81015c0:	003d0900 	.word	0x003d0900
 81015c4:	017d7840 	.word	0x017d7840
 81015c8:	46000000 	.word	0x46000000
 81015cc:	4c742400 	.word	0x4c742400
 81015d0:	4a742400 	.word	0x4a742400
 81015d4:	4bbebc20 	.word	0x4bbebc20

081015d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81015d8:	b580      	push	{r7, lr}
 81015da:	b082      	sub	sp, #8
 81015dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81015de:	f7ff fe81 	bl	81012e4 <HAL_RCC_GetSysClockFreq>
 81015e2:	4602      	mov	r2, r0
 81015e4:	4b11      	ldr	r3, [pc, #68]	@ (810162c <HAL_RCC_GetHCLKFreq+0x54>)
 81015e6:	699b      	ldr	r3, [r3, #24]
 81015e8:	0a1b      	lsrs	r3, r3, #8
 81015ea:	f003 030f 	and.w	r3, r3, #15
 81015ee:	4910      	ldr	r1, [pc, #64]	@ (8101630 <HAL_RCC_GetHCLKFreq+0x58>)
 81015f0:	5ccb      	ldrb	r3, [r1, r3]
 81015f2:	f003 031f 	and.w	r3, r3, #31
 81015f6:	fa22 f303 	lsr.w	r3, r2, r3
 81015fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81015fc:	4b0b      	ldr	r3, [pc, #44]	@ (810162c <HAL_RCC_GetHCLKFreq+0x54>)
 81015fe:	699b      	ldr	r3, [r3, #24]
 8101600:	f003 030f 	and.w	r3, r3, #15
 8101604:	4a0a      	ldr	r2, [pc, #40]	@ (8101630 <HAL_RCC_GetHCLKFreq+0x58>)
 8101606:	5cd3      	ldrb	r3, [r2, r3]
 8101608:	f003 031f 	and.w	r3, r3, #31
 810160c:	687a      	ldr	r2, [r7, #4]
 810160e:	fa22 f303 	lsr.w	r3, r2, r3
 8101612:	4a08      	ldr	r2, [pc, #32]	@ (8101634 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101614:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101616:	4b07      	ldr	r3, [pc, #28]	@ (8101634 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101618:	681b      	ldr	r3, [r3, #0]
 810161a:	4a07      	ldr	r2, [pc, #28]	@ (8101638 <HAL_RCC_GetHCLKFreq+0x60>)
 810161c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810161e:	4b05      	ldr	r3, [pc, #20]	@ (8101634 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101620:	681b      	ldr	r3, [r3, #0]
}
 8101622:	4618      	mov	r0, r3
 8101624:	3708      	adds	r7, #8
 8101626:	46bd      	mov	sp, r7
 8101628:	bd80      	pop	{r7, pc}
 810162a:	bf00      	nop
 810162c:	58024400 	.word	0x58024400
 8101630:	081070bc 	.word	0x081070bc
 8101634:	10000004 	.word	0x10000004
 8101638:	10000000 	.word	0x10000000

0810163c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810163c:	b580      	push	{r7, lr}
 810163e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8101640:	f7ff ffca 	bl	81015d8 <HAL_RCC_GetHCLKFreq>
 8101644:	4602      	mov	r2, r0
 8101646:	4b06      	ldr	r3, [pc, #24]	@ (8101660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8101648:	69db      	ldr	r3, [r3, #28]
 810164a:	091b      	lsrs	r3, r3, #4
 810164c:	f003 0307 	and.w	r3, r3, #7
 8101650:	4904      	ldr	r1, [pc, #16]	@ (8101664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8101652:	5ccb      	ldrb	r3, [r1, r3]
 8101654:	f003 031f 	and.w	r3, r3, #31
 8101658:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810165c:	4618      	mov	r0, r3
 810165e:	bd80      	pop	{r7, pc}
 8101660:	58024400 	.word	0x58024400
 8101664:	081070bc 	.word	0x081070bc

08101668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8101668:	b580      	push	{r7, lr}
 810166a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810166c:	f7ff ffb4 	bl	81015d8 <HAL_RCC_GetHCLKFreq>
 8101670:	4602      	mov	r2, r0
 8101672:	4b06      	ldr	r3, [pc, #24]	@ (810168c <HAL_RCC_GetPCLK2Freq+0x24>)
 8101674:	69db      	ldr	r3, [r3, #28]
 8101676:	0a1b      	lsrs	r3, r3, #8
 8101678:	f003 0307 	and.w	r3, r3, #7
 810167c:	4904      	ldr	r1, [pc, #16]	@ (8101690 <HAL_RCC_GetPCLK2Freq+0x28>)
 810167e:	5ccb      	ldrb	r3, [r1, r3]
 8101680:	f003 031f 	and.w	r3, r3, #31
 8101684:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8101688:	4618      	mov	r0, r3
 810168a:	bd80      	pop	{r7, pc}
 810168c:	58024400 	.word	0x58024400
 8101690:	081070bc 	.word	0x081070bc

08101694 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101698:	b0ca      	sub	sp, #296	@ 0x128
 810169a:	af00      	add	r7, sp, #0
 810169c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81016a0:	2300      	movs	r3, #0
 81016a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81016a6:	2300      	movs	r3, #0
 81016a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81016ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81016b4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81016b8:	2500      	movs	r5, #0
 81016ba:	ea54 0305 	orrs.w	r3, r4, r5
 81016be:	d049      	beq.n	8101754 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81016c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81016c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81016c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81016ca:	d02f      	beq.n	810172c <HAL_RCCEx_PeriphCLKConfig+0x98>
 81016cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81016d0:	d828      	bhi.n	8101724 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81016d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81016d6:	d01a      	beq.n	810170e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81016d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81016dc:	d822      	bhi.n	8101724 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81016de:	2b00      	cmp	r3, #0
 81016e0:	d003      	beq.n	81016ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 81016e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81016e6:	d007      	beq.n	81016f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81016e8:	e01c      	b.n	8101724 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81016ea:	4bb8      	ldr	r3, [pc, #736]	@ (81019cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81016ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81016ee:	4ab7      	ldr	r2, [pc, #732]	@ (81019cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81016f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81016f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81016f6:	e01a      	b.n	810172e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81016f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81016fc:	3308      	adds	r3, #8
 81016fe:	2102      	movs	r1, #2
 8101700:	4618      	mov	r0, r3
 8101702:	f001 fc8f 	bl	8103024 <RCCEx_PLL2_Config>
 8101706:	4603      	mov	r3, r0
 8101708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810170c:	e00f      	b.n	810172e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810170e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101712:	3328      	adds	r3, #40	@ 0x28
 8101714:	2102      	movs	r1, #2
 8101716:	4618      	mov	r0, r3
 8101718:	f001 fd36 	bl	8103188 <RCCEx_PLL3_Config>
 810171c:	4603      	mov	r3, r0
 810171e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101722:	e004      	b.n	810172e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101724:	2301      	movs	r3, #1
 8101726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810172a:	e000      	b.n	810172e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810172c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810172e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101732:	2b00      	cmp	r3, #0
 8101734:	d10a      	bne.n	810174c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8101736:	4ba5      	ldr	r3, [pc, #660]	@ (81019cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810173a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810173e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101742:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101744:	4aa1      	ldr	r2, [pc, #644]	@ (81019cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101746:	430b      	orrs	r3, r1
 8101748:	6513      	str	r3, [r2, #80]	@ 0x50
 810174a:	e003      	b.n	8101754 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810174c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101750:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8101754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101758:	e9d3 2300 	ldrd	r2, r3, [r3]
 810175c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8101760:	f04f 0900 	mov.w	r9, #0
 8101764:	ea58 0309 	orrs.w	r3, r8, r9
 8101768:	d047      	beq.n	81017fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810176a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810176e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101770:	2b04      	cmp	r3, #4
 8101772:	d82a      	bhi.n	81017ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8101774:	a201      	add	r2, pc, #4	@ (adr r2, 810177c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8101776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810177a:	bf00      	nop
 810177c:	08101791 	.word	0x08101791
 8101780:	0810179f 	.word	0x0810179f
 8101784:	081017b5 	.word	0x081017b5
 8101788:	081017d3 	.word	0x081017d3
 810178c:	081017d3 	.word	0x081017d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101790:	4b8e      	ldr	r3, [pc, #568]	@ (81019cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101794:	4a8d      	ldr	r2, [pc, #564]	@ (81019cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810179a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810179c:	e01a      	b.n	81017d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810179e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81017a2:	3308      	adds	r3, #8
 81017a4:	2100      	movs	r1, #0
 81017a6:	4618      	mov	r0, r3
 81017a8:	f001 fc3c 	bl	8103024 <RCCEx_PLL2_Config>
 81017ac:	4603      	mov	r3, r0
 81017ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81017b2:	e00f      	b.n	81017d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81017b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81017b8:	3328      	adds	r3, #40	@ 0x28
 81017ba:	2100      	movs	r1, #0
 81017bc:	4618      	mov	r0, r3
 81017be:	f001 fce3 	bl	8103188 <RCCEx_PLL3_Config>
 81017c2:	4603      	mov	r3, r0
 81017c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81017c8:	e004      	b.n	81017d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81017ca:	2301      	movs	r3, #1
 81017cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81017d0:	e000      	b.n	81017d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81017d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81017d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81017d8:	2b00      	cmp	r3, #0
 81017da:	d10a      	bne.n	81017f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81017dc:	4b7b      	ldr	r3, [pc, #492]	@ (81019cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81017de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81017e0:	f023 0107 	bic.w	r1, r3, #7
 81017e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81017e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81017ea:	4a78      	ldr	r2, [pc, #480]	@ (81019cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81017ec:	430b      	orrs	r3, r1
 81017ee:	6513      	str	r3, [r2, #80]	@ 0x50
 81017f0:	e003      	b.n	81017fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81017f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81017f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81017fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101802:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8101806:	f04f 0b00 	mov.w	fp, #0
 810180a:	ea5a 030b 	orrs.w	r3, sl, fp
 810180e:	d04c      	beq.n	81018aa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8101810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810181a:	d030      	beq.n	810187e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810181c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101820:	d829      	bhi.n	8101876 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101822:	2bc0      	cmp	r3, #192	@ 0xc0
 8101824:	d02d      	beq.n	8101882 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8101826:	2bc0      	cmp	r3, #192	@ 0xc0
 8101828:	d825      	bhi.n	8101876 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810182a:	2b80      	cmp	r3, #128	@ 0x80
 810182c:	d018      	beq.n	8101860 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810182e:	2b80      	cmp	r3, #128	@ 0x80
 8101830:	d821      	bhi.n	8101876 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101832:	2b00      	cmp	r3, #0
 8101834:	d002      	beq.n	810183c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8101836:	2b40      	cmp	r3, #64	@ 0x40
 8101838:	d007      	beq.n	810184a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810183a:	e01c      	b.n	8101876 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810183c:	4b63      	ldr	r3, [pc, #396]	@ (81019cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101840:	4a62      	ldr	r2, [pc, #392]	@ (81019cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101848:	e01c      	b.n	8101884 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810184a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810184e:	3308      	adds	r3, #8
 8101850:	2100      	movs	r1, #0
 8101852:	4618      	mov	r0, r3
 8101854:	f001 fbe6 	bl	8103024 <RCCEx_PLL2_Config>
 8101858:	4603      	mov	r3, r0
 810185a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810185e:	e011      	b.n	8101884 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101864:	3328      	adds	r3, #40	@ 0x28
 8101866:	2100      	movs	r1, #0
 8101868:	4618      	mov	r0, r3
 810186a:	f001 fc8d 	bl	8103188 <RCCEx_PLL3_Config>
 810186e:	4603      	mov	r3, r0
 8101870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101874:	e006      	b.n	8101884 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101876:	2301      	movs	r3, #1
 8101878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810187c:	e002      	b.n	8101884 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810187e:	bf00      	nop
 8101880:	e000      	b.n	8101884 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8101882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101888:	2b00      	cmp	r3, #0
 810188a:	d10a      	bne.n	81018a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810188c:	4b4f      	ldr	r3, [pc, #316]	@ (81019cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810188e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101890:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8101894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810189a:	4a4c      	ldr	r2, [pc, #304]	@ (81019cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810189c:	430b      	orrs	r3, r1
 810189e:	6513      	str	r3, [r2, #80]	@ 0x50
 81018a0:	e003      	b.n	81018aa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81018a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81018a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81018aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81018b2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 81018b6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 81018ba:	2300      	movs	r3, #0
 81018bc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 81018c0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 81018c4:	460b      	mov	r3, r1
 81018c6:	4313      	orrs	r3, r2
 81018c8:	d053      	beq.n	8101972 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81018ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81018ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81018d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81018d6:	d035      	beq.n	8101944 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81018d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81018dc:	d82e      	bhi.n	810193c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81018de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81018e2:	d031      	beq.n	8101948 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81018e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81018e8:	d828      	bhi.n	810193c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81018ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81018ee:	d01a      	beq.n	8101926 <HAL_RCCEx_PeriphCLKConfig+0x292>
 81018f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81018f4:	d822      	bhi.n	810193c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81018f6:	2b00      	cmp	r3, #0
 81018f8:	d003      	beq.n	8101902 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81018fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81018fe:	d007      	beq.n	8101910 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8101900:	e01c      	b.n	810193c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101902:	4b32      	ldr	r3, [pc, #200]	@ (81019cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101906:	4a31      	ldr	r2, [pc, #196]	@ (81019cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810190c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810190e:	e01c      	b.n	810194a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101914:	3308      	adds	r3, #8
 8101916:	2100      	movs	r1, #0
 8101918:	4618      	mov	r0, r3
 810191a:	f001 fb83 	bl	8103024 <RCCEx_PLL2_Config>
 810191e:	4603      	mov	r3, r0
 8101920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101924:	e011      	b.n	810194a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810192a:	3328      	adds	r3, #40	@ 0x28
 810192c:	2100      	movs	r1, #0
 810192e:	4618      	mov	r0, r3
 8101930:	f001 fc2a 	bl	8103188 <RCCEx_PLL3_Config>
 8101934:	4603      	mov	r3, r0
 8101936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810193a:	e006      	b.n	810194a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810193c:	2301      	movs	r3, #1
 810193e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101942:	e002      	b.n	810194a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101944:	bf00      	nop
 8101946:	e000      	b.n	810194a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101948:	bf00      	nop
    }

    if (ret == HAL_OK)
 810194a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810194e:	2b00      	cmp	r3, #0
 8101950:	d10b      	bne.n	810196a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8101952:	4b1e      	ldr	r3, [pc, #120]	@ (81019cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101956:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810195a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810195e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8101962:	4a1a      	ldr	r2, [pc, #104]	@ (81019cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101964:	430b      	orrs	r3, r1
 8101966:	6593      	str	r3, [r2, #88]	@ 0x58
 8101968:	e003      	b.n	8101972 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810196a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810196e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8101972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101976:	e9d3 2300 	ldrd	r2, r3, [r3]
 810197a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810197e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8101982:	2300      	movs	r3, #0
 8101984:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8101988:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810198c:	460b      	mov	r3, r1
 810198e:	4313      	orrs	r3, r2
 8101990:	d056      	beq.n	8101a40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8101992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101996:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810199a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810199e:	d038      	beq.n	8101a12 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81019a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81019a4:	d831      	bhi.n	8101a0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81019a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81019aa:	d034      	beq.n	8101a16 <HAL_RCCEx_PeriphCLKConfig+0x382>
 81019ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81019b0:	d82b      	bhi.n	8101a0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81019b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81019b6:	d01d      	beq.n	81019f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81019b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81019bc:	d825      	bhi.n	8101a0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81019be:	2b00      	cmp	r3, #0
 81019c0:	d006      	beq.n	81019d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81019c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81019c6:	d00a      	beq.n	81019de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81019c8:	e01f      	b.n	8101a0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81019ca:	bf00      	nop
 81019cc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81019d0:	4ba2      	ldr	r3, [pc, #648]	@ (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81019d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81019d4:	4aa1      	ldr	r2, [pc, #644]	@ (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81019d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81019da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81019dc:	e01c      	b.n	8101a18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81019de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81019e2:	3308      	adds	r3, #8
 81019e4:	2100      	movs	r1, #0
 81019e6:	4618      	mov	r0, r3
 81019e8:	f001 fb1c 	bl	8103024 <RCCEx_PLL2_Config>
 81019ec:	4603      	mov	r3, r0
 81019ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81019f2:	e011      	b.n	8101a18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81019f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81019f8:	3328      	adds	r3, #40	@ 0x28
 81019fa:	2100      	movs	r1, #0
 81019fc:	4618      	mov	r0, r3
 81019fe:	f001 fbc3 	bl	8103188 <RCCEx_PLL3_Config>
 8101a02:	4603      	mov	r3, r0
 8101a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101a08:	e006      	b.n	8101a18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8101a0a:	2301      	movs	r3, #1
 8101a0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101a10:	e002      	b.n	8101a18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8101a12:	bf00      	nop
 8101a14:	e000      	b.n	8101a18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8101a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101a1c:	2b00      	cmp	r3, #0
 8101a1e:	d10b      	bne.n	8101a38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101a20:	4b8e      	ldr	r3, [pc, #568]	@ (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101a24:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8101a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8101a30:	4a8a      	ldr	r2, [pc, #552]	@ (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a32:	430b      	orrs	r3, r1
 8101a34:	6593      	str	r3, [r2, #88]	@ 0x58
 8101a36:	e003      	b.n	8101a40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101a3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8101a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a48:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8101a4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8101a50:	2300      	movs	r3, #0
 8101a52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8101a56:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8101a5a:	460b      	mov	r3, r1
 8101a5c:	4313      	orrs	r3, r2
 8101a5e:	d03a      	beq.n	8101ad6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8101a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101a66:	2b30      	cmp	r3, #48	@ 0x30
 8101a68:	d01f      	beq.n	8101aaa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8101a6a:	2b30      	cmp	r3, #48	@ 0x30
 8101a6c:	d819      	bhi.n	8101aa2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8101a6e:	2b20      	cmp	r3, #32
 8101a70:	d00c      	beq.n	8101a8c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8101a72:	2b20      	cmp	r3, #32
 8101a74:	d815      	bhi.n	8101aa2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8101a76:	2b00      	cmp	r3, #0
 8101a78:	d019      	beq.n	8101aae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8101a7a:	2b10      	cmp	r3, #16
 8101a7c:	d111      	bne.n	8101aa2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101a7e:	4b77      	ldr	r3, [pc, #476]	@ (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101a82:	4a76      	ldr	r2, [pc, #472]	@ (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101a8a:	e011      	b.n	8101ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a90:	3308      	adds	r3, #8
 8101a92:	2102      	movs	r1, #2
 8101a94:	4618      	mov	r0, r3
 8101a96:	f001 fac5 	bl	8103024 <RCCEx_PLL2_Config>
 8101a9a:	4603      	mov	r3, r0
 8101a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101aa0:	e006      	b.n	8101ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8101aa2:	2301      	movs	r3, #1
 8101aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101aa8:	e002      	b.n	8101ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101aaa:	bf00      	nop
 8101aac:	e000      	b.n	8101ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101ab4:	2b00      	cmp	r3, #0
 8101ab6:	d10a      	bne.n	8101ace <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101ab8:	4b68      	ldr	r3, [pc, #416]	@ (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101abc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8101ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101ac6:	4a65      	ldr	r2, [pc, #404]	@ (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101ac8:	430b      	orrs	r3, r1
 8101aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8101acc:	e003      	b.n	8101ad6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8101ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101ade:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8101ae2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8101ae6:	2300      	movs	r3, #0
 8101ae8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8101aec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8101af0:	460b      	mov	r3, r1
 8101af2:	4313      	orrs	r3, r2
 8101af4:	d051      	beq.n	8101b9a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8101af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101afc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8101b00:	d035      	beq.n	8101b6e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8101b02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8101b06:	d82e      	bhi.n	8101b66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101b08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8101b0c:	d031      	beq.n	8101b72 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8101b0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8101b12:	d828      	bhi.n	8101b66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8101b18:	d01a      	beq.n	8101b50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8101b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8101b1e:	d822      	bhi.n	8101b66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101b20:	2b00      	cmp	r3, #0
 8101b22:	d003      	beq.n	8101b2c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8101b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8101b28:	d007      	beq.n	8101b3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8101b2a:	e01c      	b.n	8101b66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101b2c:	4b4b      	ldr	r3, [pc, #300]	@ (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101b30:	4a4a      	ldr	r2, [pc, #296]	@ (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101b38:	e01c      	b.n	8101b74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b3e:	3308      	adds	r3, #8
 8101b40:	2100      	movs	r1, #0
 8101b42:	4618      	mov	r0, r3
 8101b44:	f001 fa6e 	bl	8103024 <RCCEx_PLL2_Config>
 8101b48:	4603      	mov	r3, r0
 8101b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101b4e:	e011      	b.n	8101b74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b54:	3328      	adds	r3, #40	@ 0x28
 8101b56:	2100      	movs	r1, #0
 8101b58:	4618      	mov	r0, r3
 8101b5a:	f001 fb15 	bl	8103188 <RCCEx_PLL3_Config>
 8101b5e:	4603      	mov	r3, r0
 8101b60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101b64:	e006      	b.n	8101b74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101b66:	2301      	movs	r3, #1
 8101b68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101b6c:	e002      	b.n	8101b74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101b6e:	bf00      	nop
 8101b70:	e000      	b.n	8101b74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101b74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101b78:	2b00      	cmp	r3, #0
 8101b7a:	d10a      	bne.n	8101b92 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101b7c:	4b37      	ldr	r3, [pc, #220]	@ (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101b80:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8101b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101b8a:	4a34      	ldr	r2, [pc, #208]	@ (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101b8c:	430b      	orrs	r3, r1
 8101b8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8101b90:	e003      	b.n	8101b9a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101b96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101ba2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8101ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8101baa:	2300      	movs	r3, #0
 8101bac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8101bb0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8101bb4:	460b      	mov	r3, r1
 8101bb6:	4313      	orrs	r3, r2
 8101bb8:	d056      	beq.n	8101c68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8101bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101bbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8101bc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8101bc4:	d033      	beq.n	8101c2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8101bc6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8101bca:	d82c      	bhi.n	8101c26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101bcc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8101bd0:	d02f      	beq.n	8101c32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8101bd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8101bd6:	d826      	bhi.n	8101c26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101bd8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101bdc:	d02b      	beq.n	8101c36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8101bde:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101be2:	d820      	bhi.n	8101c26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101be4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8101be8:	d012      	beq.n	8101c10 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8101bea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8101bee:	d81a      	bhi.n	8101c26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101bf0:	2b00      	cmp	r3, #0
 8101bf2:	d022      	beq.n	8101c3a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8101bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8101bf8:	d115      	bne.n	8101c26 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101bfe:	3308      	adds	r3, #8
 8101c00:	2101      	movs	r1, #1
 8101c02:	4618      	mov	r0, r3
 8101c04:	f001 fa0e 	bl	8103024 <RCCEx_PLL2_Config>
 8101c08:	4603      	mov	r3, r0
 8101c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8101c0e:	e015      	b.n	8101c3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8101c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c14:	3328      	adds	r3, #40	@ 0x28
 8101c16:	2101      	movs	r1, #1
 8101c18:	4618      	mov	r0, r3
 8101c1a:	f001 fab5 	bl	8103188 <RCCEx_PLL3_Config>
 8101c1e:	4603      	mov	r3, r0
 8101c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8101c24:	e00a      	b.n	8101c3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101c26:	2301      	movs	r3, #1
 8101c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101c2c:	e006      	b.n	8101c3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101c2e:	bf00      	nop
 8101c30:	e004      	b.n	8101c3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101c32:	bf00      	nop
 8101c34:	e002      	b.n	8101c3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101c36:	bf00      	nop
 8101c38:	e000      	b.n	8101c3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101c40:	2b00      	cmp	r3, #0
 8101c42:	d10d      	bne.n	8101c60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8101c44:	4b05      	ldr	r3, [pc, #20]	@ (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101c48:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8101c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8101c52:	4a02      	ldr	r2, [pc, #8]	@ (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101c54:	430b      	orrs	r3, r1
 8101c56:	6513      	str	r3, [r2, #80]	@ 0x50
 8101c58:	e006      	b.n	8101c68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8101c5a:	bf00      	nop
 8101c5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101c64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8101c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101c70:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8101c74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8101c78:	2300      	movs	r3, #0
 8101c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8101c7e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8101c82:	460b      	mov	r3, r1
 8101c84:	4313      	orrs	r3, r2
 8101c86:	d055      	beq.n	8101d34 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8101c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8101c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8101c94:	d033      	beq.n	8101cfe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8101c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8101c9a:	d82c      	bhi.n	8101cf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101ca0:	d02f      	beq.n	8101d02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8101ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101ca6:	d826      	bhi.n	8101cf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101ca8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8101cac:	d02b      	beq.n	8101d06 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8101cae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8101cb2:	d820      	bhi.n	8101cf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101cb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101cb8:	d012      	beq.n	8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8101cba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101cbe:	d81a      	bhi.n	8101cf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101cc0:	2b00      	cmp	r3, #0
 8101cc2:	d022      	beq.n	8101d0a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8101cc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101cc8:	d115      	bne.n	8101cf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101cce:	3308      	adds	r3, #8
 8101cd0:	2101      	movs	r1, #1
 8101cd2:	4618      	mov	r0, r3
 8101cd4:	f001 f9a6 	bl	8103024 <RCCEx_PLL2_Config>
 8101cd8:	4603      	mov	r3, r0
 8101cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8101cde:	e015      	b.n	8101d0c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8101ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ce4:	3328      	adds	r3, #40	@ 0x28
 8101ce6:	2101      	movs	r1, #1
 8101ce8:	4618      	mov	r0, r3
 8101cea:	f001 fa4d 	bl	8103188 <RCCEx_PLL3_Config>
 8101cee:	4603      	mov	r3, r0
 8101cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8101cf4:	e00a      	b.n	8101d0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8101cf6:	2301      	movs	r3, #1
 8101cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101cfc:	e006      	b.n	8101d0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101cfe:	bf00      	nop
 8101d00:	e004      	b.n	8101d0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101d02:	bf00      	nop
 8101d04:	e002      	b.n	8101d0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101d06:	bf00      	nop
 8101d08:	e000      	b.n	8101d0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101d10:	2b00      	cmp	r3, #0
 8101d12:	d10b      	bne.n	8101d2c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8101d14:	4ba4      	ldr	r3, [pc, #656]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101d18:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8101d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8101d24:	4aa0      	ldr	r2, [pc, #640]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101d26:	430b      	orrs	r3, r1
 8101d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8101d2a:	e003      	b.n	8101d34 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101d30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8101d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101d3c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8101d40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8101d44:	2300      	movs	r3, #0
 8101d46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8101d4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8101d4e:	460b      	mov	r3, r1
 8101d50:	4313      	orrs	r3, r2
 8101d52:	d037      	beq.n	8101dc4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8101d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101d5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101d5e:	d00e      	beq.n	8101d7e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8101d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101d64:	d816      	bhi.n	8101d94 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8101d66:	2b00      	cmp	r3, #0
 8101d68:	d018      	beq.n	8101d9c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8101d6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101d6e:	d111      	bne.n	8101d94 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101d70:	4b8d      	ldr	r3, [pc, #564]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101d74:	4a8c      	ldr	r2, [pc, #560]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8101d7c:	e00f      	b.n	8101d9e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d82:	3308      	adds	r3, #8
 8101d84:	2101      	movs	r1, #1
 8101d86:	4618      	mov	r0, r3
 8101d88:	f001 f94c 	bl	8103024 <RCCEx_PLL2_Config>
 8101d8c:	4603      	mov	r3, r0
 8101d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8101d92:	e004      	b.n	8101d9e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101d94:	2301      	movs	r3, #1
 8101d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101d9a:	e000      	b.n	8101d9e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8101d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101da2:	2b00      	cmp	r3, #0
 8101da4:	d10a      	bne.n	8101dbc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8101da6:	4b80      	ldr	r3, [pc, #512]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101daa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8101dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101db4:	4a7c      	ldr	r2, [pc, #496]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101db6:	430b      	orrs	r3, r1
 8101db8:	6513      	str	r3, [r2, #80]	@ 0x50
 8101dba:	e003      	b.n	8101dc4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101dc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8101dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101dcc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8101dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8101dd4:	2300      	movs	r3, #0
 8101dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8101dda:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8101dde:	460b      	mov	r3, r1
 8101de0:	4313      	orrs	r3, r2
 8101de2:	d039      	beq.n	8101e58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8101de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101dea:	2b03      	cmp	r3, #3
 8101dec:	d81c      	bhi.n	8101e28 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8101dee:	a201      	add	r2, pc, #4	@ (adr r2, 8101df4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8101df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101df4:	08101e31 	.word	0x08101e31
 8101df8:	08101e05 	.word	0x08101e05
 8101dfc:	08101e13 	.word	0x08101e13
 8101e00:	08101e31 	.word	0x08101e31
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101e04:	4b68      	ldr	r3, [pc, #416]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101e08:	4a67      	ldr	r2, [pc, #412]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101e0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8101e10:	e00f      	b.n	8101e32 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e16:	3308      	adds	r3, #8
 8101e18:	2102      	movs	r1, #2
 8101e1a:	4618      	mov	r0, r3
 8101e1c:	f001 f902 	bl	8103024 <RCCEx_PLL2_Config>
 8101e20:	4603      	mov	r3, r0
 8101e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8101e26:	e004      	b.n	8101e32 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8101e28:	2301      	movs	r3, #1
 8101e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101e2e:	e000      	b.n	8101e32 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8101e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101e36:	2b00      	cmp	r3, #0
 8101e38:	d10a      	bne.n	8101e50 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8101e3a:	4b5b      	ldr	r3, [pc, #364]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101e3e:	f023 0103 	bic.w	r1, r3, #3
 8101e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101e48:	4a57      	ldr	r2, [pc, #348]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101e4a:	430b      	orrs	r3, r1
 8101e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8101e4e:	e003      	b.n	8101e58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101e54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8101e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101e60:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8101e64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8101e68:	2300      	movs	r3, #0
 8101e6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8101e6e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8101e72:	460b      	mov	r3, r1
 8101e74:	4313      	orrs	r3, r2
 8101e76:	f000 809f 	beq.w	8101fb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8101e7a:	4b4c      	ldr	r3, [pc, #304]	@ (8101fac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8101e7c:	681b      	ldr	r3, [r3, #0]
 8101e7e:	4a4b      	ldr	r2, [pc, #300]	@ (8101fac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8101e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8101e84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8101e86:	f7fe fec7 	bl	8100c18 <HAL_GetTick>
 8101e8a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101e8e:	e00b      	b.n	8101ea8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8101e90:	f7fe fec2 	bl	8100c18 <HAL_GetTick>
 8101e94:	4602      	mov	r2, r0
 8101e96:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8101e9a:	1ad3      	subs	r3, r2, r3
 8101e9c:	2b64      	cmp	r3, #100	@ 0x64
 8101e9e:	d903      	bls.n	8101ea8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8101ea0:	2303      	movs	r3, #3
 8101ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101ea6:	e005      	b.n	8101eb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101ea8:	4b40      	ldr	r3, [pc, #256]	@ (8101fac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8101eaa:	681b      	ldr	r3, [r3, #0]
 8101eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101eb0:	2b00      	cmp	r3, #0
 8101eb2:	d0ed      	beq.n	8101e90 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8101eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101eb8:	2b00      	cmp	r3, #0
 8101eba:	d179      	bne.n	8101fb0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8101ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101ebe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8101ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ec4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101ec8:	4053      	eors	r3, r2
 8101eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8101ece:	2b00      	cmp	r3, #0
 8101ed0:	d015      	beq.n	8101efe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8101ed2:	4b35      	ldr	r3, [pc, #212]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101ed6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8101eda:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8101ede:	4b32      	ldr	r3, [pc, #200]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101ee2:	4a31      	ldr	r2, [pc, #196]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101ee8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8101eea:	4b2f      	ldr	r3, [pc, #188]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101eee:	4a2e      	ldr	r2, [pc, #184]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8101ef4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8101ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101ef8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101efc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8101efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101f06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101f0a:	d118      	bne.n	8101f3e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101f0c:	f7fe fe84 	bl	8100c18 <HAL_GetTick>
 8101f10:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101f14:	e00d      	b.n	8101f32 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101f16:	f7fe fe7f 	bl	8100c18 <HAL_GetTick>
 8101f1a:	4602      	mov	r2, r0
 8101f1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8101f20:	1ad2      	subs	r2, r2, r3
 8101f22:	f241 3388 	movw	r3, #5000	@ 0x1388
 8101f26:	429a      	cmp	r2, r3
 8101f28:	d903      	bls.n	8101f32 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8101f2a:	2303      	movs	r3, #3
 8101f2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8101f30:	e005      	b.n	8101f3e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101f32:	4b1d      	ldr	r3, [pc, #116]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101f36:	f003 0302 	and.w	r3, r3, #2
 8101f3a:	2b00      	cmp	r3, #0
 8101f3c:	d0eb      	beq.n	8101f16 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8101f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101f42:	2b00      	cmp	r3, #0
 8101f44:	d12b      	bne.n	8101f9e <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8101f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101f4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8101f52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8101f56:	d110      	bne.n	8101f7a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8101f58:	4b13      	ldr	r3, [pc, #76]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101f5a:	691b      	ldr	r3, [r3, #16]
 8101f5c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8101f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101f68:	091b      	lsrs	r3, r3, #4
 8101f6a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8101f6e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8101f72:	4a0d      	ldr	r2, [pc, #52]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101f74:	430b      	orrs	r3, r1
 8101f76:	6113      	str	r3, [r2, #16]
 8101f78:	e005      	b.n	8101f86 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8101f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101f7c:	691b      	ldr	r3, [r3, #16]
 8101f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101f80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8101f84:	6113      	str	r3, [r2, #16]
 8101f86:	4b08      	ldr	r3, [pc, #32]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101f88:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8101f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8101f96:	4a04      	ldr	r2, [pc, #16]	@ (8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101f98:	430b      	orrs	r3, r1
 8101f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8101f9c:	e00c      	b.n	8101fb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8101f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8101fa6:	e007      	b.n	8101fb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8101fa8:	58024400 	.word	0x58024400
 8101fac:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101fb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8101fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101fc0:	f002 0301 	and.w	r3, r2, #1
 8101fc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8101fc8:	2300      	movs	r3, #0
 8101fca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8101fce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8101fd2:	460b      	mov	r3, r1
 8101fd4:	4313      	orrs	r3, r2
 8101fd6:	f000 8089 	beq.w	81020ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8101fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101fde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8101fe0:	2b28      	cmp	r3, #40	@ 0x28
 8101fe2:	d86b      	bhi.n	81020bc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8101fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8101fec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8101fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101fea:	bf00      	nop
 8101fec:	081020c5 	.word	0x081020c5
 8101ff0:	081020bd 	.word	0x081020bd
 8101ff4:	081020bd 	.word	0x081020bd
 8101ff8:	081020bd 	.word	0x081020bd
 8101ffc:	081020bd 	.word	0x081020bd
 8102000:	081020bd 	.word	0x081020bd
 8102004:	081020bd 	.word	0x081020bd
 8102008:	081020bd 	.word	0x081020bd
 810200c:	08102091 	.word	0x08102091
 8102010:	081020bd 	.word	0x081020bd
 8102014:	081020bd 	.word	0x081020bd
 8102018:	081020bd 	.word	0x081020bd
 810201c:	081020bd 	.word	0x081020bd
 8102020:	081020bd 	.word	0x081020bd
 8102024:	081020bd 	.word	0x081020bd
 8102028:	081020bd 	.word	0x081020bd
 810202c:	081020a7 	.word	0x081020a7
 8102030:	081020bd 	.word	0x081020bd
 8102034:	081020bd 	.word	0x081020bd
 8102038:	081020bd 	.word	0x081020bd
 810203c:	081020bd 	.word	0x081020bd
 8102040:	081020bd 	.word	0x081020bd
 8102044:	081020bd 	.word	0x081020bd
 8102048:	081020bd 	.word	0x081020bd
 810204c:	081020c5 	.word	0x081020c5
 8102050:	081020bd 	.word	0x081020bd
 8102054:	081020bd 	.word	0x081020bd
 8102058:	081020bd 	.word	0x081020bd
 810205c:	081020bd 	.word	0x081020bd
 8102060:	081020bd 	.word	0x081020bd
 8102064:	081020bd 	.word	0x081020bd
 8102068:	081020bd 	.word	0x081020bd
 810206c:	081020c5 	.word	0x081020c5
 8102070:	081020bd 	.word	0x081020bd
 8102074:	081020bd 	.word	0x081020bd
 8102078:	081020bd 	.word	0x081020bd
 810207c:	081020bd 	.word	0x081020bd
 8102080:	081020bd 	.word	0x081020bd
 8102084:	081020bd 	.word	0x081020bd
 8102088:	081020bd 	.word	0x081020bd
 810208c:	081020c5 	.word	0x081020c5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102094:	3308      	adds	r3, #8
 8102096:	2101      	movs	r1, #1
 8102098:	4618      	mov	r0, r3
 810209a:	f000 ffc3 	bl	8103024 <RCCEx_PLL2_Config>
 810209e:	4603      	mov	r3, r0
 81020a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81020a4:	e00f      	b.n	81020c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81020a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020aa:	3328      	adds	r3, #40	@ 0x28
 81020ac:	2101      	movs	r1, #1
 81020ae:	4618      	mov	r0, r3
 81020b0:	f001 f86a 	bl	8103188 <RCCEx_PLL3_Config>
 81020b4:	4603      	mov	r3, r0
 81020b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81020ba:	e004      	b.n	81020c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81020bc:	2301      	movs	r3, #1
 81020be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81020c2:	e000      	b.n	81020c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 81020c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81020c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81020ca:	2b00      	cmp	r3, #0
 81020cc:	d10a      	bne.n	81020e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81020ce:	4bbf      	ldr	r3, [pc, #764]	@ (81023cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81020d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81020d2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 81020d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81020dc:	4abb      	ldr	r2, [pc, #748]	@ (81023cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81020de:	430b      	orrs	r3, r1
 81020e0:	6553      	str	r3, [r2, #84]	@ 0x54
 81020e2:	e003      	b.n	81020ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81020e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81020e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81020ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81020f4:	f002 0302 	and.w	r3, r2, #2
 81020f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81020fc:	2300      	movs	r3, #0
 81020fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8102102:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8102106:	460b      	mov	r3, r1
 8102108:	4313      	orrs	r3, r2
 810210a:	d041      	beq.n	8102190 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810210c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102110:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8102112:	2b05      	cmp	r3, #5
 8102114:	d824      	bhi.n	8102160 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8102116:	a201      	add	r2, pc, #4	@ (adr r2, 810211c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8102118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810211c:	08102169 	.word	0x08102169
 8102120:	08102135 	.word	0x08102135
 8102124:	0810214b 	.word	0x0810214b
 8102128:	08102169 	.word	0x08102169
 810212c:	08102169 	.word	0x08102169
 8102130:	08102169 	.word	0x08102169
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102138:	3308      	adds	r3, #8
 810213a:	2101      	movs	r1, #1
 810213c:	4618      	mov	r0, r3
 810213e:	f000 ff71 	bl	8103024 <RCCEx_PLL2_Config>
 8102142:	4603      	mov	r3, r0
 8102144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102148:	e00f      	b.n	810216a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810214a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810214e:	3328      	adds	r3, #40	@ 0x28
 8102150:	2101      	movs	r1, #1
 8102152:	4618      	mov	r0, r3
 8102154:	f001 f818 	bl	8103188 <RCCEx_PLL3_Config>
 8102158:	4603      	mov	r3, r0
 810215a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810215e:	e004      	b.n	810216a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102160:	2301      	movs	r3, #1
 8102162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102166:	e000      	b.n	810216a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8102168:	bf00      	nop
    }

    if (ret == HAL_OK)
 810216a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810216e:	2b00      	cmp	r3, #0
 8102170:	d10a      	bne.n	8102188 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102172:	4b96      	ldr	r3, [pc, #600]	@ (81023cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102176:	f023 0107 	bic.w	r1, r3, #7
 810217a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810217e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8102180:	4a92      	ldr	r2, [pc, #584]	@ (81023cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102182:	430b      	orrs	r3, r1
 8102184:	6553      	str	r3, [r2, #84]	@ 0x54
 8102186:	e003      	b.n	8102190 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810218c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102198:	f002 0304 	and.w	r3, r2, #4
 810219c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 81021a0:	2300      	movs	r3, #0
 81021a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 81021a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 81021aa:	460b      	mov	r3, r1
 81021ac:	4313      	orrs	r3, r2
 81021ae:	d044      	beq.n	810223a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81021b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81021b8:	2b05      	cmp	r3, #5
 81021ba:	d825      	bhi.n	8102208 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81021bc:	a201      	add	r2, pc, #4	@ (adr r2, 81021c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81021be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81021c2:	bf00      	nop
 81021c4:	08102211 	.word	0x08102211
 81021c8:	081021dd 	.word	0x081021dd
 81021cc:	081021f3 	.word	0x081021f3
 81021d0:	08102211 	.word	0x08102211
 81021d4:	08102211 	.word	0x08102211
 81021d8:	08102211 	.word	0x08102211
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81021dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021e0:	3308      	adds	r3, #8
 81021e2:	2101      	movs	r1, #1
 81021e4:	4618      	mov	r0, r3
 81021e6:	f000 ff1d 	bl	8103024 <RCCEx_PLL2_Config>
 81021ea:	4603      	mov	r3, r0
 81021ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81021f0:	e00f      	b.n	8102212 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81021f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021f6:	3328      	adds	r3, #40	@ 0x28
 81021f8:	2101      	movs	r1, #1
 81021fa:	4618      	mov	r0, r3
 81021fc:	f000 ffc4 	bl	8103188 <RCCEx_PLL3_Config>
 8102200:	4603      	mov	r3, r0
 8102202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8102206:	e004      	b.n	8102212 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102208:	2301      	movs	r3, #1
 810220a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810220e:	e000      	b.n	8102212 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8102210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102216:	2b00      	cmp	r3, #0
 8102218:	d10b      	bne.n	8102232 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810221a:	4b6c      	ldr	r3, [pc, #432]	@ (81023cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810221c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810221e:	f023 0107 	bic.w	r1, r3, #7
 8102222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102226:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810222a:	4a68      	ldr	r2, [pc, #416]	@ (81023cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810222c:	430b      	orrs	r3, r1
 810222e:	6593      	str	r3, [r2, #88]	@ 0x58
 8102230:	e003      	b.n	810223a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102236:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810223a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102242:	f002 0320 	and.w	r3, r2, #32
 8102246:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810224a:	2300      	movs	r3, #0
 810224c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8102250:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8102254:	460b      	mov	r3, r1
 8102256:	4313      	orrs	r3, r2
 8102258:	d055      	beq.n	8102306 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810225a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102262:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102266:	d033      	beq.n	81022d0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8102268:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810226c:	d82c      	bhi.n	81022c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810226e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102272:	d02f      	beq.n	81022d4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8102274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102278:	d826      	bhi.n	81022c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810227a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810227e:	d02b      	beq.n	81022d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8102280:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102284:	d820      	bhi.n	81022c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102286:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810228a:	d012      	beq.n	81022b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 810228c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102290:	d81a      	bhi.n	81022c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102292:	2b00      	cmp	r3, #0
 8102294:	d022      	beq.n	81022dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8102296:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810229a:	d115      	bne.n	81022c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810229c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022a0:	3308      	adds	r3, #8
 81022a2:	2100      	movs	r1, #0
 81022a4:	4618      	mov	r0, r3
 81022a6:	f000 febd 	bl	8103024 <RCCEx_PLL2_Config>
 81022aa:	4603      	mov	r3, r0
 81022ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81022b0:	e015      	b.n	81022de <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81022b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022b6:	3328      	adds	r3, #40	@ 0x28
 81022b8:	2102      	movs	r1, #2
 81022ba:	4618      	mov	r0, r3
 81022bc:	f000 ff64 	bl	8103188 <RCCEx_PLL3_Config>
 81022c0:	4603      	mov	r3, r0
 81022c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81022c6:	e00a      	b.n	81022de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81022c8:	2301      	movs	r3, #1
 81022ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81022ce:	e006      	b.n	81022de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81022d0:	bf00      	nop
 81022d2:	e004      	b.n	81022de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81022d4:	bf00      	nop
 81022d6:	e002      	b.n	81022de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81022d8:	bf00      	nop
 81022da:	e000      	b.n	81022de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81022dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81022de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81022e2:	2b00      	cmp	r3, #0
 81022e4:	d10b      	bne.n	81022fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81022e6:	4b39      	ldr	r3, [pc, #228]	@ (81023cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81022e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81022ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81022ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81022f6:	4a35      	ldr	r2, [pc, #212]	@ (81023cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81022f8:	430b      	orrs	r3, r1
 81022fa:	6553      	str	r3, [r2, #84]	@ 0x54
 81022fc:	e003      	b.n	8102306 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102302:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810230e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8102312:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8102316:	2300      	movs	r3, #0
 8102318:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 810231c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8102320:	460b      	mov	r3, r1
 8102322:	4313      	orrs	r3, r2
 8102324:	d058      	beq.n	81023d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8102326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810232a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810232e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102332:	d033      	beq.n	810239c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8102334:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102338:	d82c      	bhi.n	8102394 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810233a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810233e:	d02f      	beq.n	81023a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8102340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102344:	d826      	bhi.n	8102394 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102346:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810234a:	d02b      	beq.n	81023a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 810234c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102350:	d820      	bhi.n	8102394 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102352:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102356:	d012      	beq.n	810237e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8102358:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810235c:	d81a      	bhi.n	8102394 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810235e:	2b00      	cmp	r3, #0
 8102360:	d022      	beq.n	81023a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8102362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8102366:	d115      	bne.n	8102394 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810236c:	3308      	adds	r3, #8
 810236e:	2100      	movs	r1, #0
 8102370:	4618      	mov	r0, r3
 8102372:	f000 fe57 	bl	8103024 <RCCEx_PLL2_Config>
 8102376:	4603      	mov	r3, r0
 8102378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810237c:	e015      	b.n	81023aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810237e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102382:	3328      	adds	r3, #40	@ 0x28
 8102384:	2102      	movs	r1, #2
 8102386:	4618      	mov	r0, r3
 8102388:	f000 fefe 	bl	8103188 <RCCEx_PLL3_Config>
 810238c:	4603      	mov	r3, r0
 810238e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102392:	e00a      	b.n	81023aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102394:	2301      	movs	r3, #1
 8102396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810239a:	e006      	b.n	81023aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810239c:	bf00      	nop
 810239e:	e004      	b.n	81023aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81023a0:	bf00      	nop
 81023a2:	e002      	b.n	81023aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81023a4:	bf00      	nop
 81023a6:	e000      	b.n	81023aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81023a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81023aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81023ae:	2b00      	cmp	r3, #0
 81023b0:	d10e      	bne.n	81023d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81023b2:	4b06      	ldr	r3, [pc, #24]	@ (81023cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81023b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81023b6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 81023ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81023c2:	4a02      	ldr	r2, [pc, #8]	@ (81023cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81023c4:	430b      	orrs	r3, r1
 81023c6:	6593      	str	r3, [r2, #88]	@ 0x58
 81023c8:	e006      	b.n	81023d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81023ca:	bf00      	nop
 81023cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81023d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81023d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81023d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81023e0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 81023e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81023e8:	2300      	movs	r3, #0
 81023ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 81023ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81023f2:	460b      	mov	r3, r1
 81023f4:	4313      	orrs	r3, r2
 81023f6:	d055      	beq.n	81024a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81023f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102400:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8102404:	d033      	beq.n	810246e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8102406:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810240a:	d82c      	bhi.n	8102466 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810240c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8102410:	d02f      	beq.n	8102472 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8102412:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8102416:	d826      	bhi.n	8102466 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102418:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810241c:	d02b      	beq.n	8102476 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810241e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8102422:	d820      	bhi.n	8102466 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102424:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102428:	d012      	beq.n	8102450 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 810242a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810242e:	d81a      	bhi.n	8102466 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102430:	2b00      	cmp	r3, #0
 8102432:	d022      	beq.n	810247a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8102434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102438:	d115      	bne.n	8102466 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810243a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810243e:	3308      	adds	r3, #8
 8102440:	2100      	movs	r1, #0
 8102442:	4618      	mov	r0, r3
 8102444:	f000 fdee 	bl	8103024 <RCCEx_PLL2_Config>
 8102448:	4603      	mov	r3, r0
 810244a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810244e:	e015      	b.n	810247c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102454:	3328      	adds	r3, #40	@ 0x28
 8102456:	2102      	movs	r1, #2
 8102458:	4618      	mov	r0, r3
 810245a:	f000 fe95 	bl	8103188 <RCCEx_PLL3_Config>
 810245e:	4603      	mov	r3, r0
 8102460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102464:	e00a      	b.n	810247c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102466:	2301      	movs	r3, #1
 8102468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810246c:	e006      	b.n	810247c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810246e:	bf00      	nop
 8102470:	e004      	b.n	810247c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102472:	bf00      	nop
 8102474:	e002      	b.n	810247c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102476:	bf00      	nop
 8102478:	e000      	b.n	810247c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810247a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810247c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102480:	2b00      	cmp	r3, #0
 8102482:	d10b      	bne.n	810249c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8102484:	4ba1      	ldr	r3, [pc, #644]	@ (810270c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102488:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810248c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102490:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102494:	4a9d      	ldr	r2, [pc, #628]	@ (810270c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102496:	430b      	orrs	r3, r1
 8102498:	6593      	str	r3, [r2, #88]	@ 0x58
 810249a:	e003      	b.n	81024a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810249c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81024a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81024a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81024ac:	f002 0308 	and.w	r3, r2, #8
 81024b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 81024b4:	2300      	movs	r3, #0
 81024b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81024ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 81024be:	460b      	mov	r3, r1
 81024c0:	4313      	orrs	r3, r2
 81024c2:	d01e      	beq.n	8102502 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81024c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81024cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81024d0:	d10c      	bne.n	81024ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81024d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024d6:	3328      	adds	r3, #40	@ 0x28
 81024d8:	2102      	movs	r1, #2
 81024da:	4618      	mov	r0, r3
 81024dc:	f000 fe54 	bl	8103188 <RCCEx_PLL3_Config>
 81024e0:	4603      	mov	r3, r0
 81024e2:	2b00      	cmp	r3, #0
 81024e4:	d002      	beq.n	81024ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81024e6:	2301      	movs	r3, #1
 81024e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81024ec:	4b87      	ldr	r3, [pc, #540]	@ (810270c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81024ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81024f0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81024f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81024fc:	4a83      	ldr	r2, [pc, #524]	@ (810270c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81024fe:	430b      	orrs	r3, r1
 8102500:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102506:	e9d3 2300 	ldrd	r2, r3, [r3]
 810250a:	f002 0310 	and.w	r3, r2, #16
 810250e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8102512:	2300      	movs	r3, #0
 8102514:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8102518:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 810251c:	460b      	mov	r3, r1
 810251e:	4313      	orrs	r3, r2
 8102520:	d01e      	beq.n	8102560 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8102522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102526:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810252a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810252e:	d10c      	bne.n	810254a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102534:	3328      	adds	r3, #40	@ 0x28
 8102536:	2102      	movs	r1, #2
 8102538:	4618      	mov	r0, r3
 810253a:	f000 fe25 	bl	8103188 <RCCEx_PLL3_Config>
 810253e:	4603      	mov	r3, r0
 8102540:	2b00      	cmp	r3, #0
 8102542:	d002      	beq.n	810254a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8102544:	2301      	movs	r3, #1
 8102546:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810254a:	4b70      	ldr	r3, [pc, #448]	@ (810270c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810254c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810254e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8102552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102556:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810255a:	4a6c      	ldr	r2, [pc, #432]	@ (810270c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810255c:	430b      	orrs	r3, r1
 810255e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102568:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810256c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8102570:	2300      	movs	r3, #0
 8102572:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8102576:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810257a:	460b      	mov	r3, r1
 810257c:	4313      	orrs	r3, r2
 810257e:	d03e      	beq.n	81025fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8102580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102584:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102588:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810258c:	d022      	beq.n	81025d4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810258e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102592:	d81b      	bhi.n	81025cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8102594:	2b00      	cmp	r3, #0
 8102596:	d003      	beq.n	81025a0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8102598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810259c:	d00b      	beq.n	81025b6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810259e:	e015      	b.n	81025cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81025a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025a4:	3308      	adds	r3, #8
 81025a6:	2100      	movs	r1, #0
 81025a8:	4618      	mov	r0, r3
 81025aa:	f000 fd3b 	bl	8103024 <RCCEx_PLL2_Config>
 81025ae:	4603      	mov	r3, r0
 81025b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81025b4:	e00f      	b.n	81025d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81025b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025ba:	3328      	adds	r3, #40	@ 0x28
 81025bc:	2102      	movs	r1, #2
 81025be:	4618      	mov	r0, r3
 81025c0:	f000 fde2 	bl	8103188 <RCCEx_PLL3_Config>
 81025c4:	4603      	mov	r3, r0
 81025c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81025ca:	e004      	b.n	81025d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81025cc:	2301      	movs	r3, #1
 81025ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81025d2:	e000      	b.n	81025d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81025d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81025d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81025da:	2b00      	cmp	r3, #0
 81025dc:	d10b      	bne.n	81025f6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81025de:	4b4b      	ldr	r3, [pc, #300]	@ (810270c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81025e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81025e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81025e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81025ee:	4a47      	ldr	r2, [pc, #284]	@ (810270c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81025f0:	430b      	orrs	r3, r1
 81025f2:	6593      	str	r3, [r2, #88]	@ 0x58
 81025f4:	e003      	b.n	81025fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81025f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81025fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81025fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102606:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810260a:	67bb      	str	r3, [r7, #120]	@ 0x78
 810260c:	2300      	movs	r3, #0
 810260e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8102610:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8102614:	460b      	mov	r3, r1
 8102616:	4313      	orrs	r3, r2
 8102618:	d03b      	beq.n	8102692 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810261a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102622:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102626:	d01f      	beq.n	8102668 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8102628:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810262c:	d818      	bhi.n	8102660 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810262e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102632:	d003      	beq.n	810263c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8102634:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102638:	d007      	beq.n	810264a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810263a:	e011      	b.n	8102660 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810263c:	4b33      	ldr	r3, [pc, #204]	@ (810270c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810263e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102640:	4a32      	ldr	r2, [pc, #200]	@ (810270c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102646:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8102648:	e00f      	b.n	810266a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810264a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810264e:	3328      	adds	r3, #40	@ 0x28
 8102650:	2101      	movs	r1, #1
 8102652:	4618      	mov	r0, r3
 8102654:	f000 fd98 	bl	8103188 <RCCEx_PLL3_Config>
 8102658:	4603      	mov	r3, r0
 810265a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810265e:	e004      	b.n	810266a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102660:	2301      	movs	r3, #1
 8102662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102666:	e000      	b.n	810266a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8102668:	bf00      	nop
    }

    if (ret == HAL_OK)
 810266a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810266e:	2b00      	cmp	r3, #0
 8102670:	d10b      	bne.n	810268a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102672:	4b26      	ldr	r3, [pc, #152]	@ (810270c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102676:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810267a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102682:	4a22      	ldr	r2, [pc, #136]	@ (810270c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102684:	430b      	orrs	r3, r1
 8102686:	6553      	str	r3, [r2, #84]	@ 0x54
 8102688:	e003      	b.n	8102692 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810268a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810268e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102696:	e9d3 2300 	ldrd	r2, r3, [r3]
 810269a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810269e:	673b      	str	r3, [r7, #112]	@ 0x70
 81026a0:	2300      	movs	r3, #0
 81026a2:	677b      	str	r3, [r7, #116]	@ 0x74
 81026a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81026a8:	460b      	mov	r3, r1
 81026aa:	4313      	orrs	r3, r2
 81026ac:	d034      	beq.n	8102718 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81026ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81026b4:	2b00      	cmp	r3, #0
 81026b6:	d003      	beq.n	81026c0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 81026b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81026bc:	d007      	beq.n	81026ce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 81026be:	e011      	b.n	81026e4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81026c0:	4b12      	ldr	r3, [pc, #72]	@ (810270c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81026c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81026c4:	4a11      	ldr	r2, [pc, #68]	@ (810270c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81026c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81026ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81026cc:	e00e      	b.n	81026ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81026ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026d2:	3308      	adds	r3, #8
 81026d4:	2102      	movs	r1, #2
 81026d6:	4618      	mov	r0, r3
 81026d8:	f000 fca4 	bl	8103024 <RCCEx_PLL2_Config>
 81026dc:	4603      	mov	r3, r0
 81026de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81026e2:	e003      	b.n	81026ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 81026e4:	2301      	movs	r3, #1
 81026e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81026ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 81026ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81026f0:	2b00      	cmp	r3, #0
 81026f2:	d10d      	bne.n	8102710 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81026f4:	4b05      	ldr	r3, [pc, #20]	@ (810270c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81026f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81026f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81026fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102702:	4a02      	ldr	r2, [pc, #8]	@ (810270c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102704:	430b      	orrs	r3, r1
 8102706:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102708:	e006      	b.n	8102718 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 810270a:	bf00      	nop
 810270c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102710:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102714:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8102718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102720:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8102724:	66bb      	str	r3, [r7, #104]	@ 0x68
 8102726:	2300      	movs	r3, #0
 8102728:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810272a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810272e:	460b      	mov	r3, r1
 8102730:	4313      	orrs	r3, r2
 8102732:	d00c      	beq.n	810274e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102738:	3328      	adds	r3, #40	@ 0x28
 810273a:	2102      	movs	r1, #2
 810273c:	4618      	mov	r0, r3
 810273e:	f000 fd23 	bl	8103188 <RCCEx_PLL3_Config>
 8102742:	4603      	mov	r3, r0
 8102744:	2b00      	cmp	r3, #0
 8102746:	d002      	beq.n	810274e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8102748:	2301      	movs	r3, #1
 810274a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810274e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102756:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810275a:	663b      	str	r3, [r7, #96]	@ 0x60
 810275c:	2300      	movs	r3, #0
 810275e:	667b      	str	r3, [r7, #100]	@ 0x64
 8102760:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8102764:	460b      	mov	r3, r1
 8102766:	4313      	orrs	r3, r2
 8102768:	d038      	beq.n	81027dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 810276a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810276e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102772:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102776:	d018      	beq.n	81027aa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8102778:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810277c:	d811      	bhi.n	81027a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810277e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102782:	d014      	beq.n	81027ae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8102784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102788:	d80b      	bhi.n	81027a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810278a:	2b00      	cmp	r3, #0
 810278c:	d011      	beq.n	81027b2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810278e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102792:	d106      	bne.n	81027a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102794:	4bc3      	ldr	r3, [pc, #780]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102798:	4ac2      	ldr	r2, [pc, #776]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810279a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810279e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81027a0:	e008      	b.n	81027b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81027a2:	2301      	movs	r3, #1
 81027a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81027a8:	e004      	b.n	81027b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81027aa:	bf00      	nop
 81027ac:	e002      	b.n	81027b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81027ae:	bf00      	nop
 81027b0:	e000      	b.n	81027b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81027b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81027b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81027b8:	2b00      	cmp	r3, #0
 81027ba:	d10b      	bne.n	81027d4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81027bc:	4bb9      	ldr	r3, [pc, #740]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81027be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81027c0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81027c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81027cc:	4ab5      	ldr	r2, [pc, #724]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81027ce:	430b      	orrs	r3, r1
 81027d0:	6553      	str	r3, [r2, #84]	@ 0x54
 81027d2:	e003      	b.n	81027dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81027d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81027dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027e4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81027e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 81027ea:	2300      	movs	r3, #0
 81027ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81027ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81027f2:	460b      	mov	r3, r1
 81027f4:	4313      	orrs	r3, r2
 81027f6:	d009      	beq.n	810280c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81027f8:	4baa      	ldr	r3, [pc, #680]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81027fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81027fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8102800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8102806:	4aa7      	ldr	r2, [pc, #668]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102808:	430b      	orrs	r3, r1
 810280a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810280c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102814:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8102818:	653b      	str	r3, [r7, #80]	@ 0x50
 810281a:	2300      	movs	r3, #0
 810281c:	657b      	str	r3, [r7, #84]	@ 0x54
 810281e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8102822:	460b      	mov	r3, r1
 8102824:	4313      	orrs	r3, r2
 8102826:	d00a      	beq.n	810283e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8102828:	4b9e      	ldr	r3, [pc, #632]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810282a:	691b      	ldr	r3, [r3, #16]
 810282c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8102830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102834:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8102838:	4a9a      	ldr	r2, [pc, #616]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810283a:	430b      	orrs	r3, r1
 810283c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810283e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102846:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810284a:	64bb      	str	r3, [r7, #72]	@ 0x48
 810284c:	2300      	movs	r3, #0
 810284e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8102850:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8102854:	460b      	mov	r3, r1
 8102856:	4313      	orrs	r3, r2
 8102858:	d009      	beq.n	810286e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810285a:	4b92      	ldr	r3, [pc, #584]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810285c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810285e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8102862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102868:	4a8e      	ldr	r2, [pc, #568]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810286a:	430b      	orrs	r3, r1
 810286c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810286e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102876:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810287a:	643b      	str	r3, [r7, #64]	@ 0x40
 810287c:	2300      	movs	r3, #0
 810287e:	647b      	str	r3, [r7, #68]	@ 0x44
 8102880:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8102884:	460b      	mov	r3, r1
 8102886:	4313      	orrs	r3, r2
 8102888:	d00e      	beq.n	81028a8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810288a:	4b86      	ldr	r3, [pc, #536]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810288c:	691b      	ldr	r3, [r3, #16]
 810288e:	4a85      	ldr	r2, [pc, #532]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102890:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8102894:	6113      	str	r3, [r2, #16]
 8102896:	4b83      	ldr	r3, [pc, #524]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102898:	6919      	ldr	r1, [r3, #16]
 810289a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810289e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81028a2:	4a80      	ldr	r2, [pc, #512]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81028a4:	430b      	orrs	r3, r1
 81028a6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81028a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028b0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 81028b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 81028b6:	2300      	movs	r3, #0
 81028b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81028ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 81028be:	460b      	mov	r3, r1
 81028c0:	4313      	orrs	r3, r2
 81028c2:	d009      	beq.n	81028d8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81028c4:	4b77      	ldr	r3, [pc, #476]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81028c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81028c8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81028cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81028d2:	4a74      	ldr	r2, [pc, #464]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81028d4:	430b      	orrs	r3, r1
 81028d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81028d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028e0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81028e4:	633b      	str	r3, [r7, #48]	@ 0x30
 81028e6:	2300      	movs	r3, #0
 81028e8:	637b      	str	r3, [r7, #52]	@ 0x34
 81028ea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81028ee:	460b      	mov	r3, r1
 81028f0:	4313      	orrs	r3, r2
 81028f2:	d00a      	beq.n	810290a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81028f4:	4b6b      	ldr	r3, [pc, #428]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81028f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81028f8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 81028fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102900:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8102904:	4a67      	ldr	r2, [pc, #412]	@ (8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102906:	430b      	orrs	r3, r1
 8102908:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810290a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810290e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102912:	2100      	movs	r1, #0
 8102914:	62b9      	str	r1, [r7, #40]	@ 0x28
 8102916:	f003 0301 	and.w	r3, r3, #1
 810291a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810291c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8102920:	460b      	mov	r3, r1
 8102922:	4313      	orrs	r3, r2
 8102924:	d011      	beq.n	810294a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810292a:	3308      	adds	r3, #8
 810292c:	2100      	movs	r1, #0
 810292e:	4618      	mov	r0, r3
 8102930:	f000 fb78 	bl	8103024 <RCCEx_PLL2_Config>
 8102934:	4603      	mov	r3, r0
 8102936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810293a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810293e:	2b00      	cmp	r3, #0
 8102940:	d003      	beq.n	810294a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810294a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102952:	2100      	movs	r1, #0
 8102954:	6239      	str	r1, [r7, #32]
 8102956:	f003 0302 	and.w	r3, r3, #2
 810295a:	627b      	str	r3, [r7, #36]	@ 0x24
 810295c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8102960:	460b      	mov	r3, r1
 8102962:	4313      	orrs	r3, r2
 8102964:	d011      	beq.n	810298a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810296a:	3308      	adds	r3, #8
 810296c:	2101      	movs	r1, #1
 810296e:	4618      	mov	r0, r3
 8102970:	f000 fb58 	bl	8103024 <RCCEx_PLL2_Config>
 8102974:	4603      	mov	r3, r0
 8102976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810297a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810297e:	2b00      	cmp	r3, #0
 8102980:	d003      	beq.n	810298a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810298a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102992:	2100      	movs	r1, #0
 8102994:	61b9      	str	r1, [r7, #24]
 8102996:	f003 0304 	and.w	r3, r3, #4
 810299a:	61fb      	str	r3, [r7, #28]
 810299c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81029a0:	460b      	mov	r3, r1
 81029a2:	4313      	orrs	r3, r2
 81029a4:	d011      	beq.n	81029ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81029a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029aa:	3308      	adds	r3, #8
 81029ac:	2102      	movs	r1, #2
 81029ae:	4618      	mov	r0, r3
 81029b0:	f000 fb38 	bl	8103024 <RCCEx_PLL2_Config>
 81029b4:	4603      	mov	r3, r0
 81029b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81029ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81029be:	2b00      	cmp	r3, #0
 81029c0:	d003      	beq.n	81029ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81029c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81029c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81029ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029d2:	2100      	movs	r1, #0
 81029d4:	6139      	str	r1, [r7, #16]
 81029d6:	f003 0308 	and.w	r3, r3, #8
 81029da:	617b      	str	r3, [r7, #20]
 81029dc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81029e0:	460b      	mov	r3, r1
 81029e2:	4313      	orrs	r3, r2
 81029e4:	d011      	beq.n	8102a0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81029e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029ea:	3328      	adds	r3, #40	@ 0x28
 81029ec:	2100      	movs	r1, #0
 81029ee:	4618      	mov	r0, r3
 81029f0:	f000 fbca 	bl	8103188 <RCCEx_PLL3_Config>
 81029f4:	4603      	mov	r3, r0
 81029f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 81029fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81029fe:	2b00      	cmp	r3, #0
 8102a00:	d003      	beq.n	8102a0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8102a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a12:	2100      	movs	r1, #0
 8102a14:	60b9      	str	r1, [r7, #8]
 8102a16:	f003 0310 	and.w	r3, r3, #16
 8102a1a:	60fb      	str	r3, [r7, #12]
 8102a1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8102a20:	460b      	mov	r3, r1
 8102a22:	4313      	orrs	r3, r2
 8102a24:	d011      	beq.n	8102a4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a2a:	3328      	adds	r3, #40	@ 0x28
 8102a2c:	2101      	movs	r1, #1
 8102a2e:	4618      	mov	r0, r3
 8102a30:	f000 fbaa 	bl	8103188 <RCCEx_PLL3_Config>
 8102a34:	4603      	mov	r3, r0
 8102a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a3e:	2b00      	cmp	r3, #0
 8102a40:	d003      	beq.n	8102a4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8102a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a52:	2100      	movs	r1, #0
 8102a54:	6039      	str	r1, [r7, #0]
 8102a56:	f003 0320 	and.w	r3, r3, #32
 8102a5a:	607b      	str	r3, [r7, #4]
 8102a5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8102a60:	460b      	mov	r3, r1
 8102a62:	4313      	orrs	r3, r2
 8102a64:	d011      	beq.n	8102a8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a6a:	3328      	adds	r3, #40	@ 0x28
 8102a6c:	2102      	movs	r1, #2
 8102a6e:	4618      	mov	r0, r3
 8102a70:	f000 fb8a 	bl	8103188 <RCCEx_PLL3_Config>
 8102a74:	4603      	mov	r3, r0
 8102a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a7e:	2b00      	cmp	r3, #0
 8102a80:	d003      	beq.n	8102a8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8102a8a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8102a8e:	2b00      	cmp	r3, #0
 8102a90:	d101      	bne.n	8102a96 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8102a92:	2300      	movs	r3, #0
 8102a94:	e000      	b.n	8102a98 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8102a96:	2301      	movs	r3, #1
}
 8102a98:	4618      	mov	r0, r3
 8102a9a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8102a9e:	46bd      	mov	sp, r7
 8102aa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8102aa4:	58024400 	.word	0x58024400

08102aa8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8102aa8:	b580      	push	{r7, lr}
 8102aaa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8102aac:	f7fe fd94 	bl	81015d8 <HAL_RCC_GetHCLKFreq>
 8102ab0:	4602      	mov	r2, r0
 8102ab2:	4b06      	ldr	r3, [pc, #24]	@ (8102acc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8102ab4:	6a1b      	ldr	r3, [r3, #32]
 8102ab6:	091b      	lsrs	r3, r3, #4
 8102ab8:	f003 0307 	and.w	r3, r3, #7
 8102abc:	4904      	ldr	r1, [pc, #16]	@ (8102ad0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8102abe:	5ccb      	ldrb	r3, [r1, r3]
 8102ac0:	f003 031f 	and.w	r3, r3, #31
 8102ac4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8102ac8:	4618      	mov	r0, r3
 8102aca:	bd80      	pop	{r7, pc}
 8102acc:	58024400 	.word	0x58024400
 8102ad0:	081070bc 	.word	0x081070bc

08102ad4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8102ad4:	b480      	push	{r7}
 8102ad6:	b089      	sub	sp, #36	@ 0x24
 8102ad8:	af00      	add	r7, sp, #0
 8102ada:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102adc:	4ba1      	ldr	r3, [pc, #644]	@ (8102d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102ae0:	f003 0303 	and.w	r3, r3, #3
 8102ae4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8102ae6:	4b9f      	ldr	r3, [pc, #636]	@ (8102d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102aea:	0b1b      	lsrs	r3, r3, #12
 8102aec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102af0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8102af2:	4b9c      	ldr	r3, [pc, #624]	@ (8102d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102af6:	091b      	lsrs	r3, r3, #4
 8102af8:	f003 0301 	and.w	r3, r3, #1
 8102afc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8102afe:	4b99      	ldr	r3, [pc, #612]	@ (8102d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102b02:	08db      	lsrs	r3, r3, #3
 8102b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102b08:	693a      	ldr	r2, [r7, #16]
 8102b0a:	fb02 f303 	mul.w	r3, r2, r3
 8102b0e:	ee07 3a90 	vmov	s15, r3
 8102b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8102b1a:	697b      	ldr	r3, [r7, #20]
 8102b1c:	2b00      	cmp	r3, #0
 8102b1e:	f000 8111 	beq.w	8102d44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8102b22:	69bb      	ldr	r3, [r7, #24]
 8102b24:	2b02      	cmp	r3, #2
 8102b26:	f000 8083 	beq.w	8102c30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8102b2a:	69bb      	ldr	r3, [r7, #24]
 8102b2c:	2b02      	cmp	r3, #2
 8102b2e:	f200 80a1 	bhi.w	8102c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8102b32:	69bb      	ldr	r3, [r7, #24]
 8102b34:	2b00      	cmp	r3, #0
 8102b36:	d003      	beq.n	8102b40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8102b38:	69bb      	ldr	r3, [r7, #24]
 8102b3a:	2b01      	cmp	r3, #1
 8102b3c:	d056      	beq.n	8102bec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8102b3e:	e099      	b.n	8102c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102b40:	4b88      	ldr	r3, [pc, #544]	@ (8102d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102b42:	681b      	ldr	r3, [r3, #0]
 8102b44:	f003 0320 	and.w	r3, r3, #32
 8102b48:	2b00      	cmp	r3, #0
 8102b4a:	d02d      	beq.n	8102ba8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102b4c:	4b85      	ldr	r3, [pc, #532]	@ (8102d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102b4e:	681b      	ldr	r3, [r3, #0]
 8102b50:	08db      	lsrs	r3, r3, #3
 8102b52:	f003 0303 	and.w	r3, r3, #3
 8102b56:	4a84      	ldr	r2, [pc, #528]	@ (8102d68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8102b58:	fa22 f303 	lsr.w	r3, r2, r3
 8102b5c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102b5e:	68bb      	ldr	r3, [r7, #8]
 8102b60:	ee07 3a90 	vmov	s15, r3
 8102b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b68:	697b      	ldr	r3, [r7, #20]
 8102b6a:	ee07 3a90 	vmov	s15, r3
 8102b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b76:	4b7b      	ldr	r3, [pc, #492]	@ (8102d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b7e:	ee07 3a90 	vmov	s15, r3
 8102b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8102b8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8102d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8102ba6:	e087      	b.n	8102cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102ba8:	697b      	ldr	r3, [r7, #20]
 8102baa:	ee07 3a90 	vmov	s15, r3
 8102bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102bb2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8102d70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8102bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102bba:	4b6a      	ldr	r3, [pc, #424]	@ (8102d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102bc2:	ee07 3a90 	vmov	s15, r3
 8102bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8102bce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8102d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102bea:	e065      	b.n	8102cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102bec:	697b      	ldr	r3, [r7, #20]
 8102bee:	ee07 3a90 	vmov	s15, r3
 8102bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102bf6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8102d74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8102bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102bfe:	4b59      	ldr	r3, [pc, #356]	@ (8102d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102c06:	ee07 3a90 	vmov	s15, r3
 8102c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102c12:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8102d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102c2e:	e043      	b.n	8102cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102c30:	697b      	ldr	r3, [r7, #20]
 8102c32:	ee07 3a90 	vmov	s15, r3
 8102c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c3a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8102d78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8102c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102c42:	4b48      	ldr	r3, [pc, #288]	@ (8102d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102c4a:	ee07 3a90 	vmov	s15, r3
 8102c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8102c56:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8102d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102c72:	e021      	b.n	8102cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102c74:	697b      	ldr	r3, [r7, #20]
 8102c76:	ee07 3a90 	vmov	s15, r3
 8102c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8102d74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8102c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102c86:	4b37      	ldr	r3, [pc, #220]	@ (8102d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102c8e:	ee07 3a90 	vmov	s15, r3
 8102c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8102c9a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8102d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102cb6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8102cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8102d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102cbc:	0a5b      	lsrs	r3, r3, #9
 8102cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102cc2:	ee07 3a90 	vmov	s15, r3
 8102cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102cca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8102cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102cde:	ee17 2a90 	vmov	r2, s15
 8102ce2:	687b      	ldr	r3, [r7, #4]
 8102ce4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8102ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8102d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102cea:	0c1b      	lsrs	r3, r3, #16
 8102cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102cf0:	ee07 3a90 	vmov	s15, r3
 8102cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102cf8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102cfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102d00:	edd7 6a07 	vldr	s13, [r7, #28]
 8102d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102d0c:	ee17 2a90 	vmov	r2, s15
 8102d10:	687b      	ldr	r3, [r7, #4]
 8102d12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8102d14:	4b13      	ldr	r3, [pc, #76]	@ (8102d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102d18:	0e1b      	lsrs	r3, r3, #24
 8102d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102d1e:	ee07 3a90 	vmov	s15, r3
 8102d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102d2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8102d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102d3a:	ee17 2a90 	vmov	r2, s15
 8102d3e:	687b      	ldr	r3, [r7, #4]
 8102d40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8102d42:	e008      	b.n	8102d56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8102d44:	687b      	ldr	r3, [r7, #4]
 8102d46:	2200      	movs	r2, #0
 8102d48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8102d4a:	687b      	ldr	r3, [r7, #4]
 8102d4c:	2200      	movs	r2, #0
 8102d4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	2200      	movs	r2, #0
 8102d54:	609a      	str	r2, [r3, #8]
}
 8102d56:	bf00      	nop
 8102d58:	3724      	adds	r7, #36	@ 0x24
 8102d5a:	46bd      	mov	sp, r7
 8102d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d60:	4770      	bx	lr
 8102d62:	bf00      	nop
 8102d64:	58024400 	.word	0x58024400
 8102d68:	03d09000 	.word	0x03d09000
 8102d6c:	46000000 	.word	0x46000000
 8102d70:	4c742400 	.word	0x4c742400
 8102d74:	4a742400 	.word	0x4a742400
 8102d78:	4bbebc20 	.word	0x4bbebc20

08102d7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8102d7c:	b480      	push	{r7}
 8102d7e:	b089      	sub	sp, #36	@ 0x24
 8102d80:	af00      	add	r7, sp, #0
 8102d82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102d84:	4ba1      	ldr	r3, [pc, #644]	@ (810300c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102d88:	f003 0303 	and.w	r3, r3, #3
 8102d8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8102d8e:	4b9f      	ldr	r3, [pc, #636]	@ (810300c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102d92:	0d1b      	lsrs	r3, r3, #20
 8102d94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102d98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8102d9a:	4b9c      	ldr	r3, [pc, #624]	@ (810300c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102d9e:	0a1b      	lsrs	r3, r3, #8
 8102da0:	f003 0301 	and.w	r3, r3, #1
 8102da4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8102da6:	4b99      	ldr	r3, [pc, #612]	@ (810300c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102daa:	08db      	lsrs	r3, r3, #3
 8102dac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102db0:	693a      	ldr	r2, [r7, #16]
 8102db2:	fb02 f303 	mul.w	r3, r2, r3
 8102db6:	ee07 3a90 	vmov	s15, r3
 8102dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102dbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8102dc2:	697b      	ldr	r3, [r7, #20]
 8102dc4:	2b00      	cmp	r3, #0
 8102dc6:	f000 8111 	beq.w	8102fec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8102dca:	69bb      	ldr	r3, [r7, #24]
 8102dcc:	2b02      	cmp	r3, #2
 8102dce:	f000 8083 	beq.w	8102ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8102dd2:	69bb      	ldr	r3, [r7, #24]
 8102dd4:	2b02      	cmp	r3, #2
 8102dd6:	f200 80a1 	bhi.w	8102f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8102dda:	69bb      	ldr	r3, [r7, #24]
 8102ddc:	2b00      	cmp	r3, #0
 8102dde:	d003      	beq.n	8102de8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8102de0:	69bb      	ldr	r3, [r7, #24]
 8102de2:	2b01      	cmp	r3, #1
 8102de4:	d056      	beq.n	8102e94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8102de6:	e099      	b.n	8102f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102de8:	4b88      	ldr	r3, [pc, #544]	@ (810300c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102dea:	681b      	ldr	r3, [r3, #0]
 8102dec:	f003 0320 	and.w	r3, r3, #32
 8102df0:	2b00      	cmp	r3, #0
 8102df2:	d02d      	beq.n	8102e50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102df4:	4b85      	ldr	r3, [pc, #532]	@ (810300c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102df6:	681b      	ldr	r3, [r3, #0]
 8102df8:	08db      	lsrs	r3, r3, #3
 8102dfa:	f003 0303 	and.w	r3, r3, #3
 8102dfe:	4a84      	ldr	r2, [pc, #528]	@ (8103010 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8102e00:	fa22 f303 	lsr.w	r3, r2, r3
 8102e04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8102e06:	68bb      	ldr	r3, [r7, #8]
 8102e08:	ee07 3a90 	vmov	s15, r3
 8102e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e10:	697b      	ldr	r3, [r7, #20]
 8102e12:	ee07 3a90 	vmov	s15, r3
 8102e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102e1e:	4b7b      	ldr	r3, [pc, #492]	@ (810300c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102e26:	ee07 3a90 	vmov	s15, r3
 8102e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102e32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8103014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8102e4e:	e087      	b.n	8102f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8102e50:	697b      	ldr	r3, [r7, #20]
 8102e52:	ee07 3a90 	vmov	s15, r3
 8102e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8103018 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8102e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102e62:	4b6a      	ldr	r3, [pc, #424]	@ (810300c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102e6a:	ee07 3a90 	vmov	s15, r3
 8102e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8102e76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8103014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102e92:	e065      	b.n	8102f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8102e94:	697b      	ldr	r3, [r7, #20]
 8102e96:	ee07 3a90 	vmov	s15, r3
 8102e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810301c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8102ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102ea6:	4b59      	ldr	r3, [pc, #356]	@ (810300c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102eae:	ee07 3a90 	vmov	s15, r3
 8102eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8102eba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8103014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102ed6:	e043      	b.n	8102f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8102ed8:	697b      	ldr	r3, [r7, #20]
 8102eda:	ee07 3a90 	vmov	s15, r3
 8102ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ee2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8103020 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8102ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102eea:	4b48      	ldr	r3, [pc, #288]	@ (810300c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102ef2:	ee07 3a90 	vmov	s15, r3
 8102ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8102efe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8103014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102f1a:	e021      	b.n	8102f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8102f1c:	697b      	ldr	r3, [r7, #20]
 8102f1e:	ee07 3a90 	vmov	s15, r3
 8102f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102f26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810301c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8102f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102f2e:	4b37      	ldr	r3, [pc, #220]	@ (810300c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102f36:	ee07 3a90 	vmov	s15, r3
 8102f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102f42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8103014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102f5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8102f60:	4b2a      	ldr	r3, [pc, #168]	@ (810300c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102f64:	0a5b      	lsrs	r3, r3, #9
 8102f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102f6a:	ee07 3a90 	vmov	s15, r3
 8102f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102f72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102f76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102f7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8102f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102f86:	ee17 2a90 	vmov	r2, s15
 8102f8a:	687b      	ldr	r3, [r7, #4]
 8102f8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8102f8e:	4b1f      	ldr	r3, [pc, #124]	@ (810300c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102f92:	0c1b      	lsrs	r3, r3, #16
 8102f94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102f98:	ee07 3a90 	vmov	s15, r3
 8102f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102fa0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102fa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102fa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8102fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102fb4:	ee17 2a90 	vmov	r2, s15
 8102fb8:	687b      	ldr	r3, [r7, #4]
 8102fba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8102fbc:	4b13      	ldr	r3, [pc, #76]	@ (810300c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102fc0:	0e1b      	lsrs	r3, r3, #24
 8102fc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102fc6:	ee07 3a90 	vmov	s15, r3
 8102fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102fce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8102fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102fe2:	ee17 2a90 	vmov	r2, s15
 8102fe6:	687b      	ldr	r3, [r7, #4]
 8102fe8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8102fea:	e008      	b.n	8102ffe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	2200      	movs	r2, #0
 8102ff0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8102ff2:	687b      	ldr	r3, [r7, #4]
 8102ff4:	2200      	movs	r2, #0
 8102ff6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8102ff8:	687b      	ldr	r3, [r7, #4]
 8102ffa:	2200      	movs	r2, #0
 8102ffc:	609a      	str	r2, [r3, #8]
}
 8102ffe:	bf00      	nop
 8103000:	3724      	adds	r7, #36	@ 0x24
 8103002:	46bd      	mov	sp, r7
 8103004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103008:	4770      	bx	lr
 810300a:	bf00      	nop
 810300c:	58024400 	.word	0x58024400
 8103010:	03d09000 	.word	0x03d09000
 8103014:	46000000 	.word	0x46000000
 8103018:	4c742400 	.word	0x4c742400
 810301c:	4a742400 	.word	0x4a742400
 8103020:	4bbebc20 	.word	0x4bbebc20

08103024 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103024:	b580      	push	{r7, lr}
 8103026:	b084      	sub	sp, #16
 8103028:	af00      	add	r7, sp, #0
 810302a:	6078      	str	r0, [r7, #4]
 810302c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810302e:	2300      	movs	r3, #0
 8103030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103032:	4b54      	ldr	r3, [pc, #336]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 8103034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103036:	f003 0303 	and.w	r3, r3, #3
 810303a:	2b03      	cmp	r3, #3
 810303c:	d101      	bne.n	8103042 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810303e:	2301      	movs	r3, #1
 8103040:	e09b      	b.n	810317a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8103042:	4b50      	ldr	r3, [pc, #320]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 8103044:	681b      	ldr	r3, [r3, #0]
 8103046:	4a4f      	ldr	r2, [pc, #316]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 8103048:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810304c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810304e:	f7fd fde3 	bl	8100c18 <HAL_GetTick>
 8103052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103054:	e008      	b.n	8103068 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8103056:	f7fd fddf 	bl	8100c18 <HAL_GetTick>
 810305a:	4602      	mov	r2, r0
 810305c:	68bb      	ldr	r3, [r7, #8]
 810305e:	1ad3      	subs	r3, r2, r3
 8103060:	2b02      	cmp	r3, #2
 8103062:	d901      	bls.n	8103068 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103064:	2303      	movs	r3, #3
 8103066:	e088      	b.n	810317a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103068:	4b46      	ldr	r3, [pc, #280]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 810306a:	681b      	ldr	r3, [r3, #0]
 810306c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103070:	2b00      	cmp	r3, #0
 8103072:	d1f0      	bne.n	8103056 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103074:	4b43      	ldr	r3, [pc, #268]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 8103076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103078:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 810307c:	687b      	ldr	r3, [r7, #4]
 810307e:	681b      	ldr	r3, [r3, #0]
 8103080:	031b      	lsls	r3, r3, #12
 8103082:	4940      	ldr	r1, [pc, #256]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 8103084:	4313      	orrs	r3, r2
 8103086:	628b      	str	r3, [r1, #40]	@ 0x28
 8103088:	687b      	ldr	r3, [r7, #4]
 810308a:	685b      	ldr	r3, [r3, #4]
 810308c:	3b01      	subs	r3, #1
 810308e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103092:	687b      	ldr	r3, [r7, #4]
 8103094:	689b      	ldr	r3, [r3, #8]
 8103096:	3b01      	subs	r3, #1
 8103098:	025b      	lsls	r3, r3, #9
 810309a:	b29b      	uxth	r3, r3
 810309c:	431a      	orrs	r2, r3
 810309e:	687b      	ldr	r3, [r7, #4]
 81030a0:	68db      	ldr	r3, [r3, #12]
 81030a2:	3b01      	subs	r3, #1
 81030a4:	041b      	lsls	r3, r3, #16
 81030a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81030aa:	431a      	orrs	r2, r3
 81030ac:	687b      	ldr	r3, [r7, #4]
 81030ae:	691b      	ldr	r3, [r3, #16]
 81030b0:	3b01      	subs	r3, #1
 81030b2:	061b      	lsls	r3, r3, #24
 81030b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81030b8:	4932      	ldr	r1, [pc, #200]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 81030ba:	4313      	orrs	r3, r2
 81030bc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81030be:	4b31      	ldr	r3, [pc, #196]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 81030c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81030c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 81030c6:	687b      	ldr	r3, [r7, #4]
 81030c8:	695b      	ldr	r3, [r3, #20]
 81030ca:	492e      	ldr	r1, [pc, #184]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 81030cc:	4313      	orrs	r3, r2
 81030ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81030d0:	4b2c      	ldr	r3, [pc, #176]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 81030d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81030d4:	f023 0220 	bic.w	r2, r3, #32
 81030d8:	687b      	ldr	r3, [r7, #4]
 81030da:	699b      	ldr	r3, [r3, #24]
 81030dc:	4929      	ldr	r1, [pc, #164]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 81030de:	4313      	orrs	r3, r2
 81030e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81030e2:	4b28      	ldr	r3, [pc, #160]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 81030e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81030e6:	4a27      	ldr	r2, [pc, #156]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 81030e8:	f023 0310 	bic.w	r3, r3, #16
 81030ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81030ee:	4b25      	ldr	r3, [pc, #148]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 81030f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81030f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81030f6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81030fa:	687a      	ldr	r2, [r7, #4]
 81030fc:	69d2      	ldr	r2, [r2, #28]
 81030fe:	00d2      	lsls	r2, r2, #3
 8103100:	4920      	ldr	r1, [pc, #128]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 8103102:	4313      	orrs	r3, r2
 8103104:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8103106:	4b1f      	ldr	r3, [pc, #124]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 8103108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810310a:	4a1e      	ldr	r2, [pc, #120]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 810310c:	f043 0310 	orr.w	r3, r3, #16
 8103110:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8103112:	683b      	ldr	r3, [r7, #0]
 8103114:	2b00      	cmp	r3, #0
 8103116:	d106      	bne.n	8103126 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103118:	4b1a      	ldr	r3, [pc, #104]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 810311a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810311c:	4a19      	ldr	r2, [pc, #100]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 810311e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8103122:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103124:	e00f      	b.n	8103146 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8103126:	683b      	ldr	r3, [r7, #0]
 8103128:	2b01      	cmp	r3, #1
 810312a:	d106      	bne.n	810313a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810312c:	4b15      	ldr	r3, [pc, #84]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 810312e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103130:	4a14      	ldr	r2, [pc, #80]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 8103132:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8103136:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103138:	e005      	b.n	8103146 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810313a:	4b12      	ldr	r3, [pc, #72]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 810313c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810313e:	4a11      	ldr	r2, [pc, #68]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 8103140:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8103144:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103146:	4b0f      	ldr	r3, [pc, #60]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 8103148:	681b      	ldr	r3, [r3, #0]
 810314a:	4a0e      	ldr	r2, [pc, #56]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 810314c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8103150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103152:	f7fd fd61 	bl	8100c18 <HAL_GetTick>
 8103156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103158:	e008      	b.n	810316c <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810315a:	f7fd fd5d 	bl	8100c18 <HAL_GetTick>
 810315e:	4602      	mov	r2, r0
 8103160:	68bb      	ldr	r3, [r7, #8]
 8103162:	1ad3      	subs	r3, r2, r3
 8103164:	2b02      	cmp	r3, #2
 8103166:	d901      	bls.n	810316c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103168:	2303      	movs	r3, #3
 810316a:	e006      	b.n	810317a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810316c:	4b05      	ldr	r3, [pc, #20]	@ (8103184 <RCCEx_PLL2_Config+0x160>)
 810316e:	681b      	ldr	r3, [r3, #0]
 8103170:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103174:	2b00      	cmp	r3, #0
 8103176:	d0f0      	beq.n	810315a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103178:	7bfb      	ldrb	r3, [r7, #15]
}
 810317a:	4618      	mov	r0, r3
 810317c:	3710      	adds	r7, #16
 810317e:	46bd      	mov	sp, r7
 8103180:	bd80      	pop	{r7, pc}
 8103182:	bf00      	nop
 8103184:	58024400 	.word	0x58024400

08103188 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103188:	b580      	push	{r7, lr}
 810318a:	b084      	sub	sp, #16
 810318c:	af00      	add	r7, sp, #0
 810318e:	6078      	str	r0, [r7, #4]
 8103190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103192:	2300      	movs	r3, #0
 8103194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103196:	4b54      	ldr	r3, [pc, #336]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 8103198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810319a:	f003 0303 	and.w	r3, r3, #3
 810319e:	2b03      	cmp	r3, #3
 81031a0:	d101      	bne.n	81031a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81031a2:	2301      	movs	r3, #1
 81031a4:	e09b      	b.n	81032de <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81031a6:	4b50      	ldr	r3, [pc, #320]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 81031a8:	681b      	ldr	r3, [r3, #0]
 81031aa:	4a4f      	ldr	r2, [pc, #316]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 81031ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81031b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81031b2:	f7fd fd31 	bl	8100c18 <HAL_GetTick>
 81031b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81031b8:	e008      	b.n	81031cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81031ba:	f7fd fd2d 	bl	8100c18 <HAL_GetTick>
 81031be:	4602      	mov	r2, r0
 81031c0:	68bb      	ldr	r3, [r7, #8]
 81031c2:	1ad3      	subs	r3, r2, r3
 81031c4:	2b02      	cmp	r3, #2
 81031c6:	d901      	bls.n	81031cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81031c8:	2303      	movs	r3, #3
 81031ca:	e088      	b.n	81032de <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81031cc:	4b46      	ldr	r3, [pc, #280]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 81031ce:	681b      	ldr	r3, [r3, #0]
 81031d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81031d4:	2b00      	cmp	r3, #0
 81031d6:	d1f0      	bne.n	81031ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81031d8:	4b43      	ldr	r3, [pc, #268]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 81031da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81031dc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 81031e0:	687b      	ldr	r3, [r7, #4]
 81031e2:	681b      	ldr	r3, [r3, #0]
 81031e4:	051b      	lsls	r3, r3, #20
 81031e6:	4940      	ldr	r1, [pc, #256]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 81031e8:	4313      	orrs	r3, r2
 81031ea:	628b      	str	r3, [r1, #40]	@ 0x28
 81031ec:	687b      	ldr	r3, [r7, #4]
 81031ee:	685b      	ldr	r3, [r3, #4]
 81031f0:	3b01      	subs	r3, #1
 81031f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81031f6:	687b      	ldr	r3, [r7, #4]
 81031f8:	689b      	ldr	r3, [r3, #8]
 81031fa:	3b01      	subs	r3, #1
 81031fc:	025b      	lsls	r3, r3, #9
 81031fe:	b29b      	uxth	r3, r3
 8103200:	431a      	orrs	r2, r3
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	68db      	ldr	r3, [r3, #12]
 8103206:	3b01      	subs	r3, #1
 8103208:	041b      	lsls	r3, r3, #16
 810320a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810320e:	431a      	orrs	r2, r3
 8103210:	687b      	ldr	r3, [r7, #4]
 8103212:	691b      	ldr	r3, [r3, #16]
 8103214:	3b01      	subs	r3, #1
 8103216:	061b      	lsls	r3, r3, #24
 8103218:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810321c:	4932      	ldr	r1, [pc, #200]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 810321e:	4313      	orrs	r3, r2
 8103220:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8103222:	4b31      	ldr	r3, [pc, #196]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 8103224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103226:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	695b      	ldr	r3, [r3, #20]
 810322e:	492e      	ldr	r1, [pc, #184]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 8103230:	4313      	orrs	r3, r2
 8103232:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103234:	4b2c      	ldr	r3, [pc, #176]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 8103236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103238:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	699b      	ldr	r3, [r3, #24]
 8103240:	4929      	ldr	r1, [pc, #164]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 8103242:	4313      	orrs	r3, r2
 8103244:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103246:	4b28      	ldr	r3, [pc, #160]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 8103248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810324a:	4a27      	ldr	r2, [pc, #156]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 810324c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8103250:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103252:	4b25      	ldr	r3, [pc, #148]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 8103254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103256:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810325a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810325e:	687a      	ldr	r2, [r7, #4]
 8103260:	69d2      	ldr	r2, [r2, #28]
 8103262:	00d2      	lsls	r2, r2, #3
 8103264:	4920      	ldr	r1, [pc, #128]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 8103266:	4313      	orrs	r3, r2
 8103268:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810326a:	4b1f      	ldr	r3, [pc, #124]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 810326c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810326e:	4a1e      	ldr	r2, [pc, #120]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 8103270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103274:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8103276:	683b      	ldr	r3, [r7, #0]
 8103278:	2b00      	cmp	r3, #0
 810327a:	d106      	bne.n	810328a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810327c:	4b1a      	ldr	r3, [pc, #104]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 810327e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103280:	4a19      	ldr	r2, [pc, #100]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 8103282:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8103286:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103288:	e00f      	b.n	81032aa <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810328a:	683b      	ldr	r3, [r7, #0]
 810328c:	2b01      	cmp	r3, #1
 810328e:	d106      	bne.n	810329e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103290:	4b15      	ldr	r3, [pc, #84]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 8103292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103294:	4a14      	ldr	r2, [pc, #80]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 8103296:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810329a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810329c:	e005      	b.n	81032aa <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810329e:	4b12      	ldr	r3, [pc, #72]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 81032a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81032a2:	4a11      	ldr	r2, [pc, #68]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 81032a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81032a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81032aa:	4b0f      	ldr	r3, [pc, #60]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 81032ac:	681b      	ldr	r3, [r3, #0]
 81032ae:	4a0e      	ldr	r2, [pc, #56]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 81032b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81032b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81032b6:	f7fd fcaf 	bl	8100c18 <HAL_GetTick>
 81032ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81032bc:	e008      	b.n	81032d0 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81032be:	f7fd fcab 	bl	8100c18 <HAL_GetTick>
 81032c2:	4602      	mov	r2, r0
 81032c4:	68bb      	ldr	r3, [r7, #8]
 81032c6:	1ad3      	subs	r3, r2, r3
 81032c8:	2b02      	cmp	r3, #2
 81032ca:	d901      	bls.n	81032d0 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81032cc:	2303      	movs	r3, #3
 81032ce:	e006      	b.n	81032de <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81032d0:	4b05      	ldr	r3, [pc, #20]	@ (81032e8 <RCCEx_PLL3_Config+0x160>)
 81032d2:	681b      	ldr	r3, [r3, #0]
 81032d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81032d8:	2b00      	cmp	r3, #0
 81032da:	d0f0      	beq.n	81032be <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81032dc:	7bfb      	ldrb	r3, [r7, #15]
}
 81032de:	4618      	mov	r0, r3
 81032e0:	3710      	adds	r7, #16
 81032e2:	46bd      	mov	sp, r7
 81032e4:	bd80      	pop	{r7, pc}
 81032e6:	bf00      	nop
 81032e8:	58024400 	.word	0x58024400

081032ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81032ec:	b580      	push	{r7, lr}
 81032ee:	b082      	sub	sp, #8
 81032f0:	af00      	add	r7, sp, #0
 81032f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	2b00      	cmp	r3, #0
 81032f8:	d101      	bne.n	81032fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81032fa:	2301      	movs	r3, #1
 81032fc:	e042      	b.n	8103384 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81032fe:	687b      	ldr	r3, [r7, #4]
 8103300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103304:	2b00      	cmp	r3, #0
 8103306:	d106      	bne.n	8103316 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	2200      	movs	r2, #0
 810330c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8103310:	6878      	ldr	r0, [r7, #4]
 8103312:	f7fd facb 	bl	81008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8103316:	687b      	ldr	r3, [r7, #4]
 8103318:	2224      	movs	r2, #36	@ 0x24
 810331a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810331e:	687b      	ldr	r3, [r7, #4]
 8103320:	681b      	ldr	r3, [r3, #0]
 8103322:	681a      	ldr	r2, [r3, #0]
 8103324:	687b      	ldr	r3, [r7, #4]
 8103326:	681b      	ldr	r3, [r3, #0]
 8103328:	f022 0201 	bic.w	r2, r2, #1
 810332c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810332e:	687b      	ldr	r3, [r7, #4]
 8103330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103332:	2b00      	cmp	r3, #0
 8103334:	d002      	beq.n	810333c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8103336:	6878      	ldr	r0, [r7, #4]
 8103338:	f000 fd90 	bl	8103e5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810333c:	6878      	ldr	r0, [r7, #4]
 810333e:	f000 f825 	bl	810338c <UART_SetConfig>
 8103342:	4603      	mov	r3, r0
 8103344:	2b01      	cmp	r3, #1
 8103346:	d101      	bne.n	810334c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8103348:	2301      	movs	r3, #1
 810334a:	e01b      	b.n	8103384 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810334c:	687b      	ldr	r3, [r7, #4]
 810334e:	681b      	ldr	r3, [r3, #0]
 8103350:	685a      	ldr	r2, [r3, #4]
 8103352:	687b      	ldr	r3, [r7, #4]
 8103354:	681b      	ldr	r3, [r3, #0]
 8103356:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810335a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810335c:	687b      	ldr	r3, [r7, #4]
 810335e:	681b      	ldr	r3, [r3, #0]
 8103360:	689a      	ldr	r2, [r3, #8]
 8103362:	687b      	ldr	r3, [r7, #4]
 8103364:	681b      	ldr	r3, [r3, #0]
 8103366:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810336a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810336c:	687b      	ldr	r3, [r7, #4]
 810336e:	681b      	ldr	r3, [r3, #0]
 8103370:	681a      	ldr	r2, [r3, #0]
 8103372:	687b      	ldr	r3, [r7, #4]
 8103374:	681b      	ldr	r3, [r3, #0]
 8103376:	f042 0201 	orr.w	r2, r2, #1
 810337a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810337c:	6878      	ldr	r0, [r7, #4]
 810337e:	f000 fe0f 	bl	8103fa0 <UART_CheckIdleState>
 8103382:	4603      	mov	r3, r0
}
 8103384:	4618      	mov	r0, r3
 8103386:	3708      	adds	r7, #8
 8103388:	46bd      	mov	sp, r7
 810338a:	bd80      	pop	{r7, pc}

0810338c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810338c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8103390:	b092      	sub	sp, #72	@ 0x48
 8103392:	af00      	add	r7, sp, #0
 8103394:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8103396:	2300      	movs	r3, #0
 8103398:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810339c:	697b      	ldr	r3, [r7, #20]
 810339e:	689a      	ldr	r2, [r3, #8]
 81033a0:	697b      	ldr	r3, [r7, #20]
 81033a2:	691b      	ldr	r3, [r3, #16]
 81033a4:	431a      	orrs	r2, r3
 81033a6:	697b      	ldr	r3, [r7, #20]
 81033a8:	695b      	ldr	r3, [r3, #20]
 81033aa:	431a      	orrs	r2, r3
 81033ac:	697b      	ldr	r3, [r7, #20]
 81033ae:	69db      	ldr	r3, [r3, #28]
 81033b0:	4313      	orrs	r3, r2
 81033b2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81033b4:	697b      	ldr	r3, [r7, #20]
 81033b6:	681b      	ldr	r3, [r3, #0]
 81033b8:	681a      	ldr	r2, [r3, #0]
 81033ba:	4bbd      	ldr	r3, [pc, #756]	@ (81036b0 <UART_SetConfig+0x324>)
 81033bc:	4013      	ands	r3, r2
 81033be:	697a      	ldr	r2, [r7, #20]
 81033c0:	6812      	ldr	r2, [r2, #0]
 81033c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 81033c4:	430b      	orrs	r3, r1
 81033c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81033c8:	697b      	ldr	r3, [r7, #20]
 81033ca:	681b      	ldr	r3, [r3, #0]
 81033cc:	685b      	ldr	r3, [r3, #4]
 81033ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81033d2:	697b      	ldr	r3, [r7, #20]
 81033d4:	68da      	ldr	r2, [r3, #12]
 81033d6:	697b      	ldr	r3, [r7, #20]
 81033d8:	681b      	ldr	r3, [r3, #0]
 81033da:	430a      	orrs	r2, r1
 81033dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81033de:	697b      	ldr	r3, [r7, #20]
 81033e0:	699b      	ldr	r3, [r3, #24]
 81033e2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81033e4:	697b      	ldr	r3, [r7, #20]
 81033e6:	681b      	ldr	r3, [r3, #0]
 81033e8:	4ab2      	ldr	r2, [pc, #712]	@ (81036b4 <UART_SetConfig+0x328>)
 81033ea:	4293      	cmp	r3, r2
 81033ec:	d004      	beq.n	81033f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81033ee:	697b      	ldr	r3, [r7, #20]
 81033f0:	6a1b      	ldr	r3, [r3, #32]
 81033f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81033f4:	4313      	orrs	r3, r2
 81033f6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81033f8:	697b      	ldr	r3, [r7, #20]
 81033fa:	681b      	ldr	r3, [r3, #0]
 81033fc:	689b      	ldr	r3, [r3, #8]
 81033fe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8103402:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8103406:	697a      	ldr	r2, [r7, #20]
 8103408:	6812      	ldr	r2, [r2, #0]
 810340a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810340c:	430b      	orrs	r3, r1
 810340e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8103410:	697b      	ldr	r3, [r7, #20]
 8103412:	681b      	ldr	r3, [r3, #0]
 8103414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103416:	f023 010f 	bic.w	r1, r3, #15
 810341a:	697b      	ldr	r3, [r7, #20]
 810341c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810341e:	697b      	ldr	r3, [r7, #20]
 8103420:	681b      	ldr	r3, [r3, #0]
 8103422:	430a      	orrs	r2, r1
 8103424:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8103426:	697b      	ldr	r3, [r7, #20]
 8103428:	681b      	ldr	r3, [r3, #0]
 810342a:	4aa3      	ldr	r2, [pc, #652]	@ (81036b8 <UART_SetConfig+0x32c>)
 810342c:	4293      	cmp	r3, r2
 810342e:	d177      	bne.n	8103520 <UART_SetConfig+0x194>
 8103430:	4ba2      	ldr	r3, [pc, #648]	@ (81036bc <UART_SetConfig+0x330>)
 8103432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103434:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8103438:	2b28      	cmp	r3, #40	@ 0x28
 810343a:	d86d      	bhi.n	8103518 <UART_SetConfig+0x18c>
 810343c:	a201      	add	r2, pc, #4	@ (adr r2, 8103444 <UART_SetConfig+0xb8>)
 810343e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103442:	bf00      	nop
 8103444:	081034e9 	.word	0x081034e9
 8103448:	08103519 	.word	0x08103519
 810344c:	08103519 	.word	0x08103519
 8103450:	08103519 	.word	0x08103519
 8103454:	08103519 	.word	0x08103519
 8103458:	08103519 	.word	0x08103519
 810345c:	08103519 	.word	0x08103519
 8103460:	08103519 	.word	0x08103519
 8103464:	081034f1 	.word	0x081034f1
 8103468:	08103519 	.word	0x08103519
 810346c:	08103519 	.word	0x08103519
 8103470:	08103519 	.word	0x08103519
 8103474:	08103519 	.word	0x08103519
 8103478:	08103519 	.word	0x08103519
 810347c:	08103519 	.word	0x08103519
 8103480:	08103519 	.word	0x08103519
 8103484:	081034f9 	.word	0x081034f9
 8103488:	08103519 	.word	0x08103519
 810348c:	08103519 	.word	0x08103519
 8103490:	08103519 	.word	0x08103519
 8103494:	08103519 	.word	0x08103519
 8103498:	08103519 	.word	0x08103519
 810349c:	08103519 	.word	0x08103519
 81034a0:	08103519 	.word	0x08103519
 81034a4:	08103501 	.word	0x08103501
 81034a8:	08103519 	.word	0x08103519
 81034ac:	08103519 	.word	0x08103519
 81034b0:	08103519 	.word	0x08103519
 81034b4:	08103519 	.word	0x08103519
 81034b8:	08103519 	.word	0x08103519
 81034bc:	08103519 	.word	0x08103519
 81034c0:	08103519 	.word	0x08103519
 81034c4:	08103509 	.word	0x08103509
 81034c8:	08103519 	.word	0x08103519
 81034cc:	08103519 	.word	0x08103519
 81034d0:	08103519 	.word	0x08103519
 81034d4:	08103519 	.word	0x08103519
 81034d8:	08103519 	.word	0x08103519
 81034dc:	08103519 	.word	0x08103519
 81034e0:	08103519 	.word	0x08103519
 81034e4:	08103511 	.word	0x08103511
 81034e8:	2301      	movs	r3, #1
 81034ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81034ee:	e220      	b.n	8103932 <UART_SetConfig+0x5a6>
 81034f0:	2304      	movs	r3, #4
 81034f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81034f6:	e21c      	b.n	8103932 <UART_SetConfig+0x5a6>
 81034f8:	2308      	movs	r3, #8
 81034fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81034fe:	e218      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103500:	2310      	movs	r3, #16
 8103502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103506:	e214      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103508:	2320      	movs	r3, #32
 810350a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810350e:	e210      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103510:	2340      	movs	r3, #64	@ 0x40
 8103512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103516:	e20c      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103518:	2380      	movs	r3, #128	@ 0x80
 810351a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810351e:	e208      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103520:	697b      	ldr	r3, [r7, #20]
 8103522:	681b      	ldr	r3, [r3, #0]
 8103524:	4a66      	ldr	r2, [pc, #408]	@ (81036c0 <UART_SetConfig+0x334>)
 8103526:	4293      	cmp	r3, r2
 8103528:	d130      	bne.n	810358c <UART_SetConfig+0x200>
 810352a:	4b64      	ldr	r3, [pc, #400]	@ (81036bc <UART_SetConfig+0x330>)
 810352c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810352e:	f003 0307 	and.w	r3, r3, #7
 8103532:	2b05      	cmp	r3, #5
 8103534:	d826      	bhi.n	8103584 <UART_SetConfig+0x1f8>
 8103536:	a201      	add	r2, pc, #4	@ (adr r2, 810353c <UART_SetConfig+0x1b0>)
 8103538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810353c:	08103555 	.word	0x08103555
 8103540:	0810355d 	.word	0x0810355d
 8103544:	08103565 	.word	0x08103565
 8103548:	0810356d 	.word	0x0810356d
 810354c:	08103575 	.word	0x08103575
 8103550:	0810357d 	.word	0x0810357d
 8103554:	2300      	movs	r3, #0
 8103556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810355a:	e1ea      	b.n	8103932 <UART_SetConfig+0x5a6>
 810355c:	2304      	movs	r3, #4
 810355e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103562:	e1e6      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103564:	2308      	movs	r3, #8
 8103566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810356a:	e1e2      	b.n	8103932 <UART_SetConfig+0x5a6>
 810356c:	2310      	movs	r3, #16
 810356e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103572:	e1de      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103574:	2320      	movs	r3, #32
 8103576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810357a:	e1da      	b.n	8103932 <UART_SetConfig+0x5a6>
 810357c:	2340      	movs	r3, #64	@ 0x40
 810357e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103582:	e1d6      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103584:	2380      	movs	r3, #128	@ 0x80
 8103586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810358a:	e1d2      	b.n	8103932 <UART_SetConfig+0x5a6>
 810358c:	697b      	ldr	r3, [r7, #20]
 810358e:	681b      	ldr	r3, [r3, #0]
 8103590:	4a4c      	ldr	r2, [pc, #304]	@ (81036c4 <UART_SetConfig+0x338>)
 8103592:	4293      	cmp	r3, r2
 8103594:	d130      	bne.n	81035f8 <UART_SetConfig+0x26c>
 8103596:	4b49      	ldr	r3, [pc, #292]	@ (81036bc <UART_SetConfig+0x330>)
 8103598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810359a:	f003 0307 	and.w	r3, r3, #7
 810359e:	2b05      	cmp	r3, #5
 81035a0:	d826      	bhi.n	81035f0 <UART_SetConfig+0x264>
 81035a2:	a201      	add	r2, pc, #4	@ (adr r2, 81035a8 <UART_SetConfig+0x21c>)
 81035a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81035a8:	081035c1 	.word	0x081035c1
 81035ac:	081035c9 	.word	0x081035c9
 81035b0:	081035d1 	.word	0x081035d1
 81035b4:	081035d9 	.word	0x081035d9
 81035b8:	081035e1 	.word	0x081035e1
 81035bc:	081035e9 	.word	0x081035e9
 81035c0:	2300      	movs	r3, #0
 81035c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81035c6:	e1b4      	b.n	8103932 <UART_SetConfig+0x5a6>
 81035c8:	2304      	movs	r3, #4
 81035ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81035ce:	e1b0      	b.n	8103932 <UART_SetConfig+0x5a6>
 81035d0:	2308      	movs	r3, #8
 81035d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81035d6:	e1ac      	b.n	8103932 <UART_SetConfig+0x5a6>
 81035d8:	2310      	movs	r3, #16
 81035da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81035de:	e1a8      	b.n	8103932 <UART_SetConfig+0x5a6>
 81035e0:	2320      	movs	r3, #32
 81035e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81035e6:	e1a4      	b.n	8103932 <UART_SetConfig+0x5a6>
 81035e8:	2340      	movs	r3, #64	@ 0x40
 81035ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81035ee:	e1a0      	b.n	8103932 <UART_SetConfig+0x5a6>
 81035f0:	2380      	movs	r3, #128	@ 0x80
 81035f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81035f6:	e19c      	b.n	8103932 <UART_SetConfig+0x5a6>
 81035f8:	697b      	ldr	r3, [r7, #20]
 81035fa:	681b      	ldr	r3, [r3, #0]
 81035fc:	4a32      	ldr	r2, [pc, #200]	@ (81036c8 <UART_SetConfig+0x33c>)
 81035fe:	4293      	cmp	r3, r2
 8103600:	d130      	bne.n	8103664 <UART_SetConfig+0x2d8>
 8103602:	4b2e      	ldr	r3, [pc, #184]	@ (81036bc <UART_SetConfig+0x330>)
 8103604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103606:	f003 0307 	and.w	r3, r3, #7
 810360a:	2b05      	cmp	r3, #5
 810360c:	d826      	bhi.n	810365c <UART_SetConfig+0x2d0>
 810360e:	a201      	add	r2, pc, #4	@ (adr r2, 8103614 <UART_SetConfig+0x288>)
 8103610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103614:	0810362d 	.word	0x0810362d
 8103618:	08103635 	.word	0x08103635
 810361c:	0810363d 	.word	0x0810363d
 8103620:	08103645 	.word	0x08103645
 8103624:	0810364d 	.word	0x0810364d
 8103628:	08103655 	.word	0x08103655
 810362c:	2300      	movs	r3, #0
 810362e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103632:	e17e      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103634:	2304      	movs	r3, #4
 8103636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810363a:	e17a      	b.n	8103932 <UART_SetConfig+0x5a6>
 810363c:	2308      	movs	r3, #8
 810363e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103642:	e176      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103644:	2310      	movs	r3, #16
 8103646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810364a:	e172      	b.n	8103932 <UART_SetConfig+0x5a6>
 810364c:	2320      	movs	r3, #32
 810364e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103652:	e16e      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103654:	2340      	movs	r3, #64	@ 0x40
 8103656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810365a:	e16a      	b.n	8103932 <UART_SetConfig+0x5a6>
 810365c:	2380      	movs	r3, #128	@ 0x80
 810365e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103662:	e166      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103664:	697b      	ldr	r3, [r7, #20]
 8103666:	681b      	ldr	r3, [r3, #0]
 8103668:	4a18      	ldr	r2, [pc, #96]	@ (81036cc <UART_SetConfig+0x340>)
 810366a:	4293      	cmp	r3, r2
 810366c:	d140      	bne.n	81036f0 <UART_SetConfig+0x364>
 810366e:	4b13      	ldr	r3, [pc, #76]	@ (81036bc <UART_SetConfig+0x330>)
 8103670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103672:	f003 0307 	and.w	r3, r3, #7
 8103676:	2b05      	cmp	r3, #5
 8103678:	d836      	bhi.n	81036e8 <UART_SetConfig+0x35c>
 810367a:	a201      	add	r2, pc, #4	@ (adr r2, 8103680 <UART_SetConfig+0x2f4>)
 810367c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103680:	08103699 	.word	0x08103699
 8103684:	081036a1 	.word	0x081036a1
 8103688:	081036a9 	.word	0x081036a9
 810368c:	081036d1 	.word	0x081036d1
 8103690:	081036d9 	.word	0x081036d9
 8103694:	081036e1 	.word	0x081036e1
 8103698:	2300      	movs	r3, #0
 810369a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810369e:	e148      	b.n	8103932 <UART_SetConfig+0x5a6>
 81036a0:	2304      	movs	r3, #4
 81036a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036a6:	e144      	b.n	8103932 <UART_SetConfig+0x5a6>
 81036a8:	2308      	movs	r3, #8
 81036aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036ae:	e140      	b.n	8103932 <UART_SetConfig+0x5a6>
 81036b0:	cfff69f3 	.word	0xcfff69f3
 81036b4:	58000c00 	.word	0x58000c00
 81036b8:	40011000 	.word	0x40011000
 81036bc:	58024400 	.word	0x58024400
 81036c0:	40004400 	.word	0x40004400
 81036c4:	40004800 	.word	0x40004800
 81036c8:	40004c00 	.word	0x40004c00
 81036cc:	40005000 	.word	0x40005000
 81036d0:	2310      	movs	r3, #16
 81036d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036d6:	e12c      	b.n	8103932 <UART_SetConfig+0x5a6>
 81036d8:	2320      	movs	r3, #32
 81036da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036de:	e128      	b.n	8103932 <UART_SetConfig+0x5a6>
 81036e0:	2340      	movs	r3, #64	@ 0x40
 81036e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036e6:	e124      	b.n	8103932 <UART_SetConfig+0x5a6>
 81036e8:	2380      	movs	r3, #128	@ 0x80
 81036ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036ee:	e120      	b.n	8103932 <UART_SetConfig+0x5a6>
 81036f0:	697b      	ldr	r3, [r7, #20]
 81036f2:	681b      	ldr	r3, [r3, #0]
 81036f4:	4acb      	ldr	r2, [pc, #812]	@ (8103a24 <UART_SetConfig+0x698>)
 81036f6:	4293      	cmp	r3, r2
 81036f8:	d176      	bne.n	81037e8 <UART_SetConfig+0x45c>
 81036fa:	4bcb      	ldr	r3, [pc, #812]	@ (8103a28 <UART_SetConfig+0x69c>)
 81036fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81036fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8103702:	2b28      	cmp	r3, #40	@ 0x28
 8103704:	d86c      	bhi.n	81037e0 <UART_SetConfig+0x454>
 8103706:	a201      	add	r2, pc, #4	@ (adr r2, 810370c <UART_SetConfig+0x380>)
 8103708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810370c:	081037b1 	.word	0x081037b1
 8103710:	081037e1 	.word	0x081037e1
 8103714:	081037e1 	.word	0x081037e1
 8103718:	081037e1 	.word	0x081037e1
 810371c:	081037e1 	.word	0x081037e1
 8103720:	081037e1 	.word	0x081037e1
 8103724:	081037e1 	.word	0x081037e1
 8103728:	081037e1 	.word	0x081037e1
 810372c:	081037b9 	.word	0x081037b9
 8103730:	081037e1 	.word	0x081037e1
 8103734:	081037e1 	.word	0x081037e1
 8103738:	081037e1 	.word	0x081037e1
 810373c:	081037e1 	.word	0x081037e1
 8103740:	081037e1 	.word	0x081037e1
 8103744:	081037e1 	.word	0x081037e1
 8103748:	081037e1 	.word	0x081037e1
 810374c:	081037c1 	.word	0x081037c1
 8103750:	081037e1 	.word	0x081037e1
 8103754:	081037e1 	.word	0x081037e1
 8103758:	081037e1 	.word	0x081037e1
 810375c:	081037e1 	.word	0x081037e1
 8103760:	081037e1 	.word	0x081037e1
 8103764:	081037e1 	.word	0x081037e1
 8103768:	081037e1 	.word	0x081037e1
 810376c:	081037c9 	.word	0x081037c9
 8103770:	081037e1 	.word	0x081037e1
 8103774:	081037e1 	.word	0x081037e1
 8103778:	081037e1 	.word	0x081037e1
 810377c:	081037e1 	.word	0x081037e1
 8103780:	081037e1 	.word	0x081037e1
 8103784:	081037e1 	.word	0x081037e1
 8103788:	081037e1 	.word	0x081037e1
 810378c:	081037d1 	.word	0x081037d1
 8103790:	081037e1 	.word	0x081037e1
 8103794:	081037e1 	.word	0x081037e1
 8103798:	081037e1 	.word	0x081037e1
 810379c:	081037e1 	.word	0x081037e1
 81037a0:	081037e1 	.word	0x081037e1
 81037a4:	081037e1 	.word	0x081037e1
 81037a8:	081037e1 	.word	0x081037e1
 81037ac:	081037d9 	.word	0x081037d9
 81037b0:	2301      	movs	r3, #1
 81037b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037b6:	e0bc      	b.n	8103932 <UART_SetConfig+0x5a6>
 81037b8:	2304      	movs	r3, #4
 81037ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037be:	e0b8      	b.n	8103932 <UART_SetConfig+0x5a6>
 81037c0:	2308      	movs	r3, #8
 81037c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037c6:	e0b4      	b.n	8103932 <UART_SetConfig+0x5a6>
 81037c8:	2310      	movs	r3, #16
 81037ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037ce:	e0b0      	b.n	8103932 <UART_SetConfig+0x5a6>
 81037d0:	2320      	movs	r3, #32
 81037d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037d6:	e0ac      	b.n	8103932 <UART_SetConfig+0x5a6>
 81037d8:	2340      	movs	r3, #64	@ 0x40
 81037da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037de:	e0a8      	b.n	8103932 <UART_SetConfig+0x5a6>
 81037e0:	2380      	movs	r3, #128	@ 0x80
 81037e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037e6:	e0a4      	b.n	8103932 <UART_SetConfig+0x5a6>
 81037e8:	697b      	ldr	r3, [r7, #20]
 81037ea:	681b      	ldr	r3, [r3, #0]
 81037ec:	4a8f      	ldr	r2, [pc, #572]	@ (8103a2c <UART_SetConfig+0x6a0>)
 81037ee:	4293      	cmp	r3, r2
 81037f0:	d130      	bne.n	8103854 <UART_SetConfig+0x4c8>
 81037f2:	4b8d      	ldr	r3, [pc, #564]	@ (8103a28 <UART_SetConfig+0x69c>)
 81037f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81037f6:	f003 0307 	and.w	r3, r3, #7
 81037fa:	2b05      	cmp	r3, #5
 81037fc:	d826      	bhi.n	810384c <UART_SetConfig+0x4c0>
 81037fe:	a201      	add	r2, pc, #4	@ (adr r2, 8103804 <UART_SetConfig+0x478>)
 8103800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103804:	0810381d 	.word	0x0810381d
 8103808:	08103825 	.word	0x08103825
 810380c:	0810382d 	.word	0x0810382d
 8103810:	08103835 	.word	0x08103835
 8103814:	0810383d 	.word	0x0810383d
 8103818:	08103845 	.word	0x08103845
 810381c:	2300      	movs	r3, #0
 810381e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103822:	e086      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103824:	2304      	movs	r3, #4
 8103826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810382a:	e082      	b.n	8103932 <UART_SetConfig+0x5a6>
 810382c:	2308      	movs	r3, #8
 810382e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103832:	e07e      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103834:	2310      	movs	r3, #16
 8103836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810383a:	e07a      	b.n	8103932 <UART_SetConfig+0x5a6>
 810383c:	2320      	movs	r3, #32
 810383e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103842:	e076      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103844:	2340      	movs	r3, #64	@ 0x40
 8103846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810384a:	e072      	b.n	8103932 <UART_SetConfig+0x5a6>
 810384c:	2380      	movs	r3, #128	@ 0x80
 810384e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103852:	e06e      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103854:	697b      	ldr	r3, [r7, #20]
 8103856:	681b      	ldr	r3, [r3, #0]
 8103858:	4a75      	ldr	r2, [pc, #468]	@ (8103a30 <UART_SetConfig+0x6a4>)
 810385a:	4293      	cmp	r3, r2
 810385c:	d130      	bne.n	81038c0 <UART_SetConfig+0x534>
 810385e:	4b72      	ldr	r3, [pc, #456]	@ (8103a28 <UART_SetConfig+0x69c>)
 8103860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103862:	f003 0307 	and.w	r3, r3, #7
 8103866:	2b05      	cmp	r3, #5
 8103868:	d826      	bhi.n	81038b8 <UART_SetConfig+0x52c>
 810386a:	a201      	add	r2, pc, #4	@ (adr r2, 8103870 <UART_SetConfig+0x4e4>)
 810386c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103870:	08103889 	.word	0x08103889
 8103874:	08103891 	.word	0x08103891
 8103878:	08103899 	.word	0x08103899
 810387c:	081038a1 	.word	0x081038a1
 8103880:	081038a9 	.word	0x081038a9
 8103884:	081038b1 	.word	0x081038b1
 8103888:	2300      	movs	r3, #0
 810388a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810388e:	e050      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103890:	2304      	movs	r3, #4
 8103892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103896:	e04c      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103898:	2308      	movs	r3, #8
 810389a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810389e:	e048      	b.n	8103932 <UART_SetConfig+0x5a6>
 81038a0:	2310      	movs	r3, #16
 81038a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81038a6:	e044      	b.n	8103932 <UART_SetConfig+0x5a6>
 81038a8:	2320      	movs	r3, #32
 81038aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81038ae:	e040      	b.n	8103932 <UART_SetConfig+0x5a6>
 81038b0:	2340      	movs	r3, #64	@ 0x40
 81038b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81038b6:	e03c      	b.n	8103932 <UART_SetConfig+0x5a6>
 81038b8:	2380      	movs	r3, #128	@ 0x80
 81038ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81038be:	e038      	b.n	8103932 <UART_SetConfig+0x5a6>
 81038c0:	697b      	ldr	r3, [r7, #20]
 81038c2:	681b      	ldr	r3, [r3, #0]
 81038c4:	4a5b      	ldr	r2, [pc, #364]	@ (8103a34 <UART_SetConfig+0x6a8>)
 81038c6:	4293      	cmp	r3, r2
 81038c8:	d130      	bne.n	810392c <UART_SetConfig+0x5a0>
 81038ca:	4b57      	ldr	r3, [pc, #348]	@ (8103a28 <UART_SetConfig+0x69c>)
 81038cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81038ce:	f003 0307 	and.w	r3, r3, #7
 81038d2:	2b05      	cmp	r3, #5
 81038d4:	d826      	bhi.n	8103924 <UART_SetConfig+0x598>
 81038d6:	a201      	add	r2, pc, #4	@ (adr r2, 81038dc <UART_SetConfig+0x550>)
 81038d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81038dc:	081038f5 	.word	0x081038f5
 81038e0:	081038fd 	.word	0x081038fd
 81038e4:	08103905 	.word	0x08103905
 81038e8:	0810390d 	.word	0x0810390d
 81038ec:	08103915 	.word	0x08103915
 81038f0:	0810391d 	.word	0x0810391d
 81038f4:	2302      	movs	r3, #2
 81038f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81038fa:	e01a      	b.n	8103932 <UART_SetConfig+0x5a6>
 81038fc:	2304      	movs	r3, #4
 81038fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103902:	e016      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103904:	2308      	movs	r3, #8
 8103906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810390a:	e012      	b.n	8103932 <UART_SetConfig+0x5a6>
 810390c:	2310      	movs	r3, #16
 810390e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103912:	e00e      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103914:	2320      	movs	r3, #32
 8103916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810391a:	e00a      	b.n	8103932 <UART_SetConfig+0x5a6>
 810391c:	2340      	movs	r3, #64	@ 0x40
 810391e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103922:	e006      	b.n	8103932 <UART_SetConfig+0x5a6>
 8103924:	2380      	movs	r3, #128	@ 0x80
 8103926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810392a:	e002      	b.n	8103932 <UART_SetConfig+0x5a6>
 810392c:	2380      	movs	r3, #128	@ 0x80
 810392e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8103932:	697b      	ldr	r3, [r7, #20]
 8103934:	681b      	ldr	r3, [r3, #0]
 8103936:	4a3f      	ldr	r2, [pc, #252]	@ (8103a34 <UART_SetConfig+0x6a8>)
 8103938:	4293      	cmp	r3, r2
 810393a:	f040 80f8 	bne.w	8103b2e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810393e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8103942:	2b20      	cmp	r3, #32
 8103944:	dc46      	bgt.n	81039d4 <UART_SetConfig+0x648>
 8103946:	2b02      	cmp	r3, #2
 8103948:	f2c0 8082 	blt.w	8103a50 <UART_SetConfig+0x6c4>
 810394c:	3b02      	subs	r3, #2
 810394e:	2b1e      	cmp	r3, #30
 8103950:	d87e      	bhi.n	8103a50 <UART_SetConfig+0x6c4>
 8103952:	a201      	add	r2, pc, #4	@ (adr r2, 8103958 <UART_SetConfig+0x5cc>)
 8103954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103958:	081039db 	.word	0x081039db
 810395c:	08103a51 	.word	0x08103a51
 8103960:	081039e3 	.word	0x081039e3
 8103964:	08103a51 	.word	0x08103a51
 8103968:	08103a51 	.word	0x08103a51
 810396c:	08103a51 	.word	0x08103a51
 8103970:	081039f3 	.word	0x081039f3
 8103974:	08103a51 	.word	0x08103a51
 8103978:	08103a51 	.word	0x08103a51
 810397c:	08103a51 	.word	0x08103a51
 8103980:	08103a51 	.word	0x08103a51
 8103984:	08103a51 	.word	0x08103a51
 8103988:	08103a51 	.word	0x08103a51
 810398c:	08103a51 	.word	0x08103a51
 8103990:	08103a03 	.word	0x08103a03
 8103994:	08103a51 	.word	0x08103a51
 8103998:	08103a51 	.word	0x08103a51
 810399c:	08103a51 	.word	0x08103a51
 81039a0:	08103a51 	.word	0x08103a51
 81039a4:	08103a51 	.word	0x08103a51
 81039a8:	08103a51 	.word	0x08103a51
 81039ac:	08103a51 	.word	0x08103a51
 81039b0:	08103a51 	.word	0x08103a51
 81039b4:	08103a51 	.word	0x08103a51
 81039b8:	08103a51 	.word	0x08103a51
 81039bc:	08103a51 	.word	0x08103a51
 81039c0:	08103a51 	.word	0x08103a51
 81039c4:	08103a51 	.word	0x08103a51
 81039c8:	08103a51 	.word	0x08103a51
 81039cc:	08103a51 	.word	0x08103a51
 81039d0:	08103a43 	.word	0x08103a43
 81039d4:	2b40      	cmp	r3, #64	@ 0x40
 81039d6:	d037      	beq.n	8103a48 <UART_SetConfig+0x6bc>
 81039d8:	e03a      	b.n	8103a50 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81039da:	f7ff f865 	bl	8102aa8 <HAL_RCCEx_GetD3PCLK1Freq>
 81039de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81039e0:	e03c      	b.n	8103a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81039e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81039e6:	4618      	mov	r0, r3
 81039e8:	f7ff f874 	bl	8102ad4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81039ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81039ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81039f0:	e034      	b.n	8103a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81039f2:	f107 0318 	add.w	r3, r7, #24
 81039f6:	4618      	mov	r0, r3
 81039f8:	f7ff f9c0 	bl	8102d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81039fc:	69fb      	ldr	r3, [r7, #28]
 81039fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103a00:	e02c      	b.n	8103a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103a02:	4b09      	ldr	r3, [pc, #36]	@ (8103a28 <UART_SetConfig+0x69c>)
 8103a04:	681b      	ldr	r3, [r3, #0]
 8103a06:	f003 0320 	and.w	r3, r3, #32
 8103a0a:	2b00      	cmp	r3, #0
 8103a0c:	d016      	beq.n	8103a3c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103a0e:	4b06      	ldr	r3, [pc, #24]	@ (8103a28 <UART_SetConfig+0x69c>)
 8103a10:	681b      	ldr	r3, [r3, #0]
 8103a12:	08db      	lsrs	r3, r3, #3
 8103a14:	f003 0303 	and.w	r3, r3, #3
 8103a18:	4a07      	ldr	r2, [pc, #28]	@ (8103a38 <UART_SetConfig+0x6ac>)
 8103a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8103a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103a20:	e01c      	b.n	8103a5c <UART_SetConfig+0x6d0>
 8103a22:	bf00      	nop
 8103a24:	40011400 	.word	0x40011400
 8103a28:	58024400 	.word	0x58024400
 8103a2c:	40007800 	.word	0x40007800
 8103a30:	40007c00 	.word	0x40007c00
 8103a34:	58000c00 	.word	0x58000c00
 8103a38:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8103a3c:	4b9d      	ldr	r3, [pc, #628]	@ (8103cb4 <UART_SetConfig+0x928>)
 8103a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103a40:	e00c      	b.n	8103a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8103a42:	4b9d      	ldr	r3, [pc, #628]	@ (8103cb8 <UART_SetConfig+0x92c>)
 8103a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103a46:	e009      	b.n	8103a5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103a48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8103a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103a4e:	e005      	b.n	8103a5c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8103a50:	2300      	movs	r3, #0
 8103a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8103a54:	2301      	movs	r3, #1
 8103a56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8103a5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8103a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103a5e:	2b00      	cmp	r3, #0
 8103a60:	f000 81de 	beq.w	8103e20 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8103a64:	697b      	ldr	r3, [r7, #20]
 8103a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103a68:	4a94      	ldr	r2, [pc, #592]	@ (8103cbc <UART_SetConfig+0x930>)
 8103a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103a6e:	461a      	mov	r2, r3
 8103a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103a72:	fbb3 f3f2 	udiv	r3, r3, r2
 8103a76:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103a78:	697b      	ldr	r3, [r7, #20]
 8103a7a:	685a      	ldr	r2, [r3, #4]
 8103a7c:	4613      	mov	r3, r2
 8103a7e:	005b      	lsls	r3, r3, #1
 8103a80:	4413      	add	r3, r2
 8103a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8103a84:	429a      	cmp	r2, r3
 8103a86:	d305      	bcc.n	8103a94 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8103a88:	697b      	ldr	r3, [r7, #20]
 8103a8a:	685b      	ldr	r3, [r3, #4]
 8103a8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8103a90:	429a      	cmp	r2, r3
 8103a92:	d903      	bls.n	8103a9c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8103a94:	2301      	movs	r3, #1
 8103a96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8103a9a:	e1c1      	b.n	8103e20 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103a9e:	2200      	movs	r2, #0
 8103aa0:	60bb      	str	r3, [r7, #8]
 8103aa2:	60fa      	str	r2, [r7, #12]
 8103aa4:	697b      	ldr	r3, [r7, #20]
 8103aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103aa8:	4a84      	ldr	r2, [pc, #528]	@ (8103cbc <UART_SetConfig+0x930>)
 8103aaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103aae:	b29b      	uxth	r3, r3
 8103ab0:	2200      	movs	r2, #0
 8103ab2:	603b      	str	r3, [r7, #0]
 8103ab4:	607a      	str	r2, [r7, #4]
 8103ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103aba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8103abe:	f7fc fc0f 	bl	81002e0 <__aeabi_uldivmod>
 8103ac2:	4602      	mov	r2, r0
 8103ac4:	460b      	mov	r3, r1
 8103ac6:	4610      	mov	r0, r2
 8103ac8:	4619      	mov	r1, r3
 8103aca:	f04f 0200 	mov.w	r2, #0
 8103ace:	f04f 0300 	mov.w	r3, #0
 8103ad2:	020b      	lsls	r3, r1, #8
 8103ad4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8103ad8:	0202      	lsls	r2, r0, #8
 8103ada:	6979      	ldr	r1, [r7, #20]
 8103adc:	6849      	ldr	r1, [r1, #4]
 8103ade:	0849      	lsrs	r1, r1, #1
 8103ae0:	2000      	movs	r0, #0
 8103ae2:	460c      	mov	r4, r1
 8103ae4:	4605      	mov	r5, r0
 8103ae6:	eb12 0804 	adds.w	r8, r2, r4
 8103aea:	eb43 0905 	adc.w	r9, r3, r5
 8103aee:	697b      	ldr	r3, [r7, #20]
 8103af0:	685b      	ldr	r3, [r3, #4]
 8103af2:	2200      	movs	r2, #0
 8103af4:	469a      	mov	sl, r3
 8103af6:	4693      	mov	fp, r2
 8103af8:	4652      	mov	r2, sl
 8103afa:	465b      	mov	r3, fp
 8103afc:	4640      	mov	r0, r8
 8103afe:	4649      	mov	r1, r9
 8103b00:	f7fc fbee 	bl	81002e0 <__aeabi_uldivmod>
 8103b04:	4602      	mov	r2, r0
 8103b06:	460b      	mov	r3, r1
 8103b08:	4613      	mov	r3, r2
 8103b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8103b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103b12:	d308      	bcc.n	8103b26 <UART_SetConfig+0x79a>
 8103b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103b1a:	d204      	bcs.n	8103b26 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8103b1c:	697b      	ldr	r3, [r7, #20]
 8103b1e:	681b      	ldr	r3, [r3, #0]
 8103b20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8103b22:	60da      	str	r2, [r3, #12]
 8103b24:	e17c      	b.n	8103e20 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8103b26:	2301      	movs	r3, #1
 8103b28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8103b2c:	e178      	b.n	8103e20 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8103b2e:	697b      	ldr	r3, [r7, #20]
 8103b30:	69db      	ldr	r3, [r3, #28]
 8103b32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103b36:	f040 80c5 	bne.w	8103cc4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8103b3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8103b3e:	2b20      	cmp	r3, #32
 8103b40:	dc48      	bgt.n	8103bd4 <UART_SetConfig+0x848>
 8103b42:	2b00      	cmp	r3, #0
 8103b44:	db7b      	blt.n	8103c3e <UART_SetConfig+0x8b2>
 8103b46:	2b20      	cmp	r3, #32
 8103b48:	d879      	bhi.n	8103c3e <UART_SetConfig+0x8b2>
 8103b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8103b50 <UART_SetConfig+0x7c4>)
 8103b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b50:	08103bdb 	.word	0x08103bdb
 8103b54:	08103be3 	.word	0x08103be3
 8103b58:	08103c3f 	.word	0x08103c3f
 8103b5c:	08103c3f 	.word	0x08103c3f
 8103b60:	08103beb 	.word	0x08103beb
 8103b64:	08103c3f 	.word	0x08103c3f
 8103b68:	08103c3f 	.word	0x08103c3f
 8103b6c:	08103c3f 	.word	0x08103c3f
 8103b70:	08103bfb 	.word	0x08103bfb
 8103b74:	08103c3f 	.word	0x08103c3f
 8103b78:	08103c3f 	.word	0x08103c3f
 8103b7c:	08103c3f 	.word	0x08103c3f
 8103b80:	08103c3f 	.word	0x08103c3f
 8103b84:	08103c3f 	.word	0x08103c3f
 8103b88:	08103c3f 	.word	0x08103c3f
 8103b8c:	08103c3f 	.word	0x08103c3f
 8103b90:	08103c0b 	.word	0x08103c0b
 8103b94:	08103c3f 	.word	0x08103c3f
 8103b98:	08103c3f 	.word	0x08103c3f
 8103b9c:	08103c3f 	.word	0x08103c3f
 8103ba0:	08103c3f 	.word	0x08103c3f
 8103ba4:	08103c3f 	.word	0x08103c3f
 8103ba8:	08103c3f 	.word	0x08103c3f
 8103bac:	08103c3f 	.word	0x08103c3f
 8103bb0:	08103c3f 	.word	0x08103c3f
 8103bb4:	08103c3f 	.word	0x08103c3f
 8103bb8:	08103c3f 	.word	0x08103c3f
 8103bbc:	08103c3f 	.word	0x08103c3f
 8103bc0:	08103c3f 	.word	0x08103c3f
 8103bc4:	08103c3f 	.word	0x08103c3f
 8103bc8:	08103c3f 	.word	0x08103c3f
 8103bcc:	08103c3f 	.word	0x08103c3f
 8103bd0:	08103c31 	.word	0x08103c31
 8103bd4:	2b40      	cmp	r3, #64	@ 0x40
 8103bd6:	d02e      	beq.n	8103c36 <UART_SetConfig+0x8aa>
 8103bd8:	e031      	b.n	8103c3e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8103bda:	f7fd fd2f 	bl	810163c <HAL_RCC_GetPCLK1Freq>
 8103bde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103be0:	e033      	b.n	8103c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8103be2:	f7fd fd41 	bl	8101668 <HAL_RCC_GetPCLK2Freq>
 8103be6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103be8:	e02f      	b.n	8103c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103bee:	4618      	mov	r0, r3
 8103bf0:	f7fe ff70 	bl	8102ad4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103bf8:	e027      	b.n	8103c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103bfa:	f107 0318 	add.w	r3, r7, #24
 8103bfe:	4618      	mov	r0, r3
 8103c00:	f7ff f8bc 	bl	8102d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103c04:	69fb      	ldr	r3, [r7, #28]
 8103c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c08:	e01f      	b.n	8103c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8103cc0 <UART_SetConfig+0x934>)
 8103c0c:	681b      	ldr	r3, [r3, #0]
 8103c0e:	f003 0320 	and.w	r3, r3, #32
 8103c12:	2b00      	cmp	r3, #0
 8103c14:	d009      	beq.n	8103c2a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103c16:	4b2a      	ldr	r3, [pc, #168]	@ (8103cc0 <UART_SetConfig+0x934>)
 8103c18:	681b      	ldr	r3, [r3, #0]
 8103c1a:	08db      	lsrs	r3, r3, #3
 8103c1c:	f003 0303 	and.w	r3, r3, #3
 8103c20:	4a24      	ldr	r2, [pc, #144]	@ (8103cb4 <UART_SetConfig+0x928>)
 8103c22:	fa22 f303 	lsr.w	r3, r2, r3
 8103c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103c28:	e00f      	b.n	8103c4a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8103c2a:	4b22      	ldr	r3, [pc, #136]	@ (8103cb4 <UART_SetConfig+0x928>)
 8103c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c2e:	e00c      	b.n	8103c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8103c30:	4b21      	ldr	r3, [pc, #132]	@ (8103cb8 <UART_SetConfig+0x92c>)
 8103c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c34:	e009      	b.n	8103c4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8103c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c3c:	e005      	b.n	8103c4a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8103c3e:	2300      	movs	r3, #0
 8103c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8103c42:	2301      	movs	r3, #1
 8103c44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8103c48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8103c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103c4c:	2b00      	cmp	r3, #0
 8103c4e:	f000 80e7 	beq.w	8103e20 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103c52:	697b      	ldr	r3, [r7, #20]
 8103c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103c56:	4a19      	ldr	r2, [pc, #100]	@ (8103cbc <UART_SetConfig+0x930>)
 8103c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103c5c:	461a      	mov	r2, r3
 8103c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8103c64:	005a      	lsls	r2, r3, #1
 8103c66:	697b      	ldr	r3, [r7, #20]
 8103c68:	685b      	ldr	r3, [r3, #4]
 8103c6a:	085b      	lsrs	r3, r3, #1
 8103c6c:	441a      	add	r2, r3
 8103c6e:	697b      	ldr	r3, [r7, #20]
 8103c70:	685b      	ldr	r3, [r3, #4]
 8103c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8103c76:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8103c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103c7a:	2b0f      	cmp	r3, #15
 8103c7c:	d916      	bls.n	8103cac <UART_SetConfig+0x920>
 8103c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103c84:	d212      	bcs.n	8103cac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8103c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103c88:	b29b      	uxth	r3, r3
 8103c8a:	f023 030f 	bic.w	r3, r3, #15
 8103c8e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8103c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103c92:	085b      	lsrs	r3, r3, #1
 8103c94:	b29b      	uxth	r3, r3
 8103c96:	f003 0307 	and.w	r3, r3, #7
 8103c9a:	b29a      	uxth	r2, r3
 8103c9c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8103c9e:	4313      	orrs	r3, r2
 8103ca0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8103ca2:	697b      	ldr	r3, [r7, #20]
 8103ca4:	681b      	ldr	r3, [r3, #0]
 8103ca6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8103ca8:	60da      	str	r2, [r3, #12]
 8103caa:	e0b9      	b.n	8103e20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8103cac:	2301      	movs	r3, #1
 8103cae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8103cb2:	e0b5      	b.n	8103e20 <UART_SetConfig+0xa94>
 8103cb4:	03d09000 	.word	0x03d09000
 8103cb8:	003d0900 	.word	0x003d0900
 8103cbc:	081070f8 	.word	0x081070f8
 8103cc0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8103cc4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8103cc8:	2b20      	cmp	r3, #32
 8103cca:	dc49      	bgt.n	8103d60 <UART_SetConfig+0x9d4>
 8103ccc:	2b00      	cmp	r3, #0
 8103cce:	db7c      	blt.n	8103dca <UART_SetConfig+0xa3e>
 8103cd0:	2b20      	cmp	r3, #32
 8103cd2:	d87a      	bhi.n	8103dca <UART_SetConfig+0xa3e>
 8103cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8103cdc <UART_SetConfig+0x950>)
 8103cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103cda:	bf00      	nop
 8103cdc:	08103d67 	.word	0x08103d67
 8103ce0:	08103d6f 	.word	0x08103d6f
 8103ce4:	08103dcb 	.word	0x08103dcb
 8103ce8:	08103dcb 	.word	0x08103dcb
 8103cec:	08103d77 	.word	0x08103d77
 8103cf0:	08103dcb 	.word	0x08103dcb
 8103cf4:	08103dcb 	.word	0x08103dcb
 8103cf8:	08103dcb 	.word	0x08103dcb
 8103cfc:	08103d87 	.word	0x08103d87
 8103d00:	08103dcb 	.word	0x08103dcb
 8103d04:	08103dcb 	.word	0x08103dcb
 8103d08:	08103dcb 	.word	0x08103dcb
 8103d0c:	08103dcb 	.word	0x08103dcb
 8103d10:	08103dcb 	.word	0x08103dcb
 8103d14:	08103dcb 	.word	0x08103dcb
 8103d18:	08103dcb 	.word	0x08103dcb
 8103d1c:	08103d97 	.word	0x08103d97
 8103d20:	08103dcb 	.word	0x08103dcb
 8103d24:	08103dcb 	.word	0x08103dcb
 8103d28:	08103dcb 	.word	0x08103dcb
 8103d2c:	08103dcb 	.word	0x08103dcb
 8103d30:	08103dcb 	.word	0x08103dcb
 8103d34:	08103dcb 	.word	0x08103dcb
 8103d38:	08103dcb 	.word	0x08103dcb
 8103d3c:	08103dcb 	.word	0x08103dcb
 8103d40:	08103dcb 	.word	0x08103dcb
 8103d44:	08103dcb 	.word	0x08103dcb
 8103d48:	08103dcb 	.word	0x08103dcb
 8103d4c:	08103dcb 	.word	0x08103dcb
 8103d50:	08103dcb 	.word	0x08103dcb
 8103d54:	08103dcb 	.word	0x08103dcb
 8103d58:	08103dcb 	.word	0x08103dcb
 8103d5c:	08103dbd 	.word	0x08103dbd
 8103d60:	2b40      	cmp	r3, #64	@ 0x40
 8103d62:	d02e      	beq.n	8103dc2 <UART_SetConfig+0xa36>
 8103d64:	e031      	b.n	8103dca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8103d66:	f7fd fc69 	bl	810163c <HAL_RCC_GetPCLK1Freq>
 8103d6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103d6c:	e033      	b.n	8103dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8103d6e:	f7fd fc7b 	bl	8101668 <HAL_RCC_GetPCLK2Freq>
 8103d72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103d74:	e02f      	b.n	8103dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103d76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103d7a:	4618      	mov	r0, r3
 8103d7c:	f7fe feaa 	bl	8102ad4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103d84:	e027      	b.n	8103dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103d86:	f107 0318 	add.w	r3, r7, #24
 8103d8a:	4618      	mov	r0, r3
 8103d8c:	f7fe fff6 	bl	8102d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103d90:	69fb      	ldr	r3, [r7, #28]
 8103d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103d94:	e01f      	b.n	8103dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103d96:	4b2d      	ldr	r3, [pc, #180]	@ (8103e4c <UART_SetConfig+0xac0>)
 8103d98:	681b      	ldr	r3, [r3, #0]
 8103d9a:	f003 0320 	and.w	r3, r3, #32
 8103d9e:	2b00      	cmp	r3, #0
 8103da0:	d009      	beq.n	8103db6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103da2:	4b2a      	ldr	r3, [pc, #168]	@ (8103e4c <UART_SetConfig+0xac0>)
 8103da4:	681b      	ldr	r3, [r3, #0]
 8103da6:	08db      	lsrs	r3, r3, #3
 8103da8:	f003 0303 	and.w	r3, r3, #3
 8103dac:	4a28      	ldr	r2, [pc, #160]	@ (8103e50 <UART_SetConfig+0xac4>)
 8103dae:	fa22 f303 	lsr.w	r3, r2, r3
 8103db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103db4:	e00f      	b.n	8103dd6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8103db6:	4b26      	ldr	r3, [pc, #152]	@ (8103e50 <UART_SetConfig+0xac4>)
 8103db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103dba:	e00c      	b.n	8103dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8103dbc:	4b25      	ldr	r3, [pc, #148]	@ (8103e54 <UART_SetConfig+0xac8>)
 8103dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103dc0:	e009      	b.n	8103dd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8103dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103dc8:	e005      	b.n	8103dd6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8103dca:	2300      	movs	r3, #0
 8103dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8103dce:	2301      	movs	r3, #1
 8103dd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8103dd4:	bf00      	nop
    }

    if (pclk != 0U)
 8103dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103dd8:	2b00      	cmp	r3, #0
 8103dda:	d021      	beq.n	8103e20 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103ddc:	697b      	ldr	r3, [r7, #20]
 8103dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103de0:	4a1d      	ldr	r2, [pc, #116]	@ (8103e58 <UART_SetConfig+0xacc>)
 8103de2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103de6:	461a      	mov	r2, r3
 8103de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103dea:	fbb3 f2f2 	udiv	r2, r3, r2
 8103dee:	697b      	ldr	r3, [r7, #20]
 8103df0:	685b      	ldr	r3, [r3, #4]
 8103df2:	085b      	lsrs	r3, r3, #1
 8103df4:	441a      	add	r2, r3
 8103df6:	697b      	ldr	r3, [r7, #20]
 8103df8:	685b      	ldr	r3, [r3, #4]
 8103dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8103dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8103e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103e02:	2b0f      	cmp	r3, #15
 8103e04:	d909      	bls.n	8103e1a <UART_SetConfig+0xa8e>
 8103e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103e0c:	d205      	bcs.n	8103e1a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8103e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103e10:	b29a      	uxth	r2, r3
 8103e12:	697b      	ldr	r3, [r7, #20]
 8103e14:	681b      	ldr	r3, [r3, #0]
 8103e16:	60da      	str	r2, [r3, #12]
 8103e18:	e002      	b.n	8103e20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8103e1a:	2301      	movs	r3, #1
 8103e1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8103e20:	697b      	ldr	r3, [r7, #20]
 8103e22:	2201      	movs	r2, #1
 8103e24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8103e28:	697b      	ldr	r3, [r7, #20]
 8103e2a:	2201      	movs	r2, #1
 8103e2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8103e30:	697b      	ldr	r3, [r7, #20]
 8103e32:	2200      	movs	r2, #0
 8103e34:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8103e36:	697b      	ldr	r3, [r7, #20]
 8103e38:	2200      	movs	r2, #0
 8103e3a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8103e3c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8103e40:	4618      	mov	r0, r3
 8103e42:	3748      	adds	r7, #72	@ 0x48
 8103e44:	46bd      	mov	sp, r7
 8103e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8103e4a:	bf00      	nop
 8103e4c:	58024400 	.word	0x58024400
 8103e50:	03d09000 	.word	0x03d09000
 8103e54:	003d0900 	.word	0x003d0900
 8103e58:	081070f8 	.word	0x081070f8

08103e5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8103e5c:	b480      	push	{r7}
 8103e5e:	b083      	sub	sp, #12
 8103e60:	af00      	add	r7, sp, #0
 8103e62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8103e64:	687b      	ldr	r3, [r7, #4]
 8103e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103e68:	f003 0308 	and.w	r3, r3, #8
 8103e6c:	2b00      	cmp	r3, #0
 8103e6e:	d00a      	beq.n	8103e86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8103e70:	687b      	ldr	r3, [r7, #4]
 8103e72:	681b      	ldr	r3, [r3, #0]
 8103e74:	685b      	ldr	r3, [r3, #4]
 8103e76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8103e7e:	687b      	ldr	r3, [r7, #4]
 8103e80:	681b      	ldr	r3, [r3, #0]
 8103e82:	430a      	orrs	r2, r1
 8103e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8103e86:	687b      	ldr	r3, [r7, #4]
 8103e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103e8a:	f003 0301 	and.w	r3, r3, #1
 8103e8e:	2b00      	cmp	r3, #0
 8103e90:	d00a      	beq.n	8103ea8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8103e92:	687b      	ldr	r3, [r7, #4]
 8103e94:	681b      	ldr	r3, [r3, #0]
 8103e96:	685b      	ldr	r3, [r3, #4]
 8103e98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8103e9c:	687b      	ldr	r3, [r7, #4]
 8103e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103ea0:	687b      	ldr	r3, [r7, #4]
 8103ea2:	681b      	ldr	r3, [r3, #0]
 8103ea4:	430a      	orrs	r2, r1
 8103ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8103ea8:	687b      	ldr	r3, [r7, #4]
 8103eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103eac:	f003 0302 	and.w	r3, r3, #2
 8103eb0:	2b00      	cmp	r3, #0
 8103eb2:	d00a      	beq.n	8103eca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8103eb4:	687b      	ldr	r3, [r7, #4]
 8103eb6:	681b      	ldr	r3, [r3, #0]
 8103eb8:	685b      	ldr	r3, [r3, #4]
 8103eba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8103ebe:	687b      	ldr	r3, [r7, #4]
 8103ec0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8103ec2:	687b      	ldr	r3, [r7, #4]
 8103ec4:	681b      	ldr	r3, [r3, #0]
 8103ec6:	430a      	orrs	r2, r1
 8103ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8103eca:	687b      	ldr	r3, [r7, #4]
 8103ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103ece:	f003 0304 	and.w	r3, r3, #4
 8103ed2:	2b00      	cmp	r3, #0
 8103ed4:	d00a      	beq.n	8103eec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8103ed6:	687b      	ldr	r3, [r7, #4]
 8103ed8:	681b      	ldr	r3, [r3, #0]
 8103eda:	685b      	ldr	r3, [r3, #4]
 8103edc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8103ee0:	687b      	ldr	r3, [r7, #4]
 8103ee2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103ee4:	687b      	ldr	r3, [r7, #4]
 8103ee6:	681b      	ldr	r3, [r3, #0]
 8103ee8:	430a      	orrs	r2, r1
 8103eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8103eec:	687b      	ldr	r3, [r7, #4]
 8103eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103ef0:	f003 0310 	and.w	r3, r3, #16
 8103ef4:	2b00      	cmp	r3, #0
 8103ef6:	d00a      	beq.n	8103f0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8103ef8:	687b      	ldr	r3, [r7, #4]
 8103efa:	681b      	ldr	r3, [r3, #0]
 8103efc:	689b      	ldr	r3, [r3, #8]
 8103efe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8103f02:	687b      	ldr	r3, [r7, #4]
 8103f04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8103f06:	687b      	ldr	r3, [r7, #4]
 8103f08:	681b      	ldr	r3, [r3, #0]
 8103f0a:	430a      	orrs	r2, r1
 8103f0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8103f0e:	687b      	ldr	r3, [r7, #4]
 8103f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103f12:	f003 0320 	and.w	r3, r3, #32
 8103f16:	2b00      	cmp	r3, #0
 8103f18:	d00a      	beq.n	8103f30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8103f1a:	687b      	ldr	r3, [r7, #4]
 8103f1c:	681b      	ldr	r3, [r3, #0]
 8103f1e:	689b      	ldr	r3, [r3, #8]
 8103f20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8103f28:	687b      	ldr	r3, [r7, #4]
 8103f2a:	681b      	ldr	r3, [r3, #0]
 8103f2c:	430a      	orrs	r2, r1
 8103f2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8103f30:	687b      	ldr	r3, [r7, #4]
 8103f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103f38:	2b00      	cmp	r3, #0
 8103f3a:	d01a      	beq.n	8103f72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8103f3c:	687b      	ldr	r3, [r7, #4]
 8103f3e:	681b      	ldr	r3, [r3, #0]
 8103f40:	685b      	ldr	r3, [r3, #4]
 8103f42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8103f46:	687b      	ldr	r3, [r7, #4]
 8103f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8103f4a:	687b      	ldr	r3, [r7, #4]
 8103f4c:	681b      	ldr	r3, [r3, #0]
 8103f4e:	430a      	orrs	r2, r1
 8103f50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8103f52:	687b      	ldr	r3, [r7, #4]
 8103f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103f56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103f5a:	d10a      	bne.n	8103f72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	681b      	ldr	r3, [r3, #0]
 8103f60:	685b      	ldr	r3, [r3, #4]
 8103f62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8103f66:	687b      	ldr	r3, [r7, #4]
 8103f68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	681b      	ldr	r3, [r3, #0]
 8103f6e:	430a      	orrs	r2, r1
 8103f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8103f72:	687b      	ldr	r3, [r7, #4]
 8103f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103f7a:	2b00      	cmp	r3, #0
 8103f7c:	d00a      	beq.n	8103f94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8103f7e:	687b      	ldr	r3, [r7, #4]
 8103f80:	681b      	ldr	r3, [r3, #0]
 8103f82:	685b      	ldr	r3, [r3, #4]
 8103f84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8103f88:	687b      	ldr	r3, [r7, #4]
 8103f8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8103f8c:	687b      	ldr	r3, [r7, #4]
 8103f8e:	681b      	ldr	r3, [r3, #0]
 8103f90:	430a      	orrs	r2, r1
 8103f92:	605a      	str	r2, [r3, #4]
  }
}
 8103f94:	bf00      	nop
 8103f96:	370c      	adds	r7, #12
 8103f98:	46bd      	mov	sp, r7
 8103f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f9e:	4770      	bx	lr

08103fa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8103fa0:	b580      	push	{r7, lr}
 8103fa2:	b098      	sub	sp, #96	@ 0x60
 8103fa4:	af02      	add	r7, sp, #8
 8103fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8103fa8:	687b      	ldr	r3, [r7, #4]
 8103faa:	2200      	movs	r2, #0
 8103fac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8103fb0:	f7fc fe32 	bl	8100c18 <HAL_GetTick>
 8103fb4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8103fb6:	687b      	ldr	r3, [r7, #4]
 8103fb8:	681b      	ldr	r3, [r3, #0]
 8103fba:	681b      	ldr	r3, [r3, #0]
 8103fbc:	f003 0308 	and.w	r3, r3, #8
 8103fc0:	2b08      	cmp	r3, #8
 8103fc2:	d12f      	bne.n	8104024 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8103fc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8103fc8:	9300      	str	r3, [sp, #0]
 8103fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8103fcc:	2200      	movs	r2, #0
 8103fce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8103fd2:	6878      	ldr	r0, [r7, #4]
 8103fd4:	f000 f88e 	bl	81040f4 <UART_WaitOnFlagUntilTimeout>
 8103fd8:	4603      	mov	r3, r0
 8103fda:	2b00      	cmp	r3, #0
 8103fdc:	d022      	beq.n	8104024 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8103fde:	687b      	ldr	r3, [r7, #4]
 8103fe0:	681b      	ldr	r3, [r3, #0]
 8103fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103fe6:	e853 3f00 	ldrex	r3, [r3]
 8103fea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8103fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103fee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8103ff2:	653b      	str	r3, [r7, #80]	@ 0x50
 8103ff4:	687b      	ldr	r3, [r7, #4]
 8103ff6:	681b      	ldr	r3, [r3, #0]
 8103ff8:	461a      	mov	r2, r3
 8103ffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8103ffc:	647b      	str	r3, [r7, #68]	@ 0x44
 8103ffe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104000:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8104002:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8104004:	e841 2300 	strex	r3, r2, [r1]
 8104008:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810400a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810400c:	2b00      	cmp	r3, #0
 810400e:	d1e6      	bne.n	8103fde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8104010:	687b      	ldr	r3, [r7, #4]
 8104012:	2220      	movs	r2, #32
 8104014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8104018:	687b      	ldr	r3, [r7, #4]
 810401a:	2200      	movs	r2, #0
 810401c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8104020:	2303      	movs	r3, #3
 8104022:	e063      	b.n	81040ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	681b      	ldr	r3, [r3, #0]
 8104028:	681b      	ldr	r3, [r3, #0]
 810402a:	f003 0304 	and.w	r3, r3, #4
 810402e:	2b04      	cmp	r3, #4
 8104030:	d149      	bne.n	81040c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8104032:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8104036:	9300      	str	r3, [sp, #0]
 8104038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810403a:	2200      	movs	r2, #0
 810403c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8104040:	6878      	ldr	r0, [r7, #4]
 8104042:	f000 f857 	bl	81040f4 <UART_WaitOnFlagUntilTimeout>
 8104046:	4603      	mov	r3, r0
 8104048:	2b00      	cmp	r3, #0
 810404a:	d03c      	beq.n	81040c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810404c:	687b      	ldr	r3, [r7, #4]
 810404e:	681b      	ldr	r3, [r3, #0]
 8104050:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104054:	e853 3f00 	ldrex	r3, [r3]
 8104058:	623b      	str	r3, [r7, #32]
   return(result);
 810405a:	6a3b      	ldr	r3, [r7, #32]
 810405c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8104060:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8104062:	687b      	ldr	r3, [r7, #4]
 8104064:	681b      	ldr	r3, [r3, #0]
 8104066:	461a      	mov	r2, r3
 8104068:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810406a:	633b      	str	r3, [r7, #48]	@ 0x30
 810406c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810406e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8104070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8104072:	e841 2300 	strex	r3, r2, [r1]
 8104076:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8104078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810407a:	2b00      	cmp	r3, #0
 810407c:	d1e6      	bne.n	810404c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	681b      	ldr	r3, [r3, #0]
 8104082:	3308      	adds	r3, #8
 8104084:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104086:	693b      	ldr	r3, [r7, #16]
 8104088:	e853 3f00 	ldrex	r3, [r3]
 810408c:	60fb      	str	r3, [r7, #12]
   return(result);
 810408e:	68fb      	ldr	r3, [r7, #12]
 8104090:	f023 0301 	bic.w	r3, r3, #1
 8104094:	64bb      	str	r3, [r7, #72]	@ 0x48
 8104096:	687b      	ldr	r3, [r7, #4]
 8104098:	681b      	ldr	r3, [r3, #0]
 810409a:	3308      	adds	r3, #8
 810409c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810409e:	61fa      	str	r2, [r7, #28]
 81040a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81040a2:	69b9      	ldr	r1, [r7, #24]
 81040a4:	69fa      	ldr	r2, [r7, #28]
 81040a6:	e841 2300 	strex	r3, r2, [r1]
 81040aa:	617b      	str	r3, [r7, #20]
   return(result);
 81040ac:	697b      	ldr	r3, [r7, #20]
 81040ae:	2b00      	cmp	r3, #0
 81040b0:	d1e5      	bne.n	810407e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 81040b2:	687b      	ldr	r3, [r7, #4]
 81040b4:	2220      	movs	r2, #32
 81040b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 81040ba:	687b      	ldr	r3, [r7, #4]
 81040bc:	2200      	movs	r2, #0
 81040be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81040c2:	2303      	movs	r3, #3
 81040c4:	e012      	b.n	81040ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81040c6:	687b      	ldr	r3, [r7, #4]
 81040c8:	2220      	movs	r2, #32
 81040ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 81040ce:	687b      	ldr	r3, [r7, #4]
 81040d0:	2220      	movs	r2, #32
 81040d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81040d6:	687b      	ldr	r3, [r7, #4]
 81040d8:	2200      	movs	r2, #0
 81040da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 81040dc:	687b      	ldr	r3, [r7, #4]
 81040de:	2200      	movs	r2, #0
 81040e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 81040e2:	687b      	ldr	r3, [r7, #4]
 81040e4:	2200      	movs	r2, #0
 81040e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81040ea:	2300      	movs	r3, #0
}
 81040ec:	4618      	mov	r0, r3
 81040ee:	3758      	adds	r7, #88	@ 0x58
 81040f0:	46bd      	mov	sp, r7
 81040f2:	bd80      	pop	{r7, pc}

081040f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81040f4:	b580      	push	{r7, lr}
 81040f6:	b084      	sub	sp, #16
 81040f8:	af00      	add	r7, sp, #0
 81040fa:	60f8      	str	r0, [r7, #12]
 81040fc:	60b9      	str	r1, [r7, #8]
 81040fe:	603b      	str	r3, [r7, #0]
 8104100:	4613      	mov	r3, r2
 8104102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8104104:	e04f      	b.n	81041a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104106:	69bb      	ldr	r3, [r7, #24]
 8104108:	f1b3 3fff 	cmp.w	r3, #4294967295
 810410c:	d04b      	beq.n	81041a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810410e:	f7fc fd83 	bl	8100c18 <HAL_GetTick>
 8104112:	4602      	mov	r2, r0
 8104114:	683b      	ldr	r3, [r7, #0]
 8104116:	1ad3      	subs	r3, r2, r3
 8104118:	69ba      	ldr	r2, [r7, #24]
 810411a:	429a      	cmp	r2, r3
 810411c:	d302      	bcc.n	8104124 <UART_WaitOnFlagUntilTimeout+0x30>
 810411e:	69bb      	ldr	r3, [r7, #24]
 8104120:	2b00      	cmp	r3, #0
 8104122:	d101      	bne.n	8104128 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8104124:	2303      	movs	r3, #3
 8104126:	e04e      	b.n	81041c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8104128:	68fb      	ldr	r3, [r7, #12]
 810412a:	681b      	ldr	r3, [r3, #0]
 810412c:	681b      	ldr	r3, [r3, #0]
 810412e:	f003 0304 	and.w	r3, r3, #4
 8104132:	2b00      	cmp	r3, #0
 8104134:	d037      	beq.n	81041a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8104136:	68bb      	ldr	r3, [r7, #8]
 8104138:	2b80      	cmp	r3, #128	@ 0x80
 810413a:	d034      	beq.n	81041a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 810413c:	68bb      	ldr	r3, [r7, #8]
 810413e:	2b40      	cmp	r3, #64	@ 0x40
 8104140:	d031      	beq.n	81041a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8104142:	68fb      	ldr	r3, [r7, #12]
 8104144:	681b      	ldr	r3, [r3, #0]
 8104146:	69db      	ldr	r3, [r3, #28]
 8104148:	f003 0308 	and.w	r3, r3, #8
 810414c:	2b08      	cmp	r3, #8
 810414e:	d110      	bne.n	8104172 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8104150:	68fb      	ldr	r3, [r7, #12]
 8104152:	681b      	ldr	r3, [r3, #0]
 8104154:	2208      	movs	r2, #8
 8104156:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8104158:	68f8      	ldr	r0, [r7, #12]
 810415a:	f000 f838 	bl	81041ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810415e:	68fb      	ldr	r3, [r7, #12]
 8104160:	2208      	movs	r2, #8
 8104162:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8104166:	68fb      	ldr	r3, [r7, #12]
 8104168:	2200      	movs	r2, #0
 810416a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810416e:	2301      	movs	r3, #1
 8104170:	e029      	b.n	81041c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8104172:	68fb      	ldr	r3, [r7, #12]
 8104174:	681b      	ldr	r3, [r3, #0]
 8104176:	69db      	ldr	r3, [r3, #28]
 8104178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810417c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8104180:	d111      	bne.n	81041a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8104182:	68fb      	ldr	r3, [r7, #12]
 8104184:	681b      	ldr	r3, [r3, #0]
 8104186:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810418a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810418c:	68f8      	ldr	r0, [r7, #12]
 810418e:	f000 f81e 	bl	81041ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8104192:	68fb      	ldr	r3, [r7, #12]
 8104194:	2220      	movs	r2, #32
 8104196:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810419a:	68fb      	ldr	r3, [r7, #12]
 810419c:	2200      	movs	r2, #0
 810419e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 81041a2:	2303      	movs	r3, #3
 81041a4:	e00f      	b.n	81041c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81041a6:	68fb      	ldr	r3, [r7, #12]
 81041a8:	681b      	ldr	r3, [r3, #0]
 81041aa:	69da      	ldr	r2, [r3, #28]
 81041ac:	68bb      	ldr	r3, [r7, #8]
 81041ae:	4013      	ands	r3, r2
 81041b0:	68ba      	ldr	r2, [r7, #8]
 81041b2:	429a      	cmp	r2, r3
 81041b4:	bf0c      	ite	eq
 81041b6:	2301      	moveq	r3, #1
 81041b8:	2300      	movne	r3, #0
 81041ba:	b2db      	uxtb	r3, r3
 81041bc:	461a      	mov	r2, r3
 81041be:	79fb      	ldrb	r3, [r7, #7]
 81041c0:	429a      	cmp	r2, r3
 81041c2:	d0a0      	beq.n	8104106 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81041c4:	2300      	movs	r3, #0
}
 81041c6:	4618      	mov	r0, r3
 81041c8:	3710      	adds	r7, #16
 81041ca:	46bd      	mov	sp, r7
 81041cc:	bd80      	pop	{r7, pc}

081041ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81041ce:	b480      	push	{r7}
 81041d0:	b095      	sub	sp, #84	@ 0x54
 81041d2:	af00      	add	r7, sp, #0
 81041d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	681b      	ldr	r3, [r3, #0]
 81041da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81041dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81041de:	e853 3f00 	ldrex	r3, [r3]
 81041e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 81041e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81041e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81041ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	681b      	ldr	r3, [r3, #0]
 81041f0:	461a      	mov	r2, r3
 81041f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81041f4:	643b      	str	r3, [r7, #64]	@ 0x40
 81041f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81041f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 81041fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81041fc:	e841 2300 	strex	r3, r2, [r1]
 8104200:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8104202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104204:	2b00      	cmp	r3, #0
 8104206:	d1e6      	bne.n	81041d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8104208:	687b      	ldr	r3, [r7, #4]
 810420a:	681b      	ldr	r3, [r3, #0]
 810420c:	3308      	adds	r3, #8
 810420e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104210:	6a3b      	ldr	r3, [r7, #32]
 8104212:	e853 3f00 	ldrex	r3, [r3]
 8104216:	61fb      	str	r3, [r7, #28]
   return(result);
 8104218:	69fb      	ldr	r3, [r7, #28]
 810421a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810421e:	f023 0301 	bic.w	r3, r3, #1
 8104222:	64bb      	str	r3, [r7, #72]	@ 0x48
 8104224:	687b      	ldr	r3, [r7, #4]
 8104226:	681b      	ldr	r3, [r3, #0]
 8104228:	3308      	adds	r3, #8
 810422a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810422c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810422e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104230:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8104232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8104234:	e841 2300 	strex	r3, r2, [r1]
 8104238:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810423c:	2b00      	cmp	r3, #0
 810423e:	d1e3      	bne.n	8104208 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8104240:	687b      	ldr	r3, [r7, #4]
 8104242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104244:	2b01      	cmp	r3, #1
 8104246:	d118      	bne.n	810427a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8104248:	687b      	ldr	r3, [r7, #4]
 810424a:	681b      	ldr	r3, [r3, #0]
 810424c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810424e:	68fb      	ldr	r3, [r7, #12]
 8104250:	e853 3f00 	ldrex	r3, [r3]
 8104254:	60bb      	str	r3, [r7, #8]
   return(result);
 8104256:	68bb      	ldr	r3, [r7, #8]
 8104258:	f023 0310 	bic.w	r3, r3, #16
 810425c:	647b      	str	r3, [r7, #68]	@ 0x44
 810425e:	687b      	ldr	r3, [r7, #4]
 8104260:	681b      	ldr	r3, [r3, #0]
 8104262:	461a      	mov	r2, r3
 8104264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8104266:	61bb      	str	r3, [r7, #24]
 8104268:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810426a:	6979      	ldr	r1, [r7, #20]
 810426c:	69ba      	ldr	r2, [r7, #24]
 810426e:	e841 2300 	strex	r3, r2, [r1]
 8104272:	613b      	str	r3, [r7, #16]
   return(result);
 8104274:	693b      	ldr	r3, [r7, #16]
 8104276:	2b00      	cmp	r3, #0
 8104278:	d1e6      	bne.n	8104248 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810427a:	687b      	ldr	r3, [r7, #4]
 810427c:	2220      	movs	r2, #32
 810427e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8104282:	687b      	ldr	r3, [r7, #4]
 8104284:	2200      	movs	r2, #0
 8104286:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8104288:	687b      	ldr	r3, [r7, #4]
 810428a:	2200      	movs	r2, #0
 810428c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810428e:	bf00      	nop
 8104290:	3754      	adds	r7, #84	@ 0x54
 8104292:	46bd      	mov	sp, r7
 8104294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104298:	4770      	bx	lr

0810429a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810429a:	b480      	push	{r7}
 810429c:	b085      	sub	sp, #20
 810429e:	af00      	add	r7, sp, #0
 81042a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81042a2:	687b      	ldr	r3, [r7, #4]
 81042a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81042a8:	2b01      	cmp	r3, #1
 81042aa:	d101      	bne.n	81042b0 <HAL_UARTEx_DisableFifoMode+0x16>
 81042ac:	2302      	movs	r3, #2
 81042ae:	e027      	b.n	8104300 <HAL_UARTEx_DisableFifoMode+0x66>
 81042b0:	687b      	ldr	r3, [r7, #4]
 81042b2:	2201      	movs	r2, #1
 81042b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81042b8:	687b      	ldr	r3, [r7, #4]
 81042ba:	2224      	movs	r2, #36	@ 0x24
 81042bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81042c0:	687b      	ldr	r3, [r7, #4]
 81042c2:	681b      	ldr	r3, [r3, #0]
 81042c4:	681b      	ldr	r3, [r3, #0]
 81042c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81042c8:	687b      	ldr	r3, [r7, #4]
 81042ca:	681b      	ldr	r3, [r3, #0]
 81042cc:	681a      	ldr	r2, [r3, #0]
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	681b      	ldr	r3, [r3, #0]
 81042d2:	f022 0201 	bic.w	r2, r2, #1
 81042d6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81042d8:	68fb      	ldr	r3, [r7, #12]
 81042da:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 81042de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81042e0:	687b      	ldr	r3, [r7, #4]
 81042e2:	2200      	movs	r2, #0
 81042e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81042e6:	687b      	ldr	r3, [r7, #4]
 81042e8:	681b      	ldr	r3, [r3, #0]
 81042ea:	68fa      	ldr	r2, [r7, #12]
 81042ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81042ee:	687b      	ldr	r3, [r7, #4]
 81042f0:	2220      	movs	r2, #32
 81042f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81042f6:	687b      	ldr	r3, [r7, #4]
 81042f8:	2200      	movs	r2, #0
 81042fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81042fe:	2300      	movs	r3, #0
}
 8104300:	4618      	mov	r0, r3
 8104302:	3714      	adds	r7, #20
 8104304:	46bd      	mov	sp, r7
 8104306:	f85d 7b04 	ldr.w	r7, [sp], #4
 810430a:	4770      	bx	lr

0810430c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810430c:	b580      	push	{r7, lr}
 810430e:	b084      	sub	sp, #16
 8104310:	af00      	add	r7, sp, #0
 8104312:	6078      	str	r0, [r7, #4]
 8104314:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8104316:	687b      	ldr	r3, [r7, #4]
 8104318:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810431c:	2b01      	cmp	r3, #1
 810431e:	d101      	bne.n	8104324 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8104320:	2302      	movs	r3, #2
 8104322:	e02d      	b.n	8104380 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8104324:	687b      	ldr	r3, [r7, #4]
 8104326:	2201      	movs	r2, #1
 8104328:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810432c:	687b      	ldr	r3, [r7, #4]
 810432e:	2224      	movs	r2, #36	@ 0x24
 8104330:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8104334:	687b      	ldr	r3, [r7, #4]
 8104336:	681b      	ldr	r3, [r3, #0]
 8104338:	681b      	ldr	r3, [r3, #0]
 810433a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	681b      	ldr	r3, [r3, #0]
 8104340:	681a      	ldr	r2, [r3, #0]
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	681b      	ldr	r3, [r3, #0]
 8104346:	f022 0201 	bic.w	r2, r2, #1
 810434a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810434c:	687b      	ldr	r3, [r7, #4]
 810434e:	681b      	ldr	r3, [r3, #0]
 8104350:	689b      	ldr	r3, [r3, #8]
 8104352:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	681b      	ldr	r3, [r3, #0]
 810435a:	683a      	ldr	r2, [r7, #0]
 810435c:	430a      	orrs	r2, r1
 810435e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8104360:	6878      	ldr	r0, [r7, #4]
 8104362:	f000 f84f 	bl	8104404 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	681b      	ldr	r3, [r3, #0]
 810436a:	68fa      	ldr	r2, [r7, #12]
 810436c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810436e:	687b      	ldr	r3, [r7, #4]
 8104370:	2220      	movs	r2, #32
 8104372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8104376:	687b      	ldr	r3, [r7, #4]
 8104378:	2200      	movs	r2, #0
 810437a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810437e:	2300      	movs	r3, #0
}
 8104380:	4618      	mov	r0, r3
 8104382:	3710      	adds	r7, #16
 8104384:	46bd      	mov	sp, r7
 8104386:	bd80      	pop	{r7, pc}

08104388 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8104388:	b580      	push	{r7, lr}
 810438a:	b084      	sub	sp, #16
 810438c:	af00      	add	r7, sp, #0
 810438e:	6078      	str	r0, [r7, #4]
 8104390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8104392:	687b      	ldr	r3, [r7, #4]
 8104394:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8104398:	2b01      	cmp	r3, #1
 810439a:	d101      	bne.n	81043a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810439c:	2302      	movs	r3, #2
 810439e:	e02d      	b.n	81043fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81043a0:	687b      	ldr	r3, [r7, #4]
 81043a2:	2201      	movs	r2, #1
 81043a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81043a8:	687b      	ldr	r3, [r7, #4]
 81043aa:	2224      	movs	r2, #36	@ 0x24
 81043ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	681b      	ldr	r3, [r3, #0]
 81043b4:	681b      	ldr	r3, [r3, #0]
 81043b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81043b8:	687b      	ldr	r3, [r7, #4]
 81043ba:	681b      	ldr	r3, [r3, #0]
 81043bc:	681a      	ldr	r2, [r3, #0]
 81043be:	687b      	ldr	r3, [r7, #4]
 81043c0:	681b      	ldr	r3, [r3, #0]
 81043c2:	f022 0201 	bic.w	r2, r2, #1
 81043c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81043c8:	687b      	ldr	r3, [r7, #4]
 81043ca:	681b      	ldr	r3, [r3, #0]
 81043cc:	689b      	ldr	r3, [r3, #8]
 81043ce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 81043d2:	687b      	ldr	r3, [r7, #4]
 81043d4:	681b      	ldr	r3, [r3, #0]
 81043d6:	683a      	ldr	r2, [r7, #0]
 81043d8:	430a      	orrs	r2, r1
 81043da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81043dc:	6878      	ldr	r0, [r7, #4]
 81043de:	f000 f811 	bl	8104404 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81043e2:	687b      	ldr	r3, [r7, #4]
 81043e4:	681b      	ldr	r3, [r3, #0]
 81043e6:	68fa      	ldr	r2, [r7, #12]
 81043e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81043ea:	687b      	ldr	r3, [r7, #4]
 81043ec:	2220      	movs	r2, #32
 81043ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81043f2:	687b      	ldr	r3, [r7, #4]
 81043f4:	2200      	movs	r2, #0
 81043f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81043fa:	2300      	movs	r3, #0
}
 81043fc:	4618      	mov	r0, r3
 81043fe:	3710      	adds	r7, #16
 8104400:	46bd      	mov	sp, r7
 8104402:	bd80      	pop	{r7, pc}

08104404 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8104404:	b480      	push	{r7}
 8104406:	b085      	sub	sp, #20
 8104408:	af00      	add	r7, sp, #0
 810440a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810440c:	687b      	ldr	r3, [r7, #4]
 810440e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104410:	2b00      	cmp	r3, #0
 8104412:	d108      	bne.n	8104426 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8104414:	687b      	ldr	r3, [r7, #4]
 8104416:	2201      	movs	r2, #1
 8104418:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	2201      	movs	r2, #1
 8104420:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8104424:	e031      	b.n	810448a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8104426:	2310      	movs	r3, #16
 8104428:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810442a:	2310      	movs	r3, #16
 810442c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810442e:	687b      	ldr	r3, [r7, #4]
 8104430:	681b      	ldr	r3, [r3, #0]
 8104432:	689b      	ldr	r3, [r3, #8]
 8104434:	0e5b      	lsrs	r3, r3, #25
 8104436:	b2db      	uxtb	r3, r3
 8104438:	f003 0307 	and.w	r3, r3, #7
 810443c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810443e:	687b      	ldr	r3, [r7, #4]
 8104440:	681b      	ldr	r3, [r3, #0]
 8104442:	689b      	ldr	r3, [r3, #8]
 8104444:	0f5b      	lsrs	r3, r3, #29
 8104446:	b2db      	uxtb	r3, r3
 8104448:	f003 0307 	and.w	r3, r3, #7
 810444c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810444e:	7bbb      	ldrb	r3, [r7, #14]
 8104450:	7b3a      	ldrb	r2, [r7, #12]
 8104452:	4911      	ldr	r1, [pc, #68]	@ (8104498 <UARTEx_SetNbDataToProcess+0x94>)
 8104454:	5c8a      	ldrb	r2, [r1, r2]
 8104456:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810445a:	7b3a      	ldrb	r2, [r7, #12]
 810445c:	490f      	ldr	r1, [pc, #60]	@ (810449c <UARTEx_SetNbDataToProcess+0x98>)
 810445e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8104460:	fb93 f3f2 	sdiv	r3, r3, r2
 8104464:	b29a      	uxth	r2, r3
 8104466:	687b      	ldr	r3, [r7, #4]
 8104468:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810446c:	7bfb      	ldrb	r3, [r7, #15]
 810446e:	7b7a      	ldrb	r2, [r7, #13]
 8104470:	4909      	ldr	r1, [pc, #36]	@ (8104498 <UARTEx_SetNbDataToProcess+0x94>)
 8104472:	5c8a      	ldrb	r2, [r1, r2]
 8104474:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8104478:	7b7a      	ldrb	r2, [r7, #13]
 810447a:	4908      	ldr	r1, [pc, #32]	@ (810449c <UARTEx_SetNbDataToProcess+0x98>)
 810447c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810447e:	fb93 f3f2 	sdiv	r3, r3, r2
 8104482:	b29a      	uxth	r2, r3
 8104484:	687b      	ldr	r3, [r7, #4]
 8104486:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810448a:	bf00      	nop
 810448c:	3714      	adds	r7, #20
 810448e:	46bd      	mov	sp, r7
 8104490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104494:	4770      	bx	lr
 8104496:	bf00      	nop
 8104498:	08107110 	.word	0x08107110
 810449c:	08107118 	.word	0x08107118

081044a0 <__NVIC_SetPriority>:
{
 81044a0:	b480      	push	{r7}
 81044a2:	b083      	sub	sp, #12
 81044a4:	af00      	add	r7, sp, #0
 81044a6:	4603      	mov	r3, r0
 81044a8:	6039      	str	r1, [r7, #0]
 81044aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81044ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81044b0:	2b00      	cmp	r3, #0
 81044b2:	db0a      	blt.n	81044ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81044b4:	683b      	ldr	r3, [r7, #0]
 81044b6:	b2da      	uxtb	r2, r3
 81044b8:	490c      	ldr	r1, [pc, #48]	@ (81044ec <__NVIC_SetPriority+0x4c>)
 81044ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81044be:	0112      	lsls	r2, r2, #4
 81044c0:	b2d2      	uxtb	r2, r2
 81044c2:	440b      	add	r3, r1
 81044c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 81044c8:	e00a      	b.n	81044e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81044ca:	683b      	ldr	r3, [r7, #0]
 81044cc:	b2da      	uxtb	r2, r3
 81044ce:	4908      	ldr	r1, [pc, #32]	@ (81044f0 <__NVIC_SetPriority+0x50>)
 81044d0:	88fb      	ldrh	r3, [r7, #6]
 81044d2:	f003 030f 	and.w	r3, r3, #15
 81044d6:	3b04      	subs	r3, #4
 81044d8:	0112      	lsls	r2, r2, #4
 81044da:	b2d2      	uxtb	r2, r2
 81044dc:	440b      	add	r3, r1
 81044de:	761a      	strb	r2, [r3, #24]
}
 81044e0:	bf00      	nop
 81044e2:	370c      	adds	r7, #12
 81044e4:	46bd      	mov	sp, r7
 81044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044ea:	4770      	bx	lr
 81044ec:	e000e100 	.word	0xe000e100
 81044f0:	e000ed00 	.word	0xe000ed00

081044f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 81044f4:	b580      	push	{r7, lr}
 81044f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 81044f8:	2100      	movs	r1, #0
 81044fa:	f06f 0004 	mvn.w	r0, #4
 81044fe:	f7ff ffcf 	bl	81044a0 <__NVIC_SetPriority>
#endif
}
 8104502:	bf00      	nop
 8104504:	bd80      	pop	{r7, pc}
	...

08104508 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8104508:	b480      	push	{r7}
 810450a:	b083      	sub	sp, #12
 810450c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810450e:	f3ef 8305 	mrs	r3, IPSR
 8104512:	603b      	str	r3, [r7, #0]
  return(result);
 8104514:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8104516:	2b00      	cmp	r3, #0
 8104518:	d003      	beq.n	8104522 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810451a:	f06f 0305 	mvn.w	r3, #5
 810451e:	607b      	str	r3, [r7, #4]
 8104520:	e00c      	b.n	810453c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8104522:	4b0a      	ldr	r3, [pc, #40]	@ (810454c <osKernelInitialize+0x44>)
 8104524:	681b      	ldr	r3, [r3, #0]
 8104526:	2b00      	cmp	r3, #0
 8104528:	d105      	bne.n	8104536 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810452a:	4b08      	ldr	r3, [pc, #32]	@ (810454c <osKernelInitialize+0x44>)
 810452c:	2201      	movs	r2, #1
 810452e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8104530:	2300      	movs	r3, #0
 8104532:	607b      	str	r3, [r7, #4]
 8104534:	e002      	b.n	810453c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8104536:	f04f 33ff 	mov.w	r3, #4294967295
 810453a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810453c:	687b      	ldr	r3, [r7, #4]
}
 810453e:	4618      	mov	r0, r3
 8104540:	370c      	adds	r7, #12
 8104542:	46bd      	mov	sp, r7
 8104544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104548:	4770      	bx	lr
 810454a:	bf00      	nop
 810454c:	100000d8 	.word	0x100000d8

08104550 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8104550:	b580      	push	{r7, lr}
 8104552:	b082      	sub	sp, #8
 8104554:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8104556:	f3ef 8305 	mrs	r3, IPSR
 810455a:	603b      	str	r3, [r7, #0]
  return(result);
 810455c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810455e:	2b00      	cmp	r3, #0
 8104560:	d003      	beq.n	810456a <osKernelStart+0x1a>
    stat = osErrorISR;
 8104562:	f06f 0305 	mvn.w	r3, #5
 8104566:	607b      	str	r3, [r7, #4]
 8104568:	e010      	b.n	810458c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810456a:	4b0b      	ldr	r3, [pc, #44]	@ (8104598 <osKernelStart+0x48>)
 810456c:	681b      	ldr	r3, [r3, #0]
 810456e:	2b01      	cmp	r3, #1
 8104570:	d109      	bne.n	8104586 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8104572:	f7ff ffbf 	bl	81044f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8104576:	4b08      	ldr	r3, [pc, #32]	@ (8104598 <osKernelStart+0x48>)
 8104578:	2202      	movs	r2, #2
 810457a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810457c:	f001 fcbc 	bl	8105ef8 <vTaskStartScheduler>
      stat = osOK;
 8104580:	2300      	movs	r3, #0
 8104582:	607b      	str	r3, [r7, #4]
 8104584:	e002      	b.n	810458c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8104586:	f04f 33ff 	mov.w	r3, #4294967295
 810458a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810458c:	687b      	ldr	r3, [r7, #4]
}
 810458e:	4618      	mov	r0, r3
 8104590:	3708      	adds	r7, #8
 8104592:	46bd      	mov	sp, r7
 8104594:	bd80      	pop	{r7, pc}
 8104596:	bf00      	nop
 8104598:	100000d8 	.word	0x100000d8

0810459c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810459c:	b580      	push	{r7, lr}
 810459e:	b08e      	sub	sp, #56	@ 0x38
 81045a0:	af04      	add	r7, sp, #16
 81045a2:	60f8      	str	r0, [r7, #12]
 81045a4:	60b9      	str	r1, [r7, #8]
 81045a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81045a8:	2300      	movs	r3, #0
 81045aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81045ac:	f3ef 8305 	mrs	r3, IPSR
 81045b0:	617b      	str	r3, [r7, #20]
  return(result);
 81045b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 81045b4:	2b00      	cmp	r3, #0
 81045b6:	d17e      	bne.n	81046b6 <osThreadNew+0x11a>
 81045b8:	68fb      	ldr	r3, [r7, #12]
 81045ba:	2b00      	cmp	r3, #0
 81045bc:	d07b      	beq.n	81046b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 81045be:	2380      	movs	r3, #128	@ 0x80
 81045c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 81045c2:	2318      	movs	r3, #24
 81045c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 81045c6:	2300      	movs	r3, #0
 81045c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 81045ca:	f04f 33ff 	mov.w	r3, #4294967295
 81045ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 81045d0:	687b      	ldr	r3, [r7, #4]
 81045d2:	2b00      	cmp	r3, #0
 81045d4:	d045      	beq.n	8104662 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 81045d6:	687b      	ldr	r3, [r7, #4]
 81045d8:	681b      	ldr	r3, [r3, #0]
 81045da:	2b00      	cmp	r3, #0
 81045dc:	d002      	beq.n	81045e4 <osThreadNew+0x48>
        name = attr->name;
 81045de:	687b      	ldr	r3, [r7, #4]
 81045e0:	681b      	ldr	r3, [r3, #0]
 81045e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 81045e4:	687b      	ldr	r3, [r7, #4]
 81045e6:	699b      	ldr	r3, [r3, #24]
 81045e8:	2b00      	cmp	r3, #0
 81045ea:	d002      	beq.n	81045f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 81045ec:	687b      	ldr	r3, [r7, #4]
 81045ee:	699b      	ldr	r3, [r3, #24]
 81045f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 81045f2:	69fb      	ldr	r3, [r7, #28]
 81045f4:	2b00      	cmp	r3, #0
 81045f6:	d008      	beq.n	810460a <osThreadNew+0x6e>
 81045f8:	69fb      	ldr	r3, [r7, #28]
 81045fa:	2b38      	cmp	r3, #56	@ 0x38
 81045fc:	d805      	bhi.n	810460a <osThreadNew+0x6e>
 81045fe:	687b      	ldr	r3, [r7, #4]
 8104600:	685b      	ldr	r3, [r3, #4]
 8104602:	f003 0301 	and.w	r3, r3, #1
 8104606:	2b00      	cmp	r3, #0
 8104608:	d001      	beq.n	810460e <osThreadNew+0x72>
        return (NULL);
 810460a:	2300      	movs	r3, #0
 810460c:	e054      	b.n	81046b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	695b      	ldr	r3, [r3, #20]
 8104612:	2b00      	cmp	r3, #0
 8104614:	d003      	beq.n	810461e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8104616:	687b      	ldr	r3, [r7, #4]
 8104618:	695b      	ldr	r3, [r3, #20]
 810461a:	089b      	lsrs	r3, r3, #2
 810461c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810461e:	687b      	ldr	r3, [r7, #4]
 8104620:	689b      	ldr	r3, [r3, #8]
 8104622:	2b00      	cmp	r3, #0
 8104624:	d00e      	beq.n	8104644 <osThreadNew+0xa8>
 8104626:	687b      	ldr	r3, [r7, #4]
 8104628:	68db      	ldr	r3, [r3, #12]
 810462a:	2b5b      	cmp	r3, #91	@ 0x5b
 810462c:	d90a      	bls.n	8104644 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810462e:	687b      	ldr	r3, [r7, #4]
 8104630:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8104632:	2b00      	cmp	r3, #0
 8104634:	d006      	beq.n	8104644 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8104636:	687b      	ldr	r3, [r7, #4]
 8104638:	695b      	ldr	r3, [r3, #20]
 810463a:	2b00      	cmp	r3, #0
 810463c:	d002      	beq.n	8104644 <osThreadNew+0xa8>
        mem = 1;
 810463e:	2301      	movs	r3, #1
 8104640:	61bb      	str	r3, [r7, #24]
 8104642:	e010      	b.n	8104666 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8104644:	687b      	ldr	r3, [r7, #4]
 8104646:	689b      	ldr	r3, [r3, #8]
 8104648:	2b00      	cmp	r3, #0
 810464a:	d10c      	bne.n	8104666 <osThreadNew+0xca>
 810464c:	687b      	ldr	r3, [r7, #4]
 810464e:	68db      	ldr	r3, [r3, #12]
 8104650:	2b00      	cmp	r3, #0
 8104652:	d108      	bne.n	8104666 <osThreadNew+0xca>
 8104654:	687b      	ldr	r3, [r7, #4]
 8104656:	691b      	ldr	r3, [r3, #16]
 8104658:	2b00      	cmp	r3, #0
 810465a:	d104      	bne.n	8104666 <osThreadNew+0xca>
          mem = 0;
 810465c:	2300      	movs	r3, #0
 810465e:	61bb      	str	r3, [r7, #24]
 8104660:	e001      	b.n	8104666 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8104662:	2300      	movs	r3, #0
 8104664:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8104666:	69bb      	ldr	r3, [r7, #24]
 8104668:	2b01      	cmp	r3, #1
 810466a:	d110      	bne.n	810468e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810466c:	687b      	ldr	r3, [r7, #4]
 810466e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8104670:	687a      	ldr	r2, [r7, #4]
 8104672:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8104674:	9202      	str	r2, [sp, #8]
 8104676:	9301      	str	r3, [sp, #4]
 8104678:	69fb      	ldr	r3, [r7, #28]
 810467a:	9300      	str	r3, [sp, #0]
 810467c:	68bb      	ldr	r3, [r7, #8]
 810467e:	6a3a      	ldr	r2, [r7, #32]
 8104680:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8104682:	68f8      	ldr	r0, [r7, #12]
 8104684:	f001 fa5c 	bl	8105b40 <xTaskCreateStatic>
 8104688:	4603      	mov	r3, r0
 810468a:	613b      	str	r3, [r7, #16]
 810468c:	e013      	b.n	81046b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810468e:	69bb      	ldr	r3, [r7, #24]
 8104690:	2b00      	cmp	r3, #0
 8104692:	d110      	bne.n	81046b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8104694:	6a3b      	ldr	r3, [r7, #32]
 8104696:	b29a      	uxth	r2, r3
 8104698:	f107 0310 	add.w	r3, r7, #16
 810469c:	9301      	str	r3, [sp, #4]
 810469e:	69fb      	ldr	r3, [r7, #28]
 81046a0:	9300      	str	r3, [sp, #0]
 81046a2:	68bb      	ldr	r3, [r7, #8]
 81046a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81046a6:	68f8      	ldr	r0, [r7, #12]
 81046a8:	f001 faaa 	bl	8105c00 <xTaskCreate>
 81046ac:	4603      	mov	r3, r0
 81046ae:	2b01      	cmp	r3, #1
 81046b0:	d001      	beq.n	81046b6 <osThreadNew+0x11a>
            hTask = NULL;
 81046b2:	2300      	movs	r3, #0
 81046b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 81046b6:	693b      	ldr	r3, [r7, #16]
}
 81046b8:	4618      	mov	r0, r3
 81046ba:	3728      	adds	r7, #40	@ 0x28
 81046bc:	46bd      	mov	sp, r7
 81046be:	bd80      	pop	{r7, pc}

081046c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 81046c0:	b580      	push	{r7, lr}
 81046c2:	b084      	sub	sp, #16
 81046c4:	af00      	add	r7, sp, #0
 81046c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81046c8:	f3ef 8305 	mrs	r3, IPSR
 81046cc:	60bb      	str	r3, [r7, #8]
  return(result);
 81046ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81046d0:	2b00      	cmp	r3, #0
 81046d2:	d003      	beq.n	81046dc <osDelay+0x1c>
    stat = osErrorISR;
 81046d4:	f06f 0305 	mvn.w	r3, #5
 81046d8:	60fb      	str	r3, [r7, #12]
 81046da:	e007      	b.n	81046ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 81046dc:	2300      	movs	r3, #0
 81046de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	2b00      	cmp	r3, #0
 81046e4:	d002      	beq.n	81046ec <osDelay+0x2c>
      vTaskDelay(ticks);
 81046e6:	6878      	ldr	r0, [r7, #4]
 81046e8:	f001 fbd0 	bl	8105e8c <vTaskDelay>
    }
  }

  return (stat);
 81046ec:	68fb      	ldr	r3, [r7, #12]
}
 81046ee:	4618      	mov	r0, r3
 81046f0:	3710      	adds	r7, #16
 81046f2:	46bd      	mov	sp, r7
 81046f4:	bd80      	pop	{r7, pc}
	...

081046f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 81046f8:	b480      	push	{r7}
 81046fa:	b085      	sub	sp, #20
 81046fc:	af00      	add	r7, sp, #0
 81046fe:	60f8      	str	r0, [r7, #12]
 8104700:	60b9      	str	r1, [r7, #8]
 8104702:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8104704:	68fb      	ldr	r3, [r7, #12]
 8104706:	4a07      	ldr	r2, [pc, #28]	@ (8104724 <vApplicationGetIdleTaskMemory+0x2c>)
 8104708:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810470a:	68bb      	ldr	r3, [r7, #8]
 810470c:	4a06      	ldr	r2, [pc, #24]	@ (8104728 <vApplicationGetIdleTaskMemory+0x30>)
 810470e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	2280      	movs	r2, #128	@ 0x80
 8104714:	601a      	str	r2, [r3, #0]
}
 8104716:	bf00      	nop
 8104718:	3714      	adds	r7, #20
 810471a:	46bd      	mov	sp, r7
 810471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104720:	4770      	bx	lr
 8104722:	bf00      	nop
 8104724:	100000dc 	.word	0x100000dc
 8104728:	10000138 	.word	0x10000138

0810472c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810472c:	b480      	push	{r7}
 810472e:	b085      	sub	sp, #20
 8104730:	af00      	add	r7, sp, #0
 8104732:	60f8      	str	r0, [r7, #12]
 8104734:	60b9      	str	r1, [r7, #8]
 8104736:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8104738:	68fb      	ldr	r3, [r7, #12]
 810473a:	4a07      	ldr	r2, [pc, #28]	@ (8104758 <vApplicationGetTimerTaskMemory+0x2c>)
 810473c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810473e:	68bb      	ldr	r3, [r7, #8]
 8104740:	4a06      	ldr	r2, [pc, #24]	@ (810475c <vApplicationGetTimerTaskMemory+0x30>)
 8104742:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8104744:	687b      	ldr	r3, [r7, #4]
 8104746:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810474a:	601a      	str	r2, [r3, #0]
}
 810474c:	bf00      	nop
 810474e:	3714      	adds	r7, #20
 8104750:	46bd      	mov	sp, r7
 8104752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104756:	4770      	bx	lr
 8104758:	10000338 	.word	0x10000338
 810475c:	10000394 	.word	0x10000394

08104760 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8104760:	b580      	push	{r7, lr}
 8104762:	b08a      	sub	sp, #40	@ 0x28
 8104764:	af00      	add	r7, sp, #0
 8104766:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8104768:	2300      	movs	r3, #0
 810476a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810476c:	f001 fc2c 	bl	8105fc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8104770:	4b5c      	ldr	r3, [pc, #368]	@ (81048e4 <pvPortMalloc+0x184>)
 8104772:	681b      	ldr	r3, [r3, #0]
 8104774:	2b00      	cmp	r3, #0
 8104776:	d101      	bne.n	810477c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8104778:	f000 f924 	bl	81049c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810477c:	4b5a      	ldr	r3, [pc, #360]	@ (81048e8 <pvPortMalloc+0x188>)
 810477e:	681a      	ldr	r2, [r3, #0]
 8104780:	687b      	ldr	r3, [r7, #4]
 8104782:	4013      	ands	r3, r2
 8104784:	2b00      	cmp	r3, #0
 8104786:	f040 8095 	bne.w	81048b4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810478a:	687b      	ldr	r3, [r7, #4]
 810478c:	2b00      	cmp	r3, #0
 810478e:	d01e      	beq.n	81047ce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8104790:	2208      	movs	r2, #8
 8104792:	687b      	ldr	r3, [r7, #4]
 8104794:	4413      	add	r3, r2
 8104796:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8104798:	687b      	ldr	r3, [r7, #4]
 810479a:	f003 0307 	and.w	r3, r3, #7
 810479e:	2b00      	cmp	r3, #0
 81047a0:	d015      	beq.n	81047ce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 81047a2:	687b      	ldr	r3, [r7, #4]
 81047a4:	f023 0307 	bic.w	r3, r3, #7
 81047a8:	3308      	adds	r3, #8
 81047aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 81047ac:	687b      	ldr	r3, [r7, #4]
 81047ae:	f003 0307 	and.w	r3, r3, #7
 81047b2:	2b00      	cmp	r3, #0
 81047b4:	d00b      	beq.n	81047ce <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81047b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81047ba:	f383 8811 	msr	BASEPRI, r3
 81047be:	f3bf 8f6f 	isb	sy
 81047c2:	f3bf 8f4f 	dsb	sy
 81047c6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 81047c8:	bf00      	nop
 81047ca:	bf00      	nop
 81047cc:	e7fd      	b.n	81047ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 81047ce:	687b      	ldr	r3, [r7, #4]
 81047d0:	2b00      	cmp	r3, #0
 81047d2:	d06f      	beq.n	81048b4 <pvPortMalloc+0x154>
 81047d4:	4b45      	ldr	r3, [pc, #276]	@ (81048ec <pvPortMalloc+0x18c>)
 81047d6:	681b      	ldr	r3, [r3, #0]
 81047d8:	687a      	ldr	r2, [r7, #4]
 81047da:	429a      	cmp	r2, r3
 81047dc:	d86a      	bhi.n	81048b4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 81047de:	4b44      	ldr	r3, [pc, #272]	@ (81048f0 <pvPortMalloc+0x190>)
 81047e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 81047e2:	4b43      	ldr	r3, [pc, #268]	@ (81048f0 <pvPortMalloc+0x190>)
 81047e4:	681b      	ldr	r3, [r3, #0]
 81047e6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81047e8:	e004      	b.n	81047f4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 81047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81047ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 81047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81047f0:	681b      	ldr	r3, [r3, #0]
 81047f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81047f6:	685b      	ldr	r3, [r3, #4]
 81047f8:	687a      	ldr	r2, [r7, #4]
 81047fa:	429a      	cmp	r2, r3
 81047fc:	d903      	bls.n	8104806 <pvPortMalloc+0xa6>
 81047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104800:	681b      	ldr	r3, [r3, #0]
 8104802:	2b00      	cmp	r3, #0
 8104804:	d1f1      	bne.n	81047ea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8104806:	4b37      	ldr	r3, [pc, #220]	@ (81048e4 <pvPortMalloc+0x184>)
 8104808:	681b      	ldr	r3, [r3, #0]
 810480a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810480c:	429a      	cmp	r2, r3
 810480e:	d051      	beq.n	81048b4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8104810:	6a3b      	ldr	r3, [r7, #32]
 8104812:	681b      	ldr	r3, [r3, #0]
 8104814:	2208      	movs	r2, #8
 8104816:	4413      	add	r3, r2
 8104818:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810481c:	681a      	ldr	r2, [r3, #0]
 810481e:	6a3b      	ldr	r3, [r7, #32]
 8104820:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8104822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104824:	685a      	ldr	r2, [r3, #4]
 8104826:	687b      	ldr	r3, [r7, #4]
 8104828:	1ad2      	subs	r2, r2, r3
 810482a:	2308      	movs	r3, #8
 810482c:	005b      	lsls	r3, r3, #1
 810482e:	429a      	cmp	r2, r3
 8104830:	d920      	bls.n	8104874 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8104832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104834:	687b      	ldr	r3, [r7, #4]
 8104836:	4413      	add	r3, r2
 8104838:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810483a:	69bb      	ldr	r3, [r7, #24]
 810483c:	f003 0307 	and.w	r3, r3, #7
 8104840:	2b00      	cmp	r3, #0
 8104842:	d00b      	beq.n	810485c <pvPortMalloc+0xfc>
	__asm volatile
 8104844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104848:	f383 8811 	msr	BASEPRI, r3
 810484c:	f3bf 8f6f 	isb	sy
 8104850:	f3bf 8f4f 	dsb	sy
 8104854:	613b      	str	r3, [r7, #16]
}
 8104856:	bf00      	nop
 8104858:	bf00      	nop
 810485a:	e7fd      	b.n	8104858 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810485e:	685a      	ldr	r2, [r3, #4]
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	1ad2      	subs	r2, r2, r3
 8104864:	69bb      	ldr	r3, [r7, #24]
 8104866:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8104868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810486a:	687a      	ldr	r2, [r7, #4]
 810486c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810486e:	69b8      	ldr	r0, [r7, #24]
 8104870:	f000 f90a 	bl	8104a88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8104874:	4b1d      	ldr	r3, [pc, #116]	@ (81048ec <pvPortMalloc+0x18c>)
 8104876:	681a      	ldr	r2, [r3, #0]
 8104878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810487a:	685b      	ldr	r3, [r3, #4]
 810487c:	1ad3      	subs	r3, r2, r3
 810487e:	4a1b      	ldr	r2, [pc, #108]	@ (81048ec <pvPortMalloc+0x18c>)
 8104880:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8104882:	4b1a      	ldr	r3, [pc, #104]	@ (81048ec <pvPortMalloc+0x18c>)
 8104884:	681a      	ldr	r2, [r3, #0]
 8104886:	4b1b      	ldr	r3, [pc, #108]	@ (81048f4 <pvPortMalloc+0x194>)
 8104888:	681b      	ldr	r3, [r3, #0]
 810488a:	429a      	cmp	r2, r3
 810488c:	d203      	bcs.n	8104896 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810488e:	4b17      	ldr	r3, [pc, #92]	@ (81048ec <pvPortMalloc+0x18c>)
 8104890:	681b      	ldr	r3, [r3, #0]
 8104892:	4a18      	ldr	r2, [pc, #96]	@ (81048f4 <pvPortMalloc+0x194>)
 8104894:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8104896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104898:	685a      	ldr	r2, [r3, #4]
 810489a:	4b13      	ldr	r3, [pc, #76]	@ (81048e8 <pvPortMalloc+0x188>)
 810489c:	681b      	ldr	r3, [r3, #0]
 810489e:	431a      	orrs	r2, r3
 81048a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81048a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 81048a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81048a6:	2200      	movs	r2, #0
 81048a8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 81048aa:	4b13      	ldr	r3, [pc, #76]	@ (81048f8 <pvPortMalloc+0x198>)
 81048ac:	681b      	ldr	r3, [r3, #0]
 81048ae:	3301      	adds	r3, #1
 81048b0:	4a11      	ldr	r2, [pc, #68]	@ (81048f8 <pvPortMalloc+0x198>)
 81048b2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 81048b4:	f001 fb96 	bl	8105fe4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 81048b8:	69fb      	ldr	r3, [r7, #28]
 81048ba:	f003 0307 	and.w	r3, r3, #7
 81048be:	2b00      	cmp	r3, #0
 81048c0:	d00b      	beq.n	81048da <pvPortMalloc+0x17a>
	__asm volatile
 81048c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81048c6:	f383 8811 	msr	BASEPRI, r3
 81048ca:	f3bf 8f6f 	isb	sy
 81048ce:	f3bf 8f4f 	dsb	sy
 81048d2:	60fb      	str	r3, [r7, #12]
}
 81048d4:	bf00      	nop
 81048d6:	bf00      	nop
 81048d8:	e7fd      	b.n	81048d6 <pvPortMalloc+0x176>
	return pvReturn;
 81048da:	69fb      	ldr	r3, [r7, #28]
}
 81048dc:	4618      	mov	r0, r3
 81048de:	3728      	adds	r7, #40	@ 0x28
 81048e0:	46bd      	mov	sp, r7
 81048e2:	bd80      	pop	{r7, pc}
 81048e4:	1000439c 	.word	0x1000439c
 81048e8:	100043b0 	.word	0x100043b0
 81048ec:	100043a0 	.word	0x100043a0
 81048f0:	10004394 	.word	0x10004394
 81048f4:	100043a4 	.word	0x100043a4
 81048f8:	100043a8 	.word	0x100043a8

081048fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 81048fc:	b580      	push	{r7, lr}
 81048fe:	b086      	sub	sp, #24
 8104900:	af00      	add	r7, sp, #0
 8104902:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8104904:	687b      	ldr	r3, [r7, #4]
 8104906:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8104908:	687b      	ldr	r3, [r7, #4]
 810490a:	2b00      	cmp	r3, #0
 810490c:	d04f      	beq.n	81049ae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810490e:	2308      	movs	r3, #8
 8104910:	425b      	negs	r3, r3
 8104912:	697a      	ldr	r2, [r7, #20]
 8104914:	4413      	add	r3, r2
 8104916:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8104918:	697b      	ldr	r3, [r7, #20]
 810491a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810491c:	693b      	ldr	r3, [r7, #16]
 810491e:	685a      	ldr	r2, [r3, #4]
 8104920:	4b25      	ldr	r3, [pc, #148]	@ (81049b8 <vPortFree+0xbc>)
 8104922:	681b      	ldr	r3, [r3, #0]
 8104924:	4013      	ands	r3, r2
 8104926:	2b00      	cmp	r3, #0
 8104928:	d10b      	bne.n	8104942 <vPortFree+0x46>
	__asm volatile
 810492a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810492e:	f383 8811 	msr	BASEPRI, r3
 8104932:	f3bf 8f6f 	isb	sy
 8104936:	f3bf 8f4f 	dsb	sy
 810493a:	60fb      	str	r3, [r7, #12]
}
 810493c:	bf00      	nop
 810493e:	bf00      	nop
 8104940:	e7fd      	b.n	810493e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8104942:	693b      	ldr	r3, [r7, #16]
 8104944:	681b      	ldr	r3, [r3, #0]
 8104946:	2b00      	cmp	r3, #0
 8104948:	d00b      	beq.n	8104962 <vPortFree+0x66>
	__asm volatile
 810494a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810494e:	f383 8811 	msr	BASEPRI, r3
 8104952:	f3bf 8f6f 	isb	sy
 8104956:	f3bf 8f4f 	dsb	sy
 810495a:	60bb      	str	r3, [r7, #8]
}
 810495c:	bf00      	nop
 810495e:	bf00      	nop
 8104960:	e7fd      	b.n	810495e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8104962:	693b      	ldr	r3, [r7, #16]
 8104964:	685a      	ldr	r2, [r3, #4]
 8104966:	4b14      	ldr	r3, [pc, #80]	@ (81049b8 <vPortFree+0xbc>)
 8104968:	681b      	ldr	r3, [r3, #0]
 810496a:	4013      	ands	r3, r2
 810496c:	2b00      	cmp	r3, #0
 810496e:	d01e      	beq.n	81049ae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8104970:	693b      	ldr	r3, [r7, #16]
 8104972:	681b      	ldr	r3, [r3, #0]
 8104974:	2b00      	cmp	r3, #0
 8104976:	d11a      	bne.n	81049ae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8104978:	693b      	ldr	r3, [r7, #16]
 810497a:	685a      	ldr	r2, [r3, #4]
 810497c:	4b0e      	ldr	r3, [pc, #56]	@ (81049b8 <vPortFree+0xbc>)
 810497e:	681b      	ldr	r3, [r3, #0]
 8104980:	43db      	mvns	r3, r3
 8104982:	401a      	ands	r2, r3
 8104984:	693b      	ldr	r3, [r7, #16]
 8104986:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8104988:	f001 fb1e 	bl	8105fc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810498c:	693b      	ldr	r3, [r7, #16]
 810498e:	685a      	ldr	r2, [r3, #4]
 8104990:	4b0a      	ldr	r3, [pc, #40]	@ (81049bc <vPortFree+0xc0>)
 8104992:	681b      	ldr	r3, [r3, #0]
 8104994:	4413      	add	r3, r2
 8104996:	4a09      	ldr	r2, [pc, #36]	@ (81049bc <vPortFree+0xc0>)
 8104998:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810499a:	6938      	ldr	r0, [r7, #16]
 810499c:	f000 f874 	bl	8104a88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 81049a0:	4b07      	ldr	r3, [pc, #28]	@ (81049c0 <vPortFree+0xc4>)
 81049a2:	681b      	ldr	r3, [r3, #0]
 81049a4:	3301      	adds	r3, #1
 81049a6:	4a06      	ldr	r2, [pc, #24]	@ (81049c0 <vPortFree+0xc4>)
 81049a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 81049aa:	f001 fb1b 	bl	8105fe4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81049ae:	bf00      	nop
 81049b0:	3718      	adds	r7, #24
 81049b2:	46bd      	mov	sp, r7
 81049b4:	bd80      	pop	{r7, pc}
 81049b6:	bf00      	nop
 81049b8:	100043b0 	.word	0x100043b0
 81049bc:	100043a0 	.word	0x100043a0
 81049c0:	100043ac 	.word	0x100043ac

081049c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 81049c4:	b480      	push	{r7}
 81049c6:	b085      	sub	sp, #20
 81049c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 81049ca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 81049ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 81049d0:	4b27      	ldr	r3, [pc, #156]	@ (8104a70 <prvHeapInit+0xac>)
 81049d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 81049d4:	68fb      	ldr	r3, [r7, #12]
 81049d6:	f003 0307 	and.w	r3, r3, #7
 81049da:	2b00      	cmp	r3, #0
 81049dc:	d00c      	beq.n	81049f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 81049de:	68fb      	ldr	r3, [r7, #12]
 81049e0:	3307      	adds	r3, #7
 81049e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81049e4:	68fb      	ldr	r3, [r7, #12]
 81049e6:	f023 0307 	bic.w	r3, r3, #7
 81049ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 81049ec:	68ba      	ldr	r2, [r7, #8]
 81049ee:	68fb      	ldr	r3, [r7, #12]
 81049f0:	1ad3      	subs	r3, r2, r3
 81049f2:	4a1f      	ldr	r2, [pc, #124]	@ (8104a70 <prvHeapInit+0xac>)
 81049f4:	4413      	add	r3, r2
 81049f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 81049f8:	68fb      	ldr	r3, [r7, #12]
 81049fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 81049fc:	4a1d      	ldr	r2, [pc, #116]	@ (8104a74 <prvHeapInit+0xb0>)
 81049fe:	687b      	ldr	r3, [r7, #4]
 8104a00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8104a02:	4b1c      	ldr	r3, [pc, #112]	@ (8104a74 <prvHeapInit+0xb0>)
 8104a04:	2200      	movs	r2, #0
 8104a06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8104a08:	687b      	ldr	r3, [r7, #4]
 8104a0a:	68ba      	ldr	r2, [r7, #8]
 8104a0c:	4413      	add	r3, r2
 8104a0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8104a10:	2208      	movs	r2, #8
 8104a12:	68fb      	ldr	r3, [r7, #12]
 8104a14:	1a9b      	subs	r3, r3, r2
 8104a16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8104a18:	68fb      	ldr	r3, [r7, #12]
 8104a1a:	f023 0307 	bic.w	r3, r3, #7
 8104a1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8104a20:	68fb      	ldr	r3, [r7, #12]
 8104a22:	4a15      	ldr	r2, [pc, #84]	@ (8104a78 <prvHeapInit+0xb4>)
 8104a24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8104a26:	4b14      	ldr	r3, [pc, #80]	@ (8104a78 <prvHeapInit+0xb4>)
 8104a28:	681b      	ldr	r3, [r3, #0]
 8104a2a:	2200      	movs	r2, #0
 8104a2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8104a2e:	4b12      	ldr	r3, [pc, #72]	@ (8104a78 <prvHeapInit+0xb4>)
 8104a30:	681b      	ldr	r3, [r3, #0]
 8104a32:	2200      	movs	r2, #0
 8104a34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8104a36:	687b      	ldr	r3, [r7, #4]
 8104a38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8104a3a:	683b      	ldr	r3, [r7, #0]
 8104a3c:	68fa      	ldr	r2, [r7, #12]
 8104a3e:	1ad2      	subs	r2, r2, r3
 8104a40:	683b      	ldr	r3, [r7, #0]
 8104a42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8104a44:	4b0c      	ldr	r3, [pc, #48]	@ (8104a78 <prvHeapInit+0xb4>)
 8104a46:	681a      	ldr	r2, [r3, #0]
 8104a48:	683b      	ldr	r3, [r7, #0]
 8104a4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8104a4c:	683b      	ldr	r3, [r7, #0]
 8104a4e:	685b      	ldr	r3, [r3, #4]
 8104a50:	4a0a      	ldr	r2, [pc, #40]	@ (8104a7c <prvHeapInit+0xb8>)
 8104a52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8104a54:	683b      	ldr	r3, [r7, #0]
 8104a56:	685b      	ldr	r3, [r3, #4]
 8104a58:	4a09      	ldr	r2, [pc, #36]	@ (8104a80 <prvHeapInit+0xbc>)
 8104a5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8104a5c:	4b09      	ldr	r3, [pc, #36]	@ (8104a84 <prvHeapInit+0xc0>)
 8104a5e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8104a62:	601a      	str	r2, [r3, #0]
}
 8104a64:	bf00      	nop
 8104a66:	3714      	adds	r7, #20
 8104a68:	46bd      	mov	sp, r7
 8104a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a6e:	4770      	bx	lr
 8104a70:	10000794 	.word	0x10000794
 8104a74:	10004394 	.word	0x10004394
 8104a78:	1000439c 	.word	0x1000439c
 8104a7c:	100043a4 	.word	0x100043a4
 8104a80:	100043a0 	.word	0x100043a0
 8104a84:	100043b0 	.word	0x100043b0

08104a88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8104a88:	b480      	push	{r7}
 8104a8a:	b085      	sub	sp, #20
 8104a8c:	af00      	add	r7, sp, #0
 8104a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8104a90:	4b28      	ldr	r3, [pc, #160]	@ (8104b34 <prvInsertBlockIntoFreeList+0xac>)
 8104a92:	60fb      	str	r3, [r7, #12]
 8104a94:	e002      	b.n	8104a9c <prvInsertBlockIntoFreeList+0x14>
 8104a96:	68fb      	ldr	r3, [r7, #12]
 8104a98:	681b      	ldr	r3, [r3, #0]
 8104a9a:	60fb      	str	r3, [r7, #12]
 8104a9c:	68fb      	ldr	r3, [r7, #12]
 8104a9e:	681b      	ldr	r3, [r3, #0]
 8104aa0:	687a      	ldr	r2, [r7, #4]
 8104aa2:	429a      	cmp	r2, r3
 8104aa4:	d8f7      	bhi.n	8104a96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8104aa6:	68fb      	ldr	r3, [r7, #12]
 8104aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8104aaa:	68fb      	ldr	r3, [r7, #12]
 8104aac:	685b      	ldr	r3, [r3, #4]
 8104aae:	68ba      	ldr	r2, [r7, #8]
 8104ab0:	4413      	add	r3, r2
 8104ab2:	687a      	ldr	r2, [r7, #4]
 8104ab4:	429a      	cmp	r2, r3
 8104ab6:	d108      	bne.n	8104aca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8104ab8:	68fb      	ldr	r3, [r7, #12]
 8104aba:	685a      	ldr	r2, [r3, #4]
 8104abc:	687b      	ldr	r3, [r7, #4]
 8104abe:	685b      	ldr	r3, [r3, #4]
 8104ac0:	441a      	add	r2, r3
 8104ac2:	68fb      	ldr	r3, [r7, #12]
 8104ac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8104ac6:	68fb      	ldr	r3, [r7, #12]
 8104ac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8104aca:	687b      	ldr	r3, [r7, #4]
 8104acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8104ace:	687b      	ldr	r3, [r7, #4]
 8104ad0:	685b      	ldr	r3, [r3, #4]
 8104ad2:	68ba      	ldr	r2, [r7, #8]
 8104ad4:	441a      	add	r2, r3
 8104ad6:	68fb      	ldr	r3, [r7, #12]
 8104ad8:	681b      	ldr	r3, [r3, #0]
 8104ada:	429a      	cmp	r2, r3
 8104adc:	d118      	bne.n	8104b10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8104ade:	68fb      	ldr	r3, [r7, #12]
 8104ae0:	681a      	ldr	r2, [r3, #0]
 8104ae2:	4b15      	ldr	r3, [pc, #84]	@ (8104b38 <prvInsertBlockIntoFreeList+0xb0>)
 8104ae4:	681b      	ldr	r3, [r3, #0]
 8104ae6:	429a      	cmp	r2, r3
 8104ae8:	d00d      	beq.n	8104b06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8104aea:	687b      	ldr	r3, [r7, #4]
 8104aec:	685a      	ldr	r2, [r3, #4]
 8104aee:	68fb      	ldr	r3, [r7, #12]
 8104af0:	681b      	ldr	r3, [r3, #0]
 8104af2:	685b      	ldr	r3, [r3, #4]
 8104af4:	441a      	add	r2, r3
 8104af6:	687b      	ldr	r3, [r7, #4]
 8104af8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8104afa:	68fb      	ldr	r3, [r7, #12]
 8104afc:	681b      	ldr	r3, [r3, #0]
 8104afe:	681a      	ldr	r2, [r3, #0]
 8104b00:	687b      	ldr	r3, [r7, #4]
 8104b02:	601a      	str	r2, [r3, #0]
 8104b04:	e008      	b.n	8104b18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8104b06:	4b0c      	ldr	r3, [pc, #48]	@ (8104b38 <prvInsertBlockIntoFreeList+0xb0>)
 8104b08:	681a      	ldr	r2, [r3, #0]
 8104b0a:	687b      	ldr	r3, [r7, #4]
 8104b0c:	601a      	str	r2, [r3, #0]
 8104b0e:	e003      	b.n	8104b18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8104b10:	68fb      	ldr	r3, [r7, #12]
 8104b12:	681a      	ldr	r2, [r3, #0]
 8104b14:	687b      	ldr	r3, [r7, #4]
 8104b16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8104b18:	68fa      	ldr	r2, [r7, #12]
 8104b1a:	687b      	ldr	r3, [r7, #4]
 8104b1c:	429a      	cmp	r2, r3
 8104b1e:	d002      	beq.n	8104b26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8104b20:	68fb      	ldr	r3, [r7, #12]
 8104b22:	687a      	ldr	r2, [r7, #4]
 8104b24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8104b26:	bf00      	nop
 8104b28:	3714      	adds	r7, #20
 8104b2a:	46bd      	mov	sp, r7
 8104b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b30:	4770      	bx	lr
 8104b32:	bf00      	nop
 8104b34:	10004394 	.word	0x10004394
 8104b38:	1000439c 	.word	0x1000439c

08104b3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8104b3c:	b480      	push	{r7}
 8104b3e:	b083      	sub	sp, #12
 8104b40:	af00      	add	r7, sp, #0
 8104b42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8104b44:	687b      	ldr	r3, [r7, #4]
 8104b46:	f103 0208 	add.w	r2, r3, #8
 8104b4a:	687b      	ldr	r3, [r7, #4]
 8104b4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8104b4e:	687b      	ldr	r3, [r7, #4]
 8104b50:	f04f 32ff 	mov.w	r2, #4294967295
 8104b54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8104b56:	687b      	ldr	r3, [r7, #4]
 8104b58:	f103 0208 	add.w	r2, r3, #8
 8104b5c:	687b      	ldr	r3, [r7, #4]
 8104b5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8104b60:	687b      	ldr	r3, [r7, #4]
 8104b62:	f103 0208 	add.w	r2, r3, #8
 8104b66:	687b      	ldr	r3, [r7, #4]
 8104b68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8104b6a:	687b      	ldr	r3, [r7, #4]
 8104b6c:	2200      	movs	r2, #0
 8104b6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8104b70:	bf00      	nop
 8104b72:	370c      	adds	r7, #12
 8104b74:	46bd      	mov	sp, r7
 8104b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b7a:	4770      	bx	lr

08104b7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8104b7c:	b480      	push	{r7}
 8104b7e:	b083      	sub	sp, #12
 8104b80:	af00      	add	r7, sp, #0
 8104b82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8104b84:	687b      	ldr	r3, [r7, #4]
 8104b86:	2200      	movs	r2, #0
 8104b88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8104b8a:	bf00      	nop
 8104b8c:	370c      	adds	r7, #12
 8104b8e:	46bd      	mov	sp, r7
 8104b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b94:	4770      	bx	lr

08104b96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8104b96:	b480      	push	{r7}
 8104b98:	b085      	sub	sp, #20
 8104b9a:	af00      	add	r7, sp, #0
 8104b9c:	6078      	str	r0, [r7, #4]
 8104b9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8104ba0:	687b      	ldr	r3, [r7, #4]
 8104ba2:	685b      	ldr	r3, [r3, #4]
 8104ba4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8104ba6:	683b      	ldr	r3, [r7, #0]
 8104ba8:	68fa      	ldr	r2, [r7, #12]
 8104baa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8104bac:	68fb      	ldr	r3, [r7, #12]
 8104bae:	689a      	ldr	r2, [r3, #8]
 8104bb0:	683b      	ldr	r3, [r7, #0]
 8104bb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8104bb4:	68fb      	ldr	r3, [r7, #12]
 8104bb6:	689b      	ldr	r3, [r3, #8]
 8104bb8:	683a      	ldr	r2, [r7, #0]
 8104bba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8104bbc:	68fb      	ldr	r3, [r7, #12]
 8104bbe:	683a      	ldr	r2, [r7, #0]
 8104bc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8104bc2:	683b      	ldr	r3, [r7, #0]
 8104bc4:	687a      	ldr	r2, [r7, #4]
 8104bc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8104bc8:	687b      	ldr	r3, [r7, #4]
 8104bca:	681b      	ldr	r3, [r3, #0]
 8104bcc:	1c5a      	adds	r2, r3, #1
 8104bce:	687b      	ldr	r3, [r7, #4]
 8104bd0:	601a      	str	r2, [r3, #0]
}
 8104bd2:	bf00      	nop
 8104bd4:	3714      	adds	r7, #20
 8104bd6:	46bd      	mov	sp, r7
 8104bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bdc:	4770      	bx	lr

08104bde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8104bde:	b480      	push	{r7}
 8104be0:	b085      	sub	sp, #20
 8104be2:	af00      	add	r7, sp, #0
 8104be4:	6078      	str	r0, [r7, #4]
 8104be6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8104be8:	683b      	ldr	r3, [r7, #0]
 8104bea:	681b      	ldr	r3, [r3, #0]
 8104bec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8104bee:	68bb      	ldr	r3, [r7, #8]
 8104bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104bf4:	d103      	bne.n	8104bfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8104bf6:	687b      	ldr	r3, [r7, #4]
 8104bf8:	691b      	ldr	r3, [r3, #16]
 8104bfa:	60fb      	str	r3, [r7, #12]
 8104bfc:	e00c      	b.n	8104c18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8104bfe:	687b      	ldr	r3, [r7, #4]
 8104c00:	3308      	adds	r3, #8
 8104c02:	60fb      	str	r3, [r7, #12]
 8104c04:	e002      	b.n	8104c0c <vListInsert+0x2e>
 8104c06:	68fb      	ldr	r3, [r7, #12]
 8104c08:	685b      	ldr	r3, [r3, #4]
 8104c0a:	60fb      	str	r3, [r7, #12]
 8104c0c:	68fb      	ldr	r3, [r7, #12]
 8104c0e:	685b      	ldr	r3, [r3, #4]
 8104c10:	681b      	ldr	r3, [r3, #0]
 8104c12:	68ba      	ldr	r2, [r7, #8]
 8104c14:	429a      	cmp	r2, r3
 8104c16:	d2f6      	bcs.n	8104c06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8104c18:	68fb      	ldr	r3, [r7, #12]
 8104c1a:	685a      	ldr	r2, [r3, #4]
 8104c1c:	683b      	ldr	r3, [r7, #0]
 8104c1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8104c20:	683b      	ldr	r3, [r7, #0]
 8104c22:	685b      	ldr	r3, [r3, #4]
 8104c24:	683a      	ldr	r2, [r7, #0]
 8104c26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8104c28:	683b      	ldr	r3, [r7, #0]
 8104c2a:	68fa      	ldr	r2, [r7, #12]
 8104c2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8104c2e:	68fb      	ldr	r3, [r7, #12]
 8104c30:	683a      	ldr	r2, [r7, #0]
 8104c32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8104c34:	683b      	ldr	r3, [r7, #0]
 8104c36:	687a      	ldr	r2, [r7, #4]
 8104c38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8104c3a:	687b      	ldr	r3, [r7, #4]
 8104c3c:	681b      	ldr	r3, [r3, #0]
 8104c3e:	1c5a      	adds	r2, r3, #1
 8104c40:	687b      	ldr	r3, [r7, #4]
 8104c42:	601a      	str	r2, [r3, #0]
}
 8104c44:	bf00      	nop
 8104c46:	3714      	adds	r7, #20
 8104c48:	46bd      	mov	sp, r7
 8104c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c4e:	4770      	bx	lr

08104c50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8104c50:	b480      	push	{r7}
 8104c52:	b085      	sub	sp, #20
 8104c54:	af00      	add	r7, sp, #0
 8104c56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8104c58:	687b      	ldr	r3, [r7, #4]
 8104c5a:	691b      	ldr	r3, [r3, #16]
 8104c5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8104c5e:	687b      	ldr	r3, [r7, #4]
 8104c60:	685b      	ldr	r3, [r3, #4]
 8104c62:	687a      	ldr	r2, [r7, #4]
 8104c64:	6892      	ldr	r2, [r2, #8]
 8104c66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8104c68:	687b      	ldr	r3, [r7, #4]
 8104c6a:	689b      	ldr	r3, [r3, #8]
 8104c6c:	687a      	ldr	r2, [r7, #4]
 8104c6e:	6852      	ldr	r2, [r2, #4]
 8104c70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8104c72:	68fb      	ldr	r3, [r7, #12]
 8104c74:	685b      	ldr	r3, [r3, #4]
 8104c76:	687a      	ldr	r2, [r7, #4]
 8104c78:	429a      	cmp	r2, r3
 8104c7a:	d103      	bne.n	8104c84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8104c7c:	687b      	ldr	r3, [r7, #4]
 8104c7e:	689a      	ldr	r2, [r3, #8]
 8104c80:	68fb      	ldr	r3, [r7, #12]
 8104c82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8104c84:	687b      	ldr	r3, [r7, #4]
 8104c86:	2200      	movs	r2, #0
 8104c88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8104c8a:	68fb      	ldr	r3, [r7, #12]
 8104c8c:	681b      	ldr	r3, [r3, #0]
 8104c8e:	1e5a      	subs	r2, r3, #1
 8104c90:	68fb      	ldr	r3, [r7, #12]
 8104c92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8104c94:	68fb      	ldr	r3, [r7, #12]
 8104c96:	681b      	ldr	r3, [r3, #0]
}
 8104c98:	4618      	mov	r0, r3
 8104c9a:	3714      	adds	r7, #20
 8104c9c:	46bd      	mov	sp, r7
 8104c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ca2:	4770      	bx	lr

08104ca4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8104ca4:	b480      	push	{r7}
 8104ca6:	b085      	sub	sp, #20
 8104ca8:	af00      	add	r7, sp, #0
 8104caa:	60f8      	str	r0, [r7, #12]
 8104cac:	60b9      	str	r1, [r7, #8]
 8104cae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8104cb0:	68fb      	ldr	r3, [r7, #12]
 8104cb2:	3b04      	subs	r3, #4
 8104cb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8104cb6:	68fb      	ldr	r3, [r7, #12]
 8104cb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8104cbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8104cbe:	68fb      	ldr	r3, [r7, #12]
 8104cc0:	3b04      	subs	r3, #4
 8104cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8104cc4:	68bb      	ldr	r3, [r7, #8]
 8104cc6:	f023 0201 	bic.w	r2, r3, #1
 8104cca:	68fb      	ldr	r3, [r7, #12]
 8104ccc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8104cce:	68fb      	ldr	r3, [r7, #12]
 8104cd0:	3b04      	subs	r3, #4
 8104cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8104cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8104d08 <pxPortInitialiseStack+0x64>)
 8104cd6:	68fb      	ldr	r3, [r7, #12]
 8104cd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8104cda:	68fb      	ldr	r3, [r7, #12]
 8104cdc:	3b14      	subs	r3, #20
 8104cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8104ce0:	687a      	ldr	r2, [r7, #4]
 8104ce2:	68fb      	ldr	r3, [r7, #12]
 8104ce4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8104ce6:	68fb      	ldr	r3, [r7, #12]
 8104ce8:	3b04      	subs	r3, #4
 8104cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8104cec:	68fb      	ldr	r3, [r7, #12]
 8104cee:	f06f 0202 	mvn.w	r2, #2
 8104cf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8104cf4:	68fb      	ldr	r3, [r7, #12]
 8104cf6:	3b20      	subs	r3, #32
 8104cf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8104cfa:	68fb      	ldr	r3, [r7, #12]
}
 8104cfc:	4618      	mov	r0, r3
 8104cfe:	3714      	adds	r7, #20
 8104d00:	46bd      	mov	sp, r7
 8104d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d06:	4770      	bx	lr
 8104d08:	08104d0d 	.word	0x08104d0d

08104d0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8104d0c:	b480      	push	{r7}
 8104d0e:	b085      	sub	sp, #20
 8104d10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8104d12:	2300      	movs	r3, #0
 8104d14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8104d16:	4b13      	ldr	r3, [pc, #76]	@ (8104d64 <prvTaskExitError+0x58>)
 8104d18:	681b      	ldr	r3, [r3, #0]
 8104d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104d1e:	d00b      	beq.n	8104d38 <prvTaskExitError+0x2c>
	__asm volatile
 8104d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104d24:	f383 8811 	msr	BASEPRI, r3
 8104d28:	f3bf 8f6f 	isb	sy
 8104d2c:	f3bf 8f4f 	dsb	sy
 8104d30:	60fb      	str	r3, [r7, #12]
}
 8104d32:	bf00      	nop
 8104d34:	bf00      	nop
 8104d36:	e7fd      	b.n	8104d34 <prvTaskExitError+0x28>
	__asm volatile
 8104d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104d3c:	f383 8811 	msr	BASEPRI, r3
 8104d40:	f3bf 8f6f 	isb	sy
 8104d44:	f3bf 8f4f 	dsb	sy
 8104d48:	60bb      	str	r3, [r7, #8]
}
 8104d4a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8104d4c:	bf00      	nop
 8104d4e:	687b      	ldr	r3, [r7, #4]
 8104d50:	2b00      	cmp	r3, #0
 8104d52:	d0fc      	beq.n	8104d4e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8104d54:	bf00      	nop
 8104d56:	bf00      	nop
 8104d58:	3714      	adds	r7, #20
 8104d5a:	46bd      	mov	sp, r7
 8104d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d60:	4770      	bx	lr
 8104d62:	bf00      	nop
 8104d64:	1000001c 	.word	0x1000001c
	...

08104d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8104d70:	4b07      	ldr	r3, [pc, #28]	@ (8104d90 <pxCurrentTCBConst2>)
 8104d72:	6819      	ldr	r1, [r3, #0]
 8104d74:	6808      	ldr	r0, [r1, #0]
 8104d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104d7a:	f380 8809 	msr	PSP, r0
 8104d7e:	f3bf 8f6f 	isb	sy
 8104d82:	f04f 0000 	mov.w	r0, #0
 8104d86:	f380 8811 	msr	BASEPRI, r0
 8104d8a:	4770      	bx	lr
 8104d8c:	f3af 8000 	nop.w

08104d90 <pxCurrentTCBConst2>:
 8104d90:	100043fc 	.word	0x100043fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8104d94:	bf00      	nop
 8104d96:	bf00      	nop

08104d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8104d98:	4808      	ldr	r0, [pc, #32]	@ (8104dbc <prvPortStartFirstTask+0x24>)
 8104d9a:	6800      	ldr	r0, [r0, #0]
 8104d9c:	6800      	ldr	r0, [r0, #0]
 8104d9e:	f380 8808 	msr	MSP, r0
 8104da2:	f04f 0000 	mov.w	r0, #0
 8104da6:	f380 8814 	msr	CONTROL, r0
 8104daa:	b662      	cpsie	i
 8104dac:	b661      	cpsie	f
 8104dae:	f3bf 8f4f 	dsb	sy
 8104db2:	f3bf 8f6f 	isb	sy
 8104db6:	df00      	svc	0
 8104db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8104dba:	bf00      	nop
 8104dbc:	e000ed08 	.word	0xe000ed08

08104dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8104dc0:	b580      	push	{r7, lr}
 8104dc2:	b086      	sub	sp, #24
 8104dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8104dc6:	4b47      	ldr	r3, [pc, #284]	@ (8104ee4 <xPortStartScheduler+0x124>)
 8104dc8:	681b      	ldr	r3, [r3, #0]
 8104dca:	4a47      	ldr	r2, [pc, #284]	@ (8104ee8 <xPortStartScheduler+0x128>)
 8104dcc:	4293      	cmp	r3, r2
 8104dce:	d10b      	bne.n	8104de8 <xPortStartScheduler+0x28>
	__asm volatile
 8104dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104dd4:	f383 8811 	msr	BASEPRI, r3
 8104dd8:	f3bf 8f6f 	isb	sy
 8104ddc:	f3bf 8f4f 	dsb	sy
 8104de0:	60fb      	str	r3, [r7, #12]
}
 8104de2:	bf00      	nop
 8104de4:	bf00      	nop
 8104de6:	e7fd      	b.n	8104de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8104de8:	4b3e      	ldr	r3, [pc, #248]	@ (8104ee4 <xPortStartScheduler+0x124>)
 8104dea:	681b      	ldr	r3, [r3, #0]
 8104dec:	4a3f      	ldr	r2, [pc, #252]	@ (8104eec <xPortStartScheduler+0x12c>)
 8104dee:	4293      	cmp	r3, r2
 8104df0:	d10b      	bne.n	8104e0a <xPortStartScheduler+0x4a>
	__asm volatile
 8104df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104df6:	f383 8811 	msr	BASEPRI, r3
 8104dfa:	f3bf 8f6f 	isb	sy
 8104dfe:	f3bf 8f4f 	dsb	sy
 8104e02:	613b      	str	r3, [r7, #16]
}
 8104e04:	bf00      	nop
 8104e06:	bf00      	nop
 8104e08:	e7fd      	b.n	8104e06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8104e0a:	4b39      	ldr	r3, [pc, #228]	@ (8104ef0 <xPortStartScheduler+0x130>)
 8104e0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8104e0e:	697b      	ldr	r3, [r7, #20]
 8104e10:	781b      	ldrb	r3, [r3, #0]
 8104e12:	b2db      	uxtb	r3, r3
 8104e14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8104e16:	697b      	ldr	r3, [r7, #20]
 8104e18:	22ff      	movs	r2, #255	@ 0xff
 8104e1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8104e1c:	697b      	ldr	r3, [r7, #20]
 8104e1e:	781b      	ldrb	r3, [r3, #0]
 8104e20:	b2db      	uxtb	r3, r3
 8104e22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8104e24:	78fb      	ldrb	r3, [r7, #3]
 8104e26:	b2db      	uxtb	r3, r3
 8104e28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8104e2c:	b2da      	uxtb	r2, r3
 8104e2e:	4b31      	ldr	r3, [pc, #196]	@ (8104ef4 <xPortStartScheduler+0x134>)
 8104e30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8104e32:	4b31      	ldr	r3, [pc, #196]	@ (8104ef8 <xPortStartScheduler+0x138>)
 8104e34:	2207      	movs	r2, #7
 8104e36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8104e38:	e009      	b.n	8104e4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8104e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8104ef8 <xPortStartScheduler+0x138>)
 8104e3c:	681b      	ldr	r3, [r3, #0]
 8104e3e:	3b01      	subs	r3, #1
 8104e40:	4a2d      	ldr	r2, [pc, #180]	@ (8104ef8 <xPortStartScheduler+0x138>)
 8104e42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8104e44:	78fb      	ldrb	r3, [r7, #3]
 8104e46:	b2db      	uxtb	r3, r3
 8104e48:	005b      	lsls	r3, r3, #1
 8104e4a:	b2db      	uxtb	r3, r3
 8104e4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8104e4e:	78fb      	ldrb	r3, [r7, #3]
 8104e50:	b2db      	uxtb	r3, r3
 8104e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104e56:	2b80      	cmp	r3, #128	@ 0x80
 8104e58:	d0ef      	beq.n	8104e3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8104e5a:	4b27      	ldr	r3, [pc, #156]	@ (8104ef8 <xPortStartScheduler+0x138>)
 8104e5c:	681b      	ldr	r3, [r3, #0]
 8104e5e:	f1c3 0307 	rsb	r3, r3, #7
 8104e62:	2b04      	cmp	r3, #4
 8104e64:	d00b      	beq.n	8104e7e <xPortStartScheduler+0xbe>
	__asm volatile
 8104e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104e6a:	f383 8811 	msr	BASEPRI, r3
 8104e6e:	f3bf 8f6f 	isb	sy
 8104e72:	f3bf 8f4f 	dsb	sy
 8104e76:	60bb      	str	r3, [r7, #8]
}
 8104e78:	bf00      	nop
 8104e7a:	bf00      	nop
 8104e7c:	e7fd      	b.n	8104e7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8104e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8104ef8 <xPortStartScheduler+0x138>)
 8104e80:	681b      	ldr	r3, [r3, #0]
 8104e82:	021b      	lsls	r3, r3, #8
 8104e84:	4a1c      	ldr	r2, [pc, #112]	@ (8104ef8 <xPortStartScheduler+0x138>)
 8104e86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8104e88:	4b1b      	ldr	r3, [pc, #108]	@ (8104ef8 <xPortStartScheduler+0x138>)
 8104e8a:	681b      	ldr	r3, [r3, #0]
 8104e8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8104e90:	4a19      	ldr	r2, [pc, #100]	@ (8104ef8 <xPortStartScheduler+0x138>)
 8104e92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8104e94:	687b      	ldr	r3, [r7, #4]
 8104e96:	b2da      	uxtb	r2, r3
 8104e98:	697b      	ldr	r3, [r7, #20]
 8104e9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8104e9c:	4b17      	ldr	r3, [pc, #92]	@ (8104efc <xPortStartScheduler+0x13c>)
 8104e9e:	681b      	ldr	r3, [r3, #0]
 8104ea0:	4a16      	ldr	r2, [pc, #88]	@ (8104efc <xPortStartScheduler+0x13c>)
 8104ea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8104ea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8104ea8:	4b14      	ldr	r3, [pc, #80]	@ (8104efc <xPortStartScheduler+0x13c>)
 8104eaa:	681b      	ldr	r3, [r3, #0]
 8104eac:	4a13      	ldr	r2, [pc, #76]	@ (8104efc <xPortStartScheduler+0x13c>)
 8104eae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8104eb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8104eb4:	f000 f8da 	bl	810506c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8104eb8:	4b11      	ldr	r3, [pc, #68]	@ (8104f00 <xPortStartScheduler+0x140>)
 8104eba:	2200      	movs	r2, #0
 8104ebc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8104ebe:	f000 f8f9 	bl	81050b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8104ec2:	4b10      	ldr	r3, [pc, #64]	@ (8104f04 <xPortStartScheduler+0x144>)
 8104ec4:	681b      	ldr	r3, [r3, #0]
 8104ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8104f04 <xPortStartScheduler+0x144>)
 8104ec8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8104ecc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8104ece:	f7ff ff63 	bl	8104d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8104ed2:	f001 f9ef 	bl	81062b4 <vTaskSwitchContext>
	prvTaskExitError();
 8104ed6:	f7ff ff19 	bl	8104d0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8104eda:	2300      	movs	r3, #0
}
 8104edc:	4618      	mov	r0, r3
 8104ede:	3718      	adds	r7, #24
 8104ee0:	46bd      	mov	sp, r7
 8104ee2:	bd80      	pop	{r7, pc}
 8104ee4:	e000ed00 	.word	0xe000ed00
 8104ee8:	410fc271 	.word	0x410fc271
 8104eec:	410fc270 	.word	0x410fc270
 8104ef0:	e000e400 	.word	0xe000e400
 8104ef4:	100043b4 	.word	0x100043b4
 8104ef8:	100043b8 	.word	0x100043b8
 8104efc:	e000ed20 	.word	0xe000ed20
 8104f00:	1000001c 	.word	0x1000001c
 8104f04:	e000ef34 	.word	0xe000ef34

08104f08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8104f08:	b480      	push	{r7}
 8104f0a:	b083      	sub	sp, #12
 8104f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8104f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104f12:	f383 8811 	msr	BASEPRI, r3
 8104f16:	f3bf 8f6f 	isb	sy
 8104f1a:	f3bf 8f4f 	dsb	sy
 8104f1e:	607b      	str	r3, [r7, #4]
}
 8104f20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8104f22:	4b10      	ldr	r3, [pc, #64]	@ (8104f64 <vPortEnterCritical+0x5c>)
 8104f24:	681b      	ldr	r3, [r3, #0]
 8104f26:	3301      	adds	r3, #1
 8104f28:	4a0e      	ldr	r2, [pc, #56]	@ (8104f64 <vPortEnterCritical+0x5c>)
 8104f2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8104f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8104f64 <vPortEnterCritical+0x5c>)
 8104f2e:	681b      	ldr	r3, [r3, #0]
 8104f30:	2b01      	cmp	r3, #1
 8104f32:	d110      	bne.n	8104f56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8104f34:	4b0c      	ldr	r3, [pc, #48]	@ (8104f68 <vPortEnterCritical+0x60>)
 8104f36:	681b      	ldr	r3, [r3, #0]
 8104f38:	b2db      	uxtb	r3, r3
 8104f3a:	2b00      	cmp	r3, #0
 8104f3c:	d00b      	beq.n	8104f56 <vPortEnterCritical+0x4e>
	__asm volatile
 8104f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104f42:	f383 8811 	msr	BASEPRI, r3
 8104f46:	f3bf 8f6f 	isb	sy
 8104f4a:	f3bf 8f4f 	dsb	sy
 8104f4e:	603b      	str	r3, [r7, #0]
}
 8104f50:	bf00      	nop
 8104f52:	bf00      	nop
 8104f54:	e7fd      	b.n	8104f52 <vPortEnterCritical+0x4a>
	}
}
 8104f56:	bf00      	nop
 8104f58:	370c      	adds	r7, #12
 8104f5a:	46bd      	mov	sp, r7
 8104f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f60:	4770      	bx	lr
 8104f62:	bf00      	nop
 8104f64:	1000001c 	.word	0x1000001c
 8104f68:	e000ed04 	.word	0xe000ed04

08104f6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8104f6c:	b480      	push	{r7}
 8104f6e:	b083      	sub	sp, #12
 8104f70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8104f72:	4b12      	ldr	r3, [pc, #72]	@ (8104fbc <vPortExitCritical+0x50>)
 8104f74:	681b      	ldr	r3, [r3, #0]
 8104f76:	2b00      	cmp	r3, #0
 8104f78:	d10b      	bne.n	8104f92 <vPortExitCritical+0x26>
	__asm volatile
 8104f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104f7e:	f383 8811 	msr	BASEPRI, r3
 8104f82:	f3bf 8f6f 	isb	sy
 8104f86:	f3bf 8f4f 	dsb	sy
 8104f8a:	607b      	str	r3, [r7, #4]
}
 8104f8c:	bf00      	nop
 8104f8e:	bf00      	nop
 8104f90:	e7fd      	b.n	8104f8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8104f92:	4b0a      	ldr	r3, [pc, #40]	@ (8104fbc <vPortExitCritical+0x50>)
 8104f94:	681b      	ldr	r3, [r3, #0]
 8104f96:	3b01      	subs	r3, #1
 8104f98:	4a08      	ldr	r2, [pc, #32]	@ (8104fbc <vPortExitCritical+0x50>)
 8104f9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8104f9c:	4b07      	ldr	r3, [pc, #28]	@ (8104fbc <vPortExitCritical+0x50>)
 8104f9e:	681b      	ldr	r3, [r3, #0]
 8104fa0:	2b00      	cmp	r3, #0
 8104fa2:	d105      	bne.n	8104fb0 <vPortExitCritical+0x44>
 8104fa4:	2300      	movs	r3, #0
 8104fa6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8104fa8:	683b      	ldr	r3, [r7, #0]
 8104faa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8104fae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8104fb0:	bf00      	nop
 8104fb2:	370c      	adds	r7, #12
 8104fb4:	46bd      	mov	sp, r7
 8104fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104fba:	4770      	bx	lr
 8104fbc:	1000001c 	.word	0x1000001c

08104fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8104fc0:	f3ef 8009 	mrs	r0, PSP
 8104fc4:	f3bf 8f6f 	isb	sy
 8104fc8:	4b15      	ldr	r3, [pc, #84]	@ (8105020 <pxCurrentTCBConst>)
 8104fca:	681a      	ldr	r2, [r3, #0]
 8104fcc:	f01e 0f10 	tst.w	lr, #16
 8104fd0:	bf08      	it	eq
 8104fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8104fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104fda:	6010      	str	r0, [r2, #0]
 8104fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8104fe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8104fe4:	f380 8811 	msr	BASEPRI, r0
 8104fe8:	f3bf 8f4f 	dsb	sy
 8104fec:	f3bf 8f6f 	isb	sy
 8104ff0:	f001 f960 	bl	81062b4 <vTaskSwitchContext>
 8104ff4:	f04f 0000 	mov.w	r0, #0
 8104ff8:	f380 8811 	msr	BASEPRI, r0
 8104ffc:	bc09      	pop	{r0, r3}
 8104ffe:	6819      	ldr	r1, [r3, #0]
 8105000:	6808      	ldr	r0, [r1, #0]
 8105002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105006:	f01e 0f10 	tst.w	lr, #16
 810500a:	bf08      	it	eq
 810500c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8105010:	f380 8809 	msr	PSP, r0
 8105014:	f3bf 8f6f 	isb	sy
 8105018:	4770      	bx	lr
 810501a:	bf00      	nop
 810501c:	f3af 8000 	nop.w

08105020 <pxCurrentTCBConst>:
 8105020:	100043fc 	.word	0x100043fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8105024:	bf00      	nop
 8105026:	bf00      	nop

08105028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8105028:	b580      	push	{r7, lr}
 810502a:	b082      	sub	sp, #8
 810502c:	af00      	add	r7, sp, #0
	__asm volatile
 810502e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105032:	f383 8811 	msr	BASEPRI, r3
 8105036:	f3bf 8f6f 	isb	sy
 810503a:	f3bf 8f4f 	dsb	sy
 810503e:	607b      	str	r3, [r7, #4]
}
 8105040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8105042:	f001 f87d 	bl	8106140 <xTaskIncrementTick>
 8105046:	4603      	mov	r3, r0
 8105048:	2b00      	cmp	r3, #0
 810504a:	d003      	beq.n	8105054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810504c:	4b06      	ldr	r3, [pc, #24]	@ (8105068 <xPortSysTickHandler+0x40>)
 810504e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8105052:	601a      	str	r2, [r3, #0]
 8105054:	2300      	movs	r3, #0
 8105056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8105058:	683b      	ldr	r3, [r7, #0]
 810505a:	f383 8811 	msr	BASEPRI, r3
}
 810505e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8105060:	bf00      	nop
 8105062:	3708      	adds	r7, #8
 8105064:	46bd      	mov	sp, r7
 8105066:	bd80      	pop	{r7, pc}
 8105068:	e000ed04 	.word	0xe000ed04

0810506c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810506c:	b480      	push	{r7}
 810506e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8105070:	4b0b      	ldr	r3, [pc, #44]	@ (81050a0 <vPortSetupTimerInterrupt+0x34>)
 8105072:	2200      	movs	r2, #0
 8105074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8105076:	4b0b      	ldr	r3, [pc, #44]	@ (81050a4 <vPortSetupTimerInterrupt+0x38>)
 8105078:	2200      	movs	r2, #0
 810507a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810507c:	4b0a      	ldr	r3, [pc, #40]	@ (81050a8 <vPortSetupTimerInterrupt+0x3c>)
 810507e:	681b      	ldr	r3, [r3, #0]
 8105080:	4a0a      	ldr	r2, [pc, #40]	@ (81050ac <vPortSetupTimerInterrupt+0x40>)
 8105082:	fba2 2303 	umull	r2, r3, r2, r3
 8105086:	099b      	lsrs	r3, r3, #6
 8105088:	4a09      	ldr	r2, [pc, #36]	@ (81050b0 <vPortSetupTimerInterrupt+0x44>)
 810508a:	3b01      	subs	r3, #1
 810508c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810508e:	4b04      	ldr	r3, [pc, #16]	@ (81050a0 <vPortSetupTimerInterrupt+0x34>)
 8105090:	2207      	movs	r2, #7
 8105092:	601a      	str	r2, [r3, #0]
}
 8105094:	bf00      	nop
 8105096:	46bd      	mov	sp, r7
 8105098:	f85d 7b04 	ldr.w	r7, [sp], #4
 810509c:	4770      	bx	lr
 810509e:	bf00      	nop
 81050a0:	e000e010 	.word	0xe000e010
 81050a4:	e000e018 	.word	0xe000e018
 81050a8:	10000004 	.word	0x10000004
 81050ac:	10624dd3 	.word	0x10624dd3
 81050b0:	e000e014 	.word	0xe000e014

081050b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 81050b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 81050c4 <vPortEnableVFP+0x10>
 81050b8:	6801      	ldr	r1, [r0, #0]
 81050ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81050be:	6001      	str	r1, [r0, #0]
 81050c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 81050c2:	bf00      	nop
 81050c4:	e000ed88 	.word	0xe000ed88

081050c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 81050c8:	b480      	push	{r7}
 81050ca:	b085      	sub	sp, #20
 81050cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 81050ce:	f3ef 8305 	mrs	r3, IPSR
 81050d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 81050d4:	68fb      	ldr	r3, [r7, #12]
 81050d6:	2b0f      	cmp	r3, #15
 81050d8:	d915      	bls.n	8105106 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 81050da:	4a18      	ldr	r2, [pc, #96]	@ (810513c <vPortValidateInterruptPriority+0x74>)
 81050dc:	68fb      	ldr	r3, [r7, #12]
 81050de:	4413      	add	r3, r2
 81050e0:	781b      	ldrb	r3, [r3, #0]
 81050e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 81050e4:	4b16      	ldr	r3, [pc, #88]	@ (8105140 <vPortValidateInterruptPriority+0x78>)
 81050e6:	781b      	ldrb	r3, [r3, #0]
 81050e8:	7afa      	ldrb	r2, [r7, #11]
 81050ea:	429a      	cmp	r2, r3
 81050ec:	d20b      	bcs.n	8105106 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 81050ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81050f2:	f383 8811 	msr	BASEPRI, r3
 81050f6:	f3bf 8f6f 	isb	sy
 81050fa:	f3bf 8f4f 	dsb	sy
 81050fe:	607b      	str	r3, [r7, #4]
}
 8105100:	bf00      	nop
 8105102:	bf00      	nop
 8105104:	e7fd      	b.n	8105102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8105106:	4b0f      	ldr	r3, [pc, #60]	@ (8105144 <vPortValidateInterruptPriority+0x7c>)
 8105108:	681b      	ldr	r3, [r3, #0]
 810510a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810510e:	4b0e      	ldr	r3, [pc, #56]	@ (8105148 <vPortValidateInterruptPriority+0x80>)
 8105110:	681b      	ldr	r3, [r3, #0]
 8105112:	429a      	cmp	r2, r3
 8105114:	d90b      	bls.n	810512e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8105116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810511a:	f383 8811 	msr	BASEPRI, r3
 810511e:	f3bf 8f6f 	isb	sy
 8105122:	f3bf 8f4f 	dsb	sy
 8105126:	603b      	str	r3, [r7, #0]
}
 8105128:	bf00      	nop
 810512a:	bf00      	nop
 810512c:	e7fd      	b.n	810512a <vPortValidateInterruptPriority+0x62>
	}
 810512e:	bf00      	nop
 8105130:	3714      	adds	r7, #20
 8105132:	46bd      	mov	sp, r7
 8105134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105138:	4770      	bx	lr
 810513a:	bf00      	nop
 810513c:	e000e3f0 	.word	0xe000e3f0
 8105140:	100043b4 	.word	0x100043b4
 8105144:	e000ed0c 	.word	0xe000ed0c
 8105148:	100043b8 	.word	0x100043b8

0810514c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810514c:	b580      	push	{r7, lr}
 810514e:	b084      	sub	sp, #16
 8105150:	af00      	add	r7, sp, #0
 8105152:	6078      	str	r0, [r7, #4]
 8105154:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8105156:	687b      	ldr	r3, [r7, #4]
 8105158:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810515a:	68fb      	ldr	r3, [r7, #12]
 810515c:	2b00      	cmp	r3, #0
 810515e:	d10b      	bne.n	8105178 <xQueueGenericReset+0x2c>
	__asm volatile
 8105160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105164:	f383 8811 	msr	BASEPRI, r3
 8105168:	f3bf 8f6f 	isb	sy
 810516c:	f3bf 8f4f 	dsb	sy
 8105170:	60bb      	str	r3, [r7, #8]
}
 8105172:	bf00      	nop
 8105174:	bf00      	nop
 8105176:	e7fd      	b.n	8105174 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8105178:	f7ff fec6 	bl	8104f08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810517c:	68fb      	ldr	r3, [r7, #12]
 810517e:	681a      	ldr	r2, [r3, #0]
 8105180:	68fb      	ldr	r3, [r7, #12]
 8105182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105184:	68f9      	ldr	r1, [r7, #12]
 8105186:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8105188:	fb01 f303 	mul.w	r3, r1, r3
 810518c:	441a      	add	r2, r3
 810518e:	68fb      	ldr	r3, [r7, #12]
 8105190:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8105192:	68fb      	ldr	r3, [r7, #12]
 8105194:	2200      	movs	r2, #0
 8105196:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8105198:	68fb      	ldr	r3, [r7, #12]
 810519a:	681a      	ldr	r2, [r3, #0]
 810519c:	68fb      	ldr	r3, [r7, #12]
 810519e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81051a0:	68fb      	ldr	r3, [r7, #12]
 81051a2:	681a      	ldr	r2, [r3, #0]
 81051a4:	68fb      	ldr	r3, [r7, #12]
 81051a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81051a8:	3b01      	subs	r3, #1
 81051aa:	68f9      	ldr	r1, [r7, #12]
 81051ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 81051ae:	fb01 f303 	mul.w	r3, r1, r3
 81051b2:	441a      	add	r2, r3
 81051b4:	68fb      	ldr	r3, [r7, #12]
 81051b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 81051b8:	68fb      	ldr	r3, [r7, #12]
 81051ba:	22ff      	movs	r2, #255	@ 0xff
 81051bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 81051c0:	68fb      	ldr	r3, [r7, #12]
 81051c2:	22ff      	movs	r2, #255	@ 0xff
 81051c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 81051c8:	683b      	ldr	r3, [r7, #0]
 81051ca:	2b00      	cmp	r3, #0
 81051cc:	d114      	bne.n	81051f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81051ce:	68fb      	ldr	r3, [r7, #12]
 81051d0:	691b      	ldr	r3, [r3, #16]
 81051d2:	2b00      	cmp	r3, #0
 81051d4:	d01a      	beq.n	810520c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81051d6:	68fb      	ldr	r3, [r7, #12]
 81051d8:	3310      	adds	r3, #16
 81051da:	4618      	mov	r0, r3
 81051dc:	f001 f91a 	bl	8106414 <xTaskRemoveFromEventList>
 81051e0:	4603      	mov	r3, r0
 81051e2:	2b00      	cmp	r3, #0
 81051e4:	d012      	beq.n	810520c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 81051e6:	4b0d      	ldr	r3, [pc, #52]	@ (810521c <xQueueGenericReset+0xd0>)
 81051e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81051ec:	601a      	str	r2, [r3, #0]
 81051ee:	f3bf 8f4f 	dsb	sy
 81051f2:	f3bf 8f6f 	isb	sy
 81051f6:	e009      	b.n	810520c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 81051f8:	68fb      	ldr	r3, [r7, #12]
 81051fa:	3310      	adds	r3, #16
 81051fc:	4618      	mov	r0, r3
 81051fe:	f7ff fc9d 	bl	8104b3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8105202:	68fb      	ldr	r3, [r7, #12]
 8105204:	3324      	adds	r3, #36	@ 0x24
 8105206:	4618      	mov	r0, r3
 8105208:	f7ff fc98 	bl	8104b3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810520c:	f7ff feae 	bl	8104f6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8105210:	2301      	movs	r3, #1
}
 8105212:	4618      	mov	r0, r3
 8105214:	3710      	adds	r7, #16
 8105216:	46bd      	mov	sp, r7
 8105218:	bd80      	pop	{r7, pc}
 810521a:	bf00      	nop
 810521c:	e000ed04 	.word	0xe000ed04

08105220 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8105220:	b580      	push	{r7, lr}
 8105222:	b08e      	sub	sp, #56	@ 0x38
 8105224:	af02      	add	r7, sp, #8
 8105226:	60f8      	str	r0, [r7, #12]
 8105228:	60b9      	str	r1, [r7, #8]
 810522a:	607a      	str	r2, [r7, #4]
 810522c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810522e:	68fb      	ldr	r3, [r7, #12]
 8105230:	2b00      	cmp	r3, #0
 8105232:	d10b      	bne.n	810524c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8105234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105238:	f383 8811 	msr	BASEPRI, r3
 810523c:	f3bf 8f6f 	isb	sy
 8105240:	f3bf 8f4f 	dsb	sy
 8105244:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8105246:	bf00      	nop
 8105248:	bf00      	nop
 810524a:	e7fd      	b.n	8105248 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810524c:	683b      	ldr	r3, [r7, #0]
 810524e:	2b00      	cmp	r3, #0
 8105250:	d10b      	bne.n	810526a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8105252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105256:	f383 8811 	msr	BASEPRI, r3
 810525a:	f3bf 8f6f 	isb	sy
 810525e:	f3bf 8f4f 	dsb	sy
 8105262:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8105264:	bf00      	nop
 8105266:	bf00      	nop
 8105268:	e7fd      	b.n	8105266 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810526a:	687b      	ldr	r3, [r7, #4]
 810526c:	2b00      	cmp	r3, #0
 810526e:	d002      	beq.n	8105276 <xQueueGenericCreateStatic+0x56>
 8105270:	68bb      	ldr	r3, [r7, #8]
 8105272:	2b00      	cmp	r3, #0
 8105274:	d001      	beq.n	810527a <xQueueGenericCreateStatic+0x5a>
 8105276:	2301      	movs	r3, #1
 8105278:	e000      	b.n	810527c <xQueueGenericCreateStatic+0x5c>
 810527a:	2300      	movs	r3, #0
 810527c:	2b00      	cmp	r3, #0
 810527e:	d10b      	bne.n	8105298 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8105280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105284:	f383 8811 	msr	BASEPRI, r3
 8105288:	f3bf 8f6f 	isb	sy
 810528c:	f3bf 8f4f 	dsb	sy
 8105290:	623b      	str	r3, [r7, #32]
}
 8105292:	bf00      	nop
 8105294:	bf00      	nop
 8105296:	e7fd      	b.n	8105294 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8105298:	687b      	ldr	r3, [r7, #4]
 810529a:	2b00      	cmp	r3, #0
 810529c:	d102      	bne.n	81052a4 <xQueueGenericCreateStatic+0x84>
 810529e:	68bb      	ldr	r3, [r7, #8]
 81052a0:	2b00      	cmp	r3, #0
 81052a2:	d101      	bne.n	81052a8 <xQueueGenericCreateStatic+0x88>
 81052a4:	2301      	movs	r3, #1
 81052a6:	e000      	b.n	81052aa <xQueueGenericCreateStatic+0x8a>
 81052a8:	2300      	movs	r3, #0
 81052aa:	2b00      	cmp	r3, #0
 81052ac:	d10b      	bne.n	81052c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 81052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81052b2:	f383 8811 	msr	BASEPRI, r3
 81052b6:	f3bf 8f6f 	isb	sy
 81052ba:	f3bf 8f4f 	dsb	sy
 81052be:	61fb      	str	r3, [r7, #28]
}
 81052c0:	bf00      	nop
 81052c2:	bf00      	nop
 81052c4:	e7fd      	b.n	81052c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 81052c6:	2350      	movs	r3, #80	@ 0x50
 81052c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 81052ca:	697b      	ldr	r3, [r7, #20]
 81052cc:	2b50      	cmp	r3, #80	@ 0x50
 81052ce:	d00b      	beq.n	81052e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 81052d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81052d4:	f383 8811 	msr	BASEPRI, r3
 81052d8:	f3bf 8f6f 	isb	sy
 81052dc:	f3bf 8f4f 	dsb	sy
 81052e0:	61bb      	str	r3, [r7, #24]
}
 81052e2:	bf00      	nop
 81052e4:	bf00      	nop
 81052e6:	e7fd      	b.n	81052e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 81052e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81052ea:	683b      	ldr	r3, [r7, #0]
 81052ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 81052ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81052f0:	2b00      	cmp	r3, #0
 81052f2:	d00d      	beq.n	8105310 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 81052f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81052f6:	2201      	movs	r2, #1
 81052f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 81052fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8105300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105302:	9300      	str	r3, [sp, #0]
 8105304:	4613      	mov	r3, r2
 8105306:	687a      	ldr	r2, [r7, #4]
 8105308:	68b9      	ldr	r1, [r7, #8]
 810530a:	68f8      	ldr	r0, [r7, #12]
 810530c:	f000 f805 	bl	810531a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8105310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8105312:	4618      	mov	r0, r3
 8105314:	3730      	adds	r7, #48	@ 0x30
 8105316:	46bd      	mov	sp, r7
 8105318:	bd80      	pop	{r7, pc}

0810531a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810531a:	b580      	push	{r7, lr}
 810531c:	b084      	sub	sp, #16
 810531e:	af00      	add	r7, sp, #0
 8105320:	60f8      	str	r0, [r7, #12]
 8105322:	60b9      	str	r1, [r7, #8]
 8105324:	607a      	str	r2, [r7, #4]
 8105326:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8105328:	68bb      	ldr	r3, [r7, #8]
 810532a:	2b00      	cmp	r3, #0
 810532c:	d103      	bne.n	8105336 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810532e:	69bb      	ldr	r3, [r7, #24]
 8105330:	69ba      	ldr	r2, [r7, #24]
 8105332:	601a      	str	r2, [r3, #0]
 8105334:	e002      	b.n	810533c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8105336:	69bb      	ldr	r3, [r7, #24]
 8105338:	687a      	ldr	r2, [r7, #4]
 810533a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810533c:	69bb      	ldr	r3, [r7, #24]
 810533e:	68fa      	ldr	r2, [r7, #12]
 8105340:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8105342:	69bb      	ldr	r3, [r7, #24]
 8105344:	68ba      	ldr	r2, [r7, #8]
 8105346:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8105348:	2101      	movs	r1, #1
 810534a:	69b8      	ldr	r0, [r7, #24]
 810534c:	f7ff fefe 	bl	810514c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8105350:	69bb      	ldr	r3, [r7, #24]
 8105352:	78fa      	ldrb	r2, [r7, #3]
 8105354:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8105358:	bf00      	nop
 810535a:	3710      	adds	r7, #16
 810535c:	46bd      	mov	sp, r7
 810535e:	bd80      	pop	{r7, pc}

08105360 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8105360:	b580      	push	{r7, lr}
 8105362:	b08e      	sub	sp, #56	@ 0x38
 8105364:	af00      	add	r7, sp, #0
 8105366:	60f8      	str	r0, [r7, #12]
 8105368:	60b9      	str	r1, [r7, #8]
 810536a:	607a      	str	r2, [r7, #4]
 810536c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810536e:	2300      	movs	r3, #0
 8105370:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8105372:	68fb      	ldr	r3, [r7, #12]
 8105374:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8105376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105378:	2b00      	cmp	r3, #0
 810537a:	d10b      	bne.n	8105394 <xQueueGenericSend+0x34>
	__asm volatile
 810537c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105380:	f383 8811 	msr	BASEPRI, r3
 8105384:	f3bf 8f6f 	isb	sy
 8105388:	f3bf 8f4f 	dsb	sy
 810538c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810538e:	bf00      	nop
 8105390:	bf00      	nop
 8105392:	e7fd      	b.n	8105390 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8105394:	68bb      	ldr	r3, [r7, #8]
 8105396:	2b00      	cmp	r3, #0
 8105398:	d103      	bne.n	81053a2 <xQueueGenericSend+0x42>
 810539a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810539c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810539e:	2b00      	cmp	r3, #0
 81053a0:	d101      	bne.n	81053a6 <xQueueGenericSend+0x46>
 81053a2:	2301      	movs	r3, #1
 81053a4:	e000      	b.n	81053a8 <xQueueGenericSend+0x48>
 81053a6:	2300      	movs	r3, #0
 81053a8:	2b00      	cmp	r3, #0
 81053aa:	d10b      	bne.n	81053c4 <xQueueGenericSend+0x64>
	__asm volatile
 81053ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81053b0:	f383 8811 	msr	BASEPRI, r3
 81053b4:	f3bf 8f6f 	isb	sy
 81053b8:	f3bf 8f4f 	dsb	sy
 81053bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81053be:	bf00      	nop
 81053c0:	bf00      	nop
 81053c2:	e7fd      	b.n	81053c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81053c4:	683b      	ldr	r3, [r7, #0]
 81053c6:	2b02      	cmp	r3, #2
 81053c8:	d103      	bne.n	81053d2 <xQueueGenericSend+0x72>
 81053ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81053cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81053ce:	2b01      	cmp	r3, #1
 81053d0:	d101      	bne.n	81053d6 <xQueueGenericSend+0x76>
 81053d2:	2301      	movs	r3, #1
 81053d4:	e000      	b.n	81053d8 <xQueueGenericSend+0x78>
 81053d6:	2300      	movs	r3, #0
 81053d8:	2b00      	cmp	r3, #0
 81053da:	d10b      	bne.n	81053f4 <xQueueGenericSend+0x94>
	__asm volatile
 81053dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81053e0:	f383 8811 	msr	BASEPRI, r3
 81053e4:	f3bf 8f6f 	isb	sy
 81053e8:	f3bf 8f4f 	dsb	sy
 81053ec:	623b      	str	r3, [r7, #32]
}
 81053ee:	bf00      	nop
 81053f0:	bf00      	nop
 81053f2:	e7fd      	b.n	81053f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81053f4:	f001 f9ce 	bl	8106794 <xTaskGetSchedulerState>
 81053f8:	4603      	mov	r3, r0
 81053fa:	2b00      	cmp	r3, #0
 81053fc:	d102      	bne.n	8105404 <xQueueGenericSend+0xa4>
 81053fe:	687b      	ldr	r3, [r7, #4]
 8105400:	2b00      	cmp	r3, #0
 8105402:	d101      	bne.n	8105408 <xQueueGenericSend+0xa8>
 8105404:	2301      	movs	r3, #1
 8105406:	e000      	b.n	810540a <xQueueGenericSend+0xaa>
 8105408:	2300      	movs	r3, #0
 810540a:	2b00      	cmp	r3, #0
 810540c:	d10b      	bne.n	8105426 <xQueueGenericSend+0xc6>
	__asm volatile
 810540e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105412:	f383 8811 	msr	BASEPRI, r3
 8105416:	f3bf 8f6f 	isb	sy
 810541a:	f3bf 8f4f 	dsb	sy
 810541e:	61fb      	str	r3, [r7, #28]
}
 8105420:	bf00      	nop
 8105422:	bf00      	nop
 8105424:	e7fd      	b.n	8105422 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8105426:	f7ff fd6f 	bl	8104f08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810542a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810542c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105432:	429a      	cmp	r2, r3
 8105434:	d302      	bcc.n	810543c <xQueueGenericSend+0xdc>
 8105436:	683b      	ldr	r3, [r7, #0]
 8105438:	2b02      	cmp	r3, #2
 810543a:	d129      	bne.n	8105490 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810543c:	683a      	ldr	r2, [r7, #0]
 810543e:	68b9      	ldr	r1, [r7, #8]
 8105440:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8105442:	f000 fa0f 	bl	8105864 <prvCopyDataToQueue>
 8105446:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8105448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810544a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810544c:	2b00      	cmp	r3, #0
 810544e:	d010      	beq.n	8105472 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8105450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105452:	3324      	adds	r3, #36	@ 0x24
 8105454:	4618      	mov	r0, r3
 8105456:	f000 ffdd 	bl	8106414 <xTaskRemoveFromEventList>
 810545a:	4603      	mov	r3, r0
 810545c:	2b00      	cmp	r3, #0
 810545e:	d013      	beq.n	8105488 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8105460:	4b3f      	ldr	r3, [pc, #252]	@ (8105560 <xQueueGenericSend+0x200>)
 8105462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8105466:	601a      	str	r2, [r3, #0]
 8105468:	f3bf 8f4f 	dsb	sy
 810546c:	f3bf 8f6f 	isb	sy
 8105470:	e00a      	b.n	8105488 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8105472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105474:	2b00      	cmp	r3, #0
 8105476:	d007      	beq.n	8105488 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8105478:	4b39      	ldr	r3, [pc, #228]	@ (8105560 <xQueueGenericSend+0x200>)
 810547a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810547e:	601a      	str	r2, [r3, #0]
 8105480:	f3bf 8f4f 	dsb	sy
 8105484:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8105488:	f7ff fd70 	bl	8104f6c <vPortExitCritical>
				return pdPASS;
 810548c:	2301      	movs	r3, #1
 810548e:	e063      	b.n	8105558 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8105490:	687b      	ldr	r3, [r7, #4]
 8105492:	2b00      	cmp	r3, #0
 8105494:	d103      	bne.n	810549e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8105496:	f7ff fd69 	bl	8104f6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810549a:	2300      	movs	r3, #0
 810549c:	e05c      	b.n	8105558 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810549e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81054a0:	2b00      	cmp	r3, #0
 81054a2:	d106      	bne.n	81054b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81054a4:	f107 0314 	add.w	r3, r7, #20
 81054a8:	4618      	mov	r0, r3
 81054aa:	f001 f817 	bl	81064dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81054ae:	2301      	movs	r3, #1
 81054b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81054b2:	f7ff fd5b 	bl	8104f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81054b6:	f000 fd87 	bl	8105fc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81054ba:	f7ff fd25 	bl	8104f08 <vPortEnterCritical>
 81054be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81054c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81054c4:	b25b      	sxtb	r3, r3
 81054c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81054ca:	d103      	bne.n	81054d4 <xQueueGenericSend+0x174>
 81054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81054ce:	2200      	movs	r2, #0
 81054d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81054d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81054d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81054da:	b25b      	sxtb	r3, r3
 81054dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81054e0:	d103      	bne.n	81054ea <xQueueGenericSend+0x18a>
 81054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81054e4:	2200      	movs	r2, #0
 81054e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81054ea:	f7ff fd3f 	bl	8104f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81054ee:	1d3a      	adds	r2, r7, #4
 81054f0:	f107 0314 	add.w	r3, r7, #20
 81054f4:	4611      	mov	r1, r2
 81054f6:	4618      	mov	r0, r3
 81054f8:	f001 f806 	bl	8106508 <xTaskCheckForTimeOut>
 81054fc:	4603      	mov	r3, r0
 81054fe:	2b00      	cmp	r3, #0
 8105500:	d124      	bne.n	810554c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8105502:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8105504:	f000 faa6 	bl	8105a54 <prvIsQueueFull>
 8105508:	4603      	mov	r3, r0
 810550a:	2b00      	cmp	r3, #0
 810550c:	d018      	beq.n	8105540 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810550e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105510:	3310      	adds	r3, #16
 8105512:	687a      	ldr	r2, [r7, #4]
 8105514:	4611      	mov	r1, r2
 8105516:	4618      	mov	r0, r3
 8105518:	f000 ff2a 	bl	8106370 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810551c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810551e:	f000 fa31 	bl	8105984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8105522:	f000 fd5f 	bl	8105fe4 <xTaskResumeAll>
 8105526:	4603      	mov	r3, r0
 8105528:	2b00      	cmp	r3, #0
 810552a:	f47f af7c 	bne.w	8105426 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 810552e:	4b0c      	ldr	r3, [pc, #48]	@ (8105560 <xQueueGenericSend+0x200>)
 8105530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8105534:	601a      	str	r2, [r3, #0]
 8105536:	f3bf 8f4f 	dsb	sy
 810553a:	f3bf 8f6f 	isb	sy
 810553e:	e772      	b.n	8105426 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8105540:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8105542:	f000 fa1f 	bl	8105984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8105546:	f000 fd4d 	bl	8105fe4 <xTaskResumeAll>
 810554a:	e76c      	b.n	8105426 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810554c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810554e:	f000 fa19 	bl	8105984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8105552:	f000 fd47 	bl	8105fe4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8105556:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8105558:	4618      	mov	r0, r3
 810555a:	3738      	adds	r7, #56	@ 0x38
 810555c:	46bd      	mov	sp, r7
 810555e:	bd80      	pop	{r7, pc}
 8105560:	e000ed04 	.word	0xe000ed04

08105564 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8105564:	b580      	push	{r7, lr}
 8105566:	b090      	sub	sp, #64	@ 0x40
 8105568:	af00      	add	r7, sp, #0
 810556a:	60f8      	str	r0, [r7, #12]
 810556c:	60b9      	str	r1, [r7, #8]
 810556e:	607a      	str	r2, [r7, #4]
 8105570:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8105572:	68fb      	ldr	r3, [r7, #12]
 8105574:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8105576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105578:	2b00      	cmp	r3, #0
 810557a:	d10b      	bne.n	8105594 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 810557c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105580:	f383 8811 	msr	BASEPRI, r3
 8105584:	f3bf 8f6f 	isb	sy
 8105588:	f3bf 8f4f 	dsb	sy
 810558c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810558e:	bf00      	nop
 8105590:	bf00      	nop
 8105592:	e7fd      	b.n	8105590 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8105594:	68bb      	ldr	r3, [r7, #8]
 8105596:	2b00      	cmp	r3, #0
 8105598:	d103      	bne.n	81055a2 <xQueueGenericSendFromISR+0x3e>
 810559a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810559e:	2b00      	cmp	r3, #0
 81055a0:	d101      	bne.n	81055a6 <xQueueGenericSendFromISR+0x42>
 81055a2:	2301      	movs	r3, #1
 81055a4:	e000      	b.n	81055a8 <xQueueGenericSendFromISR+0x44>
 81055a6:	2300      	movs	r3, #0
 81055a8:	2b00      	cmp	r3, #0
 81055aa:	d10b      	bne.n	81055c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 81055ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81055b0:	f383 8811 	msr	BASEPRI, r3
 81055b4:	f3bf 8f6f 	isb	sy
 81055b8:	f3bf 8f4f 	dsb	sy
 81055bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81055be:	bf00      	nop
 81055c0:	bf00      	nop
 81055c2:	e7fd      	b.n	81055c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81055c4:	683b      	ldr	r3, [r7, #0]
 81055c6:	2b02      	cmp	r3, #2
 81055c8:	d103      	bne.n	81055d2 <xQueueGenericSendFromISR+0x6e>
 81055ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81055cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81055ce:	2b01      	cmp	r3, #1
 81055d0:	d101      	bne.n	81055d6 <xQueueGenericSendFromISR+0x72>
 81055d2:	2301      	movs	r3, #1
 81055d4:	e000      	b.n	81055d8 <xQueueGenericSendFromISR+0x74>
 81055d6:	2300      	movs	r3, #0
 81055d8:	2b00      	cmp	r3, #0
 81055da:	d10b      	bne.n	81055f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 81055dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81055e0:	f383 8811 	msr	BASEPRI, r3
 81055e4:	f3bf 8f6f 	isb	sy
 81055e8:	f3bf 8f4f 	dsb	sy
 81055ec:	623b      	str	r3, [r7, #32]
}
 81055ee:	bf00      	nop
 81055f0:	bf00      	nop
 81055f2:	e7fd      	b.n	81055f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81055f4:	f7ff fd68 	bl	81050c8 <vPortValidateInterruptPriority>
	__asm volatile
 81055f8:	f3ef 8211 	mrs	r2, BASEPRI
 81055fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105600:	f383 8811 	msr	BASEPRI, r3
 8105604:	f3bf 8f6f 	isb	sy
 8105608:	f3bf 8f4f 	dsb	sy
 810560c:	61fa      	str	r2, [r7, #28]
 810560e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8105610:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8105612:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8105614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105616:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8105618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810561a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810561c:	429a      	cmp	r2, r3
 810561e:	d302      	bcc.n	8105626 <xQueueGenericSendFromISR+0xc2>
 8105620:	683b      	ldr	r3, [r7, #0]
 8105622:	2b02      	cmp	r3, #2
 8105624:	d12f      	bne.n	8105686 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8105626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105628:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810562c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8105630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105634:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8105636:	683a      	ldr	r2, [r7, #0]
 8105638:	68b9      	ldr	r1, [r7, #8]
 810563a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810563c:	f000 f912 	bl	8105864 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8105640:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8105644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105648:	d112      	bne.n	8105670 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810564a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810564c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810564e:	2b00      	cmp	r3, #0
 8105650:	d016      	beq.n	8105680 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8105652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105654:	3324      	adds	r3, #36	@ 0x24
 8105656:	4618      	mov	r0, r3
 8105658:	f000 fedc 	bl	8106414 <xTaskRemoveFromEventList>
 810565c:	4603      	mov	r3, r0
 810565e:	2b00      	cmp	r3, #0
 8105660:	d00e      	beq.n	8105680 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8105662:	687b      	ldr	r3, [r7, #4]
 8105664:	2b00      	cmp	r3, #0
 8105666:	d00b      	beq.n	8105680 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8105668:	687b      	ldr	r3, [r7, #4]
 810566a:	2201      	movs	r2, #1
 810566c:	601a      	str	r2, [r3, #0]
 810566e:	e007      	b.n	8105680 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8105670:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8105674:	3301      	adds	r3, #1
 8105676:	b2db      	uxtb	r3, r3
 8105678:	b25a      	sxtb	r2, r3
 810567a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810567c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8105680:	2301      	movs	r3, #1
 8105682:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8105684:	e001      	b.n	810568a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8105686:	2300      	movs	r3, #0
 8105688:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810568a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810568c:	617b      	str	r3, [r7, #20]
	__asm volatile
 810568e:	697b      	ldr	r3, [r7, #20]
 8105690:	f383 8811 	msr	BASEPRI, r3
}
 8105694:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8105696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8105698:	4618      	mov	r0, r3
 810569a:	3740      	adds	r7, #64	@ 0x40
 810569c:	46bd      	mov	sp, r7
 810569e:	bd80      	pop	{r7, pc}

081056a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 81056a0:	b580      	push	{r7, lr}
 81056a2:	b08c      	sub	sp, #48	@ 0x30
 81056a4:	af00      	add	r7, sp, #0
 81056a6:	60f8      	str	r0, [r7, #12]
 81056a8:	60b9      	str	r1, [r7, #8]
 81056aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 81056ac:	2300      	movs	r3, #0
 81056ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 81056b0:	68fb      	ldr	r3, [r7, #12]
 81056b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 81056b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81056b6:	2b00      	cmp	r3, #0
 81056b8:	d10b      	bne.n	81056d2 <xQueueReceive+0x32>
	__asm volatile
 81056ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81056be:	f383 8811 	msr	BASEPRI, r3
 81056c2:	f3bf 8f6f 	isb	sy
 81056c6:	f3bf 8f4f 	dsb	sy
 81056ca:	623b      	str	r3, [r7, #32]
}
 81056cc:	bf00      	nop
 81056ce:	bf00      	nop
 81056d0:	e7fd      	b.n	81056ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81056d2:	68bb      	ldr	r3, [r7, #8]
 81056d4:	2b00      	cmp	r3, #0
 81056d6:	d103      	bne.n	81056e0 <xQueueReceive+0x40>
 81056d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81056da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81056dc:	2b00      	cmp	r3, #0
 81056de:	d101      	bne.n	81056e4 <xQueueReceive+0x44>
 81056e0:	2301      	movs	r3, #1
 81056e2:	e000      	b.n	81056e6 <xQueueReceive+0x46>
 81056e4:	2300      	movs	r3, #0
 81056e6:	2b00      	cmp	r3, #0
 81056e8:	d10b      	bne.n	8105702 <xQueueReceive+0x62>
	__asm volatile
 81056ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81056ee:	f383 8811 	msr	BASEPRI, r3
 81056f2:	f3bf 8f6f 	isb	sy
 81056f6:	f3bf 8f4f 	dsb	sy
 81056fa:	61fb      	str	r3, [r7, #28]
}
 81056fc:	bf00      	nop
 81056fe:	bf00      	nop
 8105700:	e7fd      	b.n	81056fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8105702:	f001 f847 	bl	8106794 <xTaskGetSchedulerState>
 8105706:	4603      	mov	r3, r0
 8105708:	2b00      	cmp	r3, #0
 810570a:	d102      	bne.n	8105712 <xQueueReceive+0x72>
 810570c:	687b      	ldr	r3, [r7, #4]
 810570e:	2b00      	cmp	r3, #0
 8105710:	d101      	bne.n	8105716 <xQueueReceive+0x76>
 8105712:	2301      	movs	r3, #1
 8105714:	e000      	b.n	8105718 <xQueueReceive+0x78>
 8105716:	2300      	movs	r3, #0
 8105718:	2b00      	cmp	r3, #0
 810571a:	d10b      	bne.n	8105734 <xQueueReceive+0x94>
	__asm volatile
 810571c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105720:	f383 8811 	msr	BASEPRI, r3
 8105724:	f3bf 8f6f 	isb	sy
 8105728:	f3bf 8f4f 	dsb	sy
 810572c:	61bb      	str	r3, [r7, #24]
}
 810572e:	bf00      	nop
 8105730:	bf00      	nop
 8105732:	e7fd      	b.n	8105730 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8105734:	f7ff fbe8 	bl	8104f08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8105738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810573a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810573c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105740:	2b00      	cmp	r3, #0
 8105742:	d01f      	beq.n	8105784 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8105744:	68b9      	ldr	r1, [r7, #8]
 8105746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105748:	f000 f8f6 	bl	8105938 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810574e:	1e5a      	subs	r2, r3, #1
 8105750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105752:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8105754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105756:	691b      	ldr	r3, [r3, #16]
 8105758:	2b00      	cmp	r3, #0
 810575a:	d00f      	beq.n	810577c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810575c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810575e:	3310      	adds	r3, #16
 8105760:	4618      	mov	r0, r3
 8105762:	f000 fe57 	bl	8106414 <xTaskRemoveFromEventList>
 8105766:	4603      	mov	r3, r0
 8105768:	2b00      	cmp	r3, #0
 810576a:	d007      	beq.n	810577c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810576c:	4b3c      	ldr	r3, [pc, #240]	@ (8105860 <xQueueReceive+0x1c0>)
 810576e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8105772:	601a      	str	r2, [r3, #0]
 8105774:	f3bf 8f4f 	dsb	sy
 8105778:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810577c:	f7ff fbf6 	bl	8104f6c <vPortExitCritical>
				return pdPASS;
 8105780:	2301      	movs	r3, #1
 8105782:	e069      	b.n	8105858 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8105784:	687b      	ldr	r3, [r7, #4]
 8105786:	2b00      	cmp	r3, #0
 8105788:	d103      	bne.n	8105792 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810578a:	f7ff fbef 	bl	8104f6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810578e:	2300      	movs	r3, #0
 8105790:	e062      	b.n	8105858 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8105792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105794:	2b00      	cmp	r3, #0
 8105796:	d106      	bne.n	81057a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8105798:	f107 0310 	add.w	r3, r7, #16
 810579c:	4618      	mov	r0, r3
 810579e:	f000 fe9d 	bl	81064dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81057a2:	2301      	movs	r3, #1
 81057a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81057a6:	f7ff fbe1 	bl	8104f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81057aa:	f000 fc0d 	bl	8105fc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81057ae:	f7ff fbab 	bl	8104f08 <vPortEnterCritical>
 81057b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81057b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81057b8:	b25b      	sxtb	r3, r3
 81057ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 81057be:	d103      	bne.n	81057c8 <xQueueReceive+0x128>
 81057c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81057c2:	2200      	movs	r2, #0
 81057c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81057c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81057ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81057ce:	b25b      	sxtb	r3, r3
 81057d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81057d4:	d103      	bne.n	81057de <xQueueReceive+0x13e>
 81057d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81057d8:	2200      	movs	r2, #0
 81057da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81057de:	f7ff fbc5 	bl	8104f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81057e2:	1d3a      	adds	r2, r7, #4
 81057e4:	f107 0310 	add.w	r3, r7, #16
 81057e8:	4611      	mov	r1, r2
 81057ea:	4618      	mov	r0, r3
 81057ec:	f000 fe8c 	bl	8106508 <xTaskCheckForTimeOut>
 81057f0:	4603      	mov	r3, r0
 81057f2:	2b00      	cmp	r3, #0
 81057f4:	d123      	bne.n	810583e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81057f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81057f8:	f000 f916 	bl	8105a28 <prvIsQueueEmpty>
 81057fc:	4603      	mov	r3, r0
 81057fe:	2b00      	cmp	r3, #0
 8105800:	d017      	beq.n	8105832 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8105802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105804:	3324      	adds	r3, #36	@ 0x24
 8105806:	687a      	ldr	r2, [r7, #4]
 8105808:	4611      	mov	r1, r2
 810580a:	4618      	mov	r0, r3
 810580c:	f000 fdb0 	bl	8106370 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8105810:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105812:	f000 f8b7 	bl	8105984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8105816:	f000 fbe5 	bl	8105fe4 <xTaskResumeAll>
 810581a:	4603      	mov	r3, r0
 810581c:	2b00      	cmp	r3, #0
 810581e:	d189      	bne.n	8105734 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8105820:	4b0f      	ldr	r3, [pc, #60]	@ (8105860 <xQueueReceive+0x1c0>)
 8105822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8105826:	601a      	str	r2, [r3, #0]
 8105828:	f3bf 8f4f 	dsb	sy
 810582c:	f3bf 8f6f 	isb	sy
 8105830:	e780      	b.n	8105734 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8105832:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105834:	f000 f8a6 	bl	8105984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8105838:	f000 fbd4 	bl	8105fe4 <xTaskResumeAll>
 810583c:	e77a      	b.n	8105734 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810583e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105840:	f000 f8a0 	bl	8105984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8105844:	f000 fbce 	bl	8105fe4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8105848:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810584a:	f000 f8ed 	bl	8105a28 <prvIsQueueEmpty>
 810584e:	4603      	mov	r3, r0
 8105850:	2b00      	cmp	r3, #0
 8105852:	f43f af6f 	beq.w	8105734 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8105856:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8105858:	4618      	mov	r0, r3
 810585a:	3730      	adds	r7, #48	@ 0x30
 810585c:	46bd      	mov	sp, r7
 810585e:	bd80      	pop	{r7, pc}
 8105860:	e000ed04 	.word	0xe000ed04

08105864 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8105864:	b580      	push	{r7, lr}
 8105866:	b086      	sub	sp, #24
 8105868:	af00      	add	r7, sp, #0
 810586a:	60f8      	str	r0, [r7, #12]
 810586c:	60b9      	str	r1, [r7, #8]
 810586e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8105870:	2300      	movs	r3, #0
 8105872:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8105874:	68fb      	ldr	r3, [r7, #12]
 8105876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105878:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810587a:	68fb      	ldr	r3, [r7, #12]
 810587c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810587e:	2b00      	cmp	r3, #0
 8105880:	d10d      	bne.n	810589e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8105882:	68fb      	ldr	r3, [r7, #12]
 8105884:	681b      	ldr	r3, [r3, #0]
 8105886:	2b00      	cmp	r3, #0
 8105888:	d14d      	bne.n	8105926 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810588a:	68fb      	ldr	r3, [r7, #12]
 810588c:	689b      	ldr	r3, [r3, #8]
 810588e:	4618      	mov	r0, r3
 8105890:	f000 ff9e 	bl	81067d0 <xTaskPriorityDisinherit>
 8105894:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8105896:	68fb      	ldr	r3, [r7, #12]
 8105898:	2200      	movs	r2, #0
 810589a:	609a      	str	r2, [r3, #8]
 810589c:	e043      	b.n	8105926 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810589e:	687b      	ldr	r3, [r7, #4]
 81058a0:	2b00      	cmp	r3, #0
 81058a2:	d119      	bne.n	81058d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81058a4:	68fb      	ldr	r3, [r7, #12]
 81058a6:	6858      	ldr	r0, [r3, #4]
 81058a8:	68fb      	ldr	r3, [r7, #12]
 81058aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81058ac:	461a      	mov	r2, r3
 81058ae:	68b9      	ldr	r1, [r7, #8]
 81058b0:	f001 fbd8 	bl	8107064 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81058b4:	68fb      	ldr	r3, [r7, #12]
 81058b6:	685a      	ldr	r2, [r3, #4]
 81058b8:	68fb      	ldr	r3, [r7, #12]
 81058ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81058bc:	441a      	add	r2, r3
 81058be:	68fb      	ldr	r3, [r7, #12]
 81058c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81058c2:	68fb      	ldr	r3, [r7, #12]
 81058c4:	685a      	ldr	r2, [r3, #4]
 81058c6:	68fb      	ldr	r3, [r7, #12]
 81058c8:	689b      	ldr	r3, [r3, #8]
 81058ca:	429a      	cmp	r2, r3
 81058cc:	d32b      	bcc.n	8105926 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 81058ce:	68fb      	ldr	r3, [r7, #12]
 81058d0:	681a      	ldr	r2, [r3, #0]
 81058d2:	68fb      	ldr	r3, [r7, #12]
 81058d4:	605a      	str	r2, [r3, #4]
 81058d6:	e026      	b.n	8105926 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 81058d8:	68fb      	ldr	r3, [r7, #12]
 81058da:	68d8      	ldr	r0, [r3, #12]
 81058dc:	68fb      	ldr	r3, [r7, #12]
 81058de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81058e0:	461a      	mov	r2, r3
 81058e2:	68b9      	ldr	r1, [r7, #8]
 81058e4:	f001 fbbe 	bl	8107064 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 81058e8:	68fb      	ldr	r3, [r7, #12]
 81058ea:	68da      	ldr	r2, [r3, #12]
 81058ec:	68fb      	ldr	r3, [r7, #12]
 81058ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81058f0:	425b      	negs	r3, r3
 81058f2:	441a      	add	r2, r3
 81058f4:	68fb      	ldr	r3, [r7, #12]
 81058f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81058f8:	68fb      	ldr	r3, [r7, #12]
 81058fa:	68da      	ldr	r2, [r3, #12]
 81058fc:	68fb      	ldr	r3, [r7, #12]
 81058fe:	681b      	ldr	r3, [r3, #0]
 8105900:	429a      	cmp	r2, r3
 8105902:	d207      	bcs.n	8105914 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8105904:	68fb      	ldr	r3, [r7, #12]
 8105906:	689a      	ldr	r2, [r3, #8]
 8105908:	68fb      	ldr	r3, [r7, #12]
 810590a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810590c:	425b      	negs	r3, r3
 810590e:	441a      	add	r2, r3
 8105910:	68fb      	ldr	r3, [r7, #12]
 8105912:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8105914:	687b      	ldr	r3, [r7, #4]
 8105916:	2b02      	cmp	r3, #2
 8105918:	d105      	bne.n	8105926 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810591a:	693b      	ldr	r3, [r7, #16]
 810591c:	2b00      	cmp	r3, #0
 810591e:	d002      	beq.n	8105926 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8105920:	693b      	ldr	r3, [r7, #16]
 8105922:	3b01      	subs	r3, #1
 8105924:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8105926:	693b      	ldr	r3, [r7, #16]
 8105928:	1c5a      	adds	r2, r3, #1
 810592a:	68fb      	ldr	r3, [r7, #12]
 810592c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 810592e:	697b      	ldr	r3, [r7, #20]
}
 8105930:	4618      	mov	r0, r3
 8105932:	3718      	adds	r7, #24
 8105934:	46bd      	mov	sp, r7
 8105936:	bd80      	pop	{r7, pc}

08105938 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8105938:	b580      	push	{r7, lr}
 810593a:	b082      	sub	sp, #8
 810593c:	af00      	add	r7, sp, #0
 810593e:	6078      	str	r0, [r7, #4]
 8105940:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8105942:	687b      	ldr	r3, [r7, #4]
 8105944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105946:	2b00      	cmp	r3, #0
 8105948:	d018      	beq.n	810597c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810594a:	687b      	ldr	r3, [r7, #4]
 810594c:	68da      	ldr	r2, [r3, #12]
 810594e:	687b      	ldr	r3, [r7, #4]
 8105950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105952:	441a      	add	r2, r3
 8105954:	687b      	ldr	r3, [r7, #4]
 8105956:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8105958:	687b      	ldr	r3, [r7, #4]
 810595a:	68da      	ldr	r2, [r3, #12]
 810595c:	687b      	ldr	r3, [r7, #4]
 810595e:	689b      	ldr	r3, [r3, #8]
 8105960:	429a      	cmp	r2, r3
 8105962:	d303      	bcc.n	810596c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8105964:	687b      	ldr	r3, [r7, #4]
 8105966:	681a      	ldr	r2, [r3, #0]
 8105968:	687b      	ldr	r3, [r7, #4]
 810596a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810596c:	687b      	ldr	r3, [r7, #4]
 810596e:	68d9      	ldr	r1, [r3, #12]
 8105970:	687b      	ldr	r3, [r7, #4]
 8105972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105974:	461a      	mov	r2, r3
 8105976:	6838      	ldr	r0, [r7, #0]
 8105978:	f001 fb74 	bl	8107064 <memcpy>
	}
}
 810597c:	bf00      	nop
 810597e:	3708      	adds	r7, #8
 8105980:	46bd      	mov	sp, r7
 8105982:	bd80      	pop	{r7, pc}

08105984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8105984:	b580      	push	{r7, lr}
 8105986:	b084      	sub	sp, #16
 8105988:	af00      	add	r7, sp, #0
 810598a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810598c:	f7ff fabc 	bl	8104f08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8105990:	687b      	ldr	r3, [r7, #4]
 8105992:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8105996:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8105998:	e011      	b.n	81059be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810599a:	687b      	ldr	r3, [r7, #4]
 810599c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810599e:	2b00      	cmp	r3, #0
 81059a0:	d012      	beq.n	81059c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81059a2:	687b      	ldr	r3, [r7, #4]
 81059a4:	3324      	adds	r3, #36	@ 0x24
 81059a6:	4618      	mov	r0, r3
 81059a8:	f000 fd34 	bl	8106414 <xTaskRemoveFromEventList>
 81059ac:	4603      	mov	r3, r0
 81059ae:	2b00      	cmp	r3, #0
 81059b0:	d001      	beq.n	81059b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 81059b2:	f000 fe0d 	bl	81065d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 81059b6:	7bfb      	ldrb	r3, [r7, #15]
 81059b8:	3b01      	subs	r3, #1
 81059ba:	b2db      	uxtb	r3, r3
 81059bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81059be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81059c2:	2b00      	cmp	r3, #0
 81059c4:	dce9      	bgt.n	810599a <prvUnlockQueue+0x16>
 81059c6:	e000      	b.n	81059ca <prvUnlockQueue+0x46>
					break;
 81059c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 81059ca:	687b      	ldr	r3, [r7, #4]
 81059cc:	22ff      	movs	r2, #255	@ 0xff
 81059ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 81059d2:	f7ff facb 	bl	8104f6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 81059d6:	f7ff fa97 	bl	8104f08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 81059da:	687b      	ldr	r3, [r7, #4]
 81059dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81059e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 81059e2:	e011      	b.n	8105a08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81059e4:	687b      	ldr	r3, [r7, #4]
 81059e6:	691b      	ldr	r3, [r3, #16]
 81059e8:	2b00      	cmp	r3, #0
 81059ea:	d012      	beq.n	8105a12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81059ec:	687b      	ldr	r3, [r7, #4]
 81059ee:	3310      	adds	r3, #16
 81059f0:	4618      	mov	r0, r3
 81059f2:	f000 fd0f 	bl	8106414 <xTaskRemoveFromEventList>
 81059f6:	4603      	mov	r3, r0
 81059f8:	2b00      	cmp	r3, #0
 81059fa:	d001      	beq.n	8105a00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 81059fc:	f000 fde8 	bl	81065d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8105a00:	7bbb      	ldrb	r3, [r7, #14]
 8105a02:	3b01      	subs	r3, #1
 8105a04:	b2db      	uxtb	r3, r3
 8105a06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8105a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8105a0c:	2b00      	cmp	r3, #0
 8105a0e:	dce9      	bgt.n	81059e4 <prvUnlockQueue+0x60>
 8105a10:	e000      	b.n	8105a14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8105a12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8105a14:	687b      	ldr	r3, [r7, #4]
 8105a16:	22ff      	movs	r2, #255	@ 0xff
 8105a18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8105a1c:	f7ff faa6 	bl	8104f6c <vPortExitCritical>
}
 8105a20:	bf00      	nop
 8105a22:	3710      	adds	r7, #16
 8105a24:	46bd      	mov	sp, r7
 8105a26:	bd80      	pop	{r7, pc}

08105a28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8105a28:	b580      	push	{r7, lr}
 8105a2a:	b084      	sub	sp, #16
 8105a2c:	af00      	add	r7, sp, #0
 8105a2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8105a30:	f7ff fa6a 	bl	8104f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8105a34:	687b      	ldr	r3, [r7, #4]
 8105a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105a38:	2b00      	cmp	r3, #0
 8105a3a:	d102      	bne.n	8105a42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8105a3c:	2301      	movs	r3, #1
 8105a3e:	60fb      	str	r3, [r7, #12]
 8105a40:	e001      	b.n	8105a46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8105a42:	2300      	movs	r3, #0
 8105a44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8105a46:	f7ff fa91 	bl	8104f6c <vPortExitCritical>

	return xReturn;
 8105a4a:	68fb      	ldr	r3, [r7, #12]
}
 8105a4c:	4618      	mov	r0, r3
 8105a4e:	3710      	adds	r7, #16
 8105a50:	46bd      	mov	sp, r7
 8105a52:	bd80      	pop	{r7, pc}

08105a54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8105a54:	b580      	push	{r7, lr}
 8105a56:	b084      	sub	sp, #16
 8105a58:	af00      	add	r7, sp, #0
 8105a5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8105a5c:	f7ff fa54 	bl	8104f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8105a60:	687b      	ldr	r3, [r7, #4]
 8105a62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8105a64:	687b      	ldr	r3, [r7, #4]
 8105a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105a68:	429a      	cmp	r2, r3
 8105a6a:	d102      	bne.n	8105a72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8105a6c:	2301      	movs	r3, #1
 8105a6e:	60fb      	str	r3, [r7, #12]
 8105a70:	e001      	b.n	8105a76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8105a72:	2300      	movs	r3, #0
 8105a74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8105a76:	f7ff fa79 	bl	8104f6c <vPortExitCritical>

	return xReturn;
 8105a7a:	68fb      	ldr	r3, [r7, #12]
}
 8105a7c:	4618      	mov	r0, r3
 8105a7e:	3710      	adds	r7, #16
 8105a80:	46bd      	mov	sp, r7
 8105a82:	bd80      	pop	{r7, pc}

08105a84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8105a84:	b480      	push	{r7}
 8105a86:	b085      	sub	sp, #20
 8105a88:	af00      	add	r7, sp, #0
 8105a8a:	6078      	str	r0, [r7, #4]
 8105a8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8105a8e:	2300      	movs	r3, #0
 8105a90:	60fb      	str	r3, [r7, #12]
 8105a92:	e014      	b.n	8105abe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8105a94:	4a0f      	ldr	r2, [pc, #60]	@ (8105ad4 <vQueueAddToRegistry+0x50>)
 8105a96:	68fb      	ldr	r3, [r7, #12]
 8105a98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8105a9c:	2b00      	cmp	r3, #0
 8105a9e:	d10b      	bne.n	8105ab8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8105aa0:	490c      	ldr	r1, [pc, #48]	@ (8105ad4 <vQueueAddToRegistry+0x50>)
 8105aa2:	68fb      	ldr	r3, [r7, #12]
 8105aa4:	683a      	ldr	r2, [r7, #0]
 8105aa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8105aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8105ad4 <vQueueAddToRegistry+0x50>)
 8105aac:	68fb      	ldr	r3, [r7, #12]
 8105aae:	00db      	lsls	r3, r3, #3
 8105ab0:	4413      	add	r3, r2
 8105ab2:	687a      	ldr	r2, [r7, #4]
 8105ab4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8105ab6:	e006      	b.n	8105ac6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8105ab8:	68fb      	ldr	r3, [r7, #12]
 8105aba:	3301      	adds	r3, #1
 8105abc:	60fb      	str	r3, [r7, #12]
 8105abe:	68fb      	ldr	r3, [r7, #12]
 8105ac0:	2b07      	cmp	r3, #7
 8105ac2:	d9e7      	bls.n	8105a94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8105ac4:	bf00      	nop
 8105ac6:	bf00      	nop
 8105ac8:	3714      	adds	r7, #20
 8105aca:	46bd      	mov	sp, r7
 8105acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ad0:	4770      	bx	lr
 8105ad2:	bf00      	nop
 8105ad4:	100043bc 	.word	0x100043bc

08105ad8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8105ad8:	b580      	push	{r7, lr}
 8105ada:	b086      	sub	sp, #24
 8105adc:	af00      	add	r7, sp, #0
 8105ade:	60f8      	str	r0, [r7, #12]
 8105ae0:	60b9      	str	r1, [r7, #8]
 8105ae2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8105ae4:	68fb      	ldr	r3, [r7, #12]
 8105ae6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8105ae8:	f7ff fa0e 	bl	8104f08 <vPortEnterCritical>
 8105aec:	697b      	ldr	r3, [r7, #20]
 8105aee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8105af2:	b25b      	sxtb	r3, r3
 8105af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105af8:	d103      	bne.n	8105b02 <vQueueWaitForMessageRestricted+0x2a>
 8105afa:	697b      	ldr	r3, [r7, #20]
 8105afc:	2200      	movs	r2, #0
 8105afe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8105b02:	697b      	ldr	r3, [r7, #20]
 8105b04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8105b08:	b25b      	sxtb	r3, r3
 8105b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105b0e:	d103      	bne.n	8105b18 <vQueueWaitForMessageRestricted+0x40>
 8105b10:	697b      	ldr	r3, [r7, #20]
 8105b12:	2200      	movs	r2, #0
 8105b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8105b18:	f7ff fa28 	bl	8104f6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8105b1c:	697b      	ldr	r3, [r7, #20]
 8105b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105b20:	2b00      	cmp	r3, #0
 8105b22:	d106      	bne.n	8105b32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8105b24:	697b      	ldr	r3, [r7, #20]
 8105b26:	3324      	adds	r3, #36	@ 0x24
 8105b28:	687a      	ldr	r2, [r7, #4]
 8105b2a:	68b9      	ldr	r1, [r7, #8]
 8105b2c:	4618      	mov	r0, r3
 8105b2e:	f000 fc45 	bl	81063bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8105b32:	6978      	ldr	r0, [r7, #20]
 8105b34:	f7ff ff26 	bl	8105984 <prvUnlockQueue>
	}
 8105b38:	bf00      	nop
 8105b3a:	3718      	adds	r7, #24
 8105b3c:	46bd      	mov	sp, r7
 8105b3e:	bd80      	pop	{r7, pc}

08105b40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8105b40:	b580      	push	{r7, lr}
 8105b42:	b08e      	sub	sp, #56	@ 0x38
 8105b44:	af04      	add	r7, sp, #16
 8105b46:	60f8      	str	r0, [r7, #12]
 8105b48:	60b9      	str	r1, [r7, #8]
 8105b4a:	607a      	str	r2, [r7, #4]
 8105b4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8105b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105b50:	2b00      	cmp	r3, #0
 8105b52:	d10b      	bne.n	8105b6c <xTaskCreateStatic+0x2c>
	__asm volatile
 8105b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105b58:	f383 8811 	msr	BASEPRI, r3
 8105b5c:	f3bf 8f6f 	isb	sy
 8105b60:	f3bf 8f4f 	dsb	sy
 8105b64:	623b      	str	r3, [r7, #32]
}
 8105b66:	bf00      	nop
 8105b68:	bf00      	nop
 8105b6a:	e7fd      	b.n	8105b68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8105b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105b6e:	2b00      	cmp	r3, #0
 8105b70:	d10b      	bne.n	8105b8a <xTaskCreateStatic+0x4a>
	__asm volatile
 8105b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105b76:	f383 8811 	msr	BASEPRI, r3
 8105b7a:	f3bf 8f6f 	isb	sy
 8105b7e:	f3bf 8f4f 	dsb	sy
 8105b82:	61fb      	str	r3, [r7, #28]
}
 8105b84:	bf00      	nop
 8105b86:	bf00      	nop
 8105b88:	e7fd      	b.n	8105b86 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8105b8a:	235c      	movs	r3, #92	@ 0x5c
 8105b8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8105b8e:	693b      	ldr	r3, [r7, #16]
 8105b90:	2b5c      	cmp	r3, #92	@ 0x5c
 8105b92:	d00b      	beq.n	8105bac <xTaskCreateStatic+0x6c>
	__asm volatile
 8105b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105b98:	f383 8811 	msr	BASEPRI, r3
 8105b9c:	f3bf 8f6f 	isb	sy
 8105ba0:	f3bf 8f4f 	dsb	sy
 8105ba4:	61bb      	str	r3, [r7, #24]
}
 8105ba6:	bf00      	nop
 8105ba8:	bf00      	nop
 8105baa:	e7fd      	b.n	8105ba8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8105bac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8105bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105bb0:	2b00      	cmp	r3, #0
 8105bb2:	d01e      	beq.n	8105bf2 <xTaskCreateStatic+0xb2>
 8105bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105bb6:	2b00      	cmp	r3, #0
 8105bb8:	d01b      	beq.n	8105bf2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8105bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105bbc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8105bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105bc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8105bc2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8105bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105bc6:	2202      	movs	r2, #2
 8105bc8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8105bcc:	2300      	movs	r3, #0
 8105bce:	9303      	str	r3, [sp, #12]
 8105bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105bd2:	9302      	str	r3, [sp, #8]
 8105bd4:	f107 0314 	add.w	r3, r7, #20
 8105bd8:	9301      	str	r3, [sp, #4]
 8105bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105bdc:	9300      	str	r3, [sp, #0]
 8105bde:	683b      	ldr	r3, [r7, #0]
 8105be0:	687a      	ldr	r2, [r7, #4]
 8105be2:	68b9      	ldr	r1, [r7, #8]
 8105be4:	68f8      	ldr	r0, [r7, #12]
 8105be6:	f000 f850 	bl	8105c8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8105bea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8105bec:	f000 f8de 	bl	8105dac <prvAddNewTaskToReadyList>
 8105bf0:	e001      	b.n	8105bf6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8105bf2:	2300      	movs	r3, #0
 8105bf4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8105bf6:	697b      	ldr	r3, [r7, #20]
	}
 8105bf8:	4618      	mov	r0, r3
 8105bfa:	3728      	adds	r7, #40	@ 0x28
 8105bfc:	46bd      	mov	sp, r7
 8105bfe:	bd80      	pop	{r7, pc}

08105c00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8105c00:	b580      	push	{r7, lr}
 8105c02:	b08c      	sub	sp, #48	@ 0x30
 8105c04:	af04      	add	r7, sp, #16
 8105c06:	60f8      	str	r0, [r7, #12]
 8105c08:	60b9      	str	r1, [r7, #8]
 8105c0a:	603b      	str	r3, [r7, #0]
 8105c0c:	4613      	mov	r3, r2
 8105c0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8105c10:	88fb      	ldrh	r3, [r7, #6]
 8105c12:	009b      	lsls	r3, r3, #2
 8105c14:	4618      	mov	r0, r3
 8105c16:	f7fe fda3 	bl	8104760 <pvPortMalloc>
 8105c1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8105c1c:	697b      	ldr	r3, [r7, #20]
 8105c1e:	2b00      	cmp	r3, #0
 8105c20:	d00e      	beq.n	8105c40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8105c22:	205c      	movs	r0, #92	@ 0x5c
 8105c24:	f7fe fd9c 	bl	8104760 <pvPortMalloc>
 8105c28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8105c2a:	69fb      	ldr	r3, [r7, #28]
 8105c2c:	2b00      	cmp	r3, #0
 8105c2e:	d003      	beq.n	8105c38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8105c30:	69fb      	ldr	r3, [r7, #28]
 8105c32:	697a      	ldr	r2, [r7, #20]
 8105c34:	631a      	str	r2, [r3, #48]	@ 0x30
 8105c36:	e005      	b.n	8105c44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8105c38:	6978      	ldr	r0, [r7, #20]
 8105c3a:	f7fe fe5f 	bl	81048fc <vPortFree>
 8105c3e:	e001      	b.n	8105c44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8105c40:	2300      	movs	r3, #0
 8105c42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8105c44:	69fb      	ldr	r3, [r7, #28]
 8105c46:	2b00      	cmp	r3, #0
 8105c48:	d017      	beq.n	8105c7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8105c4a:	69fb      	ldr	r3, [r7, #28]
 8105c4c:	2200      	movs	r2, #0
 8105c4e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8105c52:	88fa      	ldrh	r2, [r7, #6]
 8105c54:	2300      	movs	r3, #0
 8105c56:	9303      	str	r3, [sp, #12]
 8105c58:	69fb      	ldr	r3, [r7, #28]
 8105c5a:	9302      	str	r3, [sp, #8]
 8105c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105c5e:	9301      	str	r3, [sp, #4]
 8105c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105c62:	9300      	str	r3, [sp, #0]
 8105c64:	683b      	ldr	r3, [r7, #0]
 8105c66:	68b9      	ldr	r1, [r7, #8]
 8105c68:	68f8      	ldr	r0, [r7, #12]
 8105c6a:	f000 f80e 	bl	8105c8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8105c6e:	69f8      	ldr	r0, [r7, #28]
 8105c70:	f000 f89c 	bl	8105dac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8105c74:	2301      	movs	r3, #1
 8105c76:	61bb      	str	r3, [r7, #24]
 8105c78:	e002      	b.n	8105c80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8105c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8105c7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8105c80:	69bb      	ldr	r3, [r7, #24]
	}
 8105c82:	4618      	mov	r0, r3
 8105c84:	3720      	adds	r7, #32
 8105c86:	46bd      	mov	sp, r7
 8105c88:	bd80      	pop	{r7, pc}

08105c8a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8105c8a:	b580      	push	{r7, lr}
 8105c8c:	b088      	sub	sp, #32
 8105c8e:	af00      	add	r7, sp, #0
 8105c90:	60f8      	str	r0, [r7, #12]
 8105c92:	60b9      	str	r1, [r7, #8]
 8105c94:	607a      	str	r2, [r7, #4]
 8105c96:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8105c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105c9a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8105c9c:	687b      	ldr	r3, [r7, #4]
 8105c9e:	009b      	lsls	r3, r3, #2
 8105ca0:	461a      	mov	r2, r3
 8105ca2:	21a5      	movs	r1, #165	@ 0xa5
 8105ca4:	f001 f9b2 	bl	810700c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8105ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105caa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8105cac:	687b      	ldr	r3, [r7, #4]
 8105cae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8105cb2:	3b01      	subs	r3, #1
 8105cb4:	009b      	lsls	r3, r3, #2
 8105cb6:	4413      	add	r3, r2
 8105cb8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8105cba:	69bb      	ldr	r3, [r7, #24]
 8105cbc:	f023 0307 	bic.w	r3, r3, #7
 8105cc0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8105cc2:	69bb      	ldr	r3, [r7, #24]
 8105cc4:	f003 0307 	and.w	r3, r3, #7
 8105cc8:	2b00      	cmp	r3, #0
 8105cca:	d00b      	beq.n	8105ce4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8105ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105cd0:	f383 8811 	msr	BASEPRI, r3
 8105cd4:	f3bf 8f6f 	isb	sy
 8105cd8:	f3bf 8f4f 	dsb	sy
 8105cdc:	617b      	str	r3, [r7, #20]
}
 8105cde:	bf00      	nop
 8105ce0:	bf00      	nop
 8105ce2:	e7fd      	b.n	8105ce0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8105ce4:	68bb      	ldr	r3, [r7, #8]
 8105ce6:	2b00      	cmp	r3, #0
 8105ce8:	d01f      	beq.n	8105d2a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8105cea:	2300      	movs	r3, #0
 8105cec:	61fb      	str	r3, [r7, #28]
 8105cee:	e012      	b.n	8105d16 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8105cf0:	68ba      	ldr	r2, [r7, #8]
 8105cf2:	69fb      	ldr	r3, [r7, #28]
 8105cf4:	4413      	add	r3, r2
 8105cf6:	7819      	ldrb	r1, [r3, #0]
 8105cf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105cfa:	69fb      	ldr	r3, [r7, #28]
 8105cfc:	4413      	add	r3, r2
 8105cfe:	3334      	adds	r3, #52	@ 0x34
 8105d00:	460a      	mov	r2, r1
 8105d02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8105d04:	68ba      	ldr	r2, [r7, #8]
 8105d06:	69fb      	ldr	r3, [r7, #28]
 8105d08:	4413      	add	r3, r2
 8105d0a:	781b      	ldrb	r3, [r3, #0]
 8105d0c:	2b00      	cmp	r3, #0
 8105d0e:	d006      	beq.n	8105d1e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8105d10:	69fb      	ldr	r3, [r7, #28]
 8105d12:	3301      	adds	r3, #1
 8105d14:	61fb      	str	r3, [r7, #28]
 8105d16:	69fb      	ldr	r3, [r7, #28]
 8105d18:	2b0f      	cmp	r3, #15
 8105d1a:	d9e9      	bls.n	8105cf0 <prvInitialiseNewTask+0x66>
 8105d1c:	e000      	b.n	8105d20 <prvInitialiseNewTask+0x96>
			{
				break;
 8105d1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8105d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d22:	2200      	movs	r2, #0
 8105d24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8105d28:	e003      	b.n	8105d32 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8105d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d2c:	2200      	movs	r2, #0
 8105d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8105d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105d34:	2b37      	cmp	r3, #55	@ 0x37
 8105d36:	d901      	bls.n	8105d3c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8105d38:	2337      	movs	r3, #55	@ 0x37
 8105d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8105d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105d40:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8105d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105d46:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8105d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d4a:	2200      	movs	r2, #0
 8105d4c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8105d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d50:	3304      	adds	r3, #4
 8105d52:	4618      	mov	r0, r3
 8105d54:	f7fe ff12 	bl	8104b7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8105d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d5a:	3318      	adds	r3, #24
 8105d5c:	4618      	mov	r0, r3
 8105d5e:	f7fe ff0d 	bl	8104b7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8105d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105d66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8105d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105d6a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8105d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8105d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105d76:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8105d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d7a:	2200      	movs	r2, #0
 8105d7c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8105d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d80:	2200      	movs	r2, #0
 8105d82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8105d86:	683a      	ldr	r2, [r7, #0]
 8105d88:	68f9      	ldr	r1, [r7, #12]
 8105d8a:	69b8      	ldr	r0, [r7, #24]
 8105d8c:	f7fe ff8a 	bl	8104ca4 <pxPortInitialiseStack>
 8105d90:	4602      	mov	r2, r0
 8105d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8105d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105d98:	2b00      	cmp	r3, #0
 8105d9a:	d002      	beq.n	8105da2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8105d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105da0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8105da2:	bf00      	nop
 8105da4:	3720      	adds	r7, #32
 8105da6:	46bd      	mov	sp, r7
 8105da8:	bd80      	pop	{r7, pc}
	...

08105dac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8105dac:	b580      	push	{r7, lr}
 8105dae:	b082      	sub	sp, #8
 8105db0:	af00      	add	r7, sp, #0
 8105db2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8105db4:	f7ff f8a8 	bl	8104f08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8105db8:	4b2d      	ldr	r3, [pc, #180]	@ (8105e70 <prvAddNewTaskToReadyList+0xc4>)
 8105dba:	681b      	ldr	r3, [r3, #0]
 8105dbc:	3301      	adds	r3, #1
 8105dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8105e70 <prvAddNewTaskToReadyList+0xc4>)
 8105dc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8105dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8105e74 <prvAddNewTaskToReadyList+0xc8>)
 8105dc4:	681b      	ldr	r3, [r3, #0]
 8105dc6:	2b00      	cmp	r3, #0
 8105dc8:	d109      	bne.n	8105dde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8105dca:	4a2a      	ldr	r2, [pc, #168]	@ (8105e74 <prvAddNewTaskToReadyList+0xc8>)
 8105dcc:	687b      	ldr	r3, [r7, #4]
 8105dce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8105dd0:	4b27      	ldr	r3, [pc, #156]	@ (8105e70 <prvAddNewTaskToReadyList+0xc4>)
 8105dd2:	681b      	ldr	r3, [r3, #0]
 8105dd4:	2b01      	cmp	r3, #1
 8105dd6:	d110      	bne.n	8105dfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8105dd8:	f000 fc1e 	bl	8106618 <prvInitialiseTaskLists>
 8105ddc:	e00d      	b.n	8105dfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8105dde:	4b26      	ldr	r3, [pc, #152]	@ (8105e78 <prvAddNewTaskToReadyList+0xcc>)
 8105de0:	681b      	ldr	r3, [r3, #0]
 8105de2:	2b00      	cmp	r3, #0
 8105de4:	d109      	bne.n	8105dfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8105de6:	4b23      	ldr	r3, [pc, #140]	@ (8105e74 <prvAddNewTaskToReadyList+0xc8>)
 8105de8:	681b      	ldr	r3, [r3, #0]
 8105dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8105dec:	687b      	ldr	r3, [r7, #4]
 8105dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105df0:	429a      	cmp	r2, r3
 8105df2:	d802      	bhi.n	8105dfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8105df4:	4a1f      	ldr	r2, [pc, #124]	@ (8105e74 <prvAddNewTaskToReadyList+0xc8>)
 8105df6:	687b      	ldr	r3, [r7, #4]
 8105df8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8105dfa:	4b20      	ldr	r3, [pc, #128]	@ (8105e7c <prvAddNewTaskToReadyList+0xd0>)
 8105dfc:	681b      	ldr	r3, [r3, #0]
 8105dfe:	3301      	adds	r3, #1
 8105e00:	4a1e      	ldr	r2, [pc, #120]	@ (8105e7c <prvAddNewTaskToReadyList+0xd0>)
 8105e02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8105e04:	4b1d      	ldr	r3, [pc, #116]	@ (8105e7c <prvAddNewTaskToReadyList+0xd0>)
 8105e06:	681a      	ldr	r2, [r3, #0]
 8105e08:	687b      	ldr	r3, [r7, #4]
 8105e0a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8105e0c:	687b      	ldr	r3, [r7, #4]
 8105e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8105e10:	4b1b      	ldr	r3, [pc, #108]	@ (8105e80 <prvAddNewTaskToReadyList+0xd4>)
 8105e12:	681b      	ldr	r3, [r3, #0]
 8105e14:	429a      	cmp	r2, r3
 8105e16:	d903      	bls.n	8105e20 <prvAddNewTaskToReadyList+0x74>
 8105e18:	687b      	ldr	r3, [r7, #4]
 8105e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e1c:	4a18      	ldr	r2, [pc, #96]	@ (8105e80 <prvAddNewTaskToReadyList+0xd4>)
 8105e1e:	6013      	str	r3, [r2, #0]
 8105e20:	687b      	ldr	r3, [r7, #4]
 8105e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8105e24:	4613      	mov	r3, r2
 8105e26:	009b      	lsls	r3, r3, #2
 8105e28:	4413      	add	r3, r2
 8105e2a:	009b      	lsls	r3, r3, #2
 8105e2c:	4a15      	ldr	r2, [pc, #84]	@ (8105e84 <prvAddNewTaskToReadyList+0xd8>)
 8105e2e:	441a      	add	r2, r3
 8105e30:	687b      	ldr	r3, [r7, #4]
 8105e32:	3304      	adds	r3, #4
 8105e34:	4619      	mov	r1, r3
 8105e36:	4610      	mov	r0, r2
 8105e38:	f7fe fead 	bl	8104b96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8105e3c:	f7ff f896 	bl	8104f6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8105e40:	4b0d      	ldr	r3, [pc, #52]	@ (8105e78 <prvAddNewTaskToReadyList+0xcc>)
 8105e42:	681b      	ldr	r3, [r3, #0]
 8105e44:	2b00      	cmp	r3, #0
 8105e46:	d00e      	beq.n	8105e66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8105e48:	4b0a      	ldr	r3, [pc, #40]	@ (8105e74 <prvAddNewTaskToReadyList+0xc8>)
 8105e4a:	681b      	ldr	r3, [r3, #0]
 8105e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8105e4e:	687b      	ldr	r3, [r7, #4]
 8105e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e52:	429a      	cmp	r2, r3
 8105e54:	d207      	bcs.n	8105e66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8105e56:	4b0c      	ldr	r3, [pc, #48]	@ (8105e88 <prvAddNewTaskToReadyList+0xdc>)
 8105e58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8105e5c:	601a      	str	r2, [r3, #0]
 8105e5e:	f3bf 8f4f 	dsb	sy
 8105e62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8105e66:	bf00      	nop
 8105e68:	3708      	adds	r7, #8
 8105e6a:	46bd      	mov	sp, r7
 8105e6c:	bd80      	pop	{r7, pc}
 8105e6e:	bf00      	nop
 8105e70:	100048d0 	.word	0x100048d0
 8105e74:	100043fc 	.word	0x100043fc
 8105e78:	100048dc 	.word	0x100048dc
 8105e7c:	100048ec 	.word	0x100048ec
 8105e80:	100048d8 	.word	0x100048d8
 8105e84:	10004400 	.word	0x10004400
 8105e88:	e000ed04 	.word	0xe000ed04

08105e8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8105e8c:	b580      	push	{r7, lr}
 8105e8e:	b084      	sub	sp, #16
 8105e90:	af00      	add	r7, sp, #0
 8105e92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8105e94:	2300      	movs	r3, #0
 8105e96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8105e98:	687b      	ldr	r3, [r7, #4]
 8105e9a:	2b00      	cmp	r3, #0
 8105e9c:	d018      	beq.n	8105ed0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8105e9e:	4b14      	ldr	r3, [pc, #80]	@ (8105ef0 <vTaskDelay+0x64>)
 8105ea0:	681b      	ldr	r3, [r3, #0]
 8105ea2:	2b00      	cmp	r3, #0
 8105ea4:	d00b      	beq.n	8105ebe <vTaskDelay+0x32>
	__asm volatile
 8105ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105eaa:	f383 8811 	msr	BASEPRI, r3
 8105eae:	f3bf 8f6f 	isb	sy
 8105eb2:	f3bf 8f4f 	dsb	sy
 8105eb6:	60bb      	str	r3, [r7, #8]
}
 8105eb8:	bf00      	nop
 8105eba:	bf00      	nop
 8105ebc:	e7fd      	b.n	8105eba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8105ebe:	f000 f883 	bl	8105fc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8105ec2:	2100      	movs	r1, #0
 8105ec4:	6878      	ldr	r0, [r7, #4]
 8105ec6:	f000 fcf3 	bl	81068b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8105eca:	f000 f88b 	bl	8105fe4 <xTaskResumeAll>
 8105ece:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8105ed0:	68fb      	ldr	r3, [r7, #12]
 8105ed2:	2b00      	cmp	r3, #0
 8105ed4:	d107      	bne.n	8105ee6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8105ed6:	4b07      	ldr	r3, [pc, #28]	@ (8105ef4 <vTaskDelay+0x68>)
 8105ed8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8105edc:	601a      	str	r2, [r3, #0]
 8105ede:	f3bf 8f4f 	dsb	sy
 8105ee2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8105ee6:	bf00      	nop
 8105ee8:	3710      	adds	r7, #16
 8105eea:	46bd      	mov	sp, r7
 8105eec:	bd80      	pop	{r7, pc}
 8105eee:	bf00      	nop
 8105ef0:	100048f8 	.word	0x100048f8
 8105ef4:	e000ed04 	.word	0xe000ed04

08105ef8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8105ef8:	b580      	push	{r7, lr}
 8105efa:	b08a      	sub	sp, #40	@ 0x28
 8105efc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8105efe:	2300      	movs	r3, #0
 8105f00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8105f02:	2300      	movs	r3, #0
 8105f04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8105f06:	463a      	mov	r2, r7
 8105f08:	1d39      	adds	r1, r7, #4
 8105f0a:	f107 0308 	add.w	r3, r7, #8
 8105f0e:	4618      	mov	r0, r3
 8105f10:	f7fe fbf2 	bl	81046f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8105f14:	6839      	ldr	r1, [r7, #0]
 8105f16:	687b      	ldr	r3, [r7, #4]
 8105f18:	68ba      	ldr	r2, [r7, #8]
 8105f1a:	9202      	str	r2, [sp, #8]
 8105f1c:	9301      	str	r3, [sp, #4]
 8105f1e:	2300      	movs	r3, #0
 8105f20:	9300      	str	r3, [sp, #0]
 8105f22:	2300      	movs	r3, #0
 8105f24:	460a      	mov	r2, r1
 8105f26:	4922      	ldr	r1, [pc, #136]	@ (8105fb0 <vTaskStartScheduler+0xb8>)
 8105f28:	4822      	ldr	r0, [pc, #136]	@ (8105fb4 <vTaskStartScheduler+0xbc>)
 8105f2a:	f7ff fe09 	bl	8105b40 <xTaskCreateStatic>
 8105f2e:	4603      	mov	r3, r0
 8105f30:	4a21      	ldr	r2, [pc, #132]	@ (8105fb8 <vTaskStartScheduler+0xc0>)
 8105f32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8105f34:	4b20      	ldr	r3, [pc, #128]	@ (8105fb8 <vTaskStartScheduler+0xc0>)
 8105f36:	681b      	ldr	r3, [r3, #0]
 8105f38:	2b00      	cmp	r3, #0
 8105f3a:	d002      	beq.n	8105f42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8105f3c:	2301      	movs	r3, #1
 8105f3e:	617b      	str	r3, [r7, #20]
 8105f40:	e001      	b.n	8105f46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8105f42:	2300      	movs	r3, #0
 8105f44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8105f46:	697b      	ldr	r3, [r7, #20]
 8105f48:	2b01      	cmp	r3, #1
 8105f4a:	d102      	bne.n	8105f52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8105f4c:	f000 fd04 	bl	8106958 <xTimerCreateTimerTask>
 8105f50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8105f52:	697b      	ldr	r3, [r7, #20]
 8105f54:	2b01      	cmp	r3, #1
 8105f56:	d116      	bne.n	8105f86 <vTaskStartScheduler+0x8e>
	__asm volatile
 8105f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105f5c:	f383 8811 	msr	BASEPRI, r3
 8105f60:	f3bf 8f6f 	isb	sy
 8105f64:	f3bf 8f4f 	dsb	sy
 8105f68:	613b      	str	r3, [r7, #16]
}
 8105f6a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8105f6c:	4b13      	ldr	r3, [pc, #76]	@ (8105fbc <vTaskStartScheduler+0xc4>)
 8105f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8105f72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8105f74:	4b12      	ldr	r3, [pc, #72]	@ (8105fc0 <vTaskStartScheduler+0xc8>)
 8105f76:	2201      	movs	r2, #1
 8105f78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8105f7a:	4b12      	ldr	r3, [pc, #72]	@ (8105fc4 <vTaskStartScheduler+0xcc>)
 8105f7c:	2200      	movs	r2, #0
 8105f7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8105f80:	f7fe ff1e 	bl	8104dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8105f84:	e00f      	b.n	8105fa6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8105f86:	697b      	ldr	r3, [r7, #20]
 8105f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105f8c:	d10b      	bne.n	8105fa6 <vTaskStartScheduler+0xae>
	__asm volatile
 8105f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105f92:	f383 8811 	msr	BASEPRI, r3
 8105f96:	f3bf 8f6f 	isb	sy
 8105f9a:	f3bf 8f4f 	dsb	sy
 8105f9e:	60fb      	str	r3, [r7, #12]
}
 8105fa0:	bf00      	nop
 8105fa2:	bf00      	nop
 8105fa4:	e7fd      	b.n	8105fa2 <vTaskStartScheduler+0xaa>
}
 8105fa6:	bf00      	nop
 8105fa8:	3718      	adds	r7, #24
 8105faa:	46bd      	mov	sp, r7
 8105fac:	bd80      	pop	{r7, pc}
 8105fae:	bf00      	nop
 8105fb0:	081070a4 	.word	0x081070a4
 8105fb4:	081065e9 	.word	0x081065e9
 8105fb8:	100048f4 	.word	0x100048f4
 8105fbc:	100048f0 	.word	0x100048f0
 8105fc0:	100048dc 	.word	0x100048dc
 8105fc4:	100048d4 	.word	0x100048d4

08105fc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8105fc8:	b480      	push	{r7}
 8105fca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8105fcc:	4b04      	ldr	r3, [pc, #16]	@ (8105fe0 <vTaskSuspendAll+0x18>)
 8105fce:	681b      	ldr	r3, [r3, #0]
 8105fd0:	3301      	adds	r3, #1
 8105fd2:	4a03      	ldr	r2, [pc, #12]	@ (8105fe0 <vTaskSuspendAll+0x18>)
 8105fd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8105fd6:	bf00      	nop
 8105fd8:	46bd      	mov	sp, r7
 8105fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fde:	4770      	bx	lr
 8105fe0:	100048f8 	.word	0x100048f8

08105fe4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8105fe4:	b580      	push	{r7, lr}
 8105fe6:	b084      	sub	sp, #16
 8105fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8105fea:	2300      	movs	r3, #0
 8105fec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8105fee:	2300      	movs	r3, #0
 8105ff0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8105ff2:	4b42      	ldr	r3, [pc, #264]	@ (81060fc <xTaskResumeAll+0x118>)
 8105ff4:	681b      	ldr	r3, [r3, #0]
 8105ff6:	2b00      	cmp	r3, #0
 8105ff8:	d10b      	bne.n	8106012 <xTaskResumeAll+0x2e>
	__asm volatile
 8105ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105ffe:	f383 8811 	msr	BASEPRI, r3
 8106002:	f3bf 8f6f 	isb	sy
 8106006:	f3bf 8f4f 	dsb	sy
 810600a:	603b      	str	r3, [r7, #0]
}
 810600c:	bf00      	nop
 810600e:	bf00      	nop
 8106010:	e7fd      	b.n	810600e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8106012:	f7fe ff79 	bl	8104f08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8106016:	4b39      	ldr	r3, [pc, #228]	@ (81060fc <xTaskResumeAll+0x118>)
 8106018:	681b      	ldr	r3, [r3, #0]
 810601a:	3b01      	subs	r3, #1
 810601c:	4a37      	ldr	r2, [pc, #220]	@ (81060fc <xTaskResumeAll+0x118>)
 810601e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8106020:	4b36      	ldr	r3, [pc, #216]	@ (81060fc <xTaskResumeAll+0x118>)
 8106022:	681b      	ldr	r3, [r3, #0]
 8106024:	2b00      	cmp	r3, #0
 8106026:	d162      	bne.n	81060ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8106028:	4b35      	ldr	r3, [pc, #212]	@ (8106100 <xTaskResumeAll+0x11c>)
 810602a:	681b      	ldr	r3, [r3, #0]
 810602c:	2b00      	cmp	r3, #0
 810602e:	d05e      	beq.n	81060ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8106030:	e02f      	b.n	8106092 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106032:	4b34      	ldr	r3, [pc, #208]	@ (8106104 <xTaskResumeAll+0x120>)
 8106034:	68db      	ldr	r3, [r3, #12]
 8106036:	68db      	ldr	r3, [r3, #12]
 8106038:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810603a:	68fb      	ldr	r3, [r7, #12]
 810603c:	3318      	adds	r3, #24
 810603e:	4618      	mov	r0, r3
 8106040:	f7fe fe06 	bl	8104c50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8106044:	68fb      	ldr	r3, [r7, #12]
 8106046:	3304      	adds	r3, #4
 8106048:	4618      	mov	r0, r3
 810604a:	f7fe fe01 	bl	8104c50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810604e:	68fb      	ldr	r3, [r7, #12]
 8106050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106052:	4b2d      	ldr	r3, [pc, #180]	@ (8106108 <xTaskResumeAll+0x124>)
 8106054:	681b      	ldr	r3, [r3, #0]
 8106056:	429a      	cmp	r2, r3
 8106058:	d903      	bls.n	8106062 <xTaskResumeAll+0x7e>
 810605a:	68fb      	ldr	r3, [r7, #12]
 810605c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810605e:	4a2a      	ldr	r2, [pc, #168]	@ (8106108 <xTaskResumeAll+0x124>)
 8106060:	6013      	str	r3, [r2, #0]
 8106062:	68fb      	ldr	r3, [r7, #12]
 8106064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106066:	4613      	mov	r3, r2
 8106068:	009b      	lsls	r3, r3, #2
 810606a:	4413      	add	r3, r2
 810606c:	009b      	lsls	r3, r3, #2
 810606e:	4a27      	ldr	r2, [pc, #156]	@ (810610c <xTaskResumeAll+0x128>)
 8106070:	441a      	add	r2, r3
 8106072:	68fb      	ldr	r3, [r7, #12]
 8106074:	3304      	adds	r3, #4
 8106076:	4619      	mov	r1, r3
 8106078:	4610      	mov	r0, r2
 810607a:	f7fe fd8c 	bl	8104b96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810607e:	68fb      	ldr	r3, [r7, #12]
 8106080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106082:	4b23      	ldr	r3, [pc, #140]	@ (8106110 <xTaskResumeAll+0x12c>)
 8106084:	681b      	ldr	r3, [r3, #0]
 8106086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106088:	429a      	cmp	r2, r3
 810608a:	d302      	bcc.n	8106092 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 810608c:	4b21      	ldr	r3, [pc, #132]	@ (8106114 <xTaskResumeAll+0x130>)
 810608e:	2201      	movs	r2, #1
 8106090:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8106092:	4b1c      	ldr	r3, [pc, #112]	@ (8106104 <xTaskResumeAll+0x120>)
 8106094:	681b      	ldr	r3, [r3, #0]
 8106096:	2b00      	cmp	r3, #0
 8106098:	d1cb      	bne.n	8106032 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810609a:	68fb      	ldr	r3, [r7, #12]
 810609c:	2b00      	cmp	r3, #0
 810609e:	d001      	beq.n	81060a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 81060a0:	f000 fb58 	bl	8106754 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 81060a4:	4b1c      	ldr	r3, [pc, #112]	@ (8106118 <xTaskResumeAll+0x134>)
 81060a6:	681b      	ldr	r3, [r3, #0]
 81060a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 81060aa:	687b      	ldr	r3, [r7, #4]
 81060ac:	2b00      	cmp	r3, #0
 81060ae:	d010      	beq.n	81060d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 81060b0:	f000 f846 	bl	8106140 <xTaskIncrementTick>
 81060b4:	4603      	mov	r3, r0
 81060b6:	2b00      	cmp	r3, #0
 81060b8:	d002      	beq.n	81060c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 81060ba:	4b16      	ldr	r3, [pc, #88]	@ (8106114 <xTaskResumeAll+0x130>)
 81060bc:	2201      	movs	r2, #1
 81060be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 81060c0:	687b      	ldr	r3, [r7, #4]
 81060c2:	3b01      	subs	r3, #1
 81060c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 81060c6:	687b      	ldr	r3, [r7, #4]
 81060c8:	2b00      	cmp	r3, #0
 81060ca:	d1f1      	bne.n	81060b0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 81060cc:	4b12      	ldr	r3, [pc, #72]	@ (8106118 <xTaskResumeAll+0x134>)
 81060ce:	2200      	movs	r2, #0
 81060d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 81060d2:	4b10      	ldr	r3, [pc, #64]	@ (8106114 <xTaskResumeAll+0x130>)
 81060d4:	681b      	ldr	r3, [r3, #0]
 81060d6:	2b00      	cmp	r3, #0
 81060d8:	d009      	beq.n	81060ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 81060da:	2301      	movs	r3, #1
 81060dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 81060de:	4b0f      	ldr	r3, [pc, #60]	@ (810611c <xTaskResumeAll+0x138>)
 81060e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81060e4:	601a      	str	r2, [r3, #0]
 81060e6:	f3bf 8f4f 	dsb	sy
 81060ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81060ee:	f7fe ff3d 	bl	8104f6c <vPortExitCritical>

	return xAlreadyYielded;
 81060f2:	68bb      	ldr	r3, [r7, #8]
}
 81060f4:	4618      	mov	r0, r3
 81060f6:	3710      	adds	r7, #16
 81060f8:	46bd      	mov	sp, r7
 81060fa:	bd80      	pop	{r7, pc}
 81060fc:	100048f8 	.word	0x100048f8
 8106100:	100048d0 	.word	0x100048d0
 8106104:	10004890 	.word	0x10004890
 8106108:	100048d8 	.word	0x100048d8
 810610c:	10004400 	.word	0x10004400
 8106110:	100043fc 	.word	0x100043fc
 8106114:	100048e4 	.word	0x100048e4
 8106118:	100048e0 	.word	0x100048e0
 810611c:	e000ed04 	.word	0xe000ed04

08106120 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8106120:	b480      	push	{r7}
 8106122:	b083      	sub	sp, #12
 8106124:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8106126:	4b05      	ldr	r3, [pc, #20]	@ (810613c <xTaskGetTickCount+0x1c>)
 8106128:	681b      	ldr	r3, [r3, #0]
 810612a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810612c:	687b      	ldr	r3, [r7, #4]
}
 810612e:	4618      	mov	r0, r3
 8106130:	370c      	adds	r7, #12
 8106132:	46bd      	mov	sp, r7
 8106134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106138:	4770      	bx	lr
 810613a:	bf00      	nop
 810613c:	100048d4 	.word	0x100048d4

08106140 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8106140:	b580      	push	{r7, lr}
 8106142:	b086      	sub	sp, #24
 8106144:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8106146:	2300      	movs	r3, #0
 8106148:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810614a:	4b4f      	ldr	r3, [pc, #316]	@ (8106288 <xTaskIncrementTick+0x148>)
 810614c:	681b      	ldr	r3, [r3, #0]
 810614e:	2b00      	cmp	r3, #0
 8106150:	f040 8090 	bne.w	8106274 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8106154:	4b4d      	ldr	r3, [pc, #308]	@ (810628c <xTaskIncrementTick+0x14c>)
 8106156:	681b      	ldr	r3, [r3, #0]
 8106158:	3301      	adds	r3, #1
 810615a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810615c:	4a4b      	ldr	r2, [pc, #300]	@ (810628c <xTaskIncrementTick+0x14c>)
 810615e:	693b      	ldr	r3, [r7, #16]
 8106160:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8106162:	693b      	ldr	r3, [r7, #16]
 8106164:	2b00      	cmp	r3, #0
 8106166:	d121      	bne.n	81061ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8106168:	4b49      	ldr	r3, [pc, #292]	@ (8106290 <xTaskIncrementTick+0x150>)
 810616a:	681b      	ldr	r3, [r3, #0]
 810616c:	681b      	ldr	r3, [r3, #0]
 810616e:	2b00      	cmp	r3, #0
 8106170:	d00b      	beq.n	810618a <xTaskIncrementTick+0x4a>
	__asm volatile
 8106172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106176:	f383 8811 	msr	BASEPRI, r3
 810617a:	f3bf 8f6f 	isb	sy
 810617e:	f3bf 8f4f 	dsb	sy
 8106182:	603b      	str	r3, [r7, #0]
}
 8106184:	bf00      	nop
 8106186:	bf00      	nop
 8106188:	e7fd      	b.n	8106186 <xTaskIncrementTick+0x46>
 810618a:	4b41      	ldr	r3, [pc, #260]	@ (8106290 <xTaskIncrementTick+0x150>)
 810618c:	681b      	ldr	r3, [r3, #0]
 810618e:	60fb      	str	r3, [r7, #12]
 8106190:	4b40      	ldr	r3, [pc, #256]	@ (8106294 <xTaskIncrementTick+0x154>)
 8106192:	681b      	ldr	r3, [r3, #0]
 8106194:	4a3e      	ldr	r2, [pc, #248]	@ (8106290 <xTaskIncrementTick+0x150>)
 8106196:	6013      	str	r3, [r2, #0]
 8106198:	4a3e      	ldr	r2, [pc, #248]	@ (8106294 <xTaskIncrementTick+0x154>)
 810619a:	68fb      	ldr	r3, [r7, #12]
 810619c:	6013      	str	r3, [r2, #0]
 810619e:	4b3e      	ldr	r3, [pc, #248]	@ (8106298 <xTaskIncrementTick+0x158>)
 81061a0:	681b      	ldr	r3, [r3, #0]
 81061a2:	3301      	adds	r3, #1
 81061a4:	4a3c      	ldr	r2, [pc, #240]	@ (8106298 <xTaskIncrementTick+0x158>)
 81061a6:	6013      	str	r3, [r2, #0]
 81061a8:	f000 fad4 	bl	8106754 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 81061ac:	4b3b      	ldr	r3, [pc, #236]	@ (810629c <xTaskIncrementTick+0x15c>)
 81061ae:	681b      	ldr	r3, [r3, #0]
 81061b0:	693a      	ldr	r2, [r7, #16]
 81061b2:	429a      	cmp	r2, r3
 81061b4:	d349      	bcc.n	810624a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81061b6:	4b36      	ldr	r3, [pc, #216]	@ (8106290 <xTaskIncrementTick+0x150>)
 81061b8:	681b      	ldr	r3, [r3, #0]
 81061ba:	681b      	ldr	r3, [r3, #0]
 81061bc:	2b00      	cmp	r3, #0
 81061be:	d104      	bne.n	81061ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81061c0:	4b36      	ldr	r3, [pc, #216]	@ (810629c <xTaskIncrementTick+0x15c>)
 81061c2:	f04f 32ff 	mov.w	r2, #4294967295
 81061c6:	601a      	str	r2, [r3, #0]
					break;
 81061c8:	e03f      	b.n	810624a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81061ca:	4b31      	ldr	r3, [pc, #196]	@ (8106290 <xTaskIncrementTick+0x150>)
 81061cc:	681b      	ldr	r3, [r3, #0]
 81061ce:	68db      	ldr	r3, [r3, #12]
 81061d0:	68db      	ldr	r3, [r3, #12]
 81061d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 81061d4:	68bb      	ldr	r3, [r7, #8]
 81061d6:	685b      	ldr	r3, [r3, #4]
 81061d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 81061da:	693a      	ldr	r2, [r7, #16]
 81061dc:	687b      	ldr	r3, [r7, #4]
 81061de:	429a      	cmp	r2, r3
 81061e0:	d203      	bcs.n	81061ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 81061e2:	4a2e      	ldr	r2, [pc, #184]	@ (810629c <xTaskIncrementTick+0x15c>)
 81061e4:	687b      	ldr	r3, [r7, #4]
 81061e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 81061e8:	e02f      	b.n	810624a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81061ea:	68bb      	ldr	r3, [r7, #8]
 81061ec:	3304      	adds	r3, #4
 81061ee:	4618      	mov	r0, r3
 81061f0:	f7fe fd2e 	bl	8104c50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 81061f4:	68bb      	ldr	r3, [r7, #8]
 81061f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81061f8:	2b00      	cmp	r3, #0
 81061fa:	d004      	beq.n	8106206 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81061fc:	68bb      	ldr	r3, [r7, #8]
 81061fe:	3318      	adds	r3, #24
 8106200:	4618      	mov	r0, r3
 8106202:	f7fe fd25 	bl	8104c50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8106206:	68bb      	ldr	r3, [r7, #8]
 8106208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810620a:	4b25      	ldr	r3, [pc, #148]	@ (81062a0 <xTaskIncrementTick+0x160>)
 810620c:	681b      	ldr	r3, [r3, #0]
 810620e:	429a      	cmp	r2, r3
 8106210:	d903      	bls.n	810621a <xTaskIncrementTick+0xda>
 8106212:	68bb      	ldr	r3, [r7, #8]
 8106214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106216:	4a22      	ldr	r2, [pc, #136]	@ (81062a0 <xTaskIncrementTick+0x160>)
 8106218:	6013      	str	r3, [r2, #0]
 810621a:	68bb      	ldr	r3, [r7, #8]
 810621c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810621e:	4613      	mov	r3, r2
 8106220:	009b      	lsls	r3, r3, #2
 8106222:	4413      	add	r3, r2
 8106224:	009b      	lsls	r3, r3, #2
 8106226:	4a1f      	ldr	r2, [pc, #124]	@ (81062a4 <xTaskIncrementTick+0x164>)
 8106228:	441a      	add	r2, r3
 810622a:	68bb      	ldr	r3, [r7, #8]
 810622c:	3304      	adds	r3, #4
 810622e:	4619      	mov	r1, r3
 8106230:	4610      	mov	r0, r2
 8106232:	f7fe fcb0 	bl	8104b96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8106236:	68bb      	ldr	r3, [r7, #8]
 8106238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810623a:	4b1b      	ldr	r3, [pc, #108]	@ (81062a8 <xTaskIncrementTick+0x168>)
 810623c:	681b      	ldr	r3, [r3, #0]
 810623e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106240:	429a      	cmp	r2, r3
 8106242:	d3b8      	bcc.n	81061b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8106244:	2301      	movs	r3, #1
 8106246:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8106248:	e7b5      	b.n	81061b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810624a:	4b17      	ldr	r3, [pc, #92]	@ (81062a8 <xTaskIncrementTick+0x168>)
 810624c:	681b      	ldr	r3, [r3, #0]
 810624e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106250:	4914      	ldr	r1, [pc, #80]	@ (81062a4 <xTaskIncrementTick+0x164>)
 8106252:	4613      	mov	r3, r2
 8106254:	009b      	lsls	r3, r3, #2
 8106256:	4413      	add	r3, r2
 8106258:	009b      	lsls	r3, r3, #2
 810625a:	440b      	add	r3, r1
 810625c:	681b      	ldr	r3, [r3, #0]
 810625e:	2b01      	cmp	r3, #1
 8106260:	d901      	bls.n	8106266 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8106262:	2301      	movs	r3, #1
 8106264:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8106266:	4b11      	ldr	r3, [pc, #68]	@ (81062ac <xTaskIncrementTick+0x16c>)
 8106268:	681b      	ldr	r3, [r3, #0]
 810626a:	2b00      	cmp	r3, #0
 810626c:	d007      	beq.n	810627e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810626e:	2301      	movs	r3, #1
 8106270:	617b      	str	r3, [r7, #20]
 8106272:	e004      	b.n	810627e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8106274:	4b0e      	ldr	r3, [pc, #56]	@ (81062b0 <xTaskIncrementTick+0x170>)
 8106276:	681b      	ldr	r3, [r3, #0]
 8106278:	3301      	adds	r3, #1
 810627a:	4a0d      	ldr	r2, [pc, #52]	@ (81062b0 <xTaskIncrementTick+0x170>)
 810627c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810627e:	697b      	ldr	r3, [r7, #20]
}
 8106280:	4618      	mov	r0, r3
 8106282:	3718      	adds	r7, #24
 8106284:	46bd      	mov	sp, r7
 8106286:	bd80      	pop	{r7, pc}
 8106288:	100048f8 	.word	0x100048f8
 810628c:	100048d4 	.word	0x100048d4
 8106290:	10004888 	.word	0x10004888
 8106294:	1000488c 	.word	0x1000488c
 8106298:	100048e8 	.word	0x100048e8
 810629c:	100048f0 	.word	0x100048f0
 81062a0:	100048d8 	.word	0x100048d8
 81062a4:	10004400 	.word	0x10004400
 81062a8:	100043fc 	.word	0x100043fc
 81062ac:	100048e4 	.word	0x100048e4
 81062b0:	100048e0 	.word	0x100048e0

081062b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 81062b4:	b480      	push	{r7}
 81062b6:	b085      	sub	sp, #20
 81062b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 81062ba:	4b28      	ldr	r3, [pc, #160]	@ (810635c <vTaskSwitchContext+0xa8>)
 81062bc:	681b      	ldr	r3, [r3, #0]
 81062be:	2b00      	cmp	r3, #0
 81062c0:	d003      	beq.n	81062ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 81062c2:	4b27      	ldr	r3, [pc, #156]	@ (8106360 <vTaskSwitchContext+0xac>)
 81062c4:	2201      	movs	r2, #1
 81062c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 81062c8:	e042      	b.n	8106350 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 81062ca:	4b25      	ldr	r3, [pc, #148]	@ (8106360 <vTaskSwitchContext+0xac>)
 81062cc:	2200      	movs	r2, #0
 81062ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81062d0:	4b24      	ldr	r3, [pc, #144]	@ (8106364 <vTaskSwitchContext+0xb0>)
 81062d2:	681b      	ldr	r3, [r3, #0]
 81062d4:	60fb      	str	r3, [r7, #12]
 81062d6:	e011      	b.n	81062fc <vTaskSwitchContext+0x48>
 81062d8:	68fb      	ldr	r3, [r7, #12]
 81062da:	2b00      	cmp	r3, #0
 81062dc:	d10b      	bne.n	81062f6 <vTaskSwitchContext+0x42>
	__asm volatile
 81062de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81062e2:	f383 8811 	msr	BASEPRI, r3
 81062e6:	f3bf 8f6f 	isb	sy
 81062ea:	f3bf 8f4f 	dsb	sy
 81062ee:	607b      	str	r3, [r7, #4]
}
 81062f0:	bf00      	nop
 81062f2:	bf00      	nop
 81062f4:	e7fd      	b.n	81062f2 <vTaskSwitchContext+0x3e>
 81062f6:	68fb      	ldr	r3, [r7, #12]
 81062f8:	3b01      	subs	r3, #1
 81062fa:	60fb      	str	r3, [r7, #12]
 81062fc:	491a      	ldr	r1, [pc, #104]	@ (8106368 <vTaskSwitchContext+0xb4>)
 81062fe:	68fa      	ldr	r2, [r7, #12]
 8106300:	4613      	mov	r3, r2
 8106302:	009b      	lsls	r3, r3, #2
 8106304:	4413      	add	r3, r2
 8106306:	009b      	lsls	r3, r3, #2
 8106308:	440b      	add	r3, r1
 810630a:	681b      	ldr	r3, [r3, #0]
 810630c:	2b00      	cmp	r3, #0
 810630e:	d0e3      	beq.n	81062d8 <vTaskSwitchContext+0x24>
 8106310:	68fa      	ldr	r2, [r7, #12]
 8106312:	4613      	mov	r3, r2
 8106314:	009b      	lsls	r3, r3, #2
 8106316:	4413      	add	r3, r2
 8106318:	009b      	lsls	r3, r3, #2
 810631a:	4a13      	ldr	r2, [pc, #76]	@ (8106368 <vTaskSwitchContext+0xb4>)
 810631c:	4413      	add	r3, r2
 810631e:	60bb      	str	r3, [r7, #8]
 8106320:	68bb      	ldr	r3, [r7, #8]
 8106322:	685b      	ldr	r3, [r3, #4]
 8106324:	685a      	ldr	r2, [r3, #4]
 8106326:	68bb      	ldr	r3, [r7, #8]
 8106328:	605a      	str	r2, [r3, #4]
 810632a:	68bb      	ldr	r3, [r7, #8]
 810632c:	685a      	ldr	r2, [r3, #4]
 810632e:	68bb      	ldr	r3, [r7, #8]
 8106330:	3308      	adds	r3, #8
 8106332:	429a      	cmp	r2, r3
 8106334:	d104      	bne.n	8106340 <vTaskSwitchContext+0x8c>
 8106336:	68bb      	ldr	r3, [r7, #8]
 8106338:	685b      	ldr	r3, [r3, #4]
 810633a:	685a      	ldr	r2, [r3, #4]
 810633c:	68bb      	ldr	r3, [r7, #8]
 810633e:	605a      	str	r2, [r3, #4]
 8106340:	68bb      	ldr	r3, [r7, #8]
 8106342:	685b      	ldr	r3, [r3, #4]
 8106344:	68db      	ldr	r3, [r3, #12]
 8106346:	4a09      	ldr	r2, [pc, #36]	@ (810636c <vTaskSwitchContext+0xb8>)
 8106348:	6013      	str	r3, [r2, #0]
 810634a:	4a06      	ldr	r2, [pc, #24]	@ (8106364 <vTaskSwitchContext+0xb0>)
 810634c:	68fb      	ldr	r3, [r7, #12]
 810634e:	6013      	str	r3, [r2, #0]
}
 8106350:	bf00      	nop
 8106352:	3714      	adds	r7, #20
 8106354:	46bd      	mov	sp, r7
 8106356:	f85d 7b04 	ldr.w	r7, [sp], #4
 810635a:	4770      	bx	lr
 810635c:	100048f8 	.word	0x100048f8
 8106360:	100048e4 	.word	0x100048e4
 8106364:	100048d8 	.word	0x100048d8
 8106368:	10004400 	.word	0x10004400
 810636c:	100043fc 	.word	0x100043fc

08106370 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8106370:	b580      	push	{r7, lr}
 8106372:	b084      	sub	sp, #16
 8106374:	af00      	add	r7, sp, #0
 8106376:	6078      	str	r0, [r7, #4]
 8106378:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810637a:	687b      	ldr	r3, [r7, #4]
 810637c:	2b00      	cmp	r3, #0
 810637e:	d10b      	bne.n	8106398 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8106380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106384:	f383 8811 	msr	BASEPRI, r3
 8106388:	f3bf 8f6f 	isb	sy
 810638c:	f3bf 8f4f 	dsb	sy
 8106390:	60fb      	str	r3, [r7, #12]
}
 8106392:	bf00      	nop
 8106394:	bf00      	nop
 8106396:	e7fd      	b.n	8106394 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8106398:	4b07      	ldr	r3, [pc, #28]	@ (81063b8 <vTaskPlaceOnEventList+0x48>)
 810639a:	681b      	ldr	r3, [r3, #0]
 810639c:	3318      	adds	r3, #24
 810639e:	4619      	mov	r1, r3
 81063a0:	6878      	ldr	r0, [r7, #4]
 81063a2:	f7fe fc1c 	bl	8104bde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 81063a6:	2101      	movs	r1, #1
 81063a8:	6838      	ldr	r0, [r7, #0]
 81063aa:	f000 fa81 	bl	81068b0 <prvAddCurrentTaskToDelayedList>
}
 81063ae:	bf00      	nop
 81063b0:	3710      	adds	r7, #16
 81063b2:	46bd      	mov	sp, r7
 81063b4:	bd80      	pop	{r7, pc}
 81063b6:	bf00      	nop
 81063b8:	100043fc 	.word	0x100043fc

081063bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81063bc:	b580      	push	{r7, lr}
 81063be:	b086      	sub	sp, #24
 81063c0:	af00      	add	r7, sp, #0
 81063c2:	60f8      	str	r0, [r7, #12]
 81063c4:	60b9      	str	r1, [r7, #8]
 81063c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 81063c8:	68fb      	ldr	r3, [r7, #12]
 81063ca:	2b00      	cmp	r3, #0
 81063cc:	d10b      	bne.n	81063e6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 81063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81063d2:	f383 8811 	msr	BASEPRI, r3
 81063d6:	f3bf 8f6f 	isb	sy
 81063da:	f3bf 8f4f 	dsb	sy
 81063de:	617b      	str	r3, [r7, #20]
}
 81063e0:	bf00      	nop
 81063e2:	bf00      	nop
 81063e4:	e7fd      	b.n	81063e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 81063e6:	4b0a      	ldr	r3, [pc, #40]	@ (8106410 <vTaskPlaceOnEventListRestricted+0x54>)
 81063e8:	681b      	ldr	r3, [r3, #0]
 81063ea:	3318      	adds	r3, #24
 81063ec:	4619      	mov	r1, r3
 81063ee:	68f8      	ldr	r0, [r7, #12]
 81063f0:	f7fe fbd1 	bl	8104b96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 81063f4:	687b      	ldr	r3, [r7, #4]
 81063f6:	2b00      	cmp	r3, #0
 81063f8:	d002      	beq.n	8106400 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 81063fa:	f04f 33ff 	mov.w	r3, #4294967295
 81063fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8106400:	6879      	ldr	r1, [r7, #4]
 8106402:	68b8      	ldr	r0, [r7, #8]
 8106404:	f000 fa54 	bl	81068b0 <prvAddCurrentTaskToDelayedList>
	}
 8106408:	bf00      	nop
 810640a:	3718      	adds	r7, #24
 810640c:	46bd      	mov	sp, r7
 810640e:	bd80      	pop	{r7, pc}
 8106410:	100043fc 	.word	0x100043fc

08106414 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8106414:	b580      	push	{r7, lr}
 8106416:	b086      	sub	sp, #24
 8106418:	af00      	add	r7, sp, #0
 810641a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810641c:	687b      	ldr	r3, [r7, #4]
 810641e:	68db      	ldr	r3, [r3, #12]
 8106420:	68db      	ldr	r3, [r3, #12]
 8106422:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8106424:	693b      	ldr	r3, [r7, #16]
 8106426:	2b00      	cmp	r3, #0
 8106428:	d10b      	bne.n	8106442 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810642a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810642e:	f383 8811 	msr	BASEPRI, r3
 8106432:	f3bf 8f6f 	isb	sy
 8106436:	f3bf 8f4f 	dsb	sy
 810643a:	60fb      	str	r3, [r7, #12]
}
 810643c:	bf00      	nop
 810643e:	bf00      	nop
 8106440:	e7fd      	b.n	810643e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8106442:	693b      	ldr	r3, [r7, #16]
 8106444:	3318      	adds	r3, #24
 8106446:	4618      	mov	r0, r3
 8106448:	f7fe fc02 	bl	8104c50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810644c:	4b1d      	ldr	r3, [pc, #116]	@ (81064c4 <xTaskRemoveFromEventList+0xb0>)
 810644e:	681b      	ldr	r3, [r3, #0]
 8106450:	2b00      	cmp	r3, #0
 8106452:	d11d      	bne.n	8106490 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8106454:	693b      	ldr	r3, [r7, #16]
 8106456:	3304      	adds	r3, #4
 8106458:	4618      	mov	r0, r3
 810645a:	f7fe fbf9 	bl	8104c50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810645e:	693b      	ldr	r3, [r7, #16]
 8106460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106462:	4b19      	ldr	r3, [pc, #100]	@ (81064c8 <xTaskRemoveFromEventList+0xb4>)
 8106464:	681b      	ldr	r3, [r3, #0]
 8106466:	429a      	cmp	r2, r3
 8106468:	d903      	bls.n	8106472 <xTaskRemoveFromEventList+0x5e>
 810646a:	693b      	ldr	r3, [r7, #16]
 810646c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810646e:	4a16      	ldr	r2, [pc, #88]	@ (81064c8 <xTaskRemoveFromEventList+0xb4>)
 8106470:	6013      	str	r3, [r2, #0]
 8106472:	693b      	ldr	r3, [r7, #16]
 8106474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106476:	4613      	mov	r3, r2
 8106478:	009b      	lsls	r3, r3, #2
 810647a:	4413      	add	r3, r2
 810647c:	009b      	lsls	r3, r3, #2
 810647e:	4a13      	ldr	r2, [pc, #76]	@ (81064cc <xTaskRemoveFromEventList+0xb8>)
 8106480:	441a      	add	r2, r3
 8106482:	693b      	ldr	r3, [r7, #16]
 8106484:	3304      	adds	r3, #4
 8106486:	4619      	mov	r1, r3
 8106488:	4610      	mov	r0, r2
 810648a:	f7fe fb84 	bl	8104b96 <vListInsertEnd>
 810648e:	e005      	b.n	810649c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8106490:	693b      	ldr	r3, [r7, #16]
 8106492:	3318      	adds	r3, #24
 8106494:	4619      	mov	r1, r3
 8106496:	480e      	ldr	r0, [pc, #56]	@ (81064d0 <xTaskRemoveFromEventList+0xbc>)
 8106498:	f7fe fb7d 	bl	8104b96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810649c:	693b      	ldr	r3, [r7, #16]
 810649e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81064a0:	4b0c      	ldr	r3, [pc, #48]	@ (81064d4 <xTaskRemoveFromEventList+0xc0>)
 81064a2:	681b      	ldr	r3, [r3, #0]
 81064a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81064a6:	429a      	cmp	r2, r3
 81064a8:	d905      	bls.n	81064b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 81064aa:	2301      	movs	r3, #1
 81064ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 81064ae:	4b0a      	ldr	r3, [pc, #40]	@ (81064d8 <xTaskRemoveFromEventList+0xc4>)
 81064b0:	2201      	movs	r2, #1
 81064b2:	601a      	str	r2, [r3, #0]
 81064b4:	e001      	b.n	81064ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 81064b6:	2300      	movs	r3, #0
 81064b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 81064ba:	697b      	ldr	r3, [r7, #20]
}
 81064bc:	4618      	mov	r0, r3
 81064be:	3718      	adds	r7, #24
 81064c0:	46bd      	mov	sp, r7
 81064c2:	bd80      	pop	{r7, pc}
 81064c4:	100048f8 	.word	0x100048f8
 81064c8:	100048d8 	.word	0x100048d8
 81064cc:	10004400 	.word	0x10004400
 81064d0:	10004890 	.word	0x10004890
 81064d4:	100043fc 	.word	0x100043fc
 81064d8:	100048e4 	.word	0x100048e4

081064dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 81064dc:	b480      	push	{r7}
 81064de:	b083      	sub	sp, #12
 81064e0:	af00      	add	r7, sp, #0
 81064e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 81064e4:	4b06      	ldr	r3, [pc, #24]	@ (8106500 <vTaskInternalSetTimeOutState+0x24>)
 81064e6:	681a      	ldr	r2, [r3, #0]
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 81064ec:	4b05      	ldr	r3, [pc, #20]	@ (8106504 <vTaskInternalSetTimeOutState+0x28>)
 81064ee:	681a      	ldr	r2, [r3, #0]
 81064f0:	687b      	ldr	r3, [r7, #4]
 81064f2:	605a      	str	r2, [r3, #4]
}
 81064f4:	bf00      	nop
 81064f6:	370c      	adds	r7, #12
 81064f8:	46bd      	mov	sp, r7
 81064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064fe:	4770      	bx	lr
 8106500:	100048e8 	.word	0x100048e8
 8106504:	100048d4 	.word	0x100048d4

08106508 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8106508:	b580      	push	{r7, lr}
 810650a:	b088      	sub	sp, #32
 810650c:	af00      	add	r7, sp, #0
 810650e:	6078      	str	r0, [r7, #4]
 8106510:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8106512:	687b      	ldr	r3, [r7, #4]
 8106514:	2b00      	cmp	r3, #0
 8106516:	d10b      	bne.n	8106530 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8106518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810651c:	f383 8811 	msr	BASEPRI, r3
 8106520:	f3bf 8f6f 	isb	sy
 8106524:	f3bf 8f4f 	dsb	sy
 8106528:	613b      	str	r3, [r7, #16]
}
 810652a:	bf00      	nop
 810652c:	bf00      	nop
 810652e:	e7fd      	b.n	810652c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8106530:	683b      	ldr	r3, [r7, #0]
 8106532:	2b00      	cmp	r3, #0
 8106534:	d10b      	bne.n	810654e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8106536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810653a:	f383 8811 	msr	BASEPRI, r3
 810653e:	f3bf 8f6f 	isb	sy
 8106542:	f3bf 8f4f 	dsb	sy
 8106546:	60fb      	str	r3, [r7, #12]
}
 8106548:	bf00      	nop
 810654a:	bf00      	nop
 810654c:	e7fd      	b.n	810654a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810654e:	f7fe fcdb 	bl	8104f08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8106552:	4b1d      	ldr	r3, [pc, #116]	@ (81065c8 <xTaskCheckForTimeOut+0xc0>)
 8106554:	681b      	ldr	r3, [r3, #0]
 8106556:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8106558:	687b      	ldr	r3, [r7, #4]
 810655a:	685b      	ldr	r3, [r3, #4]
 810655c:	69ba      	ldr	r2, [r7, #24]
 810655e:	1ad3      	subs	r3, r2, r3
 8106560:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8106562:	683b      	ldr	r3, [r7, #0]
 8106564:	681b      	ldr	r3, [r3, #0]
 8106566:	f1b3 3fff 	cmp.w	r3, #4294967295
 810656a:	d102      	bne.n	8106572 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810656c:	2300      	movs	r3, #0
 810656e:	61fb      	str	r3, [r7, #28]
 8106570:	e023      	b.n	81065ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8106572:	687b      	ldr	r3, [r7, #4]
 8106574:	681a      	ldr	r2, [r3, #0]
 8106576:	4b15      	ldr	r3, [pc, #84]	@ (81065cc <xTaskCheckForTimeOut+0xc4>)
 8106578:	681b      	ldr	r3, [r3, #0]
 810657a:	429a      	cmp	r2, r3
 810657c:	d007      	beq.n	810658e <xTaskCheckForTimeOut+0x86>
 810657e:	687b      	ldr	r3, [r7, #4]
 8106580:	685b      	ldr	r3, [r3, #4]
 8106582:	69ba      	ldr	r2, [r7, #24]
 8106584:	429a      	cmp	r2, r3
 8106586:	d302      	bcc.n	810658e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8106588:	2301      	movs	r3, #1
 810658a:	61fb      	str	r3, [r7, #28]
 810658c:	e015      	b.n	81065ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810658e:	683b      	ldr	r3, [r7, #0]
 8106590:	681b      	ldr	r3, [r3, #0]
 8106592:	697a      	ldr	r2, [r7, #20]
 8106594:	429a      	cmp	r2, r3
 8106596:	d20b      	bcs.n	81065b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8106598:	683b      	ldr	r3, [r7, #0]
 810659a:	681a      	ldr	r2, [r3, #0]
 810659c:	697b      	ldr	r3, [r7, #20]
 810659e:	1ad2      	subs	r2, r2, r3
 81065a0:	683b      	ldr	r3, [r7, #0]
 81065a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 81065a4:	6878      	ldr	r0, [r7, #4]
 81065a6:	f7ff ff99 	bl	81064dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 81065aa:	2300      	movs	r3, #0
 81065ac:	61fb      	str	r3, [r7, #28]
 81065ae:	e004      	b.n	81065ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 81065b0:	683b      	ldr	r3, [r7, #0]
 81065b2:	2200      	movs	r2, #0
 81065b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 81065b6:	2301      	movs	r3, #1
 81065b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 81065ba:	f7fe fcd7 	bl	8104f6c <vPortExitCritical>

	return xReturn;
 81065be:	69fb      	ldr	r3, [r7, #28]
}
 81065c0:	4618      	mov	r0, r3
 81065c2:	3720      	adds	r7, #32
 81065c4:	46bd      	mov	sp, r7
 81065c6:	bd80      	pop	{r7, pc}
 81065c8:	100048d4 	.word	0x100048d4
 81065cc:	100048e8 	.word	0x100048e8

081065d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 81065d0:	b480      	push	{r7}
 81065d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 81065d4:	4b03      	ldr	r3, [pc, #12]	@ (81065e4 <vTaskMissedYield+0x14>)
 81065d6:	2201      	movs	r2, #1
 81065d8:	601a      	str	r2, [r3, #0]
}
 81065da:	bf00      	nop
 81065dc:	46bd      	mov	sp, r7
 81065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065e2:	4770      	bx	lr
 81065e4:	100048e4 	.word	0x100048e4

081065e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 81065e8:	b580      	push	{r7, lr}
 81065ea:	b082      	sub	sp, #8
 81065ec:	af00      	add	r7, sp, #0
 81065ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 81065f0:	f000 f852 	bl	8106698 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 81065f4:	4b06      	ldr	r3, [pc, #24]	@ (8106610 <prvIdleTask+0x28>)
 81065f6:	681b      	ldr	r3, [r3, #0]
 81065f8:	2b01      	cmp	r3, #1
 81065fa:	d9f9      	bls.n	81065f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 81065fc:	4b05      	ldr	r3, [pc, #20]	@ (8106614 <prvIdleTask+0x2c>)
 81065fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106602:	601a      	str	r2, [r3, #0]
 8106604:	f3bf 8f4f 	dsb	sy
 8106608:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810660c:	e7f0      	b.n	81065f0 <prvIdleTask+0x8>
 810660e:	bf00      	nop
 8106610:	10004400 	.word	0x10004400
 8106614:	e000ed04 	.word	0xe000ed04

08106618 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8106618:	b580      	push	{r7, lr}
 810661a:	b082      	sub	sp, #8
 810661c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810661e:	2300      	movs	r3, #0
 8106620:	607b      	str	r3, [r7, #4]
 8106622:	e00c      	b.n	810663e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8106624:	687a      	ldr	r2, [r7, #4]
 8106626:	4613      	mov	r3, r2
 8106628:	009b      	lsls	r3, r3, #2
 810662a:	4413      	add	r3, r2
 810662c:	009b      	lsls	r3, r3, #2
 810662e:	4a12      	ldr	r2, [pc, #72]	@ (8106678 <prvInitialiseTaskLists+0x60>)
 8106630:	4413      	add	r3, r2
 8106632:	4618      	mov	r0, r3
 8106634:	f7fe fa82 	bl	8104b3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8106638:	687b      	ldr	r3, [r7, #4]
 810663a:	3301      	adds	r3, #1
 810663c:	607b      	str	r3, [r7, #4]
 810663e:	687b      	ldr	r3, [r7, #4]
 8106640:	2b37      	cmp	r3, #55	@ 0x37
 8106642:	d9ef      	bls.n	8106624 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8106644:	480d      	ldr	r0, [pc, #52]	@ (810667c <prvInitialiseTaskLists+0x64>)
 8106646:	f7fe fa79 	bl	8104b3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810664a:	480d      	ldr	r0, [pc, #52]	@ (8106680 <prvInitialiseTaskLists+0x68>)
 810664c:	f7fe fa76 	bl	8104b3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8106650:	480c      	ldr	r0, [pc, #48]	@ (8106684 <prvInitialiseTaskLists+0x6c>)
 8106652:	f7fe fa73 	bl	8104b3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8106656:	480c      	ldr	r0, [pc, #48]	@ (8106688 <prvInitialiseTaskLists+0x70>)
 8106658:	f7fe fa70 	bl	8104b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810665c:	480b      	ldr	r0, [pc, #44]	@ (810668c <prvInitialiseTaskLists+0x74>)
 810665e:	f7fe fa6d 	bl	8104b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8106662:	4b0b      	ldr	r3, [pc, #44]	@ (8106690 <prvInitialiseTaskLists+0x78>)
 8106664:	4a05      	ldr	r2, [pc, #20]	@ (810667c <prvInitialiseTaskLists+0x64>)
 8106666:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8106668:	4b0a      	ldr	r3, [pc, #40]	@ (8106694 <prvInitialiseTaskLists+0x7c>)
 810666a:	4a05      	ldr	r2, [pc, #20]	@ (8106680 <prvInitialiseTaskLists+0x68>)
 810666c:	601a      	str	r2, [r3, #0]
}
 810666e:	bf00      	nop
 8106670:	3708      	adds	r7, #8
 8106672:	46bd      	mov	sp, r7
 8106674:	bd80      	pop	{r7, pc}
 8106676:	bf00      	nop
 8106678:	10004400 	.word	0x10004400
 810667c:	10004860 	.word	0x10004860
 8106680:	10004874 	.word	0x10004874
 8106684:	10004890 	.word	0x10004890
 8106688:	100048a4 	.word	0x100048a4
 810668c:	100048bc 	.word	0x100048bc
 8106690:	10004888 	.word	0x10004888
 8106694:	1000488c 	.word	0x1000488c

08106698 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8106698:	b580      	push	{r7, lr}
 810669a:	b082      	sub	sp, #8
 810669c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810669e:	e019      	b.n	81066d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 81066a0:	f7fe fc32 	bl	8104f08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81066a4:	4b10      	ldr	r3, [pc, #64]	@ (81066e8 <prvCheckTasksWaitingTermination+0x50>)
 81066a6:	68db      	ldr	r3, [r3, #12]
 81066a8:	68db      	ldr	r3, [r3, #12]
 81066aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81066ac:	687b      	ldr	r3, [r7, #4]
 81066ae:	3304      	adds	r3, #4
 81066b0:	4618      	mov	r0, r3
 81066b2:	f7fe facd 	bl	8104c50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 81066b6:	4b0d      	ldr	r3, [pc, #52]	@ (81066ec <prvCheckTasksWaitingTermination+0x54>)
 81066b8:	681b      	ldr	r3, [r3, #0]
 81066ba:	3b01      	subs	r3, #1
 81066bc:	4a0b      	ldr	r2, [pc, #44]	@ (81066ec <prvCheckTasksWaitingTermination+0x54>)
 81066be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 81066c0:	4b0b      	ldr	r3, [pc, #44]	@ (81066f0 <prvCheckTasksWaitingTermination+0x58>)
 81066c2:	681b      	ldr	r3, [r3, #0]
 81066c4:	3b01      	subs	r3, #1
 81066c6:	4a0a      	ldr	r2, [pc, #40]	@ (81066f0 <prvCheckTasksWaitingTermination+0x58>)
 81066c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 81066ca:	f7fe fc4f 	bl	8104f6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 81066ce:	6878      	ldr	r0, [r7, #4]
 81066d0:	f000 f810 	bl	81066f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81066d4:	4b06      	ldr	r3, [pc, #24]	@ (81066f0 <prvCheckTasksWaitingTermination+0x58>)
 81066d6:	681b      	ldr	r3, [r3, #0]
 81066d8:	2b00      	cmp	r3, #0
 81066da:	d1e1      	bne.n	81066a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 81066dc:	bf00      	nop
 81066de:	bf00      	nop
 81066e0:	3708      	adds	r7, #8
 81066e2:	46bd      	mov	sp, r7
 81066e4:	bd80      	pop	{r7, pc}
 81066e6:	bf00      	nop
 81066e8:	100048a4 	.word	0x100048a4
 81066ec:	100048d0 	.word	0x100048d0
 81066f0:	100048b8 	.word	0x100048b8

081066f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 81066f4:	b580      	push	{r7, lr}
 81066f6:	b084      	sub	sp, #16
 81066f8:	af00      	add	r7, sp, #0
 81066fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 81066fc:	687b      	ldr	r3, [r7, #4]
 81066fe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8106702:	2b00      	cmp	r3, #0
 8106704:	d108      	bne.n	8106718 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8106706:	687b      	ldr	r3, [r7, #4]
 8106708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810670a:	4618      	mov	r0, r3
 810670c:	f7fe f8f6 	bl	81048fc <vPortFree>
				vPortFree( pxTCB );
 8106710:	6878      	ldr	r0, [r7, #4]
 8106712:	f7fe f8f3 	bl	81048fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8106716:	e019      	b.n	810674c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8106718:	687b      	ldr	r3, [r7, #4]
 810671a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 810671e:	2b01      	cmp	r3, #1
 8106720:	d103      	bne.n	810672a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8106722:	6878      	ldr	r0, [r7, #4]
 8106724:	f7fe f8ea 	bl	81048fc <vPortFree>
	}
 8106728:	e010      	b.n	810674c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810672a:	687b      	ldr	r3, [r7, #4]
 810672c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8106730:	2b02      	cmp	r3, #2
 8106732:	d00b      	beq.n	810674c <prvDeleteTCB+0x58>
	__asm volatile
 8106734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106738:	f383 8811 	msr	BASEPRI, r3
 810673c:	f3bf 8f6f 	isb	sy
 8106740:	f3bf 8f4f 	dsb	sy
 8106744:	60fb      	str	r3, [r7, #12]
}
 8106746:	bf00      	nop
 8106748:	bf00      	nop
 810674a:	e7fd      	b.n	8106748 <prvDeleteTCB+0x54>
	}
 810674c:	bf00      	nop
 810674e:	3710      	adds	r7, #16
 8106750:	46bd      	mov	sp, r7
 8106752:	bd80      	pop	{r7, pc}

08106754 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8106754:	b480      	push	{r7}
 8106756:	b083      	sub	sp, #12
 8106758:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810675a:	4b0c      	ldr	r3, [pc, #48]	@ (810678c <prvResetNextTaskUnblockTime+0x38>)
 810675c:	681b      	ldr	r3, [r3, #0]
 810675e:	681b      	ldr	r3, [r3, #0]
 8106760:	2b00      	cmp	r3, #0
 8106762:	d104      	bne.n	810676e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8106764:	4b0a      	ldr	r3, [pc, #40]	@ (8106790 <prvResetNextTaskUnblockTime+0x3c>)
 8106766:	f04f 32ff 	mov.w	r2, #4294967295
 810676a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810676c:	e008      	b.n	8106780 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810676e:	4b07      	ldr	r3, [pc, #28]	@ (810678c <prvResetNextTaskUnblockTime+0x38>)
 8106770:	681b      	ldr	r3, [r3, #0]
 8106772:	68db      	ldr	r3, [r3, #12]
 8106774:	68db      	ldr	r3, [r3, #12]
 8106776:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8106778:	687b      	ldr	r3, [r7, #4]
 810677a:	685b      	ldr	r3, [r3, #4]
 810677c:	4a04      	ldr	r2, [pc, #16]	@ (8106790 <prvResetNextTaskUnblockTime+0x3c>)
 810677e:	6013      	str	r3, [r2, #0]
}
 8106780:	bf00      	nop
 8106782:	370c      	adds	r7, #12
 8106784:	46bd      	mov	sp, r7
 8106786:	f85d 7b04 	ldr.w	r7, [sp], #4
 810678a:	4770      	bx	lr
 810678c:	10004888 	.word	0x10004888
 8106790:	100048f0 	.word	0x100048f0

08106794 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8106794:	b480      	push	{r7}
 8106796:	b083      	sub	sp, #12
 8106798:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810679a:	4b0b      	ldr	r3, [pc, #44]	@ (81067c8 <xTaskGetSchedulerState+0x34>)
 810679c:	681b      	ldr	r3, [r3, #0]
 810679e:	2b00      	cmp	r3, #0
 81067a0:	d102      	bne.n	81067a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 81067a2:	2301      	movs	r3, #1
 81067a4:	607b      	str	r3, [r7, #4]
 81067a6:	e008      	b.n	81067ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81067a8:	4b08      	ldr	r3, [pc, #32]	@ (81067cc <xTaskGetSchedulerState+0x38>)
 81067aa:	681b      	ldr	r3, [r3, #0]
 81067ac:	2b00      	cmp	r3, #0
 81067ae:	d102      	bne.n	81067b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 81067b0:	2302      	movs	r3, #2
 81067b2:	607b      	str	r3, [r7, #4]
 81067b4:	e001      	b.n	81067ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 81067b6:	2300      	movs	r3, #0
 81067b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 81067ba:	687b      	ldr	r3, [r7, #4]
	}
 81067bc:	4618      	mov	r0, r3
 81067be:	370c      	adds	r7, #12
 81067c0:	46bd      	mov	sp, r7
 81067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067c6:	4770      	bx	lr
 81067c8:	100048dc 	.word	0x100048dc
 81067cc:	100048f8 	.word	0x100048f8

081067d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 81067d0:	b580      	push	{r7, lr}
 81067d2:	b086      	sub	sp, #24
 81067d4:	af00      	add	r7, sp, #0
 81067d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 81067d8:	687b      	ldr	r3, [r7, #4]
 81067da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 81067dc:	2300      	movs	r3, #0
 81067de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 81067e0:	687b      	ldr	r3, [r7, #4]
 81067e2:	2b00      	cmp	r3, #0
 81067e4:	d058      	beq.n	8106898 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 81067e6:	4b2f      	ldr	r3, [pc, #188]	@ (81068a4 <xTaskPriorityDisinherit+0xd4>)
 81067e8:	681b      	ldr	r3, [r3, #0]
 81067ea:	693a      	ldr	r2, [r7, #16]
 81067ec:	429a      	cmp	r2, r3
 81067ee:	d00b      	beq.n	8106808 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 81067f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81067f4:	f383 8811 	msr	BASEPRI, r3
 81067f8:	f3bf 8f6f 	isb	sy
 81067fc:	f3bf 8f4f 	dsb	sy
 8106800:	60fb      	str	r3, [r7, #12]
}
 8106802:	bf00      	nop
 8106804:	bf00      	nop
 8106806:	e7fd      	b.n	8106804 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8106808:	693b      	ldr	r3, [r7, #16]
 810680a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810680c:	2b00      	cmp	r3, #0
 810680e:	d10b      	bne.n	8106828 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8106810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106814:	f383 8811 	msr	BASEPRI, r3
 8106818:	f3bf 8f6f 	isb	sy
 810681c:	f3bf 8f4f 	dsb	sy
 8106820:	60bb      	str	r3, [r7, #8]
}
 8106822:	bf00      	nop
 8106824:	bf00      	nop
 8106826:	e7fd      	b.n	8106824 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8106828:	693b      	ldr	r3, [r7, #16]
 810682a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810682c:	1e5a      	subs	r2, r3, #1
 810682e:	693b      	ldr	r3, [r7, #16]
 8106830:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8106832:	693b      	ldr	r3, [r7, #16]
 8106834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106836:	693b      	ldr	r3, [r7, #16]
 8106838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810683a:	429a      	cmp	r2, r3
 810683c:	d02c      	beq.n	8106898 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810683e:	693b      	ldr	r3, [r7, #16]
 8106840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106842:	2b00      	cmp	r3, #0
 8106844:	d128      	bne.n	8106898 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8106846:	693b      	ldr	r3, [r7, #16]
 8106848:	3304      	adds	r3, #4
 810684a:	4618      	mov	r0, r3
 810684c:	f7fe fa00 	bl	8104c50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8106850:	693b      	ldr	r3, [r7, #16]
 8106852:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8106854:	693b      	ldr	r3, [r7, #16]
 8106856:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8106858:	693b      	ldr	r3, [r7, #16]
 810685a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810685c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8106860:	693b      	ldr	r3, [r7, #16]
 8106862:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8106864:	693b      	ldr	r3, [r7, #16]
 8106866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106868:	4b0f      	ldr	r3, [pc, #60]	@ (81068a8 <xTaskPriorityDisinherit+0xd8>)
 810686a:	681b      	ldr	r3, [r3, #0]
 810686c:	429a      	cmp	r2, r3
 810686e:	d903      	bls.n	8106878 <xTaskPriorityDisinherit+0xa8>
 8106870:	693b      	ldr	r3, [r7, #16]
 8106872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106874:	4a0c      	ldr	r2, [pc, #48]	@ (81068a8 <xTaskPriorityDisinherit+0xd8>)
 8106876:	6013      	str	r3, [r2, #0]
 8106878:	693b      	ldr	r3, [r7, #16]
 810687a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810687c:	4613      	mov	r3, r2
 810687e:	009b      	lsls	r3, r3, #2
 8106880:	4413      	add	r3, r2
 8106882:	009b      	lsls	r3, r3, #2
 8106884:	4a09      	ldr	r2, [pc, #36]	@ (81068ac <xTaskPriorityDisinherit+0xdc>)
 8106886:	441a      	add	r2, r3
 8106888:	693b      	ldr	r3, [r7, #16]
 810688a:	3304      	adds	r3, #4
 810688c:	4619      	mov	r1, r3
 810688e:	4610      	mov	r0, r2
 8106890:	f7fe f981 	bl	8104b96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8106894:	2301      	movs	r3, #1
 8106896:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8106898:	697b      	ldr	r3, [r7, #20]
	}
 810689a:	4618      	mov	r0, r3
 810689c:	3718      	adds	r7, #24
 810689e:	46bd      	mov	sp, r7
 81068a0:	bd80      	pop	{r7, pc}
 81068a2:	bf00      	nop
 81068a4:	100043fc 	.word	0x100043fc
 81068a8:	100048d8 	.word	0x100048d8
 81068ac:	10004400 	.word	0x10004400

081068b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 81068b0:	b580      	push	{r7, lr}
 81068b2:	b084      	sub	sp, #16
 81068b4:	af00      	add	r7, sp, #0
 81068b6:	6078      	str	r0, [r7, #4]
 81068b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 81068ba:	4b21      	ldr	r3, [pc, #132]	@ (8106940 <prvAddCurrentTaskToDelayedList+0x90>)
 81068bc:	681b      	ldr	r3, [r3, #0]
 81068be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81068c0:	4b20      	ldr	r3, [pc, #128]	@ (8106944 <prvAddCurrentTaskToDelayedList+0x94>)
 81068c2:	681b      	ldr	r3, [r3, #0]
 81068c4:	3304      	adds	r3, #4
 81068c6:	4618      	mov	r0, r3
 81068c8:	f7fe f9c2 	bl	8104c50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 81068cc:	687b      	ldr	r3, [r7, #4]
 81068ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 81068d2:	d10a      	bne.n	81068ea <prvAddCurrentTaskToDelayedList+0x3a>
 81068d4:	683b      	ldr	r3, [r7, #0]
 81068d6:	2b00      	cmp	r3, #0
 81068d8:	d007      	beq.n	81068ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81068da:	4b1a      	ldr	r3, [pc, #104]	@ (8106944 <prvAddCurrentTaskToDelayedList+0x94>)
 81068dc:	681b      	ldr	r3, [r3, #0]
 81068de:	3304      	adds	r3, #4
 81068e0:	4619      	mov	r1, r3
 81068e2:	4819      	ldr	r0, [pc, #100]	@ (8106948 <prvAddCurrentTaskToDelayedList+0x98>)
 81068e4:	f7fe f957 	bl	8104b96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81068e8:	e026      	b.n	8106938 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81068ea:	68fa      	ldr	r2, [r7, #12]
 81068ec:	687b      	ldr	r3, [r7, #4]
 81068ee:	4413      	add	r3, r2
 81068f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81068f2:	4b14      	ldr	r3, [pc, #80]	@ (8106944 <prvAddCurrentTaskToDelayedList+0x94>)
 81068f4:	681b      	ldr	r3, [r3, #0]
 81068f6:	68ba      	ldr	r2, [r7, #8]
 81068f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81068fa:	68ba      	ldr	r2, [r7, #8]
 81068fc:	68fb      	ldr	r3, [r7, #12]
 81068fe:	429a      	cmp	r2, r3
 8106900:	d209      	bcs.n	8106916 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8106902:	4b12      	ldr	r3, [pc, #72]	@ (810694c <prvAddCurrentTaskToDelayedList+0x9c>)
 8106904:	681a      	ldr	r2, [r3, #0]
 8106906:	4b0f      	ldr	r3, [pc, #60]	@ (8106944 <prvAddCurrentTaskToDelayedList+0x94>)
 8106908:	681b      	ldr	r3, [r3, #0]
 810690a:	3304      	adds	r3, #4
 810690c:	4619      	mov	r1, r3
 810690e:	4610      	mov	r0, r2
 8106910:	f7fe f965 	bl	8104bde <vListInsert>
}
 8106914:	e010      	b.n	8106938 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8106916:	4b0e      	ldr	r3, [pc, #56]	@ (8106950 <prvAddCurrentTaskToDelayedList+0xa0>)
 8106918:	681a      	ldr	r2, [r3, #0]
 810691a:	4b0a      	ldr	r3, [pc, #40]	@ (8106944 <prvAddCurrentTaskToDelayedList+0x94>)
 810691c:	681b      	ldr	r3, [r3, #0]
 810691e:	3304      	adds	r3, #4
 8106920:	4619      	mov	r1, r3
 8106922:	4610      	mov	r0, r2
 8106924:	f7fe f95b 	bl	8104bde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8106928:	4b0a      	ldr	r3, [pc, #40]	@ (8106954 <prvAddCurrentTaskToDelayedList+0xa4>)
 810692a:	681b      	ldr	r3, [r3, #0]
 810692c:	68ba      	ldr	r2, [r7, #8]
 810692e:	429a      	cmp	r2, r3
 8106930:	d202      	bcs.n	8106938 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8106932:	4a08      	ldr	r2, [pc, #32]	@ (8106954 <prvAddCurrentTaskToDelayedList+0xa4>)
 8106934:	68bb      	ldr	r3, [r7, #8]
 8106936:	6013      	str	r3, [r2, #0]
}
 8106938:	bf00      	nop
 810693a:	3710      	adds	r7, #16
 810693c:	46bd      	mov	sp, r7
 810693e:	bd80      	pop	{r7, pc}
 8106940:	100048d4 	.word	0x100048d4
 8106944:	100043fc 	.word	0x100043fc
 8106948:	100048bc 	.word	0x100048bc
 810694c:	1000488c 	.word	0x1000488c
 8106950:	10004888 	.word	0x10004888
 8106954:	100048f0 	.word	0x100048f0

08106958 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8106958:	b580      	push	{r7, lr}
 810695a:	b08a      	sub	sp, #40	@ 0x28
 810695c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810695e:	2300      	movs	r3, #0
 8106960:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8106962:	f000 fb13 	bl	8106f8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8106966:	4b1d      	ldr	r3, [pc, #116]	@ (81069dc <xTimerCreateTimerTask+0x84>)
 8106968:	681b      	ldr	r3, [r3, #0]
 810696a:	2b00      	cmp	r3, #0
 810696c:	d021      	beq.n	81069b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810696e:	2300      	movs	r3, #0
 8106970:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8106972:	2300      	movs	r3, #0
 8106974:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8106976:	1d3a      	adds	r2, r7, #4
 8106978:	f107 0108 	add.w	r1, r7, #8
 810697c:	f107 030c 	add.w	r3, r7, #12
 8106980:	4618      	mov	r0, r3
 8106982:	f7fd fed3 	bl	810472c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8106986:	6879      	ldr	r1, [r7, #4]
 8106988:	68bb      	ldr	r3, [r7, #8]
 810698a:	68fa      	ldr	r2, [r7, #12]
 810698c:	9202      	str	r2, [sp, #8]
 810698e:	9301      	str	r3, [sp, #4]
 8106990:	2302      	movs	r3, #2
 8106992:	9300      	str	r3, [sp, #0]
 8106994:	2300      	movs	r3, #0
 8106996:	460a      	mov	r2, r1
 8106998:	4911      	ldr	r1, [pc, #68]	@ (81069e0 <xTimerCreateTimerTask+0x88>)
 810699a:	4812      	ldr	r0, [pc, #72]	@ (81069e4 <xTimerCreateTimerTask+0x8c>)
 810699c:	f7ff f8d0 	bl	8105b40 <xTaskCreateStatic>
 81069a0:	4603      	mov	r3, r0
 81069a2:	4a11      	ldr	r2, [pc, #68]	@ (81069e8 <xTimerCreateTimerTask+0x90>)
 81069a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 81069a6:	4b10      	ldr	r3, [pc, #64]	@ (81069e8 <xTimerCreateTimerTask+0x90>)
 81069a8:	681b      	ldr	r3, [r3, #0]
 81069aa:	2b00      	cmp	r3, #0
 81069ac:	d001      	beq.n	81069b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 81069ae:	2301      	movs	r3, #1
 81069b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 81069b2:	697b      	ldr	r3, [r7, #20]
 81069b4:	2b00      	cmp	r3, #0
 81069b6:	d10b      	bne.n	81069d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 81069b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81069bc:	f383 8811 	msr	BASEPRI, r3
 81069c0:	f3bf 8f6f 	isb	sy
 81069c4:	f3bf 8f4f 	dsb	sy
 81069c8:	613b      	str	r3, [r7, #16]
}
 81069ca:	bf00      	nop
 81069cc:	bf00      	nop
 81069ce:	e7fd      	b.n	81069cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 81069d0:	697b      	ldr	r3, [r7, #20]
}
 81069d2:	4618      	mov	r0, r3
 81069d4:	3718      	adds	r7, #24
 81069d6:	46bd      	mov	sp, r7
 81069d8:	bd80      	pop	{r7, pc}
 81069da:	bf00      	nop
 81069dc:	1000492c 	.word	0x1000492c
 81069e0:	081070ac 	.word	0x081070ac
 81069e4:	08106b25 	.word	0x08106b25
 81069e8:	10004930 	.word	0x10004930

081069ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 81069ec:	b580      	push	{r7, lr}
 81069ee:	b08a      	sub	sp, #40	@ 0x28
 81069f0:	af00      	add	r7, sp, #0
 81069f2:	60f8      	str	r0, [r7, #12]
 81069f4:	60b9      	str	r1, [r7, #8]
 81069f6:	607a      	str	r2, [r7, #4]
 81069f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 81069fa:	2300      	movs	r3, #0
 81069fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 81069fe:	68fb      	ldr	r3, [r7, #12]
 8106a00:	2b00      	cmp	r3, #0
 8106a02:	d10b      	bne.n	8106a1c <xTimerGenericCommand+0x30>
	__asm volatile
 8106a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106a08:	f383 8811 	msr	BASEPRI, r3
 8106a0c:	f3bf 8f6f 	isb	sy
 8106a10:	f3bf 8f4f 	dsb	sy
 8106a14:	623b      	str	r3, [r7, #32]
}
 8106a16:	bf00      	nop
 8106a18:	bf00      	nop
 8106a1a:	e7fd      	b.n	8106a18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8106a1c:	4b19      	ldr	r3, [pc, #100]	@ (8106a84 <xTimerGenericCommand+0x98>)
 8106a1e:	681b      	ldr	r3, [r3, #0]
 8106a20:	2b00      	cmp	r3, #0
 8106a22:	d02a      	beq.n	8106a7a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8106a24:	68bb      	ldr	r3, [r7, #8]
 8106a26:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8106a28:	687b      	ldr	r3, [r7, #4]
 8106a2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8106a2c:	68fb      	ldr	r3, [r7, #12]
 8106a2e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8106a30:	68bb      	ldr	r3, [r7, #8]
 8106a32:	2b05      	cmp	r3, #5
 8106a34:	dc18      	bgt.n	8106a68 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8106a36:	f7ff fead 	bl	8106794 <xTaskGetSchedulerState>
 8106a3a:	4603      	mov	r3, r0
 8106a3c:	2b02      	cmp	r3, #2
 8106a3e:	d109      	bne.n	8106a54 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8106a40:	4b10      	ldr	r3, [pc, #64]	@ (8106a84 <xTimerGenericCommand+0x98>)
 8106a42:	6818      	ldr	r0, [r3, #0]
 8106a44:	f107 0110 	add.w	r1, r7, #16
 8106a48:	2300      	movs	r3, #0
 8106a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106a4c:	f7fe fc88 	bl	8105360 <xQueueGenericSend>
 8106a50:	6278      	str	r0, [r7, #36]	@ 0x24
 8106a52:	e012      	b.n	8106a7a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8106a54:	4b0b      	ldr	r3, [pc, #44]	@ (8106a84 <xTimerGenericCommand+0x98>)
 8106a56:	6818      	ldr	r0, [r3, #0]
 8106a58:	f107 0110 	add.w	r1, r7, #16
 8106a5c:	2300      	movs	r3, #0
 8106a5e:	2200      	movs	r2, #0
 8106a60:	f7fe fc7e 	bl	8105360 <xQueueGenericSend>
 8106a64:	6278      	str	r0, [r7, #36]	@ 0x24
 8106a66:	e008      	b.n	8106a7a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8106a68:	4b06      	ldr	r3, [pc, #24]	@ (8106a84 <xTimerGenericCommand+0x98>)
 8106a6a:	6818      	ldr	r0, [r3, #0]
 8106a6c:	f107 0110 	add.w	r1, r7, #16
 8106a70:	2300      	movs	r3, #0
 8106a72:	683a      	ldr	r2, [r7, #0]
 8106a74:	f7fe fd76 	bl	8105564 <xQueueGenericSendFromISR>
 8106a78:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8106a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8106a7c:	4618      	mov	r0, r3
 8106a7e:	3728      	adds	r7, #40	@ 0x28
 8106a80:	46bd      	mov	sp, r7
 8106a82:	bd80      	pop	{r7, pc}
 8106a84:	1000492c 	.word	0x1000492c

08106a88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8106a88:	b580      	push	{r7, lr}
 8106a8a:	b088      	sub	sp, #32
 8106a8c:	af02      	add	r7, sp, #8
 8106a8e:	6078      	str	r0, [r7, #4]
 8106a90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106a92:	4b23      	ldr	r3, [pc, #140]	@ (8106b20 <prvProcessExpiredTimer+0x98>)
 8106a94:	681b      	ldr	r3, [r3, #0]
 8106a96:	68db      	ldr	r3, [r3, #12]
 8106a98:	68db      	ldr	r3, [r3, #12]
 8106a9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8106a9c:	697b      	ldr	r3, [r7, #20]
 8106a9e:	3304      	adds	r3, #4
 8106aa0:	4618      	mov	r0, r3
 8106aa2:	f7fe f8d5 	bl	8104c50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8106aa6:	697b      	ldr	r3, [r7, #20]
 8106aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8106aac:	f003 0304 	and.w	r3, r3, #4
 8106ab0:	2b00      	cmp	r3, #0
 8106ab2:	d023      	beq.n	8106afc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8106ab4:	697b      	ldr	r3, [r7, #20]
 8106ab6:	699a      	ldr	r2, [r3, #24]
 8106ab8:	687b      	ldr	r3, [r7, #4]
 8106aba:	18d1      	adds	r1, r2, r3
 8106abc:	687b      	ldr	r3, [r7, #4]
 8106abe:	683a      	ldr	r2, [r7, #0]
 8106ac0:	6978      	ldr	r0, [r7, #20]
 8106ac2:	f000 f8d5 	bl	8106c70 <prvInsertTimerInActiveList>
 8106ac6:	4603      	mov	r3, r0
 8106ac8:	2b00      	cmp	r3, #0
 8106aca:	d020      	beq.n	8106b0e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8106acc:	2300      	movs	r3, #0
 8106ace:	9300      	str	r3, [sp, #0]
 8106ad0:	2300      	movs	r3, #0
 8106ad2:	687a      	ldr	r2, [r7, #4]
 8106ad4:	2100      	movs	r1, #0
 8106ad6:	6978      	ldr	r0, [r7, #20]
 8106ad8:	f7ff ff88 	bl	81069ec <xTimerGenericCommand>
 8106adc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8106ade:	693b      	ldr	r3, [r7, #16]
 8106ae0:	2b00      	cmp	r3, #0
 8106ae2:	d114      	bne.n	8106b0e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8106ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106ae8:	f383 8811 	msr	BASEPRI, r3
 8106aec:	f3bf 8f6f 	isb	sy
 8106af0:	f3bf 8f4f 	dsb	sy
 8106af4:	60fb      	str	r3, [r7, #12]
}
 8106af6:	bf00      	nop
 8106af8:	bf00      	nop
 8106afa:	e7fd      	b.n	8106af8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8106afc:	697b      	ldr	r3, [r7, #20]
 8106afe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8106b02:	f023 0301 	bic.w	r3, r3, #1
 8106b06:	b2da      	uxtb	r2, r3
 8106b08:	697b      	ldr	r3, [r7, #20]
 8106b0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8106b0e:	697b      	ldr	r3, [r7, #20]
 8106b10:	6a1b      	ldr	r3, [r3, #32]
 8106b12:	6978      	ldr	r0, [r7, #20]
 8106b14:	4798      	blx	r3
}
 8106b16:	bf00      	nop
 8106b18:	3718      	adds	r7, #24
 8106b1a:	46bd      	mov	sp, r7
 8106b1c:	bd80      	pop	{r7, pc}
 8106b1e:	bf00      	nop
 8106b20:	10004924 	.word	0x10004924

08106b24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8106b24:	b580      	push	{r7, lr}
 8106b26:	b084      	sub	sp, #16
 8106b28:	af00      	add	r7, sp, #0
 8106b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8106b2c:	f107 0308 	add.w	r3, r7, #8
 8106b30:	4618      	mov	r0, r3
 8106b32:	f000 f859 	bl	8106be8 <prvGetNextExpireTime>
 8106b36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8106b38:	68bb      	ldr	r3, [r7, #8]
 8106b3a:	4619      	mov	r1, r3
 8106b3c:	68f8      	ldr	r0, [r7, #12]
 8106b3e:	f000 f805 	bl	8106b4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8106b42:	f000 f8d7 	bl	8106cf4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8106b46:	bf00      	nop
 8106b48:	e7f0      	b.n	8106b2c <prvTimerTask+0x8>
	...

08106b4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8106b4c:	b580      	push	{r7, lr}
 8106b4e:	b084      	sub	sp, #16
 8106b50:	af00      	add	r7, sp, #0
 8106b52:	6078      	str	r0, [r7, #4]
 8106b54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8106b56:	f7ff fa37 	bl	8105fc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8106b5a:	f107 0308 	add.w	r3, r7, #8
 8106b5e:	4618      	mov	r0, r3
 8106b60:	f000 f866 	bl	8106c30 <prvSampleTimeNow>
 8106b64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8106b66:	68bb      	ldr	r3, [r7, #8]
 8106b68:	2b00      	cmp	r3, #0
 8106b6a:	d130      	bne.n	8106bce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8106b6c:	683b      	ldr	r3, [r7, #0]
 8106b6e:	2b00      	cmp	r3, #0
 8106b70:	d10a      	bne.n	8106b88 <prvProcessTimerOrBlockTask+0x3c>
 8106b72:	687a      	ldr	r2, [r7, #4]
 8106b74:	68fb      	ldr	r3, [r7, #12]
 8106b76:	429a      	cmp	r2, r3
 8106b78:	d806      	bhi.n	8106b88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8106b7a:	f7ff fa33 	bl	8105fe4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8106b7e:	68f9      	ldr	r1, [r7, #12]
 8106b80:	6878      	ldr	r0, [r7, #4]
 8106b82:	f7ff ff81 	bl	8106a88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8106b86:	e024      	b.n	8106bd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8106b88:	683b      	ldr	r3, [r7, #0]
 8106b8a:	2b00      	cmp	r3, #0
 8106b8c:	d008      	beq.n	8106ba0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8106b8e:	4b13      	ldr	r3, [pc, #76]	@ (8106bdc <prvProcessTimerOrBlockTask+0x90>)
 8106b90:	681b      	ldr	r3, [r3, #0]
 8106b92:	681b      	ldr	r3, [r3, #0]
 8106b94:	2b00      	cmp	r3, #0
 8106b96:	d101      	bne.n	8106b9c <prvProcessTimerOrBlockTask+0x50>
 8106b98:	2301      	movs	r3, #1
 8106b9a:	e000      	b.n	8106b9e <prvProcessTimerOrBlockTask+0x52>
 8106b9c:	2300      	movs	r3, #0
 8106b9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8106ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8106be0 <prvProcessTimerOrBlockTask+0x94>)
 8106ba2:	6818      	ldr	r0, [r3, #0]
 8106ba4:	687a      	ldr	r2, [r7, #4]
 8106ba6:	68fb      	ldr	r3, [r7, #12]
 8106ba8:	1ad3      	subs	r3, r2, r3
 8106baa:	683a      	ldr	r2, [r7, #0]
 8106bac:	4619      	mov	r1, r3
 8106bae:	f7fe ff93 	bl	8105ad8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8106bb2:	f7ff fa17 	bl	8105fe4 <xTaskResumeAll>
 8106bb6:	4603      	mov	r3, r0
 8106bb8:	2b00      	cmp	r3, #0
 8106bba:	d10a      	bne.n	8106bd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8106bbc:	4b09      	ldr	r3, [pc, #36]	@ (8106be4 <prvProcessTimerOrBlockTask+0x98>)
 8106bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106bc2:	601a      	str	r2, [r3, #0]
 8106bc4:	f3bf 8f4f 	dsb	sy
 8106bc8:	f3bf 8f6f 	isb	sy
}
 8106bcc:	e001      	b.n	8106bd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8106bce:	f7ff fa09 	bl	8105fe4 <xTaskResumeAll>
}
 8106bd2:	bf00      	nop
 8106bd4:	3710      	adds	r7, #16
 8106bd6:	46bd      	mov	sp, r7
 8106bd8:	bd80      	pop	{r7, pc}
 8106bda:	bf00      	nop
 8106bdc:	10004928 	.word	0x10004928
 8106be0:	1000492c 	.word	0x1000492c
 8106be4:	e000ed04 	.word	0xe000ed04

08106be8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8106be8:	b480      	push	{r7}
 8106bea:	b085      	sub	sp, #20
 8106bec:	af00      	add	r7, sp, #0
 8106bee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8106bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8106c2c <prvGetNextExpireTime+0x44>)
 8106bf2:	681b      	ldr	r3, [r3, #0]
 8106bf4:	681b      	ldr	r3, [r3, #0]
 8106bf6:	2b00      	cmp	r3, #0
 8106bf8:	d101      	bne.n	8106bfe <prvGetNextExpireTime+0x16>
 8106bfa:	2201      	movs	r2, #1
 8106bfc:	e000      	b.n	8106c00 <prvGetNextExpireTime+0x18>
 8106bfe:	2200      	movs	r2, #0
 8106c00:	687b      	ldr	r3, [r7, #4]
 8106c02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8106c04:	687b      	ldr	r3, [r7, #4]
 8106c06:	681b      	ldr	r3, [r3, #0]
 8106c08:	2b00      	cmp	r3, #0
 8106c0a:	d105      	bne.n	8106c18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8106c0c:	4b07      	ldr	r3, [pc, #28]	@ (8106c2c <prvGetNextExpireTime+0x44>)
 8106c0e:	681b      	ldr	r3, [r3, #0]
 8106c10:	68db      	ldr	r3, [r3, #12]
 8106c12:	681b      	ldr	r3, [r3, #0]
 8106c14:	60fb      	str	r3, [r7, #12]
 8106c16:	e001      	b.n	8106c1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8106c18:	2300      	movs	r3, #0
 8106c1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8106c1c:	68fb      	ldr	r3, [r7, #12]
}
 8106c1e:	4618      	mov	r0, r3
 8106c20:	3714      	adds	r7, #20
 8106c22:	46bd      	mov	sp, r7
 8106c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c28:	4770      	bx	lr
 8106c2a:	bf00      	nop
 8106c2c:	10004924 	.word	0x10004924

08106c30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8106c30:	b580      	push	{r7, lr}
 8106c32:	b084      	sub	sp, #16
 8106c34:	af00      	add	r7, sp, #0
 8106c36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8106c38:	f7ff fa72 	bl	8106120 <xTaskGetTickCount>
 8106c3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8106c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8106c6c <prvSampleTimeNow+0x3c>)
 8106c40:	681b      	ldr	r3, [r3, #0]
 8106c42:	68fa      	ldr	r2, [r7, #12]
 8106c44:	429a      	cmp	r2, r3
 8106c46:	d205      	bcs.n	8106c54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8106c48:	f000 f93a 	bl	8106ec0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8106c4c:	687b      	ldr	r3, [r7, #4]
 8106c4e:	2201      	movs	r2, #1
 8106c50:	601a      	str	r2, [r3, #0]
 8106c52:	e002      	b.n	8106c5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8106c54:	687b      	ldr	r3, [r7, #4]
 8106c56:	2200      	movs	r2, #0
 8106c58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8106c5a:	4a04      	ldr	r2, [pc, #16]	@ (8106c6c <prvSampleTimeNow+0x3c>)
 8106c5c:	68fb      	ldr	r3, [r7, #12]
 8106c5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8106c60:	68fb      	ldr	r3, [r7, #12]
}
 8106c62:	4618      	mov	r0, r3
 8106c64:	3710      	adds	r7, #16
 8106c66:	46bd      	mov	sp, r7
 8106c68:	bd80      	pop	{r7, pc}
 8106c6a:	bf00      	nop
 8106c6c:	10004934 	.word	0x10004934

08106c70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8106c70:	b580      	push	{r7, lr}
 8106c72:	b086      	sub	sp, #24
 8106c74:	af00      	add	r7, sp, #0
 8106c76:	60f8      	str	r0, [r7, #12]
 8106c78:	60b9      	str	r1, [r7, #8]
 8106c7a:	607a      	str	r2, [r7, #4]
 8106c7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8106c7e:	2300      	movs	r3, #0
 8106c80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8106c82:	68fb      	ldr	r3, [r7, #12]
 8106c84:	68ba      	ldr	r2, [r7, #8]
 8106c86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8106c88:	68fb      	ldr	r3, [r7, #12]
 8106c8a:	68fa      	ldr	r2, [r7, #12]
 8106c8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8106c8e:	68ba      	ldr	r2, [r7, #8]
 8106c90:	687b      	ldr	r3, [r7, #4]
 8106c92:	429a      	cmp	r2, r3
 8106c94:	d812      	bhi.n	8106cbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8106c96:	687a      	ldr	r2, [r7, #4]
 8106c98:	683b      	ldr	r3, [r7, #0]
 8106c9a:	1ad2      	subs	r2, r2, r3
 8106c9c:	68fb      	ldr	r3, [r7, #12]
 8106c9e:	699b      	ldr	r3, [r3, #24]
 8106ca0:	429a      	cmp	r2, r3
 8106ca2:	d302      	bcc.n	8106caa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8106ca4:	2301      	movs	r3, #1
 8106ca6:	617b      	str	r3, [r7, #20]
 8106ca8:	e01b      	b.n	8106ce2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8106caa:	4b10      	ldr	r3, [pc, #64]	@ (8106cec <prvInsertTimerInActiveList+0x7c>)
 8106cac:	681a      	ldr	r2, [r3, #0]
 8106cae:	68fb      	ldr	r3, [r7, #12]
 8106cb0:	3304      	adds	r3, #4
 8106cb2:	4619      	mov	r1, r3
 8106cb4:	4610      	mov	r0, r2
 8106cb6:	f7fd ff92 	bl	8104bde <vListInsert>
 8106cba:	e012      	b.n	8106ce2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8106cbc:	687a      	ldr	r2, [r7, #4]
 8106cbe:	683b      	ldr	r3, [r7, #0]
 8106cc0:	429a      	cmp	r2, r3
 8106cc2:	d206      	bcs.n	8106cd2 <prvInsertTimerInActiveList+0x62>
 8106cc4:	68ba      	ldr	r2, [r7, #8]
 8106cc6:	683b      	ldr	r3, [r7, #0]
 8106cc8:	429a      	cmp	r2, r3
 8106cca:	d302      	bcc.n	8106cd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8106ccc:	2301      	movs	r3, #1
 8106cce:	617b      	str	r3, [r7, #20]
 8106cd0:	e007      	b.n	8106ce2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8106cd2:	4b07      	ldr	r3, [pc, #28]	@ (8106cf0 <prvInsertTimerInActiveList+0x80>)
 8106cd4:	681a      	ldr	r2, [r3, #0]
 8106cd6:	68fb      	ldr	r3, [r7, #12]
 8106cd8:	3304      	adds	r3, #4
 8106cda:	4619      	mov	r1, r3
 8106cdc:	4610      	mov	r0, r2
 8106cde:	f7fd ff7e 	bl	8104bde <vListInsert>
		}
	}

	return xProcessTimerNow;
 8106ce2:	697b      	ldr	r3, [r7, #20]
}
 8106ce4:	4618      	mov	r0, r3
 8106ce6:	3718      	adds	r7, #24
 8106ce8:	46bd      	mov	sp, r7
 8106cea:	bd80      	pop	{r7, pc}
 8106cec:	10004928 	.word	0x10004928
 8106cf0:	10004924 	.word	0x10004924

08106cf4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8106cf4:	b580      	push	{r7, lr}
 8106cf6:	b08e      	sub	sp, #56	@ 0x38
 8106cf8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8106cfa:	e0ce      	b.n	8106e9a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8106cfc:	687b      	ldr	r3, [r7, #4]
 8106cfe:	2b00      	cmp	r3, #0
 8106d00:	da19      	bge.n	8106d36 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8106d02:	1d3b      	adds	r3, r7, #4
 8106d04:	3304      	adds	r3, #4
 8106d06:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8106d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106d0a:	2b00      	cmp	r3, #0
 8106d0c:	d10b      	bne.n	8106d26 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8106d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106d12:	f383 8811 	msr	BASEPRI, r3
 8106d16:	f3bf 8f6f 	isb	sy
 8106d1a:	f3bf 8f4f 	dsb	sy
 8106d1e:	61fb      	str	r3, [r7, #28]
}
 8106d20:	bf00      	nop
 8106d22:	bf00      	nop
 8106d24:	e7fd      	b.n	8106d22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8106d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106d28:	681b      	ldr	r3, [r3, #0]
 8106d2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8106d2c:	6850      	ldr	r0, [r2, #4]
 8106d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8106d30:	6892      	ldr	r2, [r2, #8]
 8106d32:	4611      	mov	r1, r2
 8106d34:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8106d36:	687b      	ldr	r3, [r7, #4]
 8106d38:	2b00      	cmp	r3, #0
 8106d3a:	f2c0 80ae 	blt.w	8106e9a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8106d3e:	68fb      	ldr	r3, [r7, #12]
 8106d40:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8106d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106d44:	695b      	ldr	r3, [r3, #20]
 8106d46:	2b00      	cmp	r3, #0
 8106d48:	d004      	beq.n	8106d54 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8106d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106d4c:	3304      	adds	r3, #4
 8106d4e:	4618      	mov	r0, r3
 8106d50:	f7fd ff7e 	bl	8104c50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8106d54:	463b      	mov	r3, r7
 8106d56:	4618      	mov	r0, r3
 8106d58:	f7ff ff6a 	bl	8106c30 <prvSampleTimeNow>
 8106d5c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8106d5e:	687b      	ldr	r3, [r7, #4]
 8106d60:	2b09      	cmp	r3, #9
 8106d62:	f200 8097 	bhi.w	8106e94 <prvProcessReceivedCommands+0x1a0>
 8106d66:	a201      	add	r2, pc, #4	@ (adr r2, 8106d6c <prvProcessReceivedCommands+0x78>)
 8106d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d6c:	08106d95 	.word	0x08106d95
 8106d70:	08106d95 	.word	0x08106d95
 8106d74:	08106d95 	.word	0x08106d95
 8106d78:	08106e0b 	.word	0x08106e0b
 8106d7c:	08106e1f 	.word	0x08106e1f
 8106d80:	08106e6b 	.word	0x08106e6b
 8106d84:	08106d95 	.word	0x08106d95
 8106d88:	08106d95 	.word	0x08106d95
 8106d8c:	08106e0b 	.word	0x08106e0b
 8106d90:	08106e1f 	.word	0x08106e1f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8106d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106d96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8106d9a:	f043 0301 	orr.w	r3, r3, #1
 8106d9e:	b2da      	uxtb	r2, r3
 8106da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106da2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8106da6:	68ba      	ldr	r2, [r7, #8]
 8106da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106daa:	699b      	ldr	r3, [r3, #24]
 8106dac:	18d1      	adds	r1, r2, r3
 8106dae:	68bb      	ldr	r3, [r7, #8]
 8106db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8106db2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8106db4:	f7ff ff5c 	bl	8106c70 <prvInsertTimerInActiveList>
 8106db8:	4603      	mov	r3, r0
 8106dba:	2b00      	cmp	r3, #0
 8106dbc:	d06c      	beq.n	8106e98 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8106dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106dc0:	6a1b      	ldr	r3, [r3, #32]
 8106dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8106dc4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8106dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8106dcc:	f003 0304 	and.w	r3, r3, #4
 8106dd0:	2b00      	cmp	r3, #0
 8106dd2:	d061      	beq.n	8106e98 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8106dd4:	68ba      	ldr	r2, [r7, #8]
 8106dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106dd8:	699b      	ldr	r3, [r3, #24]
 8106dda:	441a      	add	r2, r3
 8106ddc:	2300      	movs	r3, #0
 8106dde:	9300      	str	r3, [sp, #0]
 8106de0:	2300      	movs	r3, #0
 8106de2:	2100      	movs	r1, #0
 8106de4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8106de6:	f7ff fe01 	bl	81069ec <xTimerGenericCommand>
 8106dea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8106dec:	6a3b      	ldr	r3, [r7, #32]
 8106dee:	2b00      	cmp	r3, #0
 8106df0:	d152      	bne.n	8106e98 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8106df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106df6:	f383 8811 	msr	BASEPRI, r3
 8106dfa:	f3bf 8f6f 	isb	sy
 8106dfe:	f3bf 8f4f 	dsb	sy
 8106e02:	61bb      	str	r3, [r7, #24]
}
 8106e04:	bf00      	nop
 8106e06:	bf00      	nop
 8106e08:	e7fd      	b.n	8106e06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8106e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8106e10:	f023 0301 	bic.w	r3, r3, #1
 8106e14:	b2da      	uxtb	r2, r3
 8106e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106e18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8106e1c:	e03d      	b.n	8106e9a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8106e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106e20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8106e24:	f043 0301 	orr.w	r3, r3, #1
 8106e28:	b2da      	uxtb	r2, r3
 8106e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106e2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8106e30:	68ba      	ldr	r2, [r7, #8]
 8106e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106e34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8106e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106e38:	699b      	ldr	r3, [r3, #24]
 8106e3a:	2b00      	cmp	r3, #0
 8106e3c:	d10b      	bne.n	8106e56 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8106e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106e42:	f383 8811 	msr	BASEPRI, r3
 8106e46:	f3bf 8f6f 	isb	sy
 8106e4a:	f3bf 8f4f 	dsb	sy
 8106e4e:	617b      	str	r3, [r7, #20]
}
 8106e50:	bf00      	nop
 8106e52:	bf00      	nop
 8106e54:	e7fd      	b.n	8106e52 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8106e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106e58:	699a      	ldr	r2, [r3, #24]
 8106e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106e5c:	18d1      	adds	r1, r2, r3
 8106e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8106e62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8106e64:	f7ff ff04 	bl	8106c70 <prvInsertTimerInActiveList>
					break;
 8106e68:	e017      	b.n	8106e9a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8106e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8106e70:	f003 0302 	and.w	r3, r3, #2
 8106e74:	2b00      	cmp	r3, #0
 8106e76:	d103      	bne.n	8106e80 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8106e78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8106e7a:	f7fd fd3f 	bl	81048fc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8106e7e:	e00c      	b.n	8106e9a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8106e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106e82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8106e86:	f023 0301 	bic.w	r3, r3, #1
 8106e8a:	b2da      	uxtb	r2, r3
 8106e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106e8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8106e92:	e002      	b.n	8106e9a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8106e94:	bf00      	nop
 8106e96:	e000      	b.n	8106e9a <prvProcessReceivedCommands+0x1a6>
					break;
 8106e98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8106e9a:	4b08      	ldr	r3, [pc, #32]	@ (8106ebc <prvProcessReceivedCommands+0x1c8>)
 8106e9c:	681b      	ldr	r3, [r3, #0]
 8106e9e:	1d39      	adds	r1, r7, #4
 8106ea0:	2200      	movs	r2, #0
 8106ea2:	4618      	mov	r0, r3
 8106ea4:	f7fe fbfc 	bl	81056a0 <xQueueReceive>
 8106ea8:	4603      	mov	r3, r0
 8106eaa:	2b00      	cmp	r3, #0
 8106eac:	f47f af26 	bne.w	8106cfc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8106eb0:	bf00      	nop
 8106eb2:	bf00      	nop
 8106eb4:	3730      	adds	r7, #48	@ 0x30
 8106eb6:	46bd      	mov	sp, r7
 8106eb8:	bd80      	pop	{r7, pc}
 8106eba:	bf00      	nop
 8106ebc:	1000492c 	.word	0x1000492c

08106ec0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8106ec0:	b580      	push	{r7, lr}
 8106ec2:	b088      	sub	sp, #32
 8106ec4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8106ec6:	e049      	b.n	8106f5c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8106ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8106f84 <prvSwitchTimerLists+0xc4>)
 8106eca:	681b      	ldr	r3, [r3, #0]
 8106ecc:	68db      	ldr	r3, [r3, #12]
 8106ece:	681b      	ldr	r3, [r3, #0]
 8106ed0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8106f84 <prvSwitchTimerLists+0xc4>)
 8106ed4:	681b      	ldr	r3, [r3, #0]
 8106ed6:	68db      	ldr	r3, [r3, #12]
 8106ed8:	68db      	ldr	r3, [r3, #12]
 8106eda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8106edc:	68fb      	ldr	r3, [r7, #12]
 8106ede:	3304      	adds	r3, #4
 8106ee0:	4618      	mov	r0, r3
 8106ee2:	f7fd feb5 	bl	8104c50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8106ee6:	68fb      	ldr	r3, [r7, #12]
 8106ee8:	6a1b      	ldr	r3, [r3, #32]
 8106eea:	68f8      	ldr	r0, [r7, #12]
 8106eec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8106eee:	68fb      	ldr	r3, [r7, #12]
 8106ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8106ef4:	f003 0304 	and.w	r3, r3, #4
 8106ef8:	2b00      	cmp	r3, #0
 8106efa:	d02f      	beq.n	8106f5c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8106efc:	68fb      	ldr	r3, [r7, #12]
 8106efe:	699b      	ldr	r3, [r3, #24]
 8106f00:	693a      	ldr	r2, [r7, #16]
 8106f02:	4413      	add	r3, r2
 8106f04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8106f06:	68ba      	ldr	r2, [r7, #8]
 8106f08:	693b      	ldr	r3, [r7, #16]
 8106f0a:	429a      	cmp	r2, r3
 8106f0c:	d90e      	bls.n	8106f2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8106f0e:	68fb      	ldr	r3, [r7, #12]
 8106f10:	68ba      	ldr	r2, [r7, #8]
 8106f12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8106f14:	68fb      	ldr	r3, [r7, #12]
 8106f16:	68fa      	ldr	r2, [r7, #12]
 8106f18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8106f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8106f84 <prvSwitchTimerLists+0xc4>)
 8106f1c:	681a      	ldr	r2, [r3, #0]
 8106f1e:	68fb      	ldr	r3, [r7, #12]
 8106f20:	3304      	adds	r3, #4
 8106f22:	4619      	mov	r1, r3
 8106f24:	4610      	mov	r0, r2
 8106f26:	f7fd fe5a 	bl	8104bde <vListInsert>
 8106f2a:	e017      	b.n	8106f5c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8106f2c:	2300      	movs	r3, #0
 8106f2e:	9300      	str	r3, [sp, #0]
 8106f30:	2300      	movs	r3, #0
 8106f32:	693a      	ldr	r2, [r7, #16]
 8106f34:	2100      	movs	r1, #0
 8106f36:	68f8      	ldr	r0, [r7, #12]
 8106f38:	f7ff fd58 	bl	81069ec <xTimerGenericCommand>
 8106f3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8106f3e:	687b      	ldr	r3, [r7, #4]
 8106f40:	2b00      	cmp	r3, #0
 8106f42:	d10b      	bne.n	8106f5c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8106f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106f48:	f383 8811 	msr	BASEPRI, r3
 8106f4c:	f3bf 8f6f 	isb	sy
 8106f50:	f3bf 8f4f 	dsb	sy
 8106f54:	603b      	str	r3, [r7, #0]
}
 8106f56:	bf00      	nop
 8106f58:	bf00      	nop
 8106f5a:	e7fd      	b.n	8106f58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8106f5c:	4b09      	ldr	r3, [pc, #36]	@ (8106f84 <prvSwitchTimerLists+0xc4>)
 8106f5e:	681b      	ldr	r3, [r3, #0]
 8106f60:	681b      	ldr	r3, [r3, #0]
 8106f62:	2b00      	cmp	r3, #0
 8106f64:	d1b0      	bne.n	8106ec8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8106f66:	4b07      	ldr	r3, [pc, #28]	@ (8106f84 <prvSwitchTimerLists+0xc4>)
 8106f68:	681b      	ldr	r3, [r3, #0]
 8106f6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8106f6c:	4b06      	ldr	r3, [pc, #24]	@ (8106f88 <prvSwitchTimerLists+0xc8>)
 8106f6e:	681b      	ldr	r3, [r3, #0]
 8106f70:	4a04      	ldr	r2, [pc, #16]	@ (8106f84 <prvSwitchTimerLists+0xc4>)
 8106f72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8106f74:	4a04      	ldr	r2, [pc, #16]	@ (8106f88 <prvSwitchTimerLists+0xc8>)
 8106f76:	697b      	ldr	r3, [r7, #20]
 8106f78:	6013      	str	r3, [r2, #0]
}
 8106f7a:	bf00      	nop
 8106f7c:	3718      	adds	r7, #24
 8106f7e:	46bd      	mov	sp, r7
 8106f80:	bd80      	pop	{r7, pc}
 8106f82:	bf00      	nop
 8106f84:	10004924 	.word	0x10004924
 8106f88:	10004928 	.word	0x10004928

08106f8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8106f8c:	b580      	push	{r7, lr}
 8106f8e:	b082      	sub	sp, #8
 8106f90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8106f92:	f7fd ffb9 	bl	8104f08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8106f96:	4b15      	ldr	r3, [pc, #84]	@ (8106fec <prvCheckForValidListAndQueue+0x60>)
 8106f98:	681b      	ldr	r3, [r3, #0]
 8106f9a:	2b00      	cmp	r3, #0
 8106f9c:	d120      	bne.n	8106fe0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8106f9e:	4814      	ldr	r0, [pc, #80]	@ (8106ff0 <prvCheckForValidListAndQueue+0x64>)
 8106fa0:	f7fd fdcc 	bl	8104b3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8106fa4:	4813      	ldr	r0, [pc, #76]	@ (8106ff4 <prvCheckForValidListAndQueue+0x68>)
 8106fa6:	f7fd fdc9 	bl	8104b3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8106faa:	4b13      	ldr	r3, [pc, #76]	@ (8106ff8 <prvCheckForValidListAndQueue+0x6c>)
 8106fac:	4a10      	ldr	r2, [pc, #64]	@ (8106ff0 <prvCheckForValidListAndQueue+0x64>)
 8106fae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8106fb0:	4b12      	ldr	r3, [pc, #72]	@ (8106ffc <prvCheckForValidListAndQueue+0x70>)
 8106fb2:	4a10      	ldr	r2, [pc, #64]	@ (8106ff4 <prvCheckForValidListAndQueue+0x68>)
 8106fb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8106fb6:	2300      	movs	r3, #0
 8106fb8:	9300      	str	r3, [sp, #0]
 8106fba:	4b11      	ldr	r3, [pc, #68]	@ (8107000 <prvCheckForValidListAndQueue+0x74>)
 8106fbc:	4a11      	ldr	r2, [pc, #68]	@ (8107004 <prvCheckForValidListAndQueue+0x78>)
 8106fbe:	2110      	movs	r1, #16
 8106fc0:	200a      	movs	r0, #10
 8106fc2:	f7fe f92d 	bl	8105220 <xQueueGenericCreateStatic>
 8106fc6:	4603      	mov	r3, r0
 8106fc8:	4a08      	ldr	r2, [pc, #32]	@ (8106fec <prvCheckForValidListAndQueue+0x60>)
 8106fca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8106fcc:	4b07      	ldr	r3, [pc, #28]	@ (8106fec <prvCheckForValidListAndQueue+0x60>)
 8106fce:	681b      	ldr	r3, [r3, #0]
 8106fd0:	2b00      	cmp	r3, #0
 8106fd2:	d005      	beq.n	8106fe0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8106fd4:	4b05      	ldr	r3, [pc, #20]	@ (8106fec <prvCheckForValidListAndQueue+0x60>)
 8106fd6:	681b      	ldr	r3, [r3, #0]
 8106fd8:	490b      	ldr	r1, [pc, #44]	@ (8107008 <prvCheckForValidListAndQueue+0x7c>)
 8106fda:	4618      	mov	r0, r3
 8106fdc:	f7fe fd52 	bl	8105a84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8106fe0:	f7fd ffc4 	bl	8104f6c <vPortExitCritical>
}
 8106fe4:	bf00      	nop
 8106fe6:	46bd      	mov	sp, r7
 8106fe8:	bd80      	pop	{r7, pc}
 8106fea:	bf00      	nop
 8106fec:	1000492c 	.word	0x1000492c
 8106ff0:	100048fc 	.word	0x100048fc
 8106ff4:	10004910 	.word	0x10004910
 8106ff8:	10004924 	.word	0x10004924
 8106ffc:	10004928 	.word	0x10004928
 8107000:	100049d8 	.word	0x100049d8
 8107004:	10004938 	.word	0x10004938
 8107008:	081070b4 	.word	0x081070b4

0810700c <memset>:
 810700c:	4402      	add	r2, r0
 810700e:	4603      	mov	r3, r0
 8107010:	4293      	cmp	r3, r2
 8107012:	d100      	bne.n	8107016 <memset+0xa>
 8107014:	4770      	bx	lr
 8107016:	f803 1b01 	strb.w	r1, [r3], #1
 810701a:	e7f9      	b.n	8107010 <memset+0x4>

0810701c <__libc_init_array>:
 810701c:	b570      	push	{r4, r5, r6, lr}
 810701e:	4d0d      	ldr	r5, [pc, #52]	@ (8107054 <__libc_init_array+0x38>)
 8107020:	4c0d      	ldr	r4, [pc, #52]	@ (8107058 <__libc_init_array+0x3c>)
 8107022:	1b64      	subs	r4, r4, r5
 8107024:	10a4      	asrs	r4, r4, #2
 8107026:	2600      	movs	r6, #0
 8107028:	42a6      	cmp	r6, r4
 810702a:	d109      	bne.n	8107040 <__libc_init_array+0x24>
 810702c:	4d0b      	ldr	r5, [pc, #44]	@ (810705c <__libc_init_array+0x40>)
 810702e:	4c0c      	ldr	r4, [pc, #48]	@ (8107060 <__libc_init_array+0x44>)
 8107030:	f000 f826 	bl	8107080 <_init>
 8107034:	1b64      	subs	r4, r4, r5
 8107036:	10a4      	asrs	r4, r4, #2
 8107038:	2600      	movs	r6, #0
 810703a:	42a6      	cmp	r6, r4
 810703c:	d105      	bne.n	810704a <__libc_init_array+0x2e>
 810703e:	bd70      	pop	{r4, r5, r6, pc}
 8107040:	f855 3b04 	ldr.w	r3, [r5], #4
 8107044:	4798      	blx	r3
 8107046:	3601      	adds	r6, #1
 8107048:	e7ee      	b.n	8107028 <__libc_init_array+0xc>
 810704a:	f855 3b04 	ldr.w	r3, [r5], #4
 810704e:	4798      	blx	r3
 8107050:	3601      	adds	r6, #1
 8107052:	e7f2      	b.n	810703a <__libc_init_array+0x1e>
 8107054:	08107128 	.word	0x08107128
 8107058:	08107128 	.word	0x08107128
 810705c:	08107128 	.word	0x08107128
 8107060:	0810712c 	.word	0x0810712c

08107064 <memcpy>:
 8107064:	440a      	add	r2, r1
 8107066:	4291      	cmp	r1, r2
 8107068:	f100 33ff 	add.w	r3, r0, #4294967295
 810706c:	d100      	bne.n	8107070 <memcpy+0xc>
 810706e:	4770      	bx	lr
 8107070:	b510      	push	{r4, lr}
 8107072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8107076:	f803 4f01 	strb.w	r4, [r3, #1]!
 810707a:	4291      	cmp	r1, r2
 810707c:	d1f9      	bne.n	8107072 <memcpy+0xe>
 810707e:	bd10      	pop	{r4, pc}

08107080 <_init>:
 8107080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107082:	bf00      	nop
 8107084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107086:	bc08      	pop	{r3}
 8107088:	469e      	mov	lr, r3
 810708a:	4770      	bx	lr

0810708c <_fini>:
 810708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810708e:	bf00      	nop
 8107090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107092:	bc08      	pop	{r3}
 8107094:	469e      	mov	lr, r3
 8107096:	4770      	bx	lr
