
WAYPOINTIFICATION_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003628  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  081038c8  081038c8  000048c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08103928  08103928  00004928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0810392c  0810392c  0000492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000020  10000000  08103930  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004974  10000020  08103950  00005020  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10004994  08103950  00005994  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00005020  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012865  00000000  00000000  00005050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002d2e  00000000  00000000  000178b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000fb0  00000000  00000000  0001a5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000bd0  00000000  00000000  0001b598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a12b  00000000  00000000  0001c168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000116d0  00000000  00000000  00056293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00183f16  00000000  00000000  00067963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001eb879  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003fb4  00000000  00000000  001eb8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000075  00000000  00000000  001ef870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000020 	.word	0x10000020
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081038b0 	.word	0x081038b0

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000024 	.word	0x10000024
 81002dc:	081038b0 	.word	0x081038b0

081002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002e0:	b480      	push	{r7}
 81002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002e4:	4b09      	ldr	r3, [pc, #36]	@ (810030c <SystemInit+0x2c>)
 81002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002ea:	4a08      	ldr	r2, [pc, #32]	@ (810030c <SystemInit+0x2c>)
 81002ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002f4:	4b05      	ldr	r3, [pc, #20]	@ (810030c <SystemInit+0x2c>)
 81002f6:	691b      	ldr	r3, [r3, #16]
 81002f8:	4a04      	ldr	r2, [pc, #16]	@ (810030c <SystemInit+0x2c>)
 81002fa:	f043 0310 	orr.w	r3, r3, #16
 81002fe:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100310:	b480      	push	{r7}
 8100312:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100314:	4b09      	ldr	r3, [pc, #36]	@ (810033c <ExitRun0Mode+0x2c>)
 8100316:	68db      	ldr	r3, [r3, #12]
 8100318:	4a08      	ldr	r2, [pc, #32]	@ (810033c <ExitRun0Mode+0x2c>)
 810031a:	f023 0302 	bic.w	r3, r3, #2
 810031e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100320:	bf00      	nop
 8100322:	4b06      	ldr	r3, [pc, #24]	@ (810033c <ExitRun0Mode+0x2c>)
 8100324:	685b      	ldr	r3, [r3, #4]
 8100326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810032a:	2b00      	cmp	r3, #0
 810032c:	d0f9      	beq.n	8100322 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 810032e:	bf00      	nop
 8100330:	bf00      	nop
 8100332:	46bd      	mov	sp, r7
 8100334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100338:	4770      	bx	lr
 810033a:	bf00      	nop
 810033c:	58024800 	.word	0x58024800

08100340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100340:	b580      	push	{r7, lr}
 8100342:	b082      	sub	sp, #8
 8100344:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100346:	4b20      	ldr	r3, [pc, #128]	@ (81003c8 <main+0x88>)
 8100348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810034c:	4a1e      	ldr	r2, [pc, #120]	@ (81003c8 <main+0x88>)
 810034e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100352:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100356:	4b1c      	ldr	r3, [pc, #112]	@ (81003c8 <main+0x88>)
 8100358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810035c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100360:	607b      	str	r3, [r7, #4]
 8100362:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100364:	2001      	movs	r0, #1
 8100366:	f000 fa9d 	bl	81008a4 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810036a:	f000 fb27 	bl	81009bc <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810036e:	2201      	movs	r2, #1
 8100370:	2102      	movs	r1, #2
 8100372:	2000      	movs	r0, #0
 8100374:	f000 faa8 	bl	81008c8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100378:	4b14      	ldr	r3, [pc, #80]	@ (81003cc <main+0x8c>)
 810037a:	681b      	ldr	r3, [r3, #0]
 810037c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8100380:	2b70      	cmp	r3, #112	@ 0x70
 8100382:	d108      	bne.n	8100396 <main+0x56>
 8100384:	4b12      	ldr	r3, [pc, #72]	@ (81003d0 <main+0x90>)
 8100386:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810038a:	4a11      	ldr	r2, [pc, #68]	@ (81003d0 <main+0x90>)
 810038c:	f043 0301 	orr.w	r3, r3, #1
 8100390:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100394:	e007      	b.n	81003a6 <main+0x66>
 8100396:	4b0e      	ldr	r3, [pc, #56]	@ (81003d0 <main+0x90>)
 8100398:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810039c:	4a0c      	ldr	r2, [pc, #48]	@ (81003d0 <main+0x90>)
 810039e:	f043 0301 	orr.w	r3, r3, #1
 81003a2:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81003a6:	f000 f8c5 	bl	8100534 <HAL_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 81003aa:	f000 fcc3 	bl	8100d34 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 81003ae:	4a09      	ldr	r2, [pc, #36]	@ (81003d4 <main+0x94>)
 81003b0:	2100      	movs	r1, #0
 81003b2:	4809      	ldr	r0, [pc, #36]	@ (81003d8 <main+0x98>)
 81003b4:	f000 fd08 	bl	8100dc8 <osThreadNew>
 81003b8:	4603      	mov	r3, r0
 81003ba:	4a08      	ldr	r2, [pc, #32]	@ (81003dc <main+0x9c>)
 81003bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 81003be:	f000 fcdd 	bl	8100d7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81003c2:	bf00      	nop
 81003c4:	e7fd      	b.n	81003c2 <main+0x82>
 81003c6:	bf00      	nop
 81003c8:	58024400 	.word	0x58024400
 81003cc:	e000ed00 	.word	0xe000ed00
 81003d0:	58026400 	.word	0x58026400
 81003d4:	081038fc 	.word	0x081038fc
 81003d8:	081003e1 	.word	0x081003e1
 81003dc:	1000003c 	.word	0x1000003c

081003e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 81003e0:	b580      	push	{r7, lr}
 81003e2:	b082      	sub	sp, #8
 81003e4:	af00      	add	r7, sp, #0
 81003e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(333);
 81003e8:	f240 104d 	movw	r0, #333	@ 0x14d
 81003ec:	f000 fd7e 	bl	8100eec <osDelay>
    BSP_LED_Toggle(LED_YELLOW);
 81003f0:	2001      	movs	r0, #1
 81003f2:	f000 f875 	bl	81004e0 <BSP_LED_Toggle>
    osDelay(333);
 81003f6:	bf00      	nop
 81003f8:	e7f6      	b.n	81003e8 <StartDefaultTask+0x8>
	...

081003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81003fc:	b580      	push	{r7, lr}
 81003fe:	b082      	sub	sp, #8
 8100400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100402:	4b0c      	ldr	r3, [pc, #48]	@ (8100434 <HAL_MspInit+0x38>)
 8100404:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100408:	4a0a      	ldr	r2, [pc, #40]	@ (8100434 <HAL_MspInit+0x38>)
 810040a:	f043 0302 	orr.w	r3, r3, #2
 810040e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100412:	4b08      	ldr	r3, [pc, #32]	@ (8100434 <HAL_MspInit+0x38>)
 8100414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100418:	f003 0302 	and.w	r3, r3, #2
 810041c:	607b      	str	r3, [r7, #4]
 810041e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100420:	2200      	movs	r2, #0
 8100422:	210f      	movs	r1, #15
 8100424:	f06f 0001 	mvn.w	r0, #1
 8100428:	f000 f9e9 	bl	81007fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810042c:	bf00      	nop
 810042e:	3708      	adds	r7, #8
 8100430:	46bd      	mov	sp, r7
 8100432:	bd80      	pop	{r7, pc}
 8100434:	58024400 	.word	0x58024400

08100438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100438:	b480      	push	{r7}
 810043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 810043c:	bf00      	nop
 810043e:	e7fd      	b.n	810043c <NMI_Handler+0x4>

08100440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100440:	b480      	push	{r7}
 8100442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100444:	bf00      	nop
 8100446:	e7fd      	b.n	8100444 <HardFault_Handler+0x4>

08100448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100448:	b480      	push	{r7}
 810044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810044c:	bf00      	nop
 810044e:	e7fd      	b.n	810044c <MemManage_Handler+0x4>

08100450 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100450:	b480      	push	{r7}
 8100452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100454:	bf00      	nop
 8100456:	e7fd      	b.n	8100454 <BusFault_Handler+0x4>

08100458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100458:	b480      	push	{r7}
 810045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810045c:	bf00      	nop
 810045e:	e7fd      	b.n	810045c <UsageFault_Handler+0x4>

08100460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100460:	b480      	push	{r7}
 8100462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100464:	bf00      	nop
 8100466:	46bd      	mov	sp, r7
 8100468:	f85d 7b04 	ldr.w	r7, [sp], #4
 810046c:	4770      	bx	lr

0810046e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810046e:	b580      	push	{r7, lr}
 8100470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100472:	f000 f8f3 	bl	810065c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8100476:	f002 fda5 	bl	8102fc4 <xTaskGetSchedulerState>
 810047a:	4603      	mov	r3, r0
 810047c:	2b01      	cmp	r3, #1
 810047e:	d001      	beq.n	8100484 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8100480:	f001 f9ea 	bl	8101858 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100484:	bf00      	nop
 8100486:	bd80      	pop	{r7, pc}

08100488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100488:	f8df d038 	ldr.w	sp, [pc, #56]	@ 81004c4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 810048c:	f7ff ff40 	bl	8100310 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8100490:	f7ff ff26 	bl	81002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100494:	480c      	ldr	r0, [pc, #48]	@ (81004c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100496:	490d      	ldr	r1, [pc, #52]	@ (81004cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100498:	4a0d      	ldr	r2, [pc, #52]	@ (81004d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810049a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810049c:	e002      	b.n	81004a4 <LoopCopyDataInit>

0810049e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810049e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81004a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81004a2:	3304      	adds	r3, #4

081004a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81004a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81004a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81004a8:	d3f9      	bcc.n	810049e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81004aa:	4a0a      	ldr	r2, [pc, #40]	@ (81004d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81004ac:	4c0a      	ldr	r4, [pc, #40]	@ (81004d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 81004ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 81004b0:	e001      	b.n	81004b6 <LoopFillZerobss>

081004b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81004b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81004b4:	3204      	adds	r2, #4

081004b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81004b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81004b8:	d3fb      	bcc.n	81004b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81004ba:	f003 f9c7 	bl	810384c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81004be:	f7ff ff3f 	bl	8100340 <main>
  bx  lr
 81004c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81004c4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81004c8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81004cc:	10000020 	.word	0x10000020
  ldr r2, =_sidata
 81004d0:	08103930 	.word	0x08103930
  ldr r2, =_sbss
 81004d4:	10000020 	.word	0x10000020
  ldr r4, =_ebss
 81004d8:	10004994 	.word	0x10004994

081004dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81004dc:	e7fe      	b.n	81004dc <ADC3_IRQHandler>
	...

081004e0 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 81004e0:	b580      	push	{r7, lr}
 81004e2:	b084      	sub	sp, #16
 81004e4:	af00      	add	r7, sp, #0
 81004e6:	4603      	mov	r3, r0
 81004e8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 81004ea:	2300      	movs	r3, #0
 81004ec:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 81004ee:	79fb      	ldrb	r3, [r7, #7]
 81004f0:	2b00      	cmp	r3, #0
 81004f2:	d009      	beq.n	8100508 <BSP_LED_Toggle+0x28>
 81004f4:	79fb      	ldrb	r3, [r7, #7]
 81004f6:	2b01      	cmp	r3, #1
 81004f8:	d006      	beq.n	8100508 <BSP_LED_Toggle+0x28>
 81004fa:	79fb      	ldrb	r3, [r7, #7]
 81004fc:	2b02      	cmp	r3, #2
 81004fe:	d003      	beq.n	8100508 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8100500:	f06f 0301 	mvn.w	r3, #1
 8100504:	60fb      	str	r3, [r7, #12]
 8100506:	e00b      	b.n	8100520 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8100508:	79fb      	ldrb	r3, [r7, #7]
 810050a:	4a08      	ldr	r2, [pc, #32]	@ (810052c <BSP_LED_Toggle+0x4c>)
 810050c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8100510:	79fb      	ldrb	r3, [r7, #7]
 8100512:	4907      	ldr	r1, [pc, #28]	@ (8100530 <BSP_LED_Toggle+0x50>)
 8100514:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8100518:	4619      	mov	r1, r3
 810051a:	4610      	mov	r0, r2
 810051c:	f000 f9a8 	bl	8100870 <HAL_GPIO_TogglePin>
  }

  return ret;
 8100520:	68fb      	ldr	r3, [r7, #12]
}
 8100522:	4618      	mov	r0, r3
 8100524:	3710      	adds	r7, #16
 8100526:	46bd      	mov	sp, r7
 8100528:	bd80      	pop	{r7, pc}
 810052a:	bf00      	nop
 810052c:	10000008 	.word	0x10000008
 8100530:	08103920 	.word	0x08103920

08100534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100534:	b580      	push	{r7, lr}
 8100536:	b082      	sub	sp, #8
 8100538:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810053a:	4b28      	ldr	r3, [pc, #160]	@ (81005dc <HAL_Init+0xa8>)
 810053c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100540:	4a26      	ldr	r2, [pc, #152]	@ (81005dc <HAL_Init+0xa8>)
 8100542:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100546:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810054a:	4b24      	ldr	r3, [pc, #144]	@ (81005dc <HAL_Init+0xa8>)
 810054c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100554:	603b      	str	r3, [r7, #0]
 8100556:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100558:	4b21      	ldr	r3, [pc, #132]	@ (81005e0 <HAL_Init+0xac>)
 810055a:	681b      	ldr	r3, [r3, #0]
 810055c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8100560:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8100564:	4a1e      	ldr	r2, [pc, #120]	@ (81005e0 <HAL_Init+0xac>)
 8100566:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810056a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810056c:	4b1c      	ldr	r3, [pc, #112]	@ (81005e0 <HAL_Init+0xac>)
 810056e:	681b      	ldr	r3, [r3, #0]
 8100570:	4a1b      	ldr	r2, [pc, #108]	@ (81005e0 <HAL_Init+0xac>)
 8100572:	f043 0301 	orr.w	r3, r3, #1
 8100576:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100578:	2003      	movs	r0, #3
 810057a:	f000 f935 	bl	81007e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810057e:	f000 fa2b 	bl	81009d8 <HAL_RCC_GetSysClockFreq>
 8100582:	4602      	mov	r2, r0
 8100584:	4b15      	ldr	r3, [pc, #84]	@ (81005dc <HAL_Init+0xa8>)
 8100586:	699b      	ldr	r3, [r3, #24]
 8100588:	0a1b      	lsrs	r3, r3, #8
 810058a:	f003 030f 	and.w	r3, r3, #15
 810058e:	4915      	ldr	r1, [pc, #84]	@ (81005e4 <HAL_Init+0xb0>)
 8100590:	5ccb      	ldrb	r3, [r1, r3]
 8100592:	f003 031f 	and.w	r3, r3, #31
 8100596:	fa22 f303 	lsr.w	r3, r2, r3
 810059a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810059c:	4b0f      	ldr	r3, [pc, #60]	@ (81005dc <HAL_Init+0xa8>)
 810059e:	699b      	ldr	r3, [r3, #24]
 81005a0:	f003 030f 	and.w	r3, r3, #15
 81005a4:	4a0f      	ldr	r2, [pc, #60]	@ (81005e4 <HAL_Init+0xb0>)
 81005a6:	5cd3      	ldrb	r3, [r2, r3]
 81005a8:	f003 031f 	and.w	r3, r3, #31
 81005ac:	687a      	ldr	r2, [r7, #4]
 81005ae:	fa22 f303 	lsr.w	r3, r2, r3
 81005b2:	4a0d      	ldr	r2, [pc, #52]	@ (81005e8 <HAL_Init+0xb4>)
 81005b4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81005b6:	4b0c      	ldr	r3, [pc, #48]	@ (81005e8 <HAL_Init+0xb4>)
 81005b8:	681b      	ldr	r3, [r3, #0]
 81005ba:	4a0c      	ldr	r2, [pc, #48]	@ (81005ec <HAL_Init+0xb8>)
 81005bc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81005be:	200f      	movs	r0, #15
 81005c0:	f000 f816 	bl	81005f0 <HAL_InitTick>
 81005c4:	4603      	mov	r3, r0
 81005c6:	2b00      	cmp	r3, #0
 81005c8:	d001      	beq.n	81005ce <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81005ca:	2301      	movs	r3, #1
 81005cc:	e002      	b.n	81005d4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81005ce:	f7ff ff15 	bl	81003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81005d2:	2300      	movs	r3, #0
}
 81005d4:	4618      	mov	r0, r3
 81005d6:	3708      	adds	r7, #8
 81005d8:	46bd      	mov	sp, r7
 81005da:	bd80      	pop	{r7, pc}
 81005dc:	58024400 	.word	0x58024400
 81005e0:	40024400 	.word	0x40024400
 81005e4:	081038ec 	.word	0x081038ec
 81005e8:	10000004 	.word	0x10000004
 81005ec:	10000000 	.word	0x10000000

081005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81005f0:	b580      	push	{r7, lr}
 81005f2:	b082      	sub	sp, #8
 81005f4:	af00      	add	r7, sp, #0
 81005f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81005f8:	4b15      	ldr	r3, [pc, #84]	@ (8100650 <HAL_InitTick+0x60>)
 81005fa:	781b      	ldrb	r3, [r3, #0]
 81005fc:	2b00      	cmp	r3, #0
 81005fe:	d101      	bne.n	8100604 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100600:	2301      	movs	r3, #1
 8100602:	e021      	b.n	8100648 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100604:	4b13      	ldr	r3, [pc, #76]	@ (8100654 <HAL_InitTick+0x64>)
 8100606:	681a      	ldr	r2, [r3, #0]
 8100608:	4b11      	ldr	r3, [pc, #68]	@ (8100650 <HAL_InitTick+0x60>)
 810060a:	781b      	ldrb	r3, [r3, #0]
 810060c:	4619      	mov	r1, r3
 810060e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100612:	fbb3 f3f1 	udiv	r3, r3, r1
 8100616:	fbb2 f3f3 	udiv	r3, r2, r3
 810061a:	4618      	mov	r0, r3
 810061c:	f000 f909 	bl	8100832 <HAL_SYSTICK_Config>
 8100620:	4603      	mov	r3, r0
 8100622:	2b00      	cmp	r3, #0
 8100624:	d001      	beq.n	810062a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100626:	2301      	movs	r3, #1
 8100628:	e00e      	b.n	8100648 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810062a:	687b      	ldr	r3, [r7, #4]
 810062c:	2b0f      	cmp	r3, #15
 810062e:	d80a      	bhi.n	8100646 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100630:	2200      	movs	r2, #0
 8100632:	6879      	ldr	r1, [r7, #4]
 8100634:	f04f 30ff 	mov.w	r0, #4294967295
 8100638:	f000 f8e1 	bl	81007fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810063c:	4a06      	ldr	r2, [pc, #24]	@ (8100658 <HAL_InitTick+0x68>)
 810063e:	687b      	ldr	r3, [r7, #4]
 8100640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100642:	2300      	movs	r3, #0
 8100644:	e000      	b.n	8100648 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100646:	2301      	movs	r3, #1
}
 8100648:	4618      	mov	r0, r3
 810064a:	3708      	adds	r7, #8
 810064c:	46bd      	mov	sp, r7
 810064e:	bd80      	pop	{r7, pc}
 8100650:	10000018 	.word	0x10000018
 8100654:	10000000 	.word	0x10000000
 8100658:	10000014 	.word	0x10000014

0810065c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810065c:	b480      	push	{r7}
 810065e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100660:	4b06      	ldr	r3, [pc, #24]	@ (810067c <HAL_IncTick+0x20>)
 8100662:	781b      	ldrb	r3, [r3, #0]
 8100664:	461a      	mov	r2, r3
 8100666:	4b06      	ldr	r3, [pc, #24]	@ (8100680 <HAL_IncTick+0x24>)
 8100668:	681b      	ldr	r3, [r3, #0]
 810066a:	4413      	add	r3, r2
 810066c:	4a04      	ldr	r2, [pc, #16]	@ (8100680 <HAL_IncTick+0x24>)
 810066e:	6013      	str	r3, [r2, #0]
}
 8100670:	bf00      	nop
 8100672:	46bd      	mov	sp, r7
 8100674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100678:	4770      	bx	lr
 810067a:	bf00      	nop
 810067c:	10000018 	.word	0x10000018
 8100680:	10000040 	.word	0x10000040

08100684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100684:	b480      	push	{r7}
 8100686:	b085      	sub	sp, #20
 8100688:	af00      	add	r7, sp, #0
 810068a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810068c:	687b      	ldr	r3, [r7, #4]
 810068e:	f003 0307 	and.w	r3, r3, #7
 8100692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100694:	4b0c      	ldr	r3, [pc, #48]	@ (81006c8 <__NVIC_SetPriorityGrouping+0x44>)
 8100696:	68db      	ldr	r3, [r3, #12]
 8100698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810069a:	68ba      	ldr	r2, [r7, #8]
 810069c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81006a0:	4013      	ands	r3, r2
 81006a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81006a4:	68fb      	ldr	r3, [r7, #12]
 81006a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81006a8:	68bb      	ldr	r3, [r7, #8]
 81006aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81006ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81006b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81006b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81006b6:	4a04      	ldr	r2, [pc, #16]	@ (81006c8 <__NVIC_SetPriorityGrouping+0x44>)
 81006b8:	68bb      	ldr	r3, [r7, #8]
 81006ba:	60d3      	str	r3, [r2, #12]
}
 81006bc:	bf00      	nop
 81006be:	3714      	adds	r7, #20
 81006c0:	46bd      	mov	sp, r7
 81006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006c6:	4770      	bx	lr
 81006c8:	e000ed00 	.word	0xe000ed00

081006cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81006cc:	b480      	push	{r7}
 81006ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81006d0:	4b04      	ldr	r3, [pc, #16]	@ (81006e4 <__NVIC_GetPriorityGrouping+0x18>)
 81006d2:	68db      	ldr	r3, [r3, #12]
 81006d4:	0a1b      	lsrs	r3, r3, #8
 81006d6:	f003 0307 	and.w	r3, r3, #7
}
 81006da:	4618      	mov	r0, r3
 81006dc:	46bd      	mov	sp, r7
 81006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006e2:	4770      	bx	lr
 81006e4:	e000ed00 	.word	0xe000ed00

081006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81006e8:	b480      	push	{r7}
 81006ea:	b083      	sub	sp, #12
 81006ec:	af00      	add	r7, sp, #0
 81006ee:	4603      	mov	r3, r0
 81006f0:	6039      	str	r1, [r7, #0]
 81006f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81006f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81006f8:	2b00      	cmp	r3, #0
 81006fa:	db0a      	blt.n	8100712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81006fc:	683b      	ldr	r3, [r7, #0]
 81006fe:	b2da      	uxtb	r2, r3
 8100700:	490c      	ldr	r1, [pc, #48]	@ (8100734 <__NVIC_SetPriority+0x4c>)
 8100702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100706:	0112      	lsls	r2, r2, #4
 8100708:	b2d2      	uxtb	r2, r2
 810070a:	440b      	add	r3, r1
 810070c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100710:	e00a      	b.n	8100728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100712:	683b      	ldr	r3, [r7, #0]
 8100714:	b2da      	uxtb	r2, r3
 8100716:	4908      	ldr	r1, [pc, #32]	@ (8100738 <__NVIC_SetPriority+0x50>)
 8100718:	88fb      	ldrh	r3, [r7, #6]
 810071a:	f003 030f 	and.w	r3, r3, #15
 810071e:	3b04      	subs	r3, #4
 8100720:	0112      	lsls	r2, r2, #4
 8100722:	b2d2      	uxtb	r2, r2
 8100724:	440b      	add	r3, r1
 8100726:	761a      	strb	r2, [r3, #24]
}
 8100728:	bf00      	nop
 810072a:	370c      	adds	r7, #12
 810072c:	46bd      	mov	sp, r7
 810072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100732:	4770      	bx	lr
 8100734:	e000e100 	.word	0xe000e100
 8100738:	e000ed00 	.word	0xe000ed00

0810073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810073c:	b480      	push	{r7}
 810073e:	b089      	sub	sp, #36	@ 0x24
 8100740:	af00      	add	r7, sp, #0
 8100742:	60f8      	str	r0, [r7, #12]
 8100744:	60b9      	str	r1, [r7, #8]
 8100746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100748:	68fb      	ldr	r3, [r7, #12]
 810074a:	f003 0307 	and.w	r3, r3, #7
 810074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100750:	69fb      	ldr	r3, [r7, #28]
 8100752:	f1c3 0307 	rsb	r3, r3, #7
 8100756:	2b04      	cmp	r3, #4
 8100758:	bf28      	it	cs
 810075a:	2304      	movcs	r3, #4
 810075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810075e:	69fb      	ldr	r3, [r7, #28]
 8100760:	3304      	adds	r3, #4
 8100762:	2b06      	cmp	r3, #6
 8100764:	d902      	bls.n	810076c <NVIC_EncodePriority+0x30>
 8100766:	69fb      	ldr	r3, [r7, #28]
 8100768:	3b03      	subs	r3, #3
 810076a:	e000      	b.n	810076e <NVIC_EncodePriority+0x32>
 810076c:	2300      	movs	r3, #0
 810076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100770:	f04f 32ff 	mov.w	r2, #4294967295
 8100774:	69bb      	ldr	r3, [r7, #24]
 8100776:	fa02 f303 	lsl.w	r3, r2, r3
 810077a:	43da      	mvns	r2, r3
 810077c:	68bb      	ldr	r3, [r7, #8]
 810077e:	401a      	ands	r2, r3
 8100780:	697b      	ldr	r3, [r7, #20]
 8100782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100784:	f04f 31ff 	mov.w	r1, #4294967295
 8100788:	697b      	ldr	r3, [r7, #20]
 810078a:	fa01 f303 	lsl.w	r3, r1, r3
 810078e:	43d9      	mvns	r1, r3
 8100790:	687b      	ldr	r3, [r7, #4]
 8100792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100794:	4313      	orrs	r3, r2
         );
}
 8100796:	4618      	mov	r0, r3
 8100798:	3724      	adds	r7, #36	@ 0x24
 810079a:	46bd      	mov	sp, r7
 810079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007a0:	4770      	bx	lr
	...

081007a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81007a4:	b580      	push	{r7, lr}
 81007a6:	b082      	sub	sp, #8
 81007a8:	af00      	add	r7, sp, #0
 81007aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81007ac:	687b      	ldr	r3, [r7, #4]
 81007ae:	3b01      	subs	r3, #1
 81007b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81007b4:	d301      	bcc.n	81007ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81007b6:	2301      	movs	r3, #1
 81007b8:	e00f      	b.n	81007da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81007ba:	4a0a      	ldr	r2, [pc, #40]	@ (81007e4 <SysTick_Config+0x40>)
 81007bc:	687b      	ldr	r3, [r7, #4]
 81007be:	3b01      	subs	r3, #1
 81007c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81007c2:	210f      	movs	r1, #15
 81007c4:	f04f 30ff 	mov.w	r0, #4294967295
 81007c8:	f7ff ff8e 	bl	81006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81007cc:	4b05      	ldr	r3, [pc, #20]	@ (81007e4 <SysTick_Config+0x40>)
 81007ce:	2200      	movs	r2, #0
 81007d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81007d2:	4b04      	ldr	r3, [pc, #16]	@ (81007e4 <SysTick_Config+0x40>)
 81007d4:	2207      	movs	r2, #7
 81007d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81007d8:	2300      	movs	r3, #0
}
 81007da:	4618      	mov	r0, r3
 81007dc:	3708      	adds	r7, #8
 81007de:	46bd      	mov	sp, r7
 81007e0:	bd80      	pop	{r7, pc}
 81007e2:	bf00      	nop
 81007e4:	e000e010 	.word	0xe000e010

081007e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81007e8:	b580      	push	{r7, lr}
 81007ea:	b082      	sub	sp, #8
 81007ec:	af00      	add	r7, sp, #0
 81007ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81007f0:	6878      	ldr	r0, [r7, #4]
 81007f2:	f7ff ff47 	bl	8100684 <__NVIC_SetPriorityGrouping>
}
 81007f6:	bf00      	nop
 81007f8:	3708      	adds	r7, #8
 81007fa:	46bd      	mov	sp, r7
 81007fc:	bd80      	pop	{r7, pc}

081007fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81007fe:	b580      	push	{r7, lr}
 8100800:	b086      	sub	sp, #24
 8100802:	af00      	add	r7, sp, #0
 8100804:	4603      	mov	r3, r0
 8100806:	60b9      	str	r1, [r7, #8]
 8100808:	607a      	str	r2, [r7, #4]
 810080a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810080c:	f7ff ff5e 	bl	81006cc <__NVIC_GetPriorityGrouping>
 8100810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100812:	687a      	ldr	r2, [r7, #4]
 8100814:	68b9      	ldr	r1, [r7, #8]
 8100816:	6978      	ldr	r0, [r7, #20]
 8100818:	f7ff ff90 	bl	810073c <NVIC_EncodePriority>
 810081c:	4602      	mov	r2, r0
 810081e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100822:	4611      	mov	r1, r2
 8100824:	4618      	mov	r0, r3
 8100826:	f7ff ff5f 	bl	81006e8 <__NVIC_SetPriority>
}
 810082a:	bf00      	nop
 810082c:	3718      	adds	r7, #24
 810082e:	46bd      	mov	sp, r7
 8100830:	bd80      	pop	{r7, pc}

08100832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100832:	b580      	push	{r7, lr}
 8100834:	b082      	sub	sp, #8
 8100836:	af00      	add	r7, sp, #0
 8100838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810083a:	6878      	ldr	r0, [r7, #4]
 810083c:	f7ff ffb2 	bl	81007a4 <SysTick_Config>
 8100840:	4603      	mov	r3, r0
}
 8100842:	4618      	mov	r0, r3
 8100844:	3708      	adds	r7, #8
 8100846:	46bd      	mov	sp, r7
 8100848:	bd80      	pop	{r7, pc}
	...

0810084c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810084c:	b480      	push	{r7}
 810084e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100850:	4b06      	ldr	r3, [pc, #24]	@ (810086c <HAL_GetCurrentCPUID+0x20>)
 8100852:	681b      	ldr	r3, [r3, #0]
 8100854:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8100858:	2b70      	cmp	r3, #112	@ 0x70
 810085a:	d101      	bne.n	8100860 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 810085c:	2303      	movs	r3, #3
 810085e:	e000      	b.n	8100862 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8100860:	2301      	movs	r3, #1
  }
}
 8100862:	4618      	mov	r0, r3
 8100864:	46bd      	mov	sp, r7
 8100866:	f85d 7b04 	ldr.w	r7, [sp], #4
 810086a:	4770      	bx	lr
 810086c:	e000ed00 	.word	0xe000ed00

08100870 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100870:	b480      	push	{r7}
 8100872:	b085      	sub	sp, #20
 8100874:	af00      	add	r7, sp, #0
 8100876:	6078      	str	r0, [r7, #4]
 8100878:	460b      	mov	r3, r1
 810087a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 810087c:	687b      	ldr	r3, [r7, #4]
 810087e:	695b      	ldr	r3, [r3, #20]
 8100880:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8100882:	887a      	ldrh	r2, [r7, #2]
 8100884:	68fb      	ldr	r3, [r7, #12]
 8100886:	4013      	ands	r3, r2
 8100888:	041a      	lsls	r2, r3, #16
 810088a:	68fb      	ldr	r3, [r7, #12]
 810088c:	43d9      	mvns	r1, r3
 810088e:	887b      	ldrh	r3, [r7, #2]
 8100890:	400b      	ands	r3, r1
 8100892:	431a      	orrs	r2, r3
 8100894:	687b      	ldr	r3, [r7, #4]
 8100896:	619a      	str	r2, [r3, #24]
}
 8100898:	bf00      	nop
 810089a:	3714      	adds	r7, #20
 810089c:	46bd      	mov	sp, r7
 810089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008a2:	4770      	bx	lr

081008a4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81008a4:	b480      	push	{r7}
 81008a6:	b083      	sub	sp, #12
 81008a8:	af00      	add	r7, sp, #0
 81008aa:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81008ac:	4b05      	ldr	r3, [pc, #20]	@ (81008c4 <HAL_HSEM_ActivateNotification+0x20>)
 81008ae:	681a      	ldr	r2, [r3, #0]
 81008b0:	4904      	ldr	r1, [pc, #16]	@ (81008c4 <HAL_HSEM_ActivateNotification+0x20>)
 81008b2:	687b      	ldr	r3, [r7, #4]
 81008b4:	4313      	orrs	r3, r2
 81008b6:	600b      	str	r3, [r1, #0]
#endif
}
 81008b8:	bf00      	nop
 81008ba:	370c      	adds	r7, #12
 81008bc:	46bd      	mov	sp, r7
 81008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008c2:	4770      	bx	lr
 81008c4:	58026510 	.word	0x58026510

081008c8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81008c8:	b580      	push	{r7, lr}
 81008ca:	b084      	sub	sp, #16
 81008cc:	af00      	add	r7, sp, #0
 81008ce:	60f8      	str	r0, [r7, #12]
 81008d0:	460b      	mov	r3, r1
 81008d2:	607a      	str	r2, [r7, #4]
 81008d4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81008d6:	4b37      	ldr	r3, [pc, #220]	@ (81009b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008d8:	681b      	ldr	r3, [r3, #0]
 81008da:	f023 0201 	bic.w	r2, r3, #1
 81008de:	4935      	ldr	r1, [pc, #212]	@ (81009b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008e0:	68fb      	ldr	r3, [r7, #12]
 81008e2:	4313      	orrs	r3, r2
 81008e4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81008e6:	687b      	ldr	r3, [r7, #4]
 81008e8:	2b00      	cmp	r3, #0
 81008ea:	d123      	bne.n	8100934 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81008ec:	f7ff ffae 	bl	810084c <HAL_GetCurrentCPUID>
 81008f0:	4603      	mov	r3, r0
 81008f2:	2b03      	cmp	r3, #3
 81008f4:	d158      	bne.n	81009a8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81008f6:	4b2f      	ldr	r3, [pc, #188]	@ (81009b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008f8:	691b      	ldr	r3, [r3, #16]
 81008fa:	4a2e      	ldr	r2, [pc, #184]	@ (81009b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008fc:	f023 0301 	bic.w	r3, r3, #1
 8100900:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100902:	4b2d      	ldr	r3, [pc, #180]	@ (81009b8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100904:	691b      	ldr	r3, [r3, #16]
 8100906:	4a2c      	ldr	r2, [pc, #176]	@ (81009b8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100908:	f043 0304 	orr.w	r3, r3, #4
 810090c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810090e:	f3bf 8f4f 	dsb	sy
}
 8100912:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100914:	f3bf 8f6f 	isb	sy
}
 8100918:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810091a:	7afb      	ldrb	r3, [r7, #11]
 810091c:	2b01      	cmp	r3, #1
 810091e:	d101      	bne.n	8100924 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100920:	bf30      	wfi
 8100922:	e000      	b.n	8100926 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100924:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100926:	4b24      	ldr	r3, [pc, #144]	@ (81009b8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100928:	691b      	ldr	r3, [r3, #16]
 810092a:	4a23      	ldr	r2, [pc, #140]	@ (81009b8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810092c:	f023 0304 	bic.w	r3, r3, #4
 8100930:	6113      	str	r3, [r2, #16]
 8100932:	e03c      	b.n	81009ae <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100934:	687b      	ldr	r3, [r7, #4]
 8100936:	2b01      	cmp	r3, #1
 8100938:	d123      	bne.n	8100982 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810093a:	f7ff ff87 	bl	810084c <HAL_GetCurrentCPUID>
 810093e:	4603      	mov	r3, r0
 8100940:	2b01      	cmp	r3, #1
 8100942:	d133      	bne.n	81009ac <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100944:	4b1b      	ldr	r3, [pc, #108]	@ (81009b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100946:	695b      	ldr	r3, [r3, #20]
 8100948:	4a1a      	ldr	r2, [pc, #104]	@ (81009b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810094a:	f023 0302 	bic.w	r3, r3, #2
 810094e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100950:	4b19      	ldr	r3, [pc, #100]	@ (81009b8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100952:	691b      	ldr	r3, [r3, #16]
 8100954:	4a18      	ldr	r2, [pc, #96]	@ (81009b8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100956:	f043 0304 	orr.w	r3, r3, #4
 810095a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810095c:	f3bf 8f4f 	dsb	sy
}
 8100960:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100962:	f3bf 8f6f 	isb	sy
}
 8100966:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100968:	7afb      	ldrb	r3, [r7, #11]
 810096a:	2b01      	cmp	r3, #1
 810096c:	d101      	bne.n	8100972 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810096e:	bf30      	wfi
 8100970:	e000      	b.n	8100974 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100972:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100974:	4b10      	ldr	r3, [pc, #64]	@ (81009b8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100976:	691b      	ldr	r3, [r3, #16]
 8100978:	4a0f      	ldr	r2, [pc, #60]	@ (81009b8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810097a:	f023 0304 	bic.w	r3, r3, #4
 810097e:	6113      	str	r3, [r2, #16]
 8100980:	e015      	b.n	81009ae <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100982:	f7ff ff63 	bl	810084c <HAL_GetCurrentCPUID>
 8100986:	4603      	mov	r3, r0
 8100988:	2b03      	cmp	r3, #3
 810098a:	d106      	bne.n	810099a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810098c:	4b09      	ldr	r3, [pc, #36]	@ (81009b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810098e:	691b      	ldr	r3, [r3, #16]
 8100990:	4a08      	ldr	r2, [pc, #32]	@ (81009b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100992:	f023 0304 	bic.w	r3, r3, #4
 8100996:	6113      	str	r3, [r2, #16]
 8100998:	e009      	b.n	81009ae <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810099a:	4b06      	ldr	r3, [pc, #24]	@ (81009b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810099c:	695b      	ldr	r3, [r3, #20]
 810099e:	4a05      	ldr	r2, [pc, #20]	@ (81009b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81009a0:	f023 0304 	bic.w	r3, r3, #4
 81009a4:	6153      	str	r3, [r2, #20]
 81009a6:	e002      	b.n	81009ae <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81009a8:	bf00      	nop
 81009aa:	e000      	b.n	81009ae <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81009ac:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81009ae:	3710      	adds	r7, #16
 81009b0:	46bd      	mov	sp, r7
 81009b2:	bd80      	pop	{r7, pc}
 81009b4:	58024800 	.word	0x58024800
 81009b8:	e000ed00 	.word	0xe000ed00

081009bc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81009bc:	b580      	push	{r7, lr}
 81009be:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81009c0:	f7ff ff44 	bl	810084c <HAL_GetCurrentCPUID>
 81009c4:	4603      	mov	r3, r0
 81009c6:	2b03      	cmp	r3, #3
 81009c8:	d101      	bne.n	81009ce <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81009ca:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81009cc:	e001      	b.n	81009d2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81009ce:	bf40      	sev
    __WFE ();
 81009d0:	bf20      	wfe
}
 81009d2:	bf00      	nop
 81009d4:	bd80      	pop	{r7, pc}
	...

081009d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81009d8:	b480      	push	{r7}
 81009da:	b089      	sub	sp, #36	@ 0x24
 81009dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81009de:	4bb3      	ldr	r3, [pc, #716]	@ (8100cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 81009e0:	691b      	ldr	r3, [r3, #16]
 81009e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81009e6:	2b18      	cmp	r3, #24
 81009e8:	f200 8155 	bhi.w	8100c96 <HAL_RCC_GetSysClockFreq+0x2be>
 81009ec:	a201      	add	r2, pc, #4	@ (adr r2, 81009f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 81009ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81009f2:	bf00      	nop
 81009f4:	08100a59 	.word	0x08100a59
 81009f8:	08100c97 	.word	0x08100c97
 81009fc:	08100c97 	.word	0x08100c97
 8100a00:	08100c97 	.word	0x08100c97
 8100a04:	08100c97 	.word	0x08100c97
 8100a08:	08100c97 	.word	0x08100c97
 8100a0c:	08100c97 	.word	0x08100c97
 8100a10:	08100c97 	.word	0x08100c97
 8100a14:	08100a7f 	.word	0x08100a7f
 8100a18:	08100c97 	.word	0x08100c97
 8100a1c:	08100c97 	.word	0x08100c97
 8100a20:	08100c97 	.word	0x08100c97
 8100a24:	08100c97 	.word	0x08100c97
 8100a28:	08100c97 	.word	0x08100c97
 8100a2c:	08100c97 	.word	0x08100c97
 8100a30:	08100c97 	.word	0x08100c97
 8100a34:	08100a85 	.word	0x08100a85
 8100a38:	08100c97 	.word	0x08100c97
 8100a3c:	08100c97 	.word	0x08100c97
 8100a40:	08100c97 	.word	0x08100c97
 8100a44:	08100c97 	.word	0x08100c97
 8100a48:	08100c97 	.word	0x08100c97
 8100a4c:	08100c97 	.word	0x08100c97
 8100a50:	08100c97 	.word	0x08100c97
 8100a54:	08100a8b 	.word	0x08100a8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100a58:	4b94      	ldr	r3, [pc, #592]	@ (8100cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a5a:	681b      	ldr	r3, [r3, #0]
 8100a5c:	f003 0320 	and.w	r3, r3, #32
 8100a60:	2b00      	cmp	r3, #0
 8100a62:	d009      	beq.n	8100a78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100a64:	4b91      	ldr	r3, [pc, #580]	@ (8100cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a66:	681b      	ldr	r3, [r3, #0]
 8100a68:	08db      	lsrs	r3, r3, #3
 8100a6a:	f003 0303 	and.w	r3, r3, #3
 8100a6e:	4a90      	ldr	r2, [pc, #576]	@ (8100cb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100a70:	fa22 f303 	lsr.w	r3, r2, r3
 8100a74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8100a76:	e111      	b.n	8100c9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100a78:	4b8d      	ldr	r3, [pc, #564]	@ (8100cb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100a7a:	61bb      	str	r3, [r7, #24]
      break;
 8100a7c:	e10e      	b.n	8100c9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8100a7e:	4b8d      	ldr	r3, [pc, #564]	@ (8100cb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100a80:	61bb      	str	r3, [r7, #24]
      break;
 8100a82:	e10b      	b.n	8100c9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8100a84:	4b8c      	ldr	r3, [pc, #560]	@ (8100cb8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100a86:	61bb      	str	r3, [r7, #24]
      break;
 8100a88:	e108      	b.n	8100c9c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100a8a:	4b88      	ldr	r3, [pc, #544]	@ (8100cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100a8e:	f003 0303 	and.w	r3, r3, #3
 8100a92:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8100a94:	4b85      	ldr	r3, [pc, #532]	@ (8100cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100a98:	091b      	lsrs	r3, r3, #4
 8100a9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8100a9e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100aa0:	4b82      	ldr	r3, [pc, #520]	@ (8100cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8100aa4:	f003 0301 	and.w	r3, r3, #1
 8100aa8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8100aaa:	4b80      	ldr	r3, [pc, #512]	@ (8100cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8100aae:	08db      	lsrs	r3, r3, #3
 8100ab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100ab4:	68fa      	ldr	r2, [r7, #12]
 8100ab6:	fb02 f303 	mul.w	r3, r2, r3
 8100aba:	ee07 3a90 	vmov	s15, r3
 8100abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ac2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8100ac6:	693b      	ldr	r3, [r7, #16]
 8100ac8:	2b00      	cmp	r3, #0
 8100aca:	f000 80e1 	beq.w	8100c90 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8100ace:	697b      	ldr	r3, [r7, #20]
 8100ad0:	2b02      	cmp	r3, #2
 8100ad2:	f000 8083 	beq.w	8100bdc <HAL_RCC_GetSysClockFreq+0x204>
 8100ad6:	697b      	ldr	r3, [r7, #20]
 8100ad8:	2b02      	cmp	r3, #2
 8100ada:	f200 80a1 	bhi.w	8100c20 <HAL_RCC_GetSysClockFreq+0x248>
 8100ade:	697b      	ldr	r3, [r7, #20]
 8100ae0:	2b00      	cmp	r3, #0
 8100ae2:	d003      	beq.n	8100aec <HAL_RCC_GetSysClockFreq+0x114>
 8100ae4:	697b      	ldr	r3, [r7, #20]
 8100ae6:	2b01      	cmp	r3, #1
 8100ae8:	d056      	beq.n	8100b98 <HAL_RCC_GetSysClockFreq+0x1c0>
 8100aea:	e099      	b.n	8100c20 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100aec:	4b6f      	ldr	r3, [pc, #444]	@ (8100cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100aee:	681b      	ldr	r3, [r3, #0]
 8100af0:	f003 0320 	and.w	r3, r3, #32
 8100af4:	2b00      	cmp	r3, #0
 8100af6:	d02d      	beq.n	8100b54 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100af8:	4b6c      	ldr	r3, [pc, #432]	@ (8100cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100afa:	681b      	ldr	r3, [r3, #0]
 8100afc:	08db      	lsrs	r3, r3, #3
 8100afe:	f003 0303 	and.w	r3, r3, #3
 8100b02:	4a6b      	ldr	r2, [pc, #428]	@ (8100cb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100b04:	fa22 f303 	lsr.w	r3, r2, r3
 8100b08:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100b0a:	687b      	ldr	r3, [r7, #4]
 8100b0c:	ee07 3a90 	vmov	s15, r3
 8100b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b14:	693b      	ldr	r3, [r7, #16]
 8100b16:	ee07 3a90 	vmov	s15, r3
 8100b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100b22:	4b62      	ldr	r3, [pc, #392]	@ (8100cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100b2a:	ee07 3a90 	vmov	s15, r3
 8100b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b32:	ed97 6a02 	vldr	s12, [r7, #8]
 8100b36:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8100cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8100b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b4e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8100b52:	e087      	b.n	8100c64 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100b54:	693b      	ldr	r3, [r7, #16]
 8100b56:	ee07 3a90 	vmov	s15, r3
 8100b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b5e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8100cc0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8100b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100b66:	4b51      	ldr	r3, [pc, #324]	@ (8100cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100b6e:	ee07 3a90 	vmov	s15, r3
 8100b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b76:	ed97 6a02 	vldr	s12, [r7, #8]
 8100b7a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8100cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8100b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100b96:	e065      	b.n	8100c64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100b98:	693b      	ldr	r3, [r7, #16]
 8100b9a:	ee07 3a90 	vmov	s15, r3
 8100b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ba2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8100cc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100baa:	4b40      	ldr	r3, [pc, #256]	@ (8100cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100bb2:	ee07 3a90 	vmov	s15, r3
 8100bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100bba:	ed97 6a02 	vldr	s12, [r7, #8]
 8100bbe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8100cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8100bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100bca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100bd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100bda:	e043      	b.n	8100c64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100bdc:	693b      	ldr	r3, [r7, #16]
 8100bde:	ee07 3a90 	vmov	s15, r3
 8100be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100be6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8100cc8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8100bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100bee:	4b2f      	ldr	r3, [pc, #188]	@ (8100cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100bf6:	ee07 3a90 	vmov	s15, r3
 8100bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100bfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8100c02:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8100cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8100c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100c0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100c1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100c1e:	e021      	b.n	8100c64 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100c20:	693b      	ldr	r3, [r7, #16]
 8100c22:	ee07 3a90 	vmov	s15, r3
 8100c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100c2a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8100cc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100c32:	4b1e      	ldr	r3, [pc, #120]	@ (8100cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100c3a:	ee07 3a90 	vmov	s15, r3
 8100c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100c42:	ed97 6a02 	vldr	s12, [r7, #8]
 8100c46:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8100cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8100c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100c5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100c62:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8100c64:	4b11      	ldr	r3, [pc, #68]	@ (8100cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100c68:	0a5b      	lsrs	r3, r3, #9
 8100c6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8100c6e:	3301      	adds	r3, #1
 8100c70:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8100c72:	683b      	ldr	r3, [r7, #0]
 8100c74:	ee07 3a90 	vmov	s15, r3
 8100c78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8100c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8100c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8100c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100c88:	ee17 3a90 	vmov	r3, s15
 8100c8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8100c8e:	e005      	b.n	8100c9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8100c90:	2300      	movs	r3, #0
 8100c92:	61bb      	str	r3, [r7, #24]
      break;
 8100c94:	e002      	b.n	8100c9c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8100c96:	4b07      	ldr	r3, [pc, #28]	@ (8100cb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100c98:	61bb      	str	r3, [r7, #24]
      break;
 8100c9a:	bf00      	nop
  }

  return sysclockfreq;
 8100c9c:	69bb      	ldr	r3, [r7, #24]
}
 8100c9e:	4618      	mov	r0, r3
 8100ca0:	3724      	adds	r7, #36	@ 0x24
 8100ca2:	46bd      	mov	sp, r7
 8100ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ca8:	4770      	bx	lr
 8100caa:	bf00      	nop
 8100cac:	58024400 	.word	0x58024400
 8100cb0:	03d09000 	.word	0x03d09000
 8100cb4:	003d0900 	.word	0x003d0900
 8100cb8:	017d7840 	.word	0x017d7840
 8100cbc:	46000000 	.word	0x46000000
 8100cc0:	4c742400 	.word	0x4c742400
 8100cc4:	4a742400 	.word	0x4a742400
 8100cc8:	4bbebc20 	.word	0x4bbebc20

08100ccc <__NVIC_SetPriority>:
{
 8100ccc:	b480      	push	{r7}
 8100cce:	b083      	sub	sp, #12
 8100cd0:	af00      	add	r7, sp, #0
 8100cd2:	4603      	mov	r3, r0
 8100cd4:	6039      	str	r1, [r7, #0]
 8100cd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100cd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100cdc:	2b00      	cmp	r3, #0
 8100cde:	db0a      	blt.n	8100cf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100ce0:	683b      	ldr	r3, [r7, #0]
 8100ce2:	b2da      	uxtb	r2, r3
 8100ce4:	490c      	ldr	r1, [pc, #48]	@ (8100d18 <__NVIC_SetPriority+0x4c>)
 8100ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100cea:	0112      	lsls	r2, r2, #4
 8100cec:	b2d2      	uxtb	r2, r2
 8100cee:	440b      	add	r3, r1
 8100cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8100cf4:	e00a      	b.n	8100d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100cf6:	683b      	ldr	r3, [r7, #0]
 8100cf8:	b2da      	uxtb	r2, r3
 8100cfa:	4908      	ldr	r1, [pc, #32]	@ (8100d1c <__NVIC_SetPriority+0x50>)
 8100cfc:	88fb      	ldrh	r3, [r7, #6]
 8100cfe:	f003 030f 	and.w	r3, r3, #15
 8100d02:	3b04      	subs	r3, #4
 8100d04:	0112      	lsls	r2, r2, #4
 8100d06:	b2d2      	uxtb	r2, r2
 8100d08:	440b      	add	r3, r1
 8100d0a:	761a      	strb	r2, [r3, #24]
}
 8100d0c:	bf00      	nop
 8100d0e:	370c      	adds	r7, #12
 8100d10:	46bd      	mov	sp, r7
 8100d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d16:	4770      	bx	lr
 8100d18:	e000e100 	.word	0xe000e100
 8100d1c:	e000ed00 	.word	0xe000ed00

08100d20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8100d20:	b580      	push	{r7, lr}
 8100d22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8100d24:	2100      	movs	r1, #0
 8100d26:	f06f 0004 	mvn.w	r0, #4
 8100d2a:	f7ff ffcf 	bl	8100ccc <__NVIC_SetPriority>
#endif
}
 8100d2e:	bf00      	nop
 8100d30:	bd80      	pop	{r7, pc}
	...

08100d34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8100d34:	b480      	push	{r7}
 8100d36:	b083      	sub	sp, #12
 8100d38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8100d3a:	f3ef 8305 	mrs	r3, IPSR
 8100d3e:	603b      	str	r3, [r7, #0]
  return(result);
 8100d40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8100d42:	2b00      	cmp	r3, #0
 8100d44:	d003      	beq.n	8100d4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8100d46:	f06f 0305 	mvn.w	r3, #5
 8100d4a:	607b      	str	r3, [r7, #4]
 8100d4c:	e00c      	b.n	8100d68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8100d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8100d78 <osKernelInitialize+0x44>)
 8100d50:	681b      	ldr	r3, [r3, #0]
 8100d52:	2b00      	cmp	r3, #0
 8100d54:	d105      	bne.n	8100d62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8100d56:	4b08      	ldr	r3, [pc, #32]	@ (8100d78 <osKernelInitialize+0x44>)
 8100d58:	2201      	movs	r2, #1
 8100d5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8100d5c:	2300      	movs	r3, #0
 8100d5e:	607b      	str	r3, [r7, #4]
 8100d60:	e002      	b.n	8100d68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8100d62:	f04f 33ff 	mov.w	r3, #4294967295
 8100d66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8100d68:	687b      	ldr	r3, [r7, #4]
}
 8100d6a:	4618      	mov	r0, r3
 8100d6c:	370c      	adds	r7, #12
 8100d6e:	46bd      	mov	sp, r7
 8100d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d74:	4770      	bx	lr
 8100d76:	bf00      	nop
 8100d78:	10000044 	.word	0x10000044

08100d7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8100d7c:	b580      	push	{r7, lr}
 8100d7e:	b082      	sub	sp, #8
 8100d80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8100d82:	f3ef 8305 	mrs	r3, IPSR
 8100d86:	603b      	str	r3, [r7, #0]
  return(result);
 8100d88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8100d8a:	2b00      	cmp	r3, #0
 8100d8c:	d003      	beq.n	8100d96 <osKernelStart+0x1a>
    stat = osErrorISR;
 8100d8e:	f06f 0305 	mvn.w	r3, #5
 8100d92:	607b      	str	r3, [r7, #4]
 8100d94:	e010      	b.n	8100db8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8100d96:	4b0b      	ldr	r3, [pc, #44]	@ (8100dc4 <osKernelStart+0x48>)
 8100d98:	681b      	ldr	r3, [r3, #0]
 8100d9a:	2b01      	cmp	r3, #1
 8100d9c:	d109      	bne.n	8100db2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8100d9e:	f7ff ffbf 	bl	8100d20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8100da2:	4b08      	ldr	r3, [pc, #32]	@ (8100dc4 <osKernelStart+0x48>)
 8100da4:	2202      	movs	r2, #2
 8100da6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8100da8:	f001 fcbe 	bl	8102728 <vTaskStartScheduler>
      stat = osOK;
 8100dac:	2300      	movs	r3, #0
 8100dae:	607b      	str	r3, [r7, #4]
 8100db0:	e002      	b.n	8100db8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8100db2:	f04f 33ff 	mov.w	r3, #4294967295
 8100db6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8100db8:	687b      	ldr	r3, [r7, #4]
}
 8100dba:	4618      	mov	r0, r3
 8100dbc:	3708      	adds	r7, #8
 8100dbe:	46bd      	mov	sp, r7
 8100dc0:	bd80      	pop	{r7, pc}
 8100dc2:	bf00      	nop
 8100dc4:	10000044 	.word	0x10000044

08100dc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8100dc8:	b580      	push	{r7, lr}
 8100dca:	b08e      	sub	sp, #56	@ 0x38
 8100dcc:	af04      	add	r7, sp, #16
 8100dce:	60f8      	str	r0, [r7, #12]
 8100dd0:	60b9      	str	r1, [r7, #8]
 8100dd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8100dd4:	2300      	movs	r3, #0
 8100dd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8100dd8:	f3ef 8305 	mrs	r3, IPSR
 8100ddc:	617b      	str	r3, [r7, #20]
  return(result);
 8100dde:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8100de0:	2b00      	cmp	r3, #0
 8100de2:	d17e      	bne.n	8100ee2 <osThreadNew+0x11a>
 8100de4:	68fb      	ldr	r3, [r7, #12]
 8100de6:	2b00      	cmp	r3, #0
 8100de8:	d07b      	beq.n	8100ee2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8100dea:	2380      	movs	r3, #128	@ 0x80
 8100dec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8100dee:	2318      	movs	r3, #24
 8100df0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8100df2:	2300      	movs	r3, #0
 8100df4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8100df6:	f04f 33ff 	mov.w	r3, #4294967295
 8100dfa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8100dfc:	687b      	ldr	r3, [r7, #4]
 8100dfe:	2b00      	cmp	r3, #0
 8100e00:	d045      	beq.n	8100e8e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8100e02:	687b      	ldr	r3, [r7, #4]
 8100e04:	681b      	ldr	r3, [r3, #0]
 8100e06:	2b00      	cmp	r3, #0
 8100e08:	d002      	beq.n	8100e10 <osThreadNew+0x48>
        name = attr->name;
 8100e0a:	687b      	ldr	r3, [r7, #4]
 8100e0c:	681b      	ldr	r3, [r3, #0]
 8100e0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8100e10:	687b      	ldr	r3, [r7, #4]
 8100e12:	699b      	ldr	r3, [r3, #24]
 8100e14:	2b00      	cmp	r3, #0
 8100e16:	d002      	beq.n	8100e1e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8100e18:	687b      	ldr	r3, [r7, #4]
 8100e1a:	699b      	ldr	r3, [r3, #24]
 8100e1c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8100e1e:	69fb      	ldr	r3, [r7, #28]
 8100e20:	2b00      	cmp	r3, #0
 8100e22:	d008      	beq.n	8100e36 <osThreadNew+0x6e>
 8100e24:	69fb      	ldr	r3, [r7, #28]
 8100e26:	2b38      	cmp	r3, #56	@ 0x38
 8100e28:	d805      	bhi.n	8100e36 <osThreadNew+0x6e>
 8100e2a:	687b      	ldr	r3, [r7, #4]
 8100e2c:	685b      	ldr	r3, [r3, #4]
 8100e2e:	f003 0301 	and.w	r3, r3, #1
 8100e32:	2b00      	cmp	r3, #0
 8100e34:	d001      	beq.n	8100e3a <osThreadNew+0x72>
        return (NULL);
 8100e36:	2300      	movs	r3, #0
 8100e38:	e054      	b.n	8100ee4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8100e3a:	687b      	ldr	r3, [r7, #4]
 8100e3c:	695b      	ldr	r3, [r3, #20]
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d003      	beq.n	8100e4a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8100e42:	687b      	ldr	r3, [r7, #4]
 8100e44:	695b      	ldr	r3, [r3, #20]
 8100e46:	089b      	lsrs	r3, r3, #2
 8100e48:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8100e4a:	687b      	ldr	r3, [r7, #4]
 8100e4c:	689b      	ldr	r3, [r3, #8]
 8100e4e:	2b00      	cmp	r3, #0
 8100e50:	d00e      	beq.n	8100e70 <osThreadNew+0xa8>
 8100e52:	687b      	ldr	r3, [r7, #4]
 8100e54:	68db      	ldr	r3, [r3, #12]
 8100e56:	2b5b      	cmp	r3, #91	@ 0x5b
 8100e58:	d90a      	bls.n	8100e70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8100e5a:	687b      	ldr	r3, [r7, #4]
 8100e5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8100e5e:	2b00      	cmp	r3, #0
 8100e60:	d006      	beq.n	8100e70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8100e62:	687b      	ldr	r3, [r7, #4]
 8100e64:	695b      	ldr	r3, [r3, #20]
 8100e66:	2b00      	cmp	r3, #0
 8100e68:	d002      	beq.n	8100e70 <osThreadNew+0xa8>
        mem = 1;
 8100e6a:	2301      	movs	r3, #1
 8100e6c:	61bb      	str	r3, [r7, #24]
 8100e6e:	e010      	b.n	8100e92 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8100e70:	687b      	ldr	r3, [r7, #4]
 8100e72:	689b      	ldr	r3, [r3, #8]
 8100e74:	2b00      	cmp	r3, #0
 8100e76:	d10c      	bne.n	8100e92 <osThreadNew+0xca>
 8100e78:	687b      	ldr	r3, [r7, #4]
 8100e7a:	68db      	ldr	r3, [r3, #12]
 8100e7c:	2b00      	cmp	r3, #0
 8100e7e:	d108      	bne.n	8100e92 <osThreadNew+0xca>
 8100e80:	687b      	ldr	r3, [r7, #4]
 8100e82:	691b      	ldr	r3, [r3, #16]
 8100e84:	2b00      	cmp	r3, #0
 8100e86:	d104      	bne.n	8100e92 <osThreadNew+0xca>
          mem = 0;
 8100e88:	2300      	movs	r3, #0
 8100e8a:	61bb      	str	r3, [r7, #24]
 8100e8c:	e001      	b.n	8100e92 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8100e8e:	2300      	movs	r3, #0
 8100e90:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8100e92:	69bb      	ldr	r3, [r7, #24]
 8100e94:	2b01      	cmp	r3, #1
 8100e96:	d110      	bne.n	8100eba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8100e98:	687b      	ldr	r3, [r7, #4]
 8100e9a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8100e9c:	687a      	ldr	r2, [r7, #4]
 8100e9e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8100ea0:	9202      	str	r2, [sp, #8]
 8100ea2:	9301      	str	r3, [sp, #4]
 8100ea4:	69fb      	ldr	r3, [r7, #28]
 8100ea6:	9300      	str	r3, [sp, #0]
 8100ea8:	68bb      	ldr	r3, [r7, #8]
 8100eaa:	6a3a      	ldr	r2, [r7, #32]
 8100eac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8100eae:	68f8      	ldr	r0, [r7, #12]
 8100eb0:	f001 fa5e 	bl	8102370 <xTaskCreateStatic>
 8100eb4:	4603      	mov	r3, r0
 8100eb6:	613b      	str	r3, [r7, #16]
 8100eb8:	e013      	b.n	8100ee2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8100eba:	69bb      	ldr	r3, [r7, #24]
 8100ebc:	2b00      	cmp	r3, #0
 8100ebe:	d110      	bne.n	8100ee2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8100ec0:	6a3b      	ldr	r3, [r7, #32]
 8100ec2:	b29a      	uxth	r2, r3
 8100ec4:	f107 0310 	add.w	r3, r7, #16
 8100ec8:	9301      	str	r3, [sp, #4]
 8100eca:	69fb      	ldr	r3, [r7, #28]
 8100ecc:	9300      	str	r3, [sp, #0]
 8100ece:	68bb      	ldr	r3, [r7, #8]
 8100ed0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8100ed2:	68f8      	ldr	r0, [r7, #12]
 8100ed4:	f001 faac 	bl	8102430 <xTaskCreate>
 8100ed8:	4603      	mov	r3, r0
 8100eda:	2b01      	cmp	r3, #1
 8100edc:	d001      	beq.n	8100ee2 <osThreadNew+0x11a>
            hTask = NULL;
 8100ede:	2300      	movs	r3, #0
 8100ee0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8100ee2:	693b      	ldr	r3, [r7, #16]
}
 8100ee4:	4618      	mov	r0, r3
 8100ee6:	3728      	adds	r7, #40	@ 0x28
 8100ee8:	46bd      	mov	sp, r7
 8100eea:	bd80      	pop	{r7, pc}

08100eec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8100eec:	b580      	push	{r7, lr}
 8100eee:	b084      	sub	sp, #16
 8100ef0:	af00      	add	r7, sp, #0
 8100ef2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8100ef4:	f3ef 8305 	mrs	r3, IPSR
 8100ef8:	60bb      	str	r3, [r7, #8]
  return(result);
 8100efa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8100efc:	2b00      	cmp	r3, #0
 8100efe:	d003      	beq.n	8100f08 <osDelay+0x1c>
    stat = osErrorISR;
 8100f00:	f06f 0305 	mvn.w	r3, #5
 8100f04:	60fb      	str	r3, [r7, #12]
 8100f06:	e007      	b.n	8100f18 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8100f08:	2300      	movs	r3, #0
 8100f0a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8100f0c:	687b      	ldr	r3, [r7, #4]
 8100f0e:	2b00      	cmp	r3, #0
 8100f10:	d002      	beq.n	8100f18 <osDelay+0x2c>
      vTaskDelay(ticks);
 8100f12:	6878      	ldr	r0, [r7, #4]
 8100f14:	f001 fbd2 	bl	81026bc <vTaskDelay>
    }
  }

  return (stat);
 8100f18:	68fb      	ldr	r3, [r7, #12]
}
 8100f1a:	4618      	mov	r0, r3
 8100f1c:	3710      	adds	r7, #16
 8100f1e:	46bd      	mov	sp, r7
 8100f20:	bd80      	pop	{r7, pc}
	...

08100f24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8100f24:	b480      	push	{r7}
 8100f26:	b085      	sub	sp, #20
 8100f28:	af00      	add	r7, sp, #0
 8100f2a:	60f8      	str	r0, [r7, #12]
 8100f2c:	60b9      	str	r1, [r7, #8]
 8100f2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8100f30:	68fb      	ldr	r3, [r7, #12]
 8100f32:	4a07      	ldr	r2, [pc, #28]	@ (8100f50 <vApplicationGetIdleTaskMemory+0x2c>)
 8100f34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8100f36:	68bb      	ldr	r3, [r7, #8]
 8100f38:	4a06      	ldr	r2, [pc, #24]	@ (8100f54 <vApplicationGetIdleTaskMemory+0x30>)
 8100f3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8100f3c:	687b      	ldr	r3, [r7, #4]
 8100f3e:	2280      	movs	r2, #128	@ 0x80
 8100f40:	601a      	str	r2, [r3, #0]
}
 8100f42:	bf00      	nop
 8100f44:	3714      	adds	r7, #20
 8100f46:	46bd      	mov	sp, r7
 8100f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f4c:	4770      	bx	lr
 8100f4e:	bf00      	nop
 8100f50:	10000048 	.word	0x10000048
 8100f54:	100000a4 	.word	0x100000a4

08100f58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8100f58:	b480      	push	{r7}
 8100f5a:	b085      	sub	sp, #20
 8100f5c:	af00      	add	r7, sp, #0
 8100f5e:	60f8      	str	r0, [r7, #12]
 8100f60:	60b9      	str	r1, [r7, #8]
 8100f62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8100f64:	68fb      	ldr	r3, [r7, #12]
 8100f66:	4a07      	ldr	r2, [pc, #28]	@ (8100f84 <vApplicationGetTimerTaskMemory+0x2c>)
 8100f68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8100f6a:	68bb      	ldr	r3, [r7, #8]
 8100f6c:	4a06      	ldr	r2, [pc, #24]	@ (8100f88 <vApplicationGetTimerTaskMemory+0x30>)
 8100f6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8100f70:	687b      	ldr	r3, [r7, #4]
 8100f72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100f76:	601a      	str	r2, [r3, #0]
}
 8100f78:	bf00      	nop
 8100f7a:	3714      	adds	r7, #20
 8100f7c:	46bd      	mov	sp, r7
 8100f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f82:	4770      	bx	lr
 8100f84:	100002a4 	.word	0x100002a4
 8100f88:	10000300 	.word	0x10000300

08100f8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8100f8c:	b580      	push	{r7, lr}
 8100f8e:	b08a      	sub	sp, #40	@ 0x28
 8100f90:	af00      	add	r7, sp, #0
 8100f92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8100f94:	2300      	movs	r3, #0
 8100f96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8100f98:	f001 fc2e 	bl	81027f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8100f9c:	4b5c      	ldr	r3, [pc, #368]	@ (8101110 <pvPortMalloc+0x184>)
 8100f9e:	681b      	ldr	r3, [r3, #0]
 8100fa0:	2b00      	cmp	r3, #0
 8100fa2:	d101      	bne.n	8100fa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8100fa4:	f000 f924 	bl	81011f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8100fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8101114 <pvPortMalloc+0x188>)
 8100faa:	681a      	ldr	r2, [r3, #0]
 8100fac:	687b      	ldr	r3, [r7, #4]
 8100fae:	4013      	ands	r3, r2
 8100fb0:	2b00      	cmp	r3, #0
 8100fb2:	f040 8095 	bne.w	81010e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8100fb6:	687b      	ldr	r3, [r7, #4]
 8100fb8:	2b00      	cmp	r3, #0
 8100fba:	d01e      	beq.n	8100ffa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8100fbc:	2208      	movs	r2, #8
 8100fbe:	687b      	ldr	r3, [r7, #4]
 8100fc0:	4413      	add	r3, r2
 8100fc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8100fc4:	687b      	ldr	r3, [r7, #4]
 8100fc6:	f003 0307 	and.w	r3, r3, #7
 8100fca:	2b00      	cmp	r3, #0
 8100fcc:	d015      	beq.n	8100ffa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8100fce:	687b      	ldr	r3, [r7, #4]
 8100fd0:	f023 0307 	bic.w	r3, r3, #7
 8100fd4:	3308      	adds	r3, #8
 8100fd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8100fd8:	687b      	ldr	r3, [r7, #4]
 8100fda:	f003 0307 	and.w	r3, r3, #7
 8100fde:	2b00      	cmp	r3, #0
 8100fe0:	d00b      	beq.n	8100ffa <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8100fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8100fe6:	f383 8811 	msr	BASEPRI, r3
 8100fea:	f3bf 8f6f 	isb	sy
 8100fee:	f3bf 8f4f 	dsb	sy
 8100ff2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8100ff4:	bf00      	nop
 8100ff6:	bf00      	nop
 8100ff8:	e7fd      	b.n	8100ff6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8100ffa:	687b      	ldr	r3, [r7, #4]
 8100ffc:	2b00      	cmp	r3, #0
 8100ffe:	d06f      	beq.n	81010e0 <pvPortMalloc+0x154>
 8101000:	4b45      	ldr	r3, [pc, #276]	@ (8101118 <pvPortMalloc+0x18c>)
 8101002:	681b      	ldr	r3, [r3, #0]
 8101004:	687a      	ldr	r2, [r7, #4]
 8101006:	429a      	cmp	r2, r3
 8101008:	d86a      	bhi.n	81010e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810100a:	4b44      	ldr	r3, [pc, #272]	@ (810111c <pvPortMalloc+0x190>)
 810100c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810100e:	4b43      	ldr	r3, [pc, #268]	@ (810111c <pvPortMalloc+0x190>)
 8101010:	681b      	ldr	r3, [r3, #0]
 8101012:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8101014:	e004      	b.n	8101020 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8101016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101018:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810101c:	681b      	ldr	r3, [r3, #0]
 810101e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8101020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101022:	685b      	ldr	r3, [r3, #4]
 8101024:	687a      	ldr	r2, [r7, #4]
 8101026:	429a      	cmp	r2, r3
 8101028:	d903      	bls.n	8101032 <pvPortMalloc+0xa6>
 810102a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810102c:	681b      	ldr	r3, [r3, #0]
 810102e:	2b00      	cmp	r3, #0
 8101030:	d1f1      	bne.n	8101016 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8101032:	4b37      	ldr	r3, [pc, #220]	@ (8101110 <pvPortMalloc+0x184>)
 8101034:	681b      	ldr	r3, [r3, #0]
 8101036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101038:	429a      	cmp	r2, r3
 810103a:	d051      	beq.n	81010e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810103c:	6a3b      	ldr	r3, [r7, #32]
 810103e:	681b      	ldr	r3, [r3, #0]
 8101040:	2208      	movs	r2, #8
 8101042:	4413      	add	r3, r2
 8101044:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8101046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101048:	681a      	ldr	r2, [r3, #0]
 810104a:	6a3b      	ldr	r3, [r7, #32]
 810104c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810104e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101050:	685a      	ldr	r2, [r3, #4]
 8101052:	687b      	ldr	r3, [r7, #4]
 8101054:	1ad2      	subs	r2, r2, r3
 8101056:	2308      	movs	r3, #8
 8101058:	005b      	lsls	r3, r3, #1
 810105a:	429a      	cmp	r2, r3
 810105c:	d920      	bls.n	81010a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810105e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8101060:	687b      	ldr	r3, [r7, #4]
 8101062:	4413      	add	r3, r2
 8101064:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8101066:	69bb      	ldr	r3, [r7, #24]
 8101068:	f003 0307 	and.w	r3, r3, #7
 810106c:	2b00      	cmp	r3, #0
 810106e:	d00b      	beq.n	8101088 <pvPortMalloc+0xfc>
	__asm volatile
 8101070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101074:	f383 8811 	msr	BASEPRI, r3
 8101078:	f3bf 8f6f 	isb	sy
 810107c:	f3bf 8f4f 	dsb	sy
 8101080:	613b      	str	r3, [r7, #16]
}
 8101082:	bf00      	nop
 8101084:	bf00      	nop
 8101086:	e7fd      	b.n	8101084 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8101088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810108a:	685a      	ldr	r2, [r3, #4]
 810108c:	687b      	ldr	r3, [r7, #4]
 810108e:	1ad2      	subs	r2, r2, r3
 8101090:	69bb      	ldr	r3, [r7, #24]
 8101092:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8101094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101096:	687a      	ldr	r2, [r7, #4]
 8101098:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810109a:	69b8      	ldr	r0, [r7, #24]
 810109c:	f000 f90a 	bl	81012b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 81010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8101118 <pvPortMalloc+0x18c>)
 81010a2:	681a      	ldr	r2, [r3, #0]
 81010a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81010a6:	685b      	ldr	r3, [r3, #4]
 81010a8:	1ad3      	subs	r3, r2, r3
 81010aa:	4a1b      	ldr	r2, [pc, #108]	@ (8101118 <pvPortMalloc+0x18c>)
 81010ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 81010ae:	4b1a      	ldr	r3, [pc, #104]	@ (8101118 <pvPortMalloc+0x18c>)
 81010b0:	681a      	ldr	r2, [r3, #0]
 81010b2:	4b1b      	ldr	r3, [pc, #108]	@ (8101120 <pvPortMalloc+0x194>)
 81010b4:	681b      	ldr	r3, [r3, #0]
 81010b6:	429a      	cmp	r2, r3
 81010b8:	d203      	bcs.n	81010c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 81010ba:	4b17      	ldr	r3, [pc, #92]	@ (8101118 <pvPortMalloc+0x18c>)
 81010bc:	681b      	ldr	r3, [r3, #0]
 81010be:	4a18      	ldr	r2, [pc, #96]	@ (8101120 <pvPortMalloc+0x194>)
 81010c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 81010c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81010c4:	685a      	ldr	r2, [r3, #4]
 81010c6:	4b13      	ldr	r3, [pc, #76]	@ (8101114 <pvPortMalloc+0x188>)
 81010c8:	681b      	ldr	r3, [r3, #0]
 81010ca:	431a      	orrs	r2, r3
 81010cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81010ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 81010d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81010d2:	2200      	movs	r2, #0
 81010d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 81010d6:	4b13      	ldr	r3, [pc, #76]	@ (8101124 <pvPortMalloc+0x198>)
 81010d8:	681b      	ldr	r3, [r3, #0]
 81010da:	3301      	adds	r3, #1
 81010dc:	4a11      	ldr	r2, [pc, #68]	@ (8101124 <pvPortMalloc+0x198>)
 81010de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 81010e0:	f001 fb98 	bl	8102814 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 81010e4:	69fb      	ldr	r3, [r7, #28]
 81010e6:	f003 0307 	and.w	r3, r3, #7
 81010ea:	2b00      	cmp	r3, #0
 81010ec:	d00b      	beq.n	8101106 <pvPortMalloc+0x17a>
	__asm volatile
 81010ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81010f2:	f383 8811 	msr	BASEPRI, r3
 81010f6:	f3bf 8f6f 	isb	sy
 81010fa:	f3bf 8f4f 	dsb	sy
 81010fe:	60fb      	str	r3, [r7, #12]
}
 8101100:	bf00      	nop
 8101102:	bf00      	nop
 8101104:	e7fd      	b.n	8101102 <pvPortMalloc+0x176>
	return pvReturn;
 8101106:	69fb      	ldr	r3, [r7, #28]
}
 8101108:	4618      	mov	r0, r3
 810110a:	3728      	adds	r7, #40	@ 0x28
 810110c:	46bd      	mov	sp, r7
 810110e:	bd80      	pop	{r7, pc}
 8101110:	10004308 	.word	0x10004308
 8101114:	1000431c 	.word	0x1000431c
 8101118:	1000430c 	.word	0x1000430c
 810111c:	10004300 	.word	0x10004300
 8101120:	10004310 	.word	0x10004310
 8101124:	10004314 	.word	0x10004314

08101128 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8101128:	b580      	push	{r7, lr}
 810112a:	b086      	sub	sp, #24
 810112c:	af00      	add	r7, sp, #0
 810112e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8101130:	687b      	ldr	r3, [r7, #4]
 8101132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8101134:	687b      	ldr	r3, [r7, #4]
 8101136:	2b00      	cmp	r3, #0
 8101138:	d04f      	beq.n	81011da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810113a:	2308      	movs	r3, #8
 810113c:	425b      	negs	r3, r3
 810113e:	697a      	ldr	r2, [r7, #20]
 8101140:	4413      	add	r3, r2
 8101142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8101144:	697b      	ldr	r3, [r7, #20]
 8101146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8101148:	693b      	ldr	r3, [r7, #16]
 810114a:	685a      	ldr	r2, [r3, #4]
 810114c:	4b25      	ldr	r3, [pc, #148]	@ (81011e4 <vPortFree+0xbc>)
 810114e:	681b      	ldr	r3, [r3, #0]
 8101150:	4013      	ands	r3, r2
 8101152:	2b00      	cmp	r3, #0
 8101154:	d10b      	bne.n	810116e <vPortFree+0x46>
	__asm volatile
 8101156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810115a:	f383 8811 	msr	BASEPRI, r3
 810115e:	f3bf 8f6f 	isb	sy
 8101162:	f3bf 8f4f 	dsb	sy
 8101166:	60fb      	str	r3, [r7, #12]
}
 8101168:	bf00      	nop
 810116a:	bf00      	nop
 810116c:	e7fd      	b.n	810116a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810116e:	693b      	ldr	r3, [r7, #16]
 8101170:	681b      	ldr	r3, [r3, #0]
 8101172:	2b00      	cmp	r3, #0
 8101174:	d00b      	beq.n	810118e <vPortFree+0x66>
	__asm volatile
 8101176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810117a:	f383 8811 	msr	BASEPRI, r3
 810117e:	f3bf 8f6f 	isb	sy
 8101182:	f3bf 8f4f 	dsb	sy
 8101186:	60bb      	str	r3, [r7, #8]
}
 8101188:	bf00      	nop
 810118a:	bf00      	nop
 810118c:	e7fd      	b.n	810118a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810118e:	693b      	ldr	r3, [r7, #16]
 8101190:	685a      	ldr	r2, [r3, #4]
 8101192:	4b14      	ldr	r3, [pc, #80]	@ (81011e4 <vPortFree+0xbc>)
 8101194:	681b      	ldr	r3, [r3, #0]
 8101196:	4013      	ands	r3, r2
 8101198:	2b00      	cmp	r3, #0
 810119a:	d01e      	beq.n	81011da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810119c:	693b      	ldr	r3, [r7, #16]
 810119e:	681b      	ldr	r3, [r3, #0]
 81011a0:	2b00      	cmp	r3, #0
 81011a2:	d11a      	bne.n	81011da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 81011a4:	693b      	ldr	r3, [r7, #16]
 81011a6:	685a      	ldr	r2, [r3, #4]
 81011a8:	4b0e      	ldr	r3, [pc, #56]	@ (81011e4 <vPortFree+0xbc>)
 81011aa:	681b      	ldr	r3, [r3, #0]
 81011ac:	43db      	mvns	r3, r3
 81011ae:	401a      	ands	r2, r3
 81011b0:	693b      	ldr	r3, [r7, #16]
 81011b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 81011b4:	f001 fb20 	bl	81027f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 81011b8:	693b      	ldr	r3, [r7, #16]
 81011ba:	685a      	ldr	r2, [r3, #4]
 81011bc:	4b0a      	ldr	r3, [pc, #40]	@ (81011e8 <vPortFree+0xc0>)
 81011be:	681b      	ldr	r3, [r3, #0]
 81011c0:	4413      	add	r3, r2
 81011c2:	4a09      	ldr	r2, [pc, #36]	@ (81011e8 <vPortFree+0xc0>)
 81011c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 81011c6:	6938      	ldr	r0, [r7, #16]
 81011c8:	f000 f874 	bl	81012b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 81011cc:	4b07      	ldr	r3, [pc, #28]	@ (81011ec <vPortFree+0xc4>)
 81011ce:	681b      	ldr	r3, [r3, #0]
 81011d0:	3301      	adds	r3, #1
 81011d2:	4a06      	ldr	r2, [pc, #24]	@ (81011ec <vPortFree+0xc4>)
 81011d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 81011d6:	f001 fb1d 	bl	8102814 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81011da:	bf00      	nop
 81011dc:	3718      	adds	r7, #24
 81011de:	46bd      	mov	sp, r7
 81011e0:	bd80      	pop	{r7, pc}
 81011e2:	bf00      	nop
 81011e4:	1000431c 	.word	0x1000431c
 81011e8:	1000430c 	.word	0x1000430c
 81011ec:	10004318 	.word	0x10004318

081011f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 81011f0:	b480      	push	{r7}
 81011f2:	b085      	sub	sp, #20
 81011f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 81011f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 81011fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 81011fc:	4b27      	ldr	r3, [pc, #156]	@ (810129c <prvHeapInit+0xac>)
 81011fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8101200:	68fb      	ldr	r3, [r7, #12]
 8101202:	f003 0307 	and.w	r3, r3, #7
 8101206:	2b00      	cmp	r3, #0
 8101208:	d00c      	beq.n	8101224 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810120a:	68fb      	ldr	r3, [r7, #12]
 810120c:	3307      	adds	r3, #7
 810120e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8101210:	68fb      	ldr	r3, [r7, #12]
 8101212:	f023 0307 	bic.w	r3, r3, #7
 8101216:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8101218:	68ba      	ldr	r2, [r7, #8]
 810121a:	68fb      	ldr	r3, [r7, #12]
 810121c:	1ad3      	subs	r3, r2, r3
 810121e:	4a1f      	ldr	r2, [pc, #124]	@ (810129c <prvHeapInit+0xac>)
 8101220:	4413      	add	r3, r2
 8101222:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8101224:	68fb      	ldr	r3, [r7, #12]
 8101226:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8101228:	4a1d      	ldr	r2, [pc, #116]	@ (81012a0 <prvHeapInit+0xb0>)
 810122a:	687b      	ldr	r3, [r7, #4]
 810122c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810122e:	4b1c      	ldr	r3, [pc, #112]	@ (81012a0 <prvHeapInit+0xb0>)
 8101230:	2200      	movs	r2, #0
 8101232:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8101234:	687b      	ldr	r3, [r7, #4]
 8101236:	68ba      	ldr	r2, [r7, #8]
 8101238:	4413      	add	r3, r2
 810123a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810123c:	2208      	movs	r2, #8
 810123e:	68fb      	ldr	r3, [r7, #12]
 8101240:	1a9b      	subs	r3, r3, r2
 8101242:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8101244:	68fb      	ldr	r3, [r7, #12]
 8101246:	f023 0307 	bic.w	r3, r3, #7
 810124a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810124c:	68fb      	ldr	r3, [r7, #12]
 810124e:	4a15      	ldr	r2, [pc, #84]	@ (81012a4 <prvHeapInit+0xb4>)
 8101250:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8101252:	4b14      	ldr	r3, [pc, #80]	@ (81012a4 <prvHeapInit+0xb4>)
 8101254:	681b      	ldr	r3, [r3, #0]
 8101256:	2200      	movs	r2, #0
 8101258:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810125a:	4b12      	ldr	r3, [pc, #72]	@ (81012a4 <prvHeapInit+0xb4>)
 810125c:	681b      	ldr	r3, [r3, #0]
 810125e:	2200      	movs	r2, #0
 8101260:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8101262:	687b      	ldr	r3, [r7, #4]
 8101264:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8101266:	683b      	ldr	r3, [r7, #0]
 8101268:	68fa      	ldr	r2, [r7, #12]
 810126a:	1ad2      	subs	r2, r2, r3
 810126c:	683b      	ldr	r3, [r7, #0]
 810126e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8101270:	4b0c      	ldr	r3, [pc, #48]	@ (81012a4 <prvHeapInit+0xb4>)
 8101272:	681a      	ldr	r2, [r3, #0]
 8101274:	683b      	ldr	r3, [r7, #0]
 8101276:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101278:	683b      	ldr	r3, [r7, #0]
 810127a:	685b      	ldr	r3, [r3, #4]
 810127c:	4a0a      	ldr	r2, [pc, #40]	@ (81012a8 <prvHeapInit+0xb8>)
 810127e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101280:	683b      	ldr	r3, [r7, #0]
 8101282:	685b      	ldr	r3, [r3, #4]
 8101284:	4a09      	ldr	r2, [pc, #36]	@ (81012ac <prvHeapInit+0xbc>)
 8101286:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8101288:	4b09      	ldr	r3, [pc, #36]	@ (81012b0 <prvHeapInit+0xc0>)
 810128a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810128e:	601a      	str	r2, [r3, #0]
}
 8101290:	bf00      	nop
 8101292:	3714      	adds	r7, #20
 8101294:	46bd      	mov	sp, r7
 8101296:	f85d 7b04 	ldr.w	r7, [sp], #4
 810129a:	4770      	bx	lr
 810129c:	10000700 	.word	0x10000700
 81012a0:	10004300 	.word	0x10004300
 81012a4:	10004308 	.word	0x10004308
 81012a8:	10004310 	.word	0x10004310
 81012ac:	1000430c 	.word	0x1000430c
 81012b0:	1000431c 	.word	0x1000431c

081012b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 81012b4:	b480      	push	{r7}
 81012b6:	b085      	sub	sp, #20
 81012b8:	af00      	add	r7, sp, #0
 81012ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 81012bc:	4b28      	ldr	r3, [pc, #160]	@ (8101360 <prvInsertBlockIntoFreeList+0xac>)
 81012be:	60fb      	str	r3, [r7, #12]
 81012c0:	e002      	b.n	81012c8 <prvInsertBlockIntoFreeList+0x14>
 81012c2:	68fb      	ldr	r3, [r7, #12]
 81012c4:	681b      	ldr	r3, [r3, #0]
 81012c6:	60fb      	str	r3, [r7, #12]
 81012c8:	68fb      	ldr	r3, [r7, #12]
 81012ca:	681b      	ldr	r3, [r3, #0]
 81012cc:	687a      	ldr	r2, [r7, #4]
 81012ce:	429a      	cmp	r2, r3
 81012d0:	d8f7      	bhi.n	81012c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 81012d2:	68fb      	ldr	r3, [r7, #12]
 81012d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 81012d6:	68fb      	ldr	r3, [r7, #12]
 81012d8:	685b      	ldr	r3, [r3, #4]
 81012da:	68ba      	ldr	r2, [r7, #8]
 81012dc:	4413      	add	r3, r2
 81012de:	687a      	ldr	r2, [r7, #4]
 81012e0:	429a      	cmp	r2, r3
 81012e2:	d108      	bne.n	81012f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81012e4:	68fb      	ldr	r3, [r7, #12]
 81012e6:	685a      	ldr	r2, [r3, #4]
 81012e8:	687b      	ldr	r3, [r7, #4]
 81012ea:	685b      	ldr	r3, [r3, #4]
 81012ec:	441a      	add	r2, r3
 81012ee:	68fb      	ldr	r3, [r7, #12]
 81012f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 81012f2:	68fb      	ldr	r3, [r7, #12]
 81012f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 81012f6:	687b      	ldr	r3, [r7, #4]
 81012f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 81012fa:	687b      	ldr	r3, [r7, #4]
 81012fc:	685b      	ldr	r3, [r3, #4]
 81012fe:	68ba      	ldr	r2, [r7, #8]
 8101300:	441a      	add	r2, r3
 8101302:	68fb      	ldr	r3, [r7, #12]
 8101304:	681b      	ldr	r3, [r3, #0]
 8101306:	429a      	cmp	r2, r3
 8101308:	d118      	bne.n	810133c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810130a:	68fb      	ldr	r3, [r7, #12]
 810130c:	681a      	ldr	r2, [r3, #0]
 810130e:	4b15      	ldr	r3, [pc, #84]	@ (8101364 <prvInsertBlockIntoFreeList+0xb0>)
 8101310:	681b      	ldr	r3, [r3, #0]
 8101312:	429a      	cmp	r2, r3
 8101314:	d00d      	beq.n	8101332 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8101316:	687b      	ldr	r3, [r7, #4]
 8101318:	685a      	ldr	r2, [r3, #4]
 810131a:	68fb      	ldr	r3, [r7, #12]
 810131c:	681b      	ldr	r3, [r3, #0]
 810131e:	685b      	ldr	r3, [r3, #4]
 8101320:	441a      	add	r2, r3
 8101322:	687b      	ldr	r3, [r7, #4]
 8101324:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8101326:	68fb      	ldr	r3, [r7, #12]
 8101328:	681b      	ldr	r3, [r3, #0]
 810132a:	681a      	ldr	r2, [r3, #0]
 810132c:	687b      	ldr	r3, [r7, #4]
 810132e:	601a      	str	r2, [r3, #0]
 8101330:	e008      	b.n	8101344 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8101332:	4b0c      	ldr	r3, [pc, #48]	@ (8101364 <prvInsertBlockIntoFreeList+0xb0>)
 8101334:	681a      	ldr	r2, [r3, #0]
 8101336:	687b      	ldr	r3, [r7, #4]
 8101338:	601a      	str	r2, [r3, #0]
 810133a:	e003      	b.n	8101344 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810133c:	68fb      	ldr	r3, [r7, #12]
 810133e:	681a      	ldr	r2, [r3, #0]
 8101340:	687b      	ldr	r3, [r7, #4]
 8101342:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8101344:	68fa      	ldr	r2, [r7, #12]
 8101346:	687b      	ldr	r3, [r7, #4]
 8101348:	429a      	cmp	r2, r3
 810134a:	d002      	beq.n	8101352 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810134c:	68fb      	ldr	r3, [r7, #12]
 810134e:	687a      	ldr	r2, [r7, #4]
 8101350:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8101352:	bf00      	nop
 8101354:	3714      	adds	r7, #20
 8101356:	46bd      	mov	sp, r7
 8101358:	f85d 7b04 	ldr.w	r7, [sp], #4
 810135c:	4770      	bx	lr
 810135e:	bf00      	nop
 8101360:	10004300 	.word	0x10004300
 8101364:	10004308 	.word	0x10004308

08101368 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8101368:	b480      	push	{r7}
 810136a:	b083      	sub	sp, #12
 810136c:	af00      	add	r7, sp, #0
 810136e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101370:	687b      	ldr	r3, [r7, #4]
 8101372:	f103 0208 	add.w	r2, r3, #8
 8101376:	687b      	ldr	r3, [r7, #4]
 8101378:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810137a:	687b      	ldr	r3, [r7, #4]
 810137c:	f04f 32ff 	mov.w	r2, #4294967295
 8101380:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101382:	687b      	ldr	r3, [r7, #4]
 8101384:	f103 0208 	add.w	r2, r3, #8
 8101388:	687b      	ldr	r3, [r7, #4]
 810138a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810138c:	687b      	ldr	r3, [r7, #4]
 810138e:	f103 0208 	add.w	r2, r3, #8
 8101392:	687b      	ldr	r3, [r7, #4]
 8101394:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8101396:	687b      	ldr	r3, [r7, #4]
 8101398:	2200      	movs	r2, #0
 810139a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810139c:	bf00      	nop
 810139e:	370c      	adds	r7, #12
 81013a0:	46bd      	mov	sp, r7
 81013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013a6:	4770      	bx	lr

081013a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 81013a8:	b480      	push	{r7}
 81013aa:	b083      	sub	sp, #12
 81013ac:	af00      	add	r7, sp, #0
 81013ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81013b0:	687b      	ldr	r3, [r7, #4]
 81013b2:	2200      	movs	r2, #0
 81013b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81013b6:	bf00      	nop
 81013b8:	370c      	adds	r7, #12
 81013ba:	46bd      	mov	sp, r7
 81013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013c0:	4770      	bx	lr

081013c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81013c2:	b480      	push	{r7}
 81013c4:	b085      	sub	sp, #20
 81013c6:	af00      	add	r7, sp, #0
 81013c8:	6078      	str	r0, [r7, #4]
 81013ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81013cc:	687b      	ldr	r3, [r7, #4]
 81013ce:	685b      	ldr	r3, [r3, #4]
 81013d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81013d2:	683b      	ldr	r3, [r7, #0]
 81013d4:	68fa      	ldr	r2, [r7, #12]
 81013d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81013d8:	68fb      	ldr	r3, [r7, #12]
 81013da:	689a      	ldr	r2, [r3, #8]
 81013dc:	683b      	ldr	r3, [r7, #0]
 81013de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81013e0:	68fb      	ldr	r3, [r7, #12]
 81013e2:	689b      	ldr	r3, [r3, #8]
 81013e4:	683a      	ldr	r2, [r7, #0]
 81013e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81013e8:	68fb      	ldr	r3, [r7, #12]
 81013ea:	683a      	ldr	r2, [r7, #0]
 81013ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81013ee:	683b      	ldr	r3, [r7, #0]
 81013f0:	687a      	ldr	r2, [r7, #4]
 81013f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81013f4:	687b      	ldr	r3, [r7, #4]
 81013f6:	681b      	ldr	r3, [r3, #0]
 81013f8:	1c5a      	adds	r2, r3, #1
 81013fa:	687b      	ldr	r3, [r7, #4]
 81013fc:	601a      	str	r2, [r3, #0]
}
 81013fe:	bf00      	nop
 8101400:	3714      	adds	r7, #20
 8101402:	46bd      	mov	sp, r7
 8101404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101408:	4770      	bx	lr

0810140a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810140a:	b480      	push	{r7}
 810140c:	b085      	sub	sp, #20
 810140e:	af00      	add	r7, sp, #0
 8101410:	6078      	str	r0, [r7, #4]
 8101412:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8101414:	683b      	ldr	r3, [r7, #0]
 8101416:	681b      	ldr	r3, [r3, #0]
 8101418:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810141a:	68bb      	ldr	r3, [r7, #8]
 810141c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101420:	d103      	bne.n	810142a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8101422:	687b      	ldr	r3, [r7, #4]
 8101424:	691b      	ldr	r3, [r3, #16]
 8101426:	60fb      	str	r3, [r7, #12]
 8101428:	e00c      	b.n	8101444 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810142a:	687b      	ldr	r3, [r7, #4]
 810142c:	3308      	adds	r3, #8
 810142e:	60fb      	str	r3, [r7, #12]
 8101430:	e002      	b.n	8101438 <vListInsert+0x2e>
 8101432:	68fb      	ldr	r3, [r7, #12]
 8101434:	685b      	ldr	r3, [r3, #4]
 8101436:	60fb      	str	r3, [r7, #12]
 8101438:	68fb      	ldr	r3, [r7, #12]
 810143a:	685b      	ldr	r3, [r3, #4]
 810143c:	681b      	ldr	r3, [r3, #0]
 810143e:	68ba      	ldr	r2, [r7, #8]
 8101440:	429a      	cmp	r2, r3
 8101442:	d2f6      	bcs.n	8101432 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8101444:	68fb      	ldr	r3, [r7, #12]
 8101446:	685a      	ldr	r2, [r3, #4]
 8101448:	683b      	ldr	r3, [r7, #0]
 810144a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810144c:	683b      	ldr	r3, [r7, #0]
 810144e:	685b      	ldr	r3, [r3, #4]
 8101450:	683a      	ldr	r2, [r7, #0]
 8101452:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8101454:	683b      	ldr	r3, [r7, #0]
 8101456:	68fa      	ldr	r2, [r7, #12]
 8101458:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810145a:	68fb      	ldr	r3, [r7, #12]
 810145c:	683a      	ldr	r2, [r7, #0]
 810145e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8101460:	683b      	ldr	r3, [r7, #0]
 8101462:	687a      	ldr	r2, [r7, #4]
 8101464:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8101466:	687b      	ldr	r3, [r7, #4]
 8101468:	681b      	ldr	r3, [r3, #0]
 810146a:	1c5a      	adds	r2, r3, #1
 810146c:	687b      	ldr	r3, [r7, #4]
 810146e:	601a      	str	r2, [r3, #0]
}
 8101470:	bf00      	nop
 8101472:	3714      	adds	r7, #20
 8101474:	46bd      	mov	sp, r7
 8101476:	f85d 7b04 	ldr.w	r7, [sp], #4
 810147a:	4770      	bx	lr

0810147c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810147c:	b480      	push	{r7}
 810147e:	b085      	sub	sp, #20
 8101480:	af00      	add	r7, sp, #0
 8101482:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8101484:	687b      	ldr	r3, [r7, #4]
 8101486:	691b      	ldr	r3, [r3, #16]
 8101488:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810148a:	687b      	ldr	r3, [r7, #4]
 810148c:	685b      	ldr	r3, [r3, #4]
 810148e:	687a      	ldr	r2, [r7, #4]
 8101490:	6892      	ldr	r2, [r2, #8]
 8101492:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8101494:	687b      	ldr	r3, [r7, #4]
 8101496:	689b      	ldr	r3, [r3, #8]
 8101498:	687a      	ldr	r2, [r7, #4]
 810149a:	6852      	ldr	r2, [r2, #4]
 810149c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810149e:	68fb      	ldr	r3, [r7, #12]
 81014a0:	685b      	ldr	r3, [r3, #4]
 81014a2:	687a      	ldr	r2, [r7, #4]
 81014a4:	429a      	cmp	r2, r3
 81014a6:	d103      	bne.n	81014b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 81014a8:	687b      	ldr	r3, [r7, #4]
 81014aa:	689a      	ldr	r2, [r3, #8]
 81014ac:	68fb      	ldr	r3, [r7, #12]
 81014ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 81014b0:	687b      	ldr	r3, [r7, #4]
 81014b2:	2200      	movs	r2, #0
 81014b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 81014b6:	68fb      	ldr	r3, [r7, #12]
 81014b8:	681b      	ldr	r3, [r3, #0]
 81014ba:	1e5a      	subs	r2, r3, #1
 81014bc:	68fb      	ldr	r3, [r7, #12]
 81014be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81014c0:	68fb      	ldr	r3, [r7, #12]
 81014c2:	681b      	ldr	r3, [r3, #0]
}
 81014c4:	4618      	mov	r0, r3
 81014c6:	3714      	adds	r7, #20
 81014c8:	46bd      	mov	sp, r7
 81014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014ce:	4770      	bx	lr

081014d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 81014d0:	b480      	push	{r7}
 81014d2:	b085      	sub	sp, #20
 81014d4:	af00      	add	r7, sp, #0
 81014d6:	60f8      	str	r0, [r7, #12]
 81014d8:	60b9      	str	r1, [r7, #8]
 81014da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 81014dc:	68fb      	ldr	r3, [r7, #12]
 81014de:	3b04      	subs	r3, #4
 81014e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 81014e2:	68fb      	ldr	r3, [r7, #12]
 81014e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 81014e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81014ea:	68fb      	ldr	r3, [r7, #12]
 81014ec:	3b04      	subs	r3, #4
 81014ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 81014f0:	68bb      	ldr	r3, [r7, #8]
 81014f2:	f023 0201 	bic.w	r2, r3, #1
 81014f6:	68fb      	ldr	r3, [r7, #12]
 81014f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81014fa:	68fb      	ldr	r3, [r7, #12]
 81014fc:	3b04      	subs	r3, #4
 81014fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8101500:	4a0c      	ldr	r2, [pc, #48]	@ (8101534 <pxPortInitialiseStack+0x64>)
 8101502:	68fb      	ldr	r3, [r7, #12]
 8101504:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8101506:	68fb      	ldr	r3, [r7, #12]
 8101508:	3b14      	subs	r3, #20
 810150a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810150c:	687a      	ldr	r2, [r7, #4]
 810150e:	68fb      	ldr	r3, [r7, #12]
 8101510:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8101512:	68fb      	ldr	r3, [r7, #12]
 8101514:	3b04      	subs	r3, #4
 8101516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8101518:	68fb      	ldr	r3, [r7, #12]
 810151a:	f06f 0202 	mvn.w	r2, #2
 810151e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8101520:	68fb      	ldr	r3, [r7, #12]
 8101522:	3b20      	subs	r3, #32
 8101524:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8101526:	68fb      	ldr	r3, [r7, #12]
}
 8101528:	4618      	mov	r0, r3
 810152a:	3714      	adds	r7, #20
 810152c:	46bd      	mov	sp, r7
 810152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101532:	4770      	bx	lr
 8101534:	08101539 	.word	0x08101539

08101538 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8101538:	b480      	push	{r7}
 810153a:	b085      	sub	sp, #20
 810153c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810153e:	2300      	movs	r3, #0
 8101540:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8101542:	4b13      	ldr	r3, [pc, #76]	@ (8101590 <prvTaskExitError+0x58>)
 8101544:	681b      	ldr	r3, [r3, #0]
 8101546:	f1b3 3fff 	cmp.w	r3, #4294967295
 810154a:	d00b      	beq.n	8101564 <prvTaskExitError+0x2c>
	__asm volatile
 810154c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101550:	f383 8811 	msr	BASEPRI, r3
 8101554:	f3bf 8f6f 	isb	sy
 8101558:	f3bf 8f4f 	dsb	sy
 810155c:	60fb      	str	r3, [r7, #12]
}
 810155e:	bf00      	nop
 8101560:	bf00      	nop
 8101562:	e7fd      	b.n	8101560 <prvTaskExitError+0x28>
	__asm volatile
 8101564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101568:	f383 8811 	msr	BASEPRI, r3
 810156c:	f3bf 8f6f 	isb	sy
 8101570:	f3bf 8f4f 	dsb	sy
 8101574:	60bb      	str	r3, [r7, #8]
}
 8101576:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8101578:	bf00      	nop
 810157a:	687b      	ldr	r3, [r7, #4]
 810157c:	2b00      	cmp	r3, #0
 810157e:	d0fc      	beq.n	810157a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8101580:	bf00      	nop
 8101582:	bf00      	nop
 8101584:	3714      	adds	r7, #20
 8101586:	46bd      	mov	sp, r7
 8101588:	f85d 7b04 	ldr.w	r7, [sp], #4
 810158c:	4770      	bx	lr
 810158e:	bf00      	nop
 8101590:	1000001c 	.word	0x1000001c
	...

081015a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 81015a0:	4b07      	ldr	r3, [pc, #28]	@ (81015c0 <pxCurrentTCBConst2>)
 81015a2:	6819      	ldr	r1, [r3, #0]
 81015a4:	6808      	ldr	r0, [r1, #0]
 81015a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81015aa:	f380 8809 	msr	PSP, r0
 81015ae:	f3bf 8f6f 	isb	sy
 81015b2:	f04f 0000 	mov.w	r0, #0
 81015b6:	f380 8811 	msr	BASEPRI, r0
 81015ba:	4770      	bx	lr
 81015bc:	f3af 8000 	nop.w

081015c0 <pxCurrentTCBConst2>:
 81015c0:	10004368 	.word	0x10004368
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 81015c4:	bf00      	nop
 81015c6:	bf00      	nop

081015c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 81015c8:	4808      	ldr	r0, [pc, #32]	@ (81015ec <prvPortStartFirstTask+0x24>)
 81015ca:	6800      	ldr	r0, [r0, #0]
 81015cc:	6800      	ldr	r0, [r0, #0]
 81015ce:	f380 8808 	msr	MSP, r0
 81015d2:	f04f 0000 	mov.w	r0, #0
 81015d6:	f380 8814 	msr	CONTROL, r0
 81015da:	b662      	cpsie	i
 81015dc:	b661      	cpsie	f
 81015de:	f3bf 8f4f 	dsb	sy
 81015e2:	f3bf 8f6f 	isb	sy
 81015e6:	df00      	svc	0
 81015e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 81015ea:	bf00      	nop
 81015ec:	e000ed08 	.word	0xe000ed08

081015f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 81015f0:	b580      	push	{r7, lr}
 81015f2:	b086      	sub	sp, #24
 81015f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 81015f6:	4b47      	ldr	r3, [pc, #284]	@ (8101714 <xPortStartScheduler+0x124>)
 81015f8:	681b      	ldr	r3, [r3, #0]
 81015fa:	4a47      	ldr	r2, [pc, #284]	@ (8101718 <xPortStartScheduler+0x128>)
 81015fc:	4293      	cmp	r3, r2
 81015fe:	d10b      	bne.n	8101618 <xPortStartScheduler+0x28>
	__asm volatile
 8101600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101604:	f383 8811 	msr	BASEPRI, r3
 8101608:	f3bf 8f6f 	isb	sy
 810160c:	f3bf 8f4f 	dsb	sy
 8101610:	60fb      	str	r3, [r7, #12]
}
 8101612:	bf00      	nop
 8101614:	bf00      	nop
 8101616:	e7fd      	b.n	8101614 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8101618:	4b3e      	ldr	r3, [pc, #248]	@ (8101714 <xPortStartScheduler+0x124>)
 810161a:	681b      	ldr	r3, [r3, #0]
 810161c:	4a3f      	ldr	r2, [pc, #252]	@ (810171c <xPortStartScheduler+0x12c>)
 810161e:	4293      	cmp	r3, r2
 8101620:	d10b      	bne.n	810163a <xPortStartScheduler+0x4a>
	__asm volatile
 8101622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101626:	f383 8811 	msr	BASEPRI, r3
 810162a:	f3bf 8f6f 	isb	sy
 810162e:	f3bf 8f4f 	dsb	sy
 8101632:	613b      	str	r3, [r7, #16]
}
 8101634:	bf00      	nop
 8101636:	bf00      	nop
 8101638:	e7fd      	b.n	8101636 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810163a:	4b39      	ldr	r3, [pc, #228]	@ (8101720 <xPortStartScheduler+0x130>)
 810163c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810163e:	697b      	ldr	r3, [r7, #20]
 8101640:	781b      	ldrb	r3, [r3, #0]
 8101642:	b2db      	uxtb	r3, r3
 8101644:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8101646:	697b      	ldr	r3, [r7, #20]
 8101648:	22ff      	movs	r2, #255	@ 0xff
 810164a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810164c:	697b      	ldr	r3, [r7, #20]
 810164e:	781b      	ldrb	r3, [r3, #0]
 8101650:	b2db      	uxtb	r3, r3
 8101652:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8101654:	78fb      	ldrb	r3, [r7, #3]
 8101656:	b2db      	uxtb	r3, r3
 8101658:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810165c:	b2da      	uxtb	r2, r3
 810165e:	4b31      	ldr	r3, [pc, #196]	@ (8101724 <xPortStartScheduler+0x134>)
 8101660:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8101662:	4b31      	ldr	r3, [pc, #196]	@ (8101728 <xPortStartScheduler+0x138>)
 8101664:	2207      	movs	r2, #7
 8101666:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8101668:	e009      	b.n	810167e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810166a:	4b2f      	ldr	r3, [pc, #188]	@ (8101728 <xPortStartScheduler+0x138>)
 810166c:	681b      	ldr	r3, [r3, #0]
 810166e:	3b01      	subs	r3, #1
 8101670:	4a2d      	ldr	r2, [pc, #180]	@ (8101728 <xPortStartScheduler+0x138>)
 8101672:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8101674:	78fb      	ldrb	r3, [r7, #3]
 8101676:	b2db      	uxtb	r3, r3
 8101678:	005b      	lsls	r3, r3, #1
 810167a:	b2db      	uxtb	r3, r3
 810167c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810167e:	78fb      	ldrb	r3, [r7, #3]
 8101680:	b2db      	uxtb	r3, r3
 8101682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101686:	2b80      	cmp	r3, #128	@ 0x80
 8101688:	d0ef      	beq.n	810166a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810168a:	4b27      	ldr	r3, [pc, #156]	@ (8101728 <xPortStartScheduler+0x138>)
 810168c:	681b      	ldr	r3, [r3, #0]
 810168e:	f1c3 0307 	rsb	r3, r3, #7
 8101692:	2b04      	cmp	r3, #4
 8101694:	d00b      	beq.n	81016ae <xPortStartScheduler+0xbe>
	__asm volatile
 8101696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810169a:	f383 8811 	msr	BASEPRI, r3
 810169e:	f3bf 8f6f 	isb	sy
 81016a2:	f3bf 8f4f 	dsb	sy
 81016a6:	60bb      	str	r3, [r7, #8]
}
 81016a8:	bf00      	nop
 81016aa:	bf00      	nop
 81016ac:	e7fd      	b.n	81016aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 81016ae:	4b1e      	ldr	r3, [pc, #120]	@ (8101728 <xPortStartScheduler+0x138>)
 81016b0:	681b      	ldr	r3, [r3, #0]
 81016b2:	021b      	lsls	r3, r3, #8
 81016b4:	4a1c      	ldr	r2, [pc, #112]	@ (8101728 <xPortStartScheduler+0x138>)
 81016b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 81016b8:	4b1b      	ldr	r3, [pc, #108]	@ (8101728 <xPortStartScheduler+0x138>)
 81016ba:	681b      	ldr	r3, [r3, #0]
 81016bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 81016c0:	4a19      	ldr	r2, [pc, #100]	@ (8101728 <xPortStartScheduler+0x138>)
 81016c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 81016c4:	687b      	ldr	r3, [r7, #4]
 81016c6:	b2da      	uxtb	r2, r3
 81016c8:	697b      	ldr	r3, [r7, #20]
 81016ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 81016cc:	4b17      	ldr	r3, [pc, #92]	@ (810172c <xPortStartScheduler+0x13c>)
 81016ce:	681b      	ldr	r3, [r3, #0]
 81016d0:	4a16      	ldr	r2, [pc, #88]	@ (810172c <xPortStartScheduler+0x13c>)
 81016d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81016d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 81016d8:	4b14      	ldr	r3, [pc, #80]	@ (810172c <xPortStartScheduler+0x13c>)
 81016da:	681b      	ldr	r3, [r3, #0]
 81016dc:	4a13      	ldr	r2, [pc, #76]	@ (810172c <xPortStartScheduler+0x13c>)
 81016de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 81016e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 81016e4:	f000 f8da 	bl	810189c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 81016e8:	4b11      	ldr	r3, [pc, #68]	@ (8101730 <xPortStartScheduler+0x140>)
 81016ea:	2200      	movs	r2, #0
 81016ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 81016ee:	f000 f8f9 	bl	81018e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 81016f2:	4b10      	ldr	r3, [pc, #64]	@ (8101734 <xPortStartScheduler+0x144>)
 81016f4:	681b      	ldr	r3, [r3, #0]
 81016f6:	4a0f      	ldr	r2, [pc, #60]	@ (8101734 <xPortStartScheduler+0x144>)
 81016f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 81016fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 81016fe:	f7ff ff63 	bl	81015c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8101702:	f001 f9ef 	bl	8102ae4 <vTaskSwitchContext>
	prvTaskExitError();
 8101706:	f7ff ff17 	bl	8101538 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810170a:	2300      	movs	r3, #0
}
 810170c:	4618      	mov	r0, r3
 810170e:	3718      	adds	r7, #24
 8101710:	46bd      	mov	sp, r7
 8101712:	bd80      	pop	{r7, pc}
 8101714:	e000ed00 	.word	0xe000ed00
 8101718:	410fc271 	.word	0x410fc271
 810171c:	410fc270 	.word	0x410fc270
 8101720:	e000e400 	.word	0xe000e400
 8101724:	10004320 	.word	0x10004320
 8101728:	10004324 	.word	0x10004324
 810172c:	e000ed20 	.word	0xe000ed20
 8101730:	1000001c 	.word	0x1000001c
 8101734:	e000ef34 	.word	0xe000ef34

08101738 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8101738:	b480      	push	{r7}
 810173a:	b083      	sub	sp, #12
 810173c:	af00      	add	r7, sp, #0
	__asm volatile
 810173e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101742:	f383 8811 	msr	BASEPRI, r3
 8101746:	f3bf 8f6f 	isb	sy
 810174a:	f3bf 8f4f 	dsb	sy
 810174e:	607b      	str	r3, [r7, #4]
}
 8101750:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8101752:	4b10      	ldr	r3, [pc, #64]	@ (8101794 <vPortEnterCritical+0x5c>)
 8101754:	681b      	ldr	r3, [r3, #0]
 8101756:	3301      	adds	r3, #1
 8101758:	4a0e      	ldr	r2, [pc, #56]	@ (8101794 <vPortEnterCritical+0x5c>)
 810175a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810175c:	4b0d      	ldr	r3, [pc, #52]	@ (8101794 <vPortEnterCritical+0x5c>)
 810175e:	681b      	ldr	r3, [r3, #0]
 8101760:	2b01      	cmp	r3, #1
 8101762:	d110      	bne.n	8101786 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8101764:	4b0c      	ldr	r3, [pc, #48]	@ (8101798 <vPortEnterCritical+0x60>)
 8101766:	681b      	ldr	r3, [r3, #0]
 8101768:	b2db      	uxtb	r3, r3
 810176a:	2b00      	cmp	r3, #0
 810176c:	d00b      	beq.n	8101786 <vPortEnterCritical+0x4e>
	__asm volatile
 810176e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101772:	f383 8811 	msr	BASEPRI, r3
 8101776:	f3bf 8f6f 	isb	sy
 810177a:	f3bf 8f4f 	dsb	sy
 810177e:	603b      	str	r3, [r7, #0]
}
 8101780:	bf00      	nop
 8101782:	bf00      	nop
 8101784:	e7fd      	b.n	8101782 <vPortEnterCritical+0x4a>
	}
}
 8101786:	bf00      	nop
 8101788:	370c      	adds	r7, #12
 810178a:	46bd      	mov	sp, r7
 810178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101790:	4770      	bx	lr
 8101792:	bf00      	nop
 8101794:	1000001c 	.word	0x1000001c
 8101798:	e000ed04 	.word	0xe000ed04

0810179c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810179c:	b480      	push	{r7}
 810179e:	b083      	sub	sp, #12
 81017a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 81017a2:	4b12      	ldr	r3, [pc, #72]	@ (81017ec <vPortExitCritical+0x50>)
 81017a4:	681b      	ldr	r3, [r3, #0]
 81017a6:	2b00      	cmp	r3, #0
 81017a8:	d10b      	bne.n	81017c2 <vPortExitCritical+0x26>
	__asm volatile
 81017aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81017ae:	f383 8811 	msr	BASEPRI, r3
 81017b2:	f3bf 8f6f 	isb	sy
 81017b6:	f3bf 8f4f 	dsb	sy
 81017ba:	607b      	str	r3, [r7, #4]
}
 81017bc:	bf00      	nop
 81017be:	bf00      	nop
 81017c0:	e7fd      	b.n	81017be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 81017c2:	4b0a      	ldr	r3, [pc, #40]	@ (81017ec <vPortExitCritical+0x50>)
 81017c4:	681b      	ldr	r3, [r3, #0]
 81017c6:	3b01      	subs	r3, #1
 81017c8:	4a08      	ldr	r2, [pc, #32]	@ (81017ec <vPortExitCritical+0x50>)
 81017ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 81017cc:	4b07      	ldr	r3, [pc, #28]	@ (81017ec <vPortExitCritical+0x50>)
 81017ce:	681b      	ldr	r3, [r3, #0]
 81017d0:	2b00      	cmp	r3, #0
 81017d2:	d105      	bne.n	81017e0 <vPortExitCritical+0x44>
 81017d4:	2300      	movs	r3, #0
 81017d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81017d8:	683b      	ldr	r3, [r7, #0]
 81017da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 81017de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 81017e0:	bf00      	nop
 81017e2:	370c      	adds	r7, #12
 81017e4:	46bd      	mov	sp, r7
 81017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017ea:	4770      	bx	lr
 81017ec:	1000001c 	.word	0x1000001c

081017f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81017f0:	f3ef 8009 	mrs	r0, PSP
 81017f4:	f3bf 8f6f 	isb	sy
 81017f8:	4b15      	ldr	r3, [pc, #84]	@ (8101850 <pxCurrentTCBConst>)
 81017fa:	681a      	ldr	r2, [r3, #0]
 81017fc:	f01e 0f10 	tst.w	lr, #16
 8101800:	bf08      	it	eq
 8101802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8101806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810180a:	6010      	str	r0, [r2, #0]
 810180c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8101810:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8101814:	f380 8811 	msr	BASEPRI, r0
 8101818:	f3bf 8f4f 	dsb	sy
 810181c:	f3bf 8f6f 	isb	sy
 8101820:	f001 f960 	bl	8102ae4 <vTaskSwitchContext>
 8101824:	f04f 0000 	mov.w	r0, #0
 8101828:	f380 8811 	msr	BASEPRI, r0
 810182c:	bc09      	pop	{r0, r3}
 810182e:	6819      	ldr	r1, [r3, #0]
 8101830:	6808      	ldr	r0, [r1, #0]
 8101832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101836:	f01e 0f10 	tst.w	lr, #16
 810183a:	bf08      	it	eq
 810183c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8101840:	f380 8809 	msr	PSP, r0
 8101844:	f3bf 8f6f 	isb	sy
 8101848:	4770      	bx	lr
 810184a:	bf00      	nop
 810184c:	f3af 8000 	nop.w

08101850 <pxCurrentTCBConst>:
 8101850:	10004368 	.word	0x10004368
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8101854:	bf00      	nop
 8101856:	bf00      	nop

08101858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8101858:	b580      	push	{r7, lr}
 810185a:	b082      	sub	sp, #8
 810185c:	af00      	add	r7, sp, #0
	__asm volatile
 810185e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101862:	f383 8811 	msr	BASEPRI, r3
 8101866:	f3bf 8f6f 	isb	sy
 810186a:	f3bf 8f4f 	dsb	sy
 810186e:	607b      	str	r3, [r7, #4]
}
 8101870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8101872:	f001 f87d 	bl	8102970 <xTaskIncrementTick>
 8101876:	4603      	mov	r3, r0
 8101878:	2b00      	cmp	r3, #0
 810187a:	d003      	beq.n	8101884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810187c:	4b06      	ldr	r3, [pc, #24]	@ (8101898 <xPortSysTickHandler+0x40>)
 810187e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101882:	601a      	str	r2, [r3, #0]
 8101884:	2300      	movs	r3, #0
 8101886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8101888:	683b      	ldr	r3, [r7, #0]
 810188a:	f383 8811 	msr	BASEPRI, r3
}
 810188e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8101890:	bf00      	nop
 8101892:	3708      	adds	r7, #8
 8101894:	46bd      	mov	sp, r7
 8101896:	bd80      	pop	{r7, pc}
 8101898:	e000ed04 	.word	0xe000ed04

0810189c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810189c:	b480      	push	{r7}
 810189e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 81018a0:	4b0b      	ldr	r3, [pc, #44]	@ (81018d0 <vPortSetupTimerInterrupt+0x34>)
 81018a2:	2200      	movs	r2, #0
 81018a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 81018a6:	4b0b      	ldr	r3, [pc, #44]	@ (81018d4 <vPortSetupTimerInterrupt+0x38>)
 81018a8:	2200      	movs	r2, #0
 81018aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 81018ac:	4b0a      	ldr	r3, [pc, #40]	@ (81018d8 <vPortSetupTimerInterrupt+0x3c>)
 81018ae:	681b      	ldr	r3, [r3, #0]
 81018b0:	4a0a      	ldr	r2, [pc, #40]	@ (81018dc <vPortSetupTimerInterrupt+0x40>)
 81018b2:	fba2 2303 	umull	r2, r3, r2, r3
 81018b6:	099b      	lsrs	r3, r3, #6
 81018b8:	4a09      	ldr	r2, [pc, #36]	@ (81018e0 <vPortSetupTimerInterrupt+0x44>)
 81018ba:	3b01      	subs	r3, #1
 81018bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 81018be:	4b04      	ldr	r3, [pc, #16]	@ (81018d0 <vPortSetupTimerInterrupt+0x34>)
 81018c0:	2207      	movs	r2, #7
 81018c2:	601a      	str	r2, [r3, #0]
}
 81018c4:	bf00      	nop
 81018c6:	46bd      	mov	sp, r7
 81018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018cc:	4770      	bx	lr
 81018ce:	bf00      	nop
 81018d0:	e000e010 	.word	0xe000e010
 81018d4:	e000e018 	.word	0xe000e018
 81018d8:	10000004 	.word	0x10000004
 81018dc:	10624dd3 	.word	0x10624dd3
 81018e0:	e000e014 	.word	0xe000e014

081018e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 81018e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 81018f4 <vPortEnableVFP+0x10>
 81018e8:	6801      	ldr	r1, [r0, #0]
 81018ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81018ee:	6001      	str	r1, [r0, #0]
 81018f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 81018f2:	bf00      	nop
 81018f4:	e000ed88 	.word	0xe000ed88

081018f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 81018f8:	b480      	push	{r7}
 81018fa:	b085      	sub	sp, #20
 81018fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 81018fe:	f3ef 8305 	mrs	r3, IPSR
 8101902:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8101904:	68fb      	ldr	r3, [r7, #12]
 8101906:	2b0f      	cmp	r3, #15
 8101908:	d915      	bls.n	8101936 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810190a:	4a18      	ldr	r2, [pc, #96]	@ (810196c <vPortValidateInterruptPriority+0x74>)
 810190c:	68fb      	ldr	r3, [r7, #12]
 810190e:	4413      	add	r3, r2
 8101910:	781b      	ldrb	r3, [r3, #0]
 8101912:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8101914:	4b16      	ldr	r3, [pc, #88]	@ (8101970 <vPortValidateInterruptPriority+0x78>)
 8101916:	781b      	ldrb	r3, [r3, #0]
 8101918:	7afa      	ldrb	r2, [r7, #11]
 810191a:	429a      	cmp	r2, r3
 810191c:	d20b      	bcs.n	8101936 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 810191e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101922:	f383 8811 	msr	BASEPRI, r3
 8101926:	f3bf 8f6f 	isb	sy
 810192a:	f3bf 8f4f 	dsb	sy
 810192e:	607b      	str	r3, [r7, #4]
}
 8101930:	bf00      	nop
 8101932:	bf00      	nop
 8101934:	e7fd      	b.n	8101932 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8101936:	4b0f      	ldr	r3, [pc, #60]	@ (8101974 <vPortValidateInterruptPriority+0x7c>)
 8101938:	681b      	ldr	r3, [r3, #0]
 810193a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810193e:	4b0e      	ldr	r3, [pc, #56]	@ (8101978 <vPortValidateInterruptPriority+0x80>)
 8101940:	681b      	ldr	r3, [r3, #0]
 8101942:	429a      	cmp	r2, r3
 8101944:	d90b      	bls.n	810195e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8101946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810194a:	f383 8811 	msr	BASEPRI, r3
 810194e:	f3bf 8f6f 	isb	sy
 8101952:	f3bf 8f4f 	dsb	sy
 8101956:	603b      	str	r3, [r7, #0]
}
 8101958:	bf00      	nop
 810195a:	bf00      	nop
 810195c:	e7fd      	b.n	810195a <vPortValidateInterruptPriority+0x62>
	}
 810195e:	bf00      	nop
 8101960:	3714      	adds	r7, #20
 8101962:	46bd      	mov	sp, r7
 8101964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101968:	4770      	bx	lr
 810196a:	bf00      	nop
 810196c:	e000e3f0 	.word	0xe000e3f0
 8101970:	10004320 	.word	0x10004320
 8101974:	e000ed0c 	.word	0xe000ed0c
 8101978:	10004324 	.word	0x10004324

0810197c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810197c:	b580      	push	{r7, lr}
 810197e:	b084      	sub	sp, #16
 8101980:	af00      	add	r7, sp, #0
 8101982:	6078      	str	r0, [r7, #4]
 8101984:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8101986:	687b      	ldr	r3, [r7, #4]
 8101988:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810198a:	68fb      	ldr	r3, [r7, #12]
 810198c:	2b00      	cmp	r3, #0
 810198e:	d10b      	bne.n	81019a8 <xQueueGenericReset+0x2c>
	__asm volatile
 8101990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101994:	f383 8811 	msr	BASEPRI, r3
 8101998:	f3bf 8f6f 	isb	sy
 810199c:	f3bf 8f4f 	dsb	sy
 81019a0:	60bb      	str	r3, [r7, #8]
}
 81019a2:	bf00      	nop
 81019a4:	bf00      	nop
 81019a6:	e7fd      	b.n	81019a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 81019a8:	f7ff fec6 	bl	8101738 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81019ac:	68fb      	ldr	r3, [r7, #12]
 81019ae:	681a      	ldr	r2, [r3, #0]
 81019b0:	68fb      	ldr	r3, [r7, #12]
 81019b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81019b4:	68f9      	ldr	r1, [r7, #12]
 81019b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 81019b8:	fb01 f303 	mul.w	r3, r1, r3
 81019bc:	441a      	add	r2, r3
 81019be:	68fb      	ldr	r3, [r7, #12]
 81019c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 81019c2:	68fb      	ldr	r3, [r7, #12]
 81019c4:	2200      	movs	r2, #0
 81019c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 81019c8:	68fb      	ldr	r3, [r7, #12]
 81019ca:	681a      	ldr	r2, [r3, #0]
 81019cc:	68fb      	ldr	r3, [r7, #12]
 81019ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81019d0:	68fb      	ldr	r3, [r7, #12]
 81019d2:	681a      	ldr	r2, [r3, #0]
 81019d4:	68fb      	ldr	r3, [r7, #12]
 81019d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81019d8:	3b01      	subs	r3, #1
 81019da:	68f9      	ldr	r1, [r7, #12]
 81019dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 81019de:	fb01 f303 	mul.w	r3, r1, r3
 81019e2:	441a      	add	r2, r3
 81019e4:	68fb      	ldr	r3, [r7, #12]
 81019e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 81019e8:	68fb      	ldr	r3, [r7, #12]
 81019ea:	22ff      	movs	r2, #255	@ 0xff
 81019ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 81019f0:	68fb      	ldr	r3, [r7, #12]
 81019f2:	22ff      	movs	r2, #255	@ 0xff
 81019f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 81019f8:	683b      	ldr	r3, [r7, #0]
 81019fa:	2b00      	cmp	r3, #0
 81019fc:	d114      	bne.n	8101a28 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81019fe:	68fb      	ldr	r3, [r7, #12]
 8101a00:	691b      	ldr	r3, [r3, #16]
 8101a02:	2b00      	cmp	r3, #0
 8101a04:	d01a      	beq.n	8101a3c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8101a06:	68fb      	ldr	r3, [r7, #12]
 8101a08:	3310      	adds	r3, #16
 8101a0a:	4618      	mov	r0, r3
 8101a0c:	f001 f91a 	bl	8102c44 <xTaskRemoveFromEventList>
 8101a10:	4603      	mov	r3, r0
 8101a12:	2b00      	cmp	r3, #0
 8101a14:	d012      	beq.n	8101a3c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8101a16:	4b0d      	ldr	r3, [pc, #52]	@ (8101a4c <xQueueGenericReset+0xd0>)
 8101a18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101a1c:	601a      	str	r2, [r3, #0]
 8101a1e:	f3bf 8f4f 	dsb	sy
 8101a22:	f3bf 8f6f 	isb	sy
 8101a26:	e009      	b.n	8101a3c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8101a28:	68fb      	ldr	r3, [r7, #12]
 8101a2a:	3310      	adds	r3, #16
 8101a2c:	4618      	mov	r0, r3
 8101a2e:	f7ff fc9b 	bl	8101368 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8101a32:	68fb      	ldr	r3, [r7, #12]
 8101a34:	3324      	adds	r3, #36	@ 0x24
 8101a36:	4618      	mov	r0, r3
 8101a38:	f7ff fc96 	bl	8101368 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8101a3c:	f7ff feae 	bl	810179c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8101a40:	2301      	movs	r3, #1
}
 8101a42:	4618      	mov	r0, r3
 8101a44:	3710      	adds	r7, #16
 8101a46:	46bd      	mov	sp, r7
 8101a48:	bd80      	pop	{r7, pc}
 8101a4a:	bf00      	nop
 8101a4c:	e000ed04 	.word	0xe000ed04

08101a50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8101a50:	b580      	push	{r7, lr}
 8101a52:	b08e      	sub	sp, #56	@ 0x38
 8101a54:	af02      	add	r7, sp, #8
 8101a56:	60f8      	str	r0, [r7, #12]
 8101a58:	60b9      	str	r1, [r7, #8]
 8101a5a:	607a      	str	r2, [r7, #4]
 8101a5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8101a5e:	68fb      	ldr	r3, [r7, #12]
 8101a60:	2b00      	cmp	r3, #0
 8101a62:	d10b      	bne.n	8101a7c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8101a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101a68:	f383 8811 	msr	BASEPRI, r3
 8101a6c:	f3bf 8f6f 	isb	sy
 8101a70:	f3bf 8f4f 	dsb	sy
 8101a74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8101a76:	bf00      	nop
 8101a78:	bf00      	nop
 8101a7a:	e7fd      	b.n	8101a78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8101a7c:	683b      	ldr	r3, [r7, #0]
 8101a7e:	2b00      	cmp	r3, #0
 8101a80:	d10b      	bne.n	8101a9a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8101a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101a86:	f383 8811 	msr	BASEPRI, r3
 8101a8a:	f3bf 8f6f 	isb	sy
 8101a8e:	f3bf 8f4f 	dsb	sy
 8101a92:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8101a94:	bf00      	nop
 8101a96:	bf00      	nop
 8101a98:	e7fd      	b.n	8101a96 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8101a9a:	687b      	ldr	r3, [r7, #4]
 8101a9c:	2b00      	cmp	r3, #0
 8101a9e:	d002      	beq.n	8101aa6 <xQueueGenericCreateStatic+0x56>
 8101aa0:	68bb      	ldr	r3, [r7, #8]
 8101aa2:	2b00      	cmp	r3, #0
 8101aa4:	d001      	beq.n	8101aaa <xQueueGenericCreateStatic+0x5a>
 8101aa6:	2301      	movs	r3, #1
 8101aa8:	e000      	b.n	8101aac <xQueueGenericCreateStatic+0x5c>
 8101aaa:	2300      	movs	r3, #0
 8101aac:	2b00      	cmp	r3, #0
 8101aae:	d10b      	bne.n	8101ac8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8101ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101ab4:	f383 8811 	msr	BASEPRI, r3
 8101ab8:	f3bf 8f6f 	isb	sy
 8101abc:	f3bf 8f4f 	dsb	sy
 8101ac0:	623b      	str	r3, [r7, #32]
}
 8101ac2:	bf00      	nop
 8101ac4:	bf00      	nop
 8101ac6:	e7fd      	b.n	8101ac4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8101ac8:	687b      	ldr	r3, [r7, #4]
 8101aca:	2b00      	cmp	r3, #0
 8101acc:	d102      	bne.n	8101ad4 <xQueueGenericCreateStatic+0x84>
 8101ace:	68bb      	ldr	r3, [r7, #8]
 8101ad0:	2b00      	cmp	r3, #0
 8101ad2:	d101      	bne.n	8101ad8 <xQueueGenericCreateStatic+0x88>
 8101ad4:	2301      	movs	r3, #1
 8101ad6:	e000      	b.n	8101ada <xQueueGenericCreateStatic+0x8a>
 8101ad8:	2300      	movs	r3, #0
 8101ada:	2b00      	cmp	r3, #0
 8101adc:	d10b      	bne.n	8101af6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8101ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101ae2:	f383 8811 	msr	BASEPRI, r3
 8101ae6:	f3bf 8f6f 	isb	sy
 8101aea:	f3bf 8f4f 	dsb	sy
 8101aee:	61fb      	str	r3, [r7, #28]
}
 8101af0:	bf00      	nop
 8101af2:	bf00      	nop
 8101af4:	e7fd      	b.n	8101af2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8101af6:	2350      	movs	r3, #80	@ 0x50
 8101af8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8101afa:	697b      	ldr	r3, [r7, #20]
 8101afc:	2b50      	cmp	r3, #80	@ 0x50
 8101afe:	d00b      	beq.n	8101b18 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8101b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101b04:	f383 8811 	msr	BASEPRI, r3
 8101b08:	f3bf 8f6f 	isb	sy
 8101b0c:	f3bf 8f4f 	dsb	sy
 8101b10:	61bb      	str	r3, [r7, #24]
}
 8101b12:	bf00      	nop
 8101b14:	bf00      	nop
 8101b16:	e7fd      	b.n	8101b14 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8101b18:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8101b1a:	683b      	ldr	r3, [r7, #0]
 8101b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8101b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101b20:	2b00      	cmp	r3, #0
 8101b22:	d00d      	beq.n	8101b40 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8101b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101b26:	2201      	movs	r2, #1
 8101b28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8101b2c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8101b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101b32:	9300      	str	r3, [sp, #0]
 8101b34:	4613      	mov	r3, r2
 8101b36:	687a      	ldr	r2, [r7, #4]
 8101b38:	68b9      	ldr	r1, [r7, #8]
 8101b3a:	68f8      	ldr	r0, [r7, #12]
 8101b3c:	f000 f805 	bl	8101b4a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8101b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8101b42:	4618      	mov	r0, r3
 8101b44:	3730      	adds	r7, #48	@ 0x30
 8101b46:	46bd      	mov	sp, r7
 8101b48:	bd80      	pop	{r7, pc}

08101b4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8101b4a:	b580      	push	{r7, lr}
 8101b4c:	b084      	sub	sp, #16
 8101b4e:	af00      	add	r7, sp, #0
 8101b50:	60f8      	str	r0, [r7, #12]
 8101b52:	60b9      	str	r1, [r7, #8]
 8101b54:	607a      	str	r2, [r7, #4]
 8101b56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8101b58:	68bb      	ldr	r3, [r7, #8]
 8101b5a:	2b00      	cmp	r3, #0
 8101b5c:	d103      	bne.n	8101b66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8101b5e:	69bb      	ldr	r3, [r7, #24]
 8101b60:	69ba      	ldr	r2, [r7, #24]
 8101b62:	601a      	str	r2, [r3, #0]
 8101b64:	e002      	b.n	8101b6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8101b66:	69bb      	ldr	r3, [r7, #24]
 8101b68:	687a      	ldr	r2, [r7, #4]
 8101b6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8101b6c:	69bb      	ldr	r3, [r7, #24]
 8101b6e:	68fa      	ldr	r2, [r7, #12]
 8101b70:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8101b72:	69bb      	ldr	r3, [r7, #24]
 8101b74:	68ba      	ldr	r2, [r7, #8]
 8101b76:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8101b78:	2101      	movs	r1, #1
 8101b7a:	69b8      	ldr	r0, [r7, #24]
 8101b7c:	f7ff fefe 	bl	810197c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8101b80:	69bb      	ldr	r3, [r7, #24]
 8101b82:	78fa      	ldrb	r2, [r7, #3]
 8101b84:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8101b88:	bf00      	nop
 8101b8a:	3710      	adds	r7, #16
 8101b8c:	46bd      	mov	sp, r7
 8101b8e:	bd80      	pop	{r7, pc}

08101b90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8101b90:	b580      	push	{r7, lr}
 8101b92:	b08e      	sub	sp, #56	@ 0x38
 8101b94:	af00      	add	r7, sp, #0
 8101b96:	60f8      	str	r0, [r7, #12]
 8101b98:	60b9      	str	r1, [r7, #8]
 8101b9a:	607a      	str	r2, [r7, #4]
 8101b9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8101b9e:	2300      	movs	r3, #0
 8101ba0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8101ba2:	68fb      	ldr	r3, [r7, #12]
 8101ba4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8101ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101ba8:	2b00      	cmp	r3, #0
 8101baa:	d10b      	bne.n	8101bc4 <xQueueGenericSend+0x34>
	__asm volatile
 8101bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101bb0:	f383 8811 	msr	BASEPRI, r3
 8101bb4:	f3bf 8f6f 	isb	sy
 8101bb8:	f3bf 8f4f 	dsb	sy
 8101bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8101bbe:	bf00      	nop
 8101bc0:	bf00      	nop
 8101bc2:	e7fd      	b.n	8101bc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8101bc4:	68bb      	ldr	r3, [r7, #8]
 8101bc6:	2b00      	cmp	r3, #0
 8101bc8:	d103      	bne.n	8101bd2 <xQueueGenericSend+0x42>
 8101bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101bce:	2b00      	cmp	r3, #0
 8101bd0:	d101      	bne.n	8101bd6 <xQueueGenericSend+0x46>
 8101bd2:	2301      	movs	r3, #1
 8101bd4:	e000      	b.n	8101bd8 <xQueueGenericSend+0x48>
 8101bd6:	2300      	movs	r3, #0
 8101bd8:	2b00      	cmp	r3, #0
 8101bda:	d10b      	bne.n	8101bf4 <xQueueGenericSend+0x64>
	__asm volatile
 8101bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101be0:	f383 8811 	msr	BASEPRI, r3
 8101be4:	f3bf 8f6f 	isb	sy
 8101be8:	f3bf 8f4f 	dsb	sy
 8101bec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8101bee:	bf00      	nop
 8101bf0:	bf00      	nop
 8101bf2:	e7fd      	b.n	8101bf0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8101bf4:	683b      	ldr	r3, [r7, #0]
 8101bf6:	2b02      	cmp	r3, #2
 8101bf8:	d103      	bne.n	8101c02 <xQueueGenericSend+0x72>
 8101bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8101bfe:	2b01      	cmp	r3, #1
 8101c00:	d101      	bne.n	8101c06 <xQueueGenericSend+0x76>
 8101c02:	2301      	movs	r3, #1
 8101c04:	e000      	b.n	8101c08 <xQueueGenericSend+0x78>
 8101c06:	2300      	movs	r3, #0
 8101c08:	2b00      	cmp	r3, #0
 8101c0a:	d10b      	bne.n	8101c24 <xQueueGenericSend+0x94>
	__asm volatile
 8101c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101c10:	f383 8811 	msr	BASEPRI, r3
 8101c14:	f3bf 8f6f 	isb	sy
 8101c18:	f3bf 8f4f 	dsb	sy
 8101c1c:	623b      	str	r3, [r7, #32]
}
 8101c1e:	bf00      	nop
 8101c20:	bf00      	nop
 8101c22:	e7fd      	b.n	8101c20 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8101c24:	f001 f9ce 	bl	8102fc4 <xTaskGetSchedulerState>
 8101c28:	4603      	mov	r3, r0
 8101c2a:	2b00      	cmp	r3, #0
 8101c2c:	d102      	bne.n	8101c34 <xQueueGenericSend+0xa4>
 8101c2e:	687b      	ldr	r3, [r7, #4]
 8101c30:	2b00      	cmp	r3, #0
 8101c32:	d101      	bne.n	8101c38 <xQueueGenericSend+0xa8>
 8101c34:	2301      	movs	r3, #1
 8101c36:	e000      	b.n	8101c3a <xQueueGenericSend+0xaa>
 8101c38:	2300      	movs	r3, #0
 8101c3a:	2b00      	cmp	r3, #0
 8101c3c:	d10b      	bne.n	8101c56 <xQueueGenericSend+0xc6>
	__asm volatile
 8101c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101c42:	f383 8811 	msr	BASEPRI, r3
 8101c46:	f3bf 8f6f 	isb	sy
 8101c4a:	f3bf 8f4f 	dsb	sy
 8101c4e:	61fb      	str	r3, [r7, #28]
}
 8101c50:	bf00      	nop
 8101c52:	bf00      	nop
 8101c54:	e7fd      	b.n	8101c52 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8101c56:	f7ff fd6f 	bl	8101738 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8101c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101c5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8101c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8101c62:	429a      	cmp	r2, r3
 8101c64:	d302      	bcc.n	8101c6c <xQueueGenericSend+0xdc>
 8101c66:	683b      	ldr	r3, [r7, #0]
 8101c68:	2b02      	cmp	r3, #2
 8101c6a:	d129      	bne.n	8101cc0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8101c6c:	683a      	ldr	r2, [r7, #0]
 8101c6e:	68b9      	ldr	r1, [r7, #8]
 8101c70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8101c72:	f000 fa0f 	bl	8102094 <prvCopyDataToQueue>
 8101c76:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8101c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101c7c:	2b00      	cmp	r3, #0
 8101c7e:	d010      	beq.n	8101ca2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8101c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101c82:	3324      	adds	r3, #36	@ 0x24
 8101c84:	4618      	mov	r0, r3
 8101c86:	f000 ffdd 	bl	8102c44 <xTaskRemoveFromEventList>
 8101c8a:	4603      	mov	r3, r0
 8101c8c:	2b00      	cmp	r3, #0
 8101c8e:	d013      	beq.n	8101cb8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8101c90:	4b3f      	ldr	r3, [pc, #252]	@ (8101d90 <xQueueGenericSend+0x200>)
 8101c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101c96:	601a      	str	r2, [r3, #0]
 8101c98:	f3bf 8f4f 	dsb	sy
 8101c9c:	f3bf 8f6f 	isb	sy
 8101ca0:	e00a      	b.n	8101cb8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8101ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101ca4:	2b00      	cmp	r3, #0
 8101ca6:	d007      	beq.n	8101cb8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8101ca8:	4b39      	ldr	r3, [pc, #228]	@ (8101d90 <xQueueGenericSend+0x200>)
 8101caa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101cae:	601a      	str	r2, [r3, #0]
 8101cb0:	f3bf 8f4f 	dsb	sy
 8101cb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8101cb8:	f7ff fd70 	bl	810179c <vPortExitCritical>
				return pdPASS;
 8101cbc:	2301      	movs	r3, #1
 8101cbe:	e063      	b.n	8101d88 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8101cc0:	687b      	ldr	r3, [r7, #4]
 8101cc2:	2b00      	cmp	r3, #0
 8101cc4:	d103      	bne.n	8101cce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8101cc6:	f7ff fd69 	bl	810179c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8101cca:	2300      	movs	r3, #0
 8101ccc:	e05c      	b.n	8101d88 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8101cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101cd0:	2b00      	cmp	r3, #0
 8101cd2:	d106      	bne.n	8101ce2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8101cd4:	f107 0314 	add.w	r3, r7, #20
 8101cd8:	4618      	mov	r0, r3
 8101cda:	f001 f817 	bl	8102d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8101cde:	2301      	movs	r3, #1
 8101ce0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8101ce2:	f7ff fd5b 	bl	810179c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8101ce6:	f000 fd87 	bl	81027f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8101cea:	f7ff fd25 	bl	8101738 <vPortEnterCritical>
 8101cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101cf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8101cf4:	b25b      	sxtb	r3, r3
 8101cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101cfa:	d103      	bne.n	8101d04 <xQueueGenericSend+0x174>
 8101cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101cfe:	2200      	movs	r2, #0
 8101d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8101d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101d06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8101d0a:	b25b      	sxtb	r3, r3
 8101d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101d10:	d103      	bne.n	8101d1a <xQueueGenericSend+0x18a>
 8101d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101d14:	2200      	movs	r2, #0
 8101d16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8101d1a:	f7ff fd3f 	bl	810179c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8101d1e:	1d3a      	adds	r2, r7, #4
 8101d20:	f107 0314 	add.w	r3, r7, #20
 8101d24:	4611      	mov	r1, r2
 8101d26:	4618      	mov	r0, r3
 8101d28:	f001 f806 	bl	8102d38 <xTaskCheckForTimeOut>
 8101d2c:	4603      	mov	r3, r0
 8101d2e:	2b00      	cmp	r3, #0
 8101d30:	d124      	bne.n	8101d7c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8101d32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8101d34:	f000 faa6 	bl	8102284 <prvIsQueueFull>
 8101d38:	4603      	mov	r3, r0
 8101d3a:	2b00      	cmp	r3, #0
 8101d3c:	d018      	beq.n	8101d70 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8101d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101d40:	3310      	adds	r3, #16
 8101d42:	687a      	ldr	r2, [r7, #4]
 8101d44:	4611      	mov	r1, r2
 8101d46:	4618      	mov	r0, r3
 8101d48:	f000 ff2a 	bl	8102ba0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8101d4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8101d4e:	f000 fa31 	bl	81021b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8101d52:	f000 fd5f 	bl	8102814 <xTaskResumeAll>
 8101d56:	4603      	mov	r3, r0
 8101d58:	2b00      	cmp	r3, #0
 8101d5a:	f47f af7c 	bne.w	8101c56 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8101d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8101d90 <xQueueGenericSend+0x200>)
 8101d60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101d64:	601a      	str	r2, [r3, #0]
 8101d66:	f3bf 8f4f 	dsb	sy
 8101d6a:	f3bf 8f6f 	isb	sy
 8101d6e:	e772      	b.n	8101c56 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8101d70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8101d72:	f000 fa1f 	bl	81021b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8101d76:	f000 fd4d 	bl	8102814 <xTaskResumeAll>
 8101d7a:	e76c      	b.n	8101c56 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8101d7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8101d7e:	f000 fa19 	bl	81021b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8101d82:	f000 fd47 	bl	8102814 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8101d86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8101d88:	4618      	mov	r0, r3
 8101d8a:	3738      	adds	r7, #56	@ 0x38
 8101d8c:	46bd      	mov	sp, r7
 8101d8e:	bd80      	pop	{r7, pc}
 8101d90:	e000ed04 	.word	0xe000ed04

08101d94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8101d94:	b580      	push	{r7, lr}
 8101d96:	b090      	sub	sp, #64	@ 0x40
 8101d98:	af00      	add	r7, sp, #0
 8101d9a:	60f8      	str	r0, [r7, #12]
 8101d9c:	60b9      	str	r1, [r7, #8]
 8101d9e:	607a      	str	r2, [r7, #4]
 8101da0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8101da2:	68fb      	ldr	r3, [r7, #12]
 8101da4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8101da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101da8:	2b00      	cmp	r3, #0
 8101daa:	d10b      	bne.n	8101dc4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8101dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101db0:	f383 8811 	msr	BASEPRI, r3
 8101db4:	f3bf 8f6f 	isb	sy
 8101db8:	f3bf 8f4f 	dsb	sy
 8101dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8101dbe:	bf00      	nop
 8101dc0:	bf00      	nop
 8101dc2:	e7fd      	b.n	8101dc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8101dc4:	68bb      	ldr	r3, [r7, #8]
 8101dc6:	2b00      	cmp	r3, #0
 8101dc8:	d103      	bne.n	8101dd2 <xQueueGenericSendFromISR+0x3e>
 8101dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101dce:	2b00      	cmp	r3, #0
 8101dd0:	d101      	bne.n	8101dd6 <xQueueGenericSendFromISR+0x42>
 8101dd2:	2301      	movs	r3, #1
 8101dd4:	e000      	b.n	8101dd8 <xQueueGenericSendFromISR+0x44>
 8101dd6:	2300      	movs	r3, #0
 8101dd8:	2b00      	cmp	r3, #0
 8101dda:	d10b      	bne.n	8101df4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8101ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101de0:	f383 8811 	msr	BASEPRI, r3
 8101de4:	f3bf 8f6f 	isb	sy
 8101de8:	f3bf 8f4f 	dsb	sy
 8101dec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8101dee:	bf00      	nop
 8101df0:	bf00      	nop
 8101df2:	e7fd      	b.n	8101df0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8101df4:	683b      	ldr	r3, [r7, #0]
 8101df6:	2b02      	cmp	r3, #2
 8101df8:	d103      	bne.n	8101e02 <xQueueGenericSendFromISR+0x6e>
 8101dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8101dfe:	2b01      	cmp	r3, #1
 8101e00:	d101      	bne.n	8101e06 <xQueueGenericSendFromISR+0x72>
 8101e02:	2301      	movs	r3, #1
 8101e04:	e000      	b.n	8101e08 <xQueueGenericSendFromISR+0x74>
 8101e06:	2300      	movs	r3, #0
 8101e08:	2b00      	cmp	r3, #0
 8101e0a:	d10b      	bne.n	8101e24 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8101e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101e10:	f383 8811 	msr	BASEPRI, r3
 8101e14:	f3bf 8f6f 	isb	sy
 8101e18:	f3bf 8f4f 	dsb	sy
 8101e1c:	623b      	str	r3, [r7, #32]
}
 8101e1e:	bf00      	nop
 8101e20:	bf00      	nop
 8101e22:	e7fd      	b.n	8101e20 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8101e24:	f7ff fd68 	bl	81018f8 <vPortValidateInterruptPriority>
	__asm volatile
 8101e28:	f3ef 8211 	mrs	r2, BASEPRI
 8101e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101e30:	f383 8811 	msr	BASEPRI, r3
 8101e34:	f3bf 8f6f 	isb	sy
 8101e38:	f3bf 8f4f 	dsb	sy
 8101e3c:	61fa      	str	r2, [r7, #28]
 8101e3e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8101e40:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8101e42:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8101e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101e46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8101e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8101e4c:	429a      	cmp	r2, r3
 8101e4e:	d302      	bcc.n	8101e56 <xQueueGenericSendFromISR+0xc2>
 8101e50:	683b      	ldr	r3, [r7, #0]
 8101e52:	2b02      	cmp	r3, #2
 8101e54:	d12f      	bne.n	8101eb6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8101e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101e58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8101e5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8101e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8101e66:	683a      	ldr	r2, [r7, #0]
 8101e68:	68b9      	ldr	r1, [r7, #8]
 8101e6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101e6c:	f000 f912 	bl	8102094 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8101e70:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8101e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101e78:	d112      	bne.n	8101ea0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8101e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101e7e:	2b00      	cmp	r3, #0
 8101e80:	d016      	beq.n	8101eb0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8101e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101e84:	3324      	adds	r3, #36	@ 0x24
 8101e86:	4618      	mov	r0, r3
 8101e88:	f000 fedc 	bl	8102c44 <xTaskRemoveFromEventList>
 8101e8c:	4603      	mov	r3, r0
 8101e8e:	2b00      	cmp	r3, #0
 8101e90:	d00e      	beq.n	8101eb0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8101e92:	687b      	ldr	r3, [r7, #4]
 8101e94:	2b00      	cmp	r3, #0
 8101e96:	d00b      	beq.n	8101eb0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8101e98:	687b      	ldr	r3, [r7, #4]
 8101e9a:	2201      	movs	r2, #1
 8101e9c:	601a      	str	r2, [r3, #0]
 8101e9e:	e007      	b.n	8101eb0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8101ea0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8101ea4:	3301      	adds	r3, #1
 8101ea6:	b2db      	uxtb	r3, r3
 8101ea8:	b25a      	sxtb	r2, r3
 8101eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101eac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8101eb0:	2301      	movs	r3, #1
 8101eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8101eb4:	e001      	b.n	8101eba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8101eb6:	2300      	movs	r3, #0
 8101eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8101eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101ebc:	617b      	str	r3, [r7, #20]
	__asm volatile
 8101ebe:	697b      	ldr	r3, [r7, #20]
 8101ec0:	f383 8811 	msr	BASEPRI, r3
}
 8101ec4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8101ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8101ec8:	4618      	mov	r0, r3
 8101eca:	3740      	adds	r7, #64	@ 0x40
 8101ecc:	46bd      	mov	sp, r7
 8101ece:	bd80      	pop	{r7, pc}

08101ed0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8101ed0:	b580      	push	{r7, lr}
 8101ed2:	b08c      	sub	sp, #48	@ 0x30
 8101ed4:	af00      	add	r7, sp, #0
 8101ed6:	60f8      	str	r0, [r7, #12]
 8101ed8:	60b9      	str	r1, [r7, #8]
 8101eda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8101edc:	2300      	movs	r3, #0
 8101ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8101ee0:	68fb      	ldr	r3, [r7, #12]
 8101ee2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8101ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101ee6:	2b00      	cmp	r3, #0
 8101ee8:	d10b      	bne.n	8101f02 <xQueueReceive+0x32>
	__asm volatile
 8101eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101eee:	f383 8811 	msr	BASEPRI, r3
 8101ef2:	f3bf 8f6f 	isb	sy
 8101ef6:	f3bf 8f4f 	dsb	sy
 8101efa:	623b      	str	r3, [r7, #32]
}
 8101efc:	bf00      	nop
 8101efe:	bf00      	nop
 8101f00:	e7fd      	b.n	8101efe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8101f02:	68bb      	ldr	r3, [r7, #8]
 8101f04:	2b00      	cmp	r3, #0
 8101f06:	d103      	bne.n	8101f10 <xQueueReceive+0x40>
 8101f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101f0c:	2b00      	cmp	r3, #0
 8101f0e:	d101      	bne.n	8101f14 <xQueueReceive+0x44>
 8101f10:	2301      	movs	r3, #1
 8101f12:	e000      	b.n	8101f16 <xQueueReceive+0x46>
 8101f14:	2300      	movs	r3, #0
 8101f16:	2b00      	cmp	r3, #0
 8101f18:	d10b      	bne.n	8101f32 <xQueueReceive+0x62>
	__asm volatile
 8101f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101f1e:	f383 8811 	msr	BASEPRI, r3
 8101f22:	f3bf 8f6f 	isb	sy
 8101f26:	f3bf 8f4f 	dsb	sy
 8101f2a:	61fb      	str	r3, [r7, #28]
}
 8101f2c:	bf00      	nop
 8101f2e:	bf00      	nop
 8101f30:	e7fd      	b.n	8101f2e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8101f32:	f001 f847 	bl	8102fc4 <xTaskGetSchedulerState>
 8101f36:	4603      	mov	r3, r0
 8101f38:	2b00      	cmp	r3, #0
 8101f3a:	d102      	bne.n	8101f42 <xQueueReceive+0x72>
 8101f3c:	687b      	ldr	r3, [r7, #4]
 8101f3e:	2b00      	cmp	r3, #0
 8101f40:	d101      	bne.n	8101f46 <xQueueReceive+0x76>
 8101f42:	2301      	movs	r3, #1
 8101f44:	e000      	b.n	8101f48 <xQueueReceive+0x78>
 8101f46:	2300      	movs	r3, #0
 8101f48:	2b00      	cmp	r3, #0
 8101f4a:	d10b      	bne.n	8101f64 <xQueueReceive+0x94>
	__asm volatile
 8101f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8101f50:	f383 8811 	msr	BASEPRI, r3
 8101f54:	f3bf 8f6f 	isb	sy
 8101f58:	f3bf 8f4f 	dsb	sy
 8101f5c:	61bb      	str	r3, [r7, #24]
}
 8101f5e:	bf00      	nop
 8101f60:	bf00      	nop
 8101f62:	e7fd      	b.n	8101f60 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8101f64:	f7ff fbe8 	bl	8101738 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8101f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101f6c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8101f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101f70:	2b00      	cmp	r3, #0
 8101f72:	d01f      	beq.n	8101fb4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8101f74:	68b9      	ldr	r1, [r7, #8]
 8101f76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8101f78:	f000 f8f6 	bl	8102168 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8101f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101f7e:	1e5a      	subs	r2, r3, #1
 8101f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101f82:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8101f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101f86:	691b      	ldr	r3, [r3, #16]
 8101f88:	2b00      	cmp	r3, #0
 8101f8a:	d00f      	beq.n	8101fac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8101f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101f8e:	3310      	adds	r3, #16
 8101f90:	4618      	mov	r0, r3
 8101f92:	f000 fe57 	bl	8102c44 <xTaskRemoveFromEventList>
 8101f96:	4603      	mov	r3, r0
 8101f98:	2b00      	cmp	r3, #0
 8101f9a:	d007      	beq.n	8101fac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8101f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8102090 <xQueueReceive+0x1c0>)
 8101f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8101fa2:	601a      	str	r2, [r3, #0]
 8101fa4:	f3bf 8f4f 	dsb	sy
 8101fa8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8101fac:	f7ff fbf6 	bl	810179c <vPortExitCritical>
				return pdPASS;
 8101fb0:	2301      	movs	r3, #1
 8101fb2:	e069      	b.n	8102088 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8101fb4:	687b      	ldr	r3, [r7, #4]
 8101fb6:	2b00      	cmp	r3, #0
 8101fb8:	d103      	bne.n	8101fc2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8101fba:	f7ff fbef 	bl	810179c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8101fbe:	2300      	movs	r3, #0
 8101fc0:	e062      	b.n	8102088 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8101fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101fc4:	2b00      	cmp	r3, #0
 8101fc6:	d106      	bne.n	8101fd6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8101fc8:	f107 0310 	add.w	r3, r7, #16
 8101fcc:	4618      	mov	r0, r3
 8101fce:	f000 fe9d 	bl	8102d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8101fd2:	2301      	movs	r3, #1
 8101fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8101fd6:	f7ff fbe1 	bl	810179c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8101fda:	f000 fc0d 	bl	81027f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8101fde:	f7ff fbab 	bl	8101738 <vPortEnterCritical>
 8101fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8101fe8:	b25b      	sxtb	r3, r3
 8101fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101fee:	d103      	bne.n	8101ff8 <xQueueReceive+0x128>
 8101ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101ff2:	2200      	movs	r2, #0
 8101ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8101ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8101ffe:	b25b      	sxtb	r3, r3
 8102000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102004:	d103      	bne.n	810200e <xQueueReceive+0x13e>
 8102006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102008:	2200      	movs	r2, #0
 810200a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810200e:	f7ff fbc5 	bl	810179c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8102012:	1d3a      	adds	r2, r7, #4
 8102014:	f107 0310 	add.w	r3, r7, #16
 8102018:	4611      	mov	r1, r2
 810201a:	4618      	mov	r0, r3
 810201c:	f000 fe8c 	bl	8102d38 <xTaskCheckForTimeOut>
 8102020:	4603      	mov	r3, r0
 8102022:	2b00      	cmp	r3, #0
 8102024:	d123      	bne.n	810206e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8102026:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102028:	f000 f916 	bl	8102258 <prvIsQueueEmpty>
 810202c:	4603      	mov	r3, r0
 810202e:	2b00      	cmp	r3, #0
 8102030:	d017      	beq.n	8102062 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8102032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102034:	3324      	adds	r3, #36	@ 0x24
 8102036:	687a      	ldr	r2, [r7, #4]
 8102038:	4611      	mov	r1, r2
 810203a:	4618      	mov	r0, r3
 810203c:	f000 fdb0 	bl	8102ba0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8102040:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102042:	f000 f8b7 	bl	81021b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8102046:	f000 fbe5 	bl	8102814 <xTaskResumeAll>
 810204a:	4603      	mov	r3, r0
 810204c:	2b00      	cmp	r3, #0
 810204e:	d189      	bne.n	8101f64 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8102050:	4b0f      	ldr	r3, [pc, #60]	@ (8102090 <xQueueReceive+0x1c0>)
 8102052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102056:	601a      	str	r2, [r3, #0]
 8102058:	f3bf 8f4f 	dsb	sy
 810205c:	f3bf 8f6f 	isb	sy
 8102060:	e780      	b.n	8101f64 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8102062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102064:	f000 f8a6 	bl	81021b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8102068:	f000 fbd4 	bl	8102814 <xTaskResumeAll>
 810206c:	e77a      	b.n	8101f64 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810206e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102070:	f000 f8a0 	bl	81021b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8102074:	f000 fbce 	bl	8102814 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8102078:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810207a:	f000 f8ed 	bl	8102258 <prvIsQueueEmpty>
 810207e:	4603      	mov	r3, r0
 8102080:	2b00      	cmp	r3, #0
 8102082:	f43f af6f 	beq.w	8101f64 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8102086:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8102088:	4618      	mov	r0, r3
 810208a:	3730      	adds	r7, #48	@ 0x30
 810208c:	46bd      	mov	sp, r7
 810208e:	bd80      	pop	{r7, pc}
 8102090:	e000ed04 	.word	0xe000ed04

08102094 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8102094:	b580      	push	{r7, lr}
 8102096:	b086      	sub	sp, #24
 8102098:	af00      	add	r7, sp, #0
 810209a:	60f8      	str	r0, [r7, #12]
 810209c:	60b9      	str	r1, [r7, #8]
 810209e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 81020a0:	2300      	movs	r3, #0
 81020a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81020a4:	68fb      	ldr	r3, [r7, #12]
 81020a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81020a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 81020aa:	68fb      	ldr	r3, [r7, #12]
 81020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81020ae:	2b00      	cmp	r3, #0
 81020b0:	d10d      	bne.n	81020ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81020b2:	68fb      	ldr	r3, [r7, #12]
 81020b4:	681b      	ldr	r3, [r3, #0]
 81020b6:	2b00      	cmp	r3, #0
 81020b8:	d14d      	bne.n	8102156 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 81020ba:	68fb      	ldr	r3, [r7, #12]
 81020bc:	689b      	ldr	r3, [r3, #8]
 81020be:	4618      	mov	r0, r3
 81020c0:	f000 ff9e 	bl	8103000 <xTaskPriorityDisinherit>
 81020c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 81020c6:	68fb      	ldr	r3, [r7, #12]
 81020c8:	2200      	movs	r2, #0
 81020ca:	609a      	str	r2, [r3, #8]
 81020cc:	e043      	b.n	8102156 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 81020ce:	687b      	ldr	r3, [r7, #4]
 81020d0:	2b00      	cmp	r3, #0
 81020d2:	d119      	bne.n	8102108 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81020d4:	68fb      	ldr	r3, [r7, #12]
 81020d6:	6858      	ldr	r0, [r3, #4]
 81020d8:	68fb      	ldr	r3, [r7, #12]
 81020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81020dc:	461a      	mov	r2, r3
 81020de:	68b9      	ldr	r1, [r7, #8]
 81020e0:	f001 fbd8 	bl	8103894 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81020e4:	68fb      	ldr	r3, [r7, #12]
 81020e6:	685a      	ldr	r2, [r3, #4]
 81020e8:	68fb      	ldr	r3, [r7, #12]
 81020ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81020ec:	441a      	add	r2, r3
 81020ee:	68fb      	ldr	r3, [r7, #12]
 81020f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81020f2:	68fb      	ldr	r3, [r7, #12]
 81020f4:	685a      	ldr	r2, [r3, #4]
 81020f6:	68fb      	ldr	r3, [r7, #12]
 81020f8:	689b      	ldr	r3, [r3, #8]
 81020fa:	429a      	cmp	r2, r3
 81020fc:	d32b      	bcc.n	8102156 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 81020fe:	68fb      	ldr	r3, [r7, #12]
 8102100:	681a      	ldr	r2, [r3, #0]
 8102102:	68fb      	ldr	r3, [r7, #12]
 8102104:	605a      	str	r2, [r3, #4]
 8102106:	e026      	b.n	8102156 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8102108:	68fb      	ldr	r3, [r7, #12]
 810210a:	68d8      	ldr	r0, [r3, #12]
 810210c:	68fb      	ldr	r3, [r7, #12]
 810210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102110:	461a      	mov	r2, r3
 8102112:	68b9      	ldr	r1, [r7, #8]
 8102114:	f001 fbbe 	bl	8103894 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8102118:	68fb      	ldr	r3, [r7, #12]
 810211a:	68da      	ldr	r2, [r3, #12]
 810211c:	68fb      	ldr	r3, [r7, #12]
 810211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102120:	425b      	negs	r3, r3
 8102122:	441a      	add	r2, r3
 8102124:	68fb      	ldr	r3, [r7, #12]
 8102126:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8102128:	68fb      	ldr	r3, [r7, #12]
 810212a:	68da      	ldr	r2, [r3, #12]
 810212c:	68fb      	ldr	r3, [r7, #12]
 810212e:	681b      	ldr	r3, [r3, #0]
 8102130:	429a      	cmp	r2, r3
 8102132:	d207      	bcs.n	8102144 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8102134:	68fb      	ldr	r3, [r7, #12]
 8102136:	689a      	ldr	r2, [r3, #8]
 8102138:	68fb      	ldr	r3, [r7, #12]
 810213a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810213c:	425b      	negs	r3, r3
 810213e:	441a      	add	r2, r3
 8102140:	68fb      	ldr	r3, [r7, #12]
 8102142:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8102144:	687b      	ldr	r3, [r7, #4]
 8102146:	2b02      	cmp	r3, #2
 8102148:	d105      	bne.n	8102156 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810214a:	693b      	ldr	r3, [r7, #16]
 810214c:	2b00      	cmp	r3, #0
 810214e:	d002      	beq.n	8102156 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8102150:	693b      	ldr	r3, [r7, #16]
 8102152:	3b01      	subs	r3, #1
 8102154:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8102156:	693b      	ldr	r3, [r7, #16]
 8102158:	1c5a      	adds	r2, r3, #1
 810215a:	68fb      	ldr	r3, [r7, #12]
 810215c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 810215e:	697b      	ldr	r3, [r7, #20]
}
 8102160:	4618      	mov	r0, r3
 8102162:	3718      	adds	r7, #24
 8102164:	46bd      	mov	sp, r7
 8102166:	bd80      	pop	{r7, pc}

08102168 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8102168:	b580      	push	{r7, lr}
 810216a:	b082      	sub	sp, #8
 810216c:	af00      	add	r7, sp, #0
 810216e:	6078      	str	r0, [r7, #4]
 8102170:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8102172:	687b      	ldr	r3, [r7, #4]
 8102174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102176:	2b00      	cmp	r3, #0
 8102178:	d018      	beq.n	81021ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810217a:	687b      	ldr	r3, [r7, #4]
 810217c:	68da      	ldr	r2, [r3, #12]
 810217e:	687b      	ldr	r3, [r7, #4]
 8102180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102182:	441a      	add	r2, r3
 8102184:	687b      	ldr	r3, [r7, #4]
 8102186:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8102188:	687b      	ldr	r3, [r7, #4]
 810218a:	68da      	ldr	r2, [r3, #12]
 810218c:	687b      	ldr	r3, [r7, #4]
 810218e:	689b      	ldr	r3, [r3, #8]
 8102190:	429a      	cmp	r2, r3
 8102192:	d303      	bcc.n	810219c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8102194:	687b      	ldr	r3, [r7, #4]
 8102196:	681a      	ldr	r2, [r3, #0]
 8102198:	687b      	ldr	r3, [r7, #4]
 810219a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810219c:	687b      	ldr	r3, [r7, #4]
 810219e:	68d9      	ldr	r1, [r3, #12]
 81021a0:	687b      	ldr	r3, [r7, #4]
 81021a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81021a4:	461a      	mov	r2, r3
 81021a6:	6838      	ldr	r0, [r7, #0]
 81021a8:	f001 fb74 	bl	8103894 <memcpy>
	}
}
 81021ac:	bf00      	nop
 81021ae:	3708      	adds	r7, #8
 81021b0:	46bd      	mov	sp, r7
 81021b2:	bd80      	pop	{r7, pc}

081021b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 81021b4:	b580      	push	{r7, lr}
 81021b6:	b084      	sub	sp, #16
 81021b8:	af00      	add	r7, sp, #0
 81021ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 81021bc:	f7ff fabc 	bl	8101738 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 81021c0:	687b      	ldr	r3, [r7, #4]
 81021c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81021c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81021c8:	e011      	b.n	81021ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81021ca:	687b      	ldr	r3, [r7, #4]
 81021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81021ce:	2b00      	cmp	r3, #0
 81021d0:	d012      	beq.n	81021f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81021d2:	687b      	ldr	r3, [r7, #4]
 81021d4:	3324      	adds	r3, #36	@ 0x24
 81021d6:	4618      	mov	r0, r3
 81021d8:	f000 fd34 	bl	8102c44 <xTaskRemoveFromEventList>
 81021dc:	4603      	mov	r3, r0
 81021de:	2b00      	cmp	r3, #0
 81021e0:	d001      	beq.n	81021e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 81021e2:	f000 fe0d 	bl	8102e00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 81021e6:	7bfb      	ldrb	r3, [r7, #15]
 81021e8:	3b01      	subs	r3, #1
 81021ea:	b2db      	uxtb	r3, r3
 81021ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81021ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81021f2:	2b00      	cmp	r3, #0
 81021f4:	dce9      	bgt.n	81021ca <prvUnlockQueue+0x16>
 81021f6:	e000      	b.n	81021fa <prvUnlockQueue+0x46>
					break;
 81021f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 81021fa:	687b      	ldr	r3, [r7, #4]
 81021fc:	22ff      	movs	r2, #255	@ 0xff
 81021fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8102202:	f7ff facb 	bl	810179c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8102206:	f7ff fa97 	bl	8101738 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810220a:	687b      	ldr	r3, [r7, #4]
 810220c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8102210:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8102212:	e011      	b.n	8102238 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8102214:	687b      	ldr	r3, [r7, #4]
 8102216:	691b      	ldr	r3, [r3, #16]
 8102218:	2b00      	cmp	r3, #0
 810221a:	d012      	beq.n	8102242 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810221c:	687b      	ldr	r3, [r7, #4]
 810221e:	3310      	adds	r3, #16
 8102220:	4618      	mov	r0, r3
 8102222:	f000 fd0f 	bl	8102c44 <xTaskRemoveFromEventList>
 8102226:	4603      	mov	r3, r0
 8102228:	2b00      	cmp	r3, #0
 810222a:	d001      	beq.n	8102230 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810222c:	f000 fde8 	bl	8102e00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8102230:	7bbb      	ldrb	r3, [r7, #14]
 8102232:	3b01      	subs	r3, #1
 8102234:	b2db      	uxtb	r3, r3
 8102236:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8102238:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810223c:	2b00      	cmp	r3, #0
 810223e:	dce9      	bgt.n	8102214 <prvUnlockQueue+0x60>
 8102240:	e000      	b.n	8102244 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8102242:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8102244:	687b      	ldr	r3, [r7, #4]
 8102246:	22ff      	movs	r2, #255	@ 0xff
 8102248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 810224c:	f7ff faa6 	bl	810179c <vPortExitCritical>
}
 8102250:	bf00      	nop
 8102252:	3710      	adds	r7, #16
 8102254:	46bd      	mov	sp, r7
 8102256:	bd80      	pop	{r7, pc}

08102258 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8102258:	b580      	push	{r7, lr}
 810225a:	b084      	sub	sp, #16
 810225c:	af00      	add	r7, sp, #0
 810225e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8102260:	f7ff fa6a 	bl	8101738 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8102264:	687b      	ldr	r3, [r7, #4]
 8102266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102268:	2b00      	cmp	r3, #0
 810226a:	d102      	bne.n	8102272 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810226c:	2301      	movs	r3, #1
 810226e:	60fb      	str	r3, [r7, #12]
 8102270:	e001      	b.n	8102276 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8102272:	2300      	movs	r3, #0
 8102274:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8102276:	f7ff fa91 	bl	810179c <vPortExitCritical>

	return xReturn;
 810227a:	68fb      	ldr	r3, [r7, #12]
}
 810227c:	4618      	mov	r0, r3
 810227e:	3710      	adds	r7, #16
 8102280:	46bd      	mov	sp, r7
 8102282:	bd80      	pop	{r7, pc}

08102284 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8102284:	b580      	push	{r7, lr}
 8102286:	b084      	sub	sp, #16
 8102288:	af00      	add	r7, sp, #0
 810228a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810228c:	f7ff fa54 	bl	8101738 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8102290:	687b      	ldr	r3, [r7, #4]
 8102292:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8102294:	687b      	ldr	r3, [r7, #4]
 8102296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102298:	429a      	cmp	r2, r3
 810229a:	d102      	bne.n	81022a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810229c:	2301      	movs	r3, #1
 810229e:	60fb      	str	r3, [r7, #12]
 81022a0:	e001      	b.n	81022a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 81022a2:	2300      	movs	r3, #0
 81022a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81022a6:	f7ff fa79 	bl	810179c <vPortExitCritical>

	return xReturn;
 81022aa:	68fb      	ldr	r3, [r7, #12]
}
 81022ac:	4618      	mov	r0, r3
 81022ae:	3710      	adds	r7, #16
 81022b0:	46bd      	mov	sp, r7
 81022b2:	bd80      	pop	{r7, pc}

081022b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 81022b4:	b480      	push	{r7}
 81022b6:	b085      	sub	sp, #20
 81022b8:	af00      	add	r7, sp, #0
 81022ba:	6078      	str	r0, [r7, #4]
 81022bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81022be:	2300      	movs	r3, #0
 81022c0:	60fb      	str	r3, [r7, #12]
 81022c2:	e014      	b.n	81022ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 81022c4:	4a0f      	ldr	r2, [pc, #60]	@ (8102304 <vQueueAddToRegistry+0x50>)
 81022c6:	68fb      	ldr	r3, [r7, #12]
 81022c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 81022cc:	2b00      	cmp	r3, #0
 81022ce:	d10b      	bne.n	81022e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 81022d0:	490c      	ldr	r1, [pc, #48]	@ (8102304 <vQueueAddToRegistry+0x50>)
 81022d2:	68fb      	ldr	r3, [r7, #12]
 81022d4:	683a      	ldr	r2, [r7, #0]
 81022d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 81022da:	4a0a      	ldr	r2, [pc, #40]	@ (8102304 <vQueueAddToRegistry+0x50>)
 81022dc:	68fb      	ldr	r3, [r7, #12]
 81022de:	00db      	lsls	r3, r3, #3
 81022e0:	4413      	add	r3, r2
 81022e2:	687a      	ldr	r2, [r7, #4]
 81022e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 81022e6:	e006      	b.n	81022f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81022e8:	68fb      	ldr	r3, [r7, #12]
 81022ea:	3301      	adds	r3, #1
 81022ec:	60fb      	str	r3, [r7, #12]
 81022ee:	68fb      	ldr	r3, [r7, #12]
 81022f0:	2b07      	cmp	r3, #7
 81022f2:	d9e7      	bls.n	81022c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 81022f4:	bf00      	nop
 81022f6:	bf00      	nop
 81022f8:	3714      	adds	r7, #20
 81022fa:	46bd      	mov	sp, r7
 81022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102300:	4770      	bx	lr
 8102302:	bf00      	nop
 8102304:	10004328 	.word	0x10004328

08102308 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8102308:	b580      	push	{r7, lr}
 810230a:	b086      	sub	sp, #24
 810230c:	af00      	add	r7, sp, #0
 810230e:	60f8      	str	r0, [r7, #12]
 8102310:	60b9      	str	r1, [r7, #8]
 8102312:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8102314:	68fb      	ldr	r3, [r7, #12]
 8102316:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8102318:	f7ff fa0e 	bl	8101738 <vPortEnterCritical>
 810231c:	697b      	ldr	r3, [r7, #20]
 810231e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8102322:	b25b      	sxtb	r3, r3
 8102324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102328:	d103      	bne.n	8102332 <vQueueWaitForMessageRestricted+0x2a>
 810232a:	697b      	ldr	r3, [r7, #20]
 810232c:	2200      	movs	r2, #0
 810232e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8102332:	697b      	ldr	r3, [r7, #20]
 8102334:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8102338:	b25b      	sxtb	r3, r3
 810233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810233e:	d103      	bne.n	8102348 <vQueueWaitForMessageRestricted+0x40>
 8102340:	697b      	ldr	r3, [r7, #20]
 8102342:	2200      	movs	r2, #0
 8102344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8102348:	f7ff fa28 	bl	810179c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810234c:	697b      	ldr	r3, [r7, #20]
 810234e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102350:	2b00      	cmp	r3, #0
 8102352:	d106      	bne.n	8102362 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8102354:	697b      	ldr	r3, [r7, #20]
 8102356:	3324      	adds	r3, #36	@ 0x24
 8102358:	687a      	ldr	r2, [r7, #4]
 810235a:	68b9      	ldr	r1, [r7, #8]
 810235c:	4618      	mov	r0, r3
 810235e:	f000 fc45 	bl	8102bec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8102362:	6978      	ldr	r0, [r7, #20]
 8102364:	f7ff ff26 	bl	81021b4 <prvUnlockQueue>
	}
 8102368:	bf00      	nop
 810236a:	3718      	adds	r7, #24
 810236c:	46bd      	mov	sp, r7
 810236e:	bd80      	pop	{r7, pc}

08102370 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8102370:	b580      	push	{r7, lr}
 8102372:	b08e      	sub	sp, #56	@ 0x38
 8102374:	af04      	add	r7, sp, #16
 8102376:	60f8      	str	r0, [r7, #12]
 8102378:	60b9      	str	r1, [r7, #8]
 810237a:	607a      	str	r2, [r7, #4]
 810237c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810237e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102380:	2b00      	cmp	r3, #0
 8102382:	d10b      	bne.n	810239c <xTaskCreateStatic+0x2c>
	__asm volatile
 8102384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102388:	f383 8811 	msr	BASEPRI, r3
 810238c:	f3bf 8f6f 	isb	sy
 8102390:	f3bf 8f4f 	dsb	sy
 8102394:	623b      	str	r3, [r7, #32]
}
 8102396:	bf00      	nop
 8102398:	bf00      	nop
 810239a:	e7fd      	b.n	8102398 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810239c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810239e:	2b00      	cmp	r3, #0
 81023a0:	d10b      	bne.n	81023ba <xTaskCreateStatic+0x4a>
	__asm volatile
 81023a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81023a6:	f383 8811 	msr	BASEPRI, r3
 81023aa:	f3bf 8f6f 	isb	sy
 81023ae:	f3bf 8f4f 	dsb	sy
 81023b2:	61fb      	str	r3, [r7, #28]
}
 81023b4:	bf00      	nop
 81023b6:	bf00      	nop
 81023b8:	e7fd      	b.n	81023b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 81023ba:	235c      	movs	r3, #92	@ 0x5c
 81023bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 81023be:	693b      	ldr	r3, [r7, #16]
 81023c0:	2b5c      	cmp	r3, #92	@ 0x5c
 81023c2:	d00b      	beq.n	81023dc <xTaskCreateStatic+0x6c>
	__asm volatile
 81023c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81023c8:	f383 8811 	msr	BASEPRI, r3
 81023cc:	f3bf 8f6f 	isb	sy
 81023d0:	f3bf 8f4f 	dsb	sy
 81023d4:	61bb      	str	r3, [r7, #24]
}
 81023d6:	bf00      	nop
 81023d8:	bf00      	nop
 81023da:	e7fd      	b.n	81023d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 81023dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 81023de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81023e0:	2b00      	cmp	r3, #0
 81023e2:	d01e      	beq.n	8102422 <xTaskCreateStatic+0xb2>
 81023e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81023e6:	2b00      	cmp	r3, #0
 81023e8:	d01b      	beq.n	8102422 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81023ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81023ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 81023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81023f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81023f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 81023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81023f6:	2202      	movs	r2, #2
 81023f8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 81023fc:	2300      	movs	r3, #0
 81023fe:	9303      	str	r3, [sp, #12]
 8102400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102402:	9302      	str	r3, [sp, #8]
 8102404:	f107 0314 	add.w	r3, r7, #20
 8102408:	9301      	str	r3, [sp, #4]
 810240a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810240c:	9300      	str	r3, [sp, #0]
 810240e:	683b      	ldr	r3, [r7, #0]
 8102410:	687a      	ldr	r2, [r7, #4]
 8102412:	68b9      	ldr	r1, [r7, #8]
 8102414:	68f8      	ldr	r0, [r7, #12]
 8102416:	f000 f850 	bl	81024ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810241a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810241c:	f000 f8de 	bl	81025dc <prvAddNewTaskToReadyList>
 8102420:	e001      	b.n	8102426 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8102422:	2300      	movs	r3, #0
 8102424:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8102426:	697b      	ldr	r3, [r7, #20]
	}
 8102428:	4618      	mov	r0, r3
 810242a:	3728      	adds	r7, #40	@ 0x28
 810242c:	46bd      	mov	sp, r7
 810242e:	bd80      	pop	{r7, pc}

08102430 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8102430:	b580      	push	{r7, lr}
 8102432:	b08c      	sub	sp, #48	@ 0x30
 8102434:	af04      	add	r7, sp, #16
 8102436:	60f8      	str	r0, [r7, #12]
 8102438:	60b9      	str	r1, [r7, #8]
 810243a:	603b      	str	r3, [r7, #0]
 810243c:	4613      	mov	r3, r2
 810243e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8102440:	88fb      	ldrh	r3, [r7, #6]
 8102442:	009b      	lsls	r3, r3, #2
 8102444:	4618      	mov	r0, r3
 8102446:	f7fe fda1 	bl	8100f8c <pvPortMalloc>
 810244a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810244c:	697b      	ldr	r3, [r7, #20]
 810244e:	2b00      	cmp	r3, #0
 8102450:	d00e      	beq.n	8102470 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8102452:	205c      	movs	r0, #92	@ 0x5c
 8102454:	f7fe fd9a 	bl	8100f8c <pvPortMalloc>
 8102458:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810245a:	69fb      	ldr	r3, [r7, #28]
 810245c:	2b00      	cmp	r3, #0
 810245e:	d003      	beq.n	8102468 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8102460:	69fb      	ldr	r3, [r7, #28]
 8102462:	697a      	ldr	r2, [r7, #20]
 8102464:	631a      	str	r2, [r3, #48]	@ 0x30
 8102466:	e005      	b.n	8102474 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8102468:	6978      	ldr	r0, [r7, #20]
 810246a:	f7fe fe5d 	bl	8101128 <vPortFree>
 810246e:	e001      	b.n	8102474 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8102470:	2300      	movs	r3, #0
 8102472:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8102474:	69fb      	ldr	r3, [r7, #28]
 8102476:	2b00      	cmp	r3, #0
 8102478:	d017      	beq.n	81024aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810247a:	69fb      	ldr	r3, [r7, #28]
 810247c:	2200      	movs	r2, #0
 810247e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8102482:	88fa      	ldrh	r2, [r7, #6]
 8102484:	2300      	movs	r3, #0
 8102486:	9303      	str	r3, [sp, #12]
 8102488:	69fb      	ldr	r3, [r7, #28]
 810248a:	9302      	str	r3, [sp, #8]
 810248c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810248e:	9301      	str	r3, [sp, #4]
 8102490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102492:	9300      	str	r3, [sp, #0]
 8102494:	683b      	ldr	r3, [r7, #0]
 8102496:	68b9      	ldr	r1, [r7, #8]
 8102498:	68f8      	ldr	r0, [r7, #12]
 810249a:	f000 f80e 	bl	81024ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810249e:	69f8      	ldr	r0, [r7, #28]
 81024a0:	f000 f89c 	bl	81025dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 81024a4:	2301      	movs	r3, #1
 81024a6:	61bb      	str	r3, [r7, #24]
 81024a8:	e002      	b.n	81024b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 81024aa:	f04f 33ff 	mov.w	r3, #4294967295
 81024ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 81024b0:	69bb      	ldr	r3, [r7, #24]
	}
 81024b2:	4618      	mov	r0, r3
 81024b4:	3720      	adds	r7, #32
 81024b6:	46bd      	mov	sp, r7
 81024b8:	bd80      	pop	{r7, pc}

081024ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 81024ba:	b580      	push	{r7, lr}
 81024bc:	b088      	sub	sp, #32
 81024be:	af00      	add	r7, sp, #0
 81024c0:	60f8      	str	r0, [r7, #12]
 81024c2:	60b9      	str	r1, [r7, #8]
 81024c4:	607a      	str	r2, [r7, #4]
 81024c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 81024c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81024ca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 81024cc:	687b      	ldr	r3, [r7, #4]
 81024ce:	009b      	lsls	r3, r3, #2
 81024d0:	461a      	mov	r2, r3
 81024d2:	21a5      	movs	r1, #165	@ 0xa5
 81024d4:	f001 f9b2 	bl	810383c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 81024d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81024da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81024dc:	687b      	ldr	r3, [r7, #4]
 81024de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 81024e2:	3b01      	subs	r3, #1
 81024e4:	009b      	lsls	r3, r3, #2
 81024e6:	4413      	add	r3, r2
 81024e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81024ea:	69bb      	ldr	r3, [r7, #24]
 81024ec:	f023 0307 	bic.w	r3, r3, #7
 81024f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 81024f2:	69bb      	ldr	r3, [r7, #24]
 81024f4:	f003 0307 	and.w	r3, r3, #7
 81024f8:	2b00      	cmp	r3, #0
 81024fa:	d00b      	beq.n	8102514 <prvInitialiseNewTask+0x5a>
	__asm volatile
 81024fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102500:	f383 8811 	msr	BASEPRI, r3
 8102504:	f3bf 8f6f 	isb	sy
 8102508:	f3bf 8f4f 	dsb	sy
 810250c:	617b      	str	r3, [r7, #20]
}
 810250e:	bf00      	nop
 8102510:	bf00      	nop
 8102512:	e7fd      	b.n	8102510 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8102514:	68bb      	ldr	r3, [r7, #8]
 8102516:	2b00      	cmp	r3, #0
 8102518:	d01f      	beq.n	810255a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810251a:	2300      	movs	r3, #0
 810251c:	61fb      	str	r3, [r7, #28]
 810251e:	e012      	b.n	8102546 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8102520:	68ba      	ldr	r2, [r7, #8]
 8102522:	69fb      	ldr	r3, [r7, #28]
 8102524:	4413      	add	r3, r2
 8102526:	7819      	ldrb	r1, [r3, #0]
 8102528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810252a:	69fb      	ldr	r3, [r7, #28]
 810252c:	4413      	add	r3, r2
 810252e:	3334      	adds	r3, #52	@ 0x34
 8102530:	460a      	mov	r2, r1
 8102532:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8102534:	68ba      	ldr	r2, [r7, #8]
 8102536:	69fb      	ldr	r3, [r7, #28]
 8102538:	4413      	add	r3, r2
 810253a:	781b      	ldrb	r3, [r3, #0]
 810253c:	2b00      	cmp	r3, #0
 810253e:	d006      	beq.n	810254e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8102540:	69fb      	ldr	r3, [r7, #28]
 8102542:	3301      	adds	r3, #1
 8102544:	61fb      	str	r3, [r7, #28]
 8102546:	69fb      	ldr	r3, [r7, #28]
 8102548:	2b0f      	cmp	r3, #15
 810254a:	d9e9      	bls.n	8102520 <prvInitialiseNewTask+0x66>
 810254c:	e000      	b.n	8102550 <prvInitialiseNewTask+0x96>
			{
				break;
 810254e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8102550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102552:	2200      	movs	r2, #0
 8102554:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8102558:	e003      	b.n	8102562 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810255a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810255c:	2200      	movs	r2, #0
 810255e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8102562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102564:	2b37      	cmp	r3, #55	@ 0x37
 8102566:	d901      	bls.n	810256c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8102568:	2337      	movs	r3, #55	@ 0x37
 810256a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810256c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810256e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8102570:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8102572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8102576:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8102578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810257a:	2200      	movs	r2, #0
 810257c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810257e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102580:	3304      	adds	r3, #4
 8102582:	4618      	mov	r0, r3
 8102584:	f7fe ff10 	bl	81013a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8102588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810258a:	3318      	adds	r3, #24
 810258c:	4618      	mov	r0, r3
 810258e:	f7fe ff0b 	bl	81013a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8102592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8102596:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8102598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810259a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810259e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81025a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 81025a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81025a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81025a6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81025a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81025aa:	2200      	movs	r2, #0
 81025ac:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81025ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81025b0:	2200      	movs	r2, #0
 81025b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81025b6:	683a      	ldr	r2, [r7, #0]
 81025b8:	68f9      	ldr	r1, [r7, #12]
 81025ba:	69b8      	ldr	r0, [r7, #24]
 81025bc:	f7fe ff88 	bl	81014d0 <pxPortInitialiseStack>
 81025c0:	4602      	mov	r2, r0
 81025c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81025c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81025c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81025c8:	2b00      	cmp	r3, #0
 81025ca:	d002      	beq.n	81025d2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81025cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81025ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81025d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81025d2:	bf00      	nop
 81025d4:	3720      	adds	r7, #32
 81025d6:	46bd      	mov	sp, r7
 81025d8:	bd80      	pop	{r7, pc}
	...

081025dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 81025dc:	b580      	push	{r7, lr}
 81025de:	b082      	sub	sp, #8
 81025e0:	af00      	add	r7, sp, #0
 81025e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 81025e4:	f7ff f8a8 	bl	8101738 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 81025e8:	4b2d      	ldr	r3, [pc, #180]	@ (81026a0 <prvAddNewTaskToReadyList+0xc4>)
 81025ea:	681b      	ldr	r3, [r3, #0]
 81025ec:	3301      	adds	r3, #1
 81025ee:	4a2c      	ldr	r2, [pc, #176]	@ (81026a0 <prvAddNewTaskToReadyList+0xc4>)
 81025f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 81025f2:	4b2c      	ldr	r3, [pc, #176]	@ (81026a4 <prvAddNewTaskToReadyList+0xc8>)
 81025f4:	681b      	ldr	r3, [r3, #0]
 81025f6:	2b00      	cmp	r3, #0
 81025f8:	d109      	bne.n	810260e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 81025fa:	4a2a      	ldr	r2, [pc, #168]	@ (81026a4 <prvAddNewTaskToReadyList+0xc8>)
 81025fc:	687b      	ldr	r3, [r7, #4]
 81025fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8102600:	4b27      	ldr	r3, [pc, #156]	@ (81026a0 <prvAddNewTaskToReadyList+0xc4>)
 8102602:	681b      	ldr	r3, [r3, #0]
 8102604:	2b01      	cmp	r3, #1
 8102606:	d110      	bne.n	810262a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8102608:	f000 fc1e 	bl	8102e48 <prvInitialiseTaskLists>
 810260c:	e00d      	b.n	810262a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810260e:	4b26      	ldr	r3, [pc, #152]	@ (81026a8 <prvAddNewTaskToReadyList+0xcc>)
 8102610:	681b      	ldr	r3, [r3, #0]
 8102612:	2b00      	cmp	r3, #0
 8102614:	d109      	bne.n	810262a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8102616:	4b23      	ldr	r3, [pc, #140]	@ (81026a4 <prvAddNewTaskToReadyList+0xc8>)
 8102618:	681b      	ldr	r3, [r3, #0]
 810261a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810261c:	687b      	ldr	r3, [r7, #4]
 810261e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102620:	429a      	cmp	r2, r3
 8102622:	d802      	bhi.n	810262a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8102624:	4a1f      	ldr	r2, [pc, #124]	@ (81026a4 <prvAddNewTaskToReadyList+0xc8>)
 8102626:	687b      	ldr	r3, [r7, #4]
 8102628:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810262a:	4b20      	ldr	r3, [pc, #128]	@ (81026ac <prvAddNewTaskToReadyList+0xd0>)
 810262c:	681b      	ldr	r3, [r3, #0]
 810262e:	3301      	adds	r3, #1
 8102630:	4a1e      	ldr	r2, [pc, #120]	@ (81026ac <prvAddNewTaskToReadyList+0xd0>)
 8102632:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8102634:	4b1d      	ldr	r3, [pc, #116]	@ (81026ac <prvAddNewTaskToReadyList+0xd0>)
 8102636:	681a      	ldr	r2, [r3, #0]
 8102638:	687b      	ldr	r3, [r7, #4]
 810263a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810263c:	687b      	ldr	r3, [r7, #4]
 810263e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102640:	4b1b      	ldr	r3, [pc, #108]	@ (81026b0 <prvAddNewTaskToReadyList+0xd4>)
 8102642:	681b      	ldr	r3, [r3, #0]
 8102644:	429a      	cmp	r2, r3
 8102646:	d903      	bls.n	8102650 <prvAddNewTaskToReadyList+0x74>
 8102648:	687b      	ldr	r3, [r7, #4]
 810264a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810264c:	4a18      	ldr	r2, [pc, #96]	@ (81026b0 <prvAddNewTaskToReadyList+0xd4>)
 810264e:	6013      	str	r3, [r2, #0]
 8102650:	687b      	ldr	r3, [r7, #4]
 8102652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102654:	4613      	mov	r3, r2
 8102656:	009b      	lsls	r3, r3, #2
 8102658:	4413      	add	r3, r2
 810265a:	009b      	lsls	r3, r3, #2
 810265c:	4a15      	ldr	r2, [pc, #84]	@ (81026b4 <prvAddNewTaskToReadyList+0xd8>)
 810265e:	441a      	add	r2, r3
 8102660:	687b      	ldr	r3, [r7, #4]
 8102662:	3304      	adds	r3, #4
 8102664:	4619      	mov	r1, r3
 8102666:	4610      	mov	r0, r2
 8102668:	f7fe feab 	bl	81013c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810266c:	f7ff f896 	bl	810179c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8102670:	4b0d      	ldr	r3, [pc, #52]	@ (81026a8 <prvAddNewTaskToReadyList+0xcc>)
 8102672:	681b      	ldr	r3, [r3, #0]
 8102674:	2b00      	cmp	r3, #0
 8102676:	d00e      	beq.n	8102696 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8102678:	4b0a      	ldr	r3, [pc, #40]	@ (81026a4 <prvAddNewTaskToReadyList+0xc8>)
 810267a:	681b      	ldr	r3, [r3, #0]
 810267c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810267e:	687b      	ldr	r3, [r7, #4]
 8102680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102682:	429a      	cmp	r2, r3
 8102684:	d207      	bcs.n	8102696 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8102686:	4b0c      	ldr	r3, [pc, #48]	@ (81026b8 <prvAddNewTaskToReadyList+0xdc>)
 8102688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810268c:	601a      	str	r2, [r3, #0]
 810268e:	f3bf 8f4f 	dsb	sy
 8102692:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8102696:	bf00      	nop
 8102698:	3708      	adds	r7, #8
 810269a:	46bd      	mov	sp, r7
 810269c:	bd80      	pop	{r7, pc}
 810269e:	bf00      	nop
 81026a0:	1000483c 	.word	0x1000483c
 81026a4:	10004368 	.word	0x10004368
 81026a8:	10004848 	.word	0x10004848
 81026ac:	10004858 	.word	0x10004858
 81026b0:	10004844 	.word	0x10004844
 81026b4:	1000436c 	.word	0x1000436c
 81026b8:	e000ed04 	.word	0xe000ed04

081026bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81026bc:	b580      	push	{r7, lr}
 81026be:	b084      	sub	sp, #16
 81026c0:	af00      	add	r7, sp, #0
 81026c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 81026c4:	2300      	movs	r3, #0
 81026c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 81026c8:	687b      	ldr	r3, [r7, #4]
 81026ca:	2b00      	cmp	r3, #0
 81026cc:	d018      	beq.n	8102700 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 81026ce:	4b14      	ldr	r3, [pc, #80]	@ (8102720 <vTaskDelay+0x64>)
 81026d0:	681b      	ldr	r3, [r3, #0]
 81026d2:	2b00      	cmp	r3, #0
 81026d4:	d00b      	beq.n	81026ee <vTaskDelay+0x32>
	__asm volatile
 81026d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81026da:	f383 8811 	msr	BASEPRI, r3
 81026de:	f3bf 8f6f 	isb	sy
 81026e2:	f3bf 8f4f 	dsb	sy
 81026e6:	60bb      	str	r3, [r7, #8]
}
 81026e8:	bf00      	nop
 81026ea:	bf00      	nop
 81026ec:	e7fd      	b.n	81026ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 81026ee:	f000 f883 	bl	81027f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 81026f2:	2100      	movs	r1, #0
 81026f4:	6878      	ldr	r0, [r7, #4]
 81026f6:	f000 fcf3 	bl	81030e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 81026fa:	f000 f88b 	bl	8102814 <xTaskResumeAll>
 81026fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8102700:	68fb      	ldr	r3, [r7, #12]
 8102702:	2b00      	cmp	r3, #0
 8102704:	d107      	bne.n	8102716 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8102706:	4b07      	ldr	r3, [pc, #28]	@ (8102724 <vTaskDelay+0x68>)
 8102708:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810270c:	601a      	str	r2, [r3, #0]
 810270e:	f3bf 8f4f 	dsb	sy
 8102712:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8102716:	bf00      	nop
 8102718:	3710      	adds	r7, #16
 810271a:	46bd      	mov	sp, r7
 810271c:	bd80      	pop	{r7, pc}
 810271e:	bf00      	nop
 8102720:	10004864 	.word	0x10004864
 8102724:	e000ed04 	.word	0xe000ed04

08102728 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8102728:	b580      	push	{r7, lr}
 810272a:	b08a      	sub	sp, #40	@ 0x28
 810272c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810272e:	2300      	movs	r3, #0
 8102730:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8102732:	2300      	movs	r3, #0
 8102734:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8102736:	463a      	mov	r2, r7
 8102738:	1d39      	adds	r1, r7, #4
 810273a:	f107 0308 	add.w	r3, r7, #8
 810273e:	4618      	mov	r0, r3
 8102740:	f7fe fbf0 	bl	8100f24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8102744:	6839      	ldr	r1, [r7, #0]
 8102746:	687b      	ldr	r3, [r7, #4]
 8102748:	68ba      	ldr	r2, [r7, #8]
 810274a:	9202      	str	r2, [sp, #8]
 810274c:	9301      	str	r3, [sp, #4]
 810274e:	2300      	movs	r3, #0
 8102750:	9300      	str	r3, [sp, #0]
 8102752:	2300      	movs	r3, #0
 8102754:	460a      	mov	r2, r1
 8102756:	4922      	ldr	r1, [pc, #136]	@ (81027e0 <vTaskStartScheduler+0xb8>)
 8102758:	4822      	ldr	r0, [pc, #136]	@ (81027e4 <vTaskStartScheduler+0xbc>)
 810275a:	f7ff fe09 	bl	8102370 <xTaskCreateStatic>
 810275e:	4603      	mov	r3, r0
 8102760:	4a21      	ldr	r2, [pc, #132]	@ (81027e8 <vTaskStartScheduler+0xc0>)
 8102762:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8102764:	4b20      	ldr	r3, [pc, #128]	@ (81027e8 <vTaskStartScheduler+0xc0>)
 8102766:	681b      	ldr	r3, [r3, #0]
 8102768:	2b00      	cmp	r3, #0
 810276a:	d002      	beq.n	8102772 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810276c:	2301      	movs	r3, #1
 810276e:	617b      	str	r3, [r7, #20]
 8102770:	e001      	b.n	8102776 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8102772:	2300      	movs	r3, #0
 8102774:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8102776:	697b      	ldr	r3, [r7, #20]
 8102778:	2b01      	cmp	r3, #1
 810277a:	d102      	bne.n	8102782 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810277c:	f000 fd04 	bl	8103188 <xTimerCreateTimerTask>
 8102780:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8102782:	697b      	ldr	r3, [r7, #20]
 8102784:	2b01      	cmp	r3, #1
 8102786:	d116      	bne.n	81027b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8102788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810278c:	f383 8811 	msr	BASEPRI, r3
 8102790:	f3bf 8f6f 	isb	sy
 8102794:	f3bf 8f4f 	dsb	sy
 8102798:	613b      	str	r3, [r7, #16]
}
 810279a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810279c:	4b13      	ldr	r3, [pc, #76]	@ (81027ec <vTaskStartScheduler+0xc4>)
 810279e:	f04f 32ff 	mov.w	r2, #4294967295
 81027a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 81027a4:	4b12      	ldr	r3, [pc, #72]	@ (81027f0 <vTaskStartScheduler+0xc8>)
 81027a6:	2201      	movs	r2, #1
 81027a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 81027aa:	4b12      	ldr	r3, [pc, #72]	@ (81027f4 <vTaskStartScheduler+0xcc>)
 81027ac:	2200      	movs	r2, #0
 81027ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 81027b0:	f7fe ff1e 	bl	81015f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 81027b4:	e00f      	b.n	81027d6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 81027b6:	697b      	ldr	r3, [r7, #20]
 81027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81027bc:	d10b      	bne.n	81027d6 <vTaskStartScheduler+0xae>
	__asm volatile
 81027be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81027c2:	f383 8811 	msr	BASEPRI, r3
 81027c6:	f3bf 8f6f 	isb	sy
 81027ca:	f3bf 8f4f 	dsb	sy
 81027ce:	60fb      	str	r3, [r7, #12]
}
 81027d0:	bf00      	nop
 81027d2:	bf00      	nop
 81027d4:	e7fd      	b.n	81027d2 <vTaskStartScheduler+0xaa>
}
 81027d6:	bf00      	nop
 81027d8:	3718      	adds	r7, #24
 81027da:	46bd      	mov	sp, r7
 81027dc:	bd80      	pop	{r7, pc}
 81027de:	bf00      	nop
 81027e0:	081038d4 	.word	0x081038d4
 81027e4:	08102e19 	.word	0x08102e19
 81027e8:	10004860 	.word	0x10004860
 81027ec:	1000485c 	.word	0x1000485c
 81027f0:	10004848 	.word	0x10004848
 81027f4:	10004840 	.word	0x10004840

081027f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 81027f8:	b480      	push	{r7}
 81027fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 81027fc:	4b04      	ldr	r3, [pc, #16]	@ (8102810 <vTaskSuspendAll+0x18>)
 81027fe:	681b      	ldr	r3, [r3, #0]
 8102800:	3301      	adds	r3, #1
 8102802:	4a03      	ldr	r2, [pc, #12]	@ (8102810 <vTaskSuspendAll+0x18>)
 8102804:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8102806:	bf00      	nop
 8102808:	46bd      	mov	sp, r7
 810280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810280e:	4770      	bx	lr
 8102810:	10004864 	.word	0x10004864

08102814 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8102814:	b580      	push	{r7, lr}
 8102816:	b084      	sub	sp, #16
 8102818:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810281a:	2300      	movs	r3, #0
 810281c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810281e:	2300      	movs	r3, #0
 8102820:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8102822:	4b42      	ldr	r3, [pc, #264]	@ (810292c <xTaskResumeAll+0x118>)
 8102824:	681b      	ldr	r3, [r3, #0]
 8102826:	2b00      	cmp	r3, #0
 8102828:	d10b      	bne.n	8102842 <xTaskResumeAll+0x2e>
	__asm volatile
 810282a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810282e:	f383 8811 	msr	BASEPRI, r3
 8102832:	f3bf 8f6f 	isb	sy
 8102836:	f3bf 8f4f 	dsb	sy
 810283a:	603b      	str	r3, [r7, #0]
}
 810283c:	bf00      	nop
 810283e:	bf00      	nop
 8102840:	e7fd      	b.n	810283e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8102842:	f7fe ff79 	bl	8101738 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8102846:	4b39      	ldr	r3, [pc, #228]	@ (810292c <xTaskResumeAll+0x118>)
 8102848:	681b      	ldr	r3, [r3, #0]
 810284a:	3b01      	subs	r3, #1
 810284c:	4a37      	ldr	r2, [pc, #220]	@ (810292c <xTaskResumeAll+0x118>)
 810284e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8102850:	4b36      	ldr	r3, [pc, #216]	@ (810292c <xTaskResumeAll+0x118>)
 8102852:	681b      	ldr	r3, [r3, #0]
 8102854:	2b00      	cmp	r3, #0
 8102856:	d162      	bne.n	810291e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8102858:	4b35      	ldr	r3, [pc, #212]	@ (8102930 <xTaskResumeAll+0x11c>)
 810285a:	681b      	ldr	r3, [r3, #0]
 810285c:	2b00      	cmp	r3, #0
 810285e:	d05e      	beq.n	810291e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8102860:	e02f      	b.n	81028c2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102862:	4b34      	ldr	r3, [pc, #208]	@ (8102934 <xTaskResumeAll+0x120>)
 8102864:	68db      	ldr	r3, [r3, #12]
 8102866:	68db      	ldr	r3, [r3, #12]
 8102868:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810286a:	68fb      	ldr	r3, [r7, #12]
 810286c:	3318      	adds	r3, #24
 810286e:	4618      	mov	r0, r3
 8102870:	f7fe fe04 	bl	810147c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8102874:	68fb      	ldr	r3, [r7, #12]
 8102876:	3304      	adds	r3, #4
 8102878:	4618      	mov	r0, r3
 810287a:	f7fe fdff 	bl	810147c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810287e:	68fb      	ldr	r3, [r7, #12]
 8102880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102882:	4b2d      	ldr	r3, [pc, #180]	@ (8102938 <xTaskResumeAll+0x124>)
 8102884:	681b      	ldr	r3, [r3, #0]
 8102886:	429a      	cmp	r2, r3
 8102888:	d903      	bls.n	8102892 <xTaskResumeAll+0x7e>
 810288a:	68fb      	ldr	r3, [r7, #12]
 810288c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810288e:	4a2a      	ldr	r2, [pc, #168]	@ (8102938 <xTaskResumeAll+0x124>)
 8102890:	6013      	str	r3, [r2, #0]
 8102892:	68fb      	ldr	r3, [r7, #12]
 8102894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102896:	4613      	mov	r3, r2
 8102898:	009b      	lsls	r3, r3, #2
 810289a:	4413      	add	r3, r2
 810289c:	009b      	lsls	r3, r3, #2
 810289e:	4a27      	ldr	r2, [pc, #156]	@ (810293c <xTaskResumeAll+0x128>)
 81028a0:	441a      	add	r2, r3
 81028a2:	68fb      	ldr	r3, [r7, #12]
 81028a4:	3304      	adds	r3, #4
 81028a6:	4619      	mov	r1, r3
 81028a8:	4610      	mov	r0, r2
 81028aa:	f7fe fd8a 	bl	81013c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81028ae:	68fb      	ldr	r3, [r7, #12]
 81028b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81028b2:	4b23      	ldr	r3, [pc, #140]	@ (8102940 <xTaskResumeAll+0x12c>)
 81028b4:	681b      	ldr	r3, [r3, #0]
 81028b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81028b8:	429a      	cmp	r2, r3
 81028ba:	d302      	bcc.n	81028c2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 81028bc:	4b21      	ldr	r3, [pc, #132]	@ (8102944 <xTaskResumeAll+0x130>)
 81028be:	2201      	movs	r2, #1
 81028c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81028c2:	4b1c      	ldr	r3, [pc, #112]	@ (8102934 <xTaskResumeAll+0x120>)
 81028c4:	681b      	ldr	r3, [r3, #0]
 81028c6:	2b00      	cmp	r3, #0
 81028c8:	d1cb      	bne.n	8102862 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 81028ca:	68fb      	ldr	r3, [r7, #12]
 81028cc:	2b00      	cmp	r3, #0
 81028ce:	d001      	beq.n	81028d4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 81028d0:	f000 fb58 	bl	8102f84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 81028d4:	4b1c      	ldr	r3, [pc, #112]	@ (8102948 <xTaskResumeAll+0x134>)
 81028d6:	681b      	ldr	r3, [r3, #0]
 81028d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 81028da:	687b      	ldr	r3, [r7, #4]
 81028dc:	2b00      	cmp	r3, #0
 81028de:	d010      	beq.n	8102902 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 81028e0:	f000 f846 	bl	8102970 <xTaskIncrementTick>
 81028e4:	4603      	mov	r3, r0
 81028e6:	2b00      	cmp	r3, #0
 81028e8:	d002      	beq.n	81028f0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 81028ea:	4b16      	ldr	r3, [pc, #88]	@ (8102944 <xTaskResumeAll+0x130>)
 81028ec:	2201      	movs	r2, #1
 81028ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 81028f0:	687b      	ldr	r3, [r7, #4]
 81028f2:	3b01      	subs	r3, #1
 81028f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 81028f6:	687b      	ldr	r3, [r7, #4]
 81028f8:	2b00      	cmp	r3, #0
 81028fa:	d1f1      	bne.n	81028e0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 81028fc:	4b12      	ldr	r3, [pc, #72]	@ (8102948 <xTaskResumeAll+0x134>)
 81028fe:	2200      	movs	r2, #0
 8102900:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8102902:	4b10      	ldr	r3, [pc, #64]	@ (8102944 <xTaskResumeAll+0x130>)
 8102904:	681b      	ldr	r3, [r3, #0]
 8102906:	2b00      	cmp	r3, #0
 8102908:	d009      	beq.n	810291e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810290a:	2301      	movs	r3, #1
 810290c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810290e:	4b0f      	ldr	r3, [pc, #60]	@ (810294c <xTaskResumeAll+0x138>)
 8102910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102914:	601a      	str	r2, [r3, #0]
 8102916:	f3bf 8f4f 	dsb	sy
 810291a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810291e:	f7fe ff3d 	bl	810179c <vPortExitCritical>

	return xAlreadyYielded;
 8102922:	68bb      	ldr	r3, [r7, #8]
}
 8102924:	4618      	mov	r0, r3
 8102926:	3710      	adds	r7, #16
 8102928:	46bd      	mov	sp, r7
 810292a:	bd80      	pop	{r7, pc}
 810292c:	10004864 	.word	0x10004864
 8102930:	1000483c 	.word	0x1000483c
 8102934:	100047fc 	.word	0x100047fc
 8102938:	10004844 	.word	0x10004844
 810293c:	1000436c 	.word	0x1000436c
 8102940:	10004368 	.word	0x10004368
 8102944:	10004850 	.word	0x10004850
 8102948:	1000484c 	.word	0x1000484c
 810294c:	e000ed04 	.word	0xe000ed04

08102950 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8102950:	b480      	push	{r7}
 8102952:	b083      	sub	sp, #12
 8102954:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8102956:	4b05      	ldr	r3, [pc, #20]	@ (810296c <xTaskGetTickCount+0x1c>)
 8102958:	681b      	ldr	r3, [r3, #0]
 810295a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810295c:	687b      	ldr	r3, [r7, #4]
}
 810295e:	4618      	mov	r0, r3
 8102960:	370c      	adds	r7, #12
 8102962:	46bd      	mov	sp, r7
 8102964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102968:	4770      	bx	lr
 810296a:	bf00      	nop
 810296c:	10004840 	.word	0x10004840

08102970 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8102970:	b580      	push	{r7, lr}
 8102972:	b086      	sub	sp, #24
 8102974:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8102976:	2300      	movs	r3, #0
 8102978:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810297a:	4b4f      	ldr	r3, [pc, #316]	@ (8102ab8 <xTaskIncrementTick+0x148>)
 810297c:	681b      	ldr	r3, [r3, #0]
 810297e:	2b00      	cmp	r3, #0
 8102980:	f040 8090 	bne.w	8102aa4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8102984:	4b4d      	ldr	r3, [pc, #308]	@ (8102abc <xTaskIncrementTick+0x14c>)
 8102986:	681b      	ldr	r3, [r3, #0]
 8102988:	3301      	adds	r3, #1
 810298a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810298c:	4a4b      	ldr	r2, [pc, #300]	@ (8102abc <xTaskIncrementTick+0x14c>)
 810298e:	693b      	ldr	r3, [r7, #16]
 8102990:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8102992:	693b      	ldr	r3, [r7, #16]
 8102994:	2b00      	cmp	r3, #0
 8102996:	d121      	bne.n	81029dc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8102998:	4b49      	ldr	r3, [pc, #292]	@ (8102ac0 <xTaskIncrementTick+0x150>)
 810299a:	681b      	ldr	r3, [r3, #0]
 810299c:	681b      	ldr	r3, [r3, #0]
 810299e:	2b00      	cmp	r3, #0
 81029a0:	d00b      	beq.n	81029ba <xTaskIncrementTick+0x4a>
	__asm volatile
 81029a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81029a6:	f383 8811 	msr	BASEPRI, r3
 81029aa:	f3bf 8f6f 	isb	sy
 81029ae:	f3bf 8f4f 	dsb	sy
 81029b2:	603b      	str	r3, [r7, #0]
}
 81029b4:	bf00      	nop
 81029b6:	bf00      	nop
 81029b8:	e7fd      	b.n	81029b6 <xTaskIncrementTick+0x46>
 81029ba:	4b41      	ldr	r3, [pc, #260]	@ (8102ac0 <xTaskIncrementTick+0x150>)
 81029bc:	681b      	ldr	r3, [r3, #0]
 81029be:	60fb      	str	r3, [r7, #12]
 81029c0:	4b40      	ldr	r3, [pc, #256]	@ (8102ac4 <xTaskIncrementTick+0x154>)
 81029c2:	681b      	ldr	r3, [r3, #0]
 81029c4:	4a3e      	ldr	r2, [pc, #248]	@ (8102ac0 <xTaskIncrementTick+0x150>)
 81029c6:	6013      	str	r3, [r2, #0]
 81029c8:	4a3e      	ldr	r2, [pc, #248]	@ (8102ac4 <xTaskIncrementTick+0x154>)
 81029ca:	68fb      	ldr	r3, [r7, #12]
 81029cc:	6013      	str	r3, [r2, #0]
 81029ce:	4b3e      	ldr	r3, [pc, #248]	@ (8102ac8 <xTaskIncrementTick+0x158>)
 81029d0:	681b      	ldr	r3, [r3, #0]
 81029d2:	3301      	adds	r3, #1
 81029d4:	4a3c      	ldr	r2, [pc, #240]	@ (8102ac8 <xTaskIncrementTick+0x158>)
 81029d6:	6013      	str	r3, [r2, #0]
 81029d8:	f000 fad4 	bl	8102f84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 81029dc:	4b3b      	ldr	r3, [pc, #236]	@ (8102acc <xTaskIncrementTick+0x15c>)
 81029de:	681b      	ldr	r3, [r3, #0]
 81029e0:	693a      	ldr	r2, [r7, #16]
 81029e2:	429a      	cmp	r2, r3
 81029e4:	d349      	bcc.n	8102a7a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81029e6:	4b36      	ldr	r3, [pc, #216]	@ (8102ac0 <xTaskIncrementTick+0x150>)
 81029e8:	681b      	ldr	r3, [r3, #0]
 81029ea:	681b      	ldr	r3, [r3, #0]
 81029ec:	2b00      	cmp	r3, #0
 81029ee:	d104      	bne.n	81029fa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81029f0:	4b36      	ldr	r3, [pc, #216]	@ (8102acc <xTaskIncrementTick+0x15c>)
 81029f2:	f04f 32ff 	mov.w	r2, #4294967295
 81029f6:	601a      	str	r2, [r3, #0]
					break;
 81029f8:	e03f      	b.n	8102a7a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81029fa:	4b31      	ldr	r3, [pc, #196]	@ (8102ac0 <xTaskIncrementTick+0x150>)
 81029fc:	681b      	ldr	r3, [r3, #0]
 81029fe:	68db      	ldr	r3, [r3, #12]
 8102a00:	68db      	ldr	r3, [r3, #12]
 8102a02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8102a04:	68bb      	ldr	r3, [r7, #8]
 8102a06:	685b      	ldr	r3, [r3, #4]
 8102a08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8102a0a:	693a      	ldr	r2, [r7, #16]
 8102a0c:	687b      	ldr	r3, [r7, #4]
 8102a0e:	429a      	cmp	r2, r3
 8102a10:	d203      	bcs.n	8102a1a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8102a12:	4a2e      	ldr	r2, [pc, #184]	@ (8102acc <xTaskIncrementTick+0x15c>)
 8102a14:	687b      	ldr	r3, [r7, #4]
 8102a16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8102a18:	e02f      	b.n	8102a7a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8102a1a:	68bb      	ldr	r3, [r7, #8]
 8102a1c:	3304      	adds	r3, #4
 8102a1e:	4618      	mov	r0, r3
 8102a20:	f7fe fd2c 	bl	810147c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8102a24:	68bb      	ldr	r3, [r7, #8]
 8102a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102a28:	2b00      	cmp	r3, #0
 8102a2a:	d004      	beq.n	8102a36 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8102a2c:	68bb      	ldr	r3, [r7, #8]
 8102a2e:	3318      	adds	r3, #24
 8102a30:	4618      	mov	r0, r3
 8102a32:	f7fe fd23 	bl	810147c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8102a36:	68bb      	ldr	r3, [r7, #8]
 8102a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102a3a:	4b25      	ldr	r3, [pc, #148]	@ (8102ad0 <xTaskIncrementTick+0x160>)
 8102a3c:	681b      	ldr	r3, [r3, #0]
 8102a3e:	429a      	cmp	r2, r3
 8102a40:	d903      	bls.n	8102a4a <xTaskIncrementTick+0xda>
 8102a42:	68bb      	ldr	r3, [r7, #8]
 8102a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102a46:	4a22      	ldr	r2, [pc, #136]	@ (8102ad0 <xTaskIncrementTick+0x160>)
 8102a48:	6013      	str	r3, [r2, #0]
 8102a4a:	68bb      	ldr	r3, [r7, #8]
 8102a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102a4e:	4613      	mov	r3, r2
 8102a50:	009b      	lsls	r3, r3, #2
 8102a52:	4413      	add	r3, r2
 8102a54:	009b      	lsls	r3, r3, #2
 8102a56:	4a1f      	ldr	r2, [pc, #124]	@ (8102ad4 <xTaskIncrementTick+0x164>)
 8102a58:	441a      	add	r2, r3
 8102a5a:	68bb      	ldr	r3, [r7, #8]
 8102a5c:	3304      	adds	r3, #4
 8102a5e:	4619      	mov	r1, r3
 8102a60:	4610      	mov	r0, r2
 8102a62:	f7fe fcae 	bl	81013c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8102a66:	68bb      	ldr	r3, [r7, #8]
 8102a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8102ad8 <xTaskIncrementTick+0x168>)
 8102a6c:	681b      	ldr	r3, [r3, #0]
 8102a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102a70:	429a      	cmp	r2, r3
 8102a72:	d3b8      	bcc.n	81029e6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8102a74:	2301      	movs	r3, #1
 8102a76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8102a78:	e7b5      	b.n	81029e6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8102a7a:	4b17      	ldr	r3, [pc, #92]	@ (8102ad8 <xTaskIncrementTick+0x168>)
 8102a7c:	681b      	ldr	r3, [r3, #0]
 8102a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102a80:	4914      	ldr	r1, [pc, #80]	@ (8102ad4 <xTaskIncrementTick+0x164>)
 8102a82:	4613      	mov	r3, r2
 8102a84:	009b      	lsls	r3, r3, #2
 8102a86:	4413      	add	r3, r2
 8102a88:	009b      	lsls	r3, r3, #2
 8102a8a:	440b      	add	r3, r1
 8102a8c:	681b      	ldr	r3, [r3, #0]
 8102a8e:	2b01      	cmp	r3, #1
 8102a90:	d901      	bls.n	8102a96 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8102a92:	2301      	movs	r3, #1
 8102a94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8102a96:	4b11      	ldr	r3, [pc, #68]	@ (8102adc <xTaskIncrementTick+0x16c>)
 8102a98:	681b      	ldr	r3, [r3, #0]
 8102a9a:	2b00      	cmp	r3, #0
 8102a9c:	d007      	beq.n	8102aae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8102a9e:	2301      	movs	r3, #1
 8102aa0:	617b      	str	r3, [r7, #20]
 8102aa2:	e004      	b.n	8102aae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8102aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8102ae0 <xTaskIncrementTick+0x170>)
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	3301      	adds	r3, #1
 8102aaa:	4a0d      	ldr	r2, [pc, #52]	@ (8102ae0 <xTaskIncrementTick+0x170>)
 8102aac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8102aae:	697b      	ldr	r3, [r7, #20]
}
 8102ab0:	4618      	mov	r0, r3
 8102ab2:	3718      	adds	r7, #24
 8102ab4:	46bd      	mov	sp, r7
 8102ab6:	bd80      	pop	{r7, pc}
 8102ab8:	10004864 	.word	0x10004864
 8102abc:	10004840 	.word	0x10004840
 8102ac0:	100047f4 	.word	0x100047f4
 8102ac4:	100047f8 	.word	0x100047f8
 8102ac8:	10004854 	.word	0x10004854
 8102acc:	1000485c 	.word	0x1000485c
 8102ad0:	10004844 	.word	0x10004844
 8102ad4:	1000436c 	.word	0x1000436c
 8102ad8:	10004368 	.word	0x10004368
 8102adc:	10004850 	.word	0x10004850
 8102ae0:	1000484c 	.word	0x1000484c

08102ae4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8102ae4:	b480      	push	{r7}
 8102ae6:	b085      	sub	sp, #20
 8102ae8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8102aea:	4b28      	ldr	r3, [pc, #160]	@ (8102b8c <vTaskSwitchContext+0xa8>)
 8102aec:	681b      	ldr	r3, [r3, #0]
 8102aee:	2b00      	cmp	r3, #0
 8102af0:	d003      	beq.n	8102afa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8102af2:	4b27      	ldr	r3, [pc, #156]	@ (8102b90 <vTaskSwitchContext+0xac>)
 8102af4:	2201      	movs	r2, #1
 8102af6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8102af8:	e042      	b.n	8102b80 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8102afa:	4b25      	ldr	r3, [pc, #148]	@ (8102b90 <vTaskSwitchContext+0xac>)
 8102afc:	2200      	movs	r2, #0
 8102afe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102b00:	4b24      	ldr	r3, [pc, #144]	@ (8102b94 <vTaskSwitchContext+0xb0>)
 8102b02:	681b      	ldr	r3, [r3, #0]
 8102b04:	60fb      	str	r3, [r7, #12]
 8102b06:	e011      	b.n	8102b2c <vTaskSwitchContext+0x48>
 8102b08:	68fb      	ldr	r3, [r7, #12]
 8102b0a:	2b00      	cmp	r3, #0
 8102b0c:	d10b      	bne.n	8102b26 <vTaskSwitchContext+0x42>
	__asm volatile
 8102b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102b12:	f383 8811 	msr	BASEPRI, r3
 8102b16:	f3bf 8f6f 	isb	sy
 8102b1a:	f3bf 8f4f 	dsb	sy
 8102b1e:	607b      	str	r3, [r7, #4]
}
 8102b20:	bf00      	nop
 8102b22:	bf00      	nop
 8102b24:	e7fd      	b.n	8102b22 <vTaskSwitchContext+0x3e>
 8102b26:	68fb      	ldr	r3, [r7, #12]
 8102b28:	3b01      	subs	r3, #1
 8102b2a:	60fb      	str	r3, [r7, #12]
 8102b2c:	491a      	ldr	r1, [pc, #104]	@ (8102b98 <vTaskSwitchContext+0xb4>)
 8102b2e:	68fa      	ldr	r2, [r7, #12]
 8102b30:	4613      	mov	r3, r2
 8102b32:	009b      	lsls	r3, r3, #2
 8102b34:	4413      	add	r3, r2
 8102b36:	009b      	lsls	r3, r3, #2
 8102b38:	440b      	add	r3, r1
 8102b3a:	681b      	ldr	r3, [r3, #0]
 8102b3c:	2b00      	cmp	r3, #0
 8102b3e:	d0e3      	beq.n	8102b08 <vTaskSwitchContext+0x24>
 8102b40:	68fa      	ldr	r2, [r7, #12]
 8102b42:	4613      	mov	r3, r2
 8102b44:	009b      	lsls	r3, r3, #2
 8102b46:	4413      	add	r3, r2
 8102b48:	009b      	lsls	r3, r3, #2
 8102b4a:	4a13      	ldr	r2, [pc, #76]	@ (8102b98 <vTaskSwitchContext+0xb4>)
 8102b4c:	4413      	add	r3, r2
 8102b4e:	60bb      	str	r3, [r7, #8]
 8102b50:	68bb      	ldr	r3, [r7, #8]
 8102b52:	685b      	ldr	r3, [r3, #4]
 8102b54:	685a      	ldr	r2, [r3, #4]
 8102b56:	68bb      	ldr	r3, [r7, #8]
 8102b58:	605a      	str	r2, [r3, #4]
 8102b5a:	68bb      	ldr	r3, [r7, #8]
 8102b5c:	685a      	ldr	r2, [r3, #4]
 8102b5e:	68bb      	ldr	r3, [r7, #8]
 8102b60:	3308      	adds	r3, #8
 8102b62:	429a      	cmp	r2, r3
 8102b64:	d104      	bne.n	8102b70 <vTaskSwitchContext+0x8c>
 8102b66:	68bb      	ldr	r3, [r7, #8]
 8102b68:	685b      	ldr	r3, [r3, #4]
 8102b6a:	685a      	ldr	r2, [r3, #4]
 8102b6c:	68bb      	ldr	r3, [r7, #8]
 8102b6e:	605a      	str	r2, [r3, #4]
 8102b70:	68bb      	ldr	r3, [r7, #8]
 8102b72:	685b      	ldr	r3, [r3, #4]
 8102b74:	68db      	ldr	r3, [r3, #12]
 8102b76:	4a09      	ldr	r2, [pc, #36]	@ (8102b9c <vTaskSwitchContext+0xb8>)
 8102b78:	6013      	str	r3, [r2, #0]
 8102b7a:	4a06      	ldr	r2, [pc, #24]	@ (8102b94 <vTaskSwitchContext+0xb0>)
 8102b7c:	68fb      	ldr	r3, [r7, #12]
 8102b7e:	6013      	str	r3, [r2, #0]
}
 8102b80:	bf00      	nop
 8102b82:	3714      	adds	r7, #20
 8102b84:	46bd      	mov	sp, r7
 8102b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b8a:	4770      	bx	lr
 8102b8c:	10004864 	.word	0x10004864
 8102b90:	10004850 	.word	0x10004850
 8102b94:	10004844 	.word	0x10004844
 8102b98:	1000436c 	.word	0x1000436c
 8102b9c:	10004368 	.word	0x10004368

08102ba0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8102ba0:	b580      	push	{r7, lr}
 8102ba2:	b084      	sub	sp, #16
 8102ba4:	af00      	add	r7, sp, #0
 8102ba6:	6078      	str	r0, [r7, #4]
 8102ba8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8102baa:	687b      	ldr	r3, [r7, #4]
 8102bac:	2b00      	cmp	r3, #0
 8102bae:	d10b      	bne.n	8102bc8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8102bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102bb4:	f383 8811 	msr	BASEPRI, r3
 8102bb8:	f3bf 8f6f 	isb	sy
 8102bbc:	f3bf 8f4f 	dsb	sy
 8102bc0:	60fb      	str	r3, [r7, #12]
}
 8102bc2:	bf00      	nop
 8102bc4:	bf00      	nop
 8102bc6:	e7fd      	b.n	8102bc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8102bc8:	4b07      	ldr	r3, [pc, #28]	@ (8102be8 <vTaskPlaceOnEventList+0x48>)
 8102bca:	681b      	ldr	r3, [r3, #0]
 8102bcc:	3318      	adds	r3, #24
 8102bce:	4619      	mov	r1, r3
 8102bd0:	6878      	ldr	r0, [r7, #4]
 8102bd2:	f7fe fc1a 	bl	810140a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8102bd6:	2101      	movs	r1, #1
 8102bd8:	6838      	ldr	r0, [r7, #0]
 8102bda:	f000 fa81 	bl	81030e0 <prvAddCurrentTaskToDelayedList>
}
 8102bde:	bf00      	nop
 8102be0:	3710      	adds	r7, #16
 8102be2:	46bd      	mov	sp, r7
 8102be4:	bd80      	pop	{r7, pc}
 8102be6:	bf00      	nop
 8102be8:	10004368 	.word	0x10004368

08102bec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8102bec:	b580      	push	{r7, lr}
 8102bee:	b086      	sub	sp, #24
 8102bf0:	af00      	add	r7, sp, #0
 8102bf2:	60f8      	str	r0, [r7, #12]
 8102bf4:	60b9      	str	r1, [r7, #8]
 8102bf6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8102bf8:	68fb      	ldr	r3, [r7, #12]
 8102bfa:	2b00      	cmp	r3, #0
 8102bfc:	d10b      	bne.n	8102c16 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8102bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102c02:	f383 8811 	msr	BASEPRI, r3
 8102c06:	f3bf 8f6f 	isb	sy
 8102c0a:	f3bf 8f4f 	dsb	sy
 8102c0e:	617b      	str	r3, [r7, #20]
}
 8102c10:	bf00      	nop
 8102c12:	bf00      	nop
 8102c14:	e7fd      	b.n	8102c12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8102c16:	4b0a      	ldr	r3, [pc, #40]	@ (8102c40 <vTaskPlaceOnEventListRestricted+0x54>)
 8102c18:	681b      	ldr	r3, [r3, #0]
 8102c1a:	3318      	adds	r3, #24
 8102c1c:	4619      	mov	r1, r3
 8102c1e:	68f8      	ldr	r0, [r7, #12]
 8102c20:	f7fe fbcf 	bl	81013c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8102c24:	687b      	ldr	r3, [r7, #4]
 8102c26:	2b00      	cmp	r3, #0
 8102c28:	d002      	beq.n	8102c30 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8102c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8102c2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8102c30:	6879      	ldr	r1, [r7, #4]
 8102c32:	68b8      	ldr	r0, [r7, #8]
 8102c34:	f000 fa54 	bl	81030e0 <prvAddCurrentTaskToDelayedList>
	}
 8102c38:	bf00      	nop
 8102c3a:	3718      	adds	r7, #24
 8102c3c:	46bd      	mov	sp, r7
 8102c3e:	bd80      	pop	{r7, pc}
 8102c40:	10004368 	.word	0x10004368

08102c44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8102c44:	b580      	push	{r7, lr}
 8102c46:	b086      	sub	sp, #24
 8102c48:	af00      	add	r7, sp, #0
 8102c4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102c4c:	687b      	ldr	r3, [r7, #4]
 8102c4e:	68db      	ldr	r3, [r3, #12]
 8102c50:	68db      	ldr	r3, [r3, #12]
 8102c52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8102c54:	693b      	ldr	r3, [r7, #16]
 8102c56:	2b00      	cmp	r3, #0
 8102c58:	d10b      	bne.n	8102c72 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8102c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102c5e:	f383 8811 	msr	BASEPRI, r3
 8102c62:	f3bf 8f6f 	isb	sy
 8102c66:	f3bf 8f4f 	dsb	sy
 8102c6a:	60fb      	str	r3, [r7, #12]
}
 8102c6c:	bf00      	nop
 8102c6e:	bf00      	nop
 8102c70:	e7fd      	b.n	8102c6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8102c72:	693b      	ldr	r3, [r7, #16]
 8102c74:	3318      	adds	r3, #24
 8102c76:	4618      	mov	r0, r3
 8102c78:	f7fe fc00 	bl	810147c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8102c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8102cf4 <xTaskRemoveFromEventList+0xb0>)
 8102c7e:	681b      	ldr	r3, [r3, #0]
 8102c80:	2b00      	cmp	r3, #0
 8102c82:	d11d      	bne.n	8102cc0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8102c84:	693b      	ldr	r3, [r7, #16]
 8102c86:	3304      	adds	r3, #4
 8102c88:	4618      	mov	r0, r3
 8102c8a:	f7fe fbf7 	bl	810147c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8102c8e:	693b      	ldr	r3, [r7, #16]
 8102c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102c92:	4b19      	ldr	r3, [pc, #100]	@ (8102cf8 <xTaskRemoveFromEventList+0xb4>)
 8102c94:	681b      	ldr	r3, [r3, #0]
 8102c96:	429a      	cmp	r2, r3
 8102c98:	d903      	bls.n	8102ca2 <xTaskRemoveFromEventList+0x5e>
 8102c9a:	693b      	ldr	r3, [r7, #16]
 8102c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c9e:	4a16      	ldr	r2, [pc, #88]	@ (8102cf8 <xTaskRemoveFromEventList+0xb4>)
 8102ca0:	6013      	str	r3, [r2, #0]
 8102ca2:	693b      	ldr	r3, [r7, #16]
 8102ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102ca6:	4613      	mov	r3, r2
 8102ca8:	009b      	lsls	r3, r3, #2
 8102caa:	4413      	add	r3, r2
 8102cac:	009b      	lsls	r3, r3, #2
 8102cae:	4a13      	ldr	r2, [pc, #76]	@ (8102cfc <xTaskRemoveFromEventList+0xb8>)
 8102cb0:	441a      	add	r2, r3
 8102cb2:	693b      	ldr	r3, [r7, #16]
 8102cb4:	3304      	adds	r3, #4
 8102cb6:	4619      	mov	r1, r3
 8102cb8:	4610      	mov	r0, r2
 8102cba:	f7fe fb82 	bl	81013c2 <vListInsertEnd>
 8102cbe:	e005      	b.n	8102ccc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8102cc0:	693b      	ldr	r3, [r7, #16]
 8102cc2:	3318      	adds	r3, #24
 8102cc4:	4619      	mov	r1, r3
 8102cc6:	480e      	ldr	r0, [pc, #56]	@ (8102d00 <xTaskRemoveFromEventList+0xbc>)
 8102cc8:	f7fe fb7b 	bl	81013c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8102ccc:	693b      	ldr	r3, [r7, #16]
 8102cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8102d04 <xTaskRemoveFromEventList+0xc0>)
 8102cd2:	681b      	ldr	r3, [r3, #0]
 8102cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102cd6:	429a      	cmp	r2, r3
 8102cd8:	d905      	bls.n	8102ce6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8102cda:	2301      	movs	r3, #1
 8102cdc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8102cde:	4b0a      	ldr	r3, [pc, #40]	@ (8102d08 <xTaskRemoveFromEventList+0xc4>)
 8102ce0:	2201      	movs	r2, #1
 8102ce2:	601a      	str	r2, [r3, #0]
 8102ce4:	e001      	b.n	8102cea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8102ce6:	2300      	movs	r3, #0
 8102ce8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8102cea:	697b      	ldr	r3, [r7, #20]
}
 8102cec:	4618      	mov	r0, r3
 8102cee:	3718      	adds	r7, #24
 8102cf0:	46bd      	mov	sp, r7
 8102cf2:	bd80      	pop	{r7, pc}
 8102cf4:	10004864 	.word	0x10004864
 8102cf8:	10004844 	.word	0x10004844
 8102cfc:	1000436c 	.word	0x1000436c
 8102d00:	100047fc 	.word	0x100047fc
 8102d04:	10004368 	.word	0x10004368
 8102d08:	10004850 	.word	0x10004850

08102d0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8102d0c:	b480      	push	{r7}
 8102d0e:	b083      	sub	sp, #12
 8102d10:	af00      	add	r7, sp, #0
 8102d12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8102d14:	4b06      	ldr	r3, [pc, #24]	@ (8102d30 <vTaskInternalSetTimeOutState+0x24>)
 8102d16:	681a      	ldr	r2, [r3, #0]
 8102d18:	687b      	ldr	r3, [r7, #4]
 8102d1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8102d1c:	4b05      	ldr	r3, [pc, #20]	@ (8102d34 <vTaskInternalSetTimeOutState+0x28>)
 8102d1e:	681a      	ldr	r2, [r3, #0]
 8102d20:	687b      	ldr	r3, [r7, #4]
 8102d22:	605a      	str	r2, [r3, #4]
}
 8102d24:	bf00      	nop
 8102d26:	370c      	adds	r7, #12
 8102d28:	46bd      	mov	sp, r7
 8102d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d2e:	4770      	bx	lr
 8102d30:	10004854 	.word	0x10004854
 8102d34:	10004840 	.word	0x10004840

08102d38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8102d38:	b580      	push	{r7, lr}
 8102d3a:	b088      	sub	sp, #32
 8102d3c:	af00      	add	r7, sp, #0
 8102d3e:	6078      	str	r0, [r7, #4]
 8102d40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8102d42:	687b      	ldr	r3, [r7, #4]
 8102d44:	2b00      	cmp	r3, #0
 8102d46:	d10b      	bne.n	8102d60 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8102d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102d4c:	f383 8811 	msr	BASEPRI, r3
 8102d50:	f3bf 8f6f 	isb	sy
 8102d54:	f3bf 8f4f 	dsb	sy
 8102d58:	613b      	str	r3, [r7, #16]
}
 8102d5a:	bf00      	nop
 8102d5c:	bf00      	nop
 8102d5e:	e7fd      	b.n	8102d5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8102d60:	683b      	ldr	r3, [r7, #0]
 8102d62:	2b00      	cmp	r3, #0
 8102d64:	d10b      	bne.n	8102d7e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8102d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102d6a:	f383 8811 	msr	BASEPRI, r3
 8102d6e:	f3bf 8f6f 	isb	sy
 8102d72:	f3bf 8f4f 	dsb	sy
 8102d76:	60fb      	str	r3, [r7, #12]
}
 8102d78:	bf00      	nop
 8102d7a:	bf00      	nop
 8102d7c:	e7fd      	b.n	8102d7a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8102d7e:	f7fe fcdb 	bl	8101738 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8102d82:	4b1d      	ldr	r3, [pc, #116]	@ (8102df8 <xTaskCheckForTimeOut+0xc0>)
 8102d84:	681b      	ldr	r3, [r3, #0]
 8102d86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8102d88:	687b      	ldr	r3, [r7, #4]
 8102d8a:	685b      	ldr	r3, [r3, #4]
 8102d8c:	69ba      	ldr	r2, [r7, #24]
 8102d8e:	1ad3      	subs	r3, r2, r3
 8102d90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8102d92:	683b      	ldr	r3, [r7, #0]
 8102d94:	681b      	ldr	r3, [r3, #0]
 8102d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102d9a:	d102      	bne.n	8102da2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8102d9c:	2300      	movs	r3, #0
 8102d9e:	61fb      	str	r3, [r7, #28]
 8102da0:	e023      	b.n	8102dea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8102da2:	687b      	ldr	r3, [r7, #4]
 8102da4:	681a      	ldr	r2, [r3, #0]
 8102da6:	4b15      	ldr	r3, [pc, #84]	@ (8102dfc <xTaskCheckForTimeOut+0xc4>)
 8102da8:	681b      	ldr	r3, [r3, #0]
 8102daa:	429a      	cmp	r2, r3
 8102dac:	d007      	beq.n	8102dbe <xTaskCheckForTimeOut+0x86>
 8102dae:	687b      	ldr	r3, [r7, #4]
 8102db0:	685b      	ldr	r3, [r3, #4]
 8102db2:	69ba      	ldr	r2, [r7, #24]
 8102db4:	429a      	cmp	r2, r3
 8102db6:	d302      	bcc.n	8102dbe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8102db8:	2301      	movs	r3, #1
 8102dba:	61fb      	str	r3, [r7, #28]
 8102dbc:	e015      	b.n	8102dea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8102dbe:	683b      	ldr	r3, [r7, #0]
 8102dc0:	681b      	ldr	r3, [r3, #0]
 8102dc2:	697a      	ldr	r2, [r7, #20]
 8102dc4:	429a      	cmp	r2, r3
 8102dc6:	d20b      	bcs.n	8102de0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8102dc8:	683b      	ldr	r3, [r7, #0]
 8102dca:	681a      	ldr	r2, [r3, #0]
 8102dcc:	697b      	ldr	r3, [r7, #20]
 8102dce:	1ad2      	subs	r2, r2, r3
 8102dd0:	683b      	ldr	r3, [r7, #0]
 8102dd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8102dd4:	6878      	ldr	r0, [r7, #4]
 8102dd6:	f7ff ff99 	bl	8102d0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8102dda:	2300      	movs	r3, #0
 8102ddc:	61fb      	str	r3, [r7, #28]
 8102dde:	e004      	b.n	8102dea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8102de0:	683b      	ldr	r3, [r7, #0]
 8102de2:	2200      	movs	r2, #0
 8102de4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8102de6:	2301      	movs	r3, #1
 8102de8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8102dea:	f7fe fcd7 	bl	810179c <vPortExitCritical>

	return xReturn;
 8102dee:	69fb      	ldr	r3, [r7, #28]
}
 8102df0:	4618      	mov	r0, r3
 8102df2:	3720      	adds	r7, #32
 8102df4:	46bd      	mov	sp, r7
 8102df6:	bd80      	pop	{r7, pc}
 8102df8:	10004840 	.word	0x10004840
 8102dfc:	10004854 	.word	0x10004854

08102e00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8102e00:	b480      	push	{r7}
 8102e02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8102e04:	4b03      	ldr	r3, [pc, #12]	@ (8102e14 <vTaskMissedYield+0x14>)
 8102e06:	2201      	movs	r2, #1
 8102e08:	601a      	str	r2, [r3, #0]
}
 8102e0a:	bf00      	nop
 8102e0c:	46bd      	mov	sp, r7
 8102e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e12:	4770      	bx	lr
 8102e14:	10004850 	.word	0x10004850

08102e18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8102e18:	b580      	push	{r7, lr}
 8102e1a:	b082      	sub	sp, #8
 8102e1c:	af00      	add	r7, sp, #0
 8102e1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8102e20:	f000 f852 	bl	8102ec8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8102e24:	4b06      	ldr	r3, [pc, #24]	@ (8102e40 <prvIdleTask+0x28>)
 8102e26:	681b      	ldr	r3, [r3, #0]
 8102e28:	2b01      	cmp	r3, #1
 8102e2a:	d9f9      	bls.n	8102e20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8102e2c:	4b05      	ldr	r3, [pc, #20]	@ (8102e44 <prvIdleTask+0x2c>)
 8102e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8102e32:	601a      	str	r2, [r3, #0]
 8102e34:	f3bf 8f4f 	dsb	sy
 8102e38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8102e3c:	e7f0      	b.n	8102e20 <prvIdleTask+0x8>
 8102e3e:	bf00      	nop
 8102e40:	1000436c 	.word	0x1000436c
 8102e44:	e000ed04 	.word	0xe000ed04

08102e48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8102e48:	b580      	push	{r7, lr}
 8102e4a:	b082      	sub	sp, #8
 8102e4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8102e4e:	2300      	movs	r3, #0
 8102e50:	607b      	str	r3, [r7, #4]
 8102e52:	e00c      	b.n	8102e6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8102e54:	687a      	ldr	r2, [r7, #4]
 8102e56:	4613      	mov	r3, r2
 8102e58:	009b      	lsls	r3, r3, #2
 8102e5a:	4413      	add	r3, r2
 8102e5c:	009b      	lsls	r3, r3, #2
 8102e5e:	4a12      	ldr	r2, [pc, #72]	@ (8102ea8 <prvInitialiseTaskLists+0x60>)
 8102e60:	4413      	add	r3, r2
 8102e62:	4618      	mov	r0, r3
 8102e64:	f7fe fa80 	bl	8101368 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8102e68:	687b      	ldr	r3, [r7, #4]
 8102e6a:	3301      	adds	r3, #1
 8102e6c:	607b      	str	r3, [r7, #4]
 8102e6e:	687b      	ldr	r3, [r7, #4]
 8102e70:	2b37      	cmp	r3, #55	@ 0x37
 8102e72:	d9ef      	bls.n	8102e54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8102e74:	480d      	ldr	r0, [pc, #52]	@ (8102eac <prvInitialiseTaskLists+0x64>)
 8102e76:	f7fe fa77 	bl	8101368 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8102e7a:	480d      	ldr	r0, [pc, #52]	@ (8102eb0 <prvInitialiseTaskLists+0x68>)
 8102e7c:	f7fe fa74 	bl	8101368 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8102e80:	480c      	ldr	r0, [pc, #48]	@ (8102eb4 <prvInitialiseTaskLists+0x6c>)
 8102e82:	f7fe fa71 	bl	8101368 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8102e86:	480c      	ldr	r0, [pc, #48]	@ (8102eb8 <prvInitialiseTaskLists+0x70>)
 8102e88:	f7fe fa6e 	bl	8101368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8102e8c:	480b      	ldr	r0, [pc, #44]	@ (8102ebc <prvInitialiseTaskLists+0x74>)
 8102e8e:	f7fe fa6b 	bl	8101368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8102e92:	4b0b      	ldr	r3, [pc, #44]	@ (8102ec0 <prvInitialiseTaskLists+0x78>)
 8102e94:	4a05      	ldr	r2, [pc, #20]	@ (8102eac <prvInitialiseTaskLists+0x64>)
 8102e96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8102e98:	4b0a      	ldr	r3, [pc, #40]	@ (8102ec4 <prvInitialiseTaskLists+0x7c>)
 8102e9a:	4a05      	ldr	r2, [pc, #20]	@ (8102eb0 <prvInitialiseTaskLists+0x68>)
 8102e9c:	601a      	str	r2, [r3, #0]
}
 8102e9e:	bf00      	nop
 8102ea0:	3708      	adds	r7, #8
 8102ea2:	46bd      	mov	sp, r7
 8102ea4:	bd80      	pop	{r7, pc}
 8102ea6:	bf00      	nop
 8102ea8:	1000436c 	.word	0x1000436c
 8102eac:	100047cc 	.word	0x100047cc
 8102eb0:	100047e0 	.word	0x100047e0
 8102eb4:	100047fc 	.word	0x100047fc
 8102eb8:	10004810 	.word	0x10004810
 8102ebc:	10004828 	.word	0x10004828
 8102ec0:	100047f4 	.word	0x100047f4
 8102ec4:	100047f8 	.word	0x100047f8

08102ec8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8102ec8:	b580      	push	{r7, lr}
 8102eca:	b082      	sub	sp, #8
 8102ecc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8102ece:	e019      	b.n	8102f04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8102ed0:	f7fe fc32 	bl	8101738 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102ed4:	4b10      	ldr	r3, [pc, #64]	@ (8102f18 <prvCheckTasksWaitingTermination+0x50>)
 8102ed6:	68db      	ldr	r3, [r3, #12]
 8102ed8:	68db      	ldr	r3, [r3, #12]
 8102eda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8102edc:	687b      	ldr	r3, [r7, #4]
 8102ede:	3304      	adds	r3, #4
 8102ee0:	4618      	mov	r0, r3
 8102ee2:	f7fe facb 	bl	810147c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8102ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8102f1c <prvCheckTasksWaitingTermination+0x54>)
 8102ee8:	681b      	ldr	r3, [r3, #0]
 8102eea:	3b01      	subs	r3, #1
 8102eec:	4a0b      	ldr	r2, [pc, #44]	@ (8102f1c <prvCheckTasksWaitingTermination+0x54>)
 8102eee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8102ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8102f20 <prvCheckTasksWaitingTermination+0x58>)
 8102ef2:	681b      	ldr	r3, [r3, #0]
 8102ef4:	3b01      	subs	r3, #1
 8102ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8102f20 <prvCheckTasksWaitingTermination+0x58>)
 8102ef8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8102efa:	f7fe fc4f 	bl	810179c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8102efe:	6878      	ldr	r0, [r7, #4]
 8102f00:	f000 f810 	bl	8102f24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8102f04:	4b06      	ldr	r3, [pc, #24]	@ (8102f20 <prvCheckTasksWaitingTermination+0x58>)
 8102f06:	681b      	ldr	r3, [r3, #0]
 8102f08:	2b00      	cmp	r3, #0
 8102f0a:	d1e1      	bne.n	8102ed0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8102f0c:	bf00      	nop
 8102f0e:	bf00      	nop
 8102f10:	3708      	adds	r7, #8
 8102f12:	46bd      	mov	sp, r7
 8102f14:	bd80      	pop	{r7, pc}
 8102f16:	bf00      	nop
 8102f18:	10004810 	.word	0x10004810
 8102f1c:	1000483c 	.word	0x1000483c
 8102f20:	10004824 	.word	0x10004824

08102f24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8102f24:	b580      	push	{r7, lr}
 8102f26:	b084      	sub	sp, #16
 8102f28:	af00      	add	r7, sp, #0
 8102f2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8102f2c:	687b      	ldr	r3, [r7, #4]
 8102f2e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8102f32:	2b00      	cmp	r3, #0
 8102f34:	d108      	bne.n	8102f48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8102f36:	687b      	ldr	r3, [r7, #4]
 8102f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102f3a:	4618      	mov	r0, r3
 8102f3c:	f7fe f8f4 	bl	8101128 <vPortFree>
				vPortFree( pxTCB );
 8102f40:	6878      	ldr	r0, [r7, #4]
 8102f42:	f7fe f8f1 	bl	8101128 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8102f46:	e019      	b.n	8102f7c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8102f48:	687b      	ldr	r3, [r7, #4]
 8102f4a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8102f4e:	2b01      	cmp	r3, #1
 8102f50:	d103      	bne.n	8102f5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8102f52:	6878      	ldr	r0, [r7, #4]
 8102f54:	f7fe f8e8 	bl	8101128 <vPortFree>
	}
 8102f58:	e010      	b.n	8102f7c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8102f5a:	687b      	ldr	r3, [r7, #4]
 8102f5c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8102f60:	2b02      	cmp	r3, #2
 8102f62:	d00b      	beq.n	8102f7c <prvDeleteTCB+0x58>
	__asm volatile
 8102f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8102f68:	f383 8811 	msr	BASEPRI, r3
 8102f6c:	f3bf 8f6f 	isb	sy
 8102f70:	f3bf 8f4f 	dsb	sy
 8102f74:	60fb      	str	r3, [r7, #12]
}
 8102f76:	bf00      	nop
 8102f78:	bf00      	nop
 8102f7a:	e7fd      	b.n	8102f78 <prvDeleteTCB+0x54>
	}
 8102f7c:	bf00      	nop
 8102f7e:	3710      	adds	r7, #16
 8102f80:	46bd      	mov	sp, r7
 8102f82:	bd80      	pop	{r7, pc}

08102f84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8102f84:	b480      	push	{r7}
 8102f86:	b083      	sub	sp, #12
 8102f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8102f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8102fbc <prvResetNextTaskUnblockTime+0x38>)
 8102f8c:	681b      	ldr	r3, [r3, #0]
 8102f8e:	681b      	ldr	r3, [r3, #0]
 8102f90:	2b00      	cmp	r3, #0
 8102f92:	d104      	bne.n	8102f9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8102f94:	4b0a      	ldr	r3, [pc, #40]	@ (8102fc0 <prvResetNextTaskUnblockTime+0x3c>)
 8102f96:	f04f 32ff 	mov.w	r2, #4294967295
 8102f9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8102f9c:	e008      	b.n	8102fb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102f9e:	4b07      	ldr	r3, [pc, #28]	@ (8102fbc <prvResetNextTaskUnblockTime+0x38>)
 8102fa0:	681b      	ldr	r3, [r3, #0]
 8102fa2:	68db      	ldr	r3, [r3, #12]
 8102fa4:	68db      	ldr	r3, [r3, #12]
 8102fa6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8102fa8:	687b      	ldr	r3, [r7, #4]
 8102faa:	685b      	ldr	r3, [r3, #4]
 8102fac:	4a04      	ldr	r2, [pc, #16]	@ (8102fc0 <prvResetNextTaskUnblockTime+0x3c>)
 8102fae:	6013      	str	r3, [r2, #0]
}
 8102fb0:	bf00      	nop
 8102fb2:	370c      	adds	r7, #12
 8102fb4:	46bd      	mov	sp, r7
 8102fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fba:	4770      	bx	lr
 8102fbc:	100047f4 	.word	0x100047f4
 8102fc0:	1000485c 	.word	0x1000485c

08102fc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8102fc4:	b480      	push	{r7}
 8102fc6:	b083      	sub	sp, #12
 8102fc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8102fca:	4b0b      	ldr	r3, [pc, #44]	@ (8102ff8 <xTaskGetSchedulerState+0x34>)
 8102fcc:	681b      	ldr	r3, [r3, #0]
 8102fce:	2b00      	cmp	r3, #0
 8102fd0:	d102      	bne.n	8102fd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8102fd2:	2301      	movs	r3, #1
 8102fd4:	607b      	str	r3, [r7, #4]
 8102fd6:	e008      	b.n	8102fea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8102fd8:	4b08      	ldr	r3, [pc, #32]	@ (8102ffc <xTaskGetSchedulerState+0x38>)
 8102fda:	681b      	ldr	r3, [r3, #0]
 8102fdc:	2b00      	cmp	r3, #0
 8102fde:	d102      	bne.n	8102fe6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8102fe0:	2302      	movs	r3, #2
 8102fe2:	607b      	str	r3, [r7, #4]
 8102fe4:	e001      	b.n	8102fea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8102fe6:	2300      	movs	r3, #0
 8102fe8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8102fea:	687b      	ldr	r3, [r7, #4]
	}
 8102fec:	4618      	mov	r0, r3
 8102fee:	370c      	adds	r7, #12
 8102ff0:	46bd      	mov	sp, r7
 8102ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ff6:	4770      	bx	lr
 8102ff8:	10004848 	.word	0x10004848
 8102ffc:	10004864 	.word	0x10004864

08103000 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8103000:	b580      	push	{r7, lr}
 8103002:	b086      	sub	sp, #24
 8103004:	af00      	add	r7, sp, #0
 8103006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8103008:	687b      	ldr	r3, [r7, #4]
 810300a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810300c:	2300      	movs	r3, #0
 810300e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8103010:	687b      	ldr	r3, [r7, #4]
 8103012:	2b00      	cmp	r3, #0
 8103014:	d058      	beq.n	81030c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8103016:	4b2f      	ldr	r3, [pc, #188]	@ (81030d4 <xTaskPriorityDisinherit+0xd4>)
 8103018:	681b      	ldr	r3, [r3, #0]
 810301a:	693a      	ldr	r2, [r7, #16]
 810301c:	429a      	cmp	r2, r3
 810301e:	d00b      	beq.n	8103038 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8103020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103024:	f383 8811 	msr	BASEPRI, r3
 8103028:	f3bf 8f6f 	isb	sy
 810302c:	f3bf 8f4f 	dsb	sy
 8103030:	60fb      	str	r3, [r7, #12]
}
 8103032:	bf00      	nop
 8103034:	bf00      	nop
 8103036:	e7fd      	b.n	8103034 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8103038:	693b      	ldr	r3, [r7, #16]
 810303a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810303c:	2b00      	cmp	r3, #0
 810303e:	d10b      	bne.n	8103058 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8103040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103044:	f383 8811 	msr	BASEPRI, r3
 8103048:	f3bf 8f6f 	isb	sy
 810304c:	f3bf 8f4f 	dsb	sy
 8103050:	60bb      	str	r3, [r7, #8]
}
 8103052:	bf00      	nop
 8103054:	bf00      	nop
 8103056:	e7fd      	b.n	8103054 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8103058:	693b      	ldr	r3, [r7, #16]
 810305a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810305c:	1e5a      	subs	r2, r3, #1
 810305e:	693b      	ldr	r3, [r7, #16]
 8103060:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8103062:	693b      	ldr	r3, [r7, #16]
 8103064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103066:	693b      	ldr	r3, [r7, #16]
 8103068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810306a:	429a      	cmp	r2, r3
 810306c:	d02c      	beq.n	81030c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810306e:	693b      	ldr	r3, [r7, #16]
 8103070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103072:	2b00      	cmp	r3, #0
 8103074:	d128      	bne.n	81030c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8103076:	693b      	ldr	r3, [r7, #16]
 8103078:	3304      	adds	r3, #4
 810307a:	4618      	mov	r0, r3
 810307c:	f7fe f9fe 	bl	810147c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8103080:	693b      	ldr	r3, [r7, #16]
 8103082:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8103084:	693b      	ldr	r3, [r7, #16]
 8103086:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103088:	693b      	ldr	r3, [r7, #16]
 810308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810308c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8103090:	693b      	ldr	r3, [r7, #16]
 8103092:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8103094:	693b      	ldr	r3, [r7, #16]
 8103096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103098:	4b0f      	ldr	r3, [pc, #60]	@ (81030d8 <xTaskPriorityDisinherit+0xd8>)
 810309a:	681b      	ldr	r3, [r3, #0]
 810309c:	429a      	cmp	r2, r3
 810309e:	d903      	bls.n	81030a8 <xTaskPriorityDisinherit+0xa8>
 81030a0:	693b      	ldr	r3, [r7, #16]
 81030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81030a4:	4a0c      	ldr	r2, [pc, #48]	@ (81030d8 <xTaskPriorityDisinherit+0xd8>)
 81030a6:	6013      	str	r3, [r2, #0]
 81030a8:	693b      	ldr	r3, [r7, #16]
 81030aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81030ac:	4613      	mov	r3, r2
 81030ae:	009b      	lsls	r3, r3, #2
 81030b0:	4413      	add	r3, r2
 81030b2:	009b      	lsls	r3, r3, #2
 81030b4:	4a09      	ldr	r2, [pc, #36]	@ (81030dc <xTaskPriorityDisinherit+0xdc>)
 81030b6:	441a      	add	r2, r3
 81030b8:	693b      	ldr	r3, [r7, #16]
 81030ba:	3304      	adds	r3, #4
 81030bc:	4619      	mov	r1, r3
 81030be:	4610      	mov	r0, r2
 81030c0:	f7fe f97f 	bl	81013c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 81030c4:	2301      	movs	r3, #1
 81030c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 81030c8:	697b      	ldr	r3, [r7, #20]
	}
 81030ca:	4618      	mov	r0, r3
 81030cc:	3718      	adds	r7, #24
 81030ce:	46bd      	mov	sp, r7
 81030d0:	bd80      	pop	{r7, pc}
 81030d2:	bf00      	nop
 81030d4:	10004368 	.word	0x10004368
 81030d8:	10004844 	.word	0x10004844
 81030dc:	1000436c 	.word	0x1000436c

081030e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 81030e0:	b580      	push	{r7, lr}
 81030e2:	b084      	sub	sp, #16
 81030e4:	af00      	add	r7, sp, #0
 81030e6:	6078      	str	r0, [r7, #4]
 81030e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 81030ea:	4b21      	ldr	r3, [pc, #132]	@ (8103170 <prvAddCurrentTaskToDelayedList+0x90>)
 81030ec:	681b      	ldr	r3, [r3, #0]
 81030ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81030f0:	4b20      	ldr	r3, [pc, #128]	@ (8103174 <prvAddCurrentTaskToDelayedList+0x94>)
 81030f2:	681b      	ldr	r3, [r3, #0]
 81030f4:	3304      	adds	r3, #4
 81030f6:	4618      	mov	r0, r3
 81030f8:	f7fe f9c0 	bl	810147c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103102:	d10a      	bne.n	810311a <prvAddCurrentTaskToDelayedList+0x3a>
 8103104:	683b      	ldr	r3, [r7, #0]
 8103106:	2b00      	cmp	r3, #0
 8103108:	d007      	beq.n	810311a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810310a:	4b1a      	ldr	r3, [pc, #104]	@ (8103174 <prvAddCurrentTaskToDelayedList+0x94>)
 810310c:	681b      	ldr	r3, [r3, #0]
 810310e:	3304      	adds	r3, #4
 8103110:	4619      	mov	r1, r3
 8103112:	4819      	ldr	r0, [pc, #100]	@ (8103178 <prvAddCurrentTaskToDelayedList+0x98>)
 8103114:	f7fe f955 	bl	81013c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8103118:	e026      	b.n	8103168 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810311a:	68fa      	ldr	r2, [r7, #12]
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	4413      	add	r3, r2
 8103120:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8103122:	4b14      	ldr	r3, [pc, #80]	@ (8103174 <prvAddCurrentTaskToDelayedList+0x94>)
 8103124:	681b      	ldr	r3, [r3, #0]
 8103126:	68ba      	ldr	r2, [r7, #8]
 8103128:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810312a:	68ba      	ldr	r2, [r7, #8]
 810312c:	68fb      	ldr	r3, [r7, #12]
 810312e:	429a      	cmp	r2, r3
 8103130:	d209      	bcs.n	8103146 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8103132:	4b12      	ldr	r3, [pc, #72]	@ (810317c <prvAddCurrentTaskToDelayedList+0x9c>)
 8103134:	681a      	ldr	r2, [r3, #0]
 8103136:	4b0f      	ldr	r3, [pc, #60]	@ (8103174 <prvAddCurrentTaskToDelayedList+0x94>)
 8103138:	681b      	ldr	r3, [r3, #0]
 810313a:	3304      	adds	r3, #4
 810313c:	4619      	mov	r1, r3
 810313e:	4610      	mov	r0, r2
 8103140:	f7fe f963 	bl	810140a <vListInsert>
}
 8103144:	e010      	b.n	8103168 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8103146:	4b0e      	ldr	r3, [pc, #56]	@ (8103180 <prvAddCurrentTaskToDelayedList+0xa0>)
 8103148:	681a      	ldr	r2, [r3, #0]
 810314a:	4b0a      	ldr	r3, [pc, #40]	@ (8103174 <prvAddCurrentTaskToDelayedList+0x94>)
 810314c:	681b      	ldr	r3, [r3, #0]
 810314e:	3304      	adds	r3, #4
 8103150:	4619      	mov	r1, r3
 8103152:	4610      	mov	r0, r2
 8103154:	f7fe f959 	bl	810140a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8103158:	4b0a      	ldr	r3, [pc, #40]	@ (8103184 <prvAddCurrentTaskToDelayedList+0xa4>)
 810315a:	681b      	ldr	r3, [r3, #0]
 810315c:	68ba      	ldr	r2, [r7, #8]
 810315e:	429a      	cmp	r2, r3
 8103160:	d202      	bcs.n	8103168 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8103162:	4a08      	ldr	r2, [pc, #32]	@ (8103184 <prvAddCurrentTaskToDelayedList+0xa4>)
 8103164:	68bb      	ldr	r3, [r7, #8]
 8103166:	6013      	str	r3, [r2, #0]
}
 8103168:	bf00      	nop
 810316a:	3710      	adds	r7, #16
 810316c:	46bd      	mov	sp, r7
 810316e:	bd80      	pop	{r7, pc}
 8103170:	10004840 	.word	0x10004840
 8103174:	10004368 	.word	0x10004368
 8103178:	10004828 	.word	0x10004828
 810317c:	100047f8 	.word	0x100047f8
 8103180:	100047f4 	.word	0x100047f4
 8103184:	1000485c 	.word	0x1000485c

08103188 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8103188:	b580      	push	{r7, lr}
 810318a:	b08a      	sub	sp, #40	@ 0x28
 810318c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810318e:	2300      	movs	r3, #0
 8103190:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8103192:	f000 fb13 	bl	81037bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8103196:	4b1d      	ldr	r3, [pc, #116]	@ (810320c <xTimerCreateTimerTask+0x84>)
 8103198:	681b      	ldr	r3, [r3, #0]
 810319a:	2b00      	cmp	r3, #0
 810319c:	d021      	beq.n	81031e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810319e:	2300      	movs	r3, #0
 81031a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 81031a2:	2300      	movs	r3, #0
 81031a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 81031a6:	1d3a      	adds	r2, r7, #4
 81031a8:	f107 0108 	add.w	r1, r7, #8
 81031ac:	f107 030c 	add.w	r3, r7, #12
 81031b0:	4618      	mov	r0, r3
 81031b2:	f7fd fed1 	bl	8100f58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 81031b6:	6879      	ldr	r1, [r7, #4]
 81031b8:	68bb      	ldr	r3, [r7, #8]
 81031ba:	68fa      	ldr	r2, [r7, #12]
 81031bc:	9202      	str	r2, [sp, #8]
 81031be:	9301      	str	r3, [sp, #4]
 81031c0:	2302      	movs	r3, #2
 81031c2:	9300      	str	r3, [sp, #0]
 81031c4:	2300      	movs	r3, #0
 81031c6:	460a      	mov	r2, r1
 81031c8:	4911      	ldr	r1, [pc, #68]	@ (8103210 <xTimerCreateTimerTask+0x88>)
 81031ca:	4812      	ldr	r0, [pc, #72]	@ (8103214 <xTimerCreateTimerTask+0x8c>)
 81031cc:	f7ff f8d0 	bl	8102370 <xTaskCreateStatic>
 81031d0:	4603      	mov	r3, r0
 81031d2:	4a11      	ldr	r2, [pc, #68]	@ (8103218 <xTimerCreateTimerTask+0x90>)
 81031d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 81031d6:	4b10      	ldr	r3, [pc, #64]	@ (8103218 <xTimerCreateTimerTask+0x90>)
 81031d8:	681b      	ldr	r3, [r3, #0]
 81031da:	2b00      	cmp	r3, #0
 81031dc:	d001      	beq.n	81031e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 81031de:	2301      	movs	r3, #1
 81031e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 81031e2:	697b      	ldr	r3, [r7, #20]
 81031e4:	2b00      	cmp	r3, #0
 81031e6:	d10b      	bne.n	8103200 <xTimerCreateTimerTask+0x78>
	__asm volatile
 81031e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81031ec:	f383 8811 	msr	BASEPRI, r3
 81031f0:	f3bf 8f6f 	isb	sy
 81031f4:	f3bf 8f4f 	dsb	sy
 81031f8:	613b      	str	r3, [r7, #16]
}
 81031fa:	bf00      	nop
 81031fc:	bf00      	nop
 81031fe:	e7fd      	b.n	81031fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8103200:	697b      	ldr	r3, [r7, #20]
}
 8103202:	4618      	mov	r0, r3
 8103204:	3718      	adds	r7, #24
 8103206:	46bd      	mov	sp, r7
 8103208:	bd80      	pop	{r7, pc}
 810320a:	bf00      	nop
 810320c:	10004898 	.word	0x10004898
 8103210:	081038dc 	.word	0x081038dc
 8103214:	08103355 	.word	0x08103355
 8103218:	1000489c 	.word	0x1000489c

0810321c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810321c:	b580      	push	{r7, lr}
 810321e:	b08a      	sub	sp, #40	@ 0x28
 8103220:	af00      	add	r7, sp, #0
 8103222:	60f8      	str	r0, [r7, #12]
 8103224:	60b9      	str	r1, [r7, #8]
 8103226:	607a      	str	r2, [r7, #4]
 8103228:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810322a:	2300      	movs	r3, #0
 810322c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810322e:	68fb      	ldr	r3, [r7, #12]
 8103230:	2b00      	cmp	r3, #0
 8103232:	d10b      	bne.n	810324c <xTimerGenericCommand+0x30>
	__asm volatile
 8103234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103238:	f383 8811 	msr	BASEPRI, r3
 810323c:	f3bf 8f6f 	isb	sy
 8103240:	f3bf 8f4f 	dsb	sy
 8103244:	623b      	str	r3, [r7, #32]
}
 8103246:	bf00      	nop
 8103248:	bf00      	nop
 810324a:	e7fd      	b.n	8103248 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810324c:	4b19      	ldr	r3, [pc, #100]	@ (81032b4 <xTimerGenericCommand+0x98>)
 810324e:	681b      	ldr	r3, [r3, #0]
 8103250:	2b00      	cmp	r3, #0
 8103252:	d02a      	beq.n	81032aa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8103254:	68bb      	ldr	r3, [r7, #8]
 8103256:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8103258:	687b      	ldr	r3, [r7, #4]
 810325a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810325c:	68fb      	ldr	r3, [r7, #12]
 810325e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8103260:	68bb      	ldr	r3, [r7, #8]
 8103262:	2b05      	cmp	r3, #5
 8103264:	dc18      	bgt.n	8103298 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8103266:	f7ff fead 	bl	8102fc4 <xTaskGetSchedulerState>
 810326a:	4603      	mov	r3, r0
 810326c:	2b02      	cmp	r3, #2
 810326e:	d109      	bne.n	8103284 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8103270:	4b10      	ldr	r3, [pc, #64]	@ (81032b4 <xTimerGenericCommand+0x98>)
 8103272:	6818      	ldr	r0, [r3, #0]
 8103274:	f107 0110 	add.w	r1, r7, #16
 8103278:	2300      	movs	r3, #0
 810327a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810327c:	f7fe fc88 	bl	8101b90 <xQueueGenericSend>
 8103280:	6278      	str	r0, [r7, #36]	@ 0x24
 8103282:	e012      	b.n	81032aa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8103284:	4b0b      	ldr	r3, [pc, #44]	@ (81032b4 <xTimerGenericCommand+0x98>)
 8103286:	6818      	ldr	r0, [r3, #0]
 8103288:	f107 0110 	add.w	r1, r7, #16
 810328c:	2300      	movs	r3, #0
 810328e:	2200      	movs	r2, #0
 8103290:	f7fe fc7e 	bl	8101b90 <xQueueGenericSend>
 8103294:	6278      	str	r0, [r7, #36]	@ 0x24
 8103296:	e008      	b.n	81032aa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8103298:	4b06      	ldr	r3, [pc, #24]	@ (81032b4 <xTimerGenericCommand+0x98>)
 810329a:	6818      	ldr	r0, [r3, #0]
 810329c:	f107 0110 	add.w	r1, r7, #16
 81032a0:	2300      	movs	r3, #0
 81032a2:	683a      	ldr	r2, [r7, #0]
 81032a4:	f7fe fd76 	bl	8101d94 <xQueueGenericSendFromISR>
 81032a8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 81032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 81032ac:	4618      	mov	r0, r3
 81032ae:	3728      	adds	r7, #40	@ 0x28
 81032b0:	46bd      	mov	sp, r7
 81032b2:	bd80      	pop	{r7, pc}
 81032b4:	10004898 	.word	0x10004898

081032b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 81032b8:	b580      	push	{r7, lr}
 81032ba:	b088      	sub	sp, #32
 81032bc:	af02      	add	r7, sp, #8
 81032be:	6078      	str	r0, [r7, #4]
 81032c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81032c2:	4b23      	ldr	r3, [pc, #140]	@ (8103350 <prvProcessExpiredTimer+0x98>)
 81032c4:	681b      	ldr	r3, [r3, #0]
 81032c6:	68db      	ldr	r3, [r3, #12]
 81032c8:	68db      	ldr	r3, [r3, #12]
 81032ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81032cc:	697b      	ldr	r3, [r7, #20]
 81032ce:	3304      	adds	r3, #4
 81032d0:	4618      	mov	r0, r3
 81032d2:	f7fe f8d3 	bl	810147c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81032d6:	697b      	ldr	r3, [r7, #20]
 81032d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81032dc:	f003 0304 	and.w	r3, r3, #4
 81032e0:	2b00      	cmp	r3, #0
 81032e2:	d023      	beq.n	810332c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 81032e4:	697b      	ldr	r3, [r7, #20]
 81032e6:	699a      	ldr	r2, [r3, #24]
 81032e8:	687b      	ldr	r3, [r7, #4]
 81032ea:	18d1      	adds	r1, r2, r3
 81032ec:	687b      	ldr	r3, [r7, #4]
 81032ee:	683a      	ldr	r2, [r7, #0]
 81032f0:	6978      	ldr	r0, [r7, #20]
 81032f2:	f000 f8d5 	bl	81034a0 <prvInsertTimerInActiveList>
 81032f6:	4603      	mov	r3, r0
 81032f8:	2b00      	cmp	r3, #0
 81032fa:	d020      	beq.n	810333e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81032fc:	2300      	movs	r3, #0
 81032fe:	9300      	str	r3, [sp, #0]
 8103300:	2300      	movs	r3, #0
 8103302:	687a      	ldr	r2, [r7, #4]
 8103304:	2100      	movs	r1, #0
 8103306:	6978      	ldr	r0, [r7, #20]
 8103308:	f7ff ff88 	bl	810321c <xTimerGenericCommand>
 810330c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810330e:	693b      	ldr	r3, [r7, #16]
 8103310:	2b00      	cmp	r3, #0
 8103312:	d114      	bne.n	810333e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8103314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103318:	f383 8811 	msr	BASEPRI, r3
 810331c:	f3bf 8f6f 	isb	sy
 8103320:	f3bf 8f4f 	dsb	sy
 8103324:	60fb      	str	r3, [r7, #12]
}
 8103326:	bf00      	nop
 8103328:	bf00      	nop
 810332a:	e7fd      	b.n	8103328 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810332c:	697b      	ldr	r3, [r7, #20]
 810332e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8103332:	f023 0301 	bic.w	r3, r3, #1
 8103336:	b2da      	uxtb	r2, r3
 8103338:	697b      	ldr	r3, [r7, #20]
 810333a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810333e:	697b      	ldr	r3, [r7, #20]
 8103340:	6a1b      	ldr	r3, [r3, #32]
 8103342:	6978      	ldr	r0, [r7, #20]
 8103344:	4798      	blx	r3
}
 8103346:	bf00      	nop
 8103348:	3718      	adds	r7, #24
 810334a:	46bd      	mov	sp, r7
 810334c:	bd80      	pop	{r7, pc}
 810334e:	bf00      	nop
 8103350:	10004890 	.word	0x10004890

08103354 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8103354:	b580      	push	{r7, lr}
 8103356:	b084      	sub	sp, #16
 8103358:	af00      	add	r7, sp, #0
 810335a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810335c:	f107 0308 	add.w	r3, r7, #8
 8103360:	4618      	mov	r0, r3
 8103362:	f000 f859 	bl	8103418 <prvGetNextExpireTime>
 8103366:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8103368:	68bb      	ldr	r3, [r7, #8]
 810336a:	4619      	mov	r1, r3
 810336c:	68f8      	ldr	r0, [r7, #12]
 810336e:	f000 f805 	bl	810337c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8103372:	f000 f8d7 	bl	8103524 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8103376:	bf00      	nop
 8103378:	e7f0      	b.n	810335c <prvTimerTask+0x8>
	...

0810337c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810337c:	b580      	push	{r7, lr}
 810337e:	b084      	sub	sp, #16
 8103380:	af00      	add	r7, sp, #0
 8103382:	6078      	str	r0, [r7, #4]
 8103384:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8103386:	f7ff fa37 	bl	81027f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810338a:	f107 0308 	add.w	r3, r7, #8
 810338e:	4618      	mov	r0, r3
 8103390:	f000 f866 	bl	8103460 <prvSampleTimeNow>
 8103394:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8103396:	68bb      	ldr	r3, [r7, #8]
 8103398:	2b00      	cmp	r3, #0
 810339a:	d130      	bne.n	81033fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810339c:	683b      	ldr	r3, [r7, #0]
 810339e:	2b00      	cmp	r3, #0
 81033a0:	d10a      	bne.n	81033b8 <prvProcessTimerOrBlockTask+0x3c>
 81033a2:	687a      	ldr	r2, [r7, #4]
 81033a4:	68fb      	ldr	r3, [r7, #12]
 81033a6:	429a      	cmp	r2, r3
 81033a8:	d806      	bhi.n	81033b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 81033aa:	f7ff fa33 	bl	8102814 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 81033ae:	68f9      	ldr	r1, [r7, #12]
 81033b0:	6878      	ldr	r0, [r7, #4]
 81033b2:	f7ff ff81 	bl	81032b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 81033b6:	e024      	b.n	8103402 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 81033b8:	683b      	ldr	r3, [r7, #0]
 81033ba:	2b00      	cmp	r3, #0
 81033bc:	d008      	beq.n	81033d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 81033be:	4b13      	ldr	r3, [pc, #76]	@ (810340c <prvProcessTimerOrBlockTask+0x90>)
 81033c0:	681b      	ldr	r3, [r3, #0]
 81033c2:	681b      	ldr	r3, [r3, #0]
 81033c4:	2b00      	cmp	r3, #0
 81033c6:	d101      	bne.n	81033cc <prvProcessTimerOrBlockTask+0x50>
 81033c8:	2301      	movs	r3, #1
 81033ca:	e000      	b.n	81033ce <prvProcessTimerOrBlockTask+0x52>
 81033cc:	2300      	movs	r3, #0
 81033ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 81033d0:	4b0f      	ldr	r3, [pc, #60]	@ (8103410 <prvProcessTimerOrBlockTask+0x94>)
 81033d2:	6818      	ldr	r0, [r3, #0]
 81033d4:	687a      	ldr	r2, [r7, #4]
 81033d6:	68fb      	ldr	r3, [r7, #12]
 81033d8:	1ad3      	subs	r3, r2, r3
 81033da:	683a      	ldr	r2, [r7, #0]
 81033dc:	4619      	mov	r1, r3
 81033de:	f7fe ff93 	bl	8102308 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 81033e2:	f7ff fa17 	bl	8102814 <xTaskResumeAll>
 81033e6:	4603      	mov	r3, r0
 81033e8:	2b00      	cmp	r3, #0
 81033ea:	d10a      	bne.n	8103402 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 81033ec:	4b09      	ldr	r3, [pc, #36]	@ (8103414 <prvProcessTimerOrBlockTask+0x98>)
 81033ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81033f2:	601a      	str	r2, [r3, #0]
 81033f4:	f3bf 8f4f 	dsb	sy
 81033f8:	f3bf 8f6f 	isb	sy
}
 81033fc:	e001      	b.n	8103402 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 81033fe:	f7ff fa09 	bl	8102814 <xTaskResumeAll>
}
 8103402:	bf00      	nop
 8103404:	3710      	adds	r7, #16
 8103406:	46bd      	mov	sp, r7
 8103408:	bd80      	pop	{r7, pc}
 810340a:	bf00      	nop
 810340c:	10004894 	.word	0x10004894
 8103410:	10004898 	.word	0x10004898
 8103414:	e000ed04 	.word	0xe000ed04

08103418 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8103418:	b480      	push	{r7}
 810341a:	b085      	sub	sp, #20
 810341c:	af00      	add	r7, sp, #0
 810341e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8103420:	4b0e      	ldr	r3, [pc, #56]	@ (810345c <prvGetNextExpireTime+0x44>)
 8103422:	681b      	ldr	r3, [r3, #0]
 8103424:	681b      	ldr	r3, [r3, #0]
 8103426:	2b00      	cmp	r3, #0
 8103428:	d101      	bne.n	810342e <prvGetNextExpireTime+0x16>
 810342a:	2201      	movs	r2, #1
 810342c:	e000      	b.n	8103430 <prvGetNextExpireTime+0x18>
 810342e:	2200      	movs	r2, #0
 8103430:	687b      	ldr	r3, [r7, #4]
 8103432:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8103434:	687b      	ldr	r3, [r7, #4]
 8103436:	681b      	ldr	r3, [r3, #0]
 8103438:	2b00      	cmp	r3, #0
 810343a:	d105      	bne.n	8103448 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810343c:	4b07      	ldr	r3, [pc, #28]	@ (810345c <prvGetNextExpireTime+0x44>)
 810343e:	681b      	ldr	r3, [r3, #0]
 8103440:	68db      	ldr	r3, [r3, #12]
 8103442:	681b      	ldr	r3, [r3, #0]
 8103444:	60fb      	str	r3, [r7, #12]
 8103446:	e001      	b.n	810344c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8103448:	2300      	movs	r3, #0
 810344a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810344c:	68fb      	ldr	r3, [r7, #12]
}
 810344e:	4618      	mov	r0, r3
 8103450:	3714      	adds	r7, #20
 8103452:	46bd      	mov	sp, r7
 8103454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103458:	4770      	bx	lr
 810345a:	bf00      	nop
 810345c:	10004890 	.word	0x10004890

08103460 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8103460:	b580      	push	{r7, lr}
 8103462:	b084      	sub	sp, #16
 8103464:	af00      	add	r7, sp, #0
 8103466:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8103468:	f7ff fa72 	bl	8102950 <xTaskGetTickCount>
 810346c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810346e:	4b0b      	ldr	r3, [pc, #44]	@ (810349c <prvSampleTimeNow+0x3c>)
 8103470:	681b      	ldr	r3, [r3, #0]
 8103472:	68fa      	ldr	r2, [r7, #12]
 8103474:	429a      	cmp	r2, r3
 8103476:	d205      	bcs.n	8103484 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8103478:	f000 f93a 	bl	81036f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810347c:	687b      	ldr	r3, [r7, #4]
 810347e:	2201      	movs	r2, #1
 8103480:	601a      	str	r2, [r3, #0]
 8103482:	e002      	b.n	810348a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	2200      	movs	r2, #0
 8103488:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810348a:	4a04      	ldr	r2, [pc, #16]	@ (810349c <prvSampleTimeNow+0x3c>)
 810348c:	68fb      	ldr	r3, [r7, #12]
 810348e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8103490:	68fb      	ldr	r3, [r7, #12]
}
 8103492:	4618      	mov	r0, r3
 8103494:	3710      	adds	r7, #16
 8103496:	46bd      	mov	sp, r7
 8103498:	bd80      	pop	{r7, pc}
 810349a:	bf00      	nop
 810349c:	100048a0 	.word	0x100048a0

081034a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 81034a0:	b580      	push	{r7, lr}
 81034a2:	b086      	sub	sp, #24
 81034a4:	af00      	add	r7, sp, #0
 81034a6:	60f8      	str	r0, [r7, #12]
 81034a8:	60b9      	str	r1, [r7, #8]
 81034aa:	607a      	str	r2, [r7, #4]
 81034ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 81034ae:	2300      	movs	r3, #0
 81034b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 81034b2:	68fb      	ldr	r3, [r7, #12]
 81034b4:	68ba      	ldr	r2, [r7, #8]
 81034b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81034b8:	68fb      	ldr	r3, [r7, #12]
 81034ba:	68fa      	ldr	r2, [r7, #12]
 81034bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 81034be:	68ba      	ldr	r2, [r7, #8]
 81034c0:	687b      	ldr	r3, [r7, #4]
 81034c2:	429a      	cmp	r2, r3
 81034c4:	d812      	bhi.n	81034ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81034c6:	687a      	ldr	r2, [r7, #4]
 81034c8:	683b      	ldr	r3, [r7, #0]
 81034ca:	1ad2      	subs	r2, r2, r3
 81034cc:	68fb      	ldr	r3, [r7, #12]
 81034ce:	699b      	ldr	r3, [r3, #24]
 81034d0:	429a      	cmp	r2, r3
 81034d2:	d302      	bcc.n	81034da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 81034d4:	2301      	movs	r3, #1
 81034d6:	617b      	str	r3, [r7, #20]
 81034d8:	e01b      	b.n	8103512 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 81034da:	4b10      	ldr	r3, [pc, #64]	@ (810351c <prvInsertTimerInActiveList+0x7c>)
 81034dc:	681a      	ldr	r2, [r3, #0]
 81034de:	68fb      	ldr	r3, [r7, #12]
 81034e0:	3304      	adds	r3, #4
 81034e2:	4619      	mov	r1, r3
 81034e4:	4610      	mov	r0, r2
 81034e6:	f7fd ff90 	bl	810140a <vListInsert>
 81034ea:	e012      	b.n	8103512 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 81034ec:	687a      	ldr	r2, [r7, #4]
 81034ee:	683b      	ldr	r3, [r7, #0]
 81034f0:	429a      	cmp	r2, r3
 81034f2:	d206      	bcs.n	8103502 <prvInsertTimerInActiveList+0x62>
 81034f4:	68ba      	ldr	r2, [r7, #8]
 81034f6:	683b      	ldr	r3, [r7, #0]
 81034f8:	429a      	cmp	r2, r3
 81034fa:	d302      	bcc.n	8103502 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 81034fc:	2301      	movs	r3, #1
 81034fe:	617b      	str	r3, [r7, #20]
 8103500:	e007      	b.n	8103512 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8103502:	4b07      	ldr	r3, [pc, #28]	@ (8103520 <prvInsertTimerInActiveList+0x80>)
 8103504:	681a      	ldr	r2, [r3, #0]
 8103506:	68fb      	ldr	r3, [r7, #12]
 8103508:	3304      	adds	r3, #4
 810350a:	4619      	mov	r1, r3
 810350c:	4610      	mov	r0, r2
 810350e:	f7fd ff7c 	bl	810140a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8103512:	697b      	ldr	r3, [r7, #20]
}
 8103514:	4618      	mov	r0, r3
 8103516:	3718      	adds	r7, #24
 8103518:	46bd      	mov	sp, r7
 810351a:	bd80      	pop	{r7, pc}
 810351c:	10004894 	.word	0x10004894
 8103520:	10004890 	.word	0x10004890

08103524 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8103524:	b580      	push	{r7, lr}
 8103526:	b08e      	sub	sp, #56	@ 0x38
 8103528:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810352a:	e0ce      	b.n	81036ca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	2b00      	cmp	r3, #0
 8103530:	da19      	bge.n	8103566 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8103532:	1d3b      	adds	r3, r7, #4
 8103534:	3304      	adds	r3, #4
 8103536:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8103538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810353a:	2b00      	cmp	r3, #0
 810353c:	d10b      	bne.n	8103556 <prvProcessReceivedCommands+0x32>
	__asm volatile
 810353e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103542:	f383 8811 	msr	BASEPRI, r3
 8103546:	f3bf 8f6f 	isb	sy
 810354a:	f3bf 8f4f 	dsb	sy
 810354e:	61fb      	str	r3, [r7, #28]
}
 8103550:	bf00      	nop
 8103552:	bf00      	nop
 8103554:	e7fd      	b.n	8103552 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8103556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103558:	681b      	ldr	r3, [r3, #0]
 810355a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810355c:	6850      	ldr	r0, [r2, #4]
 810355e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8103560:	6892      	ldr	r2, [r2, #8]
 8103562:	4611      	mov	r1, r2
 8103564:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8103566:	687b      	ldr	r3, [r7, #4]
 8103568:	2b00      	cmp	r3, #0
 810356a:	f2c0 80ae 	blt.w	81036ca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810356e:	68fb      	ldr	r3, [r7, #12]
 8103570:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8103572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103574:	695b      	ldr	r3, [r3, #20]
 8103576:	2b00      	cmp	r3, #0
 8103578:	d004      	beq.n	8103584 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810357a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810357c:	3304      	adds	r3, #4
 810357e:	4618      	mov	r0, r3
 8103580:	f7fd ff7c 	bl	810147c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8103584:	463b      	mov	r3, r7
 8103586:	4618      	mov	r0, r3
 8103588:	f7ff ff6a 	bl	8103460 <prvSampleTimeNow>
 810358c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 810358e:	687b      	ldr	r3, [r7, #4]
 8103590:	2b09      	cmp	r3, #9
 8103592:	f200 8097 	bhi.w	81036c4 <prvProcessReceivedCommands+0x1a0>
 8103596:	a201      	add	r2, pc, #4	@ (adr r2, 810359c <prvProcessReceivedCommands+0x78>)
 8103598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810359c:	081035c5 	.word	0x081035c5
 81035a0:	081035c5 	.word	0x081035c5
 81035a4:	081035c5 	.word	0x081035c5
 81035a8:	0810363b 	.word	0x0810363b
 81035ac:	0810364f 	.word	0x0810364f
 81035b0:	0810369b 	.word	0x0810369b
 81035b4:	081035c5 	.word	0x081035c5
 81035b8:	081035c5 	.word	0x081035c5
 81035bc:	0810363b 	.word	0x0810363b
 81035c0:	0810364f 	.word	0x0810364f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81035c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81035c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81035ca:	f043 0301 	orr.w	r3, r3, #1
 81035ce:	b2da      	uxtb	r2, r3
 81035d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81035d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 81035d6:	68ba      	ldr	r2, [r7, #8]
 81035d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81035da:	699b      	ldr	r3, [r3, #24]
 81035dc:	18d1      	adds	r1, r2, r3
 81035de:	68bb      	ldr	r3, [r7, #8]
 81035e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81035e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81035e4:	f7ff ff5c 	bl	81034a0 <prvInsertTimerInActiveList>
 81035e8:	4603      	mov	r3, r0
 81035ea:	2b00      	cmp	r3, #0
 81035ec:	d06c      	beq.n	81036c8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81035ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81035f0:	6a1b      	ldr	r3, [r3, #32]
 81035f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81035f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81035f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81035f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81035fc:	f003 0304 	and.w	r3, r3, #4
 8103600:	2b00      	cmp	r3, #0
 8103602:	d061      	beq.n	81036c8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8103604:	68ba      	ldr	r2, [r7, #8]
 8103606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103608:	699b      	ldr	r3, [r3, #24]
 810360a:	441a      	add	r2, r3
 810360c:	2300      	movs	r3, #0
 810360e:	9300      	str	r3, [sp, #0]
 8103610:	2300      	movs	r3, #0
 8103612:	2100      	movs	r1, #0
 8103614:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8103616:	f7ff fe01 	bl	810321c <xTimerGenericCommand>
 810361a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810361c:	6a3b      	ldr	r3, [r7, #32]
 810361e:	2b00      	cmp	r3, #0
 8103620:	d152      	bne.n	81036c8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8103622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103626:	f383 8811 	msr	BASEPRI, r3
 810362a:	f3bf 8f6f 	isb	sy
 810362e:	f3bf 8f4f 	dsb	sy
 8103632:	61bb      	str	r3, [r7, #24]
}
 8103634:	bf00      	nop
 8103636:	bf00      	nop
 8103638:	e7fd      	b.n	8103636 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810363a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810363c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8103640:	f023 0301 	bic.w	r3, r3, #1
 8103644:	b2da      	uxtb	r2, r3
 8103646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103648:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810364c:	e03d      	b.n	81036ca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810364e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103650:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8103654:	f043 0301 	orr.w	r3, r3, #1
 8103658:	b2da      	uxtb	r2, r3
 810365a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810365c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8103660:	68ba      	ldr	r2, [r7, #8]
 8103662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103664:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8103666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103668:	699b      	ldr	r3, [r3, #24]
 810366a:	2b00      	cmp	r3, #0
 810366c:	d10b      	bne.n	8103686 <prvProcessReceivedCommands+0x162>
	__asm volatile
 810366e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103672:	f383 8811 	msr	BASEPRI, r3
 8103676:	f3bf 8f6f 	isb	sy
 810367a:	f3bf 8f4f 	dsb	sy
 810367e:	617b      	str	r3, [r7, #20]
}
 8103680:	bf00      	nop
 8103682:	bf00      	nop
 8103684:	e7fd      	b.n	8103682 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8103686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103688:	699a      	ldr	r2, [r3, #24]
 810368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810368c:	18d1      	adds	r1, r2, r3
 810368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8103692:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8103694:	f7ff ff04 	bl	81034a0 <prvInsertTimerInActiveList>
					break;
 8103698:	e017      	b.n	81036ca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810369a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810369c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81036a0:	f003 0302 	and.w	r3, r3, #2
 81036a4:	2b00      	cmp	r3, #0
 81036a6:	d103      	bne.n	81036b0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 81036a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81036aa:	f7fd fd3d 	bl	8101128 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 81036ae:	e00c      	b.n	81036ca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81036b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81036b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81036b6:	f023 0301 	bic.w	r3, r3, #1
 81036ba:	b2da      	uxtb	r2, r3
 81036bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81036be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 81036c2:	e002      	b.n	81036ca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 81036c4:	bf00      	nop
 81036c6:	e000      	b.n	81036ca <prvProcessReceivedCommands+0x1a6>
					break;
 81036c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81036ca:	4b08      	ldr	r3, [pc, #32]	@ (81036ec <prvProcessReceivedCommands+0x1c8>)
 81036cc:	681b      	ldr	r3, [r3, #0]
 81036ce:	1d39      	adds	r1, r7, #4
 81036d0:	2200      	movs	r2, #0
 81036d2:	4618      	mov	r0, r3
 81036d4:	f7fe fbfc 	bl	8101ed0 <xQueueReceive>
 81036d8:	4603      	mov	r3, r0
 81036da:	2b00      	cmp	r3, #0
 81036dc:	f47f af26 	bne.w	810352c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 81036e0:	bf00      	nop
 81036e2:	bf00      	nop
 81036e4:	3730      	adds	r7, #48	@ 0x30
 81036e6:	46bd      	mov	sp, r7
 81036e8:	bd80      	pop	{r7, pc}
 81036ea:	bf00      	nop
 81036ec:	10004898 	.word	0x10004898

081036f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 81036f0:	b580      	push	{r7, lr}
 81036f2:	b088      	sub	sp, #32
 81036f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81036f6:	e049      	b.n	810378c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81036f8:	4b2e      	ldr	r3, [pc, #184]	@ (81037b4 <prvSwitchTimerLists+0xc4>)
 81036fa:	681b      	ldr	r3, [r3, #0]
 81036fc:	68db      	ldr	r3, [r3, #12]
 81036fe:	681b      	ldr	r3, [r3, #0]
 8103700:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8103702:	4b2c      	ldr	r3, [pc, #176]	@ (81037b4 <prvSwitchTimerLists+0xc4>)
 8103704:	681b      	ldr	r3, [r3, #0]
 8103706:	68db      	ldr	r3, [r3, #12]
 8103708:	68db      	ldr	r3, [r3, #12]
 810370a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810370c:	68fb      	ldr	r3, [r7, #12]
 810370e:	3304      	adds	r3, #4
 8103710:	4618      	mov	r0, r3
 8103712:	f7fd feb3 	bl	810147c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8103716:	68fb      	ldr	r3, [r7, #12]
 8103718:	6a1b      	ldr	r3, [r3, #32]
 810371a:	68f8      	ldr	r0, [r7, #12]
 810371c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810371e:	68fb      	ldr	r3, [r7, #12]
 8103720:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8103724:	f003 0304 	and.w	r3, r3, #4
 8103728:	2b00      	cmp	r3, #0
 810372a:	d02f      	beq.n	810378c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810372c:	68fb      	ldr	r3, [r7, #12]
 810372e:	699b      	ldr	r3, [r3, #24]
 8103730:	693a      	ldr	r2, [r7, #16]
 8103732:	4413      	add	r3, r2
 8103734:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8103736:	68ba      	ldr	r2, [r7, #8]
 8103738:	693b      	ldr	r3, [r7, #16]
 810373a:	429a      	cmp	r2, r3
 810373c:	d90e      	bls.n	810375c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810373e:	68fb      	ldr	r3, [r7, #12]
 8103740:	68ba      	ldr	r2, [r7, #8]
 8103742:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8103744:	68fb      	ldr	r3, [r7, #12]
 8103746:	68fa      	ldr	r2, [r7, #12]
 8103748:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810374a:	4b1a      	ldr	r3, [pc, #104]	@ (81037b4 <prvSwitchTimerLists+0xc4>)
 810374c:	681a      	ldr	r2, [r3, #0]
 810374e:	68fb      	ldr	r3, [r7, #12]
 8103750:	3304      	adds	r3, #4
 8103752:	4619      	mov	r1, r3
 8103754:	4610      	mov	r0, r2
 8103756:	f7fd fe58 	bl	810140a <vListInsert>
 810375a:	e017      	b.n	810378c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810375c:	2300      	movs	r3, #0
 810375e:	9300      	str	r3, [sp, #0]
 8103760:	2300      	movs	r3, #0
 8103762:	693a      	ldr	r2, [r7, #16]
 8103764:	2100      	movs	r1, #0
 8103766:	68f8      	ldr	r0, [r7, #12]
 8103768:	f7ff fd58 	bl	810321c <xTimerGenericCommand>
 810376c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	2b00      	cmp	r3, #0
 8103772:	d10b      	bne.n	810378c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8103774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8103778:	f383 8811 	msr	BASEPRI, r3
 810377c:	f3bf 8f6f 	isb	sy
 8103780:	f3bf 8f4f 	dsb	sy
 8103784:	603b      	str	r3, [r7, #0]
}
 8103786:	bf00      	nop
 8103788:	bf00      	nop
 810378a:	e7fd      	b.n	8103788 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810378c:	4b09      	ldr	r3, [pc, #36]	@ (81037b4 <prvSwitchTimerLists+0xc4>)
 810378e:	681b      	ldr	r3, [r3, #0]
 8103790:	681b      	ldr	r3, [r3, #0]
 8103792:	2b00      	cmp	r3, #0
 8103794:	d1b0      	bne.n	81036f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8103796:	4b07      	ldr	r3, [pc, #28]	@ (81037b4 <prvSwitchTimerLists+0xc4>)
 8103798:	681b      	ldr	r3, [r3, #0]
 810379a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810379c:	4b06      	ldr	r3, [pc, #24]	@ (81037b8 <prvSwitchTimerLists+0xc8>)
 810379e:	681b      	ldr	r3, [r3, #0]
 81037a0:	4a04      	ldr	r2, [pc, #16]	@ (81037b4 <prvSwitchTimerLists+0xc4>)
 81037a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 81037a4:	4a04      	ldr	r2, [pc, #16]	@ (81037b8 <prvSwitchTimerLists+0xc8>)
 81037a6:	697b      	ldr	r3, [r7, #20]
 81037a8:	6013      	str	r3, [r2, #0]
}
 81037aa:	bf00      	nop
 81037ac:	3718      	adds	r7, #24
 81037ae:	46bd      	mov	sp, r7
 81037b0:	bd80      	pop	{r7, pc}
 81037b2:	bf00      	nop
 81037b4:	10004890 	.word	0x10004890
 81037b8:	10004894 	.word	0x10004894

081037bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 81037bc:	b580      	push	{r7, lr}
 81037be:	b082      	sub	sp, #8
 81037c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 81037c2:	f7fd ffb9 	bl	8101738 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 81037c6:	4b15      	ldr	r3, [pc, #84]	@ (810381c <prvCheckForValidListAndQueue+0x60>)
 81037c8:	681b      	ldr	r3, [r3, #0]
 81037ca:	2b00      	cmp	r3, #0
 81037cc:	d120      	bne.n	8103810 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 81037ce:	4814      	ldr	r0, [pc, #80]	@ (8103820 <prvCheckForValidListAndQueue+0x64>)
 81037d0:	f7fd fdca 	bl	8101368 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 81037d4:	4813      	ldr	r0, [pc, #76]	@ (8103824 <prvCheckForValidListAndQueue+0x68>)
 81037d6:	f7fd fdc7 	bl	8101368 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 81037da:	4b13      	ldr	r3, [pc, #76]	@ (8103828 <prvCheckForValidListAndQueue+0x6c>)
 81037dc:	4a10      	ldr	r2, [pc, #64]	@ (8103820 <prvCheckForValidListAndQueue+0x64>)
 81037de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 81037e0:	4b12      	ldr	r3, [pc, #72]	@ (810382c <prvCheckForValidListAndQueue+0x70>)
 81037e2:	4a10      	ldr	r2, [pc, #64]	@ (8103824 <prvCheckForValidListAndQueue+0x68>)
 81037e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 81037e6:	2300      	movs	r3, #0
 81037e8:	9300      	str	r3, [sp, #0]
 81037ea:	4b11      	ldr	r3, [pc, #68]	@ (8103830 <prvCheckForValidListAndQueue+0x74>)
 81037ec:	4a11      	ldr	r2, [pc, #68]	@ (8103834 <prvCheckForValidListAndQueue+0x78>)
 81037ee:	2110      	movs	r1, #16
 81037f0:	200a      	movs	r0, #10
 81037f2:	f7fe f92d 	bl	8101a50 <xQueueGenericCreateStatic>
 81037f6:	4603      	mov	r3, r0
 81037f8:	4a08      	ldr	r2, [pc, #32]	@ (810381c <prvCheckForValidListAndQueue+0x60>)
 81037fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 81037fc:	4b07      	ldr	r3, [pc, #28]	@ (810381c <prvCheckForValidListAndQueue+0x60>)
 81037fe:	681b      	ldr	r3, [r3, #0]
 8103800:	2b00      	cmp	r3, #0
 8103802:	d005      	beq.n	8103810 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8103804:	4b05      	ldr	r3, [pc, #20]	@ (810381c <prvCheckForValidListAndQueue+0x60>)
 8103806:	681b      	ldr	r3, [r3, #0]
 8103808:	490b      	ldr	r1, [pc, #44]	@ (8103838 <prvCheckForValidListAndQueue+0x7c>)
 810380a:	4618      	mov	r0, r3
 810380c:	f7fe fd52 	bl	81022b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8103810:	f7fd ffc4 	bl	810179c <vPortExitCritical>
}
 8103814:	bf00      	nop
 8103816:	46bd      	mov	sp, r7
 8103818:	bd80      	pop	{r7, pc}
 810381a:	bf00      	nop
 810381c:	10004898 	.word	0x10004898
 8103820:	10004868 	.word	0x10004868
 8103824:	1000487c 	.word	0x1000487c
 8103828:	10004890 	.word	0x10004890
 810382c:	10004894 	.word	0x10004894
 8103830:	10004944 	.word	0x10004944
 8103834:	100048a4 	.word	0x100048a4
 8103838:	081038e4 	.word	0x081038e4

0810383c <memset>:
 810383c:	4402      	add	r2, r0
 810383e:	4603      	mov	r3, r0
 8103840:	4293      	cmp	r3, r2
 8103842:	d100      	bne.n	8103846 <memset+0xa>
 8103844:	4770      	bx	lr
 8103846:	f803 1b01 	strb.w	r1, [r3], #1
 810384a:	e7f9      	b.n	8103840 <memset+0x4>

0810384c <__libc_init_array>:
 810384c:	b570      	push	{r4, r5, r6, lr}
 810384e:	4d0d      	ldr	r5, [pc, #52]	@ (8103884 <__libc_init_array+0x38>)
 8103850:	4c0d      	ldr	r4, [pc, #52]	@ (8103888 <__libc_init_array+0x3c>)
 8103852:	1b64      	subs	r4, r4, r5
 8103854:	10a4      	asrs	r4, r4, #2
 8103856:	2600      	movs	r6, #0
 8103858:	42a6      	cmp	r6, r4
 810385a:	d109      	bne.n	8103870 <__libc_init_array+0x24>
 810385c:	4d0b      	ldr	r5, [pc, #44]	@ (810388c <__libc_init_array+0x40>)
 810385e:	4c0c      	ldr	r4, [pc, #48]	@ (8103890 <__libc_init_array+0x44>)
 8103860:	f000 f826 	bl	81038b0 <_init>
 8103864:	1b64      	subs	r4, r4, r5
 8103866:	10a4      	asrs	r4, r4, #2
 8103868:	2600      	movs	r6, #0
 810386a:	42a6      	cmp	r6, r4
 810386c:	d105      	bne.n	810387a <__libc_init_array+0x2e>
 810386e:	bd70      	pop	{r4, r5, r6, pc}
 8103870:	f855 3b04 	ldr.w	r3, [r5], #4
 8103874:	4798      	blx	r3
 8103876:	3601      	adds	r6, #1
 8103878:	e7ee      	b.n	8103858 <__libc_init_array+0xc>
 810387a:	f855 3b04 	ldr.w	r3, [r5], #4
 810387e:	4798      	blx	r3
 8103880:	3601      	adds	r6, #1
 8103882:	e7f2      	b.n	810386a <__libc_init_array+0x1e>
 8103884:	08103928 	.word	0x08103928
 8103888:	08103928 	.word	0x08103928
 810388c:	08103928 	.word	0x08103928
 8103890:	0810392c 	.word	0x0810392c

08103894 <memcpy>:
 8103894:	440a      	add	r2, r1
 8103896:	4291      	cmp	r1, r2
 8103898:	f100 33ff 	add.w	r3, r0, #4294967295
 810389c:	d100      	bne.n	81038a0 <memcpy+0xc>
 810389e:	4770      	bx	lr
 81038a0:	b510      	push	{r4, lr}
 81038a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 81038a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 81038aa:	4291      	cmp	r1, r2
 81038ac:	d1f9      	bne.n	81038a2 <memcpy+0xe>
 81038ae:	bd10      	pop	{r4, pc}

081038b0 <_init>:
 81038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81038b2:	bf00      	nop
 81038b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81038b6:	bc08      	pop	{r3}
 81038b8:	469e      	mov	lr, r3
 81038ba:	4770      	bx	lr

081038bc <_fini>:
 81038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81038be:	bf00      	nop
 81038c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81038c2:	bc08      	pop	{r3}
 81038c4:	469e      	mov	lr, r3
 81038c6:	4770      	bx	lr
