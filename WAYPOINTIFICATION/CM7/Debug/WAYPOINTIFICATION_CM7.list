
WAYPOINTIFICATION_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006788  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08006a28  08006a28  00007a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aa4  08006aa4  00008030  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006aa4  08006aa4  00007aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006aac  08006aac  00008030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aac  08006aac  00007aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ab0  08006ab0  00007ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  24000000  08006ab4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a20  24000030  08006ae4  00008030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004a50  08006ae4  00008a50  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2f9  00000000  00000000  0000805e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a2  00000000  00000000  00022357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  00025900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eea  00000000  00000000  00026c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ad91  00000000  00000000  00027b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f51  00000000  00000000  000628eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00187510  00000000  00000000  0007a83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00201d4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050b4  00000000  00000000  00201d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00206e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000030 	.word	0x24000030
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006a10 	.word	0x08006a10

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000034 	.word	0x24000034
 80002dc:	08006a10 	.word	0x08006a10

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000610:	4b49      	ldr	r3, [pc, #292]	@ (8000738 <SystemInit+0x12c>)
 8000612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000616:	4a48      	ldr	r2, [pc, #288]	@ (8000738 <SystemInit+0x12c>)
 8000618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800061c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000620:	4b45      	ldr	r3, [pc, #276]	@ (8000738 <SystemInit+0x12c>)
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	4a44      	ldr	r2, [pc, #272]	@ (8000738 <SystemInit+0x12c>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062c:	4b43      	ldr	r3, [pc, #268]	@ (800073c <SystemInit+0x130>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f003 030f 	and.w	r3, r3, #15
 8000634:	2b06      	cmp	r3, #6
 8000636:	d807      	bhi.n	8000648 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000638:	4b40      	ldr	r3, [pc, #256]	@ (800073c <SystemInit+0x130>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f023 030f 	bic.w	r3, r3, #15
 8000640:	4a3e      	ldr	r2, [pc, #248]	@ (800073c <SystemInit+0x130>)
 8000642:	f043 0307 	orr.w	r3, r3, #7
 8000646:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000648:	4b3d      	ldr	r3, [pc, #244]	@ (8000740 <SystemInit+0x134>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a3c      	ldr	r2, [pc, #240]	@ (8000740 <SystemInit+0x134>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000654:	4b3a      	ldr	r3, [pc, #232]	@ (8000740 <SystemInit+0x134>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800065a:	4b39      	ldr	r3, [pc, #228]	@ (8000740 <SystemInit+0x134>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4938      	ldr	r1, [pc, #224]	@ (8000740 <SystemInit+0x134>)
 8000660:	4b38      	ldr	r3, [pc, #224]	@ (8000744 <SystemInit+0x138>)
 8000662:	4013      	ands	r3, r2
 8000664:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000666:	4b35      	ldr	r3, [pc, #212]	@ (800073c <SystemInit+0x130>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f003 0308 	and.w	r3, r3, #8
 800066e:	2b00      	cmp	r3, #0
 8000670:	d007      	beq.n	8000682 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000672:	4b32      	ldr	r3, [pc, #200]	@ (800073c <SystemInit+0x130>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f023 030f 	bic.w	r3, r3, #15
 800067a:	4a30      	ldr	r2, [pc, #192]	@ (800073c <SystemInit+0x130>)
 800067c:	f043 0307 	orr.w	r3, r3, #7
 8000680:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000682:	4b2f      	ldr	r3, [pc, #188]	@ (8000740 <SystemInit+0x134>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000688:	4b2d      	ldr	r3, [pc, #180]	@ (8000740 <SystemInit+0x134>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800068e:	4b2c      	ldr	r3, [pc, #176]	@ (8000740 <SystemInit+0x134>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <SystemInit+0x134>)
 8000696:	4a2c      	ldr	r2, [pc, #176]	@ (8000748 <SystemInit+0x13c>)
 8000698:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800069a:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <SystemInit+0x134>)
 800069c:	4a2b      	ldr	r2, [pc, #172]	@ (800074c <SystemInit+0x140>)
 800069e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006a0:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <SystemInit+0x134>)
 80006a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000750 <SystemInit+0x144>)
 80006a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006a6:	4b26      	ldr	r3, [pc, #152]	@ (8000740 <SystemInit+0x134>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006ac:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <SystemInit+0x134>)
 80006ae:	4a28      	ldr	r2, [pc, #160]	@ (8000750 <SystemInit+0x144>)
 80006b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006b2:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <SystemInit+0x134>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b8:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <SystemInit+0x134>)
 80006ba:	4a25      	ldr	r2, [pc, #148]	@ (8000750 <SystemInit+0x144>)
 80006bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006be:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <SystemInit+0x134>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <SystemInit+0x134>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000740 <SystemInit+0x134>)
 80006ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <SystemInit+0x134>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <SystemInit+0x148>)
 80006d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006da:	4a1e      	ldr	r2, [pc, #120]	@ (8000754 <SystemInit+0x148>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e0:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <SystemInit+0x14c>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <SystemInit+0x150>)
 80006e8:	4013      	ands	r3, r2
 80006ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006ee:	d202      	bcs.n	80006f6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <SystemInit+0x154>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006f6:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <SystemInit+0x134>)
 80006f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000700:	2b00      	cmp	r3, #0
 8000702:	d113      	bne.n	800072c <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000704:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <SystemInit+0x134>)
 8000706:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800070a:	4a0d      	ldr	r2, [pc, #52]	@ (8000740 <SystemInit+0x134>)
 800070c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000710:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000714:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <SystemInit+0x158>)
 8000716:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800071a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800071c:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <SystemInit+0x134>)
 800071e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000722:	4a07      	ldr	r2, [pc, #28]	@ (8000740 <SystemInit+0x134>)
 8000724:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000728:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00
 800073c:	52002000 	.word	0x52002000
 8000740:	58024400 	.word	0x58024400
 8000744:	eaf6ed7f 	.word	0xeaf6ed7f
 8000748:	02020200 	.word	0x02020200
 800074c:	01ff0000 	.word	0x01ff0000
 8000750:	01010280 	.word	0x01010280
 8000754:	580000c0 	.word	0x580000c0
 8000758:	5c001000 	.word	0x5c001000
 800075c:	ffff0000 	.word	0xffff0000
 8000760:	51008108 	.word	0x51008108
 8000764:	52004000 	.word	0x52004000

08000768 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <ExitRun0Mode+0x2c>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	4a08      	ldr	r2, [pc, #32]	@ (8000794 <ExitRun0Mode+0x2c>)
 8000772:	f023 0302 	bic.w	r3, r3, #2
 8000776:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000778:	bf00      	nop
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <ExitRun0Mode+0x2c>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f9      	beq.n	800077a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	58024800 	.word	0x58024800

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800079e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007a4:	bf00      	nop
 80007a6:	4b3a      	ldr	r3, [pc, #232]	@ (8000890 <main+0xf8>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d004      	beq.n	80007bc <main+0x24>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	1e5a      	subs	r2, r3, #1
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dcf4      	bgt.n	80007a6 <main+0xe>
  if ( timeout < 0 )
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	da01      	bge.n	80007c6 <main+0x2e>
  {
  Error_Handler();
 80007c2:	f000 f9a0 	bl	8000b06 <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f000 fc11 	bl	8000fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f86b 	bl	80008a4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007ce:	4b30      	ldr	r3, [pc, #192]	@ (8000890 <main+0xf8>)
 80007d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d4:	4a2e      	ldr	r2, [pc, #184]	@ (8000890 <main+0xf8>)
 80007d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007de:	4b2c      	ldr	r3, [pc, #176]	@ (8000890 <main+0xf8>)
 80007e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f001 f811 	bl	8001814 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007f2:	2100      	movs	r1, #0
 80007f4:	2000      	movs	r0, #0
 80007f6:	f001 f827 	bl	8001848 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007fe:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000800:	bf00      	nop
 8000802:	4b23      	ldr	r3, [pc, #140]	@ (8000890 <main+0xf8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800080a:	2b00      	cmp	r3, #0
 800080c:	d104      	bne.n	8000818 <main+0x80>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	1e5a      	subs	r2, r3, #1
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	2b00      	cmp	r3, #0
 8000816:	dcf4      	bgt.n	8000802 <main+0x6a>
if ( timeout < 0 )
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	da01      	bge.n	8000822 <main+0x8a>
{
Error_Handler();
 800081e:	f000 f972 	bl	8000b06 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000822:	f000 f8bb 	bl	800099c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000826:	f003 fb37 	bl	8003e98 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800082a:	4a1a      	ldr	r2, [pc, #104]	@ (8000894 <main+0xfc>)
 800082c:	2100      	movs	r1, #0
 800082e:	481a      	ldr	r0, [pc, #104]	@ (8000898 <main+0x100>)
 8000830:	f003 fb7c 	bl	8003f2c <osThreadNew>
 8000834:	4603      	mov	r3, r0
 8000836:	4a19      	ldr	r2, [pc, #100]	@ (800089c <main+0x104>)
 8000838:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800083a:	2000      	movs	r0, #0
 800083c:	f000 f9e4 	bl	8000c08 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000840:	2001      	movs	r0, #1
 8000842:	f000 f9e1 	bl	8000c08 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000846:	2002      	movs	r0, #2
 8000848:	f000 f9de 	bl	8000c08 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800084c:	2101      	movs	r1, #1
 800084e:	2000      	movs	r0, #0
 8000850:	f000 fa7a 	bl	8000d48 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <main+0x108>)
 8000856:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800085a:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800085c:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <main+0x108>)
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <main+0x108>)
 8000864:	2200      	movs	r2, #0
 8000866:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000868:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <main+0x108>)
 800086a:	2200      	movs	r2, #0
 800086c:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800086e:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <main+0x108>)
 8000870:	2200      	movs	r2, #0
 8000872:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000874:	490a      	ldr	r1, [pc, #40]	@ (80008a0 <main+0x108>)
 8000876:	2000      	movs	r0, #0
 8000878:	f000 faf6 	bl	8000e68 <BSP_COM_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <main+0xee>
  {
    Error_Handler();
 8000882:	f000 f940 	bl	8000b06 <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 8000886:	f003 fb2b 	bl	8003ee0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800088a:	bf00      	nop
 800088c:	e7fd      	b.n	800088a <main+0xf2>
 800088e:	bf00      	nop
 8000890:	58024400 	.word	0x58024400
 8000894:	08006a5c 	.word	0x08006a5c
 8000898:	08000aed 	.word	0x08000aed
 800089c:	2400005c 	.word	0x2400005c
 80008a0:	2400004c 	.word	0x2400004c

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b09c      	sub	sp, #112	@ 0x70
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ae:	224c      	movs	r2, #76	@ 0x4c
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f006 f872 	bl	800699c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2220      	movs	r2, #32
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f006 f86c 	bl	800699c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008c4:	2004      	movs	r0, #4
 80008c6:	f000 ffd3 	bl	8001870 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b31      	ldr	r3, [pc, #196]	@ (8000994 <SystemClock_Config+0xf0>)
 80008d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d2:	4a30      	ldr	r2, [pc, #192]	@ (8000994 <SystemClock_Config+0xf0>)
 80008d4:	f023 0301 	bic.w	r3, r3, #1
 80008d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008da:	4b2e      	ldr	r3, [pc, #184]	@ (8000994 <SystemClock_Config+0xf0>)
 80008dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000998 <SystemClock_Config+0xf4>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a2b      	ldr	r2, [pc, #172]	@ (8000998 <SystemClock_Config+0xf4>)
 80008ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b29      	ldr	r3, [pc, #164]	@ (8000998 <SystemClock_Config+0xf4>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008fc:	bf00      	nop
 80008fe:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <SystemClock_Config+0xf4>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800090a:	d1f8      	bne.n	80008fe <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090c:	2302      	movs	r3, #2
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000910:	2301      	movs	r3, #1
 8000912:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000914:	2340      	movs	r3, #64	@ 0x40
 8000916:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000918:	2302      	movs	r3, #2
 800091a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800091c:	2300      	movs	r3, #0
 800091e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000920:	2304      	movs	r3, #4
 8000922:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 41;
 8000924:	2329      	movs	r3, #41	@ 0x29
 8000926:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000928:	2302      	movs	r3, #2
 800092a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800092c:	2305      	movs	r3, #5
 800092e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000930:	2302      	movs	r3, #2
 8000932:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000934:	230c      	movs	r3, #12
 8000936:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000938:	2300      	movs	r3, #0
 800093a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 800093c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000940:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000946:	4618      	mov	r0, r3
 8000948:	f000 ffec 	bl	8001924 <HAL_RCC_OscConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000952:	f000 f8d8 	bl	8000b06 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000956:	233f      	movs	r3, #63	@ 0x3f
 8000958:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095a:	2303      	movs	r3, #3
 800095c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000962:	2308      	movs	r3, #8
 8000964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000966:	2340      	movs	r3, #64	@ 0x40
 8000968:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800096a:	2340      	movs	r3, #64	@ 0x40
 800096c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800096e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000972:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000974:	2340      	movs	r3, #64	@ 0x40
 8000976:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2102      	movs	r1, #2
 800097c:	4618      	mov	r0, r3
 800097e:	f001 fc2b 	bl	80021d8 <HAL_RCC_ClockConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000988:	f000 f8bd 	bl	8000b06 <Error_Handler>
  }
}
 800098c:	bf00      	nop
 800098e:	3770      	adds	r7, #112	@ 0x70
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	58000400 	.word	0x58000400
 8000998:	58024800 	.word	0x58024800

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	@ 0x28
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4b49      	ldr	r3, [pc, #292]	@ (8000ad8 <MX_GPIO_Init+0x13c>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b8:	4a47      	ldr	r2, [pc, #284]	@ (8000ad8 <MX_GPIO_Init+0x13c>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c2:	4b45      	ldr	r3, [pc, #276]	@ (8000ad8 <MX_GPIO_Init+0x13c>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c8:	f003 0304 	and.w	r3, r3, #4
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b41      	ldr	r3, [pc, #260]	@ (8000ad8 <MX_GPIO_Init+0x13c>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d6:	4a40      	ldr	r2, [pc, #256]	@ (8000ad8 <MX_GPIO_Init+0x13c>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad8 <MX_GPIO_Init+0x13c>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b3a      	ldr	r3, [pc, #232]	@ (8000ad8 <MX_GPIO_Init+0x13c>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f4:	4a38      	ldr	r2, [pc, #224]	@ (8000ad8 <MX_GPIO_Init+0x13c>)
 80009f6:	f043 0302 	orr.w	r3, r3, #2
 80009fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009fe:	4b36      	ldr	r3, [pc, #216]	@ (8000ad8 <MX_GPIO_Init+0x13c>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a0c:	4b32      	ldr	r3, [pc, #200]	@ (8000ad8 <MX_GPIO_Init+0x13c>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a12:	4a31      	ldr	r2, [pc, #196]	@ (8000ad8 <MX_GPIO_Init+0x13c>)
 8000a14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad8 <MX_GPIO_Init+0x13c>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a2a:	2332      	movs	r3, #50	@ 0x32
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a3a:	230b      	movs	r3, #11
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	4825      	ldr	r0, [pc, #148]	@ (8000adc <MX_GPIO_Init+0x140>)
 8000a46:	f000 fd01 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a4a:	2386      	movs	r3, #134	@ 0x86
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a5a:	230b      	movs	r3, #11
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	481e      	ldr	r0, [pc, #120]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 8000a66:	f000 fcf1 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a7c:	230b      	movs	r3, #11
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4817      	ldr	r0, [pc, #92]	@ (8000ae4 <MX_GPIO_Init+0x148>)
 8000a88:	f000 fce0 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000a8c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480d      	ldr	r0, [pc, #52]	@ (8000ae0 <MX_GPIO_Init+0x144>)
 8000aaa:	f000 fccf 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000aae:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac0:	230b      	movs	r3, #11
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4807      	ldr	r0, [pc, #28]	@ (8000ae8 <MX_GPIO_Init+0x14c>)
 8000acc:	f000 fcbe 	bl	800144c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	@ 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	58024400 	.word	0x58024400
 8000adc:	58020800 	.word	0x58020800
 8000ae0:	58020000 	.word	0x58020000
 8000ae4:	58020400 	.word	0x58020400
 8000ae8:	58021800 	.word	0x58021800

08000aec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		BSP_LED_Toggle(LED_RED);
 8000af4:	2002      	movs	r0, #2
 8000af6:	f000 f8fd 	bl	8000cf4 <BSP_LED_Toggle>
		osDelay(333);
 8000afa:	f240 104d 	movw	r0, #333	@ 0x14d
 8000afe:	f003 faa7 	bl	8004050 <osDelay>
		BSP_LED_Toggle(LED_RED);
 8000b02:	bf00      	nop
 8000b04:	e7f6      	b.n	8000af4 <StartDefaultTask+0x8>

08000b06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0a:	b672      	cpsid	i
}
 8000b0c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0e:	bf00      	nop
 8000b10:	e7fd      	b.n	8000b0e <Error_Handler+0x8>
	...

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <HAL_MspInit+0x38>)
 8000b1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b20:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <HAL_MspInit+0x38>)
 8000b22:	f043 0302 	orr.w	r3, r3, #2
 8000b26:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <HAL_MspInit+0x38>)
 8000b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	f06f 0001 	mvn.w	r0, #1
 8000b40:	f000 fbcd 	bl	80012de <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58024400 	.word	0x58024400

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <NMI_Handler+0x4>

08000b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <MemManage_Handler+0x4>

08000b68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8a:	f000 faa1 	bl	80010d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b8e:	f005 fac9 	bl	8006124 <xTaskGetSchedulerState>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d001      	beq.n	8000b9c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b98:	f003 ff0e 	bl	80049b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 f941 	bl	8000e2c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bb0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000bec <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000bb4:	f7ff fdd8 	bl	8000768 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb8:	f7ff fd28 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bbc:	480c      	ldr	r0, [pc, #48]	@ (8000bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bbe:	490d      	ldr	r1, [pc, #52]	@ (8000bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000be2:	f005 fee3 	bl	80069ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be6:	f7ff fdd7 	bl	8000798 <main>
  bx  lr
 8000bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bf0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bf4:	24000030 	.word	0x24000030
  ldr r2, =_sidata
 8000bf8:	08006ab4 	.word	0x08006ab4
  ldr r2, =_sbss
 8000bfc:	24000030 	.word	0x24000030
  ldr r4, =_ebss
 8000c00:	24004a50 	.word	0x24004a50

08000c04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC3_IRQHandler>
	...

08000c08 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	@ 0x30
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d009      	beq.n	8000c30 <BSP_LED_Init+0x28>
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d006      	beq.n	8000c30 <BSP_LED_Init+0x28>
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d003      	beq.n	8000c30 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c28:	f06f 0301 	mvn.w	r3, #1
 8000c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c2e:	e055      	b.n	8000cdc <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10f      	bne.n	8000c56 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000c36:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce8 <BSP_LED_Init+0xe0>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8000ce8 <BSP_LED_Init+0xe0>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c46:	4b28      	ldr	r3, [pc, #160]	@ (8000ce8 <BSP_LED_Init+0xe0>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	e021      	b.n	8000c9a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d10f      	bne.n	8000c7c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000c5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ce8 <BSP_LED_Init+0xe0>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c62:	4a21      	ldr	r2, [pc, #132]	@ (8000ce8 <BSP_LED_Init+0xe0>)
 8000c64:	f043 0310 	orr.w	r3, r3, #16
 8000c68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <BSP_LED_Init+0xe0>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	e00e      	b.n	8000c9a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <BSP_LED_Init+0xe0>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c82:	4a19      	ldr	r2, [pc, #100]	@ (8000ce8 <BSP_LED_Init+0xe0>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <BSP_LED_Init+0xe0>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4a13      	ldr	r2, [pc, #76]	@ (8000cec <BSP_LED_Init+0xe4>)
 8000c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ca2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf0 <BSP_LED_Init+0xe8>)
 8000cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb8:	f107 0218 	add.w	r2, r7, #24
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fbc4 	bl	800144c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <BSP_LED_Init+0xe8>)
 8000cc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	4a07      	ldr	r2, [pc, #28]	@ (8000cec <BSP_LED_Init+0xe4>)
 8000cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f000 fd68 	bl	80017ac <HAL_GPIO_WritePin>
  }

  return ret;
 8000cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3730      	adds	r7, #48	@ 0x30
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	08006a80 	.word	0x08006a80
 8000cf0:	2400000c 	.word	0x2400000c

08000cf4 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d009      	beq.n	8000d1c <BSP_LED_Toggle+0x28>
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d006      	beq.n	8000d1c <BSP_LED_Toggle+0x28>
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d003      	beq.n	8000d1c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d14:	f06f 0301 	mvn.w	r3, #1
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	e00b      	b.n	8000d34 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	4a08      	ldr	r2, [pc, #32]	@ (8000d40 <BSP_LED_Toggle+0x4c>)
 8000d20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	4907      	ldr	r1, [pc, #28]	@ (8000d44 <BSP_LED_Toggle+0x50>)
 8000d28:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4610      	mov	r0, r2
 8000d30:	f000 fd55 	bl	80017de <HAL_GPIO_TogglePin>
  }

  return ret;
 8000d34:	68fb      	ldr	r3, [r7, #12]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2400000c 	.word	0x2400000c
 8000d44:	08006a80 	.word	0x08006a80

08000d48 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4613      	mov	r3, r2
 8000d56:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000d58:	4b2e      	ldr	r3, [pc, #184]	@ (8000e14 <BSP_PB_Init+0xcc>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5e:	4a2d      	ldr	r2, [pc, #180]	@ (8000e14 <BSP_PB_Init+0xcc>)
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d68:	4b2a      	ldr	r3, [pc, #168]	@ (8000e14 <BSP_PB_Init+0xcc>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000d76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d7a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000d84:	79bb      	ldrb	r3, [r7, #6]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10c      	bne.n	8000da4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <BSP_PB_Init+0xd0>)
 8000d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d96:	f107 020c 	add.w	r2, r7, #12
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 fb55 	bl	800144c <HAL_GPIO_Init>
 8000da2:	e031      	b.n	8000e08 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000da4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000da8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	4a1a      	ldr	r2, [pc, #104]	@ (8000e18 <BSP_PB_Init+0xd0>)
 8000dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db2:	f107 020c 	add.w	r2, r7, #12
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fb47 	bl	800144c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	4a16      	ldr	r2, [pc, #88]	@ (8000e1c <BSP_PB_Init+0xd4>)
 8000dc4:	441a      	add	r2, r3
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	4915      	ldr	r1, [pc, #84]	@ (8000e20 <BSP_PB_Init+0xd8>)
 8000dca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	f000 faea 	bl	80013aa <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	4a10      	ldr	r2, [pc, #64]	@ (8000e1c <BSP_PB_Init+0xd4>)
 8000ddc:	1898      	adds	r0, r3, r2
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	4a10      	ldr	r2, [pc, #64]	@ (8000e24 <BSP_PB_Init+0xdc>)
 8000de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de6:	461a      	mov	r2, r3
 8000de8:	2100      	movs	r1, #0
 8000dea:	f000 fabf 	bl	800136c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000dee:	2028      	movs	r0, #40	@ 0x28
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4a0d      	ldr	r2, [pc, #52]	@ (8000e28 <BSP_PB_Init+0xe0>)
 8000df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f000 fa6f 	bl	80012de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000e00:	2328      	movs	r3, #40	@ 0x28
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 fa85 	bl	8001312 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	58024400 	.word	0x58024400
 8000e18:	24000018 	.word	0x24000018
 8000e1c:	24000060 	.word	0x24000060
 8000e20:	08006a88 	.word	0x08006a88
 8000e24:	2400001c 	.word	0x2400001c
 8000e28:	24000020 	.word	0x24000020

08000e2c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	4a04      	ldr	r2, [pc, #16]	@ (8000e4c <BSP_PB_IRQHandler+0x20>)
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 fac8 	bl	80013d4 <HAL_EXTI_IRQHandler>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	24000060 	.word	0x24000060

08000e50 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e7e:	f06f 0301 	mvn.w	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	e018      	b.n	8000eb8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2294      	movs	r2, #148	@ 0x94
 8000e8a:	fb02 f303 	mul.w	r3, r2, r3
 8000e8e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <BSP_COM_Init+0x5c>)
 8000e90:	4413      	add	r3, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f852 	bl	8000f3c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2294      	movs	r2, #148	@ 0x94
 8000e9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ea0:	4a08      	ldr	r2, [pc, #32]	@ (8000ec4 <BSP_COM_Init+0x5c>)
 8000ea2:	4413      	add	r3, r2
 8000ea4:	6839      	ldr	r1, [r7, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f80e 	bl	8000ec8 <MX_USART3_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d002      	beq.n	8000eb8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000eb2:	f06f 0303 	mvn.w	r3, #3
 8000eb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	24000068 	.word	0x24000068

08000ec8 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <MX_USART3_Init+0x60>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	220c      	movs	r2, #12
 8000ee6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	895b      	ldrh	r3, [r3, #10]
 8000eec:	461a      	mov	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	891b      	ldrh	r3, [r3, #8]
 8000efe:	461a      	mov	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	899b      	ldrh	r3, [r3, #12]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f14:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f001 ffa8 	bl	8002e6c <HAL_UART_Init>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	24000008 	.word	0x24000008

08000f2c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff ff8d 	bl	8000e50 <BSP_PB_Callback>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	@ 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000f44:	4b27      	ldr	r3, [pc, #156]	@ (8000fe4 <COM1_MspInit+0xa8>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4a:	4a26      	ldr	r2, [pc, #152]	@ (8000fe4 <COM1_MspInit+0xa8>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f54:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <COM1_MspInit+0xa8>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000f62:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <COM1_MspInit+0xa8>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f68:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe4 <COM1_MspInit+0xa8>)
 8000f6a:	f043 0308 	orr.w	r3, r3, #8
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f72:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <COM1_MspInit+0xa8>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000f80:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <COM1_MspInit+0xa8>)
 8000f82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f86:	4a17      	ldr	r2, [pc, #92]	@ (8000fe4 <COM1_MspInit+0xa8>)
 8000f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f90:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <COM1_MspInit+0xa8>)
 8000f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8000f9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fa2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000fb0:	2307      	movs	r3, #7
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480b      	ldr	r0, [pc, #44]	@ (8000fe8 <COM1_MspInit+0xac>)
 8000fbc:	f000 fa46 	bl	800144c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000fc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fc4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000fca:	2307      	movs	r3, #7
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <COM1_MspInit+0xac>)
 8000fd6:	f000 fa39 	bl	800144c <HAL_GPIO_Init>
}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	@ 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	58024400 	.word	0x58024400
 8000fe8:	58020c00 	.word	0x58020c00

08000fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f000 f968 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ff8:	f001 faa4 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <HAL_Init+0x68>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	0a1b      	lsrs	r3, r3, #8
 8001004:	f003 030f 	and.w	r3, r3, #15
 8001008:	4913      	ldr	r1, [pc, #76]	@ (8001058 <HAL_Init+0x6c>)
 800100a:	5ccb      	ldrb	r3, [r1, r3]
 800100c:	f003 031f 	and.w	r3, r3, #31
 8001010:	fa22 f303 	lsr.w	r3, r2, r3
 8001014:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <HAL_Init+0x68>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	4a0e      	ldr	r2, [pc, #56]	@ (8001058 <HAL_Init+0x6c>)
 8001020:	5cd3      	ldrb	r3, [r2, r3]
 8001022:	f003 031f 	and.w	r3, r3, #31
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	fa22 f303 	lsr.w	r3, r2, r3
 800102c:	4a0b      	ldr	r2, [pc, #44]	@ (800105c <HAL_Init+0x70>)
 800102e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001030:	4a0b      	ldr	r2, [pc, #44]	@ (8001060 <HAL_Init+0x74>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001036:	200f      	movs	r0, #15
 8001038:	f000 f814 	bl	8001064 <HAL_InitTick>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e002      	b.n	800104c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001046:	f7ff fd65 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	58024400 	.word	0x58024400
 8001058:	08006a4c 	.word	0x08006a4c
 800105c:	24000004 	.word	0x24000004
 8001060:	24000000 	.word	0x24000000

08001064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800106c:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <HAL_InitTick+0x60>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e021      	b.n	80010bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <HAL_InitTick+0x64>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <HAL_InitTick+0x60>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f94d 	bl	800132e <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 f917 	bl	80012de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	@ (80010cc <HAL_InitTick+0x68>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	24000028 	.word	0x24000028
 80010c8:	24000000 	.word	0x24000000
 80010cc:	24000024 	.word	0x24000024

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	24000028 	.word	0x24000028
 80010f4:	240000fc 	.word	0x240000fc

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	@ (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	240000fc 	.word	0x240000fc

08001110 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <HAL_GetREVID+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	0c1b      	lsrs	r3, r3, #16
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	5c001000 	.word	0x5c001000

08001128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <__NVIC_SetPriorityGrouping+0x40>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001144:	4013      	ands	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	4313      	orrs	r3, r2
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <__NVIC_SetPriorityGrouping+0x40>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00
 800116c:	05fa0000 	.word	0x05fa0000

08001170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001174:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <__NVIC_GetPriorityGrouping+0x18>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0307 	and.w	r3, r3, #7
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800119a:	2b00      	cmp	r3, #0
 800119c:	db0b      	blt.n	80011b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	4907      	ldr	r1, [pc, #28]	@ (80011c4 <__NVIC_EnableIRQ+0x38>)
 80011a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011aa:	095b      	lsrs	r3, r3, #5
 80011ac:	2001      	movs	r0, #1
 80011ae:	fa00 f202 	lsl.w	r2, r0, r2
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	@ (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	@ (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	@ 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	@ 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001294:	d301      	bcc.n	800129a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001296:	2301      	movs	r3, #1
 8001298:	e00f      	b.n	80012ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129a:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <SysTick_Config+0x40>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a2:	210f      	movs	r1, #15
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f7ff ff8e 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <SysTick_Config+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <SysTick_Config+0x40>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff29 	bl	8001128 <__NVIC_SetPriorityGrouping>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff40 	bl	8001170 <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff90 	bl	800121c <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5f 	bl	80011c8 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff33 	bl	800118c <__NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffa4 	bl	8001284 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_GetCurrentCPUID+0x20>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001354:	2b70      	cmp	r3, #112	@ 0x70
 8001356:	d101      	bne.n	800135c <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8001358:	2303      	movs	r3, #3
 800135a:	e000      	b.n	800135e <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 800135c:	2301      	movs	r3, #1
  }
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	460b      	mov	r3, r1
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e00a      	b.n	800139e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001388:	7afb      	ldrb	r3, [r7, #11]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d103      	bne.n	8001396 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	605a      	str	r2, [r3, #4]
      break;
 8001394:	e002      	b.n	800139c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	75fb      	strb	r3, [r7, #23]
      break;
 800139a:	bf00      	nop
  }

  return status;
 800139c:	7dfb      	ldrb	r3, [r7, #23]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	371c      	adds	r7, #28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e003      	b.n	80013c6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80013c4:	2300      	movs	r3, #0
  }
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	0c1b      	lsrs	r3, r3, #16
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 031f 	and.w	r3, r3, #31
 80013f0:	2201      	movs	r2, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80013f8:	f7ff ffa6 	bl	8001348 <HAL_GetCurrentCPUID>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b03      	cmp	r3, #3
 8001400:	d105      	bne.n	800140e <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	011a      	lsls	r2, r3, #4
 8001406:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <HAL_EXTI_IRQHandler+0x70>)
 8001408:	4413      	add	r3, r2
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e004      	b.n	8001418 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	011a      	lsls	r2, r3, #4
 8001412:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <HAL_EXTI_IRQHandler+0x74>)
 8001414:	4413      	add	r3, r2
 8001416:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	4013      	ands	r3, r2
 8001420:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d009      	beq.n	800143c <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4798      	blx	r3
    }
  }
}
 800143c:	bf00      	nop
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	58000088 	.word	0x58000088
 8001448:	580000c8 	.word	0x580000c8

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	@ 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800145a:	4b89      	ldr	r3, [pc, #548]	@ (8001680 <HAL_GPIO_Init+0x234>)
 800145c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800145e:	e194      	b.n	800178a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2101      	movs	r1, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 8186 	beq.w	8001784 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b01      	cmp	r3, #1
 8001482:	d005      	beq.n	8001490 <HAL_GPIO_Init+0x44>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d130      	bne.n	80014f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014c6:	2201      	movs	r2, #1
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	f003 0201 	and.w	r2, r3, #1
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d017      	beq.n	800152e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	2203      	movs	r2, #3
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d123      	bne.n	8001582 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	08da      	lsrs	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3208      	adds	r2, #8
 8001542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	691a      	ldr	r2, [r3, #16]
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	08da      	lsrs	r2, r3, #3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3208      	adds	r2, #8
 800157c:	69b9      	ldr	r1, [r7, #24]
 800157e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	2203      	movs	r2, #3
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0203 	and.w	r2, r3, #3
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 80e0 	beq.w	8001784 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001684 <HAL_GPIO_Init+0x238>)
 80015c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001684 <HAL_GPIO_Init+0x238>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001684 <HAL_GPIO_Init+0x238>)
 80015d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e2:	4a29      	ldr	r2, [pc, #164]	@ (8001688 <HAL_GPIO_Init+0x23c>)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3302      	adds	r3, #2
 80015ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	220f      	movs	r2, #15
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a20      	ldr	r2, [pc, #128]	@ (800168c <HAL_GPIO_Init+0x240>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d052      	beq.n	80016b4 <HAL_GPIO_Init+0x268>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a1f      	ldr	r2, [pc, #124]	@ (8001690 <HAL_GPIO_Init+0x244>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d031      	beq.n	800167a <HAL_GPIO_Init+0x22e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a1e      	ldr	r2, [pc, #120]	@ (8001694 <HAL_GPIO_Init+0x248>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d02b      	beq.n	8001676 <HAL_GPIO_Init+0x22a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a1d      	ldr	r2, [pc, #116]	@ (8001698 <HAL_GPIO_Init+0x24c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d025      	beq.n	8001672 <HAL_GPIO_Init+0x226>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a1c      	ldr	r2, [pc, #112]	@ (800169c <HAL_GPIO_Init+0x250>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d01f      	beq.n	800166e <HAL_GPIO_Init+0x222>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a1b      	ldr	r2, [pc, #108]	@ (80016a0 <HAL_GPIO_Init+0x254>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d019      	beq.n	800166a <HAL_GPIO_Init+0x21e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a1a      	ldr	r2, [pc, #104]	@ (80016a4 <HAL_GPIO_Init+0x258>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d013      	beq.n	8001666 <HAL_GPIO_Init+0x21a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a19      	ldr	r2, [pc, #100]	@ (80016a8 <HAL_GPIO_Init+0x25c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d00d      	beq.n	8001662 <HAL_GPIO_Init+0x216>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a18      	ldr	r2, [pc, #96]	@ (80016ac <HAL_GPIO_Init+0x260>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d007      	beq.n	800165e <HAL_GPIO_Init+0x212>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a17      	ldr	r2, [pc, #92]	@ (80016b0 <HAL_GPIO_Init+0x264>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d101      	bne.n	800165a <HAL_GPIO_Init+0x20e>
 8001656:	2309      	movs	r3, #9
 8001658:	e02d      	b.n	80016b6 <HAL_GPIO_Init+0x26a>
 800165a:	230a      	movs	r3, #10
 800165c:	e02b      	b.n	80016b6 <HAL_GPIO_Init+0x26a>
 800165e:	2308      	movs	r3, #8
 8001660:	e029      	b.n	80016b6 <HAL_GPIO_Init+0x26a>
 8001662:	2307      	movs	r3, #7
 8001664:	e027      	b.n	80016b6 <HAL_GPIO_Init+0x26a>
 8001666:	2306      	movs	r3, #6
 8001668:	e025      	b.n	80016b6 <HAL_GPIO_Init+0x26a>
 800166a:	2305      	movs	r3, #5
 800166c:	e023      	b.n	80016b6 <HAL_GPIO_Init+0x26a>
 800166e:	2304      	movs	r3, #4
 8001670:	e021      	b.n	80016b6 <HAL_GPIO_Init+0x26a>
 8001672:	2303      	movs	r3, #3
 8001674:	e01f      	b.n	80016b6 <HAL_GPIO_Init+0x26a>
 8001676:	2302      	movs	r3, #2
 8001678:	e01d      	b.n	80016b6 <HAL_GPIO_Init+0x26a>
 800167a:	2301      	movs	r3, #1
 800167c:	e01b      	b.n	80016b6 <HAL_GPIO_Init+0x26a>
 800167e:	bf00      	nop
 8001680:	58000080 	.word	0x58000080
 8001684:	58024400 	.word	0x58024400
 8001688:	58000400 	.word	0x58000400
 800168c:	58020000 	.word	0x58020000
 8001690:	58020400 	.word	0x58020400
 8001694:	58020800 	.word	0x58020800
 8001698:	58020c00 	.word	0x58020c00
 800169c:	58021000 	.word	0x58021000
 80016a0:	58021400 	.word	0x58021400
 80016a4:	58021800 	.word	0x58021800
 80016a8:	58021c00 	.word	0x58021c00
 80016ac:	58022000 	.word	0x58022000
 80016b0:	58022400 	.word	0x58022400
 80016b4:	2300      	movs	r3, #0
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	f002 0203 	and.w	r2, r2, #3
 80016bc:	0092      	lsls	r2, r2, #2
 80016be:	4093      	lsls	r3, r2
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c6:	4938      	ldr	r1, [pc, #224]	@ (80017a8 <HAL_GPIO_Init+0x35c>)
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	3302      	adds	r3, #2
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80016fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001728:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	3301      	adds	r3, #1
 8001788:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	fa22 f303 	lsr.w	r3, r2, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	f47f ae63 	bne.w	8001460 <HAL_GPIO_Init+0x14>
  }
}
 800179a:	bf00      	nop
 800179c:	bf00      	nop
 800179e:	3724      	adds	r7, #36	@ 0x24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	58000400 	.word	0x58000400

080017ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
 80017b8:	4613      	mov	r3, r2
 80017ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017bc:	787b      	ldrb	r3, [r7, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80017c8:	e003      	b.n	80017d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	041a      	lsls	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	619a      	str	r2, [r3, #24]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017de:	b480      	push	{r7}
 80017e0:	b085      	sub	sp, #20
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	460b      	mov	r3, r1
 80017e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017f0:	887a      	ldrh	r2, [r7, #2]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	041a      	lsls	r2, r3, #16
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	400b      	ands	r3, r1
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	619a      	str	r2, [r3, #24]
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800181c:	4a08      	ldr	r2, [pc, #32]	@ (8001840 <HAL_HSEM_FastTake+0x2c>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3320      	adds	r3, #32
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	4a07      	ldr	r2, [pc, #28]	@ (8001844 <HAL_HSEM_FastTake+0x30>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d101      	bne.n	8001830 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	e000      	b.n	8001832 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	58026400 	.word	0x58026400
 8001844:	80000300 	.word	0x80000300

08001848 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001852:	4906      	ldr	r1, [pc, #24]	@ (800186c <HAL_HSEM_Release+0x24>)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	58026400 	.word	0x58026400

08001870 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001878:	4b29      	ldr	r3, [pc, #164]	@ (8001920 <HAL_PWREx_ConfigSupply+0xb0>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	2b06      	cmp	r3, #6
 8001882:	d00a      	beq.n	800189a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001884:	4b26      	ldr	r3, [pc, #152]	@ (8001920 <HAL_PWREx_ConfigSupply+0xb0>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	429a      	cmp	r2, r3
 8001890:	d001      	beq.n	8001896 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e040      	b.n	8001918 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e03e      	b.n	8001918 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800189a:	4b21      	ldr	r3, [pc, #132]	@ (8001920 <HAL_PWREx_ConfigSupply+0xb0>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80018a2:	491f      	ldr	r1, [pc, #124]	@ (8001920 <HAL_PWREx_ConfigSupply+0xb0>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80018aa:	f7ff fc25 	bl	80010f8 <HAL_GetTick>
 80018ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018b0:	e009      	b.n	80018c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018b2:	f7ff fc21 	bl	80010f8 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018c0:	d901      	bls.n	80018c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e028      	b.n	8001918 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018c6:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <HAL_PWREx_ConfigSupply+0xb0>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018d2:	d1ee      	bne.n	80018b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b1e      	cmp	r3, #30
 80018d8:	d008      	beq.n	80018ec <HAL_PWREx_ConfigSupply+0x7c>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80018de:	d005      	beq.n	80018ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b1d      	cmp	r3, #29
 80018e4:	d002      	beq.n	80018ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b2d      	cmp	r3, #45	@ 0x2d
 80018ea:	d114      	bne.n	8001916 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80018ec:	f7ff fc04 	bl	80010f8 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018f2:	e009      	b.n	8001908 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018f4:	f7ff fc00 	bl	80010f8 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001902:	d901      	bls.n	8001908 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e007      	b.n	8001918 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <HAL_PWREx_ConfigSupply+0xb0>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001914:	d1ee      	bne.n	80018f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	58024800 	.word	0x58024800

08001924 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	@ 0x30
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d102      	bne.n	8001938 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	f000 bc48 	b.w	80021c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 8088 	beq.w	8001a56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001946:	4b99      	ldr	r3, [pc, #612]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800194e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001950:	4b96      	ldr	r3, [pc, #600]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001954:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001958:	2b10      	cmp	r3, #16
 800195a:	d007      	beq.n	800196c <HAL_RCC_OscConfig+0x48>
 800195c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800195e:	2b18      	cmp	r3, #24
 8001960:	d111      	bne.n	8001986 <HAL_RCC_OscConfig+0x62>
 8001962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d10c      	bne.n	8001986 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	4b8f      	ldr	r3, [pc, #572]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d06d      	beq.n	8001a54 <HAL_RCC_OscConfig+0x130>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d169      	bne.n	8001a54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	f000 bc21 	b.w	80021c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x7a>
 8001990:	4b86      	ldr	r3, [pc, #536]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a85      	ldr	r2, [pc, #532]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	e02e      	b.n	80019fc <HAL_RCC_OscConfig+0xd8>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x9c>
 80019a6:	4b81      	ldr	r3, [pc, #516]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a80      	ldr	r2, [pc, #512]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 80019ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b7e      	ldr	r3, [pc, #504]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a7d      	ldr	r2, [pc, #500]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 80019b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xd8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0xc0>
 80019ca:	4b78      	ldr	r3, [pc, #480]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a77      	ldr	r2, [pc, #476]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b75      	ldr	r3, [pc, #468]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a74      	ldr	r2, [pc, #464]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xd8>
 80019e4:	4b71      	ldr	r3, [pc, #452]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a70      	ldr	r2, [pc, #448]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b6e      	ldr	r3, [pc, #440]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a6d      	ldr	r2, [pc, #436]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb78 	bl	80010f8 <HAL_GetTick>
 8001a08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb74 	bl	80010f8 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	@ 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e3d4      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a1e:	4b63      	ldr	r3, [pc, #396]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xe8>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb64 	bl	80010f8 <HAL_GetTick>
 8001a30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb60 	bl	80010f8 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	@ 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e3c0      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a46:	4b59      	ldr	r3, [pc, #356]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x110>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80ca 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a64:	4b51      	ldr	r3, [pc, #324]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a72:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_RCC_OscConfig+0x166>
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	2b18      	cmp	r3, #24
 8001a7e:	d156      	bne.n	8001b2e <HAL_RCC_OscConfig+0x20a>
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d151      	bne.n	8001b2e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a8a:	4b48      	ldr	r3, [pc, #288]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x17e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e392      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001aa2:	4b42      	ldr	r3, [pc, #264]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 0219 	bic.w	r2, r3, #25
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	493f      	ldr	r1, [pc, #252]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fb20 	bl	80010f8 <HAL_GetTick>
 8001ab8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abc:	f7ff fb1c 	bl	80010f8 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e37c      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ace:	4b37      	ldr	r3, [pc, #220]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	f7ff fb19 	bl	8001110 <HAL_GetREVID>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d817      	bhi.n	8001b18 <HAL_RCC_OscConfig+0x1f4>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	2b40      	cmp	r3, #64	@ 0x40
 8001aee:	d108      	bne.n	8001b02 <HAL_RCC_OscConfig+0x1de>
 8001af0:	4b2e      	ldr	r3, [pc, #184]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001af8:	4a2c      	ldr	r2, [pc, #176]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001afe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b00:	e07a      	b.n	8001bf8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b2a      	ldr	r3, [pc, #168]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	031b      	lsls	r3, r3, #12
 8001b10:	4926      	ldr	r1, [pc, #152]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b16:	e06f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b18:	4b24      	ldr	r3, [pc, #144]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	061b      	lsls	r3, r3, #24
 8001b26:	4921      	ldr	r1, [pc, #132]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b2c:	e064      	b.n	8001bf8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d047      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b36:	4b1d      	ldr	r3, [pc, #116]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 0219 	bic.w	r2, r3, #25
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	491a      	ldr	r1, [pc, #104]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff fad6 	bl	80010f8 <HAL_GetTick>
 8001b4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b50:	f7ff fad2 	bl	80010f8 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e332      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b62:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6e:	f7ff facf 	bl	8001110 <HAL_GetREVID>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d819      	bhi.n	8001bb0 <HAL_RCC_OscConfig+0x28c>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	2b40      	cmp	r3, #64	@ 0x40
 8001b82:	d108      	bne.n	8001b96 <HAL_RCC_OscConfig+0x272>
 8001b84:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b8c:	4a07      	ldr	r2, [pc, #28]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001b8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b92:	6053      	str	r3, [r2, #4]
 8001b94:	e030      	b.n	8001bf8 <HAL_RCC_OscConfig+0x2d4>
 8001b96:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	031b      	lsls	r3, r3, #12
 8001ba4:	4901      	ldr	r1, [pc, #4]	@ (8001bac <HAL_RCC_OscConfig+0x288>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	604b      	str	r3, [r1, #4]
 8001baa:	e025      	b.n	8001bf8 <HAL_RCC_OscConfig+0x2d4>
 8001bac:	58024400 	.word	0x58024400
 8001bb0:	4b9a      	ldr	r3, [pc, #616]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	061b      	lsls	r3, r3, #24
 8001bbe:	4997      	ldr	r1, [pc, #604]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
 8001bc4:	e018      	b.n	8001bf8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc6:	4b95      	ldr	r3, [pc, #596]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a94      	ldr	r2, [pc, #592]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff fa91 	bl	80010f8 <HAL_GetTick>
 8001bd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bda:	f7ff fa8d 	bl	80010f8 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e2ed      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bec:	4b8b      	ldr	r3, [pc, #556]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80a9 	beq.w	8001d58 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c06:	4b85      	ldr	r3, [pc, #532]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c10:	4b82      	ldr	r3, [pc, #520]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c14:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d007      	beq.n	8001c2c <HAL_RCC_OscConfig+0x308>
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2b18      	cmp	r3, #24
 8001c20:	d13a      	bne.n	8001c98 <HAL_RCC_OscConfig+0x374>
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d135      	bne.n	8001c98 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c2c:	4b7b      	ldr	r3, [pc, #492]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_OscConfig+0x320>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	2b80      	cmp	r3, #128	@ 0x80
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e2c1      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c44:	f7ff fa64 	bl	8001110 <HAL_GetREVID>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d817      	bhi.n	8001c82 <HAL_RCC_OscConfig+0x35e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	2b20      	cmp	r3, #32
 8001c58:	d108      	bne.n	8001c6c <HAL_RCC_OscConfig+0x348>
 8001c5a:	4b70      	ldr	r3, [pc, #448]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001c62:	4a6e      	ldr	r2, [pc, #440]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001c64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c68:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c6a:	e075      	b.n	8001d58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c6c:	4b6b      	ldr	r3, [pc, #428]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	069b      	lsls	r3, r3, #26
 8001c7a:	4968      	ldr	r1, [pc, #416]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c80:	e06a      	b.n	8001d58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c82:	4b66      	ldr	r3, [pc, #408]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	061b      	lsls	r3, r3, #24
 8001c90:	4962      	ldr	r1, [pc, #392]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c96:	e05f      	b.n	8001d58 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d042      	beq.n	8001d26 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a5d      	ldr	r2, [pc, #372]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7ff fa24 	bl	80010f8 <HAL_GetTick>
 8001cb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fa20 	bl	80010f8 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e280      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cc6:	4b55      	ldr	r3, [pc, #340]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cd2:	f7ff fa1d 	bl	8001110 <HAL_GetREVID>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d817      	bhi.n	8001d10 <HAL_RCC_OscConfig+0x3ec>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d108      	bne.n	8001cfa <HAL_RCC_OscConfig+0x3d6>
 8001ce8:	4b4c      	ldr	r3, [pc, #304]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001cf0:	4a4a      	ldr	r2, [pc, #296]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001cf2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001cf6:	6053      	str	r3, [r2, #4]
 8001cf8:	e02e      	b.n	8001d58 <HAL_RCC_OscConfig+0x434>
 8001cfa:	4b48      	ldr	r3, [pc, #288]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	069b      	lsls	r3, r3, #26
 8001d08:	4944      	ldr	r1, [pc, #272]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
 8001d0e:	e023      	b.n	8001d58 <HAL_RCC_OscConfig+0x434>
 8001d10:	4b42      	ldr	r3, [pc, #264]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	061b      	lsls	r3, r3, #24
 8001d1e:	493f      	ldr	r1, [pc, #252]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60cb      	str	r3, [r1, #12]
 8001d24:	e018      	b.n	8001d58 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d26:	4b3d      	ldr	r3, [pc, #244]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001d2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d32:	f7ff f9e1 	bl	80010f8 <HAL_GetTick>
 8001d36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d3a:	f7ff f9dd 	bl	80010f8 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e23d      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d4c:	4b33      	ldr	r3, [pc, #204]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f0      	bne.n	8001d3a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d036      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d019      	beq.n	8001da0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d70:	4a2a      	ldr	r2, [pc, #168]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d78:	f7ff f9be 	bl	80010f8 <HAL_GetTick>
 8001d7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d80:	f7ff f9ba 	bl	80010f8 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e21a      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d92:	4b22      	ldr	r3, [pc, #136]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x45c>
 8001d9e:	e018      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001da2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001da4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dac:	f7ff f9a4 	bl	80010f8 <HAL_GetTick>
 8001db0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db4:	f7ff f9a0 	bl	80010f8 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e200      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dc6:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d039      	beq.n	8001e52 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d01c      	beq.n	8001e20 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001de6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a0c      	ldr	r2, [pc, #48]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001dec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001df0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001df2:	f7ff f981 	bl	80010f8 <HAL_GetTick>
 8001df6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dfa:	f7ff f97d 	bl	80010f8 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e1dd      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e0c:	4b03      	ldr	r3, [pc, #12]	@ (8001e1c <HAL_RCC_OscConfig+0x4f8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x4d6>
 8001e18:	e01b      	b.n	8001e52 <HAL_RCC_OscConfig+0x52e>
 8001e1a:	bf00      	nop
 8001e1c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e20:	4b9b      	ldr	r3, [pc, #620]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a9a      	ldr	r2, [pc, #616]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001e26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e2c:	f7ff f964 	bl	80010f8 <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e34:	f7ff f960 	bl	80010f8 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e1c0      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e46:	4b92      	ldr	r3, [pc, #584]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 8081 	beq.w	8001f62 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e60:	4b8c      	ldr	r3, [pc, #560]	@ (8002094 <HAL_RCC_OscConfig+0x770>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a8b      	ldr	r2, [pc, #556]	@ (8002094 <HAL_RCC_OscConfig+0x770>)
 8001e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e6c:	f7ff f944 	bl	80010f8 <HAL_GetTick>
 8001e70:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e74:	f7ff f940 	bl	80010f8 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	@ 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e1a0      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e86:	4b83      	ldr	r3, [pc, #524]	@ (8002094 <HAL_RCC_OscConfig+0x770>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d106      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x584>
 8001e9a:	4b7d      	ldr	r3, [pc, #500]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9e:	4a7c      	ldr	r2, [pc, #496]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ea6:	e02d      	b.n	8001f04 <HAL_RCC_OscConfig+0x5e0>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10c      	bne.n	8001eca <HAL_RCC_OscConfig+0x5a6>
 8001eb0:	4b77      	ldr	r3, [pc, #476]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb4:	4a76      	ldr	r2, [pc, #472]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ebc:	4b74      	ldr	r3, [pc, #464]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec0:	4a73      	ldr	r2, [pc, #460]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001ec2:	f023 0304 	bic.w	r3, r3, #4
 8001ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec8:	e01c      	b.n	8001f04 <HAL_RCC_OscConfig+0x5e0>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x5c8>
 8001ed2:	4b6f      	ldr	r3, [pc, #444]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed6:	4a6e      	ldr	r2, [pc, #440]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ede:	4b6c      	ldr	r3, [pc, #432]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee2:	4a6b      	ldr	r2, [pc, #428]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eea:	e00b      	b.n	8001f04 <HAL_RCC_OscConfig+0x5e0>
 8001eec:	4b68      	ldr	r3, [pc, #416]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef0:	4a67      	ldr	r2, [pc, #412]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef8:	4b65      	ldr	r3, [pc, #404]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efc:	4a64      	ldr	r2, [pc, #400]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001efe:	f023 0304 	bic.w	r3, r3, #4
 8001f02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d015      	beq.n	8001f38 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7ff f8f4 	bl	80010f8 <HAL_GetTick>
 8001f10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f14:	f7ff f8f0 	bl	80010f8 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e14e      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f2a:	4b59      	ldr	r3, [pc, #356]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0ee      	beq.n	8001f14 <HAL_RCC_OscConfig+0x5f0>
 8001f36:	e014      	b.n	8001f62 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f38:	f7ff f8de 	bl	80010f8 <HAL_GetTick>
 8001f3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f3e:	e00a      	b.n	8001f56 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f40:	f7ff f8da 	bl	80010f8 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e138      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f56:	4b4e      	ldr	r3, [pc, #312]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1ee      	bne.n	8001f40 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 812d 	beq.w	80021c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f6c:	4b48      	ldr	r3, [pc, #288]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f74:	2b18      	cmp	r3, #24
 8001f76:	f000 80bd 	beq.w	80020f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	f040 809e 	bne.w	80020c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f84:	4b42      	ldr	r3, [pc, #264]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a41      	ldr	r2, [pc, #260]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001f8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7ff f8b2 	bl	80010f8 <HAL_GetTick>
 8001f94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7ff f8ae 	bl	80010f8 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e10e      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001faa:	4b39      	ldr	r3, [pc, #228]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb6:	4b36      	ldr	r3, [pc, #216]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001fb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fba:	4b37      	ldr	r3, [pc, #220]	@ (8002098 <HAL_RCC_OscConfig+0x774>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	4931      	ldr	r1, [pc, #196]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	628b      	str	r3, [r1, #40]	@ 0x28
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	025b      	lsls	r3, r3, #9
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fea:	3b01      	subs	r3, #1
 8001fec:	041b      	lsls	r3, r3, #16
 8001fee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	061b      	lsls	r3, r3, #24
 8001ffc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002000:	4923      	ldr	r1, [pc, #140]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8002002:	4313      	orrs	r3, r2
 8002004:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002006:	4b22      	ldr	r3, [pc, #136]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8002008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200a:	4a21      	ldr	r2, [pc, #132]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002012:	4b1f      	ldr	r3, [pc, #124]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8002014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002016:	4b21      	ldr	r3, [pc, #132]	@ (800209c <HAL_RCC_OscConfig+0x778>)
 8002018:	4013      	ands	r3, r2
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800201e:	00d2      	lsls	r2, r2, #3
 8002020:	491b      	ldr	r1, [pc, #108]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8002022:	4313      	orrs	r3, r2
 8002024:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002026:	4b1a      	ldr	r3, [pc, #104]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8002028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202a:	f023 020c 	bic.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	4917      	ldr	r1, [pc, #92]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8002034:	4313      	orrs	r3, r2
 8002036:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002038:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 800203a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203c:	f023 0202 	bic.w	r2, r3, #2
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002044:	4912      	ldr	r1, [pc, #72]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8002046:	4313      	orrs	r3, r2
 8002048:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800204a:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 800204c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204e:	4a10      	ldr	r2, [pc, #64]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002054:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002056:	4b0e      	ldr	r3, [pc, #56]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8002058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205a:	4a0d      	ldr	r2, [pc, #52]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 800205c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002060:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002062:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8002064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002066:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8002068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800206c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800206e:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8002070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002072:	4a07      	ldr	r2, [pc, #28]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800207a:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a04      	ldr	r2, [pc, #16]	@ (8002090 <HAL_RCC_OscConfig+0x76c>)
 8002080:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7ff f837 	bl	80010f8 <HAL_GetTick>
 800208a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800208c:	e011      	b.n	80020b2 <HAL_RCC_OscConfig+0x78e>
 800208e:	bf00      	nop
 8002090:	58024400 	.word	0x58024400
 8002094:	58024800 	.word	0x58024800
 8002098:	fffffc0c 	.word	0xfffffc0c
 800209c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7ff f82a 	bl	80010f8 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e08a      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020b2:	4b47      	ldr	r3, [pc, #284]	@ (80021d0 <HAL_RCC_OscConfig+0x8ac>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x77c>
 80020be:	e082      	b.n	80021c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c0:	4b43      	ldr	r3, [pc, #268]	@ (80021d0 <HAL_RCC_OscConfig+0x8ac>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a42      	ldr	r2, [pc, #264]	@ (80021d0 <HAL_RCC_OscConfig+0x8ac>)
 80020c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7ff f814 	bl	80010f8 <HAL_GetTick>
 80020d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d4:	f7ff f810 	bl	80010f8 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e070      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020e6:	4b3a      	ldr	r3, [pc, #232]	@ (80021d0 <HAL_RCC_OscConfig+0x8ac>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x7b0>
 80020f2:	e068      	b.n	80021c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80020f4:	4b36      	ldr	r3, [pc, #216]	@ (80021d0 <HAL_RCC_OscConfig+0x8ac>)
 80020f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80020fa:	4b35      	ldr	r3, [pc, #212]	@ (80021d0 <HAL_RCC_OscConfig+0x8ac>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002104:	2b01      	cmp	r3, #1
 8002106:	d031      	beq.n	800216c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	f003 0203 	and.w	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d12a      	bne.n	800216c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002122:	429a      	cmp	r2, r3
 8002124:	d122      	bne.n	800216c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002130:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002132:	429a      	cmp	r2, r3
 8002134:	d11a      	bne.n	800216c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	0a5b      	lsrs	r3, r3, #9
 800213a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002142:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d111      	bne.n	800216c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002154:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d108      	bne.n	800216c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	0e1b      	lsrs	r3, r3, #24
 800215e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002166:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e02b      	b.n	80021c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002170:	4b17      	ldr	r3, [pc, #92]	@ (80021d0 <HAL_RCC_OscConfig+0x8ac>)
 8002172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002174:	08db      	lsrs	r3, r3, #3
 8002176:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800217a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	429a      	cmp	r2, r3
 8002184:	d01f      	beq.n	80021c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002186:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <HAL_RCC_OscConfig+0x8ac>)
 8002188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218a:	4a11      	ldr	r2, [pc, #68]	@ (80021d0 <HAL_RCC_OscConfig+0x8ac>)
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002192:	f7fe ffb1 	bl	80010f8 <HAL_GetTick>
 8002196:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002198:	bf00      	nop
 800219a:	f7fe ffad 	bl	80010f8 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d0f9      	beq.n	800219a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021a6:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <HAL_RCC_OscConfig+0x8ac>)
 80021a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021aa:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <HAL_RCC_OscConfig+0x8b0>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021b2:	00d2      	lsls	r2, r2, #3
 80021b4:	4906      	ldr	r1, [pc, #24]	@ (80021d0 <HAL_RCC_OscConfig+0x8ac>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80021ba:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <HAL_RCC_OscConfig+0x8ac>)
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021be:	4a04      	ldr	r2, [pc, #16]	@ (80021d0 <HAL_RCC_OscConfig+0x8ac>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3730      	adds	r7, #48	@ 0x30
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	58024400 	.word	0x58024400
 80021d4:	ffff0007 	.word	0xffff0007

080021d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e19c      	b.n	8002526 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021ec:	4b8a      	ldr	r3, [pc, #552]	@ (8002418 <HAL_RCC_ClockConfig+0x240>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d910      	bls.n	800221c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b87      	ldr	r3, [pc, #540]	@ (8002418 <HAL_RCC_ClockConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 020f 	bic.w	r2, r3, #15
 8002202:	4985      	ldr	r1, [pc, #532]	@ (8002418 <HAL_RCC_ClockConfig+0x240>)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b83      	ldr	r3, [pc, #524]	@ (8002418 <HAL_RCC_ClockConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e184      	b.n	8002526 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d010      	beq.n	800224a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	4b7b      	ldr	r3, [pc, #492]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002234:	429a      	cmp	r2, r3
 8002236:	d908      	bls.n	800224a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002238:	4b78      	ldr	r3, [pc, #480]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	4975      	ldr	r1, [pc, #468]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 8002246:	4313      	orrs	r3, r2
 8002248:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d010      	beq.n	8002278 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	4b70      	ldr	r3, [pc, #448]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002262:	429a      	cmp	r2, r3
 8002264:	d908      	bls.n	8002278 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002266:	4b6d      	ldr	r3, [pc, #436]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	496a      	ldr	r1, [pc, #424]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 8002274:	4313      	orrs	r3, r2
 8002276:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	2b00      	cmp	r3, #0
 8002282:	d010      	beq.n	80022a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699a      	ldr	r2, [r3, #24]
 8002288:	4b64      	ldr	r3, [pc, #400]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002290:	429a      	cmp	r2, r3
 8002292:	d908      	bls.n	80022a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002294:	4b61      	ldr	r3, [pc, #388]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	495e      	ldr	r1, [pc, #376]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d010      	beq.n	80022d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	4b59      	ldr	r3, [pc, #356]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022be:	429a      	cmp	r2, r3
 80022c0:	d908      	bls.n	80022d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80022c2:	4b56      	ldr	r3, [pc, #344]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4953      	ldr	r1, [pc, #332]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d010      	beq.n	8002302 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	4b4d      	ldr	r3, [pc, #308]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d908      	bls.n	8002302 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f0:	4b4a      	ldr	r3, [pc, #296]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f023 020f 	bic.w	r2, r3, #15
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4947      	ldr	r1, [pc, #284]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d055      	beq.n	80023ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800230e:	4b43      	ldr	r3, [pc, #268]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	4940      	ldr	r1, [pc, #256]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 800231c:	4313      	orrs	r3, r2
 800231e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d107      	bne.n	8002338 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002328:	4b3c      	ldr	r3, [pc, #240]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d121      	bne.n	8002378 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0f6      	b.n	8002526 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d107      	bne.n	8002350 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002340:	4b36      	ldr	r3, [pc, #216]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d115      	bne.n	8002378 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0ea      	b.n	8002526 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d107      	bne.n	8002368 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002358:	4b30      	ldr	r3, [pc, #192]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0de      	b.n	8002526 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002368:	4b2c      	ldr	r3, [pc, #176]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0d6      	b.n	8002526 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002378:	4b28      	ldr	r3, [pc, #160]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f023 0207 	bic.w	r2, r3, #7
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4925      	ldr	r1, [pc, #148]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 8002386:	4313      	orrs	r3, r2
 8002388:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800238a:	f7fe feb5 	bl	80010f8 <HAL_GetTick>
 800238e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002390:	e00a      	b.n	80023a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002392:	f7fe feb1 	bl	80010f8 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e0be      	b.n	8002526 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a8:	4b1c      	ldr	r3, [pc, #112]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d1eb      	bne.n	8002392 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d010      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	4b14      	ldr	r3, [pc, #80]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d208      	bcs.n	80023e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d6:	4b11      	ldr	r3, [pc, #68]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f023 020f 	bic.w	r2, r3, #15
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	490e      	ldr	r1, [pc, #56]	@ (800241c <HAL_RCC_ClockConfig+0x244>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <HAL_RCC_ClockConfig+0x240>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d214      	bcs.n	8002420 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <HAL_RCC_ClockConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 020f 	bic.w	r2, r3, #15
 80023fe:	4906      	ldr	r1, [pc, #24]	@ (8002418 <HAL_RCC_ClockConfig+0x240>)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <HAL_RCC_ClockConfig+0x240>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e086      	b.n	8002526 <HAL_RCC_ClockConfig+0x34e>
 8002418:	52002000 	.word	0x52002000
 800241c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d010      	beq.n	800244e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	4b3f      	ldr	r3, [pc, #252]	@ (8002530 <HAL_RCC_ClockConfig+0x358>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002438:	429a      	cmp	r2, r3
 800243a:	d208      	bcs.n	800244e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800243c:	4b3c      	ldr	r3, [pc, #240]	@ (8002530 <HAL_RCC_ClockConfig+0x358>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	4939      	ldr	r1, [pc, #228]	@ (8002530 <HAL_RCC_ClockConfig+0x358>)
 800244a:	4313      	orrs	r3, r2
 800244c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d010      	beq.n	800247c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	4b34      	ldr	r3, [pc, #208]	@ (8002530 <HAL_RCC_ClockConfig+0x358>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002466:	429a      	cmp	r2, r3
 8002468:	d208      	bcs.n	800247c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800246a:	4b31      	ldr	r3, [pc, #196]	@ (8002530 <HAL_RCC_ClockConfig+0x358>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	492e      	ldr	r1, [pc, #184]	@ (8002530 <HAL_RCC_ClockConfig+0x358>)
 8002478:	4313      	orrs	r3, r2
 800247a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b00      	cmp	r3, #0
 8002486:	d010      	beq.n	80024aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699a      	ldr	r2, [r3, #24]
 800248c:	4b28      	ldr	r3, [pc, #160]	@ (8002530 <HAL_RCC_ClockConfig+0x358>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002494:	429a      	cmp	r2, r3
 8002496:	d208      	bcs.n	80024aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002498:	4b25      	ldr	r3, [pc, #148]	@ (8002530 <HAL_RCC_ClockConfig+0x358>)
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	4922      	ldr	r1, [pc, #136]	@ (8002530 <HAL_RCC_ClockConfig+0x358>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d010      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69da      	ldr	r2, [r3, #28]
 80024ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002530 <HAL_RCC_ClockConfig+0x358>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d208      	bcs.n	80024d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80024c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002530 <HAL_RCC_ClockConfig+0x358>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	4917      	ldr	r1, [pc, #92]	@ (8002530 <HAL_RCC_ClockConfig+0x358>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024d8:	f000 f834 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b14      	ldr	r3, [pc, #80]	@ (8002530 <HAL_RCC_ClockConfig+0x358>)
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	4912      	ldr	r1, [pc, #72]	@ (8002534 <HAL_RCC_ClockConfig+0x35c>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
 80024f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002530 <HAL_RCC_ClockConfig+0x358>)
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002534 <HAL_RCC_ClockConfig+0x35c>)
 8002500:	5cd3      	ldrb	r3, [r2, r3]
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
 800250c:	4a0a      	ldr	r2, [pc, #40]	@ (8002538 <HAL_RCC_ClockConfig+0x360>)
 800250e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002510:	4a0a      	ldr	r2, [pc, #40]	@ (800253c <HAL_RCC_ClockConfig+0x364>)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002516:	4b0a      	ldr	r3, [pc, #40]	@ (8002540 <HAL_RCC_ClockConfig+0x368>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe fda2 	bl	8001064 <HAL_InitTick>
 8002520:	4603      	mov	r3, r0
 8002522:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002524:	7bfb      	ldrb	r3, [r7, #15]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	58024400 	.word	0x58024400
 8002534:	08006a4c 	.word	0x08006a4c
 8002538:	24000004 	.word	0x24000004
 800253c:	24000000 	.word	0x24000000
 8002540:	24000024 	.word	0x24000024

08002544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	@ 0x24
 8002548:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800254a:	4bb3      	ldr	r3, [pc, #716]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002552:	2b18      	cmp	r3, #24
 8002554:	f200 8155 	bhi.w	8002802 <HAL_RCC_GetSysClockFreq+0x2be>
 8002558:	a201      	add	r2, pc, #4	@ (adr r2, 8002560 <HAL_RCC_GetSysClockFreq+0x1c>)
 800255a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255e:	bf00      	nop
 8002560:	080025c5 	.word	0x080025c5
 8002564:	08002803 	.word	0x08002803
 8002568:	08002803 	.word	0x08002803
 800256c:	08002803 	.word	0x08002803
 8002570:	08002803 	.word	0x08002803
 8002574:	08002803 	.word	0x08002803
 8002578:	08002803 	.word	0x08002803
 800257c:	08002803 	.word	0x08002803
 8002580:	080025eb 	.word	0x080025eb
 8002584:	08002803 	.word	0x08002803
 8002588:	08002803 	.word	0x08002803
 800258c:	08002803 	.word	0x08002803
 8002590:	08002803 	.word	0x08002803
 8002594:	08002803 	.word	0x08002803
 8002598:	08002803 	.word	0x08002803
 800259c:	08002803 	.word	0x08002803
 80025a0:	080025f1 	.word	0x080025f1
 80025a4:	08002803 	.word	0x08002803
 80025a8:	08002803 	.word	0x08002803
 80025ac:	08002803 	.word	0x08002803
 80025b0:	08002803 	.word	0x08002803
 80025b4:	08002803 	.word	0x08002803
 80025b8:	08002803 	.word	0x08002803
 80025bc:	08002803 	.word	0x08002803
 80025c0:	080025f7 	.word	0x080025f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025c4:	4b94      	ldr	r3, [pc, #592]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d009      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80025d0:	4b91      	ldr	r3, [pc, #580]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	08db      	lsrs	r3, r3, #3
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	4a90      	ldr	r2, [pc, #576]	@ (800281c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
 80025e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80025e2:	e111      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80025e4:	4b8d      	ldr	r3, [pc, #564]	@ (800281c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025e6:	61bb      	str	r3, [r7, #24]
      break;
 80025e8:	e10e      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80025ea:	4b8d      	ldr	r3, [pc, #564]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025ec:	61bb      	str	r3, [r7, #24]
      break;
 80025ee:	e10b      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80025f0:	4b8c      	ldr	r3, [pc, #560]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80025f2:	61bb      	str	r3, [r7, #24]
      break;
 80025f4:	e108      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025f6:	4b88      	ldr	r3, [pc, #544]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002600:	4b85      	ldr	r3, [pc, #532]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800260a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800260c:	4b82      	ldr	r3, [pc, #520]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800260e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002616:	4b80      	ldr	r3, [pc, #512]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261a:	08db      	lsrs	r3, r3, #3
 800261c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800262e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80e1 	beq.w	80027fc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b02      	cmp	r3, #2
 800263e:	f000 8083 	beq.w	8002748 <HAL_RCC_GetSysClockFreq+0x204>
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b02      	cmp	r3, #2
 8002646:	f200 80a1 	bhi.w	800278c <HAL_RCC_GetSysClockFreq+0x248>
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x114>
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d056      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002656:	e099      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002658:	4b6f      	ldr	r3, [pc, #444]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d02d      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002664:	4b6c      	ldr	r3, [pc, #432]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	08db      	lsrs	r3, r3, #3
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	4a6b      	ldr	r2, [pc, #428]	@ (800281c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
 8002674:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	ee07 3a90 	vmov	s15, r3
 800267c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	ee07 3a90 	vmov	s15, r3
 8002686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800268a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800268e:	4b62      	ldr	r3, [pc, #392]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800269e:	ed97 6a02 	vldr	s12, [r7, #8]
 80026a2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002828 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80026be:	e087      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	ee07 3a90 	vmov	s15, r3
 80026c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800282c <HAL_RCC_GetSysClockFreq+0x2e8>
 80026ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026d2:	4b51      	ldr	r3, [pc, #324]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026da:	ee07 3a90 	vmov	s15, r3
 80026de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80026e6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002828 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002702:	e065      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800270e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002830 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002716:	4b40      	ldr	r3, [pc, #256]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800271e:	ee07 3a90 	vmov	s15, r3
 8002722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002726:	ed97 6a02 	vldr	s12, [r7, #8]
 800272a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002828 <HAL_RCC_GetSysClockFreq+0x2e4>
 800272e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800273a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800273e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002742:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002746:	e043      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	ee07 3a90 	vmov	s15, r3
 800274e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002752:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002834 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800275a:	4b2f      	ldr	r3, [pc, #188]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800276a:	ed97 6a02 	vldr	s12, [r7, #8]
 800276e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002828 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800277a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800277e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002786:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800278a:	e021      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002796:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002830 <HAL_RCC_GetSysClockFreq+0x2ec>
 800279a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800279e:	4b1e      	ldr	r3, [pc, #120]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80027b2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002828 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027ce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80027d0:	4b11      	ldr	r3, [pc, #68]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d4:	0a5b      	lsrs	r3, r3, #9
 80027d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027da:	3301      	adds	r3, #1
 80027dc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	ee07 3a90 	vmov	s15, r3
 80027e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80027ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027f4:	ee17 3a90 	vmov	r3, s15
 80027f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80027fa:	e005      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61bb      	str	r3, [r7, #24]
      break;
 8002800:	e002      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002802:	4b07      	ldr	r3, [pc, #28]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002804:	61bb      	str	r3, [r7, #24]
      break;
 8002806:	bf00      	nop
  }

  return sysclockfreq;
 8002808:	69bb      	ldr	r3, [r7, #24]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3724      	adds	r7, #36	@ 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	58024400 	.word	0x58024400
 800281c:	03d09000 	.word	0x03d09000
 8002820:	003d0900 	.word	0x003d0900
 8002824:	017d7840 	.word	0x017d7840
 8002828:	46000000 	.word	0x46000000
 800282c:	4c742400 	.word	0x4c742400
 8002830:	4a742400 	.word	0x4a742400
 8002834:	4bbebc20 	.word	0x4bbebc20

08002838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800283e:	f7ff fe81 	bl	8002544 <HAL_RCC_GetSysClockFreq>
 8002842:	4602      	mov	r2, r0
 8002844:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <HAL_RCC_GetHCLKFreq+0x50>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	490f      	ldr	r1, [pc, #60]	@ (800288c <HAL_RCC_GetHCLKFreq+0x54>)
 8002850:	5ccb      	ldrb	r3, [r1, r3]
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	fa22 f303 	lsr.w	r3, r2, r3
 800285a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800285c:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <HAL_RCC_GetHCLKFreq+0x50>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	4a09      	ldr	r2, [pc, #36]	@ (800288c <HAL_RCC_GetHCLKFreq+0x54>)
 8002866:	5cd3      	ldrb	r3, [r2, r3]
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	fa22 f303 	lsr.w	r3, r2, r3
 8002872:	4a07      	ldr	r2, [pc, #28]	@ (8002890 <HAL_RCC_GetHCLKFreq+0x58>)
 8002874:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002876:	4a07      	ldr	r2, [pc, #28]	@ (8002894 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800287c:	4b04      	ldr	r3, [pc, #16]	@ (8002890 <HAL_RCC_GetHCLKFreq+0x58>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	58024400 	.word	0x58024400
 800288c:	08006a4c 	.word	0x08006a4c
 8002890:	24000004 	.word	0x24000004
 8002894:	24000000 	.word	0x24000000

08002898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800289c:	f7ff ffcc 	bl	8002838 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4904      	ldr	r1, [pc, #16]	@ (80028c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	58024400 	.word	0x58024400
 80028c0:	08006a4c 	.word	0x08006a4c

080028c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80028c8:	f7ff ffb6 	bl	8002838 <HAL_RCC_GetHCLKFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b06      	ldr	r3, [pc, #24]	@ (80028e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	4904      	ldr	r1, [pc, #16]	@ (80028ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	58024400 	.word	0x58024400
 80028ec:	08006a4c 	.word	0x08006a4c

080028f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80028f4:	f7ff ffa0 	bl	8002838 <HAL_RCC_GetHCLKFreq>
 80028f8:	4602      	mov	r2, r0
 80028fa:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	4904      	ldr	r1, [pc, #16]	@ (8002918 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002906:	5ccb      	ldrb	r3, [r1, r3]
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002910:	4618      	mov	r0, r3
 8002912:	bd80      	pop	{r7, pc}
 8002914:	58024400 	.word	0x58024400
 8002918:	08006a4c 	.word	0x08006a4c

0800291c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800291c:	b480      	push	{r7}
 800291e:	b089      	sub	sp, #36	@ 0x24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002924:	4ba1      	ldr	r3, [pc, #644]	@ (8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800292e:	4b9f      	ldr	r3, [pc, #636]	@ (8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002932:	0b1b      	lsrs	r3, r3, #12
 8002934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002938:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800293a:	4b9c      	ldr	r3, [pc, #624]	@ (8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800293c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002946:	4b99      	ldr	r3, [pc, #612]	@ (8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294a:	08db      	lsrs	r3, r3, #3
 800294c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8111 	beq.w	8002b8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2b02      	cmp	r3, #2
 800296e:	f000 8083 	beq.w	8002a78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	2b02      	cmp	r3, #2
 8002976:	f200 80a1 	bhi.w	8002abc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d056      	beq.n	8002a34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002986:	e099      	b.n	8002abc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002988:	4b88      	ldr	r3, [pc, #544]	@ (8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d02d      	beq.n	80029f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002994:	4b85      	ldr	r3, [pc, #532]	@ (8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	08db      	lsrs	r3, r3, #3
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	4a84      	ldr	r2, [pc, #528]	@ (8002bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
 80029a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	ee07 3a90 	vmov	s15, r3
 80029ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029be:	4b7b      	ldr	r3, [pc, #492]	@ (8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80029d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80029d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80029ee:	e087      	b.n	8002b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	ee07 3a90 	vmov	s15, r3
 80029f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80029fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a02:	4b6a      	ldr	r3, [pc, #424]	@ (8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a0a:	ee07 3a90 	vmov	s15, r3
 8002a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a32:	e065      	b.n	8002b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002bbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a46:	4b59      	ldr	r3, [pc, #356]	@ (8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a76:	e043      	b.n	8002b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a8a:	4b48      	ldr	r3, [pc, #288]	@ (8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002aba:	e021      	b.n	8002b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ac6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002bbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ace:	4b37      	ldr	r3, [pc, #220]	@ (8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad6:	ee07 3a90 	vmov	s15, r3
 8002ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8002ae2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002afe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002b00:	4b2a      	ldr	r3, [pc, #168]	@ (8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b04:	0a5b      	lsrs	r3, r3, #9
 8002b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b26:	ee17 2a90 	vmov	r2, s15
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b32:	0c1b      	lsrs	r3, r3, #16
 8002b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b38:	ee07 3a90 	vmov	s15, r3
 8002b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b54:	ee17 2a90 	vmov	r2, s15
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002b5c:	4b13      	ldr	r3, [pc, #76]	@ (8002bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b60:	0e1b      	lsrs	r3, r3, #24
 8002b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b66:	ee07 3a90 	vmov	s15, r3
 8002b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b82:	ee17 2a90 	vmov	r2, s15
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002b8a:	e008      	b.n	8002b9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
}
 8002b9e:	bf00      	nop
 8002ba0:	3724      	adds	r7, #36	@ 0x24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	58024400 	.word	0x58024400
 8002bb0:	03d09000 	.word	0x03d09000
 8002bb4:	46000000 	.word	0x46000000
 8002bb8:	4c742400 	.word	0x4c742400
 8002bbc:	4a742400 	.word	0x4a742400
 8002bc0:	4bbebc20 	.word	0x4bbebc20

08002bc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b089      	sub	sp, #36	@ 0x24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002bcc:	4ba1      	ldr	r3, [pc, #644]	@ (8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002bd6:	4b9f      	ldr	r3, [pc, #636]	@ (8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bda:	0d1b      	lsrs	r3, r3, #20
 8002bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002be0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002be2:	4b9c      	ldr	r3, [pc, #624]	@ (8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002bee:	4b99      	ldr	r3, [pc, #612]	@ (8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	08db      	lsrs	r3, r3, #3
 8002bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8111 	beq.w	8002e34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	f000 8083 	beq.w	8002d20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	f200 80a1 	bhi.w	8002d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d056      	beq.n	8002cdc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002c2e:	e099      	b.n	8002d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c30:	4b88      	ldr	r3, [pc, #544]	@ (8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d02d      	beq.n	8002c98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c3c:	4b85      	ldr	r3, [pc, #532]	@ (8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	08db      	lsrs	r3, r3, #3
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	4a84      	ldr	r2, [pc, #528]	@ (8002e58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	ee07 3a90 	vmov	s15, r3
 8002c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	ee07 3a90 	vmov	s15, r3
 8002c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c66:	4b7b      	ldr	r3, [pc, #492]	@ (8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c6e:	ee07 3a90 	vmov	s15, r3
 8002c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002c96:	e087      	b.n	8002da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	ee07 3a90 	vmov	s15, r3
 8002c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002e60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002caa:	4b6a      	ldr	r3, [pc, #424]	@ (8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb2:	ee07 3a90 	vmov	s15, r3
 8002cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8002cbe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002cda:	e065      	b.n	8002da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002e64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cee:	4b59      	ldr	r3, [pc, #356]	@ (8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf6:	ee07 3a90 	vmov	s15, r3
 8002cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d1e:	e043      	b.n	8002da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d32:	4b48      	ldr	r3, [pc, #288]	@ (8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d3a:	ee07 3a90 	vmov	s15, r3
 8002d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d62:	e021      	b.n	8002da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002e64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d76:	4b37      	ldr	r3, [pc, #220]	@ (8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d7e:	ee07 3a90 	vmov	s15, r3
 8002d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002da6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002da8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	0a5b      	lsrs	r3, r3, #9
 8002dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002db2:	ee07 3a90 	vmov	s15, r3
 8002db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8002dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dce:	ee17 2a90 	vmov	r2, s15
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	0c1b      	lsrs	r3, r3, #16
 8002ddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002de0:	ee07 3a90 	vmov	s15, r3
 8002de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002dec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002df0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002df8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dfc:	ee17 2a90 	vmov	r2, s15
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002e04:	4b13      	ldr	r3, [pc, #76]	@ (8002e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e08:	0e1b      	lsrs	r3, r3, #24
 8002e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e0e:	ee07 3a90 	vmov	s15, r3
 8002e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e2a:	ee17 2a90 	vmov	r2, s15
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002e32:	e008      	b.n	8002e46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]
}
 8002e46:	bf00      	nop
 8002e48:	3724      	adds	r7, #36	@ 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	58024400 	.word	0x58024400
 8002e58:	03d09000 	.word	0x03d09000
 8002e5c:	46000000 	.word	0x46000000
 8002e60:	4c742400 	.word	0x4c742400
 8002e64:	4a742400 	.word	0x4a742400
 8002e68:	4bbebc20 	.word	0x4bbebc20

08002e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e042      	b.n	8002f04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d106      	bne.n	8002e96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f83b 	bl	8002f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2224      	movs	r2, #36	@ 0x24
 8002e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fd9a 	bl	80039f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f82f 	bl	8002f20 <UART_SetConfig>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e01b      	b.n	8002f04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fe19 	bl	8003b34 <UART_CheckIdleState>
 8002f02:	4603      	mov	r3, r0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f24:	b092      	sub	sp, #72	@ 0x48
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4bbe      	ldr	r3, [pc, #760]	@ (8003248 <UART_SetConfig+0x328>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4ab3      	ldr	r2, [pc, #716]	@ (800324c <UART_SetConfig+0x32c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d004      	beq.n	8002f8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	4baf      	ldr	r3, [pc, #700]	@ (8003250 <UART_SetConfig+0x330>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa6:	f023 010f 	bic.w	r1, r3, #15
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4aa6      	ldr	r2, [pc, #664]	@ (8003254 <UART_SetConfig+0x334>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d177      	bne.n	80030b0 <UART_SetConfig+0x190>
 8002fc0:	4ba5      	ldr	r3, [pc, #660]	@ (8003258 <UART_SetConfig+0x338>)
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fc8:	2b28      	cmp	r3, #40	@ 0x28
 8002fca:	d86d      	bhi.n	80030a8 <UART_SetConfig+0x188>
 8002fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd4 <UART_SetConfig+0xb4>)
 8002fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd2:	bf00      	nop
 8002fd4:	08003079 	.word	0x08003079
 8002fd8:	080030a9 	.word	0x080030a9
 8002fdc:	080030a9 	.word	0x080030a9
 8002fe0:	080030a9 	.word	0x080030a9
 8002fe4:	080030a9 	.word	0x080030a9
 8002fe8:	080030a9 	.word	0x080030a9
 8002fec:	080030a9 	.word	0x080030a9
 8002ff0:	080030a9 	.word	0x080030a9
 8002ff4:	08003081 	.word	0x08003081
 8002ff8:	080030a9 	.word	0x080030a9
 8002ffc:	080030a9 	.word	0x080030a9
 8003000:	080030a9 	.word	0x080030a9
 8003004:	080030a9 	.word	0x080030a9
 8003008:	080030a9 	.word	0x080030a9
 800300c:	080030a9 	.word	0x080030a9
 8003010:	080030a9 	.word	0x080030a9
 8003014:	08003089 	.word	0x08003089
 8003018:	080030a9 	.word	0x080030a9
 800301c:	080030a9 	.word	0x080030a9
 8003020:	080030a9 	.word	0x080030a9
 8003024:	080030a9 	.word	0x080030a9
 8003028:	080030a9 	.word	0x080030a9
 800302c:	080030a9 	.word	0x080030a9
 8003030:	080030a9 	.word	0x080030a9
 8003034:	08003091 	.word	0x08003091
 8003038:	080030a9 	.word	0x080030a9
 800303c:	080030a9 	.word	0x080030a9
 8003040:	080030a9 	.word	0x080030a9
 8003044:	080030a9 	.word	0x080030a9
 8003048:	080030a9 	.word	0x080030a9
 800304c:	080030a9 	.word	0x080030a9
 8003050:	080030a9 	.word	0x080030a9
 8003054:	08003099 	.word	0x08003099
 8003058:	080030a9 	.word	0x080030a9
 800305c:	080030a9 	.word	0x080030a9
 8003060:	080030a9 	.word	0x080030a9
 8003064:	080030a9 	.word	0x080030a9
 8003068:	080030a9 	.word	0x080030a9
 800306c:	080030a9 	.word	0x080030a9
 8003070:	080030a9 	.word	0x080030a9
 8003074:	080030a1 	.word	0x080030a1
 8003078:	2301      	movs	r3, #1
 800307a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800307e:	e222      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003080:	2304      	movs	r3, #4
 8003082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003086:	e21e      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003088:	2308      	movs	r3, #8
 800308a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800308e:	e21a      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003090:	2310      	movs	r3, #16
 8003092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003096:	e216      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003098:	2320      	movs	r3, #32
 800309a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800309e:	e212      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80030a0:	2340      	movs	r3, #64	@ 0x40
 80030a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030a6:	e20e      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80030a8:	2380      	movs	r3, #128	@ 0x80
 80030aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030ae:	e20a      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a69      	ldr	r2, [pc, #420]	@ (800325c <UART_SetConfig+0x33c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d130      	bne.n	800311c <UART_SetConfig+0x1fc>
 80030ba:	4b67      	ldr	r3, [pc, #412]	@ (8003258 <UART_SetConfig+0x338>)
 80030bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	2b05      	cmp	r3, #5
 80030c4:	d826      	bhi.n	8003114 <UART_SetConfig+0x1f4>
 80030c6:	a201      	add	r2, pc, #4	@ (adr r2, 80030cc <UART_SetConfig+0x1ac>)
 80030c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030cc:	080030e5 	.word	0x080030e5
 80030d0:	080030ed 	.word	0x080030ed
 80030d4:	080030f5 	.word	0x080030f5
 80030d8:	080030fd 	.word	0x080030fd
 80030dc:	08003105 	.word	0x08003105
 80030e0:	0800310d 	.word	0x0800310d
 80030e4:	2300      	movs	r3, #0
 80030e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030ea:	e1ec      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80030ec:	2304      	movs	r3, #4
 80030ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030f2:	e1e8      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80030f4:	2308      	movs	r3, #8
 80030f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030fa:	e1e4      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80030fc:	2310      	movs	r3, #16
 80030fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003102:	e1e0      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003104:	2320      	movs	r3, #32
 8003106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800310a:	e1dc      	b.n	80034c6 <UART_SetConfig+0x5a6>
 800310c:	2340      	movs	r3, #64	@ 0x40
 800310e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003112:	e1d8      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003114:	2380      	movs	r3, #128	@ 0x80
 8003116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800311a:	e1d4      	b.n	80034c6 <UART_SetConfig+0x5a6>
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a4f      	ldr	r2, [pc, #316]	@ (8003260 <UART_SetConfig+0x340>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d130      	bne.n	8003188 <UART_SetConfig+0x268>
 8003126:	4b4c      	ldr	r3, [pc, #304]	@ (8003258 <UART_SetConfig+0x338>)
 8003128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	2b05      	cmp	r3, #5
 8003130:	d826      	bhi.n	8003180 <UART_SetConfig+0x260>
 8003132:	a201      	add	r2, pc, #4	@ (adr r2, 8003138 <UART_SetConfig+0x218>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	08003151 	.word	0x08003151
 800313c:	08003159 	.word	0x08003159
 8003140:	08003161 	.word	0x08003161
 8003144:	08003169 	.word	0x08003169
 8003148:	08003171 	.word	0x08003171
 800314c:	08003179 	.word	0x08003179
 8003150:	2300      	movs	r3, #0
 8003152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003156:	e1b6      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003158:	2304      	movs	r3, #4
 800315a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800315e:	e1b2      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003160:	2308      	movs	r3, #8
 8003162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003166:	e1ae      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003168:	2310      	movs	r3, #16
 800316a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800316e:	e1aa      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003170:	2320      	movs	r3, #32
 8003172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003176:	e1a6      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003178:	2340      	movs	r3, #64	@ 0x40
 800317a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800317e:	e1a2      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003180:	2380      	movs	r3, #128	@ 0x80
 8003182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003186:	e19e      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a35      	ldr	r2, [pc, #212]	@ (8003264 <UART_SetConfig+0x344>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d130      	bne.n	80031f4 <UART_SetConfig+0x2d4>
 8003192:	4b31      	ldr	r3, [pc, #196]	@ (8003258 <UART_SetConfig+0x338>)
 8003194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	2b05      	cmp	r3, #5
 800319c:	d826      	bhi.n	80031ec <UART_SetConfig+0x2cc>
 800319e:	a201      	add	r2, pc, #4	@ (adr r2, 80031a4 <UART_SetConfig+0x284>)
 80031a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a4:	080031bd 	.word	0x080031bd
 80031a8:	080031c5 	.word	0x080031c5
 80031ac:	080031cd 	.word	0x080031cd
 80031b0:	080031d5 	.word	0x080031d5
 80031b4:	080031dd 	.word	0x080031dd
 80031b8:	080031e5 	.word	0x080031e5
 80031bc:	2300      	movs	r3, #0
 80031be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031c2:	e180      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80031c4:	2304      	movs	r3, #4
 80031c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031ca:	e17c      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80031cc:	2308      	movs	r3, #8
 80031ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031d2:	e178      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80031d4:	2310      	movs	r3, #16
 80031d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031da:	e174      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80031dc:	2320      	movs	r3, #32
 80031de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031e2:	e170      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80031e4:	2340      	movs	r3, #64	@ 0x40
 80031e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031ea:	e16c      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80031ec:	2380      	movs	r3, #128	@ 0x80
 80031ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031f2:	e168      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003268 <UART_SetConfig+0x348>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d142      	bne.n	8003284 <UART_SetConfig+0x364>
 80031fe:	4b16      	ldr	r3, [pc, #88]	@ (8003258 <UART_SetConfig+0x338>)
 8003200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	2b05      	cmp	r3, #5
 8003208:	d838      	bhi.n	800327c <UART_SetConfig+0x35c>
 800320a:	a201      	add	r2, pc, #4	@ (adr r2, 8003210 <UART_SetConfig+0x2f0>)
 800320c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003210:	08003229 	.word	0x08003229
 8003214:	08003231 	.word	0x08003231
 8003218:	08003239 	.word	0x08003239
 800321c:	08003241 	.word	0x08003241
 8003220:	0800326d 	.word	0x0800326d
 8003224:	08003275 	.word	0x08003275
 8003228:	2300      	movs	r3, #0
 800322a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800322e:	e14a      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003230:	2304      	movs	r3, #4
 8003232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003236:	e146      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003238:	2308      	movs	r3, #8
 800323a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800323e:	e142      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003240:	2310      	movs	r3, #16
 8003242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003246:	e13e      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003248:	cfff69f3 	.word	0xcfff69f3
 800324c:	58000c00 	.word	0x58000c00
 8003250:	11fff4ff 	.word	0x11fff4ff
 8003254:	40011000 	.word	0x40011000
 8003258:	58024400 	.word	0x58024400
 800325c:	40004400 	.word	0x40004400
 8003260:	40004800 	.word	0x40004800
 8003264:	40004c00 	.word	0x40004c00
 8003268:	40005000 	.word	0x40005000
 800326c:	2320      	movs	r3, #32
 800326e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003272:	e128      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003274:	2340      	movs	r3, #64	@ 0x40
 8003276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800327a:	e124      	b.n	80034c6 <UART_SetConfig+0x5a6>
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003282:	e120      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4acb      	ldr	r2, [pc, #812]	@ (80035b8 <UART_SetConfig+0x698>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d176      	bne.n	800337c <UART_SetConfig+0x45c>
 800328e:	4bcb      	ldr	r3, [pc, #812]	@ (80035bc <UART_SetConfig+0x69c>)
 8003290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003292:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003296:	2b28      	cmp	r3, #40	@ 0x28
 8003298:	d86c      	bhi.n	8003374 <UART_SetConfig+0x454>
 800329a:	a201      	add	r2, pc, #4	@ (adr r2, 80032a0 <UART_SetConfig+0x380>)
 800329c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a0:	08003345 	.word	0x08003345
 80032a4:	08003375 	.word	0x08003375
 80032a8:	08003375 	.word	0x08003375
 80032ac:	08003375 	.word	0x08003375
 80032b0:	08003375 	.word	0x08003375
 80032b4:	08003375 	.word	0x08003375
 80032b8:	08003375 	.word	0x08003375
 80032bc:	08003375 	.word	0x08003375
 80032c0:	0800334d 	.word	0x0800334d
 80032c4:	08003375 	.word	0x08003375
 80032c8:	08003375 	.word	0x08003375
 80032cc:	08003375 	.word	0x08003375
 80032d0:	08003375 	.word	0x08003375
 80032d4:	08003375 	.word	0x08003375
 80032d8:	08003375 	.word	0x08003375
 80032dc:	08003375 	.word	0x08003375
 80032e0:	08003355 	.word	0x08003355
 80032e4:	08003375 	.word	0x08003375
 80032e8:	08003375 	.word	0x08003375
 80032ec:	08003375 	.word	0x08003375
 80032f0:	08003375 	.word	0x08003375
 80032f4:	08003375 	.word	0x08003375
 80032f8:	08003375 	.word	0x08003375
 80032fc:	08003375 	.word	0x08003375
 8003300:	0800335d 	.word	0x0800335d
 8003304:	08003375 	.word	0x08003375
 8003308:	08003375 	.word	0x08003375
 800330c:	08003375 	.word	0x08003375
 8003310:	08003375 	.word	0x08003375
 8003314:	08003375 	.word	0x08003375
 8003318:	08003375 	.word	0x08003375
 800331c:	08003375 	.word	0x08003375
 8003320:	08003365 	.word	0x08003365
 8003324:	08003375 	.word	0x08003375
 8003328:	08003375 	.word	0x08003375
 800332c:	08003375 	.word	0x08003375
 8003330:	08003375 	.word	0x08003375
 8003334:	08003375 	.word	0x08003375
 8003338:	08003375 	.word	0x08003375
 800333c:	08003375 	.word	0x08003375
 8003340:	0800336d 	.word	0x0800336d
 8003344:	2301      	movs	r3, #1
 8003346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800334a:	e0bc      	b.n	80034c6 <UART_SetConfig+0x5a6>
 800334c:	2304      	movs	r3, #4
 800334e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003352:	e0b8      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003354:	2308      	movs	r3, #8
 8003356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800335a:	e0b4      	b.n	80034c6 <UART_SetConfig+0x5a6>
 800335c:	2310      	movs	r3, #16
 800335e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003362:	e0b0      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003364:	2320      	movs	r3, #32
 8003366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800336a:	e0ac      	b.n	80034c6 <UART_SetConfig+0x5a6>
 800336c:	2340      	movs	r3, #64	@ 0x40
 800336e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003372:	e0a8      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003374:	2380      	movs	r3, #128	@ 0x80
 8003376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800337a:	e0a4      	b.n	80034c6 <UART_SetConfig+0x5a6>
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a8f      	ldr	r2, [pc, #572]	@ (80035c0 <UART_SetConfig+0x6a0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d130      	bne.n	80033e8 <UART_SetConfig+0x4c8>
 8003386:	4b8d      	ldr	r3, [pc, #564]	@ (80035bc <UART_SetConfig+0x69c>)
 8003388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	2b05      	cmp	r3, #5
 8003390:	d826      	bhi.n	80033e0 <UART_SetConfig+0x4c0>
 8003392:	a201      	add	r2, pc, #4	@ (adr r2, 8003398 <UART_SetConfig+0x478>)
 8003394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003398:	080033b1 	.word	0x080033b1
 800339c:	080033b9 	.word	0x080033b9
 80033a0:	080033c1 	.word	0x080033c1
 80033a4:	080033c9 	.word	0x080033c9
 80033a8:	080033d1 	.word	0x080033d1
 80033ac:	080033d9 	.word	0x080033d9
 80033b0:	2300      	movs	r3, #0
 80033b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033b6:	e086      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80033b8:	2304      	movs	r3, #4
 80033ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033be:	e082      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80033c0:	2308      	movs	r3, #8
 80033c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033c6:	e07e      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80033c8:	2310      	movs	r3, #16
 80033ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033ce:	e07a      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80033d0:	2320      	movs	r3, #32
 80033d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033d6:	e076      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80033d8:	2340      	movs	r3, #64	@ 0x40
 80033da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033de:	e072      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80033e0:	2380      	movs	r3, #128	@ 0x80
 80033e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033e6:	e06e      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a75      	ldr	r2, [pc, #468]	@ (80035c4 <UART_SetConfig+0x6a4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d130      	bne.n	8003454 <UART_SetConfig+0x534>
 80033f2:	4b72      	ldr	r3, [pc, #456]	@ (80035bc <UART_SetConfig+0x69c>)
 80033f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	2b05      	cmp	r3, #5
 80033fc:	d826      	bhi.n	800344c <UART_SetConfig+0x52c>
 80033fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003404 <UART_SetConfig+0x4e4>)
 8003400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003404:	0800341d 	.word	0x0800341d
 8003408:	08003425 	.word	0x08003425
 800340c:	0800342d 	.word	0x0800342d
 8003410:	08003435 	.word	0x08003435
 8003414:	0800343d 	.word	0x0800343d
 8003418:	08003445 	.word	0x08003445
 800341c:	2300      	movs	r3, #0
 800341e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003422:	e050      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003424:	2304      	movs	r3, #4
 8003426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800342a:	e04c      	b.n	80034c6 <UART_SetConfig+0x5a6>
 800342c:	2308      	movs	r3, #8
 800342e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003432:	e048      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003434:	2310      	movs	r3, #16
 8003436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800343a:	e044      	b.n	80034c6 <UART_SetConfig+0x5a6>
 800343c:	2320      	movs	r3, #32
 800343e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003442:	e040      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003444:	2340      	movs	r3, #64	@ 0x40
 8003446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800344a:	e03c      	b.n	80034c6 <UART_SetConfig+0x5a6>
 800344c:	2380      	movs	r3, #128	@ 0x80
 800344e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003452:	e038      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a5b      	ldr	r2, [pc, #364]	@ (80035c8 <UART_SetConfig+0x6a8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d130      	bne.n	80034c0 <UART_SetConfig+0x5a0>
 800345e:	4b57      	ldr	r3, [pc, #348]	@ (80035bc <UART_SetConfig+0x69c>)
 8003460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	2b05      	cmp	r3, #5
 8003468:	d826      	bhi.n	80034b8 <UART_SetConfig+0x598>
 800346a:	a201      	add	r2, pc, #4	@ (adr r2, 8003470 <UART_SetConfig+0x550>)
 800346c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003470:	08003489 	.word	0x08003489
 8003474:	08003491 	.word	0x08003491
 8003478:	08003499 	.word	0x08003499
 800347c:	080034a1 	.word	0x080034a1
 8003480:	080034a9 	.word	0x080034a9
 8003484:	080034b1 	.word	0x080034b1
 8003488:	2302      	movs	r3, #2
 800348a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800348e:	e01a      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003490:	2304      	movs	r3, #4
 8003492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003496:	e016      	b.n	80034c6 <UART_SetConfig+0x5a6>
 8003498:	2308      	movs	r3, #8
 800349a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800349e:	e012      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80034a0:	2310      	movs	r3, #16
 80034a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034a6:	e00e      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80034a8:	2320      	movs	r3, #32
 80034aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034ae:	e00a      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80034b0:	2340      	movs	r3, #64	@ 0x40
 80034b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034b6:	e006      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80034b8:	2380      	movs	r3, #128	@ 0x80
 80034ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034be:	e002      	b.n	80034c6 <UART_SetConfig+0x5a6>
 80034c0:	2380      	movs	r3, #128	@ 0x80
 80034c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a3f      	ldr	r2, [pc, #252]	@ (80035c8 <UART_SetConfig+0x6a8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	f040 80f8 	bne.w	80036c2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	dc46      	bgt.n	8003568 <UART_SetConfig+0x648>
 80034da:	2b02      	cmp	r3, #2
 80034dc:	f2c0 8082 	blt.w	80035e4 <UART_SetConfig+0x6c4>
 80034e0:	3b02      	subs	r3, #2
 80034e2:	2b1e      	cmp	r3, #30
 80034e4:	d87e      	bhi.n	80035e4 <UART_SetConfig+0x6c4>
 80034e6:	a201      	add	r2, pc, #4	@ (adr r2, 80034ec <UART_SetConfig+0x5cc>)
 80034e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ec:	0800356f 	.word	0x0800356f
 80034f0:	080035e5 	.word	0x080035e5
 80034f4:	08003577 	.word	0x08003577
 80034f8:	080035e5 	.word	0x080035e5
 80034fc:	080035e5 	.word	0x080035e5
 8003500:	080035e5 	.word	0x080035e5
 8003504:	08003587 	.word	0x08003587
 8003508:	080035e5 	.word	0x080035e5
 800350c:	080035e5 	.word	0x080035e5
 8003510:	080035e5 	.word	0x080035e5
 8003514:	080035e5 	.word	0x080035e5
 8003518:	080035e5 	.word	0x080035e5
 800351c:	080035e5 	.word	0x080035e5
 8003520:	080035e5 	.word	0x080035e5
 8003524:	08003597 	.word	0x08003597
 8003528:	080035e5 	.word	0x080035e5
 800352c:	080035e5 	.word	0x080035e5
 8003530:	080035e5 	.word	0x080035e5
 8003534:	080035e5 	.word	0x080035e5
 8003538:	080035e5 	.word	0x080035e5
 800353c:	080035e5 	.word	0x080035e5
 8003540:	080035e5 	.word	0x080035e5
 8003544:	080035e5 	.word	0x080035e5
 8003548:	080035e5 	.word	0x080035e5
 800354c:	080035e5 	.word	0x080035e5
 8003550:	080035e5 	.word	0x080035e5
 8003554:	080035e5 	.word	0x080035e5
 8003558:	080035e5 	.word	0x080035e5
 800355c:	080035e5 	.word	0x080035e5
 8003560:	080035e5 	.word	0x080035e5
 8003564:	080035d7 	.word	0x080035d7
 8003568:	2b40      	cmp	r3, #64	@ 0x40
 800356a:	d037      	beq.n	80035dc <UART_SetConfig+0x6bc>
 800356c:	e03a      	b.n	80035e4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800356e:	f7ff f9bf 	bl	80028f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8003572:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003574:	e03c      	b.n	80035f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff f9ce 	bl	800291c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003584:	e034      	b.n	80035f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003586:	f107 0318 	add.w	r3, r7, #24
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff fb1a 	bl	8002bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003594:	e02c      	b.n	80035f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003596:	4b09      	ldr	r3, [pc, #36]	@ (80035bc <UART_SetConfig+0x69c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d016      	beq.n	80035d0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80035a2:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <UART_SetConfig+0x69c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	08db      	lsrs	r3, r3, #3
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	4a07      	ldr	r2, [pc, #28]	@ (80035cc <UART_SetConfig+0x6ac>)
 80035ae:	fa22 f303 	lsr.w	r3, r2, r3
 80035b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80035b4:	e01c      	b.n	80035f0 <UART_SetConfig+0x6d0>
 80035b6:	bf00      	nop
 80035b8:	40011400 	.word	0x40011400
 80035bc:	58024400 	.word	0x58024400
 80035c0:	40007800 	.word	0x40007800
 80035c4:	40007c00 	.word	0x40007c00
 80035c8:	58000c00 	.word	0x58000c00
 80035cc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80035d0:	4b9d      	ldr	r3, [pc, #628]	@ (8003848 <UART_SetConfig+0x928>)
 80035d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80035d4:	e00c      	b.n	80035f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80035d6:	4b9d      	ldr	r3, [pc, #628]	@ (800384c <UART_SetConfig+0x92c>)
 80035d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80035da:	e009      	b.n	80035f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80035e2:	e005      	b.n	80035f0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80035ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 81de 	beq.w	80039b4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fc:	4a94      	ldr	r2, [pc, #592]	@ (8003850 <UART_SetConfig+0x930>)
 80035fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003602:	461a      	mov	r2, r3
 8003604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003606:	fbb3 f3f2 	udiv	r3, r3, r2
 800360a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	4413      	add	r3, r2
 8003616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003618:	429a      	cmp	r2, r3
 800361a:	d305      	bcc.n	8003628 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003624:	429a      	cmp	r2, r3
 8003626:	d903      	bls.n	8003630 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800362e:	e1c1      	b.n	80039b4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003632:	2200      	movs	r2, #0
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	60fa      	str	r2, [r7, #12]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	4a84      	ldr	r2, [pc, #528]	@ (8003850 <UART_SetConfig+0x930>)
 800363e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003642:	b29b      	uxth	r3, r3
 8003644:	2200      	movs	r2, #0
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800364e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003652:	f7fc fe45 	bl	80002e0 <__aeabi_uldivmod>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	020b      	lsls	r3, r1, #8
 8003668:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800366c:	0202      	lsls	r2, r0, #8
 800366e:	6979      	ldr	r1, [r7, #20]
 8003670:	6849      	ldr	r1, [r1, #4]
 8003672:	0849      	lsrs	r1, r1, #1
 8003674:	2000      	movs	r0, #0
 8003676:	460c      	mov	r4, r1
 8003678:	4605      	mov	r5, r0
 800367a:	eb12 0804 	adds.w	r8, r2, r4
 800367e:	eb43 0905 	adc.w	r9, r3, r5
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	469a      	mov	sl, r3
 800368a:	4693      	mov	fp, r2
 800368c:	4652      	mov	r2, sl
 800368e:	465b      	mov	r3, fp
 8003690:	4640      	mov	r0, r8
 8003692:	4649      	mov	r1, r9
 8003694:	f7fc fe24 	bl	80002e0 <__aeabi_uldivmod>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4613      	mov	r3, r2
 800369e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036a6:	d308      	bcc.n	80036ba <UART_SetConfig+0x79a>
 80036a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036ae:	d204      	bcs.n	80036ba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036b6:	60da      	str	r2, [r3, #12]
 80036b8:	e17c      	b.n	80039b4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80036c0:	e178      	b.n	80039b4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036ca:	f040 80c5 	bne.w	8003858 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80036ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	dc48      	bgt.n	8003768 <UART_SetConfig+0x848>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	db7b      	blt.n	80037d2 <UART_SetConfig+0x8b2>
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d879      	bhi.n	80037d2 <UART_SetConfig+0x8b2>
 80036de:	a201      	add	r2, pc, #4	@ (adr r2, 80036e4 <UART_SetConfig+0x7c4>)
 80036e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e4:	0800376f 	.word	0x0800376f
 80036e8:	08003777 	.word	0x08003777
 80036ec:	080037d3 	.word	0x080037d3
 80036f0:	080037d3 	.word	0x080037d3
 80036f4:	0800377f 	.word	0x0800377f
 80036f8:	080037d3 	.word	0x080037d3
 80036fc:	080037d3 	.word	0x080037d3
 8003700:	080037d3 	.word	0x080037d3
 8003704:	0800378f 	.word	0x0800378f
 8003708:	080037d3 	.word	0x080037d3
 800370c:	080037d3 	.word	0x080037d3
 8003710:	080037d3 	.word	0x080037d3
 8003714:	080037d3 	.word	0x080037d3
 8003718:	080037d3 	.word	0x080037d3
 800371c:	080037d3 	.word	0x080037d3
 8003720:	080037d3 	.word	0x080037d3
 8003724:	0800379f 	.word	0x0800379f
 8003728:	080037d3 	.word	0x080037d3
 800372c:	080037d3 	.word	0x080037d3
 8003730:	080037d3 	.word	0x080037d3
 8003734:	080037d3 	.word	0x080037d3
 8003738:	080037d3 	.word	0x080037d3
 800373c:	080037d3 	.word	0x080037d3
 8003740:	080037d3 	.word	0x080037d3
 8003744:	080037d3 	.word	0x080037d3
 8003748:	080037d3 	.word	0x080037d3
 800374c:	080037d3 	.word	0x080037d3
 8003750:	080037d3 	.word	0x080037d3
 8003754:	080037d3 	.word	0x080037d3
 8003758:	080037d3 	.word	0x080037d3
 800375c:	080037d3 	.word	0x080037d3
 8003760:	080037d3 	.word	0x080037d3
 8003764:	080037c5 	.word	0x080037c5
 8003768:	2b40      	cmp	r3, #64	@ 0x40
 800376a:	d02e      	beq.n	80037ca <UART_SetConfig+0x8aa>
 800376c:	e031      	b.n	80037d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800376e:	f7ff f893 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 8003772:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003774:	e033      	b.n	80037de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003776:	f7ff f8a5 	bl	80028c4 <HAL_RCC_GetPCLK2Freq>
 800377a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800377c:	e02f      	b.n	80037de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800377e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff f8ca 	bl	800291c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800378c:	e027      	b.n	80037de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800378e:	f107 0318 	add.w	r3, r7, #24
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fa16 	bl	8002bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800379c:	e01f      	b.n	80037de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800379e:	4b2d      	ldr	r3, [pc, #180]	@ (8003854 <UART_SetConfig+0x934>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80037aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003854 <UART_SetConfig+0x934>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	08db      	lsrs	r3, r3, #3
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	4a24      	ldr	r2, [pc, #144]	@ (8003848 <UART_SetConfig+0x928>)
 80037b6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80037bc:	e00f      	b.n	80037de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80037be:	4b22      	ldr	r3, [pc, #136]	@ (8003848 <UART_SetConfig+0x928>)
 80037c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037c2:	e00c      	b.n	80037de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80037c4:	4b21      	ldr	r3, [pc, #132]	@ (800384c <UART_SetConfig+0x92c>)
 80037c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037c8:	e009      	b.n	80037de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037d0:	e005      	b.n	80037de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80037dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80e7 	beq.w	80039b4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	4a19      	ldr	r2, [pc, #100]	@ (8003850 <UART_SetConfig+0x930>)
 80037ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037f0:	461a      	mov	r2, r3
 80037f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80037f8:	005a      	lsls	r2, r3, #1
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	085b      	lsrs	r3, r3, #1
 8003800:	441a      	add	r2, r3
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	fbb2 f3f3 	udiv	r3, r2, r3
 800380a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800380c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800380e:	2b0f      	cmp	r3, #15
 8003810:	d916      	bls.n	8003840 <UART_SetConfig+0x920>
 8003812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003818:	d212      	bcs.n	8003840 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800381a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381c:	b29b      	uxth	r3, r3
 800381e:	f023 030f 	bic.w	r3, r3, #15
 8003822:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	b29b      	uxth	r3, r3
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	b29a      	uxth	r2, r3
 8003830:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003832:	4313      	orrs	r3, r2
 8003834:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800383c:	60da      	str	r2, [r3, #12]
 800383e:	e0b9      	b.n	80039b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003846:	e0b5      	b.n	80039b4 <UART_SetConfig+0xa94>
 8003848:	03d09000 	.word	0x03d09000
 800384c:	003d0900 	.word	0x003d0900
 8003850:	08006a8c 	.word	0x08006a8c
 8003854:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8003858:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800385c:	2b20      	cmp	r3, #32
 800385e:	dc49      	bgt.n	80038f4 <UART_SetConfig+0x9d4>
 8003860:	2b00      	cmp	r3, #0
 8003862:	db7c      	blt.n	800395e <UART_SetConfig+0xa3e>
 8003864:	2b20      	cmp	r3, #32
 8003866:	d87a      	bhi.n	800395e <UART_SetConfig+0xa3e>
 8003868:	a201      	add	r2, pc, #4	@ (adr r2, 8003870 <UART_SetConfig+0x950>)
 800386a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386e:	bf00      	nop
 8003870:	080038fb 	.word	0x080038fb
 8003874:	08003903 	.word	0x08003903
 8003878:	0800395f 	.word	0x0800395f
 800387c:	0800395f 	.word	0x0800395f
 8003880:	0800390b 	.word	0x0800390b
 8003884:	0800395f 	.word	0x0800395f
 8003888:	0800395f 	.word	0x0800395f
 800388c:	0800395f 	.word	0x0800395f
 8003890:	0800391b 	.word	0x0800391b
 8003894:	0800395f 	.word	0x0800395f
 8003898:	0800395f 	.word	0x0800395f
 800389c:	0800395f 	.word	0x0800395f
 80038a0:	0800395f 	.word	0x0800395f
 80038a4:	0800395f 	.word	0x0800395f
 80038a8:	0800395f 	.word	0x0800395f
 80038ac:	0800395f 	.word	0x0800395f
 80038b0:	0800392b 	.word	0x0800392b
 80038b4:	0800395f 	.word	0x0800395f
 80038b8:	0800395f 	.word	0x0800395f
 80038bc:	0800395f 	.word	0x0800395f
 80038c0:	0800395f 	.word	0x0800395f
 80038c4:	0800395f 	.word	0x0800395f
 80038c8:	0800395f 	.word	0x0800395f
 80038cc:	0800395f 	.word	0x0800395f
 80038d0:	0800395f 	.word	0x0800395f
 80038d4:	0800395f 	.word	0x0800395f
 80038d8:	0800395f 	.word	0x0800395f
 80038dc:	0800395f 	.word	0x0800395f
 80038e0:	0800395f 	.word	0x0800395f
 80038e4:	0800395f 	.word	0x0800395f
 80038e8:	0800395f 	.word	0x0800395f
 80038ec:	0800395f 	.word	0x0800395f
 80038f0:	08003951 	.word	0x08003951
 80038f4:	2b40      	cmp	r3, #64	@ 0x40
 80038f6:	d02e      	beq.n	8003956 <UART_SetConfig+0xa36>
 80038f8:	e031      	b.n	800395e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038fa:	f7fe ffcd 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 80038fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003900:	e033      	b.n	800396a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003902:	f7fe ffdf 	bl	80028c4 <HAL_RCC_GetPCLK2Freq>
 8003906:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003908:	e02f      	b.n	800396a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800390a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff f804 	bl	800291c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003918:	e027      	b.n	800396a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800391a:	f107 0318 	add.w	r3, r7, #24
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff f950 	bl	8002bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003928:	e01f      	b.n	800396a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800392a:	4b2d      	ldr	r3, [pc, #180]	@ (80039e0 <UART_SetConfig+0xac0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003936:	4b2a      	ldr	r3, [pc, #168]	@ (80039e0 <UART_SetConfig+0xac0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	08db      	lsrs	r3, r3, #3
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	4a28      	ldr	r2, [pc, #160]	@ (80039e4 <UART_SetConfig+0xac4>)
 8003942:	fa22 f303 	lsr.w	r3, r2, r3
 8003946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003948:	e00f      	b.n	800396a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800394a:	4b26      	ldr	r3, [pc, #152]	@ (80039e4 <UART_SetConfig+0xac4>)
 800394c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800394e:	e00c      	b.n	800396a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003950:	4b25      	ldr	r3, [pc, #148]	@ (80039e8 <UART_SetConfig+0xac8>)
 8003952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003954:	e009      	b.n	800396a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800395a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800395c:	e005      	b.n	800396a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003968:	bf00      	nop
    }

    if (pclk != 0U)
 800396a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800396c:	2b00      	cmp	r3, #0
 800396e:	d021      	beq.n	80039b4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	4a1d      	ldr	r2, [pc, #116]	@ (80039ec <UART_SetConfig+0xacc>)
 8003976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800397a:	461a      	mov	r2, r3
 800397c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800397e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	085b      	lsrs	r3, r3, #1
 8003988:	441a      	add	r2, r3
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003996:	2b0f      	cmp	r3, #15
 8003998:	d909      	bls.n	80039ae <UART_SetConfig+0xa8e>
 800399a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a0:	d205      	bcs.n	80039ae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60da      	str	r2, [r3, #12]
 80039ac:	e002      	b.n	80039b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2201      	movs	r2, #1
 80039c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2200      	movs	r2, #0
 80039c8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2200      	movs	r2, #0
 80039ce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80039d0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3748      	adds	r7, #72	@ 0x48
 80039d8:	46bd      	mov	sp, r7
 80039da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039de:	bf00      	nop
 80039e0:	58024400 	.word	0x58024400
 80039e4:	03d09000 	.word	0x03d09000
 80039e8:	003d0900 	.word	0x003d0900
 80039ec:	08006a8c 	.word	0x08006a8c

080039f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d01a      	beq.n	8003b06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aee:	d10a      	bne.n	8003b06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	605a      	str	r2, [r3, #4]
  }
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b098      	sub	sp, #96	@ 0x60
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b44:	f7fd fad8 	bl	80010f8 <HAL_GetTick>
 8003b48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d12f      	bne.n	8003bb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b60:	2200      	movs	r2, #0
 8003b62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f88e 	bl	8003c88 <UART_WaitOnFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d022      	beq.n	8003bb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7a:	e853 3f00 	ldrex	r3, [r3]
 8003b7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b86:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b98:	e841 2300 	strex	r3, r2, [r1]
 8003b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1e6      	bne.n	8003b72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e063      	b.n	8003c80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d149      	bne.n	8003c5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f857 	bl	8003c88 <UART_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d03c      	beq.n	8003c5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	e853 3f00 	ldrex	r3, [r3]
 8003bec:	623b      	str	r3, [r7, #32]
   return(result);
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c06:	e841 2300 	strex	r3, r2, [r1]
 8003c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1e6      	bne.n	8003be0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3308      	adds	r3, #8
 8003c18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3308      	adds	r3, #8
 8003c30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c32:	61fa      	str	r2, [r7, #28]
 8003c34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	69b9      	ldr	r1, [r7, #24]
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	617b      	str	r3, [r7, #20]
   return(result);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e5      	bne.n	8003c12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e012      	b.n	8003c80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3758      	adds	r7, #88	@ 0x58
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	4613      	mov	r3, r2
 8003c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c98:	e04f      	b.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca0:	d04b      	beq.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca2:	f7fd fa29 	bl	80010f8 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d302      	bcc.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e04e      	b.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d037      	beq.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b80      	cmp	r3, #128	@ 0x80
 8003cce:	d034      	beq.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b40      	cmp	r3, #64	@ 0x40
 8003cd4:	d031      	beq.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d110      	bne.n	8003d06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2208      	movs	r2, #8
 8003cea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f839 	bl	8003d64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2208      	movs	r2, #8
 8003cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e029      	b.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d14:	d111      	bne.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f81f 	bl	8003d64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e00f      	b.n	8003d5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4013      	ands	r3, r2
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	bf0c      	ite	eq
 8003d4a:	2301      	moveq	r3, #1
 8003d4c:	2300      	movne	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d0a0      	beq.n	8003c9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b095      	sub	sp, #84	@ 0x54
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e6      	bne.n	8003d6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3308      	adds	r3, #8
 8003da4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e2c <UART_EndRxTransfer+0xc8>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3308      	adds	r3, #8
 8003dbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e5      	bne.n	8003d9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d118      	bne.n	8003e0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f023 0310 	bic.w	r3, r3, #16
 8003dee:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6979      	ldr	r1, [r7, #20]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	613b      	str	r3, [r7, #16]
   return(result);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e6      	bne.n	8003dda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003e20:	bf00      	nop
 8003e22:	3754      	adds	r7, #84	@ 0x54
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	effffffe 	.word	0xeffffffe

08003e30 <__NVIC_SetPriority>:
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	6039      	str	r1, [r7, #0]
 8003e3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	db0a      	blt.n	8003e5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	490c      	ldr	r1, [pc, #48]	@ (8003e7c <__NVIC_SetPriority+0x4c>)
 8003e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e4e:	0112      	lsls	r2, r2, #4
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	440b      	add	r3, r1
 8003e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003e58:	e00a      	b.n	8003e70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	4908      	ldr	r1, [pc, #32]	@ (8003e80 <__NVIC_SetPriority+0x50>)
 8003e60:	88fb      	ldrh	r3, [r7, #6]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	3b04      	subs	r3, #4
 8003e68:	0112      	lsls	r2, r2, #4
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	761a      	strb	r2, [r3, #24]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	e000e100 	.word	0xe000e100
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003e88:	2100      	movs	r1, #0
 8003e8a:	f06f 0004 	mvn.w	r0, #4
 8003e8e:	f7ff ffcf 	bl	8003e30 <__NVIC_SetPriority>
#endif
}
 8003e92:	bf00      	nop
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e9e:	f3ef 8305 	mrs	r3, IPSR
 8003ea2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ea4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003eaa:	f06f 0305 	mvn.w	r3, #5
 8003eae:	607b      	str	r3, [r7, #4]
 8003eb0:	e00c      	b.n	8003ecc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8003edc <osKernelInitialize+0x44>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d105      	bne.n	8003ec6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003eba:	4b08      	ldr	r3, [pc, #32]	@ (8003edc <osKernelInitialize+0x44>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	607b      	str	r3, [r7, #4]
 8003ec4:	e002      	b.n	8003ecc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ecc:	687b      	ldr	r3, [r7, #4]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	24000100 	.word	0x24000100

08003ee0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ee6:	f3ef 8305 	mrs	r3, IPSR
 8003eea:	603b      	str	r3, [r7, #0]
  return(result);
 8003eec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <osKernelStart+0x1a>
    stat = osErrorISR;
 8003ef2:	f06f 0305 	mvn.w	r3, #5
 8003ef6:	607b      	str	r3, [r7, #4]
 8003ef8:	e010      	b.n	8003f1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003efa:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <osKernelStart+0x48>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d109      	bne.n	8003f16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f02:	f7ff ffbf 	bl	8003e84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f06:	4b08      	ldr	r3, [pc, #32]	@ (8003f28 <osKernelStart+0x48>)
 8003f08:	2202      	movs	r2, #2
 8003f0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f0c:	f001 fcbc 	bl	8005888 <vTaskStartScheduler>
      stat = osOK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	607b      	str	r3, [r7, #4]
 8003f14:	e002      	b.n	8003f1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003f16:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f1c:	687b      	ldr	r3, [r7, #4]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	24000100 	.word	0x24000100

08003f2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08e      	sub	sp, #56	@ 0x38
 8003f30:	af04      	add	r7, sp, #16
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f3c:	f3ef 8305 	mrs	r3, IPSR
 8003f40:	617b      	str	r3, [r7, #20]
  return(result);
 8003f42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d17e      	bne.n	8004046 <osThreadNew+0x11a>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d07b      	beq.n	8004046 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003f4e:	2380      	movs	r3, #128	@ 0x80
 8003f50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003f52:	2318      	movs	r3, #24
 8003f54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d045      	beq.n	8003ff2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <osThreadNew+0x48>
        name = attr->name;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <osThreadNew+0x6e>
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	2b38      	cmp	r3, #56	@ 0x38
 8003f8c:	d805      	bhi.n	8003f9a <osThreadNew+0x6e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <osThreadNew+0x72>
        return (NULL);
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e054      	b.n	8004048 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	089b      	lsrs	r3, r3, #2
 8003fac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00e      	beq.n	8003fd4 <osThreadNew+0xa8>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	2b5b      	cmp	r3, #91	@ 0x5b
 8003fbc:	d90a      	bls.n	8003fd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d006      	beq.n	8003fd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <osThreadNew+0xa8>
        mem = 1;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	e010      	b.n	8003ff6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10c      	bne.n	8003ff6 <osThreadNew+0xca>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d108      	bne.n	8003ff6 <osThreadNew+0xca>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d104      	bne.n	8003ff6 <osThreadNew+0xca>
          mem = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61bb      	str	r3, [r7, #24]
 8003ff0:	e001      	b.n	8003ff6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d110      	bne.n	800401e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004004:	9202      	str	r2, [sp, #8]
 8004006:	9301      	str	r3, [sp, #4]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6a3a      	ldr	r2, [r7, #32]
 8004010:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f001 fa5c 	bl	80054d0 <xTaskCreateStatic>
 8004018:	4603      	mov	r3, r0
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	e013      	b.n	8004046 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d110      	bne.n	8004046 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	b29a      	uxth	r2, r3
 8004028:	f107 0310 	add.w	r3, r7, #16
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f001 faaa 	bl	8005590 <xTaskCreate>
 800403c:	4603      	mov	r3, r0
 800403e:	2b01      	cmp	r3, #1
 8004040:	d001      	beq.n	8004046 <osThreadNew+0x11a>
            hTask = NULL;
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004046:	693b      	ldr	r3, [r7, #16]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3728      	adds	r7, #40	@ 0x28
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004058:	f3ef 8305 	mrs	r3, IPSR
 800405c:	60bb      	str	r3, [r7, #8]
  return(result);
 800405e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <osDelay+0x1c>
    stat = osErrorISR;
 8004064:	f06f 0305 	mvn.w	r3, #5
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	e007      	b.n	800407c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f001 fbd0 	bl	800581c <vTaskDelay>
    }
  }

  return (stat);
 800407c:	68fb      	ldr	r3, [r7, #12]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4a07      	ldr	r2, [pc, #28]	@ (80040b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004098:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4a06      	ldr	r2, [pc, #24]	@ (80040b8 <vApplicationGetIdleTaskMemory+0x30>)
 800409e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2280      	movs	r2, #128	@ 0x80
 80040a4:	601a      	str	r2, [r3, #0]
}
 80040a6:	bf00      	nop
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	24000104 	.word	0x24000104
 80040b8:	24000160 	.word	0x24000160

080040bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4a07      	ldr	r2, [pc, #28]	@ (80040e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80040cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4a06      	ldr	r2, [pc, #24]	@ (80040ec <vApplicationGetTimerTaskMemory+0x30>)
 80040d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040da:	601a      	str	r2, [r3, #0]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	24000360 	.word	0x24000360
 80040ec:	240003bc 	.word	0x240003bc

080040f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08a      	sub	sp, #40	@ 0x28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80040f8:	2300      	movs	r3, #0
 80040fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80040fc:	f001 fc2c 	bl	8005958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004100:	4b5c      	ldr	r3, [pc, #368]	@ (8004274 <pvPortMalloc+0x184>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004108:	f000 f924 	bl	8004354 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800410c:	4b5a      	ldr	r3, [pc, #360]	@ (8004278 <pvPortMalloc+0x188>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4013      	ands	r3, r2
 8004114:	2b00      	cmp	r3, #0
 8004116:	f040 8095 	bne.w	8004244 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01e      	beq.n	800415e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004120:	2208      	movs	r2, #8
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4413      	add	r3, r2
 8004126:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	2b00      	cmp	r3, #0
 8004130:	d015      	beq.n	800415e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f023 0307 	bic.w	r3, r3, #7
 8004138:	3308      	adds	r3, #8
 800413a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00b      	beq.n	800415e <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d06f      	beq.n	8004244 <pvPortMalloc+0x154>
 8004164:	4b45      	ldr	r3, [pc, #276]	@ (800427c <pvPortMalloc+0x18c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	429a      	cmp	r2, r3
 800416c:	d86a      	bhi.n	8004244 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800416e:	4b44      	ldr	r3, [pc, #272]	@ (8004280 <pvPortMalloc+0x190>)
 8004170:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004172:	4b43      	ldr	r3, [pc, #268]	@ (8004280 <pvPortMalloc+0x190>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004178:	e004      	b.n	8004184 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	d903      	bls.n	8004196 <pvPortMalloc+0xa6>
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f1      	bne.n	800417a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004196:	4b37      	ldr	r3, [pc, #220]	@ (8004274 <pvPortMalloc+0x184>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800419c:	429a      	cmp	r2, r3
 800419e:	d051      	beq.n	8004244 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2208      	movs	r2, #8
 80041a6:	4413      	add	r3, r2
 80041a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	1ad2      	subs	r2, r2, r3
 80041ba:	2308      	movs	r3, #8
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	429a      	cmp	r2, r3
 80041c0:	d920      	bls.n	8004204 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80041c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4413      	add	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <pvPortMalloc+0xfc>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	613b      	str	r3, [r7, #16]
}
 80041e6:	bf00      	nop
 80041e8:	bf00      	nop
 80041ea:	e7fd      	b.n	80041e8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	1ad2      	subs	r2, r2, r3
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041fe:	69b8      	ldr	r0, [r7, #24]
 8004200:	f000 f90a 	bl	8004418 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004204:	4b1d      	ldr	r3, [pc, #116]	@ (800427c <pvPortMalloc+0x18c>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	4a1b      	ldr	r2, [pc, #108]	@ (800427c <pvPortMalloc+0x18c>)
 8004210:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004212:	4b1a      	ldr	r3, [pc, #104]	@ (800427c <pvPortMalloc+0x18c>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4b1b      	ldr	r3, [pc, #108]	@ (8004284 <pvPortMalloc+0x194>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d203      	bcs.n	8004226 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800421e:	4b17      	ldr	r3, [pc, #92]	@ (800427c <pvPortMalloc+0x18c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a18      	ldr	r2, [pc, #96]	@ (8004284 <pvPortMalloc+0x194>)
 8004224:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	4b13      	ldr	r3, [pc, #76]	@ (8004278 <pvPortMalloc+0x188>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	431a      	orrs	r2, r3
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800423a:	4b13      	ldr	r3, [pc, #76]	@ (8004288 <pvPortMalloc+0x198>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3301      	adds	r3, #1
 8004240:	4a11      	ldr	r2, [pc, #68]	@ (8004288 <pvPortMalloc+0x198>)
 8004242:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004244:	f001 fb96 	bl	8005974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <pvPortMalloc+0x17a>
	__asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	60fb      	str	r3, [r7, #12]
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	e7fd      	b.n	8004266 <pvPortMalloc+0x176>
	return pvReturn;
 800426a:	69fb      	ldr	r3, [r7, #28]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3728      	adds	r7, #40	@ 0x28
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	240043c4 	.word	0x240043c4
 8004278:	240043d8 	.word	0x240043d8
 800427c:	240043c8 	.word	0x240043c8
 8004280:	240043bc 	.word	0x240043bc
 8004284:	240043cc 	.word	0x240043cc
 8004288:	240043d0 	.word	0x240043d0

0800428c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d04f      	beq.n	800433e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800429e:	2308      	movs	r3, #8
 80042a0:	425b      	negs	r3, r3
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4413      	add	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	4b25      	ldr	r3, [pc, #148]	@ (8004348 <vPortFree+0xbc>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <vPortFree+0x46>
	__asm volatile
 80042ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	60fb      	str	r3, [r7, #12]
}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	e7fd      	b.n	80042ce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00b      	beq.n	80042f2 <vPortFree+0x66>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	60bb      	str	r3, [r7, #8]
}
 80042ec:	bf00      	nop
 80042ee:	bf00      	nop
 80042f0:	e7fd      	b.n	80042ee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	4b14      	ldr	r3, [pc, #80]	@ (8004348 <vPortFree+0xbc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01e      	beq.n	800433e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d11a      	bne.n	800433e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	4b0e      	ldr	r3, [pc, #56]	@ (8004348 <vPortFree+0xbc>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	43db      	mvns	r3, r3
 8004312:	401a      	ands	r2, r3
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004318:	f001 fb1e 	bl	8005958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	4b0a      	ldr	r3, [pc, #40]	@ (800434c <vPortFree+0xc0>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4413      	add	r3, r2
 8004326:	4a09      	ldr	r2, [pc, #36]	@ (800434c <vPortFree+0xc0>)
 8004328:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800432a:	6938      	ldr	r0, [r7, #16]
 800432c:	f000 f874 	bl	8004418 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004330:	4b07      	ldr	r3, [pc, #28]	@ (8004350 <vPortFree+0xc4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	4a06      	ldr	r2, [pc, #24]	@ (8004350 <vPortFree+0xc4>)
 8004338:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800433a:	f001 fb1b 	bl	8005974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800433e:	bf00      	nop
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	240043d8 	.word	0x240043d8
 800434c:	240043c8 	.word	0x240043c8
 8004350:	240043d4 	.word	0x240043d4

08004354 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800435a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800435e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004360:	4b27      	ldr	r3, [pc, #156]	@ (8004400 <prvHeapInit+0xac>)
 8004362:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00c      	beq.n	8004388 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3307      	adds	r3, #7
 8004372:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0307 	bic.w	r3, r3, #7
 800437a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	4a1f      	ldr	r2, [pc, #124]	@ (8004400 <prvHeapInit+0xac>)
 8004384:	4413      	add	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800438c:	4a1d      	ldr	r2, [pc, #116]	@ (8004404 <prvHeapInit+0xb0>)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004392:	4b1c      	ldr	r3, [pc, #112]	@ (8004404 <prvHeapInit+0xb0>)
 8004394:	2200      	movs	r2, #0
 8004396:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	4413      	add	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80043a0:	2208      	movs	r2, #8
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0307 	bic.w	r3, r3, #7
 80043ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4a15      	ldr	r2, [pc, #84]	@ (8004408 <prvHeapInit+0xb4>)
 80043b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80043b6:	4b14      	ldr	r3, [pc, #80]	@ (8004408 <prvHeapInit+0xb4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2200      	movs	r2, #0
 80043bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80043be:	4b12      	ldr	r3, [pc, #72]	@ (8004408 <prvHeapInit+0xb4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	1ad2      	subs	r2, r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004408 <prvHeapInit+0xb4>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	4a0a      	ldr	r2, [pc, #40]	@ (800440c <prvHeapInit+0xb8>)
 80043e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	4a09      	ldr	r2, [pc, #36]	@ (8004410 <prvHeapInit+0xbc>)
 80043ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043ec:	4b09      	ldr	r3, [pc, #36]	@ (8004414 <prvHeapInit+0xc0>)
 80043ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80043f2:	601a      	str	r2, [r3, #0]
}
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	240007bc 	.word	0x240007bc
 8004404:	240043bc 	.word	0x240043bc
 8004408:	240043c4 	.word	0x240043c4
 800440c:	240043cc 	.word	0x240043cc
 8004410:	240043c8 	.word	0x240043c8
 8004414:	240043d8 	.word	0x240043d8

08004418 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004420:	4b28      	ldr	r3, [pc, #160]	@ (80044c4 <prvInsertBlockIntoFreeList+0xac>)
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e002      	b.n	800442c <prvInsertBlockIntoFreeList+0x14>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	d8f7      	bhi.n	8004426 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	4413      	add	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	429a      	cmp	r2, r3
 8004446:	d108      	bne.n	800445a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	441a      	add	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	441a      	add	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d118      	bne.n	80044a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	4b15      	ldr	r3, [pc, #84]	@ (80044c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d00d      	beq.n	8004496 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	441a      	add	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	e008      	b.n	80044a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004496:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e003      	b.n	80044a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d002      	beq.n	80044b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044b6:	bf00      	nop
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	240043bc 	.word	0x240043bc
 80044c8:	240043c4 	.word	0x240043c4

080044cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f103 0208 	add.w	r2, r3, #8
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f04f 32ff 	mov.w	r2, #4294967295
 80044e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f103 0208 	add.w	r2, r3, #8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f103 0208 	add.w	r2, r3, #8
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004526:	b480      	push	{r7}
 8004528:	b085      	sub	sp, #20
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	601a      	str	r2, [r3, #0]
}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800456e:	b480      	push	{r7}
 8004570:	b085      	sub	sp, #20
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004584:	d103      	bne.n	800458e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	e00c      	b.n	80045a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3308      	adds	r3, #8
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	e002      	b.n	800459c <vListInsert+0x2e>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d2f6      	bcs.n	8004596 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	601a      	str	r2, [r3, #0]
}
 80045d4:	bf00      	nop
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6892      	ldr	r2, [r2, #8]
 80045f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6852      	ldr	r2, [r2, #4]
 8004600:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	429a      	cmp	r2, r3
 800460a:	d103      	bne.n	8004614 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	1e5a      	subs	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3b04      	subs	r3, #4
 8004644:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800464c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3b04      	subs	r3, #4
 8004652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f023 0201 	bic.w	r2, r3, #1
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3b04      	subs	r3, #4
 8004662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004664:	4a0c      	ldr	r2, [pc, #48]	@ (8004698 <pxPortInitialiseStack+0x64>)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3b14      	subs	r3, #20
 800466e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3b04      	subs	r3, #4
 800467a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f06f 0202 	mvn.w	r2, #2
 8004682:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3b20      	subs	r3, #32
 8004688:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800468a:	68fb      	ldr	r3, [r7, #12]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	0800469d 	.word	0x0800469d

0800469c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046a6:	4b13      	ldr	r3, [pc, #76]	@ (80046f4 <prvTaskExitError+0x58>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ae:	d00b      	beq.n	80046c8 <prvTaskExitError+0x2c>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	60fb      	str	r3, [r7, #12]
}
 80046c2:	bf00      	nop
 80046c4:	bf00      	nop
 80046c6:	e7fd      	b.n	80046c4 <prvTaskExitError+0x28>
	__asm volatile
 80046c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	60bb      	str	r3, [r7, #8]
}
 80046da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046dc:	bf00      	nop
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0fc      	beq.n	80046de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	2400002c 	.word	0x2400002c
	...

08004700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004700:	4b07      	ldr	r3, [pc, #28]	@ (8004720 <pxCurrentTCBConst2>)
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	6808      	ldr	r0, [r1, #0]
 8004706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470a:	f380 8809 	msr	PSP, r0
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f04f 0000 	mov.w	r0, #0
 8004716:	f380 8811 	msr	BASEPRI, r0
 800471a:	4770      	bx	lr
 800471c:	f3af 8000 	nop.w

08004720 <pxCurrentTCBConst2>:
 8004720:	24004424 	.word	0x24004424
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop

08004728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004728:	4808      	ldr	r0, [pc, #32]	@ (800474c <prvPortStartFirstTask+0x24>)
 800472a:	6800      	ldr	r0, [r0, #0]
 800472c:	6800      	ldr	r0, [r0, #0]
 800472e:	f380 8808 	msr	MSP, r0
 8004732:	f04f 0000 	mov.w	r0, #0
 8004736:	f380 8814 	msr	CONTROL, r0
 800473a:	b662      	cpsie	i
 800473c:	b661      	cpsie	f
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	df00      	svc	0
 8004748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800474a:	bf00      	nop
 800474c:	e000ed08 	.word	0xe000ed08

08004750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004756:	4b47      	ldr	r3, [pc, #284]	@ (8004874 <xPortStartScheduler+0x124>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a47      	ldr	r2, [pc, #284]	@ (8004878 <xPortStartScheduler+0x128>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d10b      	bne.n	8004778 <xPortStartScheduler+0x28>
	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	60fb      	str	r3, [r7, #12]
}
 8004772:	bf00      	nop
 8004774:	bf00      	nop
 8004776:	e7fd      	b.n	8004774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004778:	4b3e      	ldr	r3, [pc, #248]	@ (8004874 <xPortStartScheduler+0x124>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a3f      	ldr	r2, [pc, #252]	@ (800487c <xPortStartScheduler+0x12c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d10b      	bne.n	800479a <xPortStartScheduler+0x4a>
	__asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	613b      	str	r3, [r7, #16]
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	e7fd      	b.n	8004796 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800479a:	4b39      	ldr	r3, [pc, #228]	@ (8004880 <xPortStartScheduler+0x130>)
 800479c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	22ff      	movs	r2, #255	@ 0xff
 80047aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	4b31      	ldr	r3, [pc, #196]	@ (8004884 <xPortStartScheduler+0x134>)
 80047c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047c2:	4b31      	ldr	r3, [pc, #196]	@ (8004888 <xPortStartScheduler+0x138>)
 80047c4:	2207      	movs	r2, #7
 80047c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047c8:	e009      	b.n	80047de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80047ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004888 <xPortStartScheduler+0x138>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004888 <xPortStartScheduler+0x138>)
 80047d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e6:	2b80      	cmp	r3, #128	@ 0x80
 80047e8:	d0ef      	beq.n	80047ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047ea:	4b27      	ldr	r3, [pc, #156]	@ (8004888 <xPortStartScheduler+0x138>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f1c3 0307 	rsb	r3, r3, #7
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d00b      	beq.n	800480e <xPortStartScheduler+0xbe>
	__asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	60bb      	str	r3, [r7, #8]
}
 8004808:	bf00      	nop
 800480a:	bf00      	nop
 800480c:	e7fd      	b.n	800480a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800480e:	4b1e      	ldr	r3, [pc, #120]	@ (8004888 <xPortStartScheduler+0x138>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	4a1c      	ldr	r2, [pc, #112]	@ (8004888 <xPortStartScheduler+0x138>)
 8004816:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004818:	4b1b      	ldr	r3, [pc, #108]	@ (8004888 <xPortStartScheduler+0x138>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004820:	4a19      	ldr	r2, [pc, #100]	@ (8004888 <xPortStartScheduler+0x138>)
 8004822:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	b2da      	uxtb	r2, r3
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800482c:	4b17      	ldr	r3, [pc, #92]	@ (800488c <xPortStartScheduler+0x13c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a16      	ldr	r2, [pc, #88]	@ (800488c <xPortStartScheduler+0x13c>)
 8004832:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004836:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004838:	4b14      	ldr	r3, [pc, #80]	@ (800488c <xPortStartScheduler+0x13c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a13      	ldr	r2, [pc, #76]	@ (800488c <xPortStartScheduler+0x13c>)
 800483e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004842:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004844:	f000 f8da 	bl	80049fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004848:	4b11      	ldr	r3, [pc, #68]	@ (8004890 <xPortStartScheduler+0x140>)
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800484e:	f000 f8f9 	bl	8004a44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004852:	4b10      	ldr	r3, [pc, #64]	@ (8004894 <xPortStartScheduler+0x144>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a0f      	ldr	r2, [pc, #60]	@ (8004894 <xPortStartScheduler+0x144>)
 8004858:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800485c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800485e:	f7ff ff63 	bl	8004728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004862:	f001 f9ef 	bl	8005c44 <vTaskSwitchContext>
	prvTaskExitError();
 8004866:	f7ff ff19 	bl	800469c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	e000ed00 	.word	0xe000ed00
 8004878:	410fc271 	.word	0x410fc271
 800487c:	410fc270 	.word	0x410fc270
 8004880:	e000e400 	.word	0xe000e400
 8004884:	240043dc 	.word	0x240043dc
 8004888:	240043e0 	.word	0x240043e0
 800488c:	e000ed20 	.word	0xe000ed20
 8004890:	2400002c 	.word	0x2400002c
 8004894:	e000ef34 	.word	0xe000ef34

08004898 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	607b      	str	r3, [r7, #4]
}
 80048b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048b2:	4b10      	ldr	r3, [pc, #64]	@ (80048f4 <vPortEnterCritical+0x5c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3301      	adds	r3, #1
 80048b8:	4a0e      	ldr	r2, [pc, #56]	@ (80048f4 <vPortEnterCritical+0x5c>)
 80048ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048bc:	4b0d      	ldr	r3, [pc, #52]	@ (80048f4 <vPortEnterCritical+0x5c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d110      	bne.n	80048e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048c4:	4b0c      	ldr	r3, [pc, #48]	@ (80048f8 <vPortEnterCritical+0x60>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00b      	beq.n	80048e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	603b      	str	r3, [r7, #0]
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	e7fd      	b.n	80048e2 <vPortEnterCritical+0x4a>
	}
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	2400002c 	.word	0x2400002c
 80048f8:	e000ed04 	.word	0xe000ed04

080048fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004902:	4b12      	ldr	r3, [pc, #72]	@ (800494c <vPortExitCritical+0x50>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10b      	bne.n	8004922 <vPortExitCritical+0x26>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	607b      	str	r3, [r7, #4]
}
 800491c:	bf00      	nop
 800491e:	bf00      	nop
 8004920:	e7fd      	b.n	800491e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004922:	4b0a      	ldr	r3, [pc, #40]	@ (800494c <vPortExitCritical+0x50>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3b01      	subs	r3, #1
 8004928:	4a08      	ldr	r2, [pc, #32]	@ (800494c <vPortExitCritical+0x50>)
 800492a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800492c:	4b07      	ldr	r3, [pc, #28]	@ (800494c <vPortExitCritical+0x50>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d105      	bne.n	8004940 <vPortExitCritical+0x44>
 8004934:	2300      	movs	r3, #0
 8004936:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800493e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	2400002c 	.word	0x2400002c

08004950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004950:	f3ef 8009 	mrs	r0, PSP
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	4b15      	ldr	r3, [pc, #84]	@ (80049b0 <pxCurrentTCBConst>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	f01e 0f10 	tst.w	lr, #16
 8004960:	bf08      	it	eq
 8004962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496a:	6010      	str	r0, [r2, #0]
 800496c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004970:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004974:	f380 8811 	msr	BASEPRI, r0
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f001 f960 	bl	8005c44 <vTaskSwitchContext>
 8004984:	f04f 0000 	mov.w	r0, #0
 8004988:	f380 8811 	msr	BASEPRI, r0
 800498c:	bc09      	pop	{r0, r3}
 800498e:	6819      	ldr	r1, [r3, #0]
 8004990:	6808      	ldr	r0, [r1, #0]
 8004992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004996:	f01e 0f10 	tst.w	lr, #16
 800499a:	bf08      	it	eq
 800499c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049a0:	f380 8809 	msr	PSP, r0
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	f3af 8000 	nop.w

080049b0 <pxCurrentTCBConst>:
 80049b0:	24004424 	.word	0x24004424
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop

080049b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	607b      	str	r3, [r7, #4]
}
 80049d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049d2:	f001 f87d 	bl	8005ad0 <xTaskIncrementTick>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049dc:	4b06      	ldr	r3, [pc, #24]	@ (80049f8 <xPortSysTickHandler+0x40>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	2300      	movs	r3, #0
 80049e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	f383 8811 	msr	BASEPRI, r3
}
 80049ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a00:	4b0b      	ldr	r3, [pc, #44]	@ (8004a30 <vPortSetupTimerInterrupt+0x34>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a06:	4b0b      	ldr	r3, [pc, #44]	@ (8004a34 <vPortSetupTimerInterrupt+0x38>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a38 <vPortSetupTimerInterrupt+0x3c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a0a      	ldr	r2, [pc, #40]	@ (8004a3c <vPortSetupTimerInterrupt+0x40>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	099b      	lsrs	r3, r3, #6
 8004a18:	4a09      	ldr	r2, [pc, #36]	@ (8004a40 <vPortSetupTimerInterrupt+0x44>)
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a1e:	4b04      	ldr	r3, [pc, #16]	@ (8004a30 <vPortSetupTimerInterrupt+0x34>)
 8004a20:	2207      	movs	r2, #7
 8004a22:	601a      	str	r2, [r3, #0]
}
 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	e000e010 	.word	0xe000e010
 8004a34:	e000e018 	.word	0xe000e018
 8004a38:	24000000 	.word	0x24000000
 8004a3c:	10624dd3 	.word	0x10624dd3
 8004a40:	e000e014 	.word	0xe000e014

08004a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004a54 <vPortEnableVFP+0x10>
 8004a48:	6801      	ldr	r1, [r0, #0]
 8004a4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004a4e:	6001      	str	r1, [r0, #0]
 8004a50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a52:	bf00      	nop
 8004a54:	e000ed88 	.word	0xe000ed88

08004a58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a5e:	f3ef 8305 	mrs	r3, IPSR
 8004a62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b0f      	cmp	r3, #15
 8004a68:	d915      	bls.n	8004a96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a6a:	4a18      	ldr	r2, [pc, #96]	@ (8004acc <vPortValidateInterruptPriority+0x74>)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4413      	add	r3, r2
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a74:	4b16      	ldr	r3, [pc, #88]	@ (8004ad0 <vPortValidateInterruptPriority+0x78>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	7afa      	ldrb	r2, [r7, #11]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d20b      	bcs.n	8004a96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	607b      	str	r3, [r7, #4]
}
 8004a90:	bf00      	nop
 8004a92:	bf00      	nop
 8004a94:	e7fd      	b.n	8004a92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a96:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad4 <vPortValidateInterruptPriority+0x7c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad8 <vPortValidateInterruptPriority+0x80>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d90b      	bls.n	8004abe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	603b      	str	r3, [r7, #0]
}
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop
 8004abc:	e7fd      	b.n	8004aba <vPortValidateInterruptPriority+0x62>
	}
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	e000e3f0 	.word	0xe000e3f0
 8004ad0:	240043dc 	.word	0x240043dc
 8004ad4:	e000ed0c 	.word	0xe000ed0c
 8004ad8:	240043e0 	.word	0x240043e0

08004adc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10b      	bne.n	8004b08 <xQueueGenericReset+0x2c>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	60bb      	str	r3, [r7, #8]
}
 8004b02:	bf00      	nop
 8004b04:	bf00      	nop
 8004b06:	e7fd      	b.n	8004b04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b08:	f7ff fec6 	bl	8004898 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b14:	68f9      	ldr	r1, [r7, #12]
 8004b16:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	441a      	add	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	68f9      	ldr	r1, [r7, #12]
 8004b3c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b3e:	fb01 f303 	mul.w	r3, r1, r3
 8004b42:	441a      	add	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	22ff      	movs	r2, #255	@ 0xff
 8004b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	22ff      	movs	r2, #255	@ 0xff
 8004b54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d114      	bne.n	8004b88 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d01a      	beq.n	8004b9c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3310      	adds	r3, #16
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f001 f91a 	bl	8005da4 <xTaskRemoveFromEventList>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d012      	beq.n	8004b9c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b76:	4b0d      	ldr	r3, [pc, #52]	@ (8004bac <xQueueGenericReset+0xd0>)
 8004b78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	e009      	b.n	8004b9c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3310      	adds	r3, #16
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff fc9d 	bl	80044cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3324      	adds	r3, #36	@ 0x24
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fc98 	bl	80044cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b9c:	f7ff feae 	bl	80048fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ba0:	2301      	movs	r3, #1
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	e000ed04 	.word	0xe000ed04

08004bb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08e      	sub	sp, #56	@ 0x38
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bd6:	bf00      	nop
 8004bd8:	bf00      	nop
 8004bda:	e7fd      	b.n	8004bd8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10b      	bne.n	8004bfa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop
 8004bf8:	e7fd      	b.n	8004bf6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <xQueueGenericCreateStatic+0x56>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <xQueueGenericCreateStatic+0x5a>
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <xQueueGenericCreateStatic+0x5c>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10b      	bne.n	8004c28 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	623b      	str	r3, [r7, #32]
}
 8004c22:	bf00      	nop
 8004c24:	bf00      	nop
 8004c26:	e7fd      	b.n	8004c24 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <xQueueGenericCreateStatic+0x84>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <xQueueGenericCreateStatic+0x88>
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <xQueueGenericCreateStatic+0x8a>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	61fb      	str	r3, [r7, #28]
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	e7fd      	b.n	8004c52 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c56:	2350      	movs	r3, #80	@ 0x50
 8004c58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b50      	cmp	r3, #80	@ 0x50
 8004c5e:	d00b      	beq.n	8004c78 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	61bb      	str	r3, [r7, #24]
}
 8004c72:	bf00      	nop
 8004c74:	bf00      	nop
 8004c76:	e7fd      	b.n	8004c74 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c78:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00d      	beq.n	8004ca0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c8c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	4613      	mov	r3, r2
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f805 	bl	8004caa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3730      	adds	r7, #48	@ 0x30
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
 8004cb6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d103      	bne.n	8004cc6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	e002      	b.n	8004ccc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cd8:	2101      	movs	r1, #1
 8004cda:	69b8      	ldr	r0, [r7, #24]
 8004cdc:	f7ff fefe 	bl	8004adc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ce8:	bf00      	nop
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08e      	sub	sp, #56	@ 0x38
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10b      	bne.n	8004d24 <xQueueGenericSend+0x34>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	e7fd      	b.n	8004d20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d103      	bne.n	8004d32 <xQueueGenericSend+0x42>
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <xQueueGenericSend+0x46>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <xQueueGenericSend+0x48>
 8004d36:	2300      	movs	r3, #0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10b      	bne.n	8004d54 <xQueueGenericSend+0x64>
	__asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
 8004d52:	e7fd      	b.n	8004d50 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d103      	bne.n	8004d62 <xQueueGenericSend+0x72>
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <xQueueGenericSend+0x76>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e000      	b.n	8004d68 <xQueueGenericSend+0x78>
 8004d66:	2300      	movs	r3, #0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10b      	bne.n	8004d84 <xQueueGenericSend+0x94>
	__asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	623b      	str	r3, [r7, #32]
}
 8004d7e:	bf00      	nop
 8004d80:	bf00      	nop
 8004d82:	e7fd      	b.n	8004d80 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d84:	f001 f9ce 	bl	8006124 <xTaskGetSchedulerState>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d102      	bne.n	8004d94 <xQueueGenericSend+0xa4>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <xQueueGenericSend+0xa8>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <xQueueGenericSend+0xaa>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10b      	bne.n	8004db6 <xQueueGenericSend+0xc6>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	61fb      	str	r3, [r7, #28]
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	e7fd      	b.n	8004db2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004db6:	f7ff fd6f 	bl	8004898 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d302      	bcc.n	8004dcc <xQueueGenericSend+0xdc>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d129      	bne.n	8004e20 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004dd2:	f000 fa0f 	bl	80051f4 <prvCopyDataToQueue>
 8004dd6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d010      	beq.n	8004e02 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de2:	3324      	adds	r3, #36	@ 0x24
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 ffdd 	bl	8005da4 <xTaskRemoveFromEventList>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d013      	beq.n	8004e18 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004df0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ef0 <xQueueGenericSend+0x200>)
 8004df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	e00a      	b.n	8004e18 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d007      	beq.n	8004e18 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e08:	4b39      	ldr	r3, [pc, #228]	@ (8004ef0 <xQueueGenericSend+0x200>)
 8004e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e18:	f7ff fd70 	bl	80048fc <vPortExitCritical>
				return pdPASS;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e063      	b.n	8004ee8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d103      	bne.n	8004e2e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e26:	f7ff fd69 	bl	80048fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	e05c      	b.n	8004ee8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d106      	bne.n	8004e42 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e34:	f107 0314 	add.w	r3, r7, #20
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f001 f817 	bl	8005e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e42:	f7ff fd5b 	bl	80048fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e46:	f000 fd87 	bl	8005958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e4a:	f7ff fd25 	bl	8004898 <vPortEnterCritical>
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e54:	b25b      	sxtb	r3, r3
 8004e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5a:	d103      	bne.n	8004e64 <xQueueGenericSend+0x174>
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e6a:	b25b      	sxtb	r3, r3
 8004e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e70:	d103      	bne.n	8004e7a <xQueueGenericSend+0x18a>
 8004e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e7a:	f7ff fd3f 	bl	80048fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e7e:	1d3a      	adds	r2, r7, #4
 8004e80:	f107 0314 	add.w	r3, r7, #20
 8004e84:	4611      	mov	r1, r2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f001 f806 	bl	8005e98 <xTaskCheckForTimeOut>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d124      	bne.n	8004edc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e94:	f000 faa6 	bl	80053e4 <prvIsQueueFull>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d018      	beq.n	8004ed0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea0:	3310      	adds	r3, #16
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 ff2a 	bl	8005d00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004eac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004eae:	f000 fa31 	bl	8005314 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004eb2:	f000 fd5f 	bl	8005974 <xTaskResumeAll>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f47f af7c 	bne.w	8004db6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef0 <xQueueGenericSend+0x200>)
 8004ec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	e772      	b.n	8004db6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ed0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ed2:	f000 fa1f 	bl	8005314 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ed6:	f000 fd4d 	bl	8005974 <xTaskResumeAll>
 8004eda:	e76c      	b.n	8004db6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004edc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ede:	f000 fa19 	bl	8005314 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ee2:	f000 fd47 	bl	8005974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ee6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3738      	adds	r7, #56	@ 0x38
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b090      	sub	sp, #64	@ 0x40
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10b      	bne.n	8004f24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	e7fd      	b.n	8004f20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d103      	bne.n	8004f32 <xQueueGenericSendFromISR+0x3e>
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <xQueueGenericSendFromISR+0x42>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <xQueueGenericSendFromISR+0x44>
 8004f36:	2300      	movs	r3, #0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10b      	bne.n	8004f54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	e7fd      	b.n	8004f50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d103      	bne.n	8004f62 <xQueueGenericSendFromISR+0x6e>
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <xQueueGenericSendFromISR+0x72>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <xQueueGenericSendFromISR+0x74>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10b      	bne.n	8004f84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	623b      	str	r3, [r7, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	bf00      	nop
 8004f82:	e7fd      	b.n	8004f80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f84:	f7ff fd68 	bl	8004a58 <vPortValidateInterruptPriority>
	__asm volatile
 8004f88:	f3ef 8211 	mrs	r2, BASEPRI
 8004f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	61fa      	str	r2, [r7, #28]
 8004f9e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fa2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d302      	bcc.n	8004fb6 <xQueueGenericSendFromISR+0xc2>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d12f      	bne.n	8005016 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004fcc:	f000 f912 	bl	80051f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004fd0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd8:	d112      	bne.n	8005000 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d016      	beq.n	8005010 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe4:	3324      	adds	r3, #36	@ 0x24
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fedc 	bl	8005da4 <xTaskRemoveFromEventList>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00e      	beq.n	8005010 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00b      	beq.n	8005010 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	e007      	b.n	8005010 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005000:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005004:	3301      	adds	r3, #1
 8005006:	b2db      	uxtb	r3, r3
 8005008:	b25a      	sxtb	r2, r3
 800500a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005010:	2301      	movs	r3, #1
 8005012:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005014:	e001      	b.n	800501a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005016:	2300      	movs	r3, #0
 8005018:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800501a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800501c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f383 8811 	msr	BASEPRI, r3
}
 8005024:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005028:	4618      	mov	r0, r3
 800502a:	3740      	adds	r7, #64	@ 0x40
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08c      	sub	sp, #48	@ 0x30
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800503c:	2300      	movs	r3, #0
 800503e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10b      	bne.n	8005062 <xQueueReceive+0x32>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	623b      	str	r3, [r7, #32]
}
 800505c:	bf00      	nop
 800505e:	bf00      	nop
 8005060:	e7fd      	b.n	800505e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d103      	bne.n	8005070 <xQueueReceive+0x40>
 8005068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <xQueueReceive+0x44>
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <xQueueReceive+0x46>
 8005074:	2300      	movs	r3, #0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10b      	bne.n	8005092 <xQueueReceive+0x62>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	61fb      	str	r3, [r7, #28]
}
 800508c:	bf00      	nop
 800508e:	bf00      	nop
 8005090:	e7fd      	b.n	800508e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005092:	f001 f847 	bl	8006124 <xTaskGetSchedulerState>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <xQueueReceive+0x72>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <xQueueReceive+0x76>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <xQueueReceive+0x78>
 80050a6:	2300      	movs	r3, #0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10b      	bne.n	80050c4 <xQueueReceive+0x94>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	61bb      	str	r3, [r7, #24]
}
 80050be:	bf00      	nop
 80050c0:	bf00      	nop
 80050c2:	e7fd      	b.n	80050c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050c4:	f7ff fbe8 	bl	8004898 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01f      	beq.n	8005114 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050d4:	68b9      	ldr	r1, [r7, #8]
 80050d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050d8:	f000 f8f6 	bl	80052c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	1e5a      	subs	r2, r3, #1
 80050e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00f      	beq.n	800510c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ee:	3310      	adds	r3, #16
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 fe57 	bl	8005da4 <xTaskRemoveFromEventList>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050fc:	4b3c      	ldr	r3, [pc, #240]	@ (80051f0 <xQueueReceive+0x1c0>)
 80050fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800510c:	f7ff fbf6 	bl	80048fc <vPortExitCritical>
				return pdPASS;
 8005110:	2301      	movs	r3, #1
 8005112:	e069      	b.n	80051e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d103      	bne.n	8005122 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800511a:	f7ff fbef 	bl	80048fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800511e:	2300      	movs	r3, #0
 8005120:	e062      	b.n	80051e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d106      	bne.n	8005136 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005128:	f107 0310 	add.w	r3, r7, #16
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fe9d 	bl	8005e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005132:	2301      	movs	r3, #1
 8005134:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005136:	f7ff fbe1 	bl	80048fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800513a:	f000 fc0d 	bl	8005958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800513e:	f7ff fbab 	bl	8004898 <vPortEnterCritical>
 8005142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005144:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005148:	b25b      	sxtb	r3, r3
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514e:	d103      	bne.n	8005158 <xQueueReceive+0x128>
 8005150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800515e:	b25b      	sxtb	r3, r3
 8005160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005164:	d103      	bne.n	800516e <xQueueReceive+0x13e>
 8005166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800516e:	f7ff fbc5 	bl	80048fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005172:	1d3a      	adds	r2, r7, #4
 8005174:	f107 0310 	add.w	r3, r7, #16
 8005178:	4611      	mov	r1, r2
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fe8c 	bl	8005e98 <xTaskCheckForTimeOut>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d123      	bne.n	80051ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005186:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005188:	f000 f916 	bl	80053b8 <prvIsQueueEmpty>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d017      	beq.n	80051c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005194:	3324      	adds	r3, #36	@ 0x24
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	4611      	mov	r1, r2
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fdb0 	bl	8005d00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051a2:	f000 f8b7 	bl	8005314 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051a6:	f000 fbe5 	bl	8005974 <xTaskResumeAll>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d189      	bne.n	80050c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80051b0:	4b0f      	ldr	r3, [pc, #60]	@ (80051f0 <xQueueReceive+0x1c0>)
 80051b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	e780      	b.n	80050c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80051c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051c4:	f000 f8a6 	bl	8005314 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051c8:	f000 fbd4 	bl	8005974 <xTaskResumeAll>
 80051cc:	e77a      	b.n	80050c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80051ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051d0:	f000 f8a0 	bl	8005314 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051d4:	f000 fbce 	bl	8005974 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051da:	f000 f8ed 	bl	80053b8 <prvIsQueueEmpty>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f43f af6f 	beq.w	80050c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80051e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3730      	adds	r7, #48	@ 0x30
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	e000ed04 	.word	0xe000ed04

080051f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005208:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10d      	bne.n	800522e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d14d      	bne.n	80052b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 ff9e 	bl	8006160 <xTaskPriorityDisinherit>
 8005224:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	609a      	str	r2, [r3, #8]
 800522c:	e043      	b.n	80052b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d119      	bne.n	8005268 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6858      	ldr	r0, [r3, #4]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523c:	461a      	mov	r2, r3
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	f001 fbd8 	bl	80069f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524c:	441a      	add	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	429a      	cmp	r2, r3
 800525c:	d32b      	bcc.n	80052b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	605a      	str	r2, [r3, #4]
 8005266:	e026      	b.n	80052b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	68d8      	ldr	r0, [r3, #12]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005270:	461a      	mov	r2, r3
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	f001 fbbe 	bl	80069f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005280:	425b      	negs	r3, r3
 8005282:	441a      	add	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d207      	bcs.n	80052a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529c:	425b      	negs	r3, r3
 800529e:	441a      	add	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d105      	bne.n	80052b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80052be:	697b      	ldr	r3, [r7, #20]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d018      	beq.n	800530c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e2:	441a      	add	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d303      	bcc.n	80052fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68d9      	ldr	r1, [r3, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005304:	461a      	mov	r2, r3
 8005306:	6838      	ldr	r0, [r7, #0]
 8005308:	f001 fb74 	bl	80069f4 <memcpy>
	}
}
 800530c:	bf00      	nop
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800531c:	f7ff fabc 	bl	8004898 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005326:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005328:	e011      	b.n	800534e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532e:	2b00      	cmp	r3, #0
 8005330:	d012      	beq.n	8005358 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3324      	adds	r3, #36	@ 0x24
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fd34 	bl	8005da4 <xTaskRemoveFromEventList>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005342:	f000 fe0d 	bl	8005f60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005346:	7bfb      	ldrb	r3, [r7, #15]
 8005348:	3b01      	subs	r3, #1
 800534a:	b2db      	uxtb	r3, r3
 800534c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800534e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005352:	2b00      	cmp	r3, #0
 8005354:	dce9      	bgt.n	800532a <prvUnlockQueue+0x16>
 8005356:	e000      	b.n	800535a <prvUnlockQueue+0x46>
					break;
 8005358:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	22ff      	movs	r2, #255	@ 0xff
 800535e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005362:	f7ff facb 	bl	80048fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005366:	f7ff fa97 	bl	8004898 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005370:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005372:	e011      	b.n	8005398 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d012      	beq.n	80053a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3310      	adds	r3, #16
 8005380:	4618      	mov	r0, r3
 8005382:	f000 fd0f 	bl	8005da4 <xTaskRemoveFromEventList>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800538c:	f000 fde8 	bl	8005f60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005390:	7bbb      	ldrb	r3, [r7, #14]
 8005392:	3b01      	subs	r3, #1
 8005394:	b2db      	uxtb	r3, r3
 8005396:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800539c:	2b00      	cmp	r3, #0
 800539e:	dce9      	bgt.n	8005374 <prvUnlockQueue+0x60>
 80053a0:	e000      	b.n	80053a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80053a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	22ff      	movs	r2, #255	@ 0xff
 80053a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80053ac:	f7ff faa6 	bl	80048fc <vPortExitCritical>
}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053c0:	f7ff fa6a 	bl	8004898 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d102      	bne.n	80053d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80053cc:	2301      	movs	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	e001      	b.n	80053d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053d6:	f7ff fa91 	bl	80048fc <vPortExitCritical>

	return xReturn;
 80053da:	68fb      	ldr	r3, [r7, #12]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053ec:	f7ff fa54 	bl	8004898 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d102      	bne.n	8005402 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053fc:	2301      	movs	r3, #1
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	e001      	b.n	8005406 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005406:	f7ff fa79 	bl	80048fc <vPortExitCritical>

	return xReturn;
 800540a:	68fb      	ldr	r3, [r7, #12]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	e014      	b.n	800544e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005424:	4a0f      	ldr	r2, [pc, #60]	@ (8005464 <vQueueAddToRegistry+0x50>)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10b      	bne.n	8005448 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005430:	490c      	ldr	r1, [pc, #48]	@ (8005464 <vQueueAddToRegistry+0x50>)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800543a:	4a0a      	ldr	r2, [pc, #40]	@ (8005464 <vQueueAddToRegistry+0x50>)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	4413      	add	r3, r2
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005446:	e006      	b.n	8005456 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3301      	adds	r3, #1
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b07      	cmp	r3, #7
 8005452:	d9e7      	bls.n	8005424 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005454:	bf00      	nop
 8005456:	bf00      	nop
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	240043e4 	.word	0x240043e4

08005468 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005478:	f7ff fa0e 	bl	8004898 <vPortEnterCritical>
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005482:	b25b      	sxtb	r3, r3
 8005484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005488:	d103      	bne.n	8005492 <vQueueWaitForMessageRestricted+0x2a>
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005498:	b25b      	sxtb	r3, r3
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d103      	bne.n	80054a8 <vQueueWaitForMessageRestricted+0x40>
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054a8:	f7ff fa28 	bl	80048fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d106      	bne.n	80054c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	3324      	adds	r3, #36	@ 0x24
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fc45 	bl	8005d4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80054c2:	6978      	ldr	r0, [r7, #20]
 80054c4:	f7ff ff26 	bl	8005314 <prvUnlockQueue>
	}
 80054c8:	bf00      	nop
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08e      	sub	sp, #56	@ 0x38
 80054d4:	af04      	add	r7, sp, #16
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10b      	bne.n	80054fc <xTaskCreateStatic+0x2c>
	__asm volatile
 80054e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	623b      	str	r3, [r7, #32]
}
 80054f6:	bf00      	nop
 80054f8:	bf00      	nop
 80054fa:	e7fd      	b.n	80054f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80054fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10b      	bne.n	800551a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	61fb      	str	r3, [r7, #28]
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	e7fd      	b.n	8005516 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800551a:	235c      	movs	r3, #92	@ 0x5c
 800551c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	2b5c      	cmp	r3, #92	@ 0x5c
 8005522:	d00b      	beq.n	800553c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	61bb      	str	r3, [r7, #24]
}
 8005536:	bf00      	nop
 8005538:	bf00      	nop
 800553a:	e7fd      	b.n	8005538 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800553c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800553e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01e      	beq.n	8005582 <xTaskCreateStatic+0xb2>
 8005544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01b      	beq.n	8005582 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800554a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005552:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005556:	2202      	movs	r2, #2
 8005558:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800555c:	2300      	movs	r3, #0
 800555e:	9303      	str	r3, [sp, #12]
 8005560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005562:	9302      	str	r3, [sp, #8]
 8005564:	f107 0314 	add.w	r3, r7, #20
 8005568:	9301      	str	r3, [sp, #4]
 800556a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f850 	bl	800561a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800557a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800557c:	f000 f8de 	bl	800573c <prvAddNewTaskToReadyList>
 8005580:	e001      	b.n	8005586 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005586:	697b      	ldr	r3, [r7, #20]
	}
 8005588:	4618      	mov	r0, r3
 800558a:	3728      	adds	r7, #40	@ 0x28
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08c      	sub	sp, #48	@ 0x30
 8005594:	af04      	add	r7, sp, #16
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055a0:	88fb      	ldrh	r3, [r7, #6]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fe fda3 	bl	80040f0 <pvPortMalloc>
 80055aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00e      	beq.n	80055d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055b2:	205c      	movs	r0, #92	@ 0x5c
 80055b4:	f7fe fd9c 	bl	80040f0 <pvPortMalloc>
 80055b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80055c6:	e005      	b.n	80055d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055c8:	6978      	ldr	r0, [r7, #20]
 80055ca:	f7fe fe5f 	bl	800428c <vPortFree>
 80055ce:	e001      	b.n	80055d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d017      	beq.n	800560a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055e2:	88fa      	ldrh	r2, [r7, #6]
 80055e4:	2300      	movs	r3, #0
 80055e6:	9303      	str	r3, [sp, #12]
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	9302      	str	r3, [sp, #8]
 80055ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f80e 	bl	800561a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055fe:	69f8      	ldr	r0, [r7, #28]
 8005600:	f000 f89c 	bl	800573c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005604:	2301      	movs	r3, #1
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	e002      	b.n	8005610 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800560a:	f04f 33ff 	mov.w	r3, #4294967295
 800560e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005610:	69bb      	ldr	r3, [r7, #24]
	}
 8005612:	4618      	mov	r0, r3
 8005614:	3720      	adds	r7, #32
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b088      	sub	sp, #32
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	607a      	str	r2, [r7, #4]
 8005626:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	461a      	mov	r2, r3
 8005632:	21a5      	movs	r1, #165	@ 0xa5
 8005634:	f001 f9b2 	bl	800699c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005642:	440b      	add	r3, r1
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	f023 0307 	bic.w	r3, r3, #7
 8005650:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00b      	beq.n	8005674 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	617b      	str	r3, [r7, #20]
}
 800566e:	bf00      	nop
 8005670:	bf00      	nop
 8005672:	e7fd      	b.n	8005670 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d01f      	beq.n	80056ba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800567a:	2300      	movs	r3, #0
 800567c:	61fb      	str	r3, [r7, #28]
 800567e:	e012      	b.n	80056a6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4413      	add	r3, r2
 8005686:	7819      	ldrb	r1, [r3, #0]
 8005688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	3334      	adds	r3, #52	@ 0x34
 8005690:	460a      	mov	r2, r1
 8005692:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	4413      	add	r3, r2
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d006      	beq.n	80056ae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	3301      	adds	r3, #1
 80056a4:	61fb      	str	r3, [r7, #28]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	2b0f      	cmp	r3, #15
 80056aa:	d9e9      	bls.n	8005680 <prvInitialiseNewTask+0x66>
 80056ac:	e000      	b.n	80056b0 <prvInitialiseNewTask+0x96>
			{
				break;
 80056ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056b8:	e003      	b.n	80056c2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c4:	2b37      	cmp	r3, #55	@ 0x37
 80056c6:	d901      	bls.n	80056cc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056c8:	2337      	movs	r3, #55	@ 0x37
 80056ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056d6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80056d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056da:	2200      	movs	r2, #0
 80056dc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e0:	3304      	adds	r3, #4
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fe ff12 	bl	800450c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ea:	3318      	adds	r3, #24
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fe ff0d 	bl	800450c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80056fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005700:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005706:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570a:	2200      	movs	r2, #0
 800570c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800570e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	68f9      	ldr	r1, [r7, #12]
 800571a:	69b8      	ldr	r0, [r7, #24]
 800571c:	f7fe ff8a 	bl	8004634 <pxPortInitialiseStack>
 8005720:	4602      	mov	r2, r0
 8005722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005724:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800572c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005730:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005732:	bf00      	nop
 8005734:	3720      	adds	r7, #32
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005744:	f7ff f8a8 	bl	8004898 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005748:	4b2d      	ldr	r3, [pc, #180]	@ (8005800 <prvAddNewTaskToReadyList+0xc4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3301      	adds	r3, #1
 800574e:	4a2c      	ldr	r2, [pc, #176]	@ (8005800 <prvAddNewTaskToReadyList+0xc4>)
 8005750:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005752:	4b2c      	ldr	r3, [pc, #176]	@ (8005804 <prvAddNewTaskToReadyList+0xc8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d109      	bne.n	800576e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800575a:	4a2a      	ldr	r2, [pc, #168]	@ (8005804 <prvAddNewTaskToReadyList+0xc8>)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005760:	4b27      	ldr	r3, [pc, #156]	@ (8005800 <prvAddNewTaskToReadyList+0xc4>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d110      	bne.n	800578a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005768:	f000 fc1e 	bl	8005fa8 <prvInitialiseTaskLists>
 800576c:	e00d      	b.n	800578a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800576e:	4b26      	ldr	r3, [pc, #152]	@ (8005808 <prvAddNewTaskToReadyList+0xcc>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005776:	4b23      	ldr	r3, [pc, #140]	@ (8005804 <prvAddNewTaskToReadyList+0xc8>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005780:	429a      	cmp	r2, r3
 8005782:	d802      	bhi.n	800578a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005784:	4a1f      	ldr	r2, [pc, #124]	@ (8005804 <prvAddNewTaskToReadyList+0xc8>)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800578a:	4b20      	ldr	r3, [pc, #128]	@ (800580c <prvAddNewTaskToReadyList+0xd0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3301      	adds	r3, #1
 8005790:	4a1e      	ldr	r2, [pc, #120]	@ (800580c <prvAddNewTaskToReadyList+0xd0>)
 8005792:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005794:	4b1d      	ldr	r3, [pc, #116]	@ (800580c <prvAddNewTaskToReadyList+0xd0>)
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005810 <prvAddNewTaskToReadyList+0xd4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d903      	bls.n	80057b0 <prvAddNewTaskToReadyList+0x74>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ac:	4a18      	ldr	r2, [pc, #96]	@ (8005810 <prvAddNewTaskToReadyList+0xd4>)
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4a15      	ldr	r2, [pc, #84]	@ (8005814 <prvAddNewTaskToReadyList+0xd8>)
 80057be:	441a      	add	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4610      	mov	r0, r2
 80057c8:	f7fe fead 	bl	8004526 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057cc:	f7ff f896 	bl	80048fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005808 <prvAddNewTaskToReadyList+0xcc>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00e      	beq.n	80057f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005804 <prvAddNewTaskToReadyList+0xc8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d207      	bcs.n	80057f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005818 <prvAddNewTaskToReadyList+0xdc>)
 80057e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057f6:	bf00      	nop
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	240048f8 	.word	0x240048f8
 8005804:	24004424 	.word	0x24004424
 8005808:	24004904 	.word	0x24004904
 800580c:	24004914 	.word	0x24004914
 8005810:	24004900 	.word	0x24004900
 8005814:	24004428 	.word	0x24004428
 8005818:	e000ed04 	.word	0xe000ed04

0800581c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d018      	beq.n	8005860 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800582e:	4b14      	ldr	r3, [pc, #80]	@ (8005880 <vTaskDelay+0x64>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00b      	beq.n	800584e <vTaskDelay+0x32>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	60bb      	str	r3, [r7, #8]
}
 8005848:	bf00      	nop
 800584a:	bf00      	nop
 800584c:	e7fd      	b.n	800584a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800584e:	f000 f883 	bl	8005958 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005852:	2100      	movs	r1, #0
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fcf3 	bl	8006240 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800585a:	f000 f88b 	bl	8005974 <xTaskResumeAll>
 800585e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d107      	bne.n	8005876 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005866:	4b07      	ldr	r3, [pc, #28]	@ (8005884 <vTaskDelay+0x68>)
 8005868:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005876:	bf00      	nop
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	24004920 	.word	0x24004920
 8005884:	e000ed04 	.word	0xe000ed04

08005888 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	@ 0x28
 800588c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005896:	463a      	mov	r2, r7
 8005898:	1d39      	adds	r1, r7, #4
 800589a:	f107 0308 	add.w	r3, r7, #8
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fe fbf2 	bl	8004088 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	9202      	str	r2, [sp, #8]
 80058ac:	9301      	str	r3, [sp, #4]
 80058ae:	2300      	movs	r3, #0
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	2300      	movs	r3, #0
 80058b4:	460a      	mov	r2, r1
 80058b6:	4922      	ldr	r1, [pc, #136]	@ (8005940 <vTaskStartScheduler+0xb8>)
 80058b8:	4822      	ldr	r0, [pc, #136]	@ (8005944 <vTaskStartScheduler+0xbc>)
 80058ba:	f7ff fe09 	bl	80054d0 <xTaskCreateStatic>
 80058be:	4603      	mov	r3, r0
 80058c0:	4a21      	ldr	r2, [pc, #132]	@ (8005948 <vTaskStartScheduler+0xc0>)
 80058c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058c4:	4b20      	ldr	r3, [pc, #128]	@ (8005948 <vTaskStartScheduler+0xc0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058cc:	2301      	movs	r3, #1
 80058ce:	617b      	str	r3, [r7, #20]
 80058d0:	e001      	b.n	80058d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d102      	bne.n	80058e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058dc:	f000 fd04 	bl	80062e8 <xTimerCreateTimerTask>
 80058e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d116      	bne.n	8005916 <vTaskStartScheduler+0x8e>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	613b      	str	r3, [r7, #16]
}
 80058fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058fc:	4b13      	ldr	r3, [pc, #76]	@ (800594c <vTaskStartScheduler+0xc4>)
 80058fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005902:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005904:	4b12      	ldr	r3, [pc, #72]	@ (8005950 <vTaskStartScheduler+0xc8>)
 8005906:	2201      	movs	r2, #1
 8005908:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800590a:	4b12      	ldr	r3, [pc, #72]	@ (8005954 <vTaskStartScheduler+0xcc>)
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005910:	f7fe ff1e 	bl	8004750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005914:	e00f      	b.n	8005936 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591c:	d10b      	bne.n	8005936 <vTaskStartScheduler+0xae>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	60fb      	str	r3, [r7, #12]
}
 8005930:	bf00      	nop
 8005932:	bf00      	nop
 8005934:	e7fd      	b.n	8005932 <vTaskStartScheduler+0xaa>
}
 8005936:	bf00      	nop
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	08006a34 	.word	0x08006a34
 8005944:	08005f79 	.word	0x08005f79
 8005948:	2400491c 	.word	0x2400491c
 800594c:	24004918 	.word	0x24004918
 8005950:	24004904 	.word	0x24004904
 8005954:	240048fc 	.word	0x240048fc

08005958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800595c:	4b04      	ldr	r3, [pc, #16]	@ (8005970 <vTaskSuspendAll+0x18>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3301      	adds	r3, #1
 8005962:	4a03      	ldr	r2, [pc, #12]	@ (8005970 <vTaskSuspendAll+0x18>)
 8005964:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005966:	bf00      	nop
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	24004920 	.word	0x24004920

08005974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800597e:	2300      	movs	r3, #0
 8005980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005982:	4b42      	ldr	r3, [pc, #264]	@ (8005a8c <xTaskResumeAll+0x118>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10b      	bne.n	80059a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	603b      	str	r3, [r7, #0]
}
 800599c:	bf00      	nop
 800599e:	bf00      	nop
 80059a0:	e7fd      	b.n	800599e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059a2:	f7fe ff79 	bl	8004898 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059a6:	4b39      	ldr	r3, [pc, #228]	@ (8005a8c <xTaskResumeAll+0x118>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	4a37      	ldr	r2, [pc, #220]	@ (8005a8c <xTaskResumeAll+0x118>)
 80059ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059b0:	4b36      	ldr	r3, [pc, #216]	@ (8005a8c <xTaskResumeAll+0x118>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d162      	bne.n	8005a7e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059b8:	4b35      	ldr	r3, [pc, #212]	@ (8005a90 <xTaskResumeAll+0x11c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d05e      	beq.n	8005a7e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059c0:	e02f      	b.n	8005a22 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059c2:	4b34      	ldr	r3, [pc, #208]	@ (8005a94 <xTaskResumeAll+0x120>)
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3318      	adds	r3, #24
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe fe06 	bl	80045e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3304      	adds	r3, #4
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fe fe01 	bl	80045e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005a98 <xTaskResumeAll+0x124>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d903      	bls.n	80059f2 <xTaskResumeAll+0x7e>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005a98 <xTaskResumeAll+0x124>)
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4a27      	ldr	r2, [pc, #156]	@ (8005a9c <xTaskResumeAll+0x128>)
 8005a00:	441a      	add	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3304      	adds	r3, #4
 8005a06:	4619      	mov	r1, r3
 8005a08:	4610      	mov	r0, r2
 8005a0a:	f7fe fd8c 	bl	8004526 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a12:	4b23      	ldr	r3, [pc, #140]	@ (8005aa0 <xTaskResumeAll+0x12c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d302      	bcc.n	8005a22 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005a1c:	4b21      	ldr	r3, [pc, #132]	@ (8005aa4 <xTaskResumeAll+0x130>)
 8005a1e:	2201      	movs	r2, #1
 8005a20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a22:	4b1c      	ldr	r3, [pc, #112]	@ (8005a94 <xTaskResumeAll+0x120>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1cb      	bne.n	80059c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a30:	f000 fb58 	bl	80060e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a34:	4b1c      	ldr	r3, [pc, #112]	@ (8005aa8 <xTaskResumeAll+0x134>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d010      	beq.n	8005a62 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a40:	f000 f846 	bl	8005ad0 <xTaskIncrementTick>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005a4a:	4b16      	ldr	r3, [pc, #88]	@ (8005aa4 <xTaskResumeAll+0x130>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f1      	bne.n	8005a40 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005a5c:	4b12      	ldr	r3, [pc, #72]	@ (8005aa8 <xTaskResumeAll+0x134>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a62:	4b10      	ldr	r3, [pc, #64]	@ (8005aa4 <xTaskResumeAll+0x130>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005aac <xTaskResumeAll+0x138>)
 8005a70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a7e:	f7fe ff3d 	bl	80048fc <vPortExitCritical>

	return xAlreadyYielded;
 8005a82:	68bb      	ldr	r3, [r7, #8]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	24004920 	.word	0x24004920
 8005a90:	240048f8 	.word	0x240048f8
 8005a94:	240048b8 	.word	0x240048b8
 8005a98:	24004900 	.word	0x24004900
 8005a9c:	24004428 	.word	0x24004428
 8005aa0:	24004424 	.word	0x24004424
 8005aa4:	2400490c 	.word	0x2400490c
 8005aa8:	24004908 	.word	0x24004908
 8005aac:	e000ed04 	.word	0xe000ed04

08005ab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005ab6:	4b05      	ldr	r3, [pc, #20]	@ (8005acc <xTaskGetTickCount+0x1c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005abc:	687b      	ldr	r3, [r7, #4]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	240048fc 	.word	0x240048fc

08005ad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ada:	4b4f      	ldr	r3, [pc, #316]	@ (8005c18 <xTaskIncrementTick+0x148>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f040 8090 	bne.w	8005c04 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ae4:	4b4d      	ldr	r3, [pc, #308]	@ (8005c1c <xTaskIncrementTick+0x14c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005aec:	4a4b      	ldr	r2, [pc, #300]	@ (8005c1c <xTaskIncrementTick+0x14c>)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d121      	bne.n	8005b3c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005af8:	4b49      	ldr	r3, [pc, #292]	@ (8005c20 <xTaskIncrementTick+0x150>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00b      	beq.n	8005b1a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	603b      	str	r3, [r7, #0]
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
 8005b18:	e7fd      	b.n	8005b16 <xTaskIncrementTick+0x46>
 8005b1a:	4b41      	ldr	r3, [pc, #260]	@ (8005c20 <xTaskIncrementTick+0x150>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	4b40      	ldr	r3, [pc, #256]	@ (8005c24 <xTaskIncrementTick+0x154>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a3e      	ldr	r2, [pc, #248]	@ (8005c20 <xTaskIncrementTick+0x150>)
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	4a3e      	ldr	r2, [pc, #248]	@ (8005c24 <xTaskIncrementTick+0x154>)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c28 <xTaskIncrementTick+0x158>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3301      	adds	r3, #1
 8005b34:	4a3c      	ldr	r2, [pc, #240]	@ (8005c28 <xTaskIncrementTick+0x158>)
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	f000 fad4 	bl	80060e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b3c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c2c <xTaskIncrementTick+0x15c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d349      	bcc.n	8005bda <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b46:	4b36      	ldr	r3, [pc, #216]	@ (8005c20 <xTaskIncrementTick+0x150>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d104      	bne.n	8005b5a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b50:	4b36      	ldr	r3, [pc, #216]	@ (8005c2c <xTaskIncrementTick+0x15c>)
 8005b52:	f04f 32ff 	mov.w	r2, #4294967295
 8005b56:	601a      	str	r2, [r3, #0]
					break;
 8005b58:	e03f      	b.n	8005bda <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b5a:	4b31      	ldr	r3, [pc, #196]	@ (8005c20 <xTaskIncrementTick+0x150>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d203      	bcs.n	8005b7a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b72:	4a2e      	ldr	r2, [pc, #184]	@ (8005c2c <xTaskIncrementTick+0x15c>)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b78:	e02f      	b.n	8005bda <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fe fd2e 	bl	80045e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d004      	beq.n	8005b96 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	3318      	adds	r3, #24
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fe fd25 	bl	80045e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9a:	4b25      	ldr	r3, [pc, #148]	@ (8005c30 <xTaskIncrementTick+0x160>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d903      	bls.n	8005baa <xTaskIncrementTick+0xda>
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba6:	4a22      	ldr	r2, [pc, #136]	@ (8005c30 <xTaskIncrementTick+0x160>)
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8005c34 <xTaskIncrementTick+0x164>)
 8005bb8:	441a      	add	r2, r3
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	f7fe fcb0 	bl	8004526 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bca:	4b1b      	ldr	r3, [pc, #108]	@ (8005c38 <xTaskIncrementTick+0x168>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d3b8      	bcc.n	8005b46 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bd8:	e7b5      	b.n	8005b46 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bda:	4b17      	ldr	r3, [pc, #92]	@ (8005c38 <xTaskIncrementTick+0x168>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be0:	4914      	ldr	r1, [pc, #80]	@ (8005c34 <xTaskIncrementTick+0x164>)
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	440b      	add	r3, r1
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d901      	bls.n	8005bf6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005bf6:	4b11      	ldr	r3, [pc, #68]	@ (8005c3c <xTaskIncrementTick+0x16c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d007      	beq.n	8005c0e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	e004      	b.n	8005c0e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c04:	4b0e      	ldr	r3, [pc, #56]	@ (8005c40 <xTaskIncrementTick+0x170>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8005c40 <xTaskIncrementTick+0x170>)
 8005c0c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c0e:	697b      	ldr	r3, [r7, #20]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	24004920 	.word	0x24004920
 8005c1c:	240048fc 	.word	0x240048fc
 8005c20:	240048b0 	.word	0x240048b0
 8005c24:	240048b4 	.word	0x240048b4
 8005c28:	24004910 	.word	0x24004910
 8005c2c:	24004918 	.word	0x24004918
 8005c30:	24004900 	.word	0x24004900
 8005c34:	24004428 	.word	0x24004428
 8005c38:	24004424 	.word	0x24004424
 8005c3c:	2400490c 	.word	0x2400490c
 8005c40:	24004908 	.word	0x24004908

08005c44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c4a:	4b28      	ldr	r3, [pc, #160]	@ (8005cec <vTaskSwitchContext+0xa8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c52:	4b27      	ldr	r3, [pc, #156]	@ (8005cf0 <vTaskSwitchContext+0xac>)
 8005c54:	2201      	movs	r2, #1
 8005c56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c58:	e042      	b.n	8005ce0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005c5a:	4b25      	ldr	r3, [pc, #148]	@ (8005cf0 <vTaskSwitchContext+0xac>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c60:	4b24      	ldr	r3, [pc, #144]	@ (8005cf4 <vTaskSwitchContext+0xb0>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e011      	b.n	8005c8c <vTaskSwitchContext+0x48>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10b      	bne.n	8005c86 <vTaskSwitchContext+0x42>
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	607b      	str	r3, [r7, #4]
}
 8005c80:	bf00      	nop
 8005c82:	bf00      	nop
 8005c84:	e7fd      	b.n	8005c82 <vTaskSwitchContext+0x3e>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	491a      	ldr	r1, [pc, #104]	@ (8005cf8 <vTaskSwitchContext+0xb4>)
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0e3      	beq.n	8005c68 <vTaskSwitchContext+0x24>
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4a13      	ldr	r2, [pc, #76]	@ (8005cf8 <vTaskSwitchContext+0xb4>)
 8005cac:	4413      	add	r3, r2
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	605a      	str	r2, [r3, #4]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d104      	bne.n	8005cd0 <vTaskSwitchContext+0x8c>
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	605a      	str	r2, [r3, #4]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	4a09      	ldr	r2, [pc, #36]	@ (8005cfc <vTaskSwitchContext+0xb8>)
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	4a06      	ldr	r2, [pc, #24]	@ (8005cf4 <vTaskSwitchContext+0xb0>)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6013      	str	r3, [r2, #0]
}
 8005ce0:	bf00      	nop
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	24004920 	.word	0x24004920
 8005cf0:	2400490c 	.word	0x2400490c
 8005cf4:	24004900 	.word	0x24004900
 8005cf8:	24004428 	.word	0x24004428
 8005cfc:	24004424 	.word	0x24004424

08005d00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10b      	bne.n	8005d28 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	60fb      	str	r3, [r7, #12]
}
 8005d22:	bf00      	nop
 8005d24:	bf00      	nop
 8005d26:	e7fd      	b.n	8005d24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d28:	4b07      	ldr	r3, [pc, #28]	@ (8005d48 <vTaskPlaceOnEventList+0x48>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3318      	adds	r3, #24
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7fe fc1c 	bl	800456e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d36:	2101      	movs	r1, #1
 8005d38:	6838      	ldr	r0, [r7, #0]
 8005d3a:	f000 fa81 	bl	8006240 <prvAddCurrentTaskToDelayedList>
}
 8005d3e:	bf00      	nop
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	24004424 	.word	0x24004424

08005d4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10b      	bne.n	8005d76 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	617b      	str	r3, [r7, #20]
}
 8005d70:	bf00      	nop
 8005d72:	bf00      	nop
 8005d74:	e7fd      	b.n	8005d72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d76:	4b0a      	ldr	r3, [pc, #40]	@ (8005da0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3318      	adds	r3, #24
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f7fe fbd1 	bl	8004526 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	68b8      	ldr	r0, [r7, #8]
 8005d94:	f000 fa54 	bl	8006240 <prvAddCurrentTaskToDelayedList>
	}
 8005d98:	bf00      	nop
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	24004424 	.word	0x24004424

08005da4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10b      	bne.n	8005dd2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	60fb      	str	r3, [r7, #12]
}
 8005dcc:	bf00      	nop
 8005dce:	bf00      	nop
 8005dd0:	e7fd      	b.n	8005dce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	3318      	adds	r3, #24
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fe fc02 	bl	80045e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8005e54 <xTaskRemoveFromEventList+0xb0>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d11d      	bne.n	8005e20 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	3304      	adds	r3, #4
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fe fbf9 	bl	80045e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df2:	4b19      	ldr	r3, [pc, #100]	@ (8005e58 <xTaskRemoveFromEventList+0xb4>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d903      	bls.n	8005e02 <xTaskRemoveFromEventList+0x5e>
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfe:	4a16      	ldr	r2, [pc, #88]	@ (8005e58 <xTaskRemoveFromEventList+0xb4>)
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e06:	4613      	mov	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4a13      	ldr	r2, [pc, #76]	@ (8005e5c <xTaskRemoveFromEventList+0xb8>)
 8005e10:	441a      	add	r2, r3
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	3304      	adds	r3, #4
 8005e16:	4619      	mov	r1, r3
 8005e18:	4610      	mov	r0, r2
 8005e1a:	f7fe fb84 	bl	8004526 <vListInsertEnd>
 8005e1e:	e005      	b.n	8005e2c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	3318      	adds	r3, #24
 8005e24:	4619      	mov	r1, r3
 8005e26:	480e      	ldr	r0, [pc, #56]	@ (8005e60 <xTaskRemoveFromEventList+0xbc>)
 8005e28:	f7fe fb7d 	bl	8004526 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e30:	4b0c      	ldr	r3, [pc, #48]	@ (8005e64 <xTaskRemoveFromEventList+0xc0>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d905      	bls.n	8005e46 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e68 <xTaskRemoveFromEventList+0xc4>)
 8005e40:	2201      	movs	r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	e001      	b.n	8005e4a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005e46:	2300      	movs	r3, #0
 8005e48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e4a:	697b      	ldr	r3, [r7, #20]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	24004920 	.word	0x24004920
 8005e58:	24004900 	.word	0x24004900
 8005e5c:	24004428 	.word	0x24004428
 8005e60:	240048b8 	.word	0x240048b8
 8005e64:	24004424 	.word	0x24004424
 8005e68:	2400490c 	.word	0x2400490c

08005e6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e74:	4b06      	ldr	r3, [pc, #24]	@ (8005e90 <vTaskInternalSetTimeOutState+0x24>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e7c:	4b05      	ldr	r3, [pc, #20]	@ (8005e94 <vTaskInternalSetTimeOutState+0x28>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	605a      	str	r2, [r3, #4]
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	24004910 	.word	0x24004910
 8005e94:	240048fc 	.word	0x240048fc

08005e98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10b      	bne.n	8005ec0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	613b      	str	r3, [r7, #16]
}
 8005eba:	bf00      	nop
 8005ebc:	bf00      	nop
 8005ebe:	e7fd      	b.n	8005ebc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10b      	bne.n	8005ede <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	60fb      	str	r3, [r7, #12]
}
 8005ed8:	bf00      	nop
 8005eda:	bf00      	nop
 8005edc:	e7fd      	b.n	8005eda <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005ede:	f7fe fcdb 	bl	8004898 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8005f58 <xTaskCheckForTimeOut+0xc0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efa:	d102      	bne.n	8005f02 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61fb      	str	r3, [r7, #28]
 8005f00:	e023      	b.n	8005f4a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	4b15      	ldr	r3, [pc, #84]	@ (8005f5c <xTaskCheckForTimeOut+0xc4>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d007      	beq.n	8005f1e <xTaskCheckForTimeOut+0x86>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d302      	bcc.n	8005f1e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	61fb      	str	r3, [r7, #28]
 8005f1c:	e015      	b.n	8005f4a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d20b      	bcs.n	8005f40 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	1ad2      	subs	r2, r2, r3
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff ff99 	bl	8005e6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61fb      	str	r3, [r7, #28]
 8005f3e:	e004      	b.n	8005f4a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2200      	movs	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f46:	2301      	movs	r3, #1
 8005f48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f4a:	f7fe fcd7 	bl	80048fc <vPortExitCritical>

	return xReturn;
 8005f4e:	69fb      	ldr	r3, [r7, #28]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3720      	adds	r7, #32
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	240048fc 	.word	0x240048fc
 8005f5c:	24004910 	.word	0x24004910

08005f60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f64:	4b03      	ldr	r3, [pc, #12]	@ (8005f74 <vTaskMissedYield+0x14>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	601a      	str	r2, [r3, #0]
}
 8005f6a:	bf00      	nop
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	2400490c 	.word	0x2400490c

08005f78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f80:	f000 f852 	bl	8006028 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f84:	4b06      	ldr	r3, [pc, #24]	@ (8005fa0 <prvIdleTask+0x28>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d9f9      	bls.n	8005f80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f8c:	4b05      	ldr	r3, [pc, #20]	@ (8005fa4 <prvIdleTask+0x2c>)
 8005f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f9c:	e7f0      	b.n	8005f80 <prvIdleTask+0x8>
 8005f9e:	bf00      	nop
 8005fa0:	24004428 	.word	0x24004428
 8005fa4:	e000ed04 	.word	0xe000ed04

08005fa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fae:	2300      	movs	r3, #0
 8005fb0:	607b      	str	r3, [r7, #4]
 8005fb2:	e00c      	b.n	8005fce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4a12      	ldr	r2, [pc, #72]	@ (8006008 <prvInitialiseTaskLists+0x60>)
 8005fc0:	4413      	add	r3, r2
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe fa82 	bl	80044cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	607b      	str	r3, [r7, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b37      	cmp	r3, #55	@ 0x37
 8005fd2:	d9ef      	bls.n	8005fb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fd4:	480d      	ldr	r0, [pc, #52]	@ (800600c <prvInitialiseTaskLists+0x64>)
 8005fd6:	f7fe fa79 	bl	80044cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fda:	480d      	ldr	r0, [pc, #52]	@ (8006010 <prvInitialiseTaskLists+0x68>)
 8005fdc:	f7fe fa76 	bl	80044cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fe0:	480c      	ldr	r0, [pc, #48]	@ (8006014 <prvInitialiseTaskLists+0x6c>)
 8005fe2:	f7fe fa73 	bl	80044cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fe6:	480c      	ldr	r0, [pc, #48]	@ (8006018 <prvInitialiseTaskLists+0x70>)
 8005fe8:	f7fe fa70 	bl	80044cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fec:	480b      	ldr	r0, [pc, #44]	@ (800601c <prvInitialiseTaskLists+0x74>)
 8005fee:	f7fe fa6d 	bl	80044cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8006020 <prvInitialiseTaskLists+0x78>)
 8005ff4:	4a05      	ldr	r2, [pc, #20]	@ (800600c <prvInitialiseTaskLists+0x64>)
 8005ff6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8006024 <prvInitialiseTaskLists+0x7c>)
 8005ffa:	4a05      	ldr	r2, [pc, #20]	@ (8006010 <prvInitialiseTaskLists+0x68>)
 8005ffc:	601a      	str	r2, [r3, #0]
}
 8005ffe:	bf00      	nop
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	24004428 	.word	0x24004428
 800600c:	24004888 	.word	0x24004888
 8006010:	2400489c 	.word	0x2400489c
 8006014:	240048b8 	.word	0x240048b8
 8006018:	240048cc 	.word	0x240048cc
 800601c:	240048e4 	.word	0x240048e4
 8006020:	240048b0 	.word	0x240048b0
 8006024:	240048b4 	.word	0x240048b4

08006028 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800602e:	e019      	b.n	8006064 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006030:	f7fe fc32 	bl	8004898 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006034:	4b10      	ldr	r3, [pc, #64]	@ (8006078 <prvCheckTasksWaitingTermination+0x50>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3304      	adds	r3, #4
 8006040:	4618      	mov	r0, r3
 8006042:	f7fe facd 	bl	80045e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006046:	4b0d      	ldr	r3, [pc, #52]	@ (800607c <prvCheckTasksWaitingTermination+0x54>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3b01      	subs	r3, #1
 800604c:	4a0b      	ldr	r2, [pc, #44]	@ (800607c <prvCheckTasksWaitingTermination+0x54>)
 800604e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006050:	4b0b      	ldr	r3, [pc, #44]	@ (8006080 <prvCheckTasksWaitingTermination+0x58>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3b01      	subs	r3, #1
 8006056:	4a0a      	ldr	r2, [pc, #40]	@ (8006080 <prvCheckTasksWaitingTermination+0x58>)
 8006058:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800605a:	f7fe fc4f 	bl	80048fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f810 	bl	8006084 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006064:	4b06      	ldr	r3, [pc, #24]	@ (8006080 <prvCheckTasksWaitingTermination+0x58>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e1      	bne.n	8006030 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800606c:	bf00      	nop
 800606e:	bf00      	nop
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	240048cc 	.word	0x240048cc
 800607c:	240048f8 	.word	0x240048f8
 8006080:	240048e0 	.word	0x240048e0

08006084 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006092:	2b00      	cmp	r3, #0
 8006094:	d108      	bne.n	80060a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609a:	4618      	mov	r0, r3
 800609c:	f7fe f8f6 	bl	800428c <vPortFree>
				vPortFree( pxTCB );
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7fe f8f3 	bl	800428c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060a6:	e019      	b.n	80060dc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d103      	bne.n	80060ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fe f8ea 	bl	800428c <vPortFree>
	}
 80060b8:	e010      	b.n	80060dc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d00b      	beq.n	80060dc <prvDeleteTCB+0x58>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	60fb      	str	r3, [r7, #12]
}
 80060d6:	bf00      	nop
 80060d8:	bf00      	nop
 80060da:	e7fd      	b.n	80060d8 <prvDeleteTCB+0x54>
	}
 80060dc:	bf00      	nop
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ea:	4b0c      	ldr	r3, [pc, #48]	@ (800611c <prvResetNextTaskUnblockTime+0x38>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d104      	bne.n	80060fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006120 <prvResetNextTaskUnblockTime+0x3c>)
 80060f6:	f04f 32ff 	mov.w	r2, #4294967295
 80060fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060fc:	e008      	b.n	8006110 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060fe:	4b07      	ldr	r3, [pc, #28]	@ (800611c <prvResetNextTaskUnblockTime+0x38>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	4a04      	ldr	r2, [pc, #16]	@ (8006120 <prvResetNextTaskUnblockTime+0x3c>)
 800610e:	6013      	str	r3, [r2, #0]
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	240048b0 	.word	0x240048b0
 8006120:	24004918 	.word	0x24004918

08006124 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800612a:	4b0b      	ldr	r3, [pc, #44]	@ (8006158 <xTaskGetSchedulerState+0x34>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d102      	bne.n	8006138 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006132:	2301      	movs	r3, #1
 8006134:	607b      	str	r3, [r7, #4]
 8006136:	e008      	b.n	800614a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006138:	4b08      	ldr	r3, [pc, #32]	@ (800615c <xTaskGetSchedulerState+0x38>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d102      	bne.n	8006146 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006140:	2302      	movs	r3, #2
 8006142:	607b      	str	r3, [r7, #4]
 8006144:	e001      	b.n	800614a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006146:	2300      	movs	r3, #0
 8006148:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800614a:	687b      	ldr	r3, [r7, #4]
	}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	24004904 	.word	0x24004904
 800615c:	24004920 	.word	0x24004920

08006160 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d058      	beq.n	8006228 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006176:	4b2f      	ldr	r3, [pc, #188]	@ (8006234 <xTaskPriorityDisinherit+0xd4>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	429a      	cmp	r2, r3
 800617e:	d00b      	beq.n	8006198 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	60fb      	str	r3, [r7, #12]
}
 8006192:	bf00      	nop
 8006194:	bf00      	nop
 8006196:	e7fd      	b.n	8006194 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10b      	bne.n	80061b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	60bb      	str	r3, [r7, #8]
}
 80061b2:	bf00      	nop
 80061b4:	bf00      	nop
 80061b6:	e7fd      	b.n	80061b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061bc:	1e5a      	subs	r2, r3, #1
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d02c      	beq.n	8006228 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d128      	bne.n	8006228 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	3304      	adds	r3, #4
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fe fa00 	bl	80045e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006238 <xTaskPriorityDisinherit+0xd8>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d903      	bls.n	8006208 <xTaskPriorityDisinherit+0xa8>
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006204:	4a0c      	ldr	r2, [pc, #48]	@ (8006238 <xTaskPriorityDisinherit+0xd8>)
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800620c:	4613      	mov	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4a09      	ldr	r2, [pc, #36]	@ (800623c <xTaskPriorityDisinherit+0xdc>)
 8006216:	441a      	add	r2, r3
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	3304      	adds	r3, #4
 800621c:	4619      	mov	r1, r3
 800621e:	4610      	mov	r0, r2
 8006220:	f7fe f981 	bl	8004526 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006224:	2301      	movs	r3, #1
 8006226:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006228:	697b      	ldr	r3, [r7, #20]
	}
 800622a:	4618      	mov	r0, r3
 800622c:	3718      	adds	r7, #24
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	24004424 	.word	0x24004424
 8006238:	24004900 	.word	0x24004900
 800623c:	24004428 	.word	0x24004428

08006240 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800624a:	4b21      	ldr	r3, [pc, #132]	@ (80062d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006250:	4b20      	ldr	r3, [pc, #128]	@ (80062d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3304      	adds	r3, #4
 8006256:	4618      	mov	r0, r3
 8006258:	f7fe f9c2 	bl	80045e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d10a      	bne.n	800627a <prvAddCurrentTaskToDelayedList+0x3a>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d007      	beq.n	800627a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800626a:	4b1a      	ldr	r3, [pc, #104]	@ (80062d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3304      	adds	r3, #4
 8006270:	4619      	mov	r1, r3
 8006272:	4819      	ldr	r0, [pc, #100]	@ (80062d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006274:	f7fe f957 	bl	8004526 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006278:	e026      	b.n	80062c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4413      	add	r3, r2
 8006280:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006282:	4b14      	ldr	r3, [pc, #80]	@ (80062d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	429a      	cmp	r2, r3
 8006290:	d209      	bcs.n	80062a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006292:	4b12      	ldr	r3, [pc, #72]	@ (80062dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4b0f      	ldr	r3, [pc, #60]	@ (80062d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3304      	adds	r3, #4
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f7fe f965 	bl	800456e <vListInsert>
}
 80062a4:	e010      	b.n	80062c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062a6:	4b0e      	ldr	r3, [pc, #56]	@ (80062e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	4b0a      	ldr	r3, [pc, #40]	@ (80062d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3304      	adds	r3, #4
 80062b0:	4619      	mov	r1, r3
 80062b2:	4610      	mov	r0, r2
 80062b4:	f7fe f95b 	bl	800456e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062b8:	4b0a      	ldr	r3, [pc, #40]	@ (80062e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d202      	bcs.n	80062c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80062c2:	4a08      	ldr	r2, [pc, #32]	@ (80062e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	6013      	str	r3, [r2, #0]
}
 80062c8:	bf00      	nop
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	240048fc 	.word	0x240048fc
 80062d4:	24004424 	.word	0x24004424
 80062d8:	240048e4 	.word	0x240048e4
 80062dc:	240048b4 	.word	0x240048b4
 80062e0:	240048b0 	.word	0x240048b0
 80062e4:	24004918 	.word	0x24004918

080062e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08a      	sub	sp, #40	@ 0x28
 80062ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80062f2:	f000 fb13 	bl	800691c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80062f6:	4b1d      	ldr	r3, [pc, #116]	@ (800636c <xTimerCreateTimerTask+0x84>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d021      	beq.n	8006342 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006302:	2300      	movs	r3, #0
 8006304:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006306:	1d3a      	adds	r2, r7, #4
 8006308:	f107 0108 	add.w	r1, r7, #8
 800630c:	f107 030c 	add.w	r3, r7, #12
 8006310:	4618      	mov	r0, r3
 8006312:	f7fd fed3 	bl	80040bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	9202      	str	r2, [sp, #8]
 800631e:	9301      	str	r3, [sp, #4]
 8006320:	2302      	movs	r3, #2
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	2300      	movs	r3, #0
 8006326:	460a      	mov	r2, r1
 8006328:	4911      	ldr	r1, [pc, #68]	@ (8006370 <xTimerCreateTimerTask+0x88>)
 800632a:	4812      	ldr	r0, [pc, #72]	@ (8006374 <xTimerCreateTimerTask+0x8c>)
 800632c:	f7ff f8d0 	bl	80054d0 <xTaskCreateStatic>
 8006330:	4603      	mov	r3, r0
 8006332:	4a11      	ldr	r2, [pc, #68]	@ (8006378 <xTimerCreateTimerTask+0x90>)
 8006334:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006336:	4b10      	ldr	r3, [pc, #64]	@ (8006378 <xTimerCreateTimerTask+0x90>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800633e:	2301      	movs	r3, #1
 8006340:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10b      	bne.n	8006360 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	613b      	str	r3, [r7, #16]
}
 800635a:	bf00      	nop
 800635c:	bf00      	nop
 800635e:	e7fd      	b.n	800635c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006360:	697b      	ldr	r3, [r7, #20]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	24004954 	.word	0x24004954
 8006370:	08006a3c 	.word	0x08006a3c
 8006374:	080064b5 	.word	0x080064b5
 8006378:	24004958 	.word	0x24004958

0800637c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08a      	sub	sp, #40	@ 0x28
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800638a:	2300      	movs	r3, #0
 800638c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10b      	bne.n	80063ac <xTimerGenericCommand+0x30>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	623b      	str	r3, [r7, #32]
}
 80063a6:	bf00      	nop
 80063a8:	bf00      	nop
 80063aa:	e7fd      	b.n	80063a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80063ac:	4b19      	ldr	r3, [pc, #100]	@ (8006414 <xTimerGenericCommand+0x98>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d02a      	beq.n	800640a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b05      	cmp	r3, #5
 80063c4:	dc18      	bgt.n	80063f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80063c6:	f7ff fead 	bl	8006124 <xTaskGetSchedulerState>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d109      	bne.n	80063e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063d0:	4b10      	ldr	r3, [pc, #64]	@ (8006414 <xTimerGenericCommand+0x98>)
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	f107 0110 	add.w	r1, r7, #16
 80063d8:	2300      	movs	r3, #0
 80063da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063dc:	f7fe fc88 	bl	8004cf0 <xQueueGenericSend>
 80063e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80063e2:	e012      	b.n	800640a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006414 <xTimerGenericCommand+0x98>)
 80063e6:	6818      	ldr	r0, [r3, #0]
 80063e8:	f107 0110 	add.w	r1, r7, #16
 80063ec:	2300      	movs	r3, #0
 80063ee:	2200      	movs	r2, #0
 80063f0:	f7fe fc7e 	bl	8004cf0 <xQueueGenericSend>
 80063f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80063f6:	e008      	b.n	800640a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80063f8:	4b06      	ldr	r3, [pc, #24]	@ (8006414 <xTimerGenericCommand+0x98>)
 80063fa:	6818      	ldr	r0, [r3, #0]
 80063fc:	f107 0110 	add.w	r1, r7, #16
 8006400:	2300      	movs	r3, #0
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	f7fe fd76 	bl	8004ef4 <xQueueGenericSendFromISR>
 8006408:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800640c:	4618      	mov	r0, r3
 800640e:	3728      	adds	r7, #40	@ 0x28
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	24004954 	.word	0x24004954

08006418 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af02      	add	r7, sp, #8
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006422:	4b23      	ldr	r3, [pc, #140]	@ (80064b0 <prvProcessExpiredTimer+0x98>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	3304      	adds	r3, #4
 8006430:	4618      	mov	r0, r3
 8006432:	f7fe f8d5 	bl	80045e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b00      	cmp	r3, #0
 8006442:	d023      	beq.n	800648c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	699a      	ldr	r2, [r3, #24]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	18d1      	adds	r1, r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	6978      	ldr	r0, [r7, #20]
 8006452:	f000 f8d5 	bl	8006600 <prvInsertTimerInActiveList>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d020      	beq.n	800649e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800645c:	2300      	movs	r3, #0
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	2300      	movs	r3, #0
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	2100      	movs	r1, #0
 8006466:	6978      	ldr	r0, [r7, #20]
 8006468:	f7ff ff88 	bl	800637c <xTimerGenericCommand>
 800646c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d114      	bne.n	800649e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	60fb      	str	r3, [r7, #12]
}
 8006486:	bf00      	nop
 8006488:	bf00      	nop
 800648a:	e7fd      	b.n	8006488 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006492:	f023 0301 	bic.w	r3, r3, #1
 8006496:	b2da      	uxtb	r2, r3
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	6978      	ldr	r0, [r7, #20]
 80064a4:	4798      	blx	r3
}
 80064a6:	bf00      	nop
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	2400494c 	.word	0x2400494c

080064b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064bc:	f107 0308 	add.w	r3, r7, #8
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 f859 	bl	8006578 <prvGetNextExpireTime>
 80064c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4619      	mov	r1, r3
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f805 	bl	80064dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80064d2:	f000 f8d7 	bl	8006684 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064d6:	bf00      	nop
 80064d8:	e7f0      	b.n	80064bc <prvTimerTask+0x8>
	...

080064dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80064e6:	f7ff fa37 	bl	8005958 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064ea:	f107 0308 	add.w	r3, r7, #8
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 f866 	bl	80065c0 <prvSampleTimeNow>
 80064f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d130      	bne.n	800655e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <prvProcessTimerOrBlockTask+0x3c>
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	429a      	cmp	r2, r3
 8006508:	d806      	bhi.n	8006518 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800650a:	f7ff fa33 	bl	8005974 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800650e:	68f9      	ldr	r1, [r7, #12]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff ff81 	bl	8006418 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006516:	e024      	b.n	8006562 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d008      	beq.n	8006530 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800651e:	4b13      	ldr	r3, [pc, #76]	@ (800656c <prvProcessTimerOrBlockTask+0x90>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <prvProcessTimerOrBlockTask+0x50>
 8006528:	2301      	movs	r3, #1
 800652a:	e000      	b.n	800652e <prvProcessTimerOrBlockTask+0x52>
 800652c:	2300      	movs	r3, #0
 800652e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006530:	4b0f      	ldr	r3, [pc, #60]	@ (8006570 <prvProcessTimerOrBlockTask+0x94>)
 8006532:	6818      	ldr	r0, [r3, #0]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	4619      	mov	r1, r3
 800653e:	f7fe ff93 	bl	8005468 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006542:	f7ff fa17 	bl	8005974 <xTaskResumeAll>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800654c:	4b09      	ldr	r3, [pc, #36]	@ (8006574 <prvProcessTimerOrBlockTask+0x98>)
 800654e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	f3bf 8f6f 	isb	sy
}
 800655c:	e001      	b.n	8006562 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800655e:	f7ff fa09 	bl	8005974 <xTaskResumeAll>
}
 8006562:	bf00      	nop
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	24004950 	.word	0x24004950
 8006570:	24004954 	.word	0x24004954
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006580:	4b0e      	ldr	r3, [pc, #56]	@ (80065bc <prvGetNextExpireTime+0x44>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <prvGetNextExpireTime+0x16>
 800658a:	2201      	movs	r2, #1
 800658c:	e000      	b.n	8006590 <prvGetNextExpireTime+0x18>
 800658e:	2200      	movs	r2, #0
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d105      	bne.n	80065a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800659c:	4b07      	ldr	r3, [pc, #28]	@ (80065bc <prvGetNextExpireTime+0x44>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	e001      	b.n	80065ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80065ac:	68fb      	ldr	r3, [r7, #12]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	2400494c 	.word	0x2400494c

080065c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80065c8:	f7ff fa72 	bl	8005ab0 <xTaskGetTickCount>
 80065cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80065ce:	4b0b      	ldr	r3, [pc, #44]	@ (80065fc <prvSampleTimeNow+0x3c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d205      	bcs.n	80065e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80065d8:	f000 f93a 	bl	8006850 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	e002      	b.n	80065ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80065ea:	4a04      	ldr	r2, [pc, #16]	@ (80065fc <prvSampleTimeNow+0x3c>)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80065f0:	68fb      	ldr	r3, [r7, #12]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	2400495c 	.word	0x2400495c

08006600 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800660e:	2300      	movs	r3, #0
 8006610:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	429a      	cmp	r2, r3
 8006624:	d812      	bhi.n	800664c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	1ad2      	subs	r2, r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	429a      	cmp	r2, r3
 8006632:	d302      	bcc.n	800663a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006634:	2301      	movs	r3, #1
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	e01b      	b.n	8006672 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800663a:	4b10      	ldr	r3, [pc, #64]	@ (800667c <prvInsertTimerInActiveList+0x7c>)
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3304      	adds	r3, #4
 8006642:	4619      	mov	r1, r3
 8006644:	4610      	mov	r0, r2
 8006646:	f7fd ff92 	bl	800456e <vListInsert>
 800664a:	e012      	b.n	8006672 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d206      	bcs.n	8006662 <prvInsertTimerInActiveList+0x62>
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	429a      	cmp	r2, r3
 800665a:	d302      	bcc.n	8006662 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800665c:	2301      	movs	r3, #1
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	e007      	b.n	8006672 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006662:	4b07      	ldr	r3, [pc, #28]	@ (8006680 <prvInsertTimerInActiveList+0x80>)
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3304      	adds	r3, #4
 800666a:	4619      	mov	r1, r3
 800666c:	4610      	mov	r0, r2
 800666e:	f7fd ff7e 	bl	800456e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006672:	697b      	ldr	r3, [r7, #20]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	24004950 	.word	0x24004950
 8006680:	2400494c 	.word	0x2400494c

08006684 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b08e      	sub	sp, #56	@ 0x38
 8006688:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800668a:	e0ce      	b.n	800682a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	da19      	bge.n	80066c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006692:	1d3b      	adds	r3, r7, #4
 8006694:	3304      	adds	r3, #4
 8006696:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10b      	bne.n	80066b6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	61fb      	str	r3, [r7, #28]
}
 80066b0:	bf00      	nop
 80066b2:	bf00      	nop
 80066b4:	e7fd      	b.n	80066b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80066b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066bc:	6850      	ldr	r0, [r2, #4]
 80066be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066c0:	6892      	ldr	r2, [r2, #8]
 80066c2:	4611      	mov	r1, r2
 80066c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f2c0 80ae 	blt.w	800682a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80066d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d004      	beq.n	80066e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066dc:	3304      	adds	r3, #4
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fd ff7e 	bl	80045e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066e4:	463b      	mov	r3, r7
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff ff6a 	bl	80065c0 <prvSampleTimeNow>
 80066ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b09      	cmp	r3, #9
 80066f2:	f200 8097 	bhi.w	8006824 <prvProcessReceivedCommands+0x1a0>
 80066f6:	a201      	add	r2, pc, #4	@ (adr r2, 80066fc <prvProcessReceivedCommands+0x78>)
 80066f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fc:	08006725 	.word	0x08006725
 8006700:	08006725 	.word	0x08006725
 8006704:	08006725 	.word	0x08006725
 8006708:	0800679b 	.word	0x0800679b
 800670c:	080067af 	.word	0x080067af
 8006710:	080067fb 	.word	0x080067fb
 8006714:	08006725 	.word	0x08006725
 8006718:	08006725 	.word	0x08006725
 800671c:	0800679b 	.word	0x0800679b
 8006720:	080067af 	.word	0x080067af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006726:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800672a:	f043 0301 	orr.w	r3, r3, #1
 800672e:	b2da      	uxtb	r2, r3
 8006730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006732:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	18d1      	adds	r1, r2, r3
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006744:	f7ff ff5c 	bl	8006600 <prvInsertTimerInActiveList>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d06c      	beq.n	8006828 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800674e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006754:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006758:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b00      	cmp	r3, #0
 8006762:	d061      	beq.n	8006828 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	441a      	add	r2, r3
 800676c:	2300      	movs	r3, #0
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	2300      	movs	r3, #0
 8006772:	2100      	movs	r1, #0
 8006774:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006776:	f7ff fe01 	bl	800637c <xTimerGenericCommand>
 800677a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d152      	bne.n	8006828 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	61bb      	str	r3, [r7, #24]
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop
 8006798:	e7fd      	b.n	8006796 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800679a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80067ac:	e03d      	b.n	800682a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067b4:	f043 0301 	orr.w	r3, r3, #1
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10b      	bne.n	80067e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	617b      	str	r3, [r7, #20]
}
 80067e0:	bf00      	nop
 80067e2:	bf00      	nop
 80067e4:	e7fd      	b.n	80067e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e8:	699a      	ldr	r2, [r3, #24]
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	18d1      	adds	r1, r2, r3
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067f4:	f7ff ff04 	bl	8006600 <prvInsertTimerInActiveList>
					break;
 80067f8:	e017      	b.n	800682a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80067fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d103      	bne.n	8006810 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006808:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800680a:	f7fd fd3f 	bl	800428c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800680e:	e00c      	b.n	800682a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006812:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006816:	f023 0301 	bic.w	r3, r3, #1
 800681a:	b2da      	uxtb	r2, r3
 800681c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006822:	e002      	b.n	800682a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006824:	bf00      	nop
 8006826:	e000      	b.n	800682a <prvProcessReceivedCommands+0x1a6>
					break;
 8006828:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800682a:	4b08      	ldr	r3, [pc, #32]	@ (800684c <prvProcessReceivedCommands+0x1c8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	1d39      	adds	r1, r7, #4
 8006830:	2200      	movs	r2, #0
 8006832:	4618      	mov	r0, r3
 8006834:	f7fe fbfc 	bl	8005030 <xQueueReceive>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	f47f af26 	bne.w	800668c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006840:	bf00      	nop
 8006842:	bf00      	nop
 8006844:	3730      	adds	r7, #48	@ 0x30
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	24004954 	.word	0x24004954

08006850 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006856:	e049      	b.n	80068ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006858:	4b2e      	ldr	r3, [pc, #184]	@ (8006914 <prvSwitchTimerLists+0xc4>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006862:	4b2c      	ldr	r3, [pc, #176]	@ (8006914 <prvSwitchTimerLists+0xc4>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3304      	adds	r3, #4
 8006870:	4618      	mov	r0, r3
 8006872:	f7fd feb5 	bl	80045e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d02f      	beq.n	80068ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	4413      	add	r3, r2
 8006894:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	429a      	cmp	r2, r3
 800689c:	d90e      	bls.n	80068bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006914 <prvSwitchTimerLists+0xc4>)
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3304      	adds	r3, #4
 80068b2:	4619      	mov	r1, r3
 80068b4:	4610      	mov	r0, r2
 80068b6:	f7fd fe5a 	bl	800456e <vListInsert>
 80068ba:	e017      	b.n	80068ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068bc:	2300      	movs	r3, #0
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	2300      	movs	r3, #0
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	2100      	movs	r1, #0
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f7ff fd58 	bl	800637c <xTimerGenericCommand>
 80068cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10b      	bne.n	80068ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	603b      	str	r3, [r7, #0]
}
 80068e6:	bf00      	nop
 80068e8:	bf00      	nop
 80068ea:	e7fd      	b.n	80068e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068ec:	4b09      	ldr	r3, [pc, #36]	@ (8006914 <prvSwitchTimerLists+0xc4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1b0      	bne.n	8006858 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80068f6:	4b07      	ldr	r3, [pc, #28]	@ (8006914 <prvSwitchTimerLists+0xc4>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80068fc:	4b06      	ldr	r3, [pc, #24]	@ (8006918 <prvSwitchTimerLists+0xc8>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a04      	ldr	r2, [pc, #16]	@ (8006914 <prvSwitchTimerLists+0xc4>)
 8006902:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006904:	4a04      	ldr	r2, [pc, #16]	@ (8006918 <prvSwitchTimerLists+0xc8>)
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	6013      	str	r3, [r2, #0]
}
 800690a:	bf00      	nop
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	2400494c 	.word	0x2400494c
 8006918:	24004950 	.word	0x24004950

0800691c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006922:	f7fd ffb9 	bl	8004898 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006926:	4b15      	ldr	r3, [pc, #84]	@ (800697c <prvCheckForValidListAndQueue+0x60>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d120      	bne.n	8006970 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800692e:	4814      	ldr	r0, [pc, #80]	@ (8006980 <prvCheckForValidListAndQueue+0x64>)
 8006930:	f7fd fdcc 	bl	80044cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006934:	4813      	ldr	r0, [pc, #76]	@ (8006984 <prvCheckForValidListAndQueue+0x68>)
 8006936:	f7fd fdc9 	bl	80044cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800693a:	4b13      	ldr	r3, [pc, #76]	@ (8006988 <prvCheckForValidListAndQueue+0x6c>)
 800693c:	4a10      	ldr	r2, [pc, #64]	@ (8006980 <prvCheckForValidListAndQueue+0x64>)
 800693e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006940:	4b12      	ldr	r3, [pc, #72]	@ (800698c <prvCheckForValidListAndQueue+0x70>)
 8006942:	4a10      	ldr	r2, [pc, #64]	@ (8006984 <prvCheckForValidListAndQueue+0x68>)
 8006944:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006946:	2300      	movs	r3, #0
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	4b11      	ldr	r3, [pc, #68]	@ (8006990 <prvCheckForValidListAndQueue+0x74>)
 800694c:	4a11      	ldr	r2, [pc, #68]	@ (8006994 <prvCheckForValidListAndQueue+0x78>)
 800694e:	2110      	movs	r1, #16
 8006950:	200a      	movs	r0, #10
 8006952:	f7fe f92d 	bl	8004bb0 <xQueueGenericCreateStatic>
 8006956:	4603      	mov	r3, r0
 8006958:	4a08      	ldr	r2, [pc, #32]	@ (800697c <prvCheckForValidListAndQueue+0x60>)
 800695a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800695c:	4b07      	ldr	r3, [pc, #28]	@ (800697c <prvCheckForValidListAndQueue+0x60>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d005      	beq.n	8006970 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006964:	4b05      	ldr	r3, [pc, #20]	@ (800697c <prvCheckForValidListAndQueue+0x60>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	490b      	ldr	r1, [pc, #44]	@ (8006998 <prvCheckForValidListAndQueue+0x7c>)
 800696a:	4618      	mov	r0, r3
 800696c:	f7fe fd52 	bl	8005414 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006970:	f7fd ffc4 	bl	80048fc <vPortExitCritical>
}
 8006974:	bf00      	nop
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	24004954 	.word	0x24004954
 8006980:	24004924 	.word	0x24004924
 8006984:	24004938 	.word	0x24004938
 8006988:	2400494c 	.word	0x2400494c
 800698c:	24004950 	.word	0x24004950
 8006990:	24004a00 	.word	0x24004a00
 8006994:	24004960 	.word	0x24004960
 8006998:	08006a44 	.word	0x08006a44

0800699c <memset>:
 800699c:	4402      	add	r2, r0
 800699e:	4603      	mov	r3, r0
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d100      	bne.n	80069a6 <memset+0xa>
 80069a4:	4770      	bx	lr
 80069a6:	f803 1b01 	strb.w	r1, [r3], #1
 80069aa:	e7f9      	b.n	80069a0 <memset+0x4>

080069ac <__libc_init_array>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	4d0d      	ldr	r5, [pc, #52]	@ (80069e4 <__libc_init_array+0x38>)
 80069b0:	4c0d      	ldr	r4, [pc, #52]	@ (80069e8 <__libc_init_array+0x3c>)
 80069b2:	1b64      	subs	r4, r4, r5
 80069b4:	10a4      	asrs	r4, r4, #2
 80069b6:	2600      	movs	r6, #0
 80069b8:	42a6      	cmp	r6, r4
 80069ba:	d109      	bne.n	80069d0 <__libc_init_array+0x24>
 80069bc:	4d0b      	ldr	r5, [pc, #44]	@ (80069ec <__libc_init_array+0x40>)
 80069be:	4c0c      	ldr	r4, [pc, #48]	@ (80069f0 <__libc_init_array+0x44>)
 80069c0:	f000 f826 	bl	8006a10 <_init>
 80069c4:	1b64      	subs	r4, r4, r5
 80069c6:	10a4      	asrs	r4, r4, #2
 80069c8:	2600      	movs	r6, #0
 80069ca:	42a6      	cmp	r6, r4
 80069cc:	d105      	bne.n	80069da <__libc_init_array+0x2e>
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
 80069d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d4:	4798      	blx	r3
 80069d6:	3601      	adds	r6, #1
 80069d8:	e7ee      	b.n	80069b8 <__libc_init_array+0xc>
 80069da:	f855 3b04 	ldr.w	r3, [r5], #4
 80069de:	4798      	blx	r3
 80069e0:	3601      	adds	r6, #1
 80069e2:	e7f2      	b.n	80069ca <__libc_init_array+0x1e>
 80069e4:	08006aac 	.word	0x08006aac
 80069e8:	08006aac 	.word	0x08006aac
 80069ec:	08006aac 	.word	0x08006aac
 80069f0:	08006ab0 	.word	0x08006ab0

080069f4 <memcpy>:
 80069f4:	440a      	add	r2, r1
 80069f6:	4291      	cmp	r1, r2
 80069f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80069fc:	d100      	bne.n	8006a00 <memcpy+0xc>
 80069fe:	4770      	bx	lr
 8006a00:	b510      	push	{r4, lr}
 8006a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a0a:	4291      	cmp	r1, r2
 8006a0c:	d1f9      	bne.n	8006a02 <memcpy+0xe>
 8006a0e:	bd10      	pop	{r4, pc}

08006a10 <_init>:
 8006a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a12:	bf00      	nop
 8006a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a16:	bc08      	pop	{r3}
 8006a18:	469e      	mov	lr, r3
 8006a1a:	4770      	bx	lr

08006a1c <_fini>:
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	bf00      	nop
 8006a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a22:	bc08      	pop	{r3}
 8006a24:	469e      	mov	lr, r3
 8006a26:	4770      	bx	lr
