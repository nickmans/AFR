
WAYPOINTIFICATION_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb14  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800cdb8  0800cdb8  0000ddb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d26c  0800d26c  0000f1f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d26c  0800d26c  0000e26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d274  0800d274  0000f1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d274  0800d274  0000e274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d278  0800d278  0000e278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  24000000  0800d27c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b70  240001f8  0800d474  0000f1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004d68  0800d474  0000fd68  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd0e  00000000  00000000  0000f226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003979  00000000  00000000  0002af34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  0002e8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f90  00000000  00000000  0002fd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bcdc  00000000  00000000  00030c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e8b  00000000  00000000  0006c974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00188927  00000000  00000000  000857ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020e126  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067cc  00000000  00000000  0020e16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00214938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cd9c 	.word	0x0800cd9c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	0800cd9c 	.word	0x0800cd9c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b49      	ldr	r3, [pc, #292]	@ (8000bd0 <SystemInit+0x12c>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aae:	4a48      	ldr	r2, [pc, #288]	@ (8000bd0 <SystemInit+0x12c>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000ab8:	4b45      	ldr	r3, [pc, #276]	@ (8000bd0 <SystemInit+0x12c>)
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	4a44      	ldr	r2, [pc, #272]	@ (8000bd0 <SystemInit+0x12c>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac4:	4b43      	ldr	r3, [pc, #268]	@ (8000bd4 <SystemInit+0x130>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 030f 	and.w	r3, r3, #15
 8000acc:	2b06      	cmp	r3, #6
 8000ace:	d807      	bhi.n	8000ae0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ad0:	4b40      	ldr	r3, [pc, #256]	@ (8000bd4 <SystemInit+0x130>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f023 030f 	bic.w	r3, r3, #15
 8000ad8:	4a3e      	ldr	r2, [pc, #248]	@ (8000bd4 <SystemInit+0x130>)
 8000ada:	f043 0307 	orr.w	r3, r3, #7
 8000ade:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd8 <SystemInit+0x134>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a3c      	ldr	r2, [pc, #240]	@ (8000bd8 <SystemInit+0x134>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000aec:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd8 <SystemInit+0x134>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000af2:	4b39      	ldr	r3, [pc, #228]	@ (8000bd8 <SystemInit+0x134>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4938      	ldr	r1, [pc, #224]	@ (8000bd8 <SystemInit+0x134>)
 8000af8:	4b38      	ldr	r3, [pc, #224]	@ (8000bdc <SystemInit+0x138>)
 8000afa:	4013      	ands	r3, r2
 8000afc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000afe:	4b35      	ldr	r3, [pc, #212]	@ (8000bd4 <SystemInit+0x130>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d007      	beq.n	8000b1a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b0a:	4b32      	ldr	r3, [pc, #200]	@ (8000bd4 <SystemInit+0x130>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f023 030f 	bic.w	r3, r3, #15
 8000b12:	4a30      	ldr	r2, [pc, #192]	@ (8000bd4 <SystemInit+0x130>)
 8000b14:	f043 0307 	orr.w	r3, r3, #7
 8000b18:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd8 <SystemInit+0x134>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b20:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd8 <SystemInit+0x134>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b26:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd8 <SystemInit+0x134>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <SystemInit+0x134>)
 8000b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8000be0 <SystemInit+0x13c>)
 8000b30:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b32:	4b29      	ldr	r3, [pc, #164]	@ (8000bd8 <SystemInit+0x134>)
 8000b34:	4a2b      	ldr	r2, [pc, #172]	@ (8000be4 <SystemInit+0x140>)
 8000b36:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b38:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <SystemInit+0x134>)
 8000b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8000be8 <SystemInit+0x144>)
 8000b3c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b3e:	4b26      	ldr	r3, [pc, #152]	@ (8000bd8 <SystemInit+0x134>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b44:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <SystemInit+0x134>)
 8000b46:	4a28      	ldr	r2, [pc, #160]	@ (8000be8 <SystemInit+0x144>)
 8000b48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b4a:	4b23      	ldr	r3, [pc, #140]	@ (8000bd8 <SystemInit+0x134>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b50:	4b21      	ldr	r3, [pc, #132]	@ (8000bd8 <SystemInit+0x134>)
 8000b52:	4a25      	ldr	r2, [pc, #148]	@ (8000be8 <SystemInit+0x144>)
 8000b54:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b56:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <SystemInit+0x134>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd8 <SystemInit+0x134>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd8 <SystemInit+0x134>)
 8000b62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd8 <SystemInit+0x134>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <SystemInit+0x148>)
 8000b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b72:	4a1e      	ldr	r2, [pc, #120]	@ (8000bec <SystemInit+0x148>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b78:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <SystemInit+0x14c>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf4 <SystemInit+0x150>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b86:	d202      	bcs.n	8000b8e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <SystemInit+0x154>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <SystemInit+0x134>)
 8000b90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d113      	bne.n	8000bc4 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <SystemInit+0x134>)
 8000b9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ba2:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <SystemInit+0x134>)
 8000ba4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ba8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <SystemInit+0x158>)
 8000bae:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000bb2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <SystemInit+0x134>)
 8000bb6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bba:	4a07      	ldr	r2, [pc, #28]	@ (8000bd8 <SystemInit+0x134>)
 8000bbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bc0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	52002000 	.word	0x52002000
 8000bd8:	58024400 	.word	0x58024400
 8000bdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000be0:	02020200 	.word	0x02020200
 8000be4:	01ff0000 	.word	0x01ff0000
 8000be8:	01010280 	.word	0x01010280
 8000bec:	580000c0 	.word	0x580000c0
 8000bf0:	5c001000 	.word	0x5c001000
 8000bf4:	ffff0000 	.word	0xffff0000
 8000bf8:	51008108 	.word	0x51008108
 8000bfc:	52004000 	.word	0x52004000

08000c00 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000c04:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <ExitRun0Mode+0x2c>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <ExitRun0Mode+0x2c>)
 8000c0a:	f023 0302 	bic.w	r3, r3, #2
 8000c0e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c10:	bf00      	nop
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <ExitRun0Mode+0x2c>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0f9      	beq.n	8000c12 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000c1e:	bf00      	nop
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	58024800 	.word	0x58024800

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c3a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c3c:	bf00      	nop
 8000c3e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d28 <main+0xf8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d004      	beq.n	8000c54 <main+0x24>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	1e5a      	subs	r2, r3, #1
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	dcf4      	bgt.n	8000c3e <main+0xe>
  if ( timeout < 0 )
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	da01      	bge.n	8000c5e <main+0x2e>
  {
  Error_Handler();
 8000c5a:	f000 f9f1 	bl	8001040 <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5e:	f000 fd45 	bl	80016ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c62:	f000 f86b 	bl	8000d3c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c66:	4b30      	ldr	r3, [pc, #192]	@ (8000d28 <main+0xf8>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6c:	4a2e      	ldr	r2, [pc, #184]	@ (8000d28 <main+0xf8>)
 8000c6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c76:	4b2c      	ldr	r3, [pc, #176]	@ (8000d28 <main+0xf8>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f001 f945 	bl	8001f14 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f001 f95b 	bl	8001f48 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c96:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c98:	bf00      	nop
 8000c9a:	4b23      	ldr	r3, [pc, #140]	@ (8000d28 <main+0xf8>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d104      	bne.n	8000cb0 <main+0x80>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	1e5a      	subs	r2, r3, #1
 8000caa:	607a      	str	r2, [r7, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	dcf4      	bgt.n	8000c9a <main+0x6a>
if ( timeout < 0 )
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	da01      	bge.n	8000cba <main+0x8a>
{
Error_Handler();
 8000cb6:	f000 f9c3 	bl	8001040 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cba:	f000 f8bb 	bl	8000e34 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cbe:	f005 f85d 	bl	8005d7c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8000d2c <main+0xfc>)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	481a      	ldr	r0, [pc, #104]	@ (8000d30 <main+0x100>)
 8000cc8:	f005 f8a2 	bl	8005e10 <osThreadNew>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4a19      	ldr	r2, [pc, #100]	@ (8000d34 <main+0x104>)
 8000cd0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f000 fb18 	bl	8001308 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f000 fb15 	bl	8001308 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000cde:	2002      	movs	r0, #2
 8000ce0:	f000 fb12 	bl	8001308 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 fbae 	bl	8001448 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <main+0x108>)
 8000cee:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cf2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <main+0x108>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <main+0x108>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000d00:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <main+0x108>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000d06:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <main+0x108>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000d0c:	490a      	ldr	r1, [pc, #40]	@ (8000d38 <main+0x108>)
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f000 fc2a 	bl	8001568 <BSP_COM_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <main+0xee>
  {
    Error_Handler();
 8000d1a:	f000 f991 	bl	8001040 <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 8000d1e:	f005 f851 	bl	8005dc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d22:	bf00      	nop
 8000d24:	e7fd      	b.n	8000d22 <main+0xf2>
 8000d26:	bf00      	nop
 8000d28:	58024400 	.word	0x58024400
 8000d2c:	0800cdf8 	.word	0x0800cdf8
 8000d30:	08000fb1 	.word	0x08000fb1
 8000d34:	24000224 	.word	0x24000224
 8000d38:	24000214 	.word	0x24000214

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b09c      	sub	sp, #112	@ 0x70
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d46:	224c      	movs	r2, #76	@ 0x4c
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f008 fd09 	bl	8009762 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2220      	movs	r2, #32
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f008 fd03 	bl	8009762 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d5c:	2004      	movs	r0, #4
 8000d5e:	f001 f907 	bl	8001f70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	4b31      	ldr	r3, [pc, #196]	@ (8000e2c <SystemClock_Config+0xf0>)
 8000d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d6a:	4a30      	ldr	r2, [pc, #192]	@ (8000e2c <SystemClock_Config+0xf0>)
 8000d6c:	f023 0301 	bic.w	r3, r3, #1
 8000d70:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d72:	4b2e      	ldr	r3, [pc, #184]	@ (8000e2c <SystemClock_Config+0xf0>)
 8000d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e30 <SystemClock_Config+0xf4>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a2b      	ldr	r2, [pc, #172]	@ (8000e30 <SystemClock_Config+0xf4>)
 8000d82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b29      	ldr	r3, [pc, #164]	@ (8000e30 <SystemClock_Config+0xf4>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d94:	bf00      	nop
 8000d96:	4b26      	ldr	r3, [pc, #152]	@ (8000e30 <SystemClock_Config+0xf4>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000da2:	d1f8      	bne.n	8000d96 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da4:	2302      	movs	r3, #2
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dac:	2340      	movs	r3, #64	@ 0x40
 8000dae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db0:	2302      	movs	r3, #2
 8000db2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db4:	2300      	movs	r3, #0
 8000db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000db8:	2304      	movs	r3, #4
 8000dba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 41;
 8000dbc:	2329      	movs	r3, #41	@ 0x29
 8000dbe:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000dc4:	2305      	movs	r3, #5
 8000dc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000dcc:	230c      	movs	r3, #12
 8000dce:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8000dd4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000dd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dde:	4618      	mov	r0, r3
 8000de0:	f001 f920 	bl	8002024 <HAL_RCC_OscConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000dea:	f000 f929 	bl	8001040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dee:	233f      	movs	r3, #63	@ 0x3f
 8000df0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df2:	2303      	movs	r3, #3
 8000df4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dfa:	2308      	movs	r3, #8
 8000dfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dfe:	2340      	movs	r3, #64	@ 0x40
 8000e00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e02:	2340      	movs	r3, #64	@ 0x40
 8000e04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e0c:	2340      	movs	r3, #64	@ 0x40
 8000e0e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2102      	movs	r1, #2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 fd5f 	bl	80028d8 <HAL_RCC_ClockConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000e20:	f000 f90e 	bl	8001040 <Error_Handler>
  }
}
 8000e24:	bf00      	nop
 8000e26:	3770      	adds	r7, #112	@ 0x70
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	58000400 	.word	0x58000400
 8000e30:	58024800 	.word	0x58024800

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	@ 0x28
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	4b49      	ldr	r3, [pc, #292]	@ (8000f70 <MX_GPIO_Init+0x13c>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e50:	4a47      	ldr	r2, [pc, #284]	@ (8000f70 <MX_GPIO_Init+0x13c>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e5a:	4b45      	ldr	r3, [pc, #276]	@ (8000f70 <MX_GPIO_Init+0x13c>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	4b41      	ldr	r3, [pc, #260]	@ (8000f70 <MX_GPIO_Init+0x13c>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6e:	4a40      	ldr	r2, [pc, #256]	@ (8000f70 <MX_GPIO_Init+0x13c>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e78:	4b3d      	ldr	r3, [pc, #244]	@ (8000f70 <MX_GPIO_Init+0x13c>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	4b3a      	ldr	r3, [pc, #232]	@ (8000f70 <MX_GPIO_Init+0x13c>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8c:	4a38      	ldr	r2, [pc, #224]	@ (8000f70 <MX_GPIO_Init+0x13c>)
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e96:	4b36      	ldr	r3, [pc, #216]	@ (8000f70 <MX_GPIO_Init+0x13c>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ea4:	4b32      	ldr	r3, [pc, #200]	@ (8000f70 <MX_GPIO_Init+0x13c>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eaa:	4a31      	ldr	r2, [pc, #196]	@ (8000f70 <MX_GPIO_Init+0x13c>)
 8000eac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb4:	4b2e      	ldr	r3, [pc, #184]	@ (8000f70 <MX_GPIO_Init+0x13c>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ec2:	2332      	movs	r3, #50	@ 0x32
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed2:	230b      	movs	r3, #11
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4825      	ldr	r0, [pc, #148]	@ (8000f74 <MX_GPIO_Init+0x140>)
 8000ede:	f000 fe35 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ee2:	2386      	movs	r3, #134	@ 0x86
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef2:	230b      	movs	r3, #11
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	481e      	ldr	r0, [pc, #120]	@ (8000f78 <MX_GPIO_Init+0x144>)
 8000efe:	f000 fe25 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f14:	230b      	movs	r3, #11
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4817      	ldr	r0, [pc, #92]	@ (8000f7c <MX_GPIO_Init+0x148>)
 8000f20:	f000 fe14 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f24:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f36:	230a      	movs	r3, #10
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480d      	ldr	r0, [pc, #52]	@ (8000f78 <MX_GPIO_Init+0x144>)
 8000f42:	f000 fe03 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f46:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f58:	230b      	movs	r3, #11
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4807      	ldr	r0, [pc, #28]	@ (8000f80 <MX_GPIO_Init+0x14c>)
 8000f64:	f000 fdf2 	bl	8001b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f68:	bf00      	nop
 8000f6a:	3728      	adds	r7, #40	@ 0x28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	58024400 	.word	0x58024400
 8000f74:	58020800 	.word	0x58020800
 8000f78:	58020000 	.word	0x58020000
 8000f7c:	58020400 	.word	0x58020400
 8000f80:	58021800 	.word	0x58021800

08000f84 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	4804      	ldr	r0, [pc, #16]	@ (8000fac <_write+0x28>)
 8000f9c:	f003 fea4 	bl	8004ce8 <HAL_UART_Transmit>
    return len;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	24000234 	.word	0x24000234

08000fb0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int count = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
	SHARED_MEM->flag = 0;
 8000fbc:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Infinite loop */
  for(;;)
  {
	if (SHARED_MEM->flag) {
 8000fc4:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d020      	beq.n	8001010 <StartDefaultTask+0x60>
	  BSP_LED_Toggle(LED_RED);
 8000fce:	2002      	movs	r0, #2
 8000fd0:	f000 fa10 	bl	80013f4 <BSP_LED_Toggle>
	  for (int i = 0; i < 16; ++i)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	e010      	b.n	8000ffc <StartDefaultTask+0x4c>
		printf("Got: %f\n", SHARED_MEM->buffer[i]);
 8000fda:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	edd3 7a00 	vldr	s15, [r3]
 8000fe8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fec:	ec53 2b17 	vmov	r2, r3, d7
 8000ff0:	4812      	ldr	r0, [pc, #72]	@ (800103c <StartDefaultTask+0x8c>)
 8000ff2:	f008 fb3f 	bl	8009674 <iprintf>
	  for (int i = 0; i < 16; ++i)
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	2b0f      	cmp	r3, #15
 8001000:	ddeb      	ble.n	8000fda <StartDefaultTask+0x2a>
	  SHARED_MEM->flag = 0;
 8001002:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001006:	2200      	movs	r2, #0
 8001008:	641a      	str	r2, [r3, #64]	@ 0x40
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800100a:	f3bf 8f4f 	dsb	sy
}
 800100e:	bf00      	nop
	  __DSB();
	}
	if ((count == 333)&&(!(SHARED_MEM->flag)))
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f240 124d 	movw	r2, #333	@ 0x14d
 8001016:	4293      	cmp	r3, r2
 8001018:	d109      	bne.n	800102e <StartDefaultTask+0x7e>
 800101a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800101e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001020:	2b00      	cmp	r3, #0
 8001022:	d104      	bne.n	800102e <StartDefaultTask+0x7e>
	{
		BSP_LED_Toggle(LED_GREEN);
 8001024:	2000      	movs	r0, #0
 8001026:	f000 f9e5 	bl	80013f4 <BSP_LED_Toggle>
		count = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
	}
	count++;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3301      	adds	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
	osDelay(1);
 8001034:	2001      	movs	r0, #1
 8001036:	f004 ff7d 	bl	8005f34 <osDelay>
	if (SHARED_MEM->flag) {
 800103a:	e7c3      	b.n	8000fc4 <StartDefaultTask+0x14>
 800103c:	0800cdc4 	.word	0x0800cdc4

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <Error_Handler+0x8>

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <HAL_MspInit+0x38>)
 8001054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001058:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <HAL_MspInit+0x38>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001062:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <HAL_MspInit+0x38>)
 8001064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	210f      	movs	r1, #15
 8001074:	f06f 0001 	mvn.w	r0, #1
 8001078:	f000 fcb1 	bl	80019de <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	58024400 	.word	0x58024400

08001088 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0b4      	sub	sp, #208	@ 0xd0
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	22c0      	movs	r2, #192	@ 0xc0
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f008 fb62 	bl	8009762 <memset>
  if(huart->Instance==UART4)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a14      	ldr	r2, [pc, #80]	@ (80010f4 <HAL_UART_MspInit+0x6c>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d121      	bne.n	80010ec <HAL_UART_MspInit+0x64>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80010a8:	f04f 0202 	mov.w	r2, #2
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 ff96 	bl	8002ff0 <HAL_RCCEx_PeriphCLKConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_UART_MspInit+0x46>
    {
      Error_Handler();
 80010ca:	f7ff ffb9 	bl	8001040 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80010ce:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <HAL_UART_MspInit+0x70>)
 80010d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010d4:	4a08      	ldr	r2, [pc, #32]	@ (80010f8 <HAL_UART_MspInit+0x70>)
 80010d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80010da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010de:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <HAL_UART_MspInit+0x70>)
 80010e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END UART4_MspInit 1 */

  }

}
 80010ec:	bf00      	nop
 80010ee:	37d0      	adds	r7, #208	@ 0xd0
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40004c00 	.word	0x40004c00
 80010f8:	58024400 	.word	0x58024400

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <NMI_Handler+0x4>

08001104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <MemManage_Handler+0x4>

08001114 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <UsageFault_Handler+0x4>

08001124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001136:	f000 fb4b 	bl	80017d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800113a:	f006 ff63 	bl	8008004 <xTaskGetSchedulerState>
 800113e:	4603      	mov	r3, r0
 8001140:	2b01      	cmp	r3, #1
 8001142:	d001      	beq.n	8001148 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001144:	f005 fba8 	bl	8006898 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001150:	2000      	movs	r0, #0
 8001152:	f000 f9eb 	bl	800152c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}

0800115a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  return 1;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <_kill>:

int _kill(int pid, int sig)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001174:	f008 fb48 	bl	8009808 <__errno>
 8001178:	4603      	mov	r3, r0
 800117a:	2216      	movs	r2, #22
 800117c:	601a      	str	r2, [r3, #0]
  return -1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <_exit>:

void _exit (int status)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001192:	f04f 31ff 	mov.w	r1, #4294967295
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ffe7 	bl	800116a <_kill>
  while (1) {}    /* Make sure we hang here */
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <_exit+0x12>

080011a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	e00a      	b.n	80011c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011b2:	f3af 8000 	nop.w
 80011b6:	4601      	mov	r1, r0
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	60ba      	str	r2, [r7, #8]
 80011be:	b2ca      	uxtb	r2, r1
 80011c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3301      	adds	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dbf0      	blt.n	80011b2 <_read+0x12>
  }

  return len;
 80011d0:	687b      	ldr	r3, [r7, #4]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <_close>:
  }
  return len;
}

int _close(int file)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001202:	605a      	str	r2, [r3, #4]
  return 0;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <_isatty>:

int _isatty(int file)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800124c:	4a14      	ldr	r2, [pc, #80]	@ (80012a0 <_sbrk+0x5c>)
 800124e:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <_sbrk+0x60>)
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001258:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <_sbrk+0x64>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <_sbrk+0x64>)
 8001262:	4a12      	ldr	r2, [pc, #72]	@ (80012ac <_sbrk+0x68>)
 8001264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001266:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	429a      	cmp	r2, r3
 8001272:	d207      	bcs.n	8001284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001274:	f008 fac8 	bl	8009808 <__errno>
 8001278:	4603      	mov	r3, r0
 800127a:	220c      	movs	r2, #12
 800127c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	e009      	b.n	8001298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001284:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800128a:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <_sbrk+0x64>)
 8001294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001296:	68fb      	ldr	r3, [r7, #12]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	24080000 	.word	0x24080000
 80012a4:	00000400 	.word	0x00000400
 80012a8:	24000228 	.word	0x24000228
 80012ac:	24004d68 	.word	0x24004d68

080012b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012b0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80012ec <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80012b4:	f7ff fca4 	bl	8000c00 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012b8:	f7ff fbf4 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012bc:	480c      	ldr	r0, [pc, #48]	@ (80012f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012be:	490d      	ldr	r1, [pc, #52]	@ (80012f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c0:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001300 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e2:	f008 fa97 	bl	8009814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e6:	f7ff fca3 	bl	8000c30 <main>
  bx  lr
 80012ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012f4:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 80012f8:	0800d27c 	.word	0x0800d27c
  ldr r2, =_sbss
 80012fc:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8001300:	24004d68 	.word	0x24004d68

08001304 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <ADC3_IRQHandler>
	...

08001308 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	@ 0x30
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d009      	beq.n	8001330 <BSP_LED_Init+0x28>
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d006      	beq.n	8001330 <BSP_LED_Init+0x28>
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d003      	beq.n	8001330 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001328:	f06f 0301 	mvn.w	r3, #1
 800132c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800132e:	e055      	b.n	80013dc <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10f      	bne.n	8001356 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001336:	4b2c      	ldr	r3, [pc, #176]	@ (80013e8 <BSP_LED_Init+0xe0>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133c:	4a2a      	ldr	r2, [pc, #168]	@ (80013e8 <BSP_LED_Init+0xe0>)
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001346:	4b28      	ldr	r3, [pc, #160]	@ (80013e8 <BSP_LED_Init+0xe0>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	e021      	b.n	800139a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d10f      	bne.n	800137c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 800135c:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <BSP_LED_Init+0xe0>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001362:	4a21      	ldr	r2, [pc, #132]	@ (80013e8 <BSP_LED_Init+0xe0>)
 8001364:	f043 0310 	orr.w	r3, r3, #16
 8001368:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800136c:	4b1e      	ldr	r3, [pc, #120]	@ (80013e8 <BSP_LED_Init+0xe0>)
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	e00e      	b.n	800139a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800137c:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <BSP_LED_Init+0xe0>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001382:	4a19      	ldr	r2, [pc, #100]	@ (80013e8 <BSP_LED_Init+0xe0>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800138c:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <BSP_LED_Init+0xe0>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	4a13      	ldr	r2, [pc, #76]	@ (80013ec <BSP_LED_Init+0xe4>)
 800139e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013a2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	4a0f      	ldr	r2, [pc, #60]	@ (80013f0 <BSP_LED_Init+0xe8>)
 80013b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b8:	f107 0218 	add.w	r2, r7, #24
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fbc4 	bl	8001b4c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <BSP_LED_Init+0xe8>)
 80013c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4a07      	ldr	r2, [pc, #28]	@ (80013ec <BSP_LED_Init+0xe4>)
 80013d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013d4:	2200      	movs	r2, #0
 80013d6:	4619      	mov	r1, r3
 80013d8:	f000 fd68 	bl	8001eac <HAL_GPIO_WritePin>
  }

  return ret;
 80013dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3730      	adds	r7, #48	@ 0x30
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	58024400 	.word	0x58024400
 80013ec:	0800ce1c 	.word	0x0800ce1c
 80013f0:	2400000c 	.word	0x2400000c

080013f4 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d009      	beq.n	800141c <BSP_LED_Toggle+0x28>
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d006      	beq.n	800141c <BSP_LED_Toggle+0x28>
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d003      	beq.n	800141c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001414:	f06f 0301 	mvn.w	r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	e00b      	b.n	8001434 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	4a08      	ldr	r2, [pc, #32]	@ (8001440 <BSP_LED_Toggle+0x4c>)
 8001420:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	4907      	ldr	r1, [pc, #28]	@ (8001444 <BSP_LED_Toggle+0x50>)
 8001428:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800142c:	4619      	mov	r1, r3
 800142e:	4610      	mov	r0, r2
 8001430:	f000 fd55 	bl	8001ede <HAL_GPIO_TogglePin>
  }

  return ret;
 8001434:	68fb      	ldr	r3, [r7, #12]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2400000c 	.word	0x2400000c
 8001444:	0800ce1c 	.word	0x0800ce1c

08001448 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	460a      	mov	r2, r1
 8001452:	71fb      	strb	r3, [r7, #7]
 8001454:	4613      	mov	r3, r2
 8001456:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001458:	4b2e      	ldr	r3, [pc, #184]	@ (8001514 <BSP_PB_Init+0xcc>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145e:	4a2d      	ldr	r2, [pc, #180]	@ (8001514 <BSP_PB_Init+0xcc>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001468:	4b2a      	ldr	r3, [pc, #168]	@ (8001514 <BSP_PB_Init+0xcc>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001476:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800147a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800147c:	2302      	movs	r3, #2
 800147e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001484:	79bb      	ldrb	r3, [r7, #6]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10c      	bne.n	80014a4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	4a21      	ldr	r2, [pc, #132]	@ (8001518 <BSP_PB_Init+0xd0>)
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	f107 020c 	add.w	r2, r7, #12
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f000 fb55 	bl	8001b4c <HAL_GPIO_Init>
 80014a2:	e031      	b.n	8001508 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80014a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014a8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001518 <BSP_PB_Init+0xd0>)
 80014ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b2:	f107 020c 	add.w	r2, r7, #12
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fb47 	bl	8001b4c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4a16      	ldr	r2, [pc, #88]	@ (800151c <BSP_PB_Init+0xd4>)
 80014c4:	441a      	add	r2, r3
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	4915      	ldr	r1, [pc, #84]	@ (8001520 <BSP_PB_Init+0xd8>)
 80014ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014ce:	4619      	mov	r1, r3
 80014d0:	4610      	mov	r0, r2
 80014d2:	f000 faea 	bl	8001aaa <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4a10      	ldr	r2, [pc, #64]	@ (800151c <BSP_PB_Init+0xd4>)
 80014dc:	1898      	adds	r0, r3, r2
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	4a10      	ldr	r2, [pc, #64]	@ (8001524 <BSP_PB_Init+0xdc>)
 80014e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e6:	461a      	mov	r2, r3
 80014e8:	2100      	movs	r1, #0
 80014ea:	f000 fabf 	bl	8001a6c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80014ee:	2028      	movs	r0, #40	@ 0x28
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <BSP_PB_Init+0xe0>)
 80014f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f8:	2200      	movs	r2, #0
 80014fa:	4619      	mov	r1, r3
 80014fc:	f000 fa6f 	bl	80019de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001500:	2328      	movs	r3, #40	@ 0x28
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fa85 	bl	8001a12 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	58024400 	.word	0x58024400
 8001518:	24000018 	.word	0x24000018
 800151c:	2400022c 	.word	0x2400022c
 8001520:	0800ce24 	.word	0x0800ce24
 8001524:	2400001c 	.word	0x2400001c
 8001528:	24000020 	.word	0x24000020

0800152c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4a04      	ldr	r2, [pc, #16]	@ (800154c <BSP_PB_IRQHandler+0x20>)
 800153c:	4413      	add	r3, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fac8 	bl	8001ad4 <HAL_EXTI_IRQHandler>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2400022c 	.word	0x2400022c

08001550 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800157e:	f06f 0301 	mvn.w	r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	e018      	b.n	80015b8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2294      	movs	r2, #148	@ 0x94
 800158a:	fb02 f303 	mul.w	r3, r2, r3
 800158e:	4a0d      	ldr	r2, [pc, #52]	@ (80015c4 <BSP_COM_Init+0x5c>)
 8001590:	4413      	add	r3, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f852 	bl	800163c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	2294      	movs	r2, #148	@ 0x94
 800159c:	fb02 f303 	mul.w	r3, r2, r3
 80015a0:	4a08      	ldr	r2, [pc, #32]	@ (80015c4 <BSP_COM_Init+0x5c>)
 80015a2:	4413      	add	r3, r2
 80015a4:	6839      	ldr	r1, [r7, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f80e 	bl	80015c8 <MX_USART3_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80015b2:	f06f 0303 	mvn.w	r3, #3
 80015b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80015b8:	68fb      	ldr	r3, [r7, #12]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	24000234 	.word	0x24000234

080015c8 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <MX_USART3_Init+0x60>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	220c      	movs	r2, #12
 80015e6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	895b      	ldrh	r3, [r3, #10]
 80015ec:	461a      	mov	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	891b      	ldrh	r3, [r3, #8]
 80015fe:	461a      	mov	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	899b      	ldrh	r3, [r3, #12]
 8001608:	461a      	mov	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001614:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f003 fb16 	bl	8004c48 <HAL_UART_Init>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	24000008 	.word	0x24000008

0800162c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff ff8d 	bl	8001550 <BSP_PB_Callback>
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001644:	4b27      	ldr	r3, [pc, #156]	@ (80016e4 <COM1_MspInit+0xa8>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164a:	4a26      	ldr	r2, [pc, #152]	@ (80016e4 <COM1_MspInit+0xa8>)
 800164c:	f043 0308 	orr.w	r3, r3, #8
 8001650:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001654:	4b23      	ldr	r3, [pc, #140]	@ (80016e4 <COM1_MspInit+0xa8>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001662:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <COM1_MspInit+0xa8>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001668:	4a1e      	ldr	r2, [pc, #120]	@ (80016e4 <COM1_MspInit+0xa8>)
 800166a:	f043 0308 	orr.w	r3, r3, #8
 800166e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001672:	4b1c      	ldr	r3, [pc, #112]	@ (80016e4 <COM1_MspInit+0xa8>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001680:	4b18      	ldr	r3, [pc, #96]	@ (80016e4 <COM1_MspInit+0xa8>)
 8001682:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001686:	4a17      	ldr	r2, [pc, #92]	@ (80016e4 <COM1_MspInit+0xa8>)
 8001688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800168c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001690:	4b14      	ldr	r3, [pc, #80]	@ (80016e4 <COM1_MspInit+0xa8>)
 8001692:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800169e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016a2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a8:	2302      	movs	r3, #2
 80016aa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80016b0:	2307      	movs	r3, #7
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	480b      	ldr	r0, [pc, #44]	@ (80016e8 <COM1_MspInit+0xac>)
 80016bc:	f000 fa46 	bl	8001b4c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80016c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016c4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80016ca:	2307      	movs	r3, #7
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4804      	ldr	r0, [pc, #16]	@ (80016e8 <COM1_MspInit+0xac>)
 80016d6:	f000 fa39 	bl	8001b4c <HAL_GPIO_Init>
}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	@ 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	58024400 	.word	0x58024400
 80016e8:	58020c00 	.word	0x58020c00

080016ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f2:	2003      	movs	r0, #3
 80016f4:	f000 f968 	bl	80019c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016f8:	f001 faa4 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 80016fc:	4602      	mov	r2, r0
 80016fe:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <HAL_Init+0x68>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	0a1b      	lsrs	r3, r3, #8
 8001704:	f003 030f 	and.w	r3, r3, #15
 8001708:	4913      	ldr	r1, [pc, #76]	@ (8001758 <HAL_Init+0x6c>)
 800170a:	5ccb      	ldrb	r3, [r1, r3]
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
 8001714:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001716:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <HAL_Init+0x68>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	4a0e      	ldr	r2, [pc, #56]	@ (8001758 <HAL_Init+0x6c>)
 8001720:	5cd3      	ldrb	r3, [r2, r3]
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
 800172c:	4a0b      	ldr	r2, [pc, #44]	@ (800175c <HAL_Init+0x70>)
 800172e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001730:	4a0b      	ldr	r2, [pc, #44]	@ (8001760 <HAL_Init+0x74>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001736:	200f      	movs	r0, #15
 8001738:	f000 f814 	bl	8001764 <HAL_InitTick>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e002      	b.n	800174c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001746:	f7ff fc81 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	58024400 	.word	0x58024400
 8001758:	0800cde8 	.word	0x0800cde8
 800175c:	24000004 	.word	0x24000004
 8001760:	24000000 	.word	0x24000000

08001764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800176c:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <HAL_InitTick+0x60>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e021      	b.n	80017bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001778:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <HAL_InitTick+0x64>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <HAL_InitTick+0x60>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001786:	fbb3 f3f1 	udiv	r3, r3, r1
 800178a:	fbb2 f3f3 	udiv	r3, r2, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f94d 	bl	8001a2e <HAL_SYSTICK_Config>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e00e      	b.n	80017bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b0f      	cmp	r3, #15
 80017a2:	d80a      	bhi.n	80017ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a4:	2200      	movs	r2, #0
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f000 f917 	bl	80019de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b0:	4a06      	ldr	r2, [pc, #24]	@ (80017cc <HAL_InitTick+0x68>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	e000      	b.n	80017bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	24000028 	.word	0x24000028
 80017c8:	24000000 	.word	0x24000000
 80017cc:	24000024 	.word	0x24000024

080017d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <HAL_IncTick+0x20>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_IncTick+0x24>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a04      	ldr	r2, [pc, #16]	@ (80017f4 <HAL_IncTick+0x24>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	24000028 	.word	0x24000028
 80017f4:	240002c8 	.word	0x240002c8

080017f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return uwTick;
 80017fc:	4b03      	ldr	r3, [pc, #12]	@ (800180c <HAL_GetTick+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	240002c8 	.word	0x240002c8

08001810 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001814:	4b03      	ldr	r3, [pc, #12]	@ (8001824 <HAL_GetREVID+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	0c1b      	lsrs	r3, r3, #16
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	5c001000 	.word	0x5c001000

08001828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001838:	4b0b      	ldr	r3, [pc, #44]	@ (8001868 <__NVIC_SetPriorityGrouping+0x40>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001844:	4013      	ands	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <__NVIC_SetPriorityGrouping+0x44>)
 8001852:	4313      	orrs	r3, r2
 8001854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001856:	4a04      	ldr	r2, [pc, #16]	@ (8001868 <__NVIC_SetPriorityGrouping+0x40>)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	60d3      	str	r3, [r2, #12]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00
 800186c:	05fa0000 	.word	0x05fa0000

08001870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001874:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <__NVIC_GetPriorityGrouping+0x18>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	f003 0307 	and.w	r3, r3, #7
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189a:	2b00      	cmp	r3, #0
 800189c:	db0b      	blt.n	80018b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	f003 021f 	and.w	r2, r3, #31
 80018a4:	4907      	ldr	r1, [pc, #28]	@ (80018c4 <__NVIC_EnableIRQ+0x38>)
 80018a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	2001      	movs	r0, #1
 80018ae:	fa00 f202 	lsl.w	r2, r0, r2
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000e100 	.word	0xe000e100

080018c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db0a      	blt.n	80018f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	490c      	ldr	r1, [pc, #48]	@ (8001914 <__NVIC_SetPriority+0x4c>)
 80018e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e6:	0112      	lsls	r2, r2, #4
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	440b      	add	r3, r1
 80018ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f0:	e00a      	b.n	8001908 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4908      	ldr	r1, [pc, #32]	@ (8001918 <__NVIC_SetPriority+0x50>)
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	3b04      	subs	r3, #4
 8001900:	0112      	lsls	r2, r2, #4
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	440b      	add	r3, r1
 8001906:	761a      	strb	r2, [r3, #24]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000e100 	.word	0xe000e100
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	@ 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f1c3 0307 	rsb	r3, r3, #7
 8001936:	2b04      	cmp	r3, #4
 8001938:	bf28      	it	cs
 800193a:	2304      	movcs	r3, #4
 800193c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3304      	adds	r3, #4
 8001942:	2b06      	cmp	r3, #6
 8001944:	d902      	bls.n	800194c <NVIC_EncodePriority+0x30>
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3b03      	subs	r3, #3
 800194a:	e000      	b.n	800194e <NVIC_EncodePriority+0x32>
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	f04f 32ff 	mov.w	r2, #4294967295
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	401a      	ands	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001964:	f04f 31ff 	mov.w	r1, #4294967295
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	43d9      	mvns	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	4313      	orrs	r3, r2
         );
}
 8001976:	4618      	mov	r0, r3
 8001978:	3724      	adds	r7, #36	@ 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001994:	d301      	bcc.n	800199a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001996:	2301      	movs	r3, #1
 8001998:	e00f      	b.n	80019ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199a:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <SysTick_Config+0x40>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a2:	210f      	movs	r1, #15
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f7ff ff8e 	bl	80018c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ac:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <SysTick_Config+0x40>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b2:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <SysTick_Config+0x40>)
 80019b4:	2207      	movs	r2, #7
 80019b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	e000e010 	.word	0xe000e010

080019c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff29 	bl	8001828 <__NVIC_SetPriorityGrouping>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019ec:	f7ff ff40 	bl	8001870 <__NVIC_GetPriorityGrouping>
 80019f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff ff90 	bl	800191c <NVIC_EncodePriority>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff5f 	bl	80018c8 <__NVIC_SetPriority>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff33 	bl	800188c <__NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ffa4 	bl	8001984 <SysTick_Config>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_GetCurrentCPUID+0x20>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a54:	2b70      	cmp	r3, #112	@ 0x70
 8001a56:	d101      	bne.n	8001a5c <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e000      	b.n	8001a5e <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8001a5c:	2301      	movs	r3, #1
  }
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	460b      	mov	r3, r1
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e00a      	b.n	8001a9e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001a88:	7afb      	ldrb	r3, [r7, #11]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d103      	bne.n	8001a96 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	605a      	str	r2, [r3, #4]
      break;
 8001a94:	e002      	b.n	8001a9c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	75fb      	strb	r3, [r7, #23]
      break;
 8001a9a:	bf00      	nop
  }

  return status;
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	371c      	adds	r7, #28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e003      	b.n	8001ac6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
  }
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	0c1b      	lsrs	r3, r3, #16
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	2201      	movs	r2, #1
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001af8:	f7ff ffa6 	bl	8001a48 <HAL_GetCurrentCPUID>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d105      	bne.n	8001b0e <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	011a      	lsls	r2, r3, #4
 8001b06:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <HAL_EXTI_IRQHandler+0x70>)
 8001b08:	4413      	add	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	e004      	b.n	8001b18 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	011a      	lsls	r2, r3, #4
 8001b12:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <HAL_EXTI_IRQHandler+0x74>)
 8001b14:	4413      	add	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d009      	beq.n	8001b3c <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4798      	blx	r3
    }
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	58000088 	.word	0x58000088
 8001b48:	580000c8 	.word	0x580000c8

08001b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	@ 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b5a:	4b89      	ldr	r3, [pc, #548]	@ (8001d80 <HAL_GPIO_Init+0x234>)
 8001b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b5e:	e194      	b.n	8001e8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2101      	movs	r1, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8186 	beq.w	8001e84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d005      	beq.n	8001b90 <HAL_GPIO_Init+0x44>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d130      	bne.n	8001bf2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	091b      	lsrs	r3, r3, #4
 8001bdc:	f003 0201 	and.w	r2, r3, #1
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d017      	beq.n	8001c2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d123      	bne.n	8001c82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	08da      	lsrs	r2, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3208      	adds	r2, #8
 8001c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	220f      	movs	r2, #15
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	08da      	lsrs	r2, r3, #3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3208      	adds	r2, #8
 8001c7c:	69b9      	ldr	r1, [r7, #24]
 8001c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0203 	and.w	r2, r3, #3
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 80e0 	beq.w	8001e84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d84 <HAL_GPIO_Init+0x238>)
 8001cc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cca:	4a2e      	ldr	r2, [pc, #184]	@ (8001d84 <HAL_GPIO_Init+0x238>)
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d84 <HAL_GPIO_Init+0x238>)
 8001cd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce2:	4a29      	ldr	r2, [pc, #164]	@ (8001d88 <HAL_GPIO_Init+0x23c>)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a20      	ldr	r2, [pc, #128]	@ (8001d8c <HAL_GPIO_Init+0x240>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d052      	beq.n	8001db4 <HAL_GPIO_Init+0x268>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a1f      	ldr	r2, [pc, #124]	@ (8001d90 <HAL_GPIO_Init+0x244>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d031      	beq.n	8001d7a <HAL_GPIO_Init+0x22e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a1e      	ldr	r2, [pc, #120]	@ (8001d94 <HAL_GPIO_Init+0x248>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d02b      	beq.n	8001d76 <HAL_GPIO_Init+0x22a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a1d      	ldr	r2, [pc, #116]	@ (8001d98 <HAL_GPIO_Init+0x24c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d025      	beq.n	8001d72 <HAL_GPIO_Init+0x226>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a1c      	ldr	r2, [pc, #112]	@ (8001d9c <HAL_GPIO_Init+0x250>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d01f      	beq.n	8001d6e <HAL_GPIO_Init+0x222>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a1b      	ldr	r2, [pc, #108]	@ (8001da0 <HAL_GPIO_Init+0x254>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d019      	beq.n	8001d6a <HAL_GPIO_Init+0x21e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a1a      	ldr	r2, [pc, #104]	@ (8001da4 <HAL_GPIO_Init+0x258>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d013      	beq.n	8001d66 <HAL_GPIO_Init+0x21a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a19      	ldr	r2, [pc, #100]	@ (8001da8 <HAL_GPIO_Init+0x25c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00d      	beq.n	8001d62 <HAL_GPIO_Init+0x216>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a18      	ldr	r2, [pc, #96]	@ (8001dac <HAL_GPIO_Init+0x260>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d007      	beq.n	8001d5e <HAL_GPIO_Init+0x212>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a17      	ldr	r2, [pc, #92]	@ (8001db0 <HAL_GPIO_Init+0x264>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d101      	bne.n	8001d5a <HAL_GPIO_Init+0x20e>
 8001d56:	2309      	movs	r3, #9
 8001d58:	e02d      	b.n	8001db6 <HAL_GPIO_Init+0x26a>
 8001d5a:	230a      	movs	r3, #10
 8001d5c:	e02b      	b.n	8001db6 <HAL_GPIO_Init+0x26a>
 8001d5e:	2308      	movs	r3, #8
 8001d60:	e029      	b.n	8001db6 <HAL_GPIO_Init+0x26a>
 8001d62:	2307      	movs	r3, #7
 8001d64:	e027      	b.n	8001db6 <HAL_GPIO_Init+0x26a>
 8001d66:	2306      	movs	r3, #6
 8001d68:	e025      	b.n	8001db6 <HAL_GPIO_Init+0x26a>
 8001d6a:	2305      	movs	r3, #5
 8001d6c:	e023      	b.n	8001db6 <HAL_GPIO_Init+0x26a>
 8001d6e:	2304      	movs	r3, #4
 8001d70:	e021      	b.n	8001db6 <HAL_GPIO_Init+0x26a>
 8001d72:	2303      	movs	r3, #3
 8001d74:	e01f      	b.n	8001db6 <HAL_GPIO_Init+0x26a>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e01d      	b.n	8001db6 <HAL_GPIO_Init+0x26a>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e01b      	b.n	8001db6 <HAL_GPIO_Init+0x26a>
 8001d7e:	bf00      	nop
 8001d80:	58000080 	.word	0x58000080
 8001d84:	58024400 	.word	0x58024400
 8001d88:	58000400 	.word	0x58000400
 8001d8c:	58020000 	.word	0x58020000
 8001d90:	58020400 	.word	0x58020400
 8001d94:	58020800 	.word	0x58020800
 8001d98:	58020c00 	.word	0x58020c00
 8001d9c:	58021000 	.word	0x58021000
 8001da0:	58021400 	.word	0x58021400
 8001da4:	58021800 	.word	0x58021800
 8001da8:	58021c00 	.word	0x58021c00
 8001dac:	58022000 	.word	0x58022000
 8001db0:	58022400 	.word	0x58022400
 8001db4:	2300      	movs	r3, #0
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	f002 0203 	and.w	r2, r2, #3
 8001dbc:	0092      	lsls	r2, r2, #2
 8001dbe:	4093      	lsls	r3, r2
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dc6:	4938      	ldr	r1, [pc, #224]	@ (8001ea8 <HAL_GPIO_Init+0x35c>)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001dfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	3301      	adds	r3, #1
 8001e88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f47f ae63 	bne.w	8001b60 <HAL_GPIO_Init+0x14>
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	bf00      	nop
 8001e9e:	3724      	adds	r7, #36	@ 0x24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	58000400 	.word	0x58000400

08001eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001ec8:	e003      	b.n	8001ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	041a      	lsls	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	619a      	str	r2, [r3, #24]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ef0:	887a      	ldrh	r2, [r7, #2]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	041a      	lsls	r2, r3, #16
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43d9      	mvns	r1, r3
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	400b      	ands	r3, r1
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	619a      	str	r2, [r3, #24]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001f1c:	4a08      	ldr	r2, [pc, #32]	@ (8001f40 <HAL_HSEM_FastTake+0x2c>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3320      	adds	r3, #32
 8001f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f26:	4a07      	ldr	r2, [pc, #28]	@ (8001f44 <HAL_HSEM_FastTake+0x30>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d101      	bne.n	8001f30 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e000      	b.n	8001f32 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	58026400 	.word	0x58026400
 8001f44:	80000300 	.word	0x80000300

08001f48 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001f52:	4906      	ldr	r1, [pc, #24]	@ (8001f6c <HAL_HSEM_Release+0x24>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	58026400 	.word	0x58026400

08001f70 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001f78:	4b29      	ldr	r3, [pc, #164]	@ (8002020 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	2b06      	cmp	r3, #6
 8001f82:	d00a      	beq.n	8001f9a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f84:	4b26      	ldr	r3, [pc, #152]	@ (8002020 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d001      	beq.n	8001f96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e040      	b.n	8002018 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e03e      	b.n	8002018 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f9a:	4b21      	ldr	r3, [pc, #132]	@ (8002020 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001fa2:	491f      	ldr	r1, [pc, #124]	@ (8002020 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001faa:	f7ff fc25 	bl	80017f8 <HAL_GetTick>
 8001fae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fb0:	e009      	b.n	8001fc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001fb2:	f7ff fc21 	bl	80017f8 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fc0:	d901      	bls.n	8001fc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e028      	b.n	8002018 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fc6:	4b16      	ldr	r3, [pc, #88]	@ (8002020 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fd2:	d1ee      	bne.n	8001fb2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b1e      	cmp	r3, #30
 8001fd8:	d008      	beq.n	8001fec <HAL_PWREx_ConfigSupply+0x7c>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8001fde:	d005      	beq.n	8001fec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b1d      	cmp	r3, #29
 8001fe4:	d002      	beq.n	8001fec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b2d      	cmp	r3, #45	@ 0x2d
 8001fea:	d114      	bne.n	8002016 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001fec:	f7ff fc04 	bl	80017f8 <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ff2:	e009      	b.n	8002008 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ff4:	f7ff fc00 	bl	80017f8 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002002:	d901      	bls.n	8002008 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e007      	b.n	8002018 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <HAL_PWREx_ConfigSupply+0xb0>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002014:	d1ee      	bne.n	8001ff4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	58024800 	.word	0x58024800

08002024 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08c      	sub	sp, #48	@ 0x30
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	f000 bc48 	b.w	80028c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 8088 	beq.w	8002156 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002046:	4b99      	ldr	r3, [pc, #612]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002050:	4b96      	ldr	r3, [pc, #600]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002054:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002058:	2b10      	cmp	r3, #16
 800205a:	d007      	beq.n	800206c <HAL_RCC_OscConfig+0x48>
 800205c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800205e:	2b18      	cmp	r3, #24
 8002060:	d111      	bne.n	8002086 <HAL_RCC_OscConfig+0x62>
 8002062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d10c      	bne.n	8002086 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	4b8f      	ldr	r3, [pc, #572]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d06d      	beq.n	8002154 <HAL_RCC_OscConfig+0x130>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d169      	bne.n	8002154 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	f000 bc21 	b.w	80028c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x7a>
 8002090:	4b86      	ldr	r3, [pc, #536]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a85      	ldr	r2, [pc, #532]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	e02e      	b.n	80020fc <HAL_RCC_OscConfig+0xd8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x9c>
 80020a6:	4b81      	ldr	r3, [pc, #516]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a80      	ldr	r2, [pc, #512]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b7e      	ldr	r3, [pc, #504]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a7d      	ldr	r2, [pc, #500]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e01d      	b.n	80020fc <HAL_RCC_OscConfig+0xd8>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0xc0>
 80020ca:	4b78      	ldr	r3, [pc, #480]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a77      	ldr	r2, [pc, #476]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b75      	ldr	r3, [pc, #468]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a74      	ldr	r2, [pc, #464]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_OscConfig+0xd8>
 80020e4:	4b71      	ldr	r3, [pc, #452]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a70      	ldr	r2, [pc, #448]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b6e      	ldr	r3, [pc, #440]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a6d      	ldr	r2, [pc, #436]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d013      	beq.n	800212c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff fb78 	bl	80017f8 <HAL_GetTick>
 8002108:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800210c:	f7ff fb74 	bl	80017f8 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	@ 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e3d4      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800211e:	4b63      	ldr	r3, [pc, #396]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0xe8>
 800212a:	e014      	b.n	8002156 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7ff fb64 	bl	80017f8 <HAL_GetTick>
 8002130:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7ff fb60 	bl	80017f8 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	@ 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e3c0      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002146:	4b59      	ldr	r3, [pc, #356]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x110>
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80ca 	beq.w	80022f8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002164:	4b51      	ldr	r3, [pc, #324]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800216c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800216e:	4b4f      	ldr	r3, [pc, #316]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002172:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d007      	beq.n	800218a <HAL_RCC_OscConfig+0x166>
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	2b18      	cmp	r3, #24
 800217e:	d156      	bne.n	800222e <HAL_RCC_OscConfig+0x20a>
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d151      	bne.n	800222e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800218a:	4b48      	ldr	r3, [pc, #288]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_RCC_OscConfig+0x17e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e392      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021a2:	4b42      	ldr	r3, [pc, #264]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 0219 	bic.w	r2, r3, #25
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	493f      	ldr	r1, [pc, #252]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff fb20 	bl	80017f8 <HAL_GetTick>
 80021b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021bc:	f7ff fb1c 	bl	80017f8 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e37c      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021ce:	4b37      	ldr	r3, [pc, #220]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021da:	f7ff fb19 	bl	8001810 <HAL_GetREVID>
 80021de:	4603      	mov	r3, r0
 80021e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d817      	bhi.n	8002218 <HAL_RCC_OscConfig+0x1f4>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2b40      	cmp	r3, #64	@ 0x40
 80021ee:	d108      	bne.n	8002202 <HAL_RCC_OscConfig+0x1de>
 80021f0:	4b2e      	ldr	r3, [pc, #184]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80021f8:	4a2c      	ldr	r2, [pc, #176]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80021fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021fe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002200:	e07a      	b.n	80022f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002202:	4b2a      	ldr	r3, [pc, #168]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	031b      	lsls	r3, r3, #12
 8002210:	4926      	ldr	r1, [pc, #152]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002216:	e06f      	b.n	80022f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002218:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	061b      	lsls	r3, r3, #24
 8002226:	4921      	ldr	r1, [pc, #132]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800222c:	e064      	b.n	80022f8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d047      	beq.n	80022c6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002236:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 0219 	bic.w	r2, r3, #25
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	491a      	ldr	r1, [pc, #104]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7ff fad6 	bl	80017f8 <HAL_GetTick>
 800224c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002250:	f7ff fad2 	bl	80017f8 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e332      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002262:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226e:	f7ff facf 	bl	8001810 <HAL_GetREVID>
 8002272:	4603      	mov	r3, r0
 8002274:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002278:	4293      	cmp	r3, r2
 800227a:	d819      	bhi.n	80022b0 <HAL_RCC_OscConfig+0x28c>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	2b40      	cmp	r3, #64	@ 0x40
 8002282:	d108      	bne.n	8002296 <HAL_RCC_OscConfig+0x272>
 8002284:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800228c:	4a07      	ldr	r2, [pc, #28]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 800228e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002292:	6053      	str	r3, [r2, #4]
 8002294:	e030      	b.n	80022f8 <HAL_RCC_OscConfig+0x2d4>
 8002296:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	031b      	lsls	r3, r3, #12
 80022a4:	4901      	ldr	r1, [pc, #4]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
 80022aa:	e025      	b.n	80022f8 <HAL_RCC_OscConfig+0x2d4>
 80022ac:	58024400 	.word	0x58024400
 80022b0:	4b9a      	ldr	r3, [pc, #616]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	061b      	lsls	r3, r3, #24
 80022be:	4997      	ldr	r1, [pc, #604]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
 80022c4:	e018      	b.n	80022f8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c6:	4b95      	ldr	r3, [pc, #596]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a94      	ldr	r2, [pc, #592]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d2:	f7ff fa91 	bl	80017f8 <HAL_GetTick>
 80022d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022da:	f7ff fa8d 	bl	80017f8 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e2ed      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022ec:	4b8b      	ldr	r3, [pc, #556]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f0      	bne.n	80022da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80a9 	beq.w	8002458 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002306:	4b85      	ldr	r3, [pc, #532]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800230e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002310:	4b82      	ldr	r3, [pc, #520]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002314:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	2b08      	cmp	r3, #8
 800231a:	d007      	beq.n	800232c <HAL_RCC_OscConfig+0x308>
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b18      	cmp	r3, #24
 8002320:	d13a      	bne.n	8002398 <HAL_RCC_OscConfig+0x374>
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d135      	bne.n	8002398 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800232c:	4b7b      	ldr	r3, [pc, #492]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_OscConfig+0x320>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	2b80      	cmp	r3, #128	@ 0x80
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e2c1      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002344:	f7ff fa64 	bl	8001810 <HAL_GetREVID>
 8002348:	4603      	mov	r3, r0
 800234a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800234e:	4293      	cmp	r3, r2
 8002350:	d817      	bhi.n	8002382 <HAL_RCC_OscConfig+0x35e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	2b20      	cmp	r3, #32
 8002358:	d108      	bne.n	800236c <HAL_RCC_OscConfig+0x348>
 800235a:	4b70      	ldr	r3, [pc, #448]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002362:	4a6e      	ldr	r2, [pc, #440]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002364:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002368:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800236a:	e075      	b.n	8002458 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800236c:	4b6b      	ldr	r3, [pc, #428]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	069b      	lsls	r3, r3, #26
 800237a:	4968      	ldr	r1, [pc, #416]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002380:	e06a      	b.n	8002458 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002382:	4b66      	ldr	r3, [pc, #408]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	061b      	lsls	r3, r3, #24
 8002390:	4962      	ldr	r1, [pc, #392]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002392:	4313      	orrs	r3, r2
 8002394:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002396:	e05f      	b.n	8002458 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d042      	beq.n	8002426 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80023a0:	4b5e      	ldr	r3, [pc, #376]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a5d      	ldr	r2, [pc, #372]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80023a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7ff fa24 	bl	80017f8 <HAL_GetTick>
 80023b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80023b4:	f7ff fa20 	bl	80017f8 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e280      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023c6:	4b55      	ldr	r3, [pc, #340]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023d2:	f7ff fa1d 	bl	8001810 <HAL_GetREVID>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023dc:	4293      	cmp	r3, r2
 80023de:	d817      	bhi.n	8002410 <HAL_RCC_OscConfig+0x3ec>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d108      	bne.n	80023fa <HAL_RCC_OscConfig+0x3d6>
 80023e8:	4b4c      	ldr	r3, [pc, #304]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80023f0:	4a4a      	ldr	r2, [pc, #296]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80023f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80023f6:	6053      	str	r3, [r2, #4]
 80023f8:	e02e      	b.n	8002458 <HAL_RCC_OscConfig+0x434>
 80023fa:	4b48      	ldr	r3, [pc, #288]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	069b      	lsls	r3, r3, #26
 8002408:	4944      	ldr	r1, [pc, #272]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
 800240e:	e023      	b.n	8002458 <HAL_RCC_OscConfig+0x434>
 8002410:	4b42      	ldr	r3, [pc, #264]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	493f      	ldr	r1, [pc, #252]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002420:	4313      	orrs	r3, r2
 8002422:	60cb      	str	r3, [r1, #12]
 8002424:	e018      	b.n	8002458 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002426:	4b3d      	ldr	r3, [pc, #244]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a3c      	ldr	r2, [pc, #240]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800242c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7ff f9e1 	bl	80017f8 <HAL_GetTick>
 8002436:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800243a:	f7ff f9dd 	bl	80017f8 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e23d      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800244c:	4b33      	ldr	r3, [pc, #204]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d036      	beq.n	80024d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d019      	beq.n	80024a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246c:	4b2b      	ldr	r3, [pc, #172]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800246e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002470:	4a2a      	ldr	r2, [pc, #168]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002478:	f7ff f9be 	bl	80017f8 <HAL_GetTick>
 800247c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002480:	f7ff f9ba 	bl	80017f8 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e21a      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002492:	4b22      	ldr	r3, [pc, #136]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x45c>
 800249e:	e018      	b.n	80024d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a0:	4b1e      	ldr	r3, [pc, #120]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80024a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a4:	4a1d      	ldr	r2, [pc, #116]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7ff f9a4 	bl	80017f8 <HAL_GetTick>
 80024b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b4:	f7ff f9a0 	bl	80017f8 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e200      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80024c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0320 	and.w	r3, r3, #32
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d039      	beq.n	8002552 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d01c      	beq.n	8002520 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024e6:	4b0d      	ldr	r3, [pc, #52]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a0c      	ldr	r2, [pc, #48]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80024ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024f2:	f7ff f981 	bl	80017f8 <HAL_GetTick>
 80024f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024fa:	f7ff f97d 	bl	80017f8 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e1dd      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800250c:	4b03      	ldr	r3, [pc, #12]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x4d6>
 8002518:	e01b      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
 800251a:	bf00      	nop
 800251c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002520:	4b9b      	ldr	r3, [pc, #620]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a9a      	ldr	r2, [pc, #616]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002526:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800252a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800252c:	f7ff f964 	bl	80017f8 <HAL_GetTick>
 8002530:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002534:	f7ff f960 	bl	80017f8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e1c0      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002546:	4b92      	ldr	r3, [pc, #584]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8081 	beq.w	8002662 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002560:	4b8c      	ldr	r3, [pc, #560]	@ (8002794 <HAL_RCC_OscConfig+0x770>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a8b      	ldr	r2, [pc, #556]	@ (8002794 <HAL_RCC_OscConfig+0x770>)
 8002566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800256a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800256c:	f7ff f944 	bl	80017f8 <HAL_GetTick>
 8002570:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002574:	f7ff f940 	bl	80017f8 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	@ 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e1a0      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002586:	4b83      	ldr	r3, [pc, #524]	@ (8002794 <HAL_RCC_OscConfig+0x770>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d106      	bne.n	80025a8 <HAL_RCC_OscConfig+0x584>
 800259a:	4b7d      	ldr	r3, [pc, #500]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259e:	4a7c      	ldr	r2, [pc, #496]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025a6:	e02d      	b.n	8002604 <HAL_RCC_OscConfig+0x5e0>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10c      	bne.n	80025ca <HAL_RCC_OscConfig+0x5a6>
 80025b0:	4b77      	ldr	r3, [pc, #476]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b4:	4a76      	ldr	r2, [pc, #472]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80025bc:	4b74      	ldr	r3, [pc, #464]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c0:	4a73      	ldr	r2, [pc, #460]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025c2:	f023 0304 	bic.w	r3, r3, #4
 80025c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c8:	e01c      	b.n	8002604 <HAL_RCC_OscConfig+0x5e0>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x5c8>
 80025d2:	4b6f      	ldr	r3, [pc, #444]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025d8:	f043 0304 	orr.w	r3, r3, #4
 80025dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80025de:	4b6c      	ldr	r3, [pc, #432]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e2:	4a6b      	ldr	r2, [pc, #428]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ea:	e00b      	b.n	8002604 <HAL_RCC_OscConfig+0x5e0>
 80025ec:	4b68      	ldr	r3, [pc, #416]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f0:	4a67      	ldr	r2, [pc, #412]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f8:	4b65      	ldr	r3, [pc, #404]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fc:	4a64      	ldr	r2, [pc, #400]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025fe:	f023 0304 	bic.w	r3, r3, #4
 8002602:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7ff f8f4 	bl	80017f8 <HAL_GetTick>
 8002610:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002612:	e00a      	b.n	800262a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002614:	f7ff f8f0 	bl	80017f8 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e14e      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800262a:	4b59      	ldr	r3, [pc, #356]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0ee      	beq.n	8002614 <HAL_RCC_OscConfig+0x5f0>
 8002636:	e014      	b.n	8002662 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7ff f8de 	bl	80017f8 <HAL_GetTick>
 800263c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800263e:	e00a      	b.n	8002656 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002640:	f7ff f8da 	bl	80017f8 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e138      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002656:	4b4e      	ldr	r3, [pc, #312]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ee      	bne.n	8002640 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 812d 	beq.w	80028c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800266c:	4b48      	ldr	r3, [pc, #288]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002674:	2b18      	cmp	r3, #24
 8002676:	f000 80bd 	beq.w	80027f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	2b02      	cmp	r3, #2
 8002680:	f040 809e 	bne.w	80027c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002684:	4b42      	ldr	r3, [pc, #264]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a41      	ldr	r2, [pc, #260]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800268a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800268e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7ff f8b2 	bl	80017f8 <HAL_GetTick>
 8002694:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002698:	f7ff f8ae 	bl	80017f8 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e10e      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026aa:	4b39      	ldr	r3, [pc, #228]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b6:	4b36      	ldr	r3, [pc, #216]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80026b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026ba:	4b37      	ldr	r3, [pc, #220]	@ (8002798 <HAL_RCC_OscConfig+0x774>)
 80026bc:	4013      	ands	r3, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	430a      	orrs	r2, r1
 80026ca:	4931      	ldr	r1, [pc, #196]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d4:	3b01      	subs	r3, #1
 80026d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026de:	3b01      	subs	r3, #1
 80026e0:	025b      	lsls	r3, r3, #9
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ea:	3b01      	subs	r3, #1
 80026ec:	041b      	lsls	r3, r3, #16
 80026ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f8:	3b01      	subs	r3, #1
 80026fa:	061b      	lsls	r3, r3, #24
 80026fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002700:	4923      	ldr	r1, [pc, #140]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002702:	4313      	orrs	r3, r2
 8002704:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002706:	4b22      	ldr	r3, [pc, #136]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270a:	4a21      	ldr	r2, [pc, #132]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002712:	4b1f      	ldr	r3, [pc, #124]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002714:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002716:	4b21      	ldr	r3, [pc, #132]	@ (800279c <HAL_RCC_OscConfig+0x778>)
 8002718:	4013      	ands	r3, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800271e:	00d2      	lsls	r2, r2, #3
 8002720:	491b      	ldr	r1, [pc, #108]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002722:	4313      	orrs	r3, r2
 8002724:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002726:	4b1a      	ldr	r3, [pc, #104]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272a:	f023 020c 	bic.w	r2, r3, #12
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	4917      	ldr	r1, [pc, #92]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002734:	4313      	orrs	r3, r2
 8002736:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002738:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800273a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273c:	f023 0202 	bic.w	r2, r3, #2
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002744:	4912      	ldr	r1, [pc, #72]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002746:	4313      	orrs	r3, r2
 8002748:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800274a:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800274c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274e:	4a10      	ldr	r2, [pc, #64]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002754:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002756:	4b0e      	ldr	r3, [pc, #56]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275a:	4a0d      	ldr	r2, [pc, #52]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800275c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002760:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002762:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002766:	4a0a      	ldr	r2, [pc, #40]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002768:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800276c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800276e:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002772:	4a07      	ldr	r2, [pc, #28]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800277a:	4b05      	ldr	r3, [pc, #20]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002780:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7ff f837 	bl	80017f8 <HAL_GetTick>
 800278a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800278c:	e011      	b.n	80027b2 <HAL_RCC_OscConfig+0x78e>
 800278e:	bf00      	nop
 8002790:	58024400 	.word	0x58024400
 8002794:	58024800 	.word	0x58024800
 8002798:	fffffc0c 	.word	0xfffffc0c
 800279c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7ff f82a 	bl	80017f8 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e08a      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027b2:	4b47      	ldr	r3, [pc, #284]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x77c>
 80027be:	e082      	b.n	80028c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c0:	4b43      	ldr	r3, [pc, #268]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a42      	ldr	r2, [pc, #264]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80027c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7ff f814 	bl	80017f8 <HAL_GetTick>
 80027d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7ff f810 	bl	80017f8 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e070      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027e6:	4b3a      	ldr	r3, [pc, #232]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x7b0>
 80027f2:	e068      	b.n	80028c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80027f4:	4b36      	ldr	r3, [pc, #216]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80027f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80027fa:	4b35      	ldr	r3, [pc, #212]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002804:	2b01      	cmp	r3, #1
 8002806:	d031      	beq.n	800286c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f003 0203 	and.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d12a      	bne.n	800286c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d122      	bne.n	800286c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002830:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d11a      	bne.n	800286c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	0a5b      	lsrs	r3, r3, #9
 800283a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002842:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d111      	bne.n	800286c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	0c1b      	lsrs	r3, r3, #16
 800284c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002854:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002856:	429a      	cmp	r2, r3
 8002858:	d108      	bne.n	800286c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	0e1b      	lsrs	r3, r3, #24
 800285e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002866:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e02b      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002870:	4b17      	ldr	r3, [pc, #92]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 8002872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002874:	08db      	lsrs	r3, r3, #3
 8002876:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800287a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	429a      	cmp	r2, r3
 8002884:	d01f      	beq.n	80028c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002886:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	4a11      	ldr	r2, [pc, #68]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002892:	f7fe ffb1 	bl	80017f8 <HAL_GetTick>
 8002896:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002898:	bf00      	nop
 800289a:	f7fe ffad 	bl	80017f8 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d0f9      	beq.n	800289a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028a6:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80028a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028aa:	4b0a      	ldr	r3, [pc, #40]	@ (80028d4 <HAL_RCC_OscConfig+0x8b0>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028b2:	00d2      	lsls	r2, r2, #3
 80028b4:	4906      	ldr	r1, [pc, #24]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80028ba:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80028bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028be:	4a04      	ldr	r2, [pc, #16]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3730      	adds	r7, #48	@ 0x30
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	58024400 	.word	0x58024400
 80028d4:	ffff0007 	.word	0xffff0007

080028d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e19c      	b.n	8002c26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028ec:	4b8a      	ldr	r3, [pc, #552]	@ (8002b18 <HAL_RCC_ClockConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d910      	bls.n	800291c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b87      	ldr	r3, [pc, #540]	@ (8002b18 <HAL_RCC_ClockConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 020f 	bic.w	r2, r3, #15
 8002902:	4985      	ldr	r1, [pc, #532]	@ (8002b18 <HAL_RCC_ClockConfig+0x240>)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b83      	ldr	r3, [pc, #524]	@ (8002b18 <HAL_RCC_ClockConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e184      	b.n	8002c26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d010      	beq.n	800294a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	4b7b      	ldr	r3, [pc, #492]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002934:	429a      	cmp	r2, r3
 8002936:	d908      	bls.n	800294a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002938:	4b78      	ldr	r3, [pc, #480]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	4975      	ldr	r1, [pc, #468]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002946:	4313      	orrs	r3, r2
 8002948:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d010      	beq.n	8002978 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	4b70      	ldr	r3, [pc, #448]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002962:	429a      	cmp	r2, r3
 8002964:	d908      	bls.n	8002978 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002966:	4b6d      	ldr	r3, [pc, #436]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	496a      	ldr	r1, [pc, #424]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002974:	4313      	orrs	r3, r2
 8002976:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	d010      	beq.n	80029a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699a      	ldr	r2, [r3, #24]
 8002988:	4b64      	ldr	r3, [pc, #400]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002990:	429a      	cmp	r2, r3
 8002992:	d908      	bls.n	80029a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002994:	4b61      	ldr	r3, [pc, #388]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	495e      	ldr	r1, [pc, #376]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d010      	beq.n	80029d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	4b59      	ldr	r3, [pc, #356]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029be:	429a      	cmp	r2, r3
 80029c0:	d908      	bls.n	80029d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029c2:	4b56      	ldr	r3, [pc, #344]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	4953      	ldr	r1, [pc, #332]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d010      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	4b4d      	ldr	r3, [pc, #308]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d908      	bls.n	8002a02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f0:	4b4a      	ldr	r3, [pc, #296]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	f023 020f 	bic.w	r2, r3, #15
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4947      	ldr	r1, [pc, #284]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d055      	beq.n	8002aba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a0e:	4b43      	ldr	r3, [pc, #268]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	4940      	ldr	r1, [pc, #256]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d107      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a28:	4b3c      	ldr	r3, [pc, #240]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d121      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0f6      	b.n	8002c26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d107      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a40:	4b36      	ldr	r3, [pc, #216]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d115      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0ea      	b.n	8002c26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d107      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a58:	4b30      	ldr	r3, [pc, #192]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d109      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0de      	b.n	8002c26 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a68:	4b2c      	ldr	r3, [pc, #176]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0d6      	b.n	8002c26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a78:	4b28      	ldr	r3, [pc, #160]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f023 0207 	bic.w	r2, r3, #7
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	4925      	ldr	r1, [pc, #148]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a8a:	f7fe feb5 	bl	80017f8 <HAL_GetTick>
 8002a8e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a92:	f7fe feb1 	bl	80017f8 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e0be      	b.n	8002c26 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d1eb      	bne.n	8002a92 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d010      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	4b14      	ldr	r3, [pc, #80]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d208      	bcs.n	8002ae8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad6:	4b11      	ldr	r3, [pc, #68]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f023 020f 	bic.w	r2, r3, #15
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	490e      	ldr	r1, [pc, #56]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <HAL_RCC_ClockConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d214      	bcs.n	8002b20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af6:	4b08      	ldr	r3, [pc, #32]	@ (8002b18 <HAL_RCC_ClockConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 020f 	bic.w	r2, r3, #15
 8002afe:	4906      	ldr	r1, [pc, #24]	@ (8002b18 <HAL_RCC_ClockConfig+0x240>)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b04      	ldr	r3, [pc, #16]	@ (8002b18 <HAL_RCC_ClockConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e086      	b.n	8002c26 <HAL_RCC_ClockConfig+0x34e>
 8002b18:	52002000 	.word	0x52002000
 8002b1c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d010      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	4b3f      	ldr	r3, [pc, #252]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d208      	bcs.n	8002b4e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b3c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	4939      	ldr	r1, [pc, #228]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d010      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	4b34      	ldr	r3, [pc, #208]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d208      	bcs.n	8002b7c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b6a:	4b31      	ldr	r3, [pc, #196]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	492e      	ldr	r1, [pc, #184]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d010      	beq.n	8002baa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	4b28      	ldr	r3, [pc, #160]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d208      	bcs.n	8002baa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b98:	4b25      	ldr	r3, [pc, #148]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	4922      	ldr	r1, [pc, #136]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d010      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69da      	ldr	r2, [r3, #28]
 8002bba:	4b1d      	ldr	r3, [pc, #116]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d208      	bcs.n	8002bd8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	4917      	ldr	r1, [pc, #92]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bd8:	f000 f834 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b14      	ldr	r3, [pc, #80]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	4912      	ldr	r1, [pc, #72]	@ (8002c34 <HAL_RCC_ClockConfig+0x35c>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8002c34 <HAL_RCC_ClockConfig+0x35c>)
 8002c00:	5cd3      	ldrb	r3, [r2, r3]
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c38 <HAL_RCC_ClockConfig+0x360>)
 8002c0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c10:	4a0a      	ldr	r2, [pc, #40]	@ (8002c3c <HAL_RCC_ClockConfig+0x364>)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c16:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <HAL_RCC_ClockConfig+0x368>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe fda2 	bl	8001764 <HAL_InitTick>
 8002c20:	4603      	mov	r3, r0
 8002c22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	58024400 	.word	0x58024400
 8002c34:	0800cde8 	.word	0x0800cde8
 8002c38:	24000004 	.word	0x24000004
 8002c3c:	24000000 	.word	0x24000000
 8002c40:	24000024 	.word	0x24000024

08002c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	@ 0x24
 8002c48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c4a:	4bb3      	ldr	r3, [pc, #716]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c52:	2b18      	cmp	r3, #24
 8002c54:	f200 8155 	bhi.w	8002f02 <HAL_RCC_GetSysClockFreq+0x2be>
 8002c58:	a201      	add	r2, pc, #4	@ (adr r2, 8002c60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002cc5 	.word	0x08002cc5
 8002c64:	08002f03 	.word	0x08002f03
 8002c68:	08002f03 	.word	0x08002f03
 8002c6c:	08002f03 	.word	0x08002f03
 8002c70:	08002f03 	.word	0x08002f03
 8002c74:	08002f03 	.word	0x08002f03
 8002c78:	08002f03 	.word	0x08002f03
 8002c7c:	08002f03 	.word	0x08002f03
 8002c80:	08002ceb 	.word	0x08002ceb
 8002c84:	08002f03 	.word	0x08002f03
 8002c88:	08002f03 	.word	0x08002f03
 8002c8c:	08002f03 	.word	0x08002f03
 8002c90:	08002f03 	.word	0x08002f03
 8002c94:	08002f03 	.word	0x08002f03
 8002c98:	08002f03 	.word	0x08002f03
 8002c9c:	08002f03 	.word	0x08002f03
 8002ca0:	08002cf1 	.word	0x08002cf1
 8002ca4:	08002f03 	.word	0x08002f03
 8002ca8:	08002f03 	.word	0x08002f03
 8002cac:	08002f03 	.word	0x08002f03
 8002cb0:	08002f03 	.word	0x08002f03
 8002cb4:	08002f03 	.word	0x08002f03
 8002cb8:	08002f03 	.word	0x08002f03
 8002cbc:	08002f03 	.word	0x08002f03
 8002cc0:	08002cf7 	.word	0x08002cf7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cc4:	4b94      	ldr	r3, [pc, #592]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d009      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002cd0:	4b91      	ldr	r3, [pc, #580]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	08db      	lsrs	r3, r3, #3
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	4a90      	ldr	r2, [pc, #576]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002ce2:	e111      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ce4:	4b8d      	ldr	r3, [pc, #564]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ce6:	61bb      	str	r3, [r7, #24]
      break;
 8002ce8:	e10e      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002cea:	4b8d      	ldr	r3, [pc, #564]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002cec:	61bb      	str	r3, [r7, #24]
      break;
 8002cee:	e10b      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002cf0:	4b8c      	ldr	r3, [pc, #560]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002cf2:	61bb      	str	r3, [r7, #24]
      break;
 8002cf4:	e108      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002cf6:	4b88      	ldr	r3, [pc, #544]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002d00:	4b85      	ldr	r3, [pc, #532]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d0c:	4b82      	ldr	r3, [pc, #520]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002d16:	4b80      	ldr	r3, [pc, #512]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d1a:	08db      	lsrs	r3, r3, #3
 8002d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	fb02 f303 	mul.w	r3, r2, r3
 8002d26:	ee07 3a90 	vmov	s15, r3
 8002d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80e1 	beq.w	8002efc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	f000 8083 	beq.w	8002e48 <HAL_RCC_GetSysClockFreq+0x204>
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	f200 80a1 	bhi.w	8002e8c <HAL_RCC_GetSysClockFreq+0x248>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0x114>
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d056      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d56:	e099      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d58:	4b6f      	ldr	r3, [pc, #444]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d02d      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d64:	4b6c      	ldr	r3, [pc, #432]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	08db      	lsrs	r3, r3, #3
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	4a6b      	ldr	r2, [pc, #428]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
 8002d74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	ee07 3a90 	vmov	s15, r3
 8002d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	ee07 3a90 	vmov	s15, r3
 8002d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d8e:	4b62      	ldr	r3, [pc, #392]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002da2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002f28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002dbe:	e087      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	ee07 3a90 	vmov	s15, r3
 8002dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002f2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dd2:	4b51      	ldr	r3, [pc, #324]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dda:	ee07 3a90 	vmov	s15, r3
 8002dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002de2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002de6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002f28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e02:	e065      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	ee07 3a90 	vmov	s15, r3
 8002e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e0e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002f30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e16:	4b40      	ldr	r3, [pc, #256]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e1e:	ee07 3a90 	vmov	s15, r3
 8002e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e26:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e2a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002f28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e46:	e043      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	ee07 3a90 	vmov	s15, r3
 8002e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e52:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002f34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e62:	ee07 3a90 	vmov	s15, r3
 8002e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e6e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002f28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e8a:	e021      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e96:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002f30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea6:	ee07 3a90 	vmov	s15, r3
 8002eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eb2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002f28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ece:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed4:	0a5b      	lsrs	r3, r3, #9
 8002ed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eda:	3301      	adds	r3, #1
 8002edc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	ee07 3a90 	vmov	s15, r3
 8002ee4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ee8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ef4:	ee17 3a90 	vmov	r3, s15
 8002ef8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002efa:	e005      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61bb      	str	r3, [r7, #24]
      break;
 8002f00:	e002      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002f02:	4b07      	ldr	r3, [pc, #28]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f04:	61bb      	str	r3, [r7, #24]
      break;
 8002f06:	bf00      	nop
  }

  return sysclockfreq;
 8002f08:	69bb      	ldr	r3, [r7, #24]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3724      	adds	r7, #36	@ 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	58024400 	.word	0x58024400
 8002f1c:	03d09000 	.word	0x03d09000
 8002f20:	003d0900 	.word	0x003d0900
 8002f24:	017d7840 	.word	0x017d7840
 8002f28:	46000000 	.word	0x46000000
 8002f2c:	4c742400 	.word	0x4c742400
 8002f30:	4a742400 	.word	0x4a742400
 8002f34:	4bbebc20 	.word	0x4bbebc20

08002f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f3e:	f7ff fe81 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002f42:	4602      	mov	r2, r0
 8002f44:	4b10      	ldr	r3, [pc, #64]	@ (8002f88 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	490f      	ldr	r1, [pc, #60]	@ (8002f8c <HAL_RCC_GetHCLKFreq+0x54>)
 8002f50:	5ccb      	ldrb	r3, [r1, r3]
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f88 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	4a09      	ldr	r2, [pc, #36]	@ (8002f8c <HAL_RCC_GetHCLKFreq+0x54>)
 8002f66:	5cd3      	ldrb	r3, [r2, r3]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f72:	4a07      	ldr	r2, [pc, #28]	@ (8002f90 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f76:	4a07      	ldr	r2, [pc, #28]	@ (8002f94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002f7c:	4b04      	ldr	r3, [pc, #16]	@ (8002f90 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	58024400 	.word	0x58024400
 8002f8c:	0800cde8 	.word	0x0800cde8
 8002f90:	24000004 	.word	0x24000004
 8002f94:	24000000 	.word	0x24000000

08002f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002f9c:	f7ff ffcc 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	4904      	ldr	r1, [pc, #16]	@ (8002fc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fae:	5ccb      	ldrb	r3, [r1, r3]
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	58024400 	.word	0x58024400
 8002fc0:	0800cde8 	.word	0x0800cde8

08002fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002fc8:	f7ff ffb6 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	0a1b      	lsrs	r3, r3, #8
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	4904      	ldr	r1, [pc, #16]	@ (8002fec <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fda:	5ccb      	ldrb	r3, [r1, r3]
 8002fdc:	f003 031f 	and.w	r3, r3, #31
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	58024400 	.word	0x58024400
 8002fec:	0800cde8 	.word	0x0800cde8

08002ff0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff4:	b0ca      	sub	sp, #296	@ 0x128
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003002:	2300      	movs	r3, #0
 8003004:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003014:	2500      	movs	r5, #0
 8003016:	ea54 0305 	orrs.w	r3, r4, r5
 800301a:	d049      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800301c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003020:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003022:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003026:	d02f      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003028:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800302c:	d828      	bhi.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800302e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003032:	d01a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003034:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003038:	d822      	bhi.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800303e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003042:	d007      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003044:	e01c      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003046:	4bb8      	ldr	r3, [pc, #736]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304a:	4ab7      	ldr	r2, [pc, #732]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800304c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003050:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003052:	e01a      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003058:	3308      	adds	r3, #8
 800305a:	2102      	movs	r1, #2
 800305c:	4618      	mov	r0, r3
 800305e:	f001 fc8f 	bl	8004980 <RCCEx_PLL2_Config>
 8003062:	4603      	mov	r3, r0
 8003064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003068:	e00f      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800306a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800306e:	3328      	adds	r3, #40	@ 0x28
 8003070:	2102      	movs	r1, #2
 8003072:	4618      	mov	r0, r3
 8003074:	f001 fd36 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800307e:	e004      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003086:	e000      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800308a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10a      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003092:	4ba5      	ldr	r3, [pc, #660]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003096:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800309a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800309e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030a0:	4aa1      	ldr	r2, [pc, #644]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030a2:	430b      	orrs	r3, r1
 80030a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80030a6:	e003      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80030bc:	f04f 0900 	mov.w	r9, #0
 80030c0:	ea58 0309 	orrs.w	r3, r8, r9
 80030c4:	d047      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80030c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d82a      	bhi.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80030d0:	a201      	add	r2, pc, #4	@ (adr r2, 80030d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80030d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d6:	bf00      	nop
 80030d8:	080030ed 	.word	0x080030ed
 80030dc:	080030fb 	.word	0x080030fb
 80030e0:	08003111 	.word	0x08003111
 80030e4:	0800312f 	.word	0x0800312f
 80030e8:	0800312f 	.word	0x0800312f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ec:	4b8e      	ldr	r3, [pc, #568]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	4a8d      	ldr	r2, [pc, #564]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030f8:	e01a      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030fe:	3308      	adds	r3, #8
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f001 fc3c 	bl	8004980 <RCCEx_PLL2_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800310e:	e00f      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003114:	3328      	adds	r3, #40	@ 0x28
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f001 fce3 	bl	8004ae4 <RCCEx_PLL3_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003124:	e004      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800312c:	e000      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800312e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10a      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003138:	4b7b      	ldr	r3, [pc, #492]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800313a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800313c:	f023 0107 	bic.w	r1, r3, #7
 8003140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003146:	4a78      	ldr	r2, [pc, #480]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003148:	430b      	orrs	r3, r1
 800314a:	6513      	str	r3, [r2, #80]	@ 0x50
 800314c:	e003      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003152:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003162:	f04f 0b00 	mov.w	fp, #0
 8003166:	ea5a 030b 	orrs.w	r3, sl, fp
 800316a:	d04c      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800316c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003176:	d030      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800317c:	d829      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800317e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003180:	d02d      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003182:	2bc0      	cmp	r3, #192	@ 0xc0
 8003184:	d825      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003186:	2b80      	cmp	r3, #128	@ 0x80
 8003188:	d018      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800318a:	2b80      	cmp	r3, #128	@ 0x80
 800318c:	d821      	bhi.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003192:	2b40      	cmp	r3, #64	@ 0x40
 8003194:	d007      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003196:	e01c      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003198:	4b63      	ldr	r3, [pc, #396]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800319a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319c:	4a62      	ldr	r2, [pc, #392]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800319e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031a4:	e01c      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031aa:	3308      	adds	r3, #8
 80031ac:	2100      	movs	r1, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	f001 fbe6 	bl	8004980 <RCCEx_PLL2_Config>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031ba:	e011      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c0:	3328      	adds	r3, #40	@ 0x28
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f001 fc8d 	bl	8004ae4 <RCCEx_PLL3_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031d0:	e006      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031d8:	e002      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80031da:	bf00      	nop
 80031dc:	e000      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80031de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10a      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80031e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80031f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f6:	4a4c      	ldr	r2, [pc, #304]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80031fc:	e003      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800320a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003212:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003216:	2300      	movs	r3, #0
 8003218:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800321c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003220:	460b      	mov	r3, r1
 8003222:	4313      	orrs	r3, r2
 8003224:	d053      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800322a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800322e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003232:	d035      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003234:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003238:	d82e      	bhi.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800323a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800323e:	d031      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003240:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003244:	d828      	bhi.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003246:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800324a:	d01a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800324c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003250:	d822      	bhi.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003256:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800325a:	d007      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800325c:	e01c      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800325e:	4b32      	ldr	r3, [pc, #200]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003262:	4a31      	ldr	r2, [pc, #196]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003268:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800326a:	e01c      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800326c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003270:	3308      	adds	r3, #8
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f001 fb83 	bl	8004980 <RCCEx_PLL2_Config>
 800327a:	4603      	mov	r3, r0
 800327c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003280:	e011      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003286:	3328      	adds	r3, #40	@ 0x28
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f001 fc2a 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003290:	4603      	mov	r3, r0
 8003292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003296:	e006      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800329e:	e002      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80032a0:	bf00      	nop
 80032a2:	e000      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80032a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10b      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80032ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80032b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80032be:	4a1a      	ldr	r2, [pc, #104]	@ (8003328 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032c4:	e003      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80032ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80032da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80032de:	2300      	movs	r3, #0
 80032e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80032e4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80032e8:	460b      	mov	r3, r1
 80032ea:	4313      	orrs	r3, r2
 80032ec:	d056      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80032ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80032f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032fa:	d038      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80032fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003300:	d831      	bhi.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003302:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003306:	d034      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003308:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800330c:	d82b      	bhi.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800330e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003312:	d01d      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003314:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003318:	d825      	bhi.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800331a:	2b00      	cmp	r3, #0
 800331c:	d006      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800331e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003322:	d00a      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003324:	e01f      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003326:	bf00      	nop
 8003328:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800332c:	4ba2      	ldr	r3, [pc, #648]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800332e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003330:	4aa1      	ldr	r2, [pc, #644]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003332:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003336:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003338:	e01c      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800333a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333e:	3308      	adds	r3, #8
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f001 fb1c 	bl	8004980 <RCCEx_PLL2_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800334e:	e011      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003354:	3328      	adds	r3, #40	@ 0x28
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f001 fbc3 	bl	8004ae4 <RCCEx_PLL3_Config>
 800335e:	4603      	mov	r3, r0
 8003360:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003364:	e006      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800336c:	e002      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800336e:	bf00      	nop
 8003370:	e000      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003374:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800337c:	4b8e      	ldr	r3, [pc, #568]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003380:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003388:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800338c:	4a8a      	ldr	r2, [pc, #552]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800338e:	430b      	orrs	r3, r1
 8003390:	6593      	str	r3, [r2, #88]	@ 0x58
 8003392:	e003      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003394:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003398:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800339c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80033a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80033ac:	2300      	movs	r3, #0
 80033ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80033b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80033b6:	460b      	mov	r3, r1
 80033b8:	4313      	orrs	r3, r2
 80033ba:	d03a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80033bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c2:	2b30      	cmp	r3, #48	@ 0x30
 80033c4:	d01f      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80033c6:	2b30      	cmp	r3, #48	@ 0x30
 80033c8:	d819      	bhi.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d00c      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d815      	bhi.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d019      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d111      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033da:	4b77      	ldr	r3, [pc, #476]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033de:	4a76      	ldr	r2, [pc, #472]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80033e6:	e011      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ec:	3308      	adds	r3, #8
 80033ee:	2102      	movs	r1, #2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f001 fac5 	bl	8004980 <RCCEx_PLL2_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80033fc:	e006      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003404:	e002      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003406:	bf00      	nop
 8003408:	e000      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800340a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800340c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10a      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003414:	4b68      	ldr	r3, [pc, #416]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003418:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800341c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003422:	4a65      	ldr	r2, [pc, #404]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003424:	430b      	orrs	r3, r1
 8003426:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003428:	e003      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800342e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800343e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003442:	2300      	movs	r3, #0
 8003444:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003448:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800344c:	460b      	mov	r3, r1
 800344e:	4313      	orrs	r3, r2
 8003450:	d051      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003458:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800345c:	d035      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800345e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003462:	d82e      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003464:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003468:	d031      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800346a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800346e:	d828      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003470:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003474:	d01a      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003476:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800347a:	d822      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003484:	d007      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003486:	e01c      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003488:	4b4b      	ldr	r3, [pc, #300]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800348a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348c:	4a4a      	ldr	r2, [pc, #296]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800348e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003494:	e01c      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349a:	3308      	adds	r3, #8
 800349c:	2100      	movs	r1, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	f001 fa6e 	bl	8004980 <RCCEx_PLL2_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034aa:	e011      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b0:	3328      	adds	r3, #40	@ 0x28
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f001 fb15 	bl	8004ae4 <RCCEx_PLL3_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034c0:	e006      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034c8:	e002      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80034ca:	bf00      	nop
 80034cc:	e000      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80034ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034d8:	4b37      	ldr	r3, [pc, #220]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034dc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80034e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e6:	4a34      	ldr	r2, [pc, #208]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034e8:	430b      	orrs	r3, r1
 80034ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80034ec:	e003      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80034f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003502:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003506:	2300      	movs	r3, #0
 8003508:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800350c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003510:	460b      	mov	r3, r1
 8003512:	4313      	orrs	r3, r2
 8003514:	d056      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800351c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003520:	d033      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003522:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003526:	d82c      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003528:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800352c:	d02f      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800352e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003532:	d826      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003534:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003538:	d02b      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800353a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800353e:	d820      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003540:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003544:	d012      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003546:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800354a:	d81a      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800354c:	2b00      	cmp	r3, #0
 800354e:	d022      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003554:	d115      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355a:	3308      	adds	r3, #8
 800355c:	2101      	movs	r1, #1
 800355e:	4618      	mov	r0, r3
 8003560:	f001 fa0e 	bl	8004980 <RCCEx_PLL2_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800356a:	e015      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800356c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003570:	3328      	adds	r3, #40	@ 0x28
 8003572:	2101      	movs	r1, #1
 8003574:	4618      	mov	r0, r3
 8003576:	f001 fab5 	bl	8004ae4 <RCCEx_PLL3_Config>
 800357a:	4603      	mov	r3, r0
 800357c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003580:	e00a      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003588:	e006      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800358a:	bf00      	nop
 800358c:	e004      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800358e:	bf00      	nop
 8003590:	e002      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10d      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80035a0:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80035a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035ae:	4a02      	ldr	r2, [pc, #8]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035b0:	430b      	orrs	r3, r1
 80035b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80035b4:	e006      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80035b6:	bf00      	nop
 80035b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80035c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035cc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80035d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035d4:	2300      	movs	r3, #0
 80035d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80035de:	460b      	mov	r3, r1
 80035e0:	4313      	orrs	r3, r2
 80035e2:	d055      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80035ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035f0:	d033      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80035f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035f6:	d82c      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80035f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035fc:	d02f      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80035fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003602:	d826      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003604:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003608:	d02b      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800360a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800360e:	d820      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003610:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003614:	d012      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800361a:	d81a      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d022      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003620:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003624:	d115      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362a:	3308      	adds	r3, #8
 800362c:	2101      	movs	r1, #1
 800362e:	4618      	mov	r0, r3
 8003630:	f001 f9a6 	bl	8004980 <RCCEx_PLL2_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800363a:	e015      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800363c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003640:	3328      	adds	r3, #40	@ 0x28
 8003642:	2101      	movs	r1, #1
 8003644:	4618      	mov	r0, r3
 8003646:	f001 fa4d 	bl	8004ae4 <RCCEx_PLL3_Config>
 800364a:	4603      	mov	r3, r0
 800364c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003650:	e00a      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003658:	e006      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800365a:	bf00      	nop
 800365c:	e004      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800365e:	bf00      	nop
 8003660:	e002      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10b      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003670:	4ba3      	ldr	r3, [pc, #652]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003674:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003680:	4a9f      	ldr	r2, [pc, #636]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003682:	430b      	orrs	r3, r1
 8003684:	6593      	str	r3, [r2, #88]	@ 0x58
 8003686:	e003      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800368c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003698:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800369c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80036a0:	2300      	movs	r3, #0
 80036a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80036a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80036aa:	460b      	mov	r3, r1
 80036ac:	4313      	orrs	r3, r2
 80036ae:	d037      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80036b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036ba:	d00e      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80036bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036c0:	d816      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d018      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80036c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036ca:	d111      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	4a8b      	ldr	r2, [pc, #556]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036d8:	e00f      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036de:	3308      	adds	r3, #8
 80036e0:	2101      	movs	r1, #1
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 f94c 	bl	8004980 <RCCEx_PLL2_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036ee:	e004      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80036f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003702:	4b7f      	ldr	r3, [pc, #508]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003706:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003710:	4a7b      	ldr	r2, [pc, #492]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003712:	430b      	orrs	r3, r1
 8003714:	6513      	str	r3, [r2, #80]	@ 0x50
 8003716:	e003      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800371c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800372c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003730:	2300      	movs	r3, #0
 8003732:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003736:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800373a:	460b      	mov	r3, r1
 800373c:	4313      	orrs	r3, r2
 800373e:	d039      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003746:	2b03      	cmp	r3, #3
 8003748:	d81c      	bhi.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800374a:	a201      	add	r2, pc, #4	@ (adr r2, 8003750 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	0800378d 	.word	0x0800378d
 8003754:	08003761 	.word	0x08003761
 8003758:	0800376f 	.word	0x0800376f
 800375c:	0800378d 	.word	0x0800378d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003760:	4b67      	ldr	r3, [pc, #412]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003764:	4a66      	ldr	r2, [pc, #408]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800376a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800376c:	e00f      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003772:	3308      	adds	r3, #8
 8003774:	2102      	movs	r1, #2
 8003776:	4618      	mov	r0, r3
 8003778:	f001 f902 	bl	8004980 <RCCEx_PLL2_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003782:	e004      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800378a:	e000      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800378c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800378e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10a      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003796:	4b5a      	ldr	r3, [pc, #360]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800379a:	f023 0103 	bic.w	r1, r3, #3
 800379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a4:	4a56      	ldr	r2, [pc, #344]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037a6:	430b      	orrs	r3, r1
 80037a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037aa:	e003      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80037c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80037ce:	460b      	mov	r3, r1
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f000 809f 	beq.w	8003914 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a4a      	ldr	r2, [pc, #296]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80037dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037e2:	f7fe f809 	bl	80017f8 <HAL_GetTick>
 80037e6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037ea:	e00b      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ec:	f7fe f804 	bl	80017f8 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b64      	cmp	r3, #100	@ 0x64
 80037fa:	d903      	bls.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003802:	e005      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003804:	4b3f      	ldr	r3, [pc, #252]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0ed      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003814:	2b00      	cmp	r3, #0
 8003816:	d179      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003818:	4b39      	ldr	r3, [pc, #228]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800381a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003820:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003824:	4053      	eors	r3, r2
 8003826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800382a:	2b00      	cmp	r3, #0
 800382c:	d015      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800382e:	4b34      	ldr	r3, [pc, #208]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003832:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003836:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800383a:	4b31      	ldr	r3, [pc, #196]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383e:	4a30      	ldr	r2, [pc, #192]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003844:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003846:	4b2e      	ldr	r3, [pc, #184]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384a:	4a2d      	ldr	r2, [pc, #180]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800384c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003850:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003852:	4a2b      	ldr	r2, [pc, #172]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003854:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003858:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800385a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003866:	d118      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fd ffc6 	bl	80017f8 <HAL_GetTick>
 800386c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003870:	e00d      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003872:	f7fd ffc1 	bl	80017f8 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800387c:	1ad2      	subs	r2, r2, r3
 800387e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003882:	429a      	cmp	r2, r3
 8003884:	d903      	bls.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800388c:	e005      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800388e:	4b1c      	ldr	r3, [pc, #112]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0eb      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800389a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d129      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038b2:	d10e      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80038b4:	4b12      	ldr	r3, [pc, #72]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80038bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038c4:	091a      	lsrs	r2, r3, #4
 80038c6:	4b10      	ldr	r3, [pc, #64]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038cc:	430b      	orrs	r3, r1
 80038ce:	6113      	str	r3, [r2, #16]
 80038d0:	e005      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80038d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80038dc:	6113      	str	r3, [r2, #16]
 80038de:	4b08      	ldr	r3, [pc, #32]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80038e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ee:	4a04      	ldr	r2, [pc, #16]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038f4:	e00e      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80038fe:	e009      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003900:	58024400 	.word	0x58024400
 8003904:	58024800 	.word	0x58024800
 8003908:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003910:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391c:	f002 0301 	and.w	r3, r2, #1
 8003920:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003924:	2300      	movs	r3, #0
 8003926:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800392a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800392e:	460b      	mov	r3, r1
 8003930:	4313      	orrs	r3, r2
 8003932:	f000 8089 	beq.w	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800393c:	2b28      	cmp	r3, #40	@ 0x28
 800393e:	d86b      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003940:	a201      	add	r2, pc, #4	@ (adr r2, 8003948 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	08003a21 	.word	0x08003a21
 800394c:	08003a19 	.word	0x08003a19
 8003950:	08003a19 	.word	0x08003a19
 8003954:	08003a19 	.word	0x08003a19
 8003958:	08003a19 	.word	0x08003a19
 800395c:	08003a19 	.word	0x08003a19
 8003960:	08003a19 	.word	0x08003a19
 8003964:	08003a19 	.word	0x08003a19
 8003968:	080039ed 	.word	0x080039ed
 800396c:	08003a19 	.word	0x08003a19
 8003970:	08003a19 	.word	0x08003a19
 8003974:	08003a19 	.word	0x08003a19
 8003978:	08003a19 	.word	0x08003a19
 800397c:	08003a19 	.word	0x08003a19
 8003980:	08003a19 	.word	0x08003a19
 8003984:	08003a19 	.word	0x08003a19
 8003988:	08003a03 	.word	0x08003a03
 800398c:	08003a19 	.word	0x08003a19
 8003990:	08003a19 	.word	0x08003a19
 8003994:	08003a19 	.word	0x08003a19
 8003998:	08003a19 	.word	0x08003a19
 800399c:	08003a19 	.word	0x08003a19
 80039a0:	08003a19 	.word	0x08003a19
 80039a4:	08003a19 	.word	0x08003a19
 80039a8:	08003a21 	.word	0x08003a21
 80039ac:	08003a19 	.word	0x08003a19
 80039b0:	08003a19 	.word	0x08003a19
 80039b4:	08003a19 	.word	0x08003a19
 80039b8:	08003a19 	.word	0x08003a19
 80039bc:	08003a19 	.word	0x08003a19
 80039c0:	08003a19 	.word	0x08003a19
 80039c4:	08003a19 	.word	0x08003a19
 80039c8:	08003a21 	.word	0x08003a21
 80039cc:	08003a19 	.word	0x08003a19
 80039d0:	08003a19 	.word	0x08003a19
 80039d4:	08003a19 	.word	0x08003a19
 80039d8:	08003a19 	.word	0x08003a19
 80039dc:	08003a19 	.word	0x08003a19
 80039e0:	08003a19 	.word	0x08003a19
 80039e4:	08003a19 	.word	0x08003a19
 80039e8:	08003a21 	.word	0x08003a21
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f0:	3308      	adds	r3, #8
 80039f2:	2101      	movs	r1, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 ffc3 	bl	8004980 <RCCEx_PLL2_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a00:	e00f      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a06:	3328      	adds	r3, #40	@ 0x28
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 f86a 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a16:	e004      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a1e:	e000      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a2a:	4bbf      	ldr	r3, [pc, #764]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a38:	4abb      	ldr	r2, [pc, #748]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a3e:	e003      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	f002 0302 	and.w	r3, r2, #2
 8003a54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003a5e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003a62:	460b      	mov	r3, r1
 8003a64:	4313      	orrs	r3, r2
 8003a66:	d041      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a6e:	2b05      	cmp	r3, #5
 8003a70:	d824      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003a72:	a201      	add	r2, pc, #4	@ (adr r2, 8003a78 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003ac5 	.word	0x08003ac5
 8003a7c:	08003a91 	.word	0x08003a91
 8003a80:	08003aa7 	.word	0x08003aa7
 8003a84:	08003ac5 	.word	0x08003ac5
 8003a88:	08003ac5 	.word	0x08003ac5
 8003a8c:	08003ac5 	.word	0x08003ac5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a94:	3308      	adds	r3, #8
 8003a96:	2101      	movs	r1, #1
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 ff71 	bl	8004980 <RCCEx_PLL2_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003aa4:	e00f      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aaa:	3328      	adds	r3, #40	@ 0x28
 8003aac:	2101      	movs	r1, #1
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f001 f818 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003aba:	e004      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10a      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ace:	4b96      	ldr	r3, [pc, #600]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad2:	f023 0107 	bic.w	r1, r3, #7
 8003ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ada:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003adc:	4a92      	ldr	r2, [pc, #584]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ae2:	e003      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af4:	f002 0304 	and.w	r3, r2, #4
 8003af8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b02:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	d044      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b14:	2b05      	cmp	r3, #5
 8003b16:	d825      	bhi.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003b18:	a201      	add	r2, pc, #4	@ (adr r2, 8003b20 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1e:	bf00      	nop
 8003b20:	08003b6d 	.word	0x08003b6d
 8003b24:	08003b39 	.word	0x08003b39
 8003b28:	08003b4f 	.word	0x08003b4f
 8003b2c:	08003b6d 	.word	0x08003b6d
 8003b30:	08003b6d 	.word	0x08003b6d
 8003b34:	08003b6d 	.word	0x08003b6d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	2101      	movs	r1, #1
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 ff1d 	bl	8004980 <RCCEx_PLL2_Config>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b4c:	e00f      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b52:	3328      	adds	r3, #40	@ 0x28
 8003b54:	2101      	movs	r1, #1
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 ffc4 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b62:	e004      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b6a:	e000      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10b      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b76:	4b6c      	ldr	r3, [pc, #432]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7a:	f023 0107 	bic.w	r1, r3, #7
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b86:	4a68      	ldr	r2, [pc, #416]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b8c:	e003      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9e:	f002 0320 	and.w	r3, r2, #32
 8003ba2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	d055      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bc2:	d033      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bc8:	d82c      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bce:	d02f      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd4:	d826      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bd6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bda:	d02b      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003bdc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003be0:	d820      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003be2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003be6:	d012      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003be8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bec:	d81a      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d022      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003bf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bf6:	d115      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfc:	3308      	adds	r3, #8
 8003bfe:	2100      	movs	r1, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 febd 	bl	8004980 <RCCEx_PLL2_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c0c:	e015      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c12:	3328      	adds	r3, #40	@ 0x28
 8003c14:	2102      	movs	r1, #2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 ff64 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c22:	e00a      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c2a:	e006      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c2c:	bf00      	nop
 8003c2e:	e004      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c30:	bf00      	nop
 8003c32:	e002      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c34:	bf00      	nop
 8003c36:	e000      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10b      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c42:	4b39      	ldr	r3, [pc, #228]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c46:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c52:	4a35      	ldr	r2, [pc, #212]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c58:	e003      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c72:	2300      	movs	r3, #0
 8003c74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003c78:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	d058      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c8a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003c8e:	d033      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003c90:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003c94:	d82c      	bhi.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c9a:	d02f      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca0:	d826      	bhi.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ca2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ca6:	d02b      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003ca8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cac:	d820      	bhi.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cb2:	d012      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003cb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cb8:	d81a      	bhi.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d022      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc2:	d115      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc8:	3308      	adds	r3, #8
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fe57 	bl	8004980 <RCCEx_PLL2_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003cd8:	e015      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cde:	3328      	adds	r3, #40	@ 0x28
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fefe 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003cee:	e00a      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cf6:	e006      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003cf8:	bf00      	nop
 8003cfa:	e004      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003cfc:	bf00      	nop
 8003cfe:	e002      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d00:	bf00      	nop
 8003d02:	e000      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10e      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d0e:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d12:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d1e:	4a02      	ldr	r2, [pc, #8]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d24:	e006      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003d26:	bf00      	nop
 8003d28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003d40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d44:	2300      	movs	r3, #0
 8003d46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d4a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4313      	orrs	r3, r2
 8003d52:	d055      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003d5c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003d60:	d033      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003d62:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003d66:	d82c      	bhi.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d6c:	d02f      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003d6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d72:	d826      	bhi.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d74:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003d78:	d02b      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003d7a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003d7e:	d820      	bhi.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d84:	d012      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003d86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d8a:	d81a      	bhi.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d022      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003d90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d94:	d115      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9a:	3308      	adds	r3, #8
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fdee 	bl	8004980 <RCCEx_PLL2_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003daa:	e015      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db0:	3328      	adds	r3, #40	@ 0x28
 8003db2:	2102      	movs	r1, #2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fe95 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003dc0:	e00a      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dc8:	e006      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003dca:	bf00      	nop
 8003dcc:	e004      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003dce:	bf00      	nop
 8003dd0:	e002      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003dd2:	bf00      	nop
 8003dd4:	e000      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10b      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003de0:	4ba1      	ldr	r3, [pc, #644]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003df0:	4a9d      	ldr	r2, [pc, #628]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003df2:	430b      	orrs	r3, r1
 8003df4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003df6:	e003      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	f002 0308 	and.w	r3, r2, #8
 8003e0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e10:	2300      	movs	r3, #0
 8003e12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	d01e      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e32:	3328      	adds	r3, #40	@ 0x28
 8003e34:	2102      	movs	r1, #2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fe54 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e48:	4b87      	ldr	r3, [pc, #540]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e58:	4a83      	ldr	r2, [pc, #524]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	f002 0310 	and.w	r3, r2, #16
 8003e6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e74:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	d01e      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e90:	3328      	adds	r3, #40	@ 0x28
 8003e92:	2102      	movs	r1, #2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fe25 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ea6:	4b70      	ldr	r3, [pc, #448]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eaa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eb6:	4a6c      	ldr	r2, [pc, #432]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ec8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ed2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	d03e      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ee4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ee8:	d022      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003eea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003eee:	d81b      	bhi.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef8:	d00b      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003efa:	e015      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f00:	3308      	adds	r3, #8
 8003f02:	2100      	movs	r1, #0
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fd3b 	bl	8004980 <RCCEx_PLL2_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f10:	e00f      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f16:	3328      	adds	r3, #40	@ 0x28
 8003f18:	2102      	movs	r1, #2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fde2 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f26:	e004      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f2e:	e000      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10b      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f3a:	4b4b      	ldr	r3, [pc, #300]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f4a:	4a47      	ldr	r2, [pc, #284]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f50:	e003      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003f66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f68:	2300      	movs	r3, #0
 8003f6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003f70:	460b      	mov	r3, r1
 8003f72:	4313      	orrs	r3, r2
 8003f74:	d03b      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f82:	d01f      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003f84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f88:	d818      	bhi.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003f8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f8e:	d003      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003f90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f94:	d007      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003f96:	e011      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f98:	4b33      	ldr	r3, [pc, #204]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	4a32      	ldr	r2, [pc, #200]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003fa4:	e00f      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003faa:	3328      	adds	r3, #40	@ 0x28
 8003fac:	2101      	movs	r1, #1
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fd98 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003fba:	e004      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10b      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fce:	4b26      	ldr	r3, [pc, #152]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fde:	4a22      	ldr	r2, [pc, #136]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fe4:	e003      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003ffa:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	677b      	str	r3, [r7, #116]	@ 0x74
 8004000:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004004:	460b      	mov	r3, r1
 8004006:	4313      	orrs	r3, r2
 8004008:	d034      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800400a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004018:	d007      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800401a:	e011      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800401c:	4b12      	ldr	r3, [pc, #72]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	4a11      	ldr	r2, [pc, #68]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004028:	e00e      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800402a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402e:	3308      	adds	r3, #8
 8004030:	2102      	movs	r1, #2
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fca4 	bl	8004980 <RCCEx_PLL2_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800403e:	e003      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004046:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10d      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004050:	4b05      	ldr	r3, [pc, #20]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004054:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800405e:	4a02      	ldr	r2, [pc, #8]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004060:	430b      	orrs	r3, r1
 8004062:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004064:	e006      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004066:	bf00      	nop
 8004068:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004070:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004080:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004082:	2300      	movs	r3, #0
 8004084:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004086:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800408a:	460b      	mov	r3, r1
 800408c:	4313      	orrs	r3, r2
 800408e:	d00c      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004094:	3328      	adds	r3, #40	@ 0x28
 8004096:	2102      	movs	r1, #2
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fd23 	bl	8004ae4 <RCCEx_PLL3_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80040b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80040b8:	2300      	movs	r3, #0
 80040ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80040bc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80040c0:	460b      	mov	r3, r1
 80040c2:	4313      	orrs	r3, r2
 80040c4:	d038      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040d2:	d018      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80040d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040d8:	d811      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80040da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040de:	d014      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80040e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040e4:	d80b      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d011      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80040ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ee:	d106      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f0:	4bc3      	ldr	r3, [pc, #780]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f4:	4ac2      	ldr	r2, [pc, #776]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80040fc:	e008      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004104:	e004      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004106:	bf00      	nop
 8004108:	e002      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800410a:	bf00      	nop
 800410c:	e000      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800410e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10b      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004118:	4bb9      	ldr	r3, [pc, #740]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800411a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800411c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004128:	4ab5      	ldr	r2, [pc, #724]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800412a:	430b      	orrs	r3, r1
 800412c:	6553      	str	r3, [r2, #84]	@ 0x54
 800412e:	e003      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004144:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004146:	2300      	movs	r3, #0
 8004148:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800414a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800414e:	460b      	mov	r3, r1
 8004150:	4313      	orrs	r3, r2
 8004152:	d009      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004154:	4baa      	ldr	r3, [pc, #680]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004158:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800415c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004162:	4aa7      	ldr	r2, [pc, #668]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004164:	430b      	orrs	r3, r1
 8004166:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004174:	653b      	str	r3, [r7, #80]	@ 0x50
 8004176:	2300      	movs	r3, #0
 8004178:	657b      	str	r3, [r7, #84]	@ 0x54
 800417a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800417e:	460b      	mov	r3, r1
 8004180:	4313      	orrs	r3, r2
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004184:	4b9e      	ldr	r3, [pc, #632]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800418c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004190:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004194:	4a9a      	ldr	r2, [pc, #616]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004196:	430b      	orrs	r3, r1
 8004198:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800419a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80041a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041a8:	2300      	movs	r3, #0
 80041aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041ac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80041b0:	460b      	mov	r3, r1
 80041b2:	4313      	orrs	r3, r2
 80041b4:	d009      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041b6:	4b92      	ldr	r3, [pc, #584]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ba:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c4:	4a8e      	ldr	r2, [pc, #568]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041c6:	430b      	orrs	r3, r1
 80041c8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80041d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80041d8:	2300      	movs	r3, #0
 80041da:	647b      	str	r3, [r7, #68]	@ 0x44
 80041dc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80041e0:	460b      	mov	r3, r1
 80041e2:	4313      	orrs	r3, r2
 80041e4:	d00e      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041e6:	4b86      	ldr	r3, [pc, #536]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	4a85      	ldr	r2, [pc, #532]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041f0:	6113      	str	r3, [r2, #16]
 80041f2:	4b83      	ldr	r3, [pc, #524]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041f4:	6919      	ldr	r1, [r3, #16]
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80041fe:	4a80      	ldr	r2, [pc, #512]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004200:	430b      	orrs	r3, r1
 8004202:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004210:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004212:	2300      	movs	r3, #0
 8004214:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004216:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800421a:	460b      	mov	r3, r1
 800421c:	4313      	orrs	r3, r2
 800421e:	d009      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004220:	4b77      	ldr	r3, [pc, #476]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004224:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422e:	4a74      	ldr	r2, [pc, #464]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004230:	430b      	orrs	r3, r1
 8004232:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004240:	633b      	str	r3, [r7, #48]	@ 0x30
 8004242:	2300      	movs	r3, #0
 8004244:	637b      	str	r3, [r7, #52]	@ 0x34
 8004246:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800424a:	460b      	mov	r3, r1
 800424c:	4313      	orrs	r3, r2
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004250:	4b6b      	ldr	r3, [pc, #428]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004254:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004260:	4a67      	ldr	r2, [pc, #412]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004262:	430b      	orrs	r3, r1
 8004264:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	2100      	movs	r1, #0
 8004270:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004278:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800427c:	460b      	mov	r3, r1
 800427e:	4313      	orrs	r3, r2
 8004280:	d011      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004286:	3308      	adds	r3, #8
 8004288:	2100      	movs	r1, #0
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fb78 	bl	8004980 <RCCEx_PLL2_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80042a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	2100      	movs	r1, #0
 80042b0:	6239      	str	r1, [r7, #32]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80042bc:	460b      	mov	r3, r1
 80042be:	4313      	orrs	r3, r2
 80042c0:	d011      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c6:	3308      	adds	r3, #8
 80042c8:	2101      	movs	r1, #1
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fb58 	bl	8004980 <RCCEx_PLL2_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80042d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	2100      	movs	r1, #0
 80042f0:	61b9      	str	r1, [r7, #24]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80042fc:	460b      	mov	r3, r1
 80042fe:	4313      	orrs	r3, r2
 8004300:	d011      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004306:	3308      	adds	r3, #8
 8004308:	2102      	movs	r1, #2
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fb38 	bl	8004980 <RCCEx_PLL2_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432e:	2100      	movs	r1, #0
 8004330:	6139      	str	r1, [r7, #16]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800433c:	460b      	mov	r3, r1
 800433e:	4313      	orrs	r3, r2
 8004340:	d011      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004346:	3328      	adds	r3, #40	@ 0x28
 8004348:	2100      	movs	r1, #0
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fbca 	bl	8004ae4 <RCCEx_PLL3_Config>
 8004350:	4603      	mov	r3, r0
 8004352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004362:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	2100      	movs	r1, #0
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800437c:	460b      	mov	r3, r1
 800437e:	4313      	orrs	r3, r2
 8004380:	d011      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004386:	3328      	adds	r3, #40	@ 0x28
 8004388:	2101      	movs	r1, #1
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fbaa 	bl	8004ae4 <RCCEx_PLL3_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	2100      	movs	r1, #0
 80043b0:	6039      	str	r1, [r7, #0]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	607b      	str	r3, [r7, #4]
 80043b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80043bc:	460b      	mov	r3, r1
 80043be:	4313      	orrs	r3, r2
 80043c0:	d011      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c6:	3328      	adds	r3, #40	@ 0x28
 80043c8:	2102      	movs	r1, #2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fb8a 	bl	8004ae4 <RCCEx_PLL3_Config>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80043d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80043e6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e000      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80043fa:	46bd      	mov	sp, r7
 80043fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004400:	58024400 	.word	0x58024400

08004404 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004408:	f7fe fd96 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4904      	ldr	r1, [pc, #16]	@ (800442c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	58024400 	.word	0x58024400
 800442c:	0800cde8 	.word	0x0800cde8

08004430 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004430:	b480      	push	{r7}
 8004432:	b089      	sub	sp, #36	@ 0x24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004438:	4ba1      	ldr	r3, [pc, #644]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800443a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004442:	4b9f      	ldr	r3, [pc, #636]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004446:	0b1b      	lsrs	r3, r3, #12
 8004448:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800444c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800444e:	4b9c      	ldr	r3, [pc, #624]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004452:	091b      	lsrs	r3, r3, #4
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800445a:	4b99      	ldr	r3, [pc, #612]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800445c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800445e:	08db      	lsrs	r3, r3, #3
 8004460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	fb02 f303 	mul.w	r3, r2, r3
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004472:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8111 	beq.w	80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2b02      	cmp	r3, #2
 8004482:	f000 8083 	beq.w	800458c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b02      	cmp	r3, #2
 800448a:	f200 80a1 	bhi.w	80045d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d056      	beq.n	8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800449a:	e099      	b.n	80045d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800449c:	4b88      	ldr	r3, [pc, #544]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d02d      	beq.n	8004504 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044a8:	4b85      	ldr	r3, [pc, #532]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	08db      	lsrs	r3, r3, #3
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	4a84      	ldr	r2, [pc, #528]	@ (80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80044b4:	fa22 f303 	lsr.w	r3, r2, r3
 80044b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	ee07 3a90 	vmov	s15, r3
 80044c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d2:	4b7b      	ldr	r3, [pc, #492]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004502:	e087      	b.n	8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80046cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004516:	4b6a      	ldr	r3, [pc, #424]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004526:	ed97 6a03 	vldr	s12, [r7, #12]
 800452a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800452e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800453a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004546:	e065      	b.n	8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004552:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80046d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455a:	4b59      	ldr	r3, [pc, #356]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800455c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456a:	ed97 6a03 	vldr	s12, [r7, #12]
 800456e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800457e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800458a:	e043      	b.n	8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004596:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80046d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800459a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800459e:	4b48      	ldr	r3, [pc, #288]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80045b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045ce:	e021      	b.n	8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80046d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80045de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e2:	4b37      	ldr	r3, [pc, #220]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004602:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004612:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004614:	4b2a      	ldr	r3, [pc, #168]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004618:	0a5b      	lsrs	r3, r3, #9
 800461a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004626:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800462a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800462e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800463a:	ee17 2a90 	vmov	r2, s15
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004642:	4b1f      	ldr	r3, [pc, #124]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800464c:	ee07 3a90 	vmov	s15, r3
 8004650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004654:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004658:	ee37 7a87 	vadd.f32	s14, s15, s14
 800465c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004668:	ee17 2a90 	vmov	r2, s15
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004670:	4b13      	ldr	r3, [pc, #76]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004674:	0e1b      	lsrs	r3, r3, #24
 8004676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800468a:	edd7 6a07 	vldr	s13, [r7, #28]
 800468e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004696:	ee17 2a90 	vmov	r2, s15
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800469e:	e008      	b.n	80046b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	609a      	str	r2, [r3, #8]
}
 80046b2:	bf00      	nop
 80046b4:	3724      	adds	r7, #36	@ 0x24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	58024400 	.word	0x58024400
 80046c4:	03d09000 	.word	0x03d09000
 80046c8:	46000000 	.word	0x46000000
 80046cc:	4c742400 	.word	0x4c742400
 80046d0:	4a742400 	.word	0x4a742400
 80046d4:	4bbebc20 	.word	0x4bbebc20

080046d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80046d8:	b480      	push	{r7}
 80046da:	b089      	sub	sp, #36	@ 0x24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046e0:	4ba1      	ldr	r3, [pc, #644]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80046ea:	4b9f      	ldr	r3, [pc, #636]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ee:	0d1b      	lsrs	r3, r3, #20
 80046f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80046f6:	4b9c      	ldr	r3, [pc, #624]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fa:	0a1b      	lsrs	r3, r3, #8
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004702:	4b99      	ldr	r3, [pc, #612]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004706:	08db      	lsrs	r3, r3, #3
 8004708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8111 	beq.w	8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	2b02      	cmp	r3, #2
 800472a:	f000 8083 	beq.w	8004834 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b02      	cmp	r3, #2
 8004732:	f200 80a1 	bhi.w	8004878 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d056      	beq.n	80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004742:	e099      	b.n	8004878 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004744:	4b88      	ldr	r3, [pc, #544]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d02d      	beq.n	80047ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004750:	4b85      	ldr	r3, [pc, #532]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	08db      	lsrs	r3, r3, #3
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	4a84      	ldr	r2, [pc, #528]	@ (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
 8004760:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	ee07 3a90 	vmov	s15, r3
 8004768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477a:	4b7b      	ldr	r3, [pc, #492]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478a:	ed97 6a03 	vldr	s12, [r7, #12]
 800478e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800479e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047aa:	e087      	b.n	80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004974 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80047ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047be:	4b6a      	ldr	r3, [pc, #424]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ee:	e065      	b.n	80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004978 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004802:	4b59      	ldr	r3, [pc, #356]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004812:	ed97 6a03 	vldr	s12, [r7, #12]
 8004816:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800481a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800481e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800482a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004832:	e043      	b.n	80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800497c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004846:	4b48      	ldr	r3, [pc, #288]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004856:	ed97 6a03 	vldr	s12, [r7, #12]
 800485a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800485e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800486a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800486e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004876:	e021      	b.n	80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004882:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004978 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488a:	4b37      	ldr	r3, [pc, #220]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489a:	ed97 6a03 	vldr	s12, [r7, #12]
 800489e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80048bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c0:	0a5b      	lsrs	r3, r3, #9
 80048c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e2:	ee17 2a90 	vmov	r2, s15
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80048ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ee:	0c1b      	lsrs	r3, r3, #16
 80048f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048f4:	ee07 3a90 	vmov	s15, r3
 80048f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004900:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004904:	edd7 6a07 	vldr	s13, [r7, #28]
 8004908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800490c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004910:	ee17 2a90 	vmov	r2, s15
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004918:	4b13      	ldr	r3, [pc, #76]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800491a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491c:	0e1b      	lsrs	r3, r3, #24
 800491e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800492e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004932:	edd7 6a07 	vldr	s13, [r7, #28]
 8004936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800493a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800493e:	ee17 2a90 	vmov	r2, s15
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004946:	e008      	b.n	800495a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	609a      	str	r2, [r3, #8]
}
 800495a:	bf00      	nop
 800495c:	3724      	adds	r7, #36	@ 0x24
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	58024400 	.word	0x58024400
 800496c:	03d09000 	.word	0x03d09000
 8004970:	46000000 	.word	0x46000000
 8004974:	4c742400 	.word	0x4c742400
 8004978:	4a742400 	.word	0x4a742400
 800497c:	4bbebc20 	.word	0x4bbebc20

08004980 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800498e:	4b53      	ldr	r3, [pc, #332]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b03      	cmp	r3, #3
 8004998:	d101      	bne.n	800499e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e099      	b.n	8004ad2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800499e:	4b4f      	ldr	r3, [pc, #316]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a4e      	ldr	r2, [pc, #312]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 80049a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049aa:	f7fc ff25 	bl	80017f8 <HAL_GetTick>
 80049ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049b0:	e008      	b.n	80049c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049b2:	f7fc ff21 	bl	80017f8 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e086      	b.n	8004ad2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049c4:	4b45      	ldr	r3, [pc, #276]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80049d0:	4b42      	ldr	r3, [pc, #264]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	031b      	lsls	r3, r3, #12
 80049de:	493f      	ldr	r1, [pc, #252]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	025b      	lsls	r3, r3, #9
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	061b      	lsls	r3, r3, #24
 8004a10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a14:	4931      	ldr	r1, [pc, #196]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a1a:	4b30      	ldr	r3, [pc, #192]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	492d      	ldr	r1, [pc, #180]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a30:	f023 0220 	bic.w	r2, r3, #32
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	4928      	ldr	r1, [pc, #160]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a3e:	4b27      	ldr	r3, [pc, #156]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	4a26      	ldr	r2, [pc, #152]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a44:	f023 0310 	bic.w	r3, r3, #16
 8004a48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a4a:	4b24      	ldr	r3, [pc, #144]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ae0 <RCCEx_PLL2_Config+0x160>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	69d2      	ldr	r2, [r2, #28]
 8004a56:	00d2      	lsls	r2, r2, #3
 8004a58:	4920      	ldr	r1, [pc, #128]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a62:	4a1e      	ldr	r2, [pc, #120]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a64:	f043 0310 	orr.w	r3, r3, #16
 8004a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d106      	bne.n	8004a7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a70:	4b1a      	ldr	r3, [pc, #104]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a74:	4a19      	ldr	r2, [pc, #100]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a7c:	e00f      	b.n	8004a9e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d106      	bne.n	8004a92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a84:	4b15      	ldr	r3, [pc, #84]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a88:	4a14      	ldr	r2, [pc, #80]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a90:	e005      	b.n	8004a9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a92:	4b12      	ldr	r3, [pc, #72]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a96:	4a11      	ldr	r2, [pc, #68]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004aa4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004aa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aaa:	f7fc fea5 	bl	80017f8 <HAL_GetTick>
 8004aae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ab0:	e008      	b.n	8004ac4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ab2:	f7fc fea1 	bl	80017f8 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e006      	b.n	8004ad2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ac4:	4b05      	ldr	r3, [pc, #20]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	58024400 	.word	0x58024400
 8004ae0:	ffff0007 	.word	0xffff0007

08004ae4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004af2:	4b53      	ldr	r3, [pc, #332]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d101      	bne.n	8004b02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e099      	b.n	8004c36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b02:	4b4f      	ldr	r3, [pc, #316]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a4e      	ldr	r2, [pc, #312]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b0e:	f7fc fe73 	bl	80017f8 <HAL_GetTick>
 8004b12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b14:	e008      	b.n	8004b28 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b16:	f7fc fe6f 	bl	80017f8 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e086      	b.n	8004c36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b28:	4b45      	ldr	r3, [pc, #276]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f0      	bne.n	8004b16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b34:	4b42      	ldr	r3, [pc, #264]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	051b      	lsls	r3, r3, #20
 8004b42:	493f      	ldr	r1, [pc, #252]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	025b      	lsls	r3, r3, #9
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	041b      	lsls	r3, r3, #16
 8004b66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	061b      	lsls	r3, r3, #24
 8004b74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b78:	4931      	ldr	r1, [pc, #196]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b7e:	4b30      	ldr	r3, [pc, #192]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	492d      	ldr	r1, [pc, #180]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b90:	4b2b      	ldr	r3, [pc, #172]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b94:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	4928      	ldr	r1, [pc, #160]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ba2:	4b27      	ldr	r3, [pc, #156]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba6:	4a26      	ldr	r2, [pc, #152]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004bae:	4b24      	ldr	r3, [pc, #144]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bb2:	4b24      	ldr	r3, [pc, #144]	@ (8004c44 <RCCEx_PLL3_Config+0x160>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	69d2      	ldr	r2, [r2, #28]
 8004bba:	00d2      	lsls	r2, r2, #3
 8004bbc:	4920      	ldr	r1, [pc, #128]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d106      	bne.n	8004be2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	4a19      	ldr	r2, [pc, #100]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004bde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004be0:	e00f      	b.n	8004c02 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d106      	bne.n	8004bf6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004be8:	4b15      	ldr	r3, [pc, #84]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bec:	4a14      	ldr	r2, [pc, #80]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004bf4:	e005      	b.n	8004c02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004bf6:	4b12      	ldr	r3, [pc, #72]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfa:	4a11      	ldr	r2, [pc, #68]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bfc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c00:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c02:	4b0f      	ldr	r3, [pc, #60]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a0e      	ldr	r2, [pc, #56]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0e:	f7fc fdf3 	bl	80017f8 <HAL_GetTick>
 8004c12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c14:	e008      	b.n	8004c28 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c16:	f7fc fdef 	bl	80017f8 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e006      	b.n	8004c36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c28:	4b05      	ldr	r3, [pc, #20]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0f0      	beq.n	8004c16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	58024400 	.word	0x58024400
 8004c44:	ffff0007 	.word	0xffff0007

08004c48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e042      	b.n	8004ce0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d106      	bne.n	8004c72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7fc fa0b 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2224      	movs	r2, #36	@ 0x24
 8004c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0201 	bic.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fe1e 	bl	80058d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f8b3 	bl	8004e04 <UART_SetConfig>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e01b      	b.n	8004ce0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fe9d 	bl	8005a18 <UART_CheckIdleState>
 8004cde:	4603      	mov	r3, r0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	@ 0x28
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d17b      	bne.n	8004dfa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <HAL_UART_Transmit+0x26>
 8004d08:	88fb      	ldrh	r3, [r7, #6]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e074      	b.n	8004dfc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2221      	movs	r2, #33	@ 0x21
 8004d1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d22:	f7fc fd69 	bl	80017f8 <HAL_GetTick>
 8004d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	88fa      	ldrh	r2, [r7, #6]
 8004d2c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	88fa      	ldrh	r2, [r7, #6]
 8004d34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d40:	d108      	bne.n	8004d54 <HAL_UART_Transmit+0x6c>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d104      	bne.n	8004d54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	e003      	b.n	8004d5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d5c:	e030      	b.n	8004dc0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2200      	movs	r2, #0
 8004d66:	2180      	movs	r1, #128	@ 0x80
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 feff 	bl	8005b6c <UART_WaitOnFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e03d      	b.n	8004dfc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10b      	bne.n	8004d9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d94:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	3302      	adds	r3, #2
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	e007      	b.n	8004dae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	781a      	ldrb	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	3301      	adds	r3, #1
 8004dac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1c8      	bne.n	8004d5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2140      	movs	r1, #64	@ 0x40
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 fec8 	bl	8005b6c <UART_WaitOnFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e006      	b.n	8004dfc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e000      	b.n	8004dfc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004dfa:	2302      	movs	r3, #2
  }
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3720      	adds	r7, #32
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e08:	b092      	sub	sp, #72	@ 0x48
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4bbe      	ldr	r3, [pc, #760]	@ (800512c <UART_SetConfig+0x328>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4ab3      	ldr	r2, [pc, #716]	@ (8005130 <UART_SetConfig+0x32c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d004      	beq.n	8004e70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	4baf      	ldr	r3, [pc, #700]	@ (8005134 <UART_SetConfig+0x330>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	6812      	ldr	r2, [r2, #0]
 8004e7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e80:	430b      	orrs	r3, r1
 8004e82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8a:	f023 010f 	bic.w	r1, r3, #15
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4aa6      	ldr	r2, [pc, #664]	@ (8005138 <UART_SetConfig+0x334>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d177      	bne.n	8004f94 <UART_SetConfig+0x190>
 8004ea4:	4ba5      	ldr	r3, [pc, #660]	@ (800513c <UART_SetConfig+0x338>)
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eac:	2b28      	cmp	r3, #40	@ 0x28
 8004eae:	d86d      	bhi.n	8004f8c <UART_SetConfig+0x188>
 8004eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb8 <UART_SetConfig+0xb4>)
 8004eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb6:	bf00      	nop
 8004eb8:	08004f5d 	.word	0x08004f5d
 8004ebc:	08004f8d 	.word	0x08004f8d
 8004ec0:	08004f8d 	.word	0x08004f8d
 8004ec4:	08004f8d 	.word	0x08004f8d
 8004ec8:	08004f8d 	.word	0x08004f8d
 8004ecc:	08004f8d 	.word	0x08004f8d
 8004ed0:	08004f8d 	.word	0x08004f8d
 8004ed4:	08004f8d 	.word	0x08004f8d
 8004ed8:	08004f65 	.word	0x08004f65
 8004edc:	08004f8d 	.word	0x08004f8d
 8004ee0:	08004f8d 	.word	0x08004f8d
 8004ee4:	08004f8d 	.word	0x08004f8d
 8004ee8:	08004f8d 	.word	0x08004f8d
 8004eec:	08004f8d 	.word	0x08004f8d
 8004ef0:	08004f8d 	.word	0x08004f8d
 8004ef4:	08004f8d 	.word	0x08004f8d
 8004ef8:	08004f6d 	.word	0x08004f6d
 8004efc:	08004f8d 	.word	0x08004f8d
 8004f00:	08004f8d 	.word	0x08004f8d
 8004f04:	08004f8d 	.word	0x08004f8d
 8004f08:	08004f8d 	.word	0x08004f8d
 8004f0c:	08004f8d 	.word	0x08004f8d
 8004f10:	08004f8d 	.word	0x08004f8d
 8004f14:	08004f8d 	.word	0x08004f8d
 8004f18:	08004f75 	.word	0x08004f75
 8004f1c:	08004f8d 	.word	0x08004f8d
 8004f20:	08004f8d 	.word	0x08004f8d
 8004f24:	08004f8d 	.word	0x08004f8d
 8004f28:	08004f8d 	.word	0x08004f8d
 8004f2c:	08004f8d 	.word	0x08004f8d
 8004f30:	08004f8d 	.word	0x08004f8d
 8004f34:	08004f8d 	.word	0x08004f8d
 8004f38:	08004f7d 	.word	0x08004f7d
 8004f3c:	08004f8d 	.word	0x08004f8d
 8004f40:	08004f8d 	.word	0x08004f8d
 8004f44:	08004f8d 	.word	0x08004f8d
 8004f48:	08004f8d 	.word	0x08004f8d
 8004f4c:	08004f8d 	.word	0x08004f8d
 8004f50:	08004f8d 	.word	0x08004f8d
 8004f54:	08004f8d 	.word	0x08004f8d
 8004f58:	08004f85 	.word	0x08004f85
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f62:	e222      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004f64:	2304      	movs	r3, #4
 8004f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f6a:	e21e      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004f6c:	2308      	movs	r3, #8
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f72:	e21a      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004f74:	2310      	movs	r3, #16
 8004f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f7a:	e216      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004f7c:	2320      	movs	r3, #32
 8004f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f82:	e212      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004f84:	2340      	movs	r3, #64	@ 0x40
 8004f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8a:	e20e      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004f8c:	2380      	movs	r3, #128	@ 0x80
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f92:	e20a      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a69      	ldr	r2, [pc, #420]	@ (8005140 <UART_SetConfig+0x33c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d130      	bne.n	8005000 <UART_SetConfig+0x1fc>
 8004f9e:	4b67      	ldr	r3, [pc, #412]	@ (800513c <UART_SetConfig+0x338>)
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	2b05      	cmp	r3, #5
 8004fa8:	d826      	bhi.n	8004ff8 <UART_SetConfig+0x1f4>
 8004faa:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb0 <UART_SetConfig+0x1ac>)
 8004fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb0:	08004fc9 	.word	0x08004fc9
 8004fb4:	08004fd1 	.word	0x08004fd1
 8004fb8:	08004fd9 	.word	0x08004fd9
 8004fbc:	08004fe1 	.word	0x08004fe1
 8004fc0:	08004fe9 	.word	0x08004fe9
 8004fc4:	08004ff1 	.word	0x08004ff1
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fce:	e1ec      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fd6:	e1e8      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004fd8:	2308      	movs	r3, #8
 8004fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fde:	e1e4      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fe6:	e1e0      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004fe8:	2320      	movs	r3, #32
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fee:	e1dc      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004ff0:	2340      	movs	r3, #64	@ 0x40
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ff6:	e1d8      	b.n	80053aa <UART_SetConfig+0x5a6>
 8004ff8:	2380      	movs	r3, #128	@ 0x80
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ffe:	e1d4      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a4f      	ldr	r2, [pc, #316]	@ (8005144 <UART_SetConfig+0x340>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d130      	bne.n	800506c <UART_SetConfig+0x268>
 800500a:	4b4c      	ldr	r3, [pc, #304]	@ (800513c <UART_SetConfig+0x338>)
 800500c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	2b05      	cmp	r3, #5
 8005014:	d826      	bhi.n	8005064 <UART_SetConfig+0x260>
 8005016:	a201      	add	r2, pc, #4	@ (adr r2, 800501c <UART_SetConfig+0x218>)
 8005018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501c:	08005035 	.word	0x08005035
 8005020:	0800503d 	.word	0x0800503d
 8005024:	08005045 	.word	0x08005045
 8005028:	0800504d 	.word	0x0800504d
 800502c:	08005055 	.word	0x08005055
 8005030:	0800505d 	.word	0x0800505d
 8005034:	2300      	movs	r3, #0
 8005036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800503a:	e1b6      	b.n	80053aa <UART_SetConfig+0x5a6>
 800503c:	2304      	movs	r3, #4
 800503e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005042:	e1b2      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005044:	2308      	movs	r3, #8
 8005046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800504a:	e1ae      	b.n	80053aa <UART_SetConfig+0x5a6>
 800504c:	2310      	movs	r3, #16
 800504e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005052:	e1aa      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005054:	2320      	movs	r3, #32
 8005056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800505a:	e1a6      	b.n	80053aa <UART_SetConfig+0x5a6>
 800505c:	2340      	movs	r3, #64	@ 0x40
 800505e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005062:	e1a2      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005064:	2380      	movs	r3, #128	@ 0x80
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506a:	e19e      	b.n	80053aa <UART_SetConfig+0x5a6>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a35      	ldr	r2, [pc, #212]	@ (8005148 <UART_SetConfig+0x344>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d130      	bne.n	80050d8 <UART_SetConfig+0x2d4>
 8005076:	4b31      	ldr	r3, [pc, #196]	@ (800513c <UART_SetConfig+0x338>)
 8005078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	2b05      	cmp	r3, #5
 8005080:	d826      	bhi.n	80050d0 <UART_SetConfig+0x2cc>
 8005082:	a201      	add	r2, pc, #4	@ (adr r2, 8005088 <UART_SetConfig+0x284>)
 8005084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005088:	080050a1 	.word	0x080050a1
 800508c:	080050a9 	.word	0x080050a9
 8005090:	080050b1 	.word	0x080050b1
 8005094:	080050b9 	.word	0x080050b9
 8005098:	080050c1 	.word	0x080050c1
 800509c:	080050c9 	.word	0x080050c9
 80050a0:	2300      	movs	r3, #0
 80050a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050a6:	e180      	b.n	80053aa <UART_SetConfig+0x5a6>
 80050a8:	2304      	movs	r3, #4
 80050aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ae:	e17c      	b.n	80053aa <UART_SetConfig+0x5a6>
 80050b0:	2308      	movs	r3, #8
 80050b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050b6:	e178      	b.n	80053aa <UART_SetConfig+0x5a6>
 80050b8:	2310      	movs	r3, #16
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050be:	e174      	b.n	80053aa <UART_SetConfig+0x5a6>
 80050c0:	2320      	movs	r3, #32
 80050c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050c6:	e170      	b.n	80053aa <UART_SetConfig+0x5a6>
 80050c8:	2340      	movs	r3, #64	@ 0x40
 80050ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ce:	e16c      	b.n	80053aa <UART_SetConfig+0x5a6>
 80050d0:	2380      	movs	r3, #128	@ 0x80
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d6:	e168      	b.n	80053aa <UART_SetConfig+0x5a6>
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1b      	ldr	r2, [pc, #108]	@ (800514c <UART_SetConfig+0x348>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d142      	bne.n	8005168 <UART_SetConfig+0x364>
 80050e2:	4b16      	ldr	r3, [pc, #88]	@ (800513c <UART_SetConfig+0x338>)
 80050e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	2b05      	cmp	r3, #5
 80050ec:	d838      	bhi.n	8005160 <UART_SetConfig+0x35c>
 80050ee:	a201      	add	r2, pc, #4	@ (adr r2, 80050f4 <UART_SetConfig+0x2f0>)
 80050f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f4:	0800510d 	.word	0x0800510d
 80050f8:	08005115 	.word	0x08005115
 80050fc:	0800511d 	.word	0x0800511d
 8005100:	08005125 	.word	0x08005125
 8005104:	08005151 	.word	0x08005151
 8005108:	08005159 	.word	0x08005159
 800510c:	2300      	movs	r3, #0
 800510e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005112:	e14a      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005114:	2304      	movs	r3, #4
 8005116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800511a:	e146      	b.n	80053aa <UART_SetConfig+0x5a6>
 800511c:	2308      	movs	r3, #8
 800511e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005122:	e142      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005124:	2310      	movs	r3, #16
 8005126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800512a:	e13e      	b.n	80053aa <UART_SetConfig+0x5a6>
 800512c:	cfff69f3 	.word	0xcfff69f3
 8005130:	58000c00 	.word	0x58000c00
 8005134:	11fff4ff 	.word	0x11fff4ff
 8005138:	40011000 	.word	0x40011000
 800513c:	58024400 	.word	0x58024400
 8005140:	40004400 	.word	0x40004400
 8005144:	40004800 	.word	0x40004800
 8005148:	40004c00 	.word	0x40004c00
 800514c:	40005000 	.word	0x40005000
 8005150:	2320      	movs	r3, #32
 8005152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005156:	e128      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005158:	2340      	movs	r3, #64	@ 0x40
 800515a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800515e:	e124      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005160:	2380      	movs	r3, #128	@ 0x80
 8005162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005166:	e120      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4acb      	ldr	r2, [pc, #812]	@ (800549c <UART_SetConfig+0x698>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d176      	bne.n	8005260 <UART_SetConfig+0x45c>
 8005172:	4bcb      	ldr	r3, [pc, #812]	@ (80054a0 <UART_SetConfig+0x69c>)
 8005174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005176:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800517a:	2b28      	cmp	r3, #40	@ 0x28
 800517c:	d86c      	bhi.n	8005258 <UART_SetConfig+0x454>
 800517e:	a201      	add	r2, pc, #4	@ (adr r2, 8005184 <UART_SetConfig+0x380>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	08005229 	.word	0x08005229
 8005188:	08005259 	.word	0x08005259
 800518c:	08005259 	.word	0x08005259
 8005190:	08005259 	.word	0x08005259
 8005194:	08005259 	.word	0x08005259
 8005198:	08005259 	.word	0x08005259
 800519c:	08005259 	.word	0x08005259
 80051a0:	08005259 	.word	0x08005259
 80051a4:	08005231 	.word	0x08005231
 80051a8:	08005259 	.word	0x08005259
 80051ac:	08005259 	.word	0x08005259
 80051b0:	08005259 	.word	0x08005259
 80051b4:	08005259 	.word	0x08005259
 80051b8:	08005259 	.word	0x08005259
 80051bc:	08005259 	.word	0x08005259
 80051c0:	08005259 	.word	0x08005259
 80051c4:	08005239 	.word	0x08005239
 80051c8:	08005259 	.word	0x08005259
 80051cc:	08005259 	.word	0x08005259
 80051d0:	08005259 	.word	0x08005259
 80051d4:	08005259 	.word	0x08005259
 80051d8:	08005259 	.word	0x08005259
 80051dc:	08005259 	.word	0x08005259
 80051e0:	08005259 	.word	0x08005259
 80051e4:	08005241 	.word	0x08005241
 80051e8:	08005259 	.word	0x08005259
 80051ec:	08005259 	.word	0x08005259
 80051f0:	08005259 	.word	0x08005259
 80051f4:	08005259 	.word	0x08005259
 80051f8:	08005259 	.word	0x08005259
 80051fc:	08005259 	.word	0x08005259
 8005200:	08005259 	.word	0x08005259
 8005204:	08005249 	.word	0x08005249
 8005208:	08005259 	.word	0x08005259
 800520c:	08005259 	.word	0x08005259
 8005210:	08005259 	.word	0x08005259
 8005214:	08005259 	.word	0x08005259
 8005218:	08005259 	.word	0x08005259
 800521c:	08005259 	.word	0x08005259
 8005220:	08005259 	.word	0x08005259
 8005224:	08005251 	.word	0x08005251
 8005228:	2301      	movs	r3, #1
 800522a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800522e:	e0bc      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005230:	2304      	movs	r3, #4
 8005232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005236:	e0b8      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005238:	2308      	movs	r3, #8
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800523e:	e0b4      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005240:	2310      	movs	r3, #16
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005246:	e0b0      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005248:	2320      	movs	r3, #32
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800524e:	e0ac      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005250:	2340      	movs	r3, #64	@ 0x40
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005256:	e0a8      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005258:	2380      	movs	r3, #128	@ 0x80
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525e:	e0a4      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a8f      	ldr	r2, [pc, #572]	@ (80054a4 <UART_SetConfig+0x6a0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d130      	bne.n	80052cc <UART_SetConfig+0x4c8>
 800526a:	4b8d      	ldr	r3, [pc, #564]	@ (80054a0 <UART_SetConfig+0x69c>)
 800526c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	2b05      	cmp	r3, #5
 8005274:	d826      	bhi.n	80052c4 <UART_SetConfig+0x4c0>
 8005276:	a201      	add	r2, pc, #4	@ (adr r2, 800527c <UART_SetConfig+0x478>)
 8005278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527c:	08005295 	.word	0x08005295
 8005280:	0800529d 	.word	0x0800529d
 8005284:	080052a5 	.word	0x080052a5
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052b5 	.word	0x080052b5
 8005290:	080052bd 	.word	0x080052bd
 8005294:	2300      	movs	r3, #0
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800529a:	e086      	b.n	80053aa <UART_SetConfig+0x5a6>
 800529c:	2304      	movs	r3, #4
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052a2:	e082      	b.n	80053aa <UART_SetConfig+0x5a6>
 80052a4:	2308      	movs	r3, #8
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052aa:	e07e      	b.n	80053aa <UART_SetConfig+0x5a6>
 80052ac:	2310      	movs	r3, #16
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b2:	e07a      	b.n	80053aa <UART_SetConfig+0x5a6>
 80052b4:	2320      	movs	r3, #32
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ba:	e076      	b.n	80053aa <UART_SetConfig+0x5a6>
 80052bc:	2340      	movs	r3, #64	@ 0x40
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c2:	e072      	b.n	80053aa <UART_SetConfig+0x5a6>
 80052c4:	2380      	movs	r3, #128	@ 0x80
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ca:	e06e      	b.n	80053aa <UART_SetConfig+0x5a6>
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a75      	ldr	r2, [pc, #468]	@ (80054a8 <UART_SetConfig+0x6a4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d130      	bne.n	8005338 <UART_SetConfig+0x534>
 80052d6:	4b72      	ldr	r3, [pc, #456]	@ (80054a0 <UART_SetConfig+0x69c>)
 80052d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	2b05      	cmp	r3, #5
 80052e0:	d826      	bhi.n	8005330 <UART_SetConfig+0x52c>
 80052e2:	a201      	add	r2, pc, #4	@ (adr r2, 80052e8 <UART_SetConfig+0x4e4>)
 80052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e8:	08005301 	.word	0x08005301
 80052ec:	08005309 	.word	0x08005309
 80052f0:	08005311 	.word	0x08005311
 80052f4:	08005319 	.word	0x08005319
 80052f8:	08005321 	.word	0x08005321
 80052fc:	08005329 	.word	0x08005329
 8005300:	2300      	movs	r3, #0
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005306:	e050      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005308:	2304      	movs	r3, #4
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800530e:	e04c      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005310:	2308      	movs	r3, #8
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005316:	e048      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005318:	2310      	movs	r3, #16
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531e:	e044      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005320:	2320      	movs	r3, #32
 8005322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005326:	e040      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005328:	2340      	movs	r3, #64	@ 0x40
 800532a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532e:	e03c      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005330:	2380      	movs	r3, #128	@ 0x80
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005336:	e038      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a5b      	ldr	r2, [pc, #364]	@ (80054ac <UART_SetConfig+0x6a8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d130      	bne.n	80053a4 <UART_SetConfig+0x5a0>
 8005342:	4b57      	ldr	r3, [pc, #348]	@ (80054a0 <UART_SetConfig+0x69c>)
 8005344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	2b05      	cmp	r3, #5
 800534c:	d826      	bhi.n	800539c <UART_SetConfig+0x598>
 800534e:	a201      	add	r2, pc, #4	@ (adr r2, 8005354 <UART_SetConfig+0x550>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	0800536d 	.word	0x0800536d
 8005358:	08005375 	.word	0x08005375
 800535c:	0800537d 	.word	0x0800537d
 8005360:	08005385 	.word	0x08005385
 8005364:	0800538d 	.word	0x0800538d
 8005368:	08005395 	.word	0x08005395
 800536c:	2302      	movs	r3, #2
 800536e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005372:	e01a      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005374:	2304      	movs	r3, #4
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537a:	e016      	b.n	80053aa <UART_SetConfig+0x5a6>
 800537c:	2308      	movs	r3, #8
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005382:	e012      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005384:	2310      	movs	r3, #16
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538a:	e00e      	b.n	80053aa <UART_SetConfig+0x5a6>
 800538c:	2320      	movs	r3, #32
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005392:	e00a      	b.n	80053aa <UART_SetConfig+0x5a6>
 8005394:	2340      	movs	r3, #64	@ 0x40
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539a:	e006      	b.n	80053aa <UART_SetConfig+0x5a6>
 800539c:	2380      	movs	r3, #128	@ 0x80
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a2:	e002      	b.n	80053aa <UART_SetConfig+0x5a6>
 80053a4:	2380      	movs	r3, #128	@ 0x80
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a3f      	ldr	r2, [pc, #252]	@ (80054ac <UART_SetConfig+0x6a8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	f040 80f8 	bne.w	80055a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	dc46      	bgt.n	800544c <UART_SetConfig+0x648>
 80053be:	2b02      	cmp	r3, #2
 80053c0:	f2c0 8082 	blt.w	80054c8 <UART_SetConfig+0x6c4>
 80053c4:	3b02      	subs	r3, #2
 80053c6:	2b1e      	cmp	r3, #30
 80053c8:	d87e      	bhi.n	80054c8 <UART_SetConfig+0x6c4>
 80053ca:	a201      	add	r2, pc, #4	@ (adr r2, 80053d0 <UART_SetConfig+0x5cc>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	08005453 	.word	0x08005453
 80053d4:	080054c9 	.word	0x080054c9
 80053d8:	0800545b 	.word	0x0800545b
 80053dc:	080054c9 	.word	0x080054c9
 80053e0:	080054c9 	.word	0x080054c9
 80053e4:	080054c9 	.word	0x080054c9
 80053e8:	0800546b 	.word	0x0800546b
 80053ec:	080054c9 	.word	0x080054c9
 80053f0:	080054c9 	.word	0x080054c9
 80053f4:	080054c9 	.word	0x080054c9
 80053f8:	080054c9 	.word	0x080054c9
 80053fc:	080054c9 	.word	0x080054c9
 8005400:	080054c9 	.word	0x080054c9
 8005404:	080054c9 	.word	0x080054c9
 8005408:	0800547b 	.word	0x0800547b
 800540c:	080054c9 	.word	0x080054c9
 8005410:	080054c9 	.word	0x080054c9
 8005414:	080054c9 	.word	0x080054c9
 8005418:	080054c9 	.word	0x080054c9
 800541c:	080054c9 	.word	0x080054c9
 8005420:	080054c9 	.word	0x080054c9
 8005424:	080054c9 	.word	0x080054c9
 8005428:	080054c9 	.word	0x080054c9
 800542c:	080054c9 	.word	0x080054c9
 8005430:	080054c9 	.word	0x080054c9
 8005434:	080054c9 	.word	0x080054c9
 8005438:	080054c9 	.word	0x080054c9
 800543c:	080054c9 	.word	0x080054c9
 8005440:	080054c9 	.word	0x080054c9
 8005444:	080054c9 	.word	0x080054c9
 8005448:	080054bb 	.word	0x080054bb
 800544c:	2b40      	cmp	r3, #64	@ 0x40
 800544e:	d037      	beq.n	80054c0 <UART_SetConfig+0x6bc>
 8005450:	e03a      	b.n	80054c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005452:	f7fe ffd7 	bl	8004404 <HAL_RCCEx_GetD3PCLK1Freq>
 8005456:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005458:	e03c      	b.n	80054d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800545a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe ffe6 	bl	8004430 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005468:	e034      	b.n	80054d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800546a:	f107 0318 	add.w	r3, r7, #24
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff f932 	bl	80046d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005478:	e02c      	b.n	80054d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800547a:	4b09      	ldr	r3, [pc, #36]	@ (80054a0 <UART_SetConfig+0x69c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d016      	beq.n	80054b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005486:	4b06      	ldr	r3, [pc, #24]	@ (80054a0 <UART_SetConfig+0x69c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	08db      	lsrs	r3, r3, #3
 800548c:	f003 0303 	and.w	r3, r3, #3
 8005490:	4a07      	ldr	r2, [pc, #28]	@ (80054b0 <UART_SetConfig+0x6ac>)
 8005492:	fa22 f303 	lsr.w	r3, r2, r3
 8005496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005498:	e01c      	b.n	80054d4 <UART_SetConfig+0x6d0>
 800549a:	bf00      	nop
 800549c:	40011400 	.word	0x40011400
 80054a0:	58024400 	.word	0x58024400
 80054a4:	40007800 	.word	0x40007800
 80054a8:	40007c00 	.word	0x40007c00
 80054ac:	58000c00 	.word	0x58000c00
 80054b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80054b4:	4b9d      	ldr	r3, [pc, #628]	@ (800572c <UART_SetConfig+0x928>)
 80054b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054b8:	e00c      	b.n	80054d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054ba:	4b9d      	ldr	r3, [pc, #628]	@ (8005730 <UART_SetConfig+0x92c>)
 80054bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054be:	e009      	b.n	80054d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054c6:	e005      	b.n	80054d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80054d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 81de 	beq.w	8005898 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	4a94      	ldr	r2, [pc, #592]	@ (8005734 <UART_SetConfig+0x930>)
 80054e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054e6:	461a      	mov	r2, r3
 80054e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80054ee:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	4613      	mov	r3, r2
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	4413      	add	r3, r2
 80054fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d305      	bcc.n	800550c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005508:	429a      	cmp	r2, r3
 800550a:	d903      	bls.n	8005514 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005512:	e1c1      	b.n	8005898 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005516:	2200      	movs	r2, #0
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	60fa      	str	r2, [r7, #12]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	4a84      	ldr	r2, [pc, #528]	@ (8005734 <UART_SetConfig+0x930>)
 8005522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005526:	b29b      	uxth	r3, r3
 8005528:	2200      	movs	r2, #0
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	607a      	str	r2, [r7, #4]
 800552e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005532:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005536:	f7fb f8e7 	bl	8000708 <__aeabi_uldivmod>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4610      	mov	r0, r2
 8005540:	4619      	mov	r1, r3
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	020b      	lsls	r3, r1, #8
 800554c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005550:	0202      	lsls	r2, r0, #8
 8005552:	6979      	ldr	r1, [r7, #20]
 8005554:	6849      	ldr	r1, [r1, #4]
 8005556:	0849      	lsrs	r1, r1, #1
 8005558:	2000      	movs	r0, #0
 800555a:	460c      	mov	r4, r1
 800555c:	4605      	mov	r5, r0
 800555e:	eb12 0804 	adds.w	r8, r2, r4
 8005562:	eb43 0905 	adc.w	r9, r3, r5
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	469a      	mov	sl, r3
 800556e:	4693      	mov	fp, r2
 8005570:	4652      	mov	r2, sl
 8005572:	465b      	mov	r3, fp
 8005574:	4640      	mov	r0, r8
 8005576:	4649      	mov	r1, r9
 8005578:	f7fb f8c6 	bl	8000708 <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4613      	mov	r3, r2
 8005582:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005586:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800558a:	d308      	bcc.n	800559e <UART_SetConfig+0x79a>
 800558c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005592:	d204      	bcs.n	800559e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800559a:	60da      	str	r2, [r3, #12]
 800559c:	e17c      	b.n	8005898 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80055a4:	e178      	b.n	8005898 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ae:	f040 80c5 	bne.w	800573c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80055b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	dc48      	bgt.n	800564c <UART_SetConfig+0x848>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	db7b      	blt.n	80056b6 <UART_SetConfig+0x8b2>
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d879      	bhi.n	80056b6 <UART_SetConfig+0x8b2>
 80055c2:	a201      	add	r2, pc, #4	@ (adr r2, 80055c8 <UART_SetConfig+0x7c4>)
 80055c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c8:	08005653 	.word	0x08005653
 80055cc:	0800565b 	.word	0x0800565b
 80055d0:	080056b7 	.word	0x080056b7
 80055d4:	080056b7 	.word	0x080056b7
 80055d8:	08005663 	.word	0x08005663
 80055dc:	080056b7 	.word	0x080056b7
 80055e0:	080056b7 	.word	0x080056b7
 80055e4:	080056b7 	.word	0x080056b7
 80055e8:	08005673 	.word	0x08005673
 80055ec:	080056b7 	.word	0x080056b7
 80055f0:	080056b7 	.word	0x080056b7
 80055f4:	080056b7 	.word	0x080056b7
 80055f8:	080056b7 	.word	0x080056b7
 80055fc:	080056b7 	.word	0x080056b7
 8005600:	080056b7 	.word	0x080056b7
 8005604:	080056b7 	.word	0x080056b7
 8005608:	08005683 	.word	0x08005683
 800560c:	080056b7 	.word	0x080056b7
 8005610:	080056b7 	.word	0x080056b7
 8005614:	080056b7 	.word	0x080056b7
 8005618:	080056b7 	.word	0x080056b7
 800561c:	080056b7 	.word	0x080056b7
 8005620:	080056b7 	.word	0x080056b7
 8005624:	080056b7 	.word	0x080056b7
 8005628:	080056b7 	.word	0x080056b7
 800562c:	080056b7 	.word	0x080056b7
 8005630:	080056b7 	.word	0x080056b7
 8005634:	080056b7 	.word	0x080056b7
 8005638:	080056b7 	.word	0x080056b7
 800563c:	080056b7 	.word	0x080056b7
 8005640:	080056b7 	.word	0x080056b7
 8005644:	080056b7 	.word	0x080056b7
 8005648:	080056a9 	.word	0x080056a9
 800564c:	2b40      	cmp	r3, #64	@ 0x40
 800564e:	d02e      	beq.n	80056ae <UART_SetConfig+0x8aa>
 8005650:	e031      	b.n	80056b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005652:	f7fd fca1 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 8005656:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005658:	e033      	b.n	80056c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800565a:	f7fd fcb3 	bl	8002fc4 <HAL_RCC_GetPCLK2Freq>
 800565e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005660:	e02f      	b.n	80056c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005662:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005666:	4618      	mov	r0, r3
 8005668:	f7fe fee2 	bl	8004430 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800566c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005670:	e027      	b.n	80056c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005672:	f107 0318 	add.w	r3, r7, #24
 8005676:	4618      	mov	r0, r3
 8005678:	f7ff f82e 	bl	80046d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005680:	e01f      	b.n	80056c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005682:	4b2d      	ldr	r3, [pc, #180]	@ (8005738 <UART_SetConfig+0x934>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d009      	beq.n	80056a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800568e:	4b2a      	ldr	r3, [pc, #168]	@ (8005738 <UART_SetConfig+0x934>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	08db      	lsrs	r3, r3, #3
 8005694:	f003 0303 	and.w	r3, r3, #3
 8005698:	4a24      	ldr	r2, [pc, #144]	@ (800572c <UART_SetConfig+0x928>)
 800569a:	fa22 f303 	lsr.w	r3, r2, r3
 800569e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056a0:	e00f      	b.n	80056c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80056a2:	4b22      	ldr	r3, [pc, #136]	@ (800572c <UART_SetConfig+0x928>)
 80056a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056a6:	e00c      	b.n	80056c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056a8:	4b21      	ldr	r3, [pc, #132]	@ (8005730 <UART_SetConfig+0x92c>)
 80056aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056ac:	e009      	b.n	80056c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056b4:	e005      	b.n	80056c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80056c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 80e7 	beq.w	8005898 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ce:	4a19      	ldr	r2, [pc, #100]	@ (8005734 <UART_SetConfig+0x930>)
 80056d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056d4:	461a      	mov	r2, r3
 80056d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80056dc:	005a      	lsls	r2, r3, #1
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	085b      	lsrs	r3, r3, #1
 80056e4:	441a      	add	r2, r3
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f2:	2b0f      	cmp	r3, #15
 80056f4:	d916      	bls.n	8005724 <UART_SetConfig+0x920>
 80056f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056fc:	d212      	bcs.n	8005724 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005700:	b29b      	uxth	r3, r3
 8005702:	f023 030f 	bic.w	r3, r3, #15
 8005706:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570a:	085b      	lsrs	r3, r3, #1
 800570c:	b29b      	uxth	r3, r3
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	b29a      	uxth	r2, r3
 8005714:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005716:	4313      	orrs	r3, r2
 8005718:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005720:	60da      	str	r2, [r3, #12]
 8005722:	e0b9      	b.n	8005898 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800572a:	e0b5      	b.n	8005898 <UART_SetConfig+0xa94>
 800572c:	03d09000 	.word	0x03d09000
 8005730:	003d0900 	.word	0x003d0900
 8005734:	0800ce28 	.word	0x0800ce28
 8005738:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800573c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005740:	2b20      	cmp	r3, #32
 8005742:	dc49      	bgt.n	80057d8 <UART_SetConfig+0x9d4>
 8005744:	2b00      	cmp	r3, #0
 8005746:	db7c      	blt.n	8005842 <UART_SetConfig+0xa3e>
 8005748:	2b20      	cmp	r3, #32
 800574a:	d87a      	bhi.n	8005842 <UART_SetConfig+0xa3e>
 800574c:	a201      	add	r2, pc, #4	@ (adr r2, 8005754 <UART_SetConfig+0x950>)
 800574e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005752:	bf00      	nop
 8005754:	080057df 	.word	0x080057df
 8005758:	080057e7 	.word	0x080057e7
 800575c:	08005843 	.word	0x08005843
 8005760:	08005843 	.word	0x08005843
 8005764:	080057ef 	.word	0x080057ef
 8005768:	08005843 	.word	0x08005843
 800576c:	08005843 	.word	0x08005843
 8005770:	08005843 	.word	0x08005843
 8005774:	080057ff 	.word	0x080057ff
 8005778:	08005843 	.word	0x08005843
 800577c:	08005843 	.word	0x08005843
 8005780:	08005843 	.word	0x08005843
 8005784:	08005843 	.word	0x08005843
 8005788:	08005843 	.word	0x08005843
 800578c:	08005843 	.word	0x08005843
 8005790:	08005843 	.word	0x08005843
 8005794:	0800580f 	.word	0x0800580f
 8005798:	08005843 	.word	0x08005843
 800579c:	08005843 	.word	0x08005843
 80057a0:	08005843 	.word	0x08005843
 80057a4:	08005843 	.word	0x08005843
 80057a8:	08005843 	.word	0x08005843
 80057ac:	08005843 	.word	0x08005843
 80057b0:	08005843 	.word	0x08005843
 80057b4:	08005843 	.word	0x08005843
 80057b8:	08005843 	.word	0x08005843
 80057bc:	08005843 	.word	0x08005843
 80057c0:	08005843 	.word	0x08005843
 80057c4:	08005843 	.word	0x08005843
 80057c8:	08005843 	.word	0x08005843
 80057cc:	08005843 	.word	0x08005843
 80057d0:	08005843 	.word	0x08005843
 80057d4:	08005835 	.word	0x08005835
 80057d8:	2b40      	cmp	r3, #64	@ 0x40
 80057da:	d02e      	beq.n	800583a <UART_SetConfig+0xa36>
 80057dc:	e031      	b.n	8005842 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057de:	f7fd fbdb 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 80057e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057e4:	e033      	b.n	800584e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057e6:	f7fd fbed 	bl	8002fc4 <HAL_RCC_GetPCLK2Freq>
 80057ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057ec:	e02f      	b.n	800584e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fe fe1c 	bl	8004430 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057fc:	e027      	b.n	800584e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057fe:	f107 0318 	add.w	r3, r7, #24
 8005802:	4618      	mov	r0, r3
 8005804:	f7fe ff68 	bl	80046d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800580c:	e01f      	b.n	800584e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800580e:	4b2d      	ldr	r3, [pc, #180]	@ (80058c4 <UART_SetConfig+0xac0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b00      	cmp	r3, #0
 8005818:	d009      	beq.n	800582e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800581a:	4b2a      	ldr	r3, [pc, #168]	@ (80058c4 <UART_SetConfig+0xac0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	08db      	lsrs	r3, r3, #3
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	4a28      	ldr	r2, [pc, #160]	@ (80058c8 <UART_SetConfig+0xac4>)
 8005826:	fa22 f303 	lsr.w	r3, r2, r3
 800582a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800582c:	e00f      	b.n	800584e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800582e:	4b26      	ldr	r3, [pc, #152]	@ (80058c8 <UART_SetConfig+0xac4>)
 8005830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005832:	e00c      	b.n	800584e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005834:	4b25      	ldr	r3, [pc, #148]	@ (80058cc <UART_SetConfig+0xac8>)
 8005836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005838:	e009      	b.n	800584e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800583e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005840:	e005      	b.n	800584e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800584c:	bf00      	nop
    }

    if (pclk != 0U)
 800584e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005850:	2b00      	cmp	r3, #0
 8005852:	d021      	beq.n	8005898 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005858:	4a1d      	ldr	r2, [pc, #116]	@ (80058d0 <UART_SetConfig+0xacc>)
 800585a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800585e:	461a      	mov	r2, r3
 8005860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005862:	fbb3 f2f2 	udiv	r2, r3, r2
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	085b      	lsrs	r3, r3, #1
 800586c:	441a      	add	r2, r3
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	fbb2 f3f3 	udiv	r3, r2, r3
 8005876:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587a:	2b0f      	cmp	r3, #15
 800587c:	d909      	bls.n	8005892 <UART_SetConfig+0xa8e>
 800587e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005884:	d205      	bcs.n	8005892 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005888:	b29a      	uxth	r2, r3
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60da      	str	r2, [r3, #12]
 8005890:	e002      	b.n	8005898 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2201      	movs	r2, #1
 800589c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2200      	movs	r2, #0
 80058ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2200      	movs	r2, #0
 80058b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80058b4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3748      	adds	r7, #72	@ 0x48
 80058bc:	46bd      	mov	sp, r7
 80058be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058c2:	bf00      	nop
 80058c4:	58024400 	.word	0x58024400
 80058c8:	03d09000 	.word	0x03d09000
 80058cc:	003d0900 	.word	0x003d0900
 80058d0:	0800ce28 	.word	0x0800ce28

080058d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005946:	f003 0304 	and.w	r3, r3, #4
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d01a      	beq.n	80059ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059d2:	d10a      	bne.n	80059ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	605a      	str	r2, [r3, #4]
  }
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b098      	sub	sp, #96	@ 0x60
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a28:	f7fb fee6 	bl	80017f8 <HAL_GetTick>
 8005a2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d12f      	bne.n	8005a9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a44:	2200      	movs	r2, #0
 8005a46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f88e 	bl	8005b6c <UART_WaitOnFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d022      	beq.n	8005a9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a5e:	e853 3f00 	ldrex	r3, [r3]
 8005a62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	461a      	mov	r2, r3
 8005a72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a74:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e6      	bne.n	8005a56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e063      	b.n	8005b64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d149      	bne.n	8005b3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aaa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f857 	bl	8005b6c <UART_WaitOnFlagUntilTimeout>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d03c      	beq.n	8005b3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	e853 3f00 	ldrex	r3, [r3]
 8005ad0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ae2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ae4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e6      	bne.n	8005ac4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3308      	adds	r3, #8
 8005afc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	e853 3f00 	ldrex	r3, [r3]
 8005b04:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f023 0301 	bic.w	r3, r3, #1
 8005b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3308      	adds	r3, #8
 8005b14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b16:	61fa      	str	r2, [r7, #28]
 8005b18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	69b9      	ldr	r1, [r7, #24]
 8005b1c:	69fa      	ldr	r2, [r7, #28]
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	617b      	str	r3, [r7, #20]
   return(result);
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1e5      	bne.n	8005af6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e012      	b.n	8005b64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3758      	adds	r7, #88	@ 0x58
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b7c:	e04f      	b.n	8005c1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b84:	d04b      	beq.n	8005c1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b86:	f7fb fe37 	bl	80017f8 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d302      	bcc.n	8005b9c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e04e      	b.n	8005c3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d037      	beq.n	8005c1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b80      	cmp	r3, #128	@ 0x80
 8005bb2:	d034      	beq.n	8005c1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b40      	cmp	r3, #64	@ 0x40
 8005bb8:	d031      	beq.n	8005c1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	f003 0308 	and.w	r3, r3, #8
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d110      	bne.n	8005bea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2208      	movs	r2, #8
 8005bce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f839 	bl	8005c48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2208      	movs	r2, #8
 8005bda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e029      	b.n	8005c3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69db      	ldr	r3, [r3, #28]
 8005bf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bf8:	d111      	bne.n	8005c1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f81f 	bl	8005c48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e00f      	b.n	8005c3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69da      	ldr	r2, [r3, #28]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4013      	ands	r3, r2
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	bf0c      	ite	eq
 8005c2e:	2301      	moveq	r3, #1
 8005c30:	2300      	movne	r3, #0
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d0a0      	beq.n	8005b7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b095      	sub	sp, #84	@ 0x54
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c70:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c76:	e841 2300 	strex	r3, r2, [r1]
 8005c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1e6      	bne.n	8005c50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3308      	adds	r3, #8
 8005c88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	4b1e      	ldr	r3, [pc, #120]	@ (8005d10 <UART_EndRxTransfer+0xc8>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3308      	adds	r3, #8
 8005ca0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ca2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ca8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005caa:	e841 2300 	strex	r3, r2, [r1]
 8005cae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e5      	bne.n	8005c82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d118      	bne.n	8005cf0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	e853 3f00 	ldrex	r3, [r3]
 8005cca:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f023 0310 	bic.w	r3, r3, #16
 8005cd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cdc:	61bb      	str	r3, [r7, #24]
 8005cde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	6979      	ldr	r1, [r7, #20]
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e6      	bne.n	8005cbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005d04:	bf00      	nop
 8005d06:	3754      	adds	r7, #84	@ 0x54
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	effffffe 	.word	0xeffffffe

08005d14 <__NVIC_SetPriority>:
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	6039      	str	r1, [r7, #0]
 8005d1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	db0a      	blt.n	8005d3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	490c      	ldr	r1, [pc, #48]	@ (8005d60 <__NVIC_SetPriority+0x4c>)
 8005d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d32:	0112      	lsls	r2, r2, #4
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	440b      	add	r3, r1
 8005d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005d3c:	e00a      	b.n	8005d54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	4908      	ldr	r1, [pc, #32]	@ (8005d64 <__NVIC_SetPriority+0x50>)
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	3b04      	subs	r3, #4
 8005d4c:	0112      	lsls	r2, r2, #4
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	440b      	add	r3, r1
 8005d52:	761a      	strb	r2, [r3, #24]
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	e000e100 	.word	0xe000e100
 8005d64:	e000ed00 	.word	0xe000ed00

08005d68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	f06f 0004 	mvn.w	r0, #4
 8005d72:	f7ff ffcf 	bl	8005d14 <__NVIC_SetPriority>
#endif
}
 8005d76:	bf00      	nop
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d82:	f3ef 8305 	mrs	r3, IPSR
 8005d86:	603b      	str	r3, [r7, #0]
  return(result);
 8005d88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005d8e:	f06f 0305 	mvn.w	r3, #5
 8005d92:	607b      	str	r3, [r7, #4]
 8005d94:	e00c      	b.n	8005db0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d96:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc0 <osKernelInitialize+0x44>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d105      	bne.n	8005daa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d9e:	4b08      	ldr	r3, [pc, #32]	@ (8005dc0 <osKernelInitialize+0x44>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	607b      	str	r3, [r7, #4]
 8005da8:	e002      	b.n	8005db0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005daa:	f04f 33ff 	mov.w	r3, #4294967295
 8005dae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005db0:	687b      	ldr	r3, [r7, #4]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	240002cc 	.word	0x240002cc

08005dc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dca:	f3ef 8305 	mrs	r3, IPSR
 8005dce:	603b      	str	r3, [r7, #0]
  return(result);
 8005dd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <osKernelStart+0x1a>
    stat = osErrorISR;
 8005dd6:	f06f 0305 	mvn.w	r3, #5
 8005dda:	607b      	str	r3, [r7, #4]
 8005ddc:	e010      	b.n	8005e00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005dde:	4b0b      	ldr	r3, [pc, #44]	@ (8005e0c <osKernelStart+0x48>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d109      	bne.n	8005dfa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005de6:	f7ff ffbf 	bl	8005d68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005dea:	4b08      	ldr	r3, [pc, #32]	@ (8005e0c <osKernelStart+0x48>)
 8005dec:	2202      	movs	r2, #2
 8005dee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005df0:	f001 fcba 	bl	8007768 <vTaskStartScheduler>
      stat = osOK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	607b      	str	r3, [r7, #4]
 8005df8:	e002      	b.n	8005e00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8005dfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e00:	687b      	ldr	r3, [r7, #4]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	240002cc 	.word	0x240002cc

08005e10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08e      	sub	sp, #56	@ 0x38
 8005e14:	af04      	add	r7, sp, #16
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e20:	f3ef 8305 	mrs	r3, IPSR
 8005e24:	617b      	str	r3, [r7, #20]
  return(result);
 8005e26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d17e      	bne.n	8005f2a <osThreadNew+0x11a>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d07b      	beq.n	8005f2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e32:	2380      	movs	r3, #128	@ 0x80
 8005e34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e36:	2318      	movs	r3, #24
 8005e38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d045      	beq.n	8005ed6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <osThreadNew+0x48>
        name = attr->name;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <osThreadNew+0x6e>
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	2b38      	cmp	r3, #56	@ 0x38
 8005e70:	d805      	bhi.n	8005e7e <osThreadNew+0x6e>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <osThreadNew+0x72>
        return (NULL);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e054      	b.n	8005f2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	089b      	lsrs	r3, r3, #2
 8005e90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00e      	beq.n	8005eb8 <osThreadNew+0xa8>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	2b5b      	cmp	r3, #91	@ 0x5b
 8005ea0:	d90a      	bls.n	8005eb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d006      	beq.n	8005eb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <osThreadNew+0xa8>
        mem = 1;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	61bb      	str	r3, [r7, #24]
 8005eb6:	e010      	b.n	8005eda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10c      	bne.n	8005eda <osThreadNew+0xca>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d108      	bne.n	8005eda <osThreadNew+0xca>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <osThreadNew+0xca>
          mem = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	e001      	b.n	8005eda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d110      	bne.n	8005f02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ee8:	9202      	str	r2, [sp, #8]
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	6a3a      	ldr	r2, [r7, #32]
 8005ef4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f001 fa5a 	bl	80073b0 <xTaskCreateStatic>
 8005efc:	4603      	mov	r3, r0
 8005efe:	613b      	str	r3, [r7, #16]
 8005f00:	e013      	b.n	8005f2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d110      	bne.n	8005f2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	f107 0310 	add.w	r3, r7, #16
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f001 faa8 	bl	8007470 <xTaskCreate>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d001      	beq.n	8005f2a <osThreadNew+0x11a>
            hTask = NULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f2a:	693b      	ldr	r3, [r7, #16]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3728      	adds	r7, #40	@ 0x28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f3c:	f3ef 8305 	mrs	r3, IPSR
 8005f40:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f42:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <osDelay+0x1c>
    stat = osErrorISR;
 8005f48:	f06f 0305 	mvn.w	r3, #5
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	e007      	b.n	8005f60 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f001 fbce 	bl	80076fc <vTaskDelay>
    }
  }

  return (stat);
 8005f60:	68fb      	ldr	r3, [r7, #12]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4a07      	ldr	r2, [pc, #28]	@ (8005f98 <vApplicationGetIdleTaskMemory+0x2c>)
 8005f7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4a06      	ldr	r2, [pc, #24]	@ (8005f9c <vApplicationGetIdleTaskMemory+0x30>)
 8005f82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2280      	movs	r2, #128	@ 0x80
 8005f88:	601a      	str	r2, [r3, #0]
}
 8005f8a:	bf00      	nop
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	240002d0 	.word	0x240002d0
 8005f9c:	2400032c 	.word	0x2400032c

08005fa0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4a07      	ldr	r2, [pc, #28]	@ (8005fcc <vApplicationGetTimerTaskMemory+0x2c>)
 8005fb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4a06      	ldr	r2, [pc, #24]	@ (8005fd0 <vApplicationGetTimerTaskMemory+0x30>)
 8005fb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fbe:	601a      	str	r2, [r3, #0]
}
 8005fc0:	bf00      	nop
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	2400052c 	.word	0x2400052c
 8005fd0:	24000588 	.word	0x24000588

08005fd4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08a      	sub	sp, #40	@ 0x28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fe0:	f001 fc2a 	bl	8007838 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fe4:	4b5c      	ldr	r3, [pc, #368]	@ (8006158 <pvPortMalloc+0x184>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fec:	f000 f924 	bl	8006238 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ff0:	4b5a      	ldr	r3, [pc, #360]	@ (800615c <pvPortMalloc+0x188>)
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f040 8095 	bne.w	8006128 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01e      	beq.n	8006042 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006004:	2208      	movs	r2, #8
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4413      	add	r3, r2
 800600a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	2b00      	cmp	r3, #0
 8006014:	d015      	beq.n	8006042 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f023 0307 	bic.w	r3, r3, #7
 800601c:	3308      	adds	r3, #8
 800601e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00b      	beq.n	8006042 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	e7fd      	b.n	800603e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d06f      	beq.n	8006128 <pvPortMalloc+0x154>
 8006048:	4b45      	ldr	r3, [pc, #276]	@ (8006160 <pvPortMalloc+0x18c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	429a      	cmp	r2, r3
 8006050:	d86a      	bhi.n	8006128 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006052:	4b44      	ldr	r3, [pc, #272]	@ (8006164 <pvPortMalloc+0x190>)
 8006054:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006056:	4b43      	ldr	r3, [pc, #268]	@ (8006164 <pvPortMalloc+0x190>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800605c:	e004      	b.n	8006068 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006060:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	429a      	cmp	r2, r3
 8006070:	d903      	bls.n	800607a <pvPortMalloc+0xa6>
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1f1      	bne.n	800605e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800607a:	4b37      	ldr	r3, [pc, #220]	@ (8006158 <pvPortMalloc+0x184>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006080:	429a      	cmp	r2, r3
 8006082:	d051      	beq.n	8006128 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2208      	movs	r2, #8
 800608a:	4413      	add	r3, r2
 800608c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	1ad2      	subs	r2, r2, r3
 800609e:	2308      	movs	r3, #8
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d920      	bls.n	80060e8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4413      	add	r3, r2
 80060ac:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00b      	beq.n	80060d0 <pvPortMalloc+0xfc>
	__asm volatile
 80060b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060bc:	f383 8811 	msr	BASEPRI, r3
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	613b      	str	r3, [r7, #16]
}
 80060ca:	bf00      	nop
 80060cc:	bf00      	nop
 80060ce:	e7fd      	b.n	80060cc <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	1ad2      	subs	r2, r2, r3
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060e2:	69b8      	ldr	r0, [r7, #24]
 80060e4:	f000 f90a 	bl	80062fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006160 <pvPortMalloc+0x18c>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006160 <pvPortMalloc+0x18c>)
 80060f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006160 <pvPortMalloc+0x18c>)
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006168 <pvPortMalloc+0x194>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d203      	bcs.n	800610a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006102:	4b17      	ldr	r3, [pc, #92]	@ (8006160 <pvPortMalloc+0x18c>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a18      	ldr	r2, [pc, #96]	@ (8006168 <pvPortMalloc+0x194>)
 8006108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800610a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	4b13      	ldr	r3, [pc, #76]	@ (800615c <pvPortMalloc+0x188>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	431a      	orrs	r2, r3
 8006114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800611e:	4b13      	ldr	r3, [pc, #76]	@ (800616c <pvPortMalloc+0x198>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3301      	adds	r3, #1
 8006124:	4a11      	ldr	r2, [pc, #68]	@ (800616c <pvPortMalloc+0x198>)
 8006126:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006128:	f001 fb94 	bl	8007854 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f003 0307 	and.w	r3, r3, #7
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00b      	beq.n	800614e <pvPortMalloc+0x17a>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	60fb      	str	r3, [r7, #12]
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	e7fd      	b.n	800614a <pvPortMalloc+0x176>
	return pvReturn;
 800614e:	69fb      	ldr	r3, [r7, #28]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3728      	adds	r7, #40	@ 0x28
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	24004590 	.word	0x24004590
 800615c:	240045a4 	.word	0x240045a4
 8006160:	24004594 	.word	0x24004594
 8006164:	24004588 	.word	0x24004588
 8006168:	24004598 	.word	0x24004598
 800616c:	2400459c 	.word	0x2400459c

08006170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d04f      	beq.n	8006222 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006182:	2308      	movs	r3, #8
 8006184:	425b      	negs	r3, r3
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	4413      	add	r3, r2
 800618a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	4b25      	ldr	r3, [pc, #148]	@ (800622c <vPortFree+0xbc>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4013      	ands	r3, r2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10b      	bne.n	80061b6 <vPortFree+0x46>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	60fb      	str	r3, [r7, #12]
}
 80061b0:	bf00      	nop
 80061b2:	bf00      	nop
 80061b4:	e7fd      	b.n	80061b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00b      	beq.n	80061d6 <vPortFree+0x66>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	60bb      	str	r3, [r7, #8]
}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	e7fd      	b.n	80061d2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	4b14      	ldr	r3, [pc, #80]	@ (800622c <vPortFree+0xbc>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4013      	ands	r3, r2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d01e      	beq.n	8006222 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d11a      	bne.n	8006222 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	4b0e      	ldr	r3, [pc, #56]	@ (800622c <vPortFree+0xbc>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	43db      	mvns	r3, r3
 80061f6:	401a      	ands	r2, r3
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061fc:	f001 fb1c 	bl	8007838 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	4b0a      	ldr	r3, [pc, #40]	@ (8006230 <vPortFree+0xc0>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4413      	add	r3, r2
 800620a:	4a09      	ldr	r2, [pc, #36]	@ (8006230 <vPortFree+0xc0>)
 800620c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800620e:	6938      	ldr	r0, [r7, #16]
 8006210:	f000 f874 	bl	80062fc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006214:	4b07      	ldr	r3, [pc, #28]	@ (8006234 <vPortFree+0xc4>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3301      	adds	r3, #1
 800621a:	4a06      	ldr	r2, [pc, #24]	@ (8006234 <vPortFree+0xc4>)
 800621c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800621e:	f001 fb19 	bl	8007854 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006222:	bf00      	nop
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	240045a4 	.word	0x240045a4
 8006230:	24004594 	.word	0x24004594
 8006234:	240045a0 	.word	0x240045a0

08006238 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800623e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006242:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006244:	4b27      	ldr	r3, [pc, #156]	@ (80062e4 <prvHeapInit+0xac>)
 8006246:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00c      	beq.n	800626c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3307      	adds	r3, #7
 8006256:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0307 	bic.w	r3, r3, #7
 800625e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	4a1f      	ldr	r2, [pc, #124]	@ (80062e4 <prvHeapInit+0xac>)
 8006268:	4413      	add	r3, r2
 800626a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006270:	4a1d      	ldr	r2, [pc, #116]	@ (80062e8 <prvHeapInit+0xb0>)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006276:	4b1c      	ldr	r3, [pc, #112]	@ (80062e8 <prvHeapInit+0xb0>)
 8006278:	2200      	movs	r2, #0
 800627a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	4413      	add	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006284:	2208      	movs	r2, #8
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0307 	bic.w	r3, r3, #7
 8006292:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4a15      	ldr	r2, [pc, #84]	@ (80062ec <prvHeapInit+0xb4>)
 8006298:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800629a:	4b14      	ldr	r3, [pc, #80]	@ (80062ec <prvHeapInit+0xb4>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2200      	movs	r2, #0
 80062a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062a2:	4b12      	ldr	r3, [pc, #72]	@ (80062ec <prvHeapInit+0xb4>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	1ad2      	subs	r2, r2, r3
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062b8:	4b0c      	ldr	r3, [pc, #48]	@ (80062ec <prvHeapInit+0xb4>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	4a0a      	ldr	r2, [pc, #40]	@ (80062f0 <prvHeapInit+0xb8>)
 80062c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	4a09      	ldr	r2, [pc, #36]	@ (80062f4 <prvHeapInit+0xbc>)
 80062ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062d0:	4b09      	ldr	r3, [pc, #36]	@ (80062f8 <prvHeapInit+0xc0>)
 80062d2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80062d6:	601a      	str	r2, [r3, #0]
}
 80062d8:	bf00      	nop
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	24000988 	.word	0x24000988
 80062e8:	24004588 	.word	0x24004588
 80062ec:	24004590 	.word	0x24004590
 80062f0:	24004598 	.word	0x24004598
 80062f4:	24004594 	.word	0x24004594
 80062f8:	240045a4 	.word	0x240045a4

080062fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006304:	4b28      	ldr	r3, [pc, #160]	@ (80063a8 <prvInsertBlockIntoFreeList+0xac>)
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	e002      	b.n	8006310 <prvInsertBlockIntoFreeList+0x14>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	429a      	cmp	r2, r3
 8006318:	d8f7      	bhi.n	800630a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	4413      	add	r3, r2
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	429a      	cmp	r2, r3
 800632a:	d108      	bne.n	800633e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	441a      	add	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	441a      	add	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d118      	bne.n	8006384 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	4b15      	ldr	r3, [pc, #84]	@ (80063ac <prvInsertBlockIntoFreeList+0xb0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d00d      	beq.n	800637a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	441a      	add	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	e008      	b.n	800638c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800637a:	4b0c      	ldr	r3, [pc, #48]	@ (80063ac <prvInsertBlockIntoFreeList+0xb0>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	e003      	b.n	800638c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	429a      	cmp	r2, r3
 8006392:	d002      	beq.n	800639a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800639a:	bf00      	nop
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	24004588 	.word	0x24004588
 80063ac:	24004590 	.word	0x24004590

080063b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f103 0208 	add.w	r2, r3, #8
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f04f 32ff 	mov.w	r2, #4294967295
 80063c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f103 0208 	add.w	r2, r3, #8
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f103 0208 	add.w	r2, r3, #8
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800640a:	b480      	push	{r7}
 800640c:	b085      	sub	sp, #20
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	601a      	str	r2, [r3, #0]
}
 8006446:	bf00      	nop
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006452:	b480      	push	{r7}
 8006454:	b085      	sub	sp, #20
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006468:	d103      	bne.n	8006472 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	e00c      	b.n	800648c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3308      	adds	r3, #8
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	e002      	b.n	8006480 <vListInsert+0x2e>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	429a      	cmp	r2, r3
 800648a:	d2f6      	bcs.n	800647a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	601a      	str	r2, [r3, #0]
}
 80064b8:	bf00      	nop
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6892      	ldr	r2, [r2, #8]
 80064da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6852      	ldr	r2, [r2, #4]
 80064e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d103      	bne.n	80064f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	1e5a      	subs	r2, r3, #1
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3b04      	subs	r3, #4
 8006528:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3b04      	subs	r3, #4
 8006536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f023 0201 	bic.w	r2, r3, #1
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3b04      	subs	r3, #4
 8006546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006548:	4a0c      	ldr	r2, [pc, #48]	@ (800657c <pxPortInitialiseStack+0x64>)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3b14      	subs	r3, #20
 8006552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3b04      	subs	r3, #4
 800655e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f06f 0202 	mvn.w	r2, #2
 8006566:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3b20      	subs	r3, #32
 800656c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800656e:	68fb      	ldr	r3, [r7, #12]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	08006581 	.word	0x08006581

08006580 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006586:	2300      	movs	r3, #0
 8006588:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800658a:	4b13      	ldr	r3, [pc, #76]	@ (80065d8 <prvTaskExitError+0x58>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006592:	d00b      	beq.n	80065ac <prvTaskExitError+0x2c>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	60fb      	str	r3, [r7, #12]
}
 80065a6:	bf00      	nop
 80065a8:	bf00      	nop
 80065aa:	e7fd      	b.n	80065a8 <prvTaskExitError+0x28>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	60bb      	str	r3, [r7, #8]
}
 80065be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065c0:	bf00      	nop
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0fc      	beq.n	80065c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	2400002c 	.word	0x2400002c
 80065dc:	00000000 	.word	0x00000000

080065e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065e0:	4b07      	ldr	r3, [pc, #28]	@ (8006600 <pxCurrentTCBConst2>)
 80065e2:	6819      	ldr	r1, [r3, #0]
 80065e4:	6808      	ldr	r0, [r1, #0]
 80065e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ea:	f380 8809 	msr	PSP, r0
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f04f 0000 	mov.w	r0, #0
 80065f6:	f380 8811 	msr	BASEPRI, r0
 80065fa:	4770      	bx	lr
 80065fc:	f3af 8000 	nop.w

08006600 <pxCurrentTCBConst2>:
 8006600:	240045f0 	.word	0x240045f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006604:	bf00      	nop
 8006606:	bf00      	nop

08006608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006608:	4808      	ldr	r0, [pc, #32]	@ (800662c <prvPortStartFirstTask+0x24>)
 800660a:	6800      	ldr	r0, [r0, #0]
 800660c:	6800      	ldr	r0, [r0, #0]
 800660e:	f380 8808 	msr	MSP, r0
 8006612:	f04f 0000 	mov.w	r0, #0
 8006616:	f380 8814 	msr	CONTROL, r0
 800661a:	b662      	cpsie	i
 800661c:	b661      	cpsie	f
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	df00      	svc	0
 8006628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800662a:	bf00      	nop
 800662c:	e000ed08 	.word	0xe000ed08

08006630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006636:	4b47      	ldr	r3, [pc, #284]	@ (8006754 <xPortStartScheduler+0x124>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a47      	ldr	r2, [pc, #284]	@ (8006758 <xPortStartScheduler+0x128>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d10b      	bne.n	8006658 <xPortStartScheduler+0x28>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	60fb      	str	r3, [r7, #12]
}
 8006652:	bf00      	nop
 8006654:	bf00      	nop
 8006656:	e7fd      	b.n	8006654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006658:	4b3e      	ldr	r3, [pc, #248]	@ (8006754 <xPortStartScheduler+0x124>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a3f      	ldr	r2, [pc, #252]	@ (800675c <xPortStartScheduler+0x12c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d10b      	bne.n	800667a <xPortStartScheduler+0x4a>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	613b      	str	r3, [r7, #16]
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop
 8006678:	e7fd      	b.n	8006676 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800667a:	4b39      	ldr	r3, [pc, #228]	@ (8006760 <xPortStartScheduler+0x130>)
 800667c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	b2db      	uxtb	r3, r3
 8006684:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	22ff      	movs	r2, #255	@ 0xff
 800668a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800669c:	b2da      	uxtb	r2, r3
 800669e:	4b31      	ldr	r3, [pc, #196]	@ (8006764 <xPortStartScheduler+0x134>)
 80066a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066a2:	4b31      	ldr	r3, [pc, #196]	@ (8006768 <xPortStartScheduler+0x138>)
 80066a4:	2207      	movs	r2, #7
 80066a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066a8:	e009      	b.n	80066be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80066aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006768 <xPortStartScheduler+0x138>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	4a2d      	ldr	r2, [pc, #180]	@ (8006768 <xPortStartScheduler+0x138>)
 80066b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066be:	78fb      	ldrb	r3, [r7, #3]
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066c6:	2b80      	cmp	r3, #128	@ 0x80
 80066c8:	d0ef      	beq.n	80066aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066ca:	4b27      	ldr	r3, [pc, #156]	@ (8006768 <xPortStartScheduler+0x138>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f1c3 0307 	rsb	r3, r3, #7
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d00b      	beq.n	80066ee <xPortStartScheduler+0xbe>
	__asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	60bb      	str	r3, [r7, #8]
}
 80066e8:	bf00      	nop
 80066ea:	bf00      	nop
 80066ec:	e7fd      	b.n	80066ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006768 <xPortStartScheduler+0x138>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	021b      	lsls	r3, r3, #8
 80066f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006768 <xPortStartScheduler+0x138>)
 80066f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006768 <xPortStartScheduler+0x138>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006700:	4a19      	ldr	r2, [pc, #100]	@ (8006768 <xPortStartScheduler+0x138>)
 8006702:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	b2da      	uxtb	r2, r3
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800670c:	4b17      	ldr	r3, [pc, #92]	@ (800676c <xPortStartScheduler+0x13c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a16      	ldr	r2, [pc, #88]	@ (800676c <xPortStartScheduler+0x13c>)
 8006712:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006716:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006718:	4b14      	ldr	r3, [pc, #80]	@ (800676c <xPortStartScheduler+0x13c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a13      	ldr	r2, [pc, #76]	@ (800676c <xPortStartScheduler+0x13c>)
 800671e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006722:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006724:	f000 f8da 	bl	80068dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006728:	4b11      	ldr	r3, [pc, #68]	@ (8006770 <xPortStartScheduler+0x140>)
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800672e:	f000 f8f9 	bl	8006924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006732:	4b10      	ldr	r3, [pc, #64]	@ (8006774 <xPortStartScheduler+0x144>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a0f      	ldr	r2, [pc, #60]	@ (8006774 <xPortStartScheduler+0x144>)
 8006738:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800673c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800673e:	f7ff ff63 	bl	8006608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006742:	f001 f9ef 	bl	8007b24 <vTaskSwitchContext>
	prvTaskExitError();
 8006746:	f7ff ff1b 	bl	8006580 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3718      	adds	r7, #24
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	e000ed00 	.word	0xe000ed00
 8006758:	410fc271 	.word	0x410fc271
 800675c:	410fc270 	.word	0x410fc270
 8006760:	e000e400 	.word	0xe000e400
 8006764:	240045a8 	.word	0x240045a8
 8006768:	240045ac 	.word	0x240045ac
 800676c:	e000ed20 	.word	0xe000ed20
 8006770:	2400002c 	.word	0x2400002c
 8006774:	e000ef34 	.word	0xe000ef34

08006778 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	607b      	str	r3, [r7, #4]
}
 8006790:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006792:	4b10      	ldr	r3, [pc, #64]	@ (80067d4 <vPortEnterCritical+0x5c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3301      	adds	r3, #1
 8006798:	4a0e      	ldr	r2, [pc, #56]	@ (80067d4 <vPortEnterCritical+0x5c>)
 800679a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800679c:	4b0d      	ldr	r3, [pc, #52]	@ (80067d4 <vPortEnterCritical+0x5c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d110      	bne.n	80067c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067a4:	4b0c      	ldr	r3, [pc, #48]	@ (80067d8 <vPortEnterCritical+0x60>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00b      	beq.n	80067c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	603b      	str	r3, [r7, #0]
}
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	e7fd      	b.n	80067c2 <vPortEnterCritical+0x4a>
	}
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	2400002c 	.word	0x2400002c
 80067d8:	e000ed04 	.word	0xe000ed04

080067dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067e2:	4b12      	ldr	r3, [pc, #72]	@ (800682c <vPortExitCritical+0x50>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10b      	bne.n	8006802 <vPortExitCritical+0x26>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	607b      	str	r3, [r7, #4]
}
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	e7fd      	b.n	80067fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006802:	4b0a      	ldr	r3, [pc, #40]	@ (800682c <vPortExitCritical+0x50>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3b01      	subs	r3, #1
 8006808:	4a08      	ldr	r2, [pc, #32]	@ (800682c <vPortExitCritical+0x50>)
 800680a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800680c:	4b07      	ldr	r3, [pc, #28]	@ (800682c <vPortExitCritical+0x50>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d105      	bne.n	8006820 <vPortExitCritical+0x44>
 8006814:	2300      	movs	r3, #0
 8006816:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800681e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	2400002c 	.word	0x2400002c

08006830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006830:	f3ef 8009 	mrs	r0, PSP
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	4b15      	ldr	r3, [pc, #84]	@ (8006890 <pxCurrentTCBConst>)
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	f01e 0f10 	tst.w	lr, #16
 8006840:	bf08      	it	eq
 8006842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684a:	6010      	str	r0, [r2, #0]
 800684c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006850:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006854:	f380 8811 	msr	BASEPRI, r0
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f001 f960 	bl	8007b24 <vTaskSwitchContext>
 8006864:	f04f 0000 	mov.w	r0, #0
 8006868:	f380 8811 	msr	BASEPRI, r0
 800686c:	bc09      	pop	{r0, r3}
 800686e:	6819      	ldr	r1, [r3, #0]
 8006870:	6808      	ldr	r0, [r1, #0]
 8006872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006876:	f01e 0f10 	tst.w	lr, #16
 800687a:	bf08      	it	eq
 800687c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006880:	f380 8809 	msr	PSP, r0
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	f3af 8000 	nop.w

08006890 <pxCurrentTCBConst>:
 8006890:	240045f0 	.word	0x240045f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop

08006898 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	607b      	str	r3, [r7, #4]
}
 80068b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068b2:	f001 f87d 	bl	80079b0 <xTaskIncrementTick>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068bc:	4b06      	ldr	r3, [pc, #24]	@ (80068d8 <xPortSysTickHandler+0x40>)
 80068be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	2300      	movs	r3, #0
 80068c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	f383 8811 	msr	BASEPRI, r3
}
 80068ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068d0:	bf00      	nop
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	e000ed04 	.word	0xe000ed04

080068dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006910 <vPortSetupTimerInterrupt+0x34>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006914 <vPortSetupTimerInterrupt+0x38>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006918 <vPortSetupTimerInterrupt+0x3c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a0a      	ldr	r2, [pc, #40]	@ (800691c <vPortSetupTimerInterrupt+0x40>)
 80068f2:	fba2 2303 	umull	r2, r3, r2, r3
 80068f6:	099b      	lsrs	r3, r3, #6
 80068f8:	4a09      	ldr	r2, [pc, #36]	@ (8006920 <vPortSetupTimerInterrupt+0x44>)
 80068fa:	3b01      	subs	r3, #1
 80068fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068fe:	4b04      	ldr	r3, [pc, #16]	@ (8006910 <vPortSetupTimerInterrupt+0x34>)
 8006900:	2207      	movs	r2, #7
 8006902:	601a      	str	r2, [r3, #0]
}
 8006904:	bf00      	nop
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	e000e010 	.word	0xe000e010
 8006914:	e000e018 	.word	0xe000e018
 8006918:	24000000 	.word	0x24000000
 800691c:	10624dd3 	.word	0x10624dd3
 8006920:	e000e014 	.word	0xe000e014

08006924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006924:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006934 <vPortEnableVFP+0x10>
 8006928:	6801      	ldr	r1, [r0, #0]
 800692a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800692e:	6001      	str	r1, [r0, #0]
 8006930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006932:	bf00      	nop
 8006934:	e000ed88 	.word	0xe000ed88

08006938 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800693e:	f3ef 8305 	mrs	r3, IPSR
 8006942:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b0f      	cmp	r3, #15
 8006948:	d915      	bls.n	8006976 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800694a:	4a18      	ldr	r2, [pc, #96]	@ (80069ac <vPortValidateInterruptPriority+0x74>)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006954:	4b16      	ldr	r3, [pc, #88]	@ (80069b0 <vPortValidateInterruptPriority+0x78>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	7afa      	ldrb	r2, [r7, #11]
 800695a:	429a      	cmp	r2, r3
 800695c:	d20b      	bcs.n	8006976 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	607b      	str	r3, [r7, #4]
}
 8006970:	bf00      	nop
 8006972:	bf00      	nop
 8006974:	e7fd      	b.n	8006972 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006976:	4b0f      	ldr	r3, [pc, #60]	@ (80069b4 <vPortValidateInterruptPriority+0x7c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800697e:	4b0e      	ldr	r3, [pc, #56]	@ (80069b8 <vPortValidateInterruptPriority+0x80>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d90b      	bls.n	800699e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	603b      	str	r3, [r7, #0]
}
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	e7fd      	b.n	800699a <vPortValidateInterruptPriority+0x62>
	}
 800699e:	bf00      	nop
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	e000e3f0 	.word	0xe000e3f0
 80069b0:	240045a8 	.word	0x240045a8
 80069b4:	e000ed0c 	.word	0xe000ed0c
 80069b8:	240045ac 	.word	0x240045ac

080069bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10b      	bne.n	80069e8 <xQueueGenericReset+0x2c>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	60bb      	str	r3, [r7, #8]
}
 80069e2:	bf00      	nop
 80069e4:	bf00      	nop
 80069e6:	e7fd      	b.n	80069e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80069e8:	f7ff fec6 	bl	8006778 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f4:	68f9      	ldr	r1, [r7, #12]
 80069f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80069f8:	fb01 f303 	mul.w	r3, r1, r3
 80069fc:	441a      	add	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	68f9      	ldr	r1, [r7, #12]
 8006a1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006a1e:	fb01 f303 	mul.w	r3, r1, r3
 8006a22:	441a      	add	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	22ff      	movs	r2, #255	@ 0xff
 8006a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	22ff      	movs	r2, #255	@ 0xff
 8006a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d114      	bne.n	8006a68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d01a      	beq.n	8006a7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3310      	adds	r3, #16
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f001 f91a 	bl	8007c84 <xTaskRemoveFromEventList>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d012      	beq.n	8006a7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a56:	4b0d      	ldr	r3, [pc, #52]	@ (8006a8c <xQueueGenericReset+0xd0>)
 8006a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	e009      	b.n	8006a7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3310      	adds	r3, #16
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff fc9f 	bl	80063b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3324      	adds	r3, #36	@ 0x24
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff fc9a 	bl	80063b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a7c:	f7ff feae 	bl	80067dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a80:	2301      	movs	r3, #1
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	e000ed04 	.word	0xe000ed04

08006a90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08e      	sub	sp, #56	@ 0x38
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
 8006a9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10b      	bne.n	8006abc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006ab6:	bf00      	nop
 8006ab8:	bf00      	nop
 8006aba:	e7fd      	b.n	8006ab8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10b      	bne.n	8006ada <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop
 8006ad8:	e7fd      	b.n	8006ad6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <xQueueGenericCreateStatic+0x56>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <xQueueGenericCreateStatic+0x5a>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e000      	b.n	8006aec <xQueueGenericCreateStatic+0x5c>
 8006aea:	2300      	movs	r3, #0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10b      	bne.n	8006b08 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	623b      	str	r3, [r7, #32]
}
 8006b02:	bf00      	nop
 8006b04:	bf00      	nop
 8006b06:	e7fd      	b.n	8006b04 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d102      	bne.n	8006b14 <xQueueGenericCreateStatic+0x84>
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d101      	bne.n	8006b18 <xQueueGenericCreateStatic+0x88>
 8006b14:	2301      	movs	r3, #1
 8006b16:	e000      	b.n	8006b1a <xQueueGenericCreateStatic+0x8a>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10b      	bne.n	8006b36 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	61fb      	str	r3, [r7, #28]
}
 8006b30:	bf00      	nop
 8006b32:	bf00      	nop
 8006b34:	e7fd      	b.n	8006b32 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b36:	2350      	movs	r3, #80	@ 0x50
 8006b38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b50      	cmp	r3, #80	@ 0x50
 8006b3e:	d00b      	beq.n	8006b58 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	61bb      	str	r3, [r7, #24]
}
 8006b52:	bf00      	nop
 8006b54:	bf00      	nop
 8006b56:	e7fd      	b.n	8006b54 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00d      	beq.n	8006b80 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b6c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	4613      	mov	r3, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f000 f805 	bl	8006b8a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3730      	adds	r7, #48	@ 0x30
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	607a      	str	r2, [r7, #4]
 8006b96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d103      	bne.n	8006ba6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	e002      	b.n	8006bac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006bb8:	2101      	movs	r1, #1
 8006bba:	69b8      	ldr	r0, [r7, #24]
 8006bbc:	f7ff fefe 	bl	80069bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	78fa      	ldrb	r2, [r7, #3]
 8006bc4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006bc8:	bf00      	nop
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08e      	sub	sp, #56	@ 0x38
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006bde:	2300      	movs	r3, #0
 8006be0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10b      	bne.n	8006c04 <xQueueGenericSend+0x34>
	__asm volatile
 8006bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006bfe:	bf00      	nop
 8006c00:	bf00      	nop
 8006c02:	e7fd      	b.n	8006c00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d103      	bne.n	8006c12 <xQueueGenericSend+0x42>
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <xQueueGenericSend+0x46>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <xQueueGenericSend+0x48>
 8006c16:	2300      	movs	r3, #0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10b      	bne.n	8006c34 <xQueueGenericSend+0x64>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c2e:	bf00      	nop
 8006c30:	bf00      	nop
 8006c32:	e7fd      	b.n	8006c30 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d103      	bne.n	8006c42 <xQueueGenericSend+0x72>
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d101      	bne.n	8006c46 <xQueueGenericSend+0x76>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e000      	b.n	8006c48 <xQueueGenericSend+0x78>
 8006c46:	2300      	movs	r3, #0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10b      	bne.n	8006c64 <xQueueGenericSend+0x94>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	623b      	str	r3, [r7, #32]
}
 8006c5e:	bf00      	nop
 8006c60:	bf00      	nop
 8006c62:	e7fd      	b.n	8006c60 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c64:	f001 f9ce 	bl	8008004 <xTaskGetSchedulerState>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d102      	bne.n	8006c74 <xQueueGenericSend+0xa4>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <xQueueGenericSend+0xa8>
 8006c74:	2301      	movs	r3, #1
 8006c76:	e000      	b.n	8006c7a <xQueueGenericSend+0xaa>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10b      	bne.n	8006c96 <xQueueGenericSend+0xc6>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	61fb      	str	r3, [r7, #28]
}
 8006c90:	bf00      	nop
 8006c92:	bf00      	nop
 8006c94:	e7fd      	b.n	8006c92 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c96:	f7ff fd6f 	bl	8006778 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d302      	bcc.n	8006cac <xQueueGenericSend+0xdc>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d129      	bne.n	8006d00 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	68b9      	ldr	r1, [r7, #8]
 8006cb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cb2:	f000 fa0f 	bl	80070d4 <prvCopyDataToQueue>
 8006cb6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d010      	beq.n	8006ce2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc2:	3324      	adds	r3, #36	@ 0x24
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 ffdd 	bl	8007c84 <xTaskRemoveFromEventList>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d013      	beq.n	8006cf8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8006dd0 <xQueueGenericSend+0x200>)
 8006cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	e00a      	b.n	8006cf8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d007      	beq.n	8006cf8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ce8:	4b39      	ldr	r3, [pc, #228]	@ (8006dd0 <xQueueGenericSend+0x200>)
 8006cea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006cf8:	f7ff fd70 	bl	80067dc <vPortExitCritical>
				return pdPASS;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e063      	b.n	8006dc8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d103      	bne.n	8006d0e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d06:	f7ff fd69 	bl	80067dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e05c      	b.n	8006dc8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d106      	bne.n	8006d22 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d14:	f107 0314 	add.w	r3, r7, #20
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f001 f817 	bl	8007d4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d22:	f7ff fd5b 	bl	80067dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d26:	f000 fd87 	bl	8007838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d2a:	f7ff fd25 	bl	8006778 <vPortEnterCritical>
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d34:	b25b      	sxtb	r3, r3
 8006d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3a:	d103      	bne.n	8006d44 <xQueueGenericSend+0x174>
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d4a:	b25b      	sxtb	r3, r3
 8006d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d50:	d103      	bne.n	8006d5a <xQueueGenericSend+0x18a>
 8006d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d5a:	f7ff fd3f 	bl	80067dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d5e:	1d3a      	adds	r2, r7, #4
 8006d60:	f107 0314 	add.w	r3, r7, #20
 8006d64:	4611      	mov	r1, r2
 8006d66:	4618      	mov	r0, r3
 8006d68:	f001 f806 	bl	8007d78 <xTaskCheckForTimeOut>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d124      	bne.n	8006dbc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d74:	f000 faa6 	bl	80072c4 <prvIsQueueFull>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d018      	beq.n	8006db0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d80:	3310      	adds	r3, #16
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	4611      	mov	r1, r2
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 ff2a 	bl	8007be0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d8e:	f000 fa31 	bl	80071f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d92:	f000 fd5f 	bl	8007854 <xTaskResumeAll>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f47f af7c 	bne.w	8006c96 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd0 <xQueueGenericSend+0x200>)
 8006da0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006da4:	601a      	str	r2, [r3, #0]
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	e772      	b.n	8006c96 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006db0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006db2:	f000 fa1f 	bl	80071f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006db6:	f000 fd4d 	bl	8007854 <xTaskResumeAll>
 8006dba:	e76c      	b.n	8006c96 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006dbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dbe:	f000 fa19 	bl	80071f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dc2:	f000 fd47 	bl	8007854 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006dc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3738      	adds	r7, #56	@ 0x38
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	e000ed04 	.word	0xe000ed04

08006dd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b090      	sub	sp, #64	@ 0x40
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10b      	bne.n	8006e04 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006dfe:	bf00      	nop
 8006e00:	bf00      	nop
 8006e02:	e7fd      	b.n	8006e00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d103      	bne.n	8006e12 <xQueueGenericSendFromISR+0x3e>
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <xQueueGenericSendFromISR+0x42>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <xQueueGenericSendFromISR+0x44>
 8006e16:	2300      	movs	r3, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10b      	bne.n	8006e34 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e2e:	bf00      	nop
 8006e30:	bf00      	nop
 8006e32:	e7fd      	b.n	8006e30 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d103      	bne.n	8006e42 <xQueueGenericSendFromISR+0x6e>
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d101      	bne.n	8006e46 <xQueueGenericSendFromISR+0x72>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e000      	b.n	8006e48 <xQueueGenericSendFromISR+0x74>
 8006e46:	2300      	movs	r3, #0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10b      	bne.n	8006e64 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	623b      	str	r3, [r7, #32]
}
 8006e5e:	bf00      	nop
 8006e60:	bf00      	nop
 8006e62:	e7fd      	b.n	8006e60 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e64:	f7ff fd68 	bl	8006938 <vPortValidateInterruptPriority>
	__asm volatile
 8006e68:	f3ef 8211 	mrs	r2, BASEPRI
 8006e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	61fa      	str	r2, [r7, #28]
 8006e7e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006e80:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e82:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d302      	bcc.n	8006e96 <xQueueGenericSendFromISR+0xc2>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d12f      	bne.n	8006ef6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	68b9      	ldr	r1, [r7, #8]
 8006eaa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006eac:	f000 f912 	bl	80070d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006eb0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb8:	d112      	bne.n	8006ee0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d016      	beq.n	8006ef0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec4:	3324      	adds	r3, #36	@ 0x24
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 fedc 	bl	8007c84 <xTaskRemoveFromEventList>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00e      	beq.n	8006ef0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00b      	beq.n	8006ef0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	e007      	b.n	8006ef0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	b25a      	sxtb	r2, r3
 8006eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006ef4:	e001      	b.n	8006efa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006efc:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f383 8811 	msr	BASEPRI, r3
}
 8006f04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3740      	adds	r7, #64	@ 0x40
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08c      	sub	sp, #48	@ 0x30
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10b      	bne.n	8006f42 <xQueueReceive+0x32>
	__asm volatile
 8006f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	623b      	str	r3, [r7, #32]
}
 8006f3c:	bf00      	nop
 8006f3e:	bf00      	nop
 8006f40:	e7fd      	b.n	8006f3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d103      	bne.n	8006f50 <xQueueReceive+0x40>
 8006f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <xQueueReceive+0x44>
 8006f50:	2301      	movs	r3, #1
 8006f52:	e000      	b.n	8006f56 <xQueueReceive+0x46>
 8006f54:	2300      	movs	r3, #0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10b      	bne.n	8006f72 <xQueueReceive+0x62>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	61fb      	str	r3, [r7, #28]
}
 8006f6c:	bf00      	nop
 8006f6e:	bf00      	nop
 8006f70:	e7fd      	b.n	8006f6e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f72:	f001 f847 	bl	8008004 <xTaskGetSchedulerState>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d102      	bne.n	8006f82 <xQueueReceive+0x72>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <xQueueReceive+0x76>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e000      	b.n	8006f88 <xQueueReceive+0x78>
 8006f86:	2300      	movs	r3, #0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10b      	bne.n	8006fa4 <xQueueReceive+0x94>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	61bb      	str	r3, [r7, #24]
}
 8006f9e:	bf00      	nop
 8006fa0:	bf00      	nop
 8006fa2:	e7fd      	b.n	8006fa0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fa4:	f7ff fbe8 	bl	8006778 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d01f      	beq.n	8006ff4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fb4:	68b9      	ldr	r1, [r7, #8]
 8006fb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fb8:	f000 f8f6 	bl	80071a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbe:	1e5a      	subs	r2, r3, #1
 8006fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00f      	beq.n	8006fec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fce:	3310      	adds	r3, #16
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 fe57 	bl	8007c84 <xTaskRemoveFromEventList>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d007      	beq.n	8006fec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fdc:	4b3c      	ldr	r3, [pc, #240]	@ (80070d0 <xQueueReceive+0x1c0>)
 8006fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fec:	f7ff fbf6 	bl	80067dc <vPortExitCritical>
				return pdPASS;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e069      	b.n	80070c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d103      	bne.n	8007002 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ffa:	f7ff fbef 	bl	80067dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ffe:	2300      	movs	r3, #0
 8007000:	e062      	b.n	80070c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d106      	bne.n	8007016 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007008:	f107 0310 	add.w	r3, r7, #16
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fe9d 	bl	8007d4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007012:	2301      	movs	r3, #1
 8007014:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007016:	f7ff fbe1 	bl	80067dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800701a:	f000 fc0d 	bl	8007838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800701e:	f7ff fbab 	bl	8006778 <vPortEnterCritical>
 8007022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007024:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007028:	b25b      	sxtb	r3, r3
 800702a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702e:	d103      	bne.n	8007038 <xQueueReceive+0x128>
 8007030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800703e:	b25b      	sxtb	r3, r3
 8007040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007044:	d103      	bne.n	800704e <xQueueReceive+0x13e>
 8007046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800704e:	f7ff fbc5 	bl	80067dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007052:	1d3a      	adds	r2, r7, #4
 8007054:	f107 0310 	add.w	r3, r7, #16
 8007058:	4611      	mov	r1, r2
 800705a:	4618      	mov	r0, r3
 800705c:	f000 fe8c 	bl	8007d78 <xTaskCheckForTimeOut>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d123      	bne.n	80070ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007068:	f000 f916 	bl	8007298 <prvIsQueueEmpty>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d017      	beq.n	80070a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007074:	3324      	adds	r3, #36	@ 0x24
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	4611      	mov	r1, r2
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fdb0 	bl	8007be0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007080:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007082:	f000 f8b7 	bl	80071f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007086:	f000 fbe5 	bl	8007854 <xTaskResumeAll>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d189      	bne.n	8006fa4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007090:	4b0f      	ldr	r3, [pc, #60]	@ (80070d0 <xQueueReceive+0x1c0>)
 8007092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	e780      	b.n	8006fa4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80070a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070a4:	f000 f8a6 	bl	80071f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070a8:	f000 fbd4 	bl	8007854 <xTaskResumeAll>
 80070ac:	e77a      	b.n	8006fa4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80070ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070b0:	f000 f8a0 	bl	80071f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070b4:	f000 fbce 	bl	8007854 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070ba:	f000 f8ed 	bl	8007298 <prvIsQueueEmpty>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f43f af6f 	beq.w	8006fa4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3730      	adds	r7, #48	@ 0x30
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	e000ed04 	.word	0xe000ed04

080070d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070e0:	2300      	movs	r3, #0
 80070e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10d      	bne.n	800710e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d14d      	bne.n	8007196 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 ff9e 	bl	8008040 <xTaskPriorityDisinherit>
 8007104:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	609a      	str	r2, [r3, #8]
 800710c:	e043      	b.n	8007196 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d119      	bne.n	8007148 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6858      	ldr	r0, [r3, #4]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711c:	461a      	mov	r2, r3
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	f002 fb9f 	bl	8009862 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712c:	441a      	add	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	429a      	cmp	r2, r3
 800713c:	d32b      	bcc.n	8007196 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	605a      	str	r2, [r3, #4]
 8007146:	e026      	b.n	8007196 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	68d8      	ldr	r0, [r3, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007150:	461a      	mov	r2, r3
 8007152:	68b9      	ldr	r1, [r7, #8]
 8007154:	f002 fb85 	bl	8009862 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007160:	425b      	negs	r3, r3
 8007162:	441a      	add	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	429a      	cmp	r2, r3
 8007172:	d207      	bcs.n	8007184 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717c:	425b      	negs	r3, r3
 800717e:	441a      	add	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b02      	cmp	r3, #2
 8007188:	d105      	bne.n	8007196 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	3b01      	subs	r3, #1
 8007194:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800719e:	697b      	ldr	r3, [r7, #20]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d018      	beq.n	80071ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c2:	441a      	add	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d303      	bcc.n	80071dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68d9      	ldr	r1, [r3, #12]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e4:	461a      	mov	r2, r3
 80071e6:	6838      	ldr	r0, [r7, #0]
 80071e8:	f002 fb3b 	bl	8009862 <memcpy>
	}
}
 80071ec:	bf00      	nop
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071fc:	f7ff fabc 	bl	8006778 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007206:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007208:	e011      	b.n	800722e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720e:	2b00      	cmp	r3, #0
 8007210:	d012      	beq.n	8007238 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3324      	adds	r3, #36	@ 0x24
 8007216:	4618      	mov	r0, r3
 8007218:	f000 fd34 	bl	8007c84 <xTaskRemoveFromEventList>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007222:	f000 fe0d 	bl	8007e40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007226:	7bfb      	ldrb	r3, [r7, #15]
 8007228:	3b01      	subs	r3, #1
 800722a:	b2db      	uxtb	r3, r3
 800722c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800722e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007232:	2b00      	cmp	r3, #0
 8007234:	dce9      	bgt.n	800720a <prvUnlockQueue+0x16>
 8007236:	e000      	b.n	800723a <prvUnlockQueue+0x46>
					break;
 8007238:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	22ff      	movs	r2, #255	@ 0xff
 800723e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007242:	f7ff facb 	bl	80067dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007246:	f7ff fa97 	bl	8006778 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007250:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007252:	e011      	b.n	8007278 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d012      	beq.n	8007282 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	3310      	adds	r3, #16
 8007260:	4618      	mov	r0, r3
 8007262:	f000 fd0f 	bl	8007c84 <xTaskRemoveFromEventList>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800726c:	f000 fde8 	bl	8007e40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	3b01      	subs	r3, #1
 8007274:	b2db      	uxtb	r3, r3
 8007276:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007278:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800727c:	2b00      	cmp	r3, #0
 800727e:	dce9      	bgt.n	8007254 <prvUnlockQueue+0x60>
 8007280:	e000      	b.n	8007284 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007282:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	22ff      	movs	r2, #255	@ 0xff
 8007288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800728c:	f7ff faa6 	bl	80067dc <vPortExitCritical>
}
 8007290:	bf00      	nop
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072a0:	f7ff fa6a 	bl	8006778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d102      	bne.n	80072b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072ac:	2301      	movs	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	e001      	b.n	80072b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072b6:	f7ff fa91 	bl	80067dc <vPortExitCritical>

	return xReturn;
 80072ba:	68fb      	ldr	r3, [r7, #12]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072cc:	f7ff fa54 	bl	8006778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d8:	429a      	cmp	r2, r3
 80072da:	d102      	bne.n	80072e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072dc:	2301      	movs	r3, #1
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	e001      	b.n	80072e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072e6:	f7ff fa79 	bl	80067dc <vPortExitCritical>

	return xReturn;
 80072ea:	68fb      	ldr	r3, [r7, #12]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072fe:	2300      	movs	r3, #0
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	e014      	b.n	800732e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007304:	4a0f      	ldr	r2, [pc, #60]	@ (8007344 <vQueueAddToRegistry+0x50>)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10b      	bne.n	8007328 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007310:	490c      	ldr	r1, [pc, #48]	@ (8007344 <vQueueAddToRegistry+0x50>)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800731a:	4a0a      	ldr	r2, [pc, #40]	@ (8007344 <vQueueAddToRegistry+0x50>)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	4413      	add	r3, r2
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007326:	e006      	b.n	8007336 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	3301      	adds	r3, #1
 800732c:	60fb      	str	r3, [r7, #12]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b07      	cmp	r3, #7
 8007332:	d9e7      	bls.n	8007304 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007334:	bf00      	nop
 8007336:	bf00      	nop
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	240045b0 	.word	0x240045b0

08007348 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007358:	f7ff fa0e 	bl	8006778 <vPortEnterCritical>
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007362:	b25b      	sxtb	r3, r3
 8007364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007368:	d103      	bne.n	8007372 <vQueueWaitForMessageRestricted+0x2a>
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007378:	b25b      	sxtb	r3, r3
 800737a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737e:	d103      	bne.n	8007388 <vQueueWaitForMessageRestricted+0x40>
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007388:	f7ff fa28 	bl	80067dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007390:	2b00      	cmp	r3, #0
 8007392:	d106      	bne.n	80073a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	3324      	adds	r3, #36	@ 0x24
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	68b9      	ldr	r1, [r7, #8]
 800739c:	4618      	mov	r0, r3
 800739e:	f000 fc45 	bl	8007c2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80073a2:	6978      	ldr	r0, [r7, #20]
 80073a4:	f7ff ff26 	bl	80071f4 <prvUnlockQueue>
	}
 80073a8:	bf00      	nop
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08e      	sub	sp, #56	@ 0x38
 80073b4:	af04      	add	r7, sp, #16
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10b      	bne.n	80073dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	623b      	str	r3, [r7, #32]
}
 80073d6:	bf00      	nop
 80073d8:	bf00      	nop
 80073da:	e7fd      	b.n	80073d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80073dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10b      	bne.n	80073fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	61fb      	str	r3, [r7, #28]
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	e7fd      	b.n	80073f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073fa:	235c      	movs	r3, #92	@ 0x5c
 80073fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2b5c      	cmp	r3, #92	@ 0x5c
 8007402:	d00b      	beq.n	800741c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	61bb      	str	r3, [r7, #24]
}
 8007416:	bf00      	nop
 8007418:	bf00      	nop
 800741a:	e7fd      	b.n	8007418 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800741c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800741e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007420:	2b00      	cmp	r3, #0
 8007422:	d01e      	beq.n	8007462 <xTaskCreateStatic+0xb2>
 8007424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007426:	2b00      	cmp	r3, #0
 8007428:	d01b      	beq.n	8007462 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800742a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007432:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007436:	2202      	movs	r2, #2
 8007438:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800743c:	2300      	movs	r3, #0
 800743e:	9303      	str	r3, [sp, #12]
 8007440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007442:	9302      	str	r3, [sp, #8]
 8007444:	f107 0314 	add.w	r3, r7, #20
 8007448:	9301      	str	r3, [sp, #4]
 800744a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	68b9      	ldr	r1, [r7, #8]
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f850 	bl	80074fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800745a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800745c:	f000 f8de 	bl	800761c <prvAddNewTaskToReadyList>
 8007460:	e001      	b.n	8007466 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007462:	2300      	movs	r3, #0
 8007464:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007466:	697b      	ldr	r3, [r7, #20]
	}
 8007468:	4618      	mov	r0, r3
 800746a:	3728      	adds	r7, #40	@ 0x28
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007470:	b580      	push	{r7, lr}
 8007472:	b08c      	sub	sp, #48	@ 0x30
 8007474:	af04      	add	r7, sp, #16
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	603b      	str	r3, [r7, #0]
 800747c:	4613      	mov	r3, r2
 800747e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007480:	88fb      	ldrh	r3, [r7, #6]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4618      	mov	r0, r3
 8007486:	f7fe fda5 	bl	8005fd4 <pvPortMalloc>
 800748a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00e      	beq.n	80074b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007492:	205c      	movs	r0, #92	@ 0x5c
 8007494:	f7fe fd9e 	bl	8005fd4 <pvPortMalloc>
 8007498:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d003      	beq.n	80074a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80074a6:	e005      	b.n	80074b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074a8:	6978      	ldr	r0, [r7, #20]
 80074aa:	f7fe fe61 	bl	8006170 <vPortFree>
 80074ae:	e001      	b.n	80074b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074b0:	2300      	movs	r3, #0
 80074b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d017      	beq.n	80074ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074c2:	88fa      	ldrh	r2, [r7, #6]
 80074c4:	2300      	movs	r3, #0
 80074c6:	9303      	str	r3, [sp, #12]
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	9302      	str	r3, [sp, #8]
 80074cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ce:	9301      	str	r3, [sp, #4]
 80074d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	68b9      	ldr	r1, [r7, #8]
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 f80e 	bl	80074fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074de:	69f8      	ldr	r0, [r7, #28]
 80074e0:	f000 f89c 	bl	800761c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074e4:	2301      	movs	r3, #1
 80074e6:	61bb      	str	r3, [r7, #24]
 80074e8:	e002      	b.n	80074f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074ea:	f04f 33ff 	mov.w	r3, #4294967295
 80074ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074f0:	69bb      	ldr	r3, [r7, #24]
	}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3720      	adds	r7, #32
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b088      	sub	sp, #32
 80074fe:	af00      	add	r7, sp, #0
 8007500:	60f8      	str	r0, [r7, #12]
 8007502:	60b9      	str	r1, [r7, #8]
 8007504:	607a      	str	r2, [r7, #4]
 8007506:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	461a      	mov	r2, r3
 8007512:	21a5      	movs	r1, #165	@ 0xa5
 8007514:	f002 f925 	bl	8009762 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800751c:	6879      	ldr	r1, [r7, #4]
 800751e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007522:	440b      	add	r3, r1
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	f023 0307 	bic.w	r3, r3, #7
 8007530:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	f003 0307 	and.w	r3, r3, #7
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00b      	beq.n	8007554 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	617b      	str	r3, [r7, #20]
}
 800754e:	bf00      	nop
 8007550:	bf00      	nop
 8007552:	e7fd      	b.n	8007550 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d01f      	beq.n	800759a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800755a:	2300      	movs	r3, #0
 800755c:	61fb      	str	r3, [r7, #28]
 800755e:	e012      	b.n	8007586 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	4413      	add	r3, r2
 8007566:	7819      	ldrb	r1, [r3, #0]
 8007568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	3334      	adds	r3, #52	@ 0x34
 8007570:	460a      	mov	r2, r1
 8007572:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	4413      	add	r3, r2
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d006      	beq.n	800758e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	3301      	adds	r3, #1
 8007584:	61fb      	str	r3, [r7, #28]
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	2b0f      	cmp	r3, #15
 800758a:	d9e9      	bls.n	8007560 <prvInitialiseNewTask+0x66>
 800758c:	e000      	b.n	8007590 <prvInitialiseNewTask+0x96>
			{
				break;
 800758e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007598:	e003      	b.n	80075a2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800759a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a4:	2b37      	cmp	r3, #55	@ 0x37
 80075a6:	d901      	bls.n	80075ac <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075a8:	2337      	movs	r3, #55	@ 0x37
 80075aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075b6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80075b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ba:	2200      	movs	r2, #0
 80075bc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c0:	3304      	adds	r3, #4
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fe ff14 	bl	80063f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ca:	3318      	adds	r3, #24
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fe ff0f 	bl	80063f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80075de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ea:	2200      	movs	r2, #0
 80075ec:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	68f9      	ldr	r1, [r7, #12]
 80075fa:	69b8      	ldr	r0, [r7, #24]
 80075fc:	f7fe ff8c 	bl	8006518 <pxPortInitialiseStack>
 8007600:	4602      	mov	r2, r0
 8007602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007604:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800760c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800760e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007610:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007612:	bf00      	nop
 8007614:	3720      	adds	r7, #32
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007624:	f7ff f8a8 	bl	8006778 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007628:	4b2d      	ldr	r3, [pc, #180]	@ (80076e0 <prvAddNewTaskToReadyList+0xc4>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3301      	adds	r3, #1
 800762e:	4a2c      	ldr	r2, [pc, #176]	@ (80076e0 <prvAddNewTaskToReadyList+0xc4>)
 8007630:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007632:	4b2c      	ldr	r3, [pc, #176]	@ (80076e4 <prvAddNewTaskToReadyList+0xc8>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d109      	bne.n	800764e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800763a:	4a2a      	ldr	r2, [pc, #168]	@ (80076e4 <prvAddNewTaskToReadyList+0xc8>)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007640:	4b27      	ldr	r3, [pc, #156]	@ (80076e0 <prvAddNewTaskToReadyList+0xc4>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d110      	bne.n	800766a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007648:	f000 fc1e 	bl	8007e88 <prvInitialiseTaskLists>
 800764c:	e00d      	b.n	800766a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800764e:	4b26      	ldr	r3, [pc, #152]	@ (80076e8 <prvAddNewTaskToReadyList+0xcc>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d109      	bne.n	800766a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007656:	4b23      	ldr	r3, [pc, #140]	@ (80076e4 <prvAddNewTaskToReadyList+0xc8>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007660:	429a      	cmp	r2, r3
 8007662:	d802      	bhi.n	800766a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007664:	4a1f      	ldr	r2, [pc, #124]	@ (80076e4 <prvAddNewTaskToReadyList+0xc8>)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800766a:	4b20      	ldr	r3, [pc, #128]	@ (80076ec <prvAddNewTaskToReadyList+0xd0>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3301      	adds	r3, #1
 8007670:	4a1e      	ldr	r2, [pc, #120]	@ (80076ec <prvAddNewTaskToReadyList+0xd0>)
 8007672:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007674:	4b1d      	ldr	r3, [pc, #116]	@ (80076ec <prvAddNewTaskToReadyList+0xd0>)
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007680:	4b1b      	ldr	r3, [pc, #108]	@ (80076f0 <prvAddNewTaskToReadyList+0xd4>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d903      	bls.n	8007690 <prvAddNewTaskToReadyList+0x74>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800768c:	4a18      	ldr	r2, [pc, #96]	@ (80076f0 <prvAddNewTaskToReadyList+0xd4>)
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007694:	4613      	mov	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4a15      	ldr	r2, [pc, #84]	@ (80076f4 <prvAddNewTaskToReadyList+0xd8>)
 800769e:	441a      	add	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	3304      	adds	r3, #4
 80076a4:	4619      	mov	r1, r3
 80076a6:	4610      	mov	r0, r2
 80076a8:	f7fe feaf 	bl	800640a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076ac:	f7ff f896 	bl	80067dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076b0:	4b0d      	ldr	r3, [pc, #52]	@ (80076e8 <prvAddNewTaskToReadyList+0xcc>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00e      	beq.n	80076d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076b8:	4b0a      	ldr	r3, [pc, #40]	@ (80076e4 <prvAddNewTaskToReadyList+0xc8>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d207      	bcs.n	80076d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076c6:	4b0c      	ldr	r3, [pc, #48]	@ (80076f8 <prvAddNewTaskToReadyList+0xdc>)
 80076c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076d6:	bf00      	nop
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	24004ac4 	.word	0x24004ac4
 80076e4:	240045f0 	.word	0x240045f0
 80076e8:	24004ad0 	.word	0x24004ad0
 80076ec:	24004ae0 	.word	0x24004ae0
 80076f0:	24004acc 	.word	0x24004acc
 80076f4:	240045f4 	.word	0x240045f4
 80076f8:	e000ed04 	.word	0xe000ed04

080076fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007704:	2300      	movs	r3, #0
 8007706:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d018      	beq.n	8007740 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800770e:	4b14      	ldr	r3, [pc, #80]	@ (8007760 <vTaskDelay+0x64>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00b      	beq.n	800772e <vTaskDelay+0x32>
	__asm volatile
 8007716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	60bb      	str	r3, [r7, #8]
}
 8007728:	bf00      	nop
 800772a:	bf00      	nop
 800772c:	e7fd      	b.n	800772a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800772e:	f000 f883 	bl	8007838 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007732:	2100      	movs	r1, #0
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fcf3 	bl	8008120 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800773a:	f000 f88b 	bl	8007854 <xTaskResumeAll>
 800773e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d107      	bne.n	8007756 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007746:	4b07      	ldr	r3, [pc, #28]	@ (8007764 <vTaskDelay+0x68>)
 8007748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007756:	bf00      	nop
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	24004aec 	.word	0x24004aec
 8007764:	e000ed04 	.word	0xe000ed04

08007768 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b08a      	sub	sp, #40	@ 0x28
 800776c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800776e:	2300      	movs	r3, #0
 8007770:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007772:	2300      	movs	r3, #0
 8007774:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007776:	463a      	mov	r2, r7
 8007778:	1d39      	adds	r1, r7, #4
 800777a:	f107 0308 	add.w	r3, r7, #8
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe fbf4 	bl	8005f6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	9202      	str	r2, [sp, #8]
 800778c:	9301      	str	r3, [sp, #4]
 800778e:	2300      	movs	r3, #0
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	2300      	movs	r3, #0
 8007794:	460a      	mov	r2, r1
 8007796:	4922      	ldr	r1, [pc, #136]	@ (8007820 <vTaskStartScheduler+0xb8>)
 8007798:	4822      	ldr	r0, [pc, #136]	@ (8007824 <vTaskStartScheduler+0xbc>)
 800779a:	f7ff fe09 	bl	80073b0 <xTaskCreateStatic>
 800779e:	4603      	mov	r3, r0
 80077a0:	4a21      	ldr	r2, [pc, #132]	@ (8007828 <vTaskStartScheduler+0xc0>)
 80077a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077a4:	4b20      	ldr	r3, [pc, #128]	@ (8007828 <vTaskStartScheduler+0xc0>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d002      	beq.n	80077b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077ac:	2301      	movs	r3, #1
 80077ae:	617b      	str	r3, [r7, #20]
 80077b0:	e001      	b.n	80077b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077b2:	2300      	movs	r3, #0
 80077b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d102      	bne.n	80077c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80077bc:	f000 fd04 	bl	80081c8 <xTimerCreateTimerTask>
 80077c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d116      	bne.n	80077f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80077c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	613b      	str	r3, [r7, #16]
}
 80077da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077dc:	4b13      	ldr	r3, [pc, #76]	@ (800782c <vTaskStartScheduler+0xc4>)
 80077de:	f04f 32ff 	mov.w	r2, #4294967295
 80077e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077e4:	4b12      	ldr	r3, [pc, #72]	@ (8007830 <vTaskStartScheduler+0xc8>)
 80077e6:	2201      	movs	r2, #1
 80077e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077ea:	4b12      	ldr	r3, [pc, #72]	@ (8007834 <vTaskStartScheduler+0xcc>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077f0:	f7fe ff1e 	bl	8006630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077f4:	e00f      	b.n	8007816 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fc:	d10b      	bne.n	8007816 <vTaskStartScheduler+0xae>
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	60fb      	str	r3, [r7, #12]
}
 8007810:	bf00      	nop
 8007812:	bf00      	nop
 8007814:	e7fd      	b.n	8007812 <vTaskStartScheduler+0xaa>
}
 8007816:	bf00      	nop
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	0800cdd0 	.word	0x0800cdd0
 8007824:	08007e59 	.word	0x08007e59
 8007828:	24004ae8 	.word	0x24004ae8
 800782c:	24004ae4 	.word	0x24004ae4
 8007830:	24004ad0 	.word	0x24004ad0
 8007834:	24004ac8 	.word	0x24004ac8

08007838 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800783c:	4b04      	ldr	r3, [pc, #16]	@ (8007850 <vTaskSuspendAll+0x18>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3301      	adds	r3, #1
 8007842:	4a03      	ldr	r2, [pc, #12]	@ (8007850 <vTaskSuspendAll+0x18>)
 8007844:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007846:	bf00      	nop
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	24004aec 	.word	0x24004aec

08007854 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800785a:	2300      	movs	r3, #0
 800785c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800785e:	2300      	movs	r3, #0
 8007860:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007862:	4b42      	ldr	r3, [pc, #264]	@ (800796c <xTaskResumeAll+0x118>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10b      	bne.n	8007882 <xTaskResumeAll+0x2e>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	603b      	str	r3, [r7, #0]
}
 800787c:	bf00      	nop
 800787e:	bf00      	nop
 8007880:	e7fd      	b.n	800787e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007882:	f7fe ff79 	bl	8006778 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007886:	4b39      	ldr	r3, [pc, #228]	@ (800796c <xTaskResumeAll+0x118>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3b01      	subs	r3, #1
 800788c:	4a37      	ldr	r2, [pc, #220]	@ (800796c <xTaskResumeAll+0x118>)
 800788e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007890:	4b36      	ldr	r3, [pc, #216]	@ (800796c <xTaskResumeAll+0x118>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d162      	bne.n	800795e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007898:	4b35      	ldr	r3, [pc, #212]	@ (8007970 <xTaskResumeAll+0x11c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d05e      	beq.n	800795e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078a0:	e02f      	b.n	8007902 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078a2:	4b34      	ldr	r3, [pc, #208]	@ (8007974 <xTaskResumeAll+0x120>)
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3318      	adds	r3, #24
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fe fe08 	bl	80064c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3304      	adds	r3, #4
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fe fe03 	bl	80064c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c2:	4b2d      	ldr	r3, [pc, #180]	@ (8007978 <xTaskResumeAll+0x124>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d903      	bls.n	80078d2 <xTaskResumeAll+0x7e>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ce:	4a2a      	ldr	r2, [pc, #168]	@ (8007978 <xTaskResumeAll+0x124>)
 80078d0:	6013      	str	r3, [r2, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d6:	4613      	mov	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4a27      	ldr	r2, [pc, #156]	@ (800797c <xTaskResumeAll+0x128>)
 80078e0:	441a      	add	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3304      	adds	r3, #4
 80078e6:	4619      	mov	r1, r3
 80078e8:	4610      	mov	r0, r2
 80078ea:	f7fe fd8e 	bl	800640a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f2:	4b23      	ldr	r3, [pc, #140]	@ (8007980 <xTaskResumeAll+0x12c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d302      	bcc.n	8007902 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80078fc:	4b21      	ldr	r3, [pc, #132]	@ (8007984 <xTaskResumeAll+0x130>)
 80078fe:	2201      	movs	r2, #1
 8007900:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007902:	4b1c      	ldr	r3, [pc, #112]	@ (8007974 <xTaskResumeAll+0x120>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1cb      	bne.n	80078a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007910:	f000 fb58 	bl	8007fc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007914:	4b1c      	ldr	r3, [pc, #112]	@ (8007988 <xTaskResumeAll+0x134>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d010      	beq.n	8007942 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007920:	f000 f846 	bl	80079b0 <xTaskIncrementTick>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d002      	beq.n	8007930 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800792a:	4b16      	ldr	r3, [pc, #88]	@ (8007984 <xTaskResumeAll+0x130>)
 800792c:	2201      	movs	r2, #1
 800792e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3b01      	subs	r3, #1
 8007934:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1f1      	bne.n	8007920 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800793c:	4b12      	ldr	r3, [pc, #72]	@ (8007988 <xTaskResumeAll+0x134>)
 800793e:	2200      	movs	r2, #0
 8007940:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007942:	4b10      	ldr	r3, [pc, #64]	@ (8007984 <xTaskResumeAll+0x130>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d009      	beq.n	800795e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800794a:	2301      	movs	r3, #1
 800794c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800794e:	4b0f      	ldr	r3, [pc, #60]	@ (800798c <xTaskResumeAll+0x138>)
 8007950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800795e:	f7fe ff3d 	bl	80067dc <vPortExitCritical>

	return xAlreadyYielded;
 8007962:	68bb      	ldr	r3, [r7, #8]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	24004aec 	.word	0x24004aec
 8007970:	24004ac4 	.word	0x24004ac4
 8007974:	24004a84 	.word	0x24004a84
 8007978:	24004acc 	.word	0x24004acc
 800797c:	240045f4 	.word	0x240045f4
 8007980:	240045f0 	.word	0x240045f0
 8007984:	24004ad8 	.word	0x24004ad8
 8007988:	24004ad4 	.word	0x24004ad4
 800798c:	e000ed04 	.word	0xe000ed04

08007990 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007996:	4b05      	ldr	r3, [pc, #20]	@ (80079ac <xTaskGetTickCount+0x1c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800799c:	687b      	ldr	r3, [r7, #4]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	24004ac8 	.word	0x24004ac8

080079b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079b6:	2300      	movs	r3, #0
 80079b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079ba:	4b4f      	ldr	r3, [pc, #316]	@ (8007af8 <xTaskIncrementTick+0x148>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f040 8090 	bne.w	8007ae4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079c4:	4b4d      	ldr	r3, [pc, #308]	@ (8007afc <xTaskIncrementTick+0x14c>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3301      	adds	r3, #1
 80079ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079cc:	4a4b      	ldr	r2, [pc, #300]	@ (8007afc <xTaskIncrementTick+0x14c>)
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d121      	bne.n	8007a1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80079d8:	4b49      	ldr	r3, [pc, #292]	@ (8007b00 <xTaskIncrementTick+0x150>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00b      	beq.n	80079fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	603b      	str	r3, [r7, #0]
}
 80079f4:	bf00      	nop
 80079f6:	bf00      	nop
 80079f8:	e7fd      	b.n	80079f6 <xTaskIncrementTick+0x46>
 80079fa:	4b41      	ldr	r3, [pc, #260]	@ (8007b00 <xTaskIncrementTick+0x150>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	4b40      	ldr	r3, [pc, #256]	@ (8007b04 <xTaskIncrementTick+0x154>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a3e      	ldr	r2, [pc, #248]	@ (8007b00 <xTaskIncrementTick+0x150>)
 8007a06:	6013      	str	r3, [r2, #0]
 8007a08:	4a3e      	ldr	r2, [pc, #248]	@ (8007b04 <xTaskIncrementTick+0x154>)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b08 <xTaskIncrementTick+0x158>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3301      	adds	r3, #1
 8007a14:	4a3c      	ldr	r2, [pc, #240]	@ (8007b08 <xTaskIncrementTick+0x158>)
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	f000 fad4 	bl	8007fc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8007b0c <xTaskIncrementTick+0x15c>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d349      	bcc.n	8007aba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a26:	4b36      	ldr	r3, [pc, #216]	@ (8007b00 <xTaskIncrementTick+0x150>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d104      	bne.n	8007a3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a30:	4b36      	ldr	r3, [pc, #216]	@ (8007b0c <xTaskIncrementTick+0x15c>)
 8007a32:	f04f 32ff 	mov.w	r2, #4294967295
 8007a36:	601a      	str	r2, [r3, #0]
					break;
 8007a38:	e03f      	b.n	8007aba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a3a:	4b31      	ldr	r3, [pc, #196]	@ (8007b00 <xTaskIncrementTick+0x150>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d203      	bcs.n	8007a5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a52:	4a2e      	ldr	r2, [pc, #184]	@ (8007b0c <xTaskIncrementTick+0x15c>)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a58:	e02f      	b.n	8007aba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fe fd30 	bl	80064c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d004      	beq.n	8007a76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	3318      	adds	r3, #24
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe fd27 	bl	80064c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a7a:	4b25      	ldr	r3, [pc, #148]	@ (8007b10 <xTaskIncrementTick+0x160>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d903      	bls.n	8007a8a <xTaskIncrementTick+0xda>
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a86:	4a22      	ldr	r2, [pc, #136]	@ (8007b10 <xTaskIncrementTick+0x160>)
 8007a88:	6013      	str	r3, [r2, #0]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a8e:	4613      	mov	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4a1f      	ldr	r2, [pc, #124]	@ (8007b14 <xTaskIncrementTick+0x164>)
 8007a98:	441a      	add	r2, r3
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	f7fe fcb2 	bl	800640a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8007b18 <xTaskIncrementTick+0x168>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d3b8      	bcc.n	8007a26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ab8:	e7b5      	b.n	8007a26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007aba:	4b17      	ldr	r3, [pc, #92]	@ (8007b18 <xTaskIncrementTick+0x168>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ac0:	4914      	ldr	r1, [pc, #80]	@ (8007b14 <xTaskIncrementTick+0x164>)
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	440b      	add	r3, r1
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d901      	bls.n	8007ad6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ad6:	4b11      	ldr	r3, [pc, #68]	@ (8007b1c <xTaskIncrementTick+0x16c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d007      	beq.n	8007aee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	617b      	str	r3, [r7, #20]
 8007ae2:	e004      	b.n	8007aee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8007b20 <xTaskIncrementTick+0x170>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	4a0d      	ldr	r2, [pc, #52]	@ (8007b20 <xTaskIncrementTick+0x170>)
 8007aec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007aee:	697b      	ldr	r3, [r7, #20]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	24004aec 	.word	0x24004aec
 8007afc:	24004ac8 	.word	0x24004ac8
 8007b00:	24004a7c 	.word	0x24004a7c
 8007b04:	24004a80 	.word	0x24004a80
 8007b08:	24004adc 	.word	0x24004adc
 8007b0c:	24004ae4 	.word	0x24004ae4
 8007b10:	24004acc 	.word	0x24004acc
 8007b14:	240045f4 	.word	0x240045f4
 8007b18:	240045f0 	.word	0x240045f0
 8007b1c:	24004ad8 	.word	0x24004ad8
 8007b20:	24004ad4 	.word	0x24004ad4

08007b24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b2a:	4b28      	ldr	r3, [pc, #160]	@ (8007bcc <vTaskSwitchContext+0xa8>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b32:	4b27      	ldr	r3, [pc, #156]	@ (8007bd0 <vTaskSwitchContext+0xac>)
 8007b34:	2201      	movs	r2, #1
 8007b36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b38:	e042      	b.n	8007bc0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007b3a:	4b25      	ldr	r3, [pc, #148]	@ (8007bd0 <vTaskSwitchContext+0xac>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b40:	4b24      	ldr	r3, [pc, #144]	@ (8007bd4 <vTaskSwitchContext+0xb0>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	e011      	b.n	8007b6c <vTaskSwitchContext+0x48>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10b      	bne.n	8007b66 <vTaskSwitchContext+0x42>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	607b      	str	r3, [r7, #4]
}
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	e7fd      	b.n	8007b62 <vTaskSwitchContext+0x3e>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	491a      	ldr	r1, [pc, #104]	@ (8007bd8 <vTaskSwitchContext+0xb4>)
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	4613      	mov	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	440b      	add	r3, r1
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d0e3      	beq.n	8007b48 <vTaskSwitchContext+0x24>
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4a13      	ldr	r2, [pc, #76]	@ (8007bd8 <vTaskSwitchContext+0xb4>)
 8007b8c:	4413      	add	r3, r2
 8007b8e:	60bb      	str	r3, [r7, #8]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	605a      	str	r2, [r3, #4]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d104      	bne.n	8007bb0 <vTaskSwitchContext+0x8c>
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	605a      	str	r2, [r3, #4]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	4a09      	ldr	r2, [pc, #36]	@ (8007bdc <vTaskSwitchContext+0xb8>)
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	4a06      	ldr	r2, [pc, #24]	@ (8007bd4 <vTaskSwitchContext+0xb0>)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6013      	str	r3, [r2, #0]
}
 8007bc0:	bf00      	nop
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	24004aec 	.word	0x24004aec
 8007bd0:	24004ad8 	.word	0x24004ad8
 8007bd4:	24004acc 	.word	0x24004acc
 8007bd8:	240045f4 	.word	0x240045f4
 8007bdc:	240045f0 	.word	0x240045f0

08007be0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10b      	bne.n	8007c08 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	60fb      	str	r3, [r7, #12]
}
 8007c02:	bf00      	nop
 8007c04:	bf00      	nop
 8007c06:	e7fd      	b.n	8007c04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c08:	4b07      	ldr	r3, [pc, #28]	@ (8007c28 <vTaskPlaceOnEventList+0x48>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3318      	adds	r3, #24
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7fe fc1e 	bl	8006452 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c16:	2101      	movs	r1, #1
 8007c18:	6838      	ldr	r0, [r7, #0]
 8007c1a:	f000 fa81 	bl	8008120 <prvAddCurrentTaskToDelayedList>
}
 8007c1e:	bf00      	nop
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	240045f0 	.word	0x240045f0

08007c2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10b      	bne.n	8007c56 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	617b      	str	r3, [r7, #20]
}
 8007c50:	bf00      	nop
 8007c52:	bf00      	nop
 8007c54:	e7fd      	b.n	8007c52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c56:	4b0a      	ldr	r3, [pc, #40]	@ (8007c80 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3318      	adds	r3, #24
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f7fe fbd3 	bl	800640a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c6e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	68b8      	ldr	r0, [r7, #8]
 8007c74:	f000 fa54 	bl	8008120 <prvAddCurrentTaskToDelayedList>
	}
 8007c78:	bf00      	nop
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	240045f0 	.word	0x240045f0

08007c84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10b      	bne.n	8007cb2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	60fb      	str	r3, [r7, #12]
}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	e7fd      	b.n	8007cae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	3318      	adds	r3, #24
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe fc04 	bl	80064c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8007d34 <xTaskRemoveFromEventList+0xb0>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d11d      	bne.n	8007d00 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fe fbfb 	bl	80064c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd2:	4b19      	ldr	r3, [pc, #100]	@ (8007d38 <xTaskRemoveFromEventList+0xb4>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d903      	bls.n	8007ce2 <xTaskRemoveFromEventList+0x5e>
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cde:	4a16      	ldr	r2, [pc, #88]	@ (8007d38 <xTaskRemoveFromEventList+0xb4>)
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4a13      	ldr	r2, [pc, #76]	@ (8007d3c <xTaskRemoveFromEventList+0xb8>)
 8007cf0:	441a      	add	r2, r3
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	f7fe fb86 	bl	800640a <vListInsertEnd>
 8007cfe:	e005      	b.n	8007d0c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	3318      	adds	r3, #24
 8007d04:	4619      	mov	r1, r3
 8007d06:	480e      	ldr	r0, [pc, #56]	@ (8007d40 <xTaskRemoveFromEventList+0xbc>)
 8007d08:	f7fe fb7f 	bl	800640a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d10:	4b0c      	ldr	r3, [pc, #48]	@ (8007d44 <xTaskRemoveFromEventList+0xc0>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d905      	bls.n	8007d26 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d48 <xTaskRemoveFromEventList+0xc4>)
 8007d20:	2201      	movs	r2, #1
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	e001      	b.n	8007d2a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007d26:	2300      	movs	r3, #0
 8007d28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d2a:	697b      	ldr	r3, [r7, #20]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	24004aec 	.word	0x24004aec
 8007d38:	24004acc 	.word	0x24004acc
 8007d3c:	240045f4 	.word	0x240045f4
 8007d40:	24004a84 	.word	0x24004a84
 8007d44:	240045f0 	.word	0x240045f0
 8007d48:	24004ad8 	.word	0x24004ad8

08007d4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d54:	4b06      	ldr	r3, [pc, #24]	@ (8007d70 <vTaskInternalSetTimeOutState+0x24>)
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d5c:	4b05      	ldr	r3, [pc, #20]	@ (8007d74 <vTaskInternalSetTimeOutState+0x28>)
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	605a      	str	r2, [r3, #4]
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr
 8007d70:	24004adc 	.word	0x24004adc
 8007d74:	24004ac8 	.word	0x24004ac8

08007d78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10b      	bne.n	8007da0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	613b      	str	r3, [r7, #16]
}
 8007d9a:	bf00      	nop
 8007d9c:	bf00      	nop
 8007d9e:	e7fd      	b.n	8007d9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10b      	bne.n	8007dbe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	60fb      	str	r3, [r7, #12]
}
 8007db8:	bf00      	nop
 8007dba:	bf00      	nop
 8007dbc:	e7fd      	b.n	8007dba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007dbe:	f7fe fcdb 	bl	8006778 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8007e38 <xTaskCheckForTimeOut+0xc0>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dda:	d102      	bne.n	8007de2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	61fb      	str	r3, [r7, #28]
 8007de0:	e023      	b.n	8007e2a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	4b15      	ldr	r3, [pc, #84]	@ (8007e3c <xTaskCheckForTimeOut+0xc4>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d007      	beq.n	8007dfe <xTaskCheckForTimeOut+0x86>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	69ba      	ldr	r2, [r7, #24]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d302      	bcc.n	8007dfe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	61fb      	str	r3, [r7, #28]
 8007dfc:	e015      	b.n	8007e2a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d20b      	bcs.n	8007e20 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	1ad2      	subs	r2, r2, r3
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7ff ff99 	bl	8007d4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	61fb      	str	r3, [r7, #28]
 8007e1e:	e004      	b.n	8007e2a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e26:	2301      	movs	r3, #1
 8007e28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e2a:	f7fe fcd7 	bl	80067dc <vPortExitCritical>

	return xReturn;
 8007e2e:	69fb      	ldr	r3, [r7, #28]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3720      	adds	r7, #32
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	24004ac8 	.word	0x24004ac8
 8007e3c:	24004adc 	.word	0x24004adc

08007e40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e40:	b480      	push	{r7}
 8007e42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e44:	4b03      	ldr	r3, [pc, #12]	@ (8007e54 <vTaskMissedYield+0x14>)
 8007e46:	2201      	movs	r2, #1
 8007e48:	601a      	str	r2, [r3, #0]
}
 8007e4a:	bf00      	nop
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	24004ad8 	.word	0x24004ad8

08007e58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e60:	f000 f852 	bl	8007f08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e64:	4b06      	ldr	r3, [pc, #24]	@ (8007e80 <prvIdleTask+0x28>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d9f9      	bls.n	8007e60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e6c:	4b05      	ldr	r3, [pc, #20]	@ (8007e84 <prvIdleTask+0x2c>)
 8007e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e7c:	e7f0      	b.n	8007e60 <prvIdleTask+0x8>
 8007e7e:	bf00      	nop
 8007e80:	240045f4 	.word	0x240045f4
 8007e84:	e000ed04 	.word	0xe000ed04

08007e88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e8e:	2300      	movs	r3, #0
 8007e90:	607b      	str	r3, [r7, #4]
 8007e92:	e00c      	b.n	8007eae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	4613      	mov	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4a12      	ldr	r2, [pc, #72]	@ (8007ee8 <prvInitialiseTaskLists+0x60>)
 8007ea0:	4413      	add	r3, r2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe fa84 	bl	80063b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	607b      	str	r3, [r7, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2b37      	cmp	r3, #55	@ 0x37
 8007eb2:	d9ef      	bls.n	8007e94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007eb4:	480d      	ldr	r0, [pc, #52]	@ (8007eec <prvInitialiseTaskLists+0x64>)
 8007eb6:	f7fe fa7b 	bl	80063b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007eba:	480d      	ldr	r0, [pc, #52]	@ (8007ef0 <prvInitialiseTaskLists+0x68>)
 8007ebc:	f7fe fa78 	bl	80063b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ec0:	480c      	ldr	r0, [pc, #48]	@ (8007ef4 <prvInitialiseTaskLists+0x6c>)
 8007ec2:	f7fe fa75 	bl	80063b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ec6:	480c      	ldr	r0, [pc, #48]	@ (8007ef8 <prvInitialiseTaskLists+0x70>)
 8007ec8:	f7fe fa72 	bl	80063b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ecc:	480b      	ldr	r0, [pc, #44]	@ (8007efc <prvInitialiseTaskLists+0x74>)
 8007ece:	f7fe fa6f 	bl	80063b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8007f00 <prvInitialiseTaskLists+0x78>)
 8007ed4:	4a05      	ldr	r2, [pc, #20]	@ (8007eec <prvInitialiseTaskLists+0x64>)
 8007ed6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8007f04 <prvInitialiseTaskLists+0x7c>)
 8007eda:	4a05      	ldr	r2, [pc, #20]	@ (8007ef0 <prvInitialiseTaskLists+0x68>)
 8007edc:	601a      	str	r2, [r3, #0]
}
 8007ede:	bf00      	nop
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	240045f4 	.word	0x240045f4
 8007eec:	24004a54 	.word	0x24004a54
 8007ef0:	24004a68 	.word	0x24004a68
 8007ef4:	24004a84 	.word	0x24004a84
 8007ef8:	24004a98 	.word	0x24004a98
 8007efc:	24004ab0 	.word	0x24004ab0
 8007f00:	24004a7c 	.word	0x24004a7c
 8007f04:	24004a80 	.word	0x24004a80

08007f08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f0e:	e019      	b.n	8007f44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f10:	f7fe fc32 	bl	8006778 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f14:	4b10      	ldr	r3, [pc, #64]	@ (8007f58 <prvCheckTasksWaitingTermination+0x50>)
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3304      	adds	r3, #4
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fe facf 	bl	80064c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f26:	4b0d      	ldr	r3, [pc, #52]	@ (8007f5c <prvCheckTasksWaitingTermination+0x54>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8007f5c <prvCheckTasksWaitingTermination+0x54>)
 8007f2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f30:	4b0b      	ldr	r3, [pc, #44]	@ (8007f60 <prvCheckTasksWaitingTermination+0x58>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	4a0a      	ldr	r2, [pc, #40]	@ (8007f60 <prvCheckTasksWaitingTermination+0x58>)
 8007f38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f3a:	f7fe fc4f 	bl	80067dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f810 	bl	8007f64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f44:	4b06      	ldr	r3, [pc, #24]	@ (8007f60 <prvCheckTasksWaitingTermination+0x58>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e1      	bne.n	8007f10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f4c:	bf00      	nop
 8007f4e:	bf00      	nop
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	24004a98 	.word	0x24004a98
 8007f5c:	24004ac4 	.word	0x24004ac4
 8007f60:	24004aac 	.word	0x24004aac

08007f64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d108      	bne.n	8007f88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fe f8f8 	bl	8006170 <vPortFree>
				vPortFree( pxTCB );
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7fe f8f5 	bl	8006170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f86:	e019      	b.n	8007fbc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d103      	bne.n	8007f9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7fe f8ec 	bl	8006170 <vPortFree>
	}
 8007f98:	e010      	b.n	8007fbc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d00b      	beq.n	8007fbc <prvDeleteTCB+0x58>
	__asm volatile
 8007fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	60fb      	str	r3, [r7, #12]
}
 8007fb6:	bf00      	nop
 8007fb8:	bf00      	nop
 8007fba:	e7fd      	b.n	8007fb8 <prvDeleteTCB+0x54>
	}
 8007fbc:	bf00      	nop
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fca:	4b0c      	ldr	r3, [pc, #48]	@ (8007ffc <prvResetNextTaskUnblockTime+0x38>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d104      	bne.n	8007fde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8008000 <prvResetNextTaskUnblockTime+0x3c>)
 8007fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fdc:	e008      	b.n	8007ff0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fde:	4b07      	ldr	r3, [pc, #28]	@ (8007ffc <prvResetNextTaskUnblockTime+0x38>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	4a04      	ldr	r2, [pc, #16]	@ (8008000 <prvResetNextTaskUnblockTime+0x3c>)
 8007fee:	6013      	str	r3, [r2, #0]
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	24004a7c 	.word	0x24004a7c
 8008000:	24004ae4 	.word	0x24004ae4

08008004 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800800a:	4b0b      	ldr	r3, [pc, #44]	@ (8008038 <xTaskGetSchedulerState+0x34>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d102      	bne.n	8008018 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008012:	2301      	movs	r3, #1
 8008014:	607b      	str	r3, [r7, #4]
 8008016:	e008      	b.n	800802a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008018:	4b08      	ldr	r3, [pc, #32]	@ (800803c <xTaskGetSchedulerState+0x38>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d102      	bne.n	8008026 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008020:	2302      	movs	r3, #2
 8008022:	607b      	str	r3, [r7, #4]
 8008024:	e001      	b.n	800802a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008026:	2300      	movs	r3, #0
 8008028:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800802a:	687b      	ldr	r3, [r7, #4]
	}
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	24004ad0 	.word	0x24004ad0
 800803c:	24004aec 	.word	0x24004aec

08008040 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800804c:	2300      	movs	r3, #0
 800804e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d058      	beq.n	8008108 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008056:	4b2f      	ldr	r3, [pc, #188]	@ (8008114 <xTaskPriorityDisinherit+0xd4>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	429a      	cmp	r2, r3
 800805e:	d00b      	beq.n	8008078 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	60fb      	str	r3, [r7, #12]
}
 8008072:	bf00      	nop
 8008074:	bf00      	nop
 8008076:	e7fd      	b.n	8008074 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10b      	bne.n	8008098 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	60bb      	str	r3, [r7, #8]
}
 8008092:	bf00      	nop
 8008094:	bf00      	nop
 8008096:	e7fd      	b.n	8008094 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800809c:	1e5a      	subs	r2, r3, #1
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d02c      	beq.n	8008108 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d128      	bne.n	8008108 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	3304      	adds	r3, #4
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe fa02 	bl	80064c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008118 <xTaskPriorityDisinherit+0xd8>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d903      	bls.n	80080e8 <xTaskPriorityDisinherit+0xa8>
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e4:	4a0c      	ldr	r2, [pc, #48]	@ (8008118 <xTaskPriorityDisinherit+0xd8>)
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ec:	4613      	mov	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4a09      	ldr	r2, [pc, #36]	@ (800811c <xTaskPriorityDisinherit+0xdc>)
 80080f6:	441a      	add	r2, r3
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	3304      	adds	r3, #4
 80080fc:	4619      	mov	r1, r3
 80080fe:	4610      	mov	r0, r2
 8008100:	f7fe f983 	bl	800640a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008104:	2301      	movs	r3, #1
 8008106:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008108:	697b      	ldr	r3, [r7, #20]
	}
 800810a:	4618      	mov	r0, r3
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	240045f0 	.word	0x240045f0
 8008118:	24004acc 	.word	0x24004acc
 800811c:	240045f4 	.word	0x240045f4

08008120 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800812a:	4b21      	ldr	r3, [pc, #132]	@ (80081b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008130:	4b20      	ldr	r3, [pc, #128]	@ (80081b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3304      	adds	r3, #4
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe f9c4 	bl	80064c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008142:	d10a      	bne.n	800815a <prvAddCurrentTaskToDelayedList+0x3a>
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d007      	beq.n	800815a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800814a:	4b1a      	ldr	r3, [pc, #104]	@ (80081b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	3304      	adds	r3, #4
 8008150:	4619      	mov	r1, r3
 8008152:	4819      	ldr	r0, [pc, #100]	@ (80081b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008154:	f7fe f959 	bl	800640a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008158:	e026      	b.n	80081a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4413      	add	r3, r2
 8008160:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008162:	4b14      	ldr	r3, [pc, #80]	@ (80081b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	429a      	cmp	r2, r3
 8008170:	d209      	bcs.n	8008186 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008172:	4b12      	ldr	r3, [pc, #72]	@ (80081bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	4b0f      	ldr	r3, [pc, #60]	@ (80081b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3304      	adds	r3, #4
 800817c:	4619      	mov	r1, r3
 800817e:	4610      	mov	r0, r2
 8008180:	f7fe f967 	bl	8006452 <vListInsert>
}
 8008184:	e010      	b.n	80081a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008186:	4b0e      	ldr	r3, [pc, #56]	@ (80081c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	4b0a      	ldr	r3, [pc, #40]	@ (80081b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3304      	adds	r3, #4
 8008190:	4619      	mov	r1, r3
 8008192:	4610      	mov	r0, r2
 8008194:	f7fe f95d 	bl	8006452 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008198:	4b0a      	ldr	r3, [pc, #40]	@ (80081c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d202      	bcs.n	80081a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80081a2:	4a08      	ldr	r2, [pc, #32]	@ (80081c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	6013      	str	r3, [r2, #0]
}
 80081a8:	bf00      	nop
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	24004ac8 	.word	0x24004ac8
 80081b4:	240045f0 	.word	0x240045f0
 80081b8:	24004ab0 	.word	0x24004ab0
 80081bc:	24004a80 	.word	0x24004a80
 80081c0:	24004a7c 	.word	0x24004a7c
 80081c4:	24004ae4 	.word	0x24004ae4

080081c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08a      	sub	sp, #40	@ 0x28
 80081cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80081ce:	2300      	movs	r3, #0
 80081d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80081d2:	f000 fb13 	bl	80087fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80081d6:	4b1d      	ldr	r3, [pc, #116]	@ (800824c <xTimerCreateTimerTask+0x84>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d021      	beq.n	8008222 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081e6:	1d3a      	adds	r2, r7, #4
 80081e8:	f107 0108 	add.w	r1, r7, #8
 80081ec:	f107 030c 	add.w	r3, r7, #12
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fd fed5 	bl	8005fa0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	9202      	str	r2, [sp, #8]
 80081fe:	9301      	str	r3, [sp, #4]
 8008200:	2302      	movs	r3, #2
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	2300      	movs	r3, #0
 8008206:	460a      	mov	r2, r1
 8008208:	4911      	ldr	r1, [pc, #68]	@ (8008250 <xTimerCreateTimerTask+0x88>)
 800820a:	4812      	ldr	r0, [pc, #72]	@ (8008254 <xTimerCreateTimerTask+0x8c>)
 800820c:	f7ff f8d0 	bl	80073b0 <xTaskCreateStatic>
 8008210:	4603      	mov	r3, r0
 8008212:	4a11      	ldr	r2, [pc, #68]	@ (8008258 <xTimerCreateTimerTask+0x90>)
 8008214:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008216:	4b10      	ldr	r3, [pc, #64]	@ (8008258 <xTimerCreateTimerTask+0x90>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800821e:	2301      	movs	r3, #1
 8008220:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10b      	bne.n	8008240 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822c:	f383 8811 	msr	BASEPRI, r3
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	f3bf 8f4f 	dsb	sy
 8008238:	613b      	str	r3, [r7, #16]
}
 800823a:	bf00      	nop
 800823c:	bf00      	nop
 800823e:	e7fd      	b.n	800823c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008240:	697b      	ldr	r3, [r7, #20]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	24004b20 	.word	0x24004b20
 8008250:	0800cdd8 	.word	0x0800cdd8
 8008254:	08008395 	.word	0x08008395
 8008258:	24004b24 	.word	0x24004b24

0800825c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08a      	sub	sp, #40	@ 0x28
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800826a:	2300      	movs	r3, #0
 800826c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10b      	bne.n	800828c <xTimerGenericCommand+0x30>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	623b      	str	r3, [r7, #32]
}
 8008286:	bf00      	nop
 8008288:	bf00      	nop
 800828a:	e7fd      	b.n	8008288 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800828c:	4b19      	ldr	r3, [pc, #100]	@ (80082f4 <xTimerGenericCommand+0x98>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d02a      	beq.n	80082ea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2b05      	cmp	r3, #5
 80082a4:	dc18      	bgt.n	80082d8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80082a6:	f7ff fead 	bl	8008004 <xTaskGetSchedulerState>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d109      	bne.n	80082c4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80082b0:	4b10      	ldr	r3, [pc, #64]	@ (80082f4 <xTimerGenericCommand+0x98>)
 80082b2:	6818      	ldr	r0, [r3, #0]
 80082b4:	f107 0110 	add.w	r1, r7, #16
 80082b8:	2300      	movs	r3, #0
 80082ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082bc:	f7fe fc88 	bl	8006bd0 <xQueueGenericSend>
 80082c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80082c2:	e012      	b.n	80082ea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80082c4:	4b0b      	ldr	r3, [pc, #44]	@ (80082f4 <xTimerGenericCommand+0x98>)
 80082c6:	6818      	ldr	r0, [r3, #0]
 80082c8:	f107 0110 	add.w	r1, r7, #16
 80082cc:	2300      	movs	r3, #0
 80082ce:	2200      	movs	r2, #0
 80082d0:	f7fe fc7e 	bl	8006bd0 <xQueueGenericSend>
 80082d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80082d6:	e008      	b.n	80082ea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082d8:	4b06      	ldr	r3, [pc, #24]	@ (80082f4 <xTimerGenericCommand+0x98>)
 80082da:	6818      	ldr	r0, [r3, #0]
 80082dc:	f107 0110 	add.w	r1, r7, #16
 80082e0:	2300      	movs	r3, #0
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	f7fe fd76 	bl	8006dd4 <xQueueGenericSendFromISR>
 80082e8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80082ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3728      	adds	r7, #40	@ 0x28
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	24004b20 	.word	0x24004b20

080082f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af02      	add	r7, sp, #8
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008302:	4b23      	ldr	r3, [pc, #140]	@ (8008390 <prvProcessExpiredTimer+0x98>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	3304      	adds	r3, #4
 8008310:	4618      	mov	r0, r3
 8008312:	f7fe f8d7 	bl	80064c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b00      	cmp	r3, #0
 8008322:	d023      	beq.n	800836c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	699a      	ldr	r2, [r3, #24]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	18d1      	adds	r1, r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	6978      	ldr	r0, [r7, #20]
 8008332:	f000 f8d5 	bl	80084e0 <prvInsertTimerInActiveList>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d020      	beq.n	800837e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800833c:	2300      	movs	r3, #0
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	2300      	movs	r3, #0
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	2100      	movs	r1, #0
 8008346:	6978      	ldr	r0, [r7, #20]
 8008348:	f7ff ff88 	bl	800825c <xTimerGenericCommand>
 800834c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d114      	bne.n	800837e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	60fb      	str	r3, [r7, #12]
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	e7fd      	b.n	8008368 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008372:	f023 0301 	bic.w	r3, r3, #1
 8008376:	b2da      	uxtb	r2, r3
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	6978      	ldr	r0, [r7, #20]
 8008384:	4798      	blx	r3
}
 8008386:	bf00      	nop
 8008388:	3718      	adds	r7, #24
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	24004b18 	.word	0x24004b18

08008394 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800839c:	f107 0308 	add.w	r3, r7, #8
 80083a0:	4618      	mov	r0, r3
 80083a2:	f000 f859 	bl	8008458 <prvGetNextExpireTime>
 80083a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	4619      	mov	r1, r3
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 f805 	bl	80083bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80083b2:	f000 f8d7 	bl	8008564 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083b6:	bf00      	nop
 80083b8:	e7f0      	b.n	800839c <prvTimerTask+0x8>
	...

080083bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80083c6:	f7ff fa37 	bl	8007838 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083ca:	f107 0308 	add.w	r3, r7, #8
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 f866 	bl	80084a0 <prvSampleTimeNow>
 80083d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d130      	bne.n	800843e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10a      	bne.n	80083f8 <prvProcessTimerOrBlockTask+0x3c>
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d806      	bhi.n	80083f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80083ea:	f7ff fa33 	bl	8007854 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80083ee:	68f9      	ldr	r1, [r7, #12]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f7ff ff81 	bl	80082f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80083f6:	e024      	b.n	8008442 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d008      	beq.n	8008410 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083fe:	4b13      	ldr	r3, [pc, #76]	@ (800844c <prvProcessTimerOrBlockTask+0x90>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <prvProcessTimerOrBlockTask+0x50>
 8008408:	2301      	movs	r3, #1
 800840a:	e000      	b.n	800840e <prvProcessTimerOrBlockTask+0x52>
 800840c:	2300      	movs	r3, #0
 800840e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008410:	4b0f      	ldr	r3, [pc, #60]	@ (8008450 <prvProcessTimerOrBlockTask+0x94>)
 8008412:	6818      	ldr	r0, [r3, #0]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	4619      	mov	r1, r3
 800841e:	f7fe ff93 	bl	8007348 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008422:	f7ff fa17 	bl	8007854 <xTaskResumeAll>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d10a      	bne.n	8008442 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800842c:	4b09      	ldr	r3, [pc, #36]	@ (8008454 <prvProcessTimerOrBlockTask+0x98>)
 800842e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	f3bf 8f6f 	isb	sy
}
 800843c:	e001      	b.n	8008442 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800843e:	f7ff fa09 	bl	8007854 <xTaskResumeAll>
}
 8008442:	bf00      	nop
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	24004b1c 	.word	0x24004b1c
 8008450:	24004b20 	.word	0x24004b20
 8008454:	e000ed04 	.word	0xe000ed04

08008458 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008460:	4b0e      	ldr	r3, [pc, #56]	@ (800849c <prvGetNextExpireTime+0x44>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <prvGetNextExpireTime+0x16>
 800846a:	2201      	movs	r2, #1
 800846c:	e000      	b.n	8008470 <prvGetNextExpireTime+0x18>
 800846e:	2200      	movs	r2, #0
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d105      	bne.n	8008488 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800847c:	4b07      	ldr	r3, [pc, #28]	@ (800849c <prvGetNextExpireTime+0x44>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	60fb      	str	r3, [r7, #12]
 8008486:	e001      	b.n	800848c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800848c:	68fb      	ldr	r3, [r7, #12]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	24004b18 	.word	0x24004b18

080084a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80084a8:	f7ff fa72 	bl	8007990 <xTaskGetTickCount>
 80084ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80084ae:	4b0b      	ldr	r3, [pc, #44]	@ (80084dc <prvSampleTimeNow+0x3c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d205      	bcs.n	80084c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80084b8:	f000 f93a 	bl	8008730 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	601a      	str	r2, [r3, #0]
 80084c2:	e002      	b.n	80084ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80084ca:	4a04      	ldr	r2, [pc, #16]	@ (80084dc <prvSampleTimeNow+0x3c>)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80084d0:	68fb      	ldr	r3, [r7, #12]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	24004b28 	.word	0x24004b28

080084e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
 80084ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80084ee:	2300      	movs	r3, #0
 80084f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	429a      	cmp	r2, r3
 8008504:	d812      	bhi.n	800852c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	1ad2      	subs	r2, r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	429a      	cmp	r2, r3
 8008512:	d302      	bcc.n	800851a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008514:	2301      	movs	r3, #1
 8008516:	617b      	str	r3, [r7, #20]
 8008518:	e01b      	b.n	8008552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800851a:	4b10      	ldr	r3, [pc, #64]	@ (800855c <prvInsertTimerInActiveList+0x7c>)
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3304      	adds	r3, #4
 8008522:	4619      	mov	r1, r3
 8008524:	4610      	mov	r0, r2
 8008526:	f7fd ff94 	bl	8006452 <vListInsert>
 800852a:	e012      	b.n	8008552 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	429a      	cmp	r2, r3
 8008532:	d206      	bcs.n	8008542 <prvInsertTimerInActiveList+0x62>
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	429a      	cmp	r2, r3
 800853a:	d302      	bcc.n	8008542 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800853c:	2301      	movs	r3, #1
 800853e:	617b      	str	r3, [r7, #20]
 8008540:	e007      	b.n	8008552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008542:	4b07      	ldr	r3, [pc, #28]	@ (8008560 <prvInsertTimerInActiveList+0x80>)
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3304      	adds	r3, #4
 800854a:	4619      	mov	r1, r3
 800854c:	4610      	mov	r0, r2
 800854e:	f7fd ff80 	bl	8006452 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008552:	697b      	ldr	r3, [r7, #20]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3718      	adds	r7, #24
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	24004b1c 	.word	0x24004b1c
 8008560:	24004b18 	.word	0x24004b18

08008564 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b08e      	sub	sp, #56	@ 0x38
 8008568:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800856a:	e0ce      	b.n	800870a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	da19      	bge.n	80085a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008572:	1d3b      	adds	r3, r7, #4
 8008574:	3304      	adds	r3, #4
 8008576:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10b      	bne.n	8008596 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	61fb      	str	r3, [r7, #28]
}
 8008590:	bf00      	nop
 8008592:	bf00      	nop
 8008594:	e7fd      	b.n	8008592 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800859c:	6850      	ldr	r0, [r2, #4]
 800859e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085a0:	6892      	ldr	r2, [r2, #8]
 80085a2:	4611      	mov	r1, r2
 80085a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f2c0 80ae 	blt.w	800870a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80085b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d004      	beq.n	80085c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085bc:	3304      	adds	r3, #4
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fd ff80 	bl	80064c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085c4:	463b      	mov	r3, r7
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7ff ff6a 	bl	80084a0 <prvSampleTimeNow>
 80085cc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b09      	cmp	r3, #9
 80085d2:	f200 8097 	bhi.w	8008704 <prvProcessReceivedCommands+0x1a0>
 80085d6:	a201      	add	r2, pc, #4	@ (adr r2, 80085dc <prvProcessReceivedCommands+0x78>)
 80085d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085dc:	08008605 	.word	0x08008605
 80085e0:	08008605 	.word	0x08008605
 80085e4:	08008605 	.word	0x08008605
 80085e8:	0800867b 	.word	0x0800867b
 80085ec:	0800868f 	.word	0x0800868f
 80085f0:	080086db 	.word	0x080086db
 80085f4:	08008605 	.word	0x08008605
 80085f8:	08008605 	.word	0x08008605
 80085fc:	0800867b 	.word	0x0800867b
 8008600:	0800868f 	.word	0x0800868f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008606:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800860a:	f043 0301 	orr.w	r3, r3, #1
 800860e:	b2da      	uxtb	r2, r3
 8008610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008612:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	18d1      	adds	r1, r2, r3
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008624:	f7ff ff5c 	bl	80084e0 <prvInsertTimerInActiveList>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d06c      	beq.n	8008708 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800862e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008634:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008638:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800863c:	f003 0304 	and.w	r3, r3, #4
 8008640:	2b00      	cmp	r3, #0
 8008642:	d061      	beq.n	8008708 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	441a      	add	r2, r3
 800864c:	2300      	movs	r3, #0
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	2300      	movs	r3, #0
 8008652:	2100      	movs	r1, #0
 8008654:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008656:	f7ff fe01 	bl	800825c <xTimerGenericCommand>
 800865a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800865c:	6a3b      	ldr	r3, [r7, #32]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d152      	bne.n	8008708 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	61bb      	str	r3, [r7, #24]
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800867a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008680:	f023 0301 	bic.w	r3, r3, #1
 8008684:	b2da      	uxtb	r2, r3
 8008686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008688:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800868c:	e03d      	b.n	800870a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800868e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008690:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008694:	f043 0301 	orr.w	r3, r3, #1
 8008698:	b2da      	uxtb	r2, r3
 800869a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80086a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10b      	bne.n	80086c6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	617b      	str	r3, [r7, #20]
}
 80086c0:	bf00      	nop
 80086c2:	bf00      	nop
 80086c4:	e7fd      	b.n	80086c2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80086c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c8:	699a      	ldr	r2, [r3, #24]
 80086ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086cc:	18d1      	adds	r1, r2, r3
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086d4:	f7ff ff04 	bl	80084e0 <prvInsertTimerInActiveList>
					break;
 80086d8:	e017      	b.n	800870a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80086da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086e0:	f003 0302 	and.w	r3, r3, #2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d103      	bne.n	80086f0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80086e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086ea:	f7fd fd41 	bl	8006170 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80086ee:	e00c      	b.n	800870a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086f6:	f023 0301 	bic.w	r3, r3, #1
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008702:	e002      	b.n	800870a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008704:	bf00      	nop
 8008706:	e000      	b.n	800870a <prvProcessReceivedCommands+0x1a6>
					break;
 8008708:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800870a:	4b08      	ldr	r3, [pc, #32]	@ (800872c <prvProcessReceivedCommands+0x1c8>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	1d39      	adds	r1, r7, #4
 8008710:	2200      	movs	r2, #0
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe fbfc 	bl	8006f10 <xQueueReceive>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	f47f af26 	bne.w	800856c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008720:	bf00      	nop
 8008722:	bf00      	nop
 8008724:	3730      	adds	r7, #48	@ 0x30
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	24004b20 	.word	0x24004b20

08008730 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b088      	sub	sp, #32
 8008734:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008736:	e049      	b.n	80087cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008738:	4b2e      	ldr	r3, [pc, #184]	@ (80087f4 <prvSwitchTimerLists+0xc4>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008742:	4b2c      	ldr	r3, [pc, #176]	@ (80087f4 <prvSwitchTimerLists+0xc4>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	3304      	adds	r3, #4
 8008750:	4618      	mov	r0, r3
 8008752:	f7fd feb7 	bl	80064c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008764:	f003 0304 	and.w	r3, r3, #4
 8008768:	2b00      	cmp	r3, #0
 800876a:	d02f      	beq.n	80087cc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	4413      	add	r3, r2
 8008774:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	429a      	cmp	r2, r3
 800877c:	d90e      	bls.n	800879c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800878a:	4b1a      	ldr	r3, [pc, #104]	@ (80087f4 <prvSwitchTimerLists+0xc4>)
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	3304      	adds	r3, #4
 8008792:	4619      	mov	r1, r3
 8008794:	4610      	mov	r0, r2
 8008796:	f7fd fe5c 	bl	8006452 <vListInsert>
 800879a:	e017      	b.n	80087cc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800879c:	2300      	movs	r3, #0
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	2300      	movs	r3, #0
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	2100      	movs	r1, #0
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f7ff fd58 	bl	800825c <xTimerGenericCommand>
 80087ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10b      	bne.n	80087cc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	603b      	str	r3, [r7, #0]
}
 80087c6:	bf00      	nop
 80087c8:	bf00      	nop
 80087ca:	e7fd      	b.n	80087c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087cc:	4b09      	ldr	r3, [pc, #36]	@ (80087f4 <prvSwitchTimerLists+0xc4>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1b0      	bne.n	8008738 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80087d6:	4b07      	ldr	r3, [pc, #28]	@ (80087f4 <prvSwitchTimerLists+0xc4>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80087dc:	4b06      	ldr	r3, [pc, #24]	@ (80087f8 <prvSwitchTimerLists+0xc8>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a04      	ldr	r2, [pc, #16]	@ (80087f4 <prvSwitchTimerLists+0xc4>)
 80087e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80087e4:	4a04      	ldr	r2, [pc, #16]	@ (80087f8 <prvSwitchTimerLists+0xc8>)
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	6013      	str	r3, [r2, #0]
}
 80087ea:	bf00      	nop
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	24004b18 	.word	0x24004b18
 80087f8:	24004b1c 	.word	0x24004b1c

080087fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008802:	f7fd ffb9 	bl	8006778 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008806:	4b15      	ldr	r3, [pc, #84]	@ (800885c <prvCheckForValidListAndQueue+0x60>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d120      	bne.n	8008850 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800880e:	4814      	ldr	r0, [pc, #80]	@ (8008860 <prvCheckForValidListAndQueue+0x64>)
 8008810:	f7fd fdce 	bl	80063b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008814:	4813      	ldr	r0, [pc, #76]	@ (8008864 <prvCheckForValidListAndQueue+0x68>)
 8008816:	f7fd fdcb 	bl	80063b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800881a:	4b13      	ldr	r3, [pc, #76]	@ (8008868 <prvCheckForValidListAndQueue+0x6c>)
 800881c:	4a10      	ldr	r2, [pc, #64]	@ (8008860 <prvCheckForValidListAndQueue+0x64>)
 800881e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008820:	4b12      	ldr	r3, [pc, #72]	@ (800886c <prvCheckForValidListAndQueue+0x70>)
 8008822:	4a10      	ldr	r2, [pc, #64]	@ (8008864 <prvCheckForValidListAndQueue+0x68>)
 8008824:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008826:	2300      	movs	r3, #0
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	4b11      	ldr	r3, [pc, #68]	@ (8008870 <prvCheckForValidListAndQueue+0x74>)
 800882c:	4a11      	ldr	r2, [pc, #68]	@ (8008874 <prvCheckForValidListAndQueue+0x78>)
 800882e:	2110      	movs	r1, #16
 8008830:	200a      	movs	r0, #10
 8008832:	f7fe f92d 	bl	8006a90 <xQueueGenericCreateStatic>
 8008836:	4603      	mov	r3, r0
 8008838:	4a08      	ldr	r2, [pc, #32]	@ (800885c <prvCheckForValidListAndQueue+0x60>)
 800883a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800883c:	4b07      	ldr	r3, [pc, #28]	@ (800885c <prvCheckForValidListAndQueue+0x60>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d005      	beq.n	8008850 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008844:	4b05      	ldr	r3, [pc, #20]	@ (800885c <prvCheckForValidListAndQueue+0x60>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	490b      	ldr	r1, [pc, #44]	@ (8008878 <prvCheckForValidListAndQueue+0x7c>)
 800884a:	4618      	mov	r0, r3
 800884c:	f7fe fd52 	bl	80072f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008850:	f7fd ffc4 	bl	80067dc <vPortExitCritical>
}
 8008854:	bf00      	nop
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	24004b20 	.word	0x24004b20
 8008860:	24004af0 	.word	0x24004af0
 8008864:	24004b04 	.word	0x24004b04
 8008868:	24004b18 	.word	0x24004b18
 800886c:	24004b1c 	.word	0x24004b1c
 8008870:	24004bcc 	.word	0x24004bcc
 8008874:	24004b2c 	.word	0x24004b2c
 8008878:	0800cde0 	.word	0x0800cde0

0800887c <__cvt>:
 800887c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800887e:	ed2d 8b02 	vpush	{d8}
 8008882:	eeb0 8b40 	vmov.f64	d8, d0
 8008886:	b085      	sub	sp, #20
 8008888:	4617      	mov	r7, r2
 800888a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800888c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800888e:	ee18 2a90 	vmov	r2, s17
 8008892:	f025 0520 	bic.w	r5, r5, #32
 8008896:	2a00      	cmp	r2, #0
 8008898:	bfb6      	itet	lt
 800889a:	222d      	movlt	r2, #45	@ 0x2d
 800889c:	2200      	movge	r2, #0
 800889e:	eeb1 8b40 	vneglt.f64	d8, d0
 80088a2:	2d46      	cmp	r5, #70	@ 0x46
 80088a4:	460c      	mov	r4, r1
 80088a6:	701a      	strb	r2, [r3, #0]
 80088a8:	d004      	beq.n	80088b4 <__cvt+0x38>
 80088aa:	2d45      	cmp	r5, #69	@ 0x45
 80088ac:	d100      	bne.n	80088b0 <__cvt+0x34>
 80088ae:	3401      	adds	r4, #1
 80088b0:	2102      	movs	r1, #2
 80088b2:	e000      	b.n	80088b6 <__cvt+0x3a>
 80088b4:	2103      	movs	r1, #3
 80088b6:	ab03      	add	r3, sp, #12
 80088b8:	9301      	str	r3, [sp, #4]
 80088ba:	ab02      	add	r3, sp, #8
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	4622      	mov	r2, r4
 80088c0:	4633      	mov	r3, r6
 80088c2:	eeb0 0b48 	vmov.f64	d0, d8
 80088c6:	f001 f86b 	bl	80099a0 <_dtoa_r>
 80088ca:	2d47      	cmp	r5, #71	@ 0x47
 80088cc:	d114      	bne.n	80088f8 <__cvt+0x7c>
 80088ce:	07fb      	lsls	r3, r7, #31
 80088d0:	d50a      	bpl.n	80088e8 <__cvt+0x6c>
 80088d2:	1902      	adds	r2, r0, r4
 80088d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80088d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088dc:	bf08      	it	eq
 80088de:	9203      	streq	r2, [sp, #12]
 80088e0:	2130      	movs	r1, #48	@ 0x30
 80088e2:	9b03      	ldr	r3, [sp, #12]
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d319      	bcc.n	800891c <__cvt+0xa0>
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088ec:	1a1b      	subs	r3, r3, r0
 80088ee:	6013      	str	r3, [r2, #0]
 80088f0:	b005      	add	sp, #20
 80088f2:	ecbd 8b02 	vpop	{d8}
 80088f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088f8:	2d46      	cmp	r5, #70	@ 0x46
 80088fa:	eb00 0204 	add.w	r2, r0, r4
 80088fe:	d1e9      	bne.n	80088d4 <__cvt+0x58>
 8008900:	7803      	ldrb	r3, [r0, #0]
 8008902:	2b30      	cmp	r3, #48	@ 0x30
 8008904:	d107      	bne.n	8008916 <__cvt+0x9a>
 8008906:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800890a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800890e:	bf1c      	itt	ne
 8008910:	f1c4 0401 	rsbne	r4, r4, #1
 8008914:	6034      	strne	r4, [r6, #0]
 8008916:	6833      	ldr	r3, [r6, #0]
 8008918:	441a      	add	r2, r3
 800891a:	e7db      	b.n	80088d4 <__cvt+0x58>
 800891c:	1c5c      	adds	r4, r3, #1
 800891e:	9403      	str	r4, [sp, #12]
 8008920:	7019      	strb	r1, [r3, #0]
 8008922:	e7de      	b.n	80088e2 <__cvt+0x66>

08008924 <__exponent>:
 8008924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008926:	2900      	cmp	r1, #0
 8008928:	bfba      	itte	lt
 800892a:	4249      	neglt	r1, r1
 800892c:	232d      	movlt	r3, #45	@ 0x2d
 800892e:	232b      	movge	r3, #43	@ 0x2b
 8008930:	2909      	cmp	r1, #9
 8008932:	7002      	strb	r2, [r0, #0]
 8008934:	7043      	strb	r3, [r0, #1]
 8008936:	dd29      	ble.n	800898c <__exponent+0x68>
 8008938:	f10d 0307 	add.w	r3, sp, #7
 800893c:	461d      	mov	r5, r3
 800893e:	270a      	movs	r7, #10
 8008940:	461a      	mov	r2, r3
 8008942:	fbb1 f6f7 	udiv	r6, r1, r7
 8008946:	fb07 1416 	mls	r4, r7, r6, r1
 800894a:	3430      	adds	r4, #48	@ 0x30
 800894c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008950:	460c      	mov	r4, r1
 8008952:	2c63      	cmp	r4, #99	@ 0x63
 8008954:	f103 33ff 	add.w	r3, r3, #4294967295
 8008958:	4631      	mov	r1, r6
 800895a:	dcf1      	bgt.n	8008940 <__exponent+0x1c>
 800895c:	3130      	adds	r1, #48	@ 0x30
 800895e:	1e94      	subs	r4, r2, #2
 8008960:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008964:	1c41      	adds	r1, r0, #1
 8008966:	4623      	mov	r3, r4
 8008968:	42ab      	cmp	r3, r5
 800896a:	d30a      	bcc.n	8008982 <__exponent+0x5e>
 800896c:	f10d 0309 	add.w	r3, sp, #9
 8008970:	1a9b      	subs	r3, r3, r2
 8008972:	42ac      	cmp	r4, r5
 8008974:	bf88      	it	hi
 8008976:	2300      	movhi	r3, #0
 8008978:	3302      	adds	r3, #2
 800897a:	4403      	add	r3, r0
 800897c:	1a18      	subs	r0, r3, r0
 800897e:	b003      	add	sp, #12
 8008980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008982:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008986:	f801 6f01 	strb.w	r6, [r1, #1]!
 800898a:	e7ed      	b.n	8008968 <__exponent+0x44>
 800898c:	2330      	movs	r3, #48	@ 0x30
 800898e:	3130      	adds	r1, #48	@ 0x30
 8008990:	7083      	strb	r3, [r0, #2]
 8008992:	70c1      	strb	r1, [r0, #3]
 8008994:	1d03      	adds	r3, r0, #4
 8008996:	e7f1      	b.n	800897c <__exponent+0x58>

08008998 <_printf_float>:
 8008998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899c:	b08d      	sub	sp, #52	@ 0x34
 800899e:	460c      	mov	r4, r1
 80089a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80089a4:	4616      	mov	r6, r2
 80089a6:	461f      	mov	r7, r3
 80089a8:	4605      	mov	r5, r0
 80089aa:	f000 fee3 	bl	8009774 <_localeconv_r>
 80089ae:	f8d0 b000 	ldr.w	fp, [r0]
 80089b2:	4658      	mov	r0, fp
 80089b4:	f7f7 fce4 	bl	8000380 <strlen>
 80089b8:	2300      	movs	r3, #0
 80089ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80089bc:	f8d8 3000 	ldr.w	r3, [r8]
 80089c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80089c4:	6822      	ldr	r2, [r4, #0]
 80089c6:	9005      	str	r0, [sp, #20]
 80089c8:	3307      	adds	r3, #7
 80089ca:	f023 0307 	bic.w	r3, r3, #7
 80089ce:	f103 0108 	add.w	r1, r3, #8
 80089d2:	f8c8 1000 	str.w	r1, [r8]
 80089d6:	ed93 0b00 	vldr	d0, [r3]
 80089da:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008c38 <_printf_float+0x2a0>
 80089de:	eeb0 7bc0 	vabs.f64	d7, d0
 80089e2:	eeb4 7b46 	vcmp.f64	d7, d6
 80089e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ea:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80089ee:	dd24      	ble.n	8008a3a <_printf_float+0xa2>
 80089f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80089f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f8:	d502      	bpl.n	8008a00 <_printf_float+0x68>
 80089fa:	232d      	movs	r3, #45	@ 0x2d
 80089fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a00:	498f      	ldr	r1, [pc, #572]	@ (8008c40 <_printf_float+0x2a8>)
 8008a02:	4b90      	ldr	r3, [pc, #576]	@ (8008c44 <_printf_float+0x2ac>)
 8008a04:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008a08:	bf8c      	ite	hi
 8008a0a:	4688      	movhi	r8, r1
 8008a0c:	4698      	movls	r8, r3
 8008a0e:	f022 0204 	bic.w	r2, r2, #4
 8008a12:	2303      	movs	r3, #3
 8008a14:	6123      	str	r3, [r4, #16]
 8008a16:	6022      	str	r2, [r4, #0]
 8008a18:	f04f 0a00 	mov.w	sl, #0
 8008a1c:	9700      	str	r7, [sp, #0]
 8008a1e:	4633      	mov	r3, r6
 8008a20:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008a22:	4621      	mov	r1, r4
 8008a24:	4628      	mov	r0, r5
 8008a26:	f000 f9d1 	bl	8008dcc <_printf_common>
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	f040 8089 	bne.w	8008b42 <_printf_float+0x1aa>
 8008a30:	f04f 30ff 	mov.w	r0, #4294967295
 8008a34:	b00d      	add	sp, #52	@ 0x34
 8008a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a3a:	eeb4 0b40 	vcmp.f64	d0, d0
 8008a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a42:	d709      	bvc.n	8008a58 <_printf_float+0xc0>
 8008a44:	ee10 3a90 	vmov	r3, s1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	bfbc      	itt	lt
 8008a4c:	232d      	movlt	r3, #45	@ 0x2d
 8008a4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008a52:	497d      	ldr	r1, [pc, #500]	@ (8008c48 <_printf_float+0x2b0>)
 8008a54:	4b7d      	ldr	r3, [pc, #500]	@ (8008c4c <_printf_float+0x2b4>)
 8008a56:	e7d5      	b.n	8008a04 <_printf_float+0x6c>
 8008a58:	6863      	ldr	r3, [r4, #4]
 8008a5a:	1c59      	adds	r1, r3, #1
 8008a5c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008a60:	d139      	bne.n	8008ad6 <_printf_float+0x13e>
 8008a62:	2306      	movs	r3, #6
 8008a64:	6063      	str	r3, [r4, #4]
 8008a66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	6022      	str	r2, [r4, #0]
 8008a6e:	9303      	str	r3, [sp, #12]
 8008a70:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a72:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008a76:	ab09      	add	r3, sp, #36	@ 0x24
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	6861      	ldr	r1, [r4, #4]
 8008a7c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008a80:	4628      	mov	r0, r5
 8008a82:	f7ff fefb 	bl	800887c <__cvt>
 8008a86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008a8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a8c:	4680      	mov	r8, r0
 8008a8e:	d129      	bne.n	8008ae4 <_printf_float+0x14c>
 8008a90:	1cc8      	adds	r0, r1, #3
 8008a92:	db02      	blt.n	8008a9a <_printf_float+0x102>
 8008a94:	6863      	ldr	r3, [r4, #4]
 8008a96:	4299      	cmp	r1, r3
 8008a98:	dd41      	ble.n	8008b1e <_printf_float+0x186>
 8008a9a:	f1a9 0902 	sub.w	r9, r9, #2
 8008a9e:	fa5f f989 	uxtb.w	r9, r9
 8008aa2:	3901      	subs	r1, #1
 8008aa4:	464a      	mov	r2, r9
 8008aa6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008aaa:	9109      	str	r1, [sp, #36]	@ 0x24
 8008aac:	f7ff ff3a 	bl	8008924 <__exponent>
 8008ab0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ab2:	1813      	adds	r3, r2, r0
 8008ab4:	2a01      	cmp	r2, #1
 8008ab6:	4682      	mov	sl, r0
 8008ab8:	6123      	str	r3, [r4, #16]
 8008aba:	dc02      	bgt.n	8008ac2 <_printf_float+0x12a>
 8008abc:	6822      	ldr	r2, [r4, #0]
 8008abe:	07d2      	lsls	r2, r2, #31
 8008ac0:	d501      	bpl.n	8008ac6 <_printf_float+0x12e>
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	6123      	str	r3, [r4, #16]
 8008ac6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d0a6      	beq.n	8008a1c <_printf_float+0x84>
 8008ace:	232d      	movs	r3, #45	@ 0x2d
 8008ad0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ad4:	e7a2      	b.n	8008a1c <_printf_float+0x84>
 8008ad6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008ada:	d1c4      	bne.n	8008a66 <_printf_float+0xce>
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1c2      	bne.n	8008a66 <_printf_float+0xce>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e7bf      	b.n	8008a64 <_printf_float+0xcc>
 8008ae4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008ae8:	d9db      	bls.n	8008aa2 <_printf_float+0x10a>
 8008aea:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008aee:	d118      	bne.n	8008b22 <_printf_float+0x18a>
 8008af0:	2900      	cmp	r1, #0
 8008af2:	6863      	ldr	r3, [r4, #4]
 8008af4:	dd0b      	ble.n	8008b0e <_printf_float+0x176>
 8008af6:	6121      	str	r1, [r4, #16]
 8008af8:	b913      	cbnz	r3, 8008b00 <_printf_float+0x168>
 8008afa:	6822      	ldr	r2, [r4, #0]
 8008afc:	07d0      	lsls	r0, r2, #31
 8008afe:	d502      	bpl.n	8008b06 <_printf_float+0x16e>
 8008b00:	3301      	adds	r3, #1
 8008b02:	440b      	add	r3, r1
 8008b04:	6123      	str	r3, [r4, #16]
 8008b06:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008b08:	f04f 0a00 	mov.w	sl, #0
 8008b0c:	e7db      	b.n	8008ac6 <_printf_float+0x12e>
 8008b0e:	b913      	cbnz	r3, 8008b16 <_printf_float+0x17e>
 8008b10:	6822      	ldr	r2, [r4, #0]
 8008b12:	07d2      	lsls	r2, r2, #31
 8008b14:	d501      	bpl.n	8008b1a <_printf_float+0x182>
 8008b16:	3302      	adds	r3, #2
 8008b18:	e7f4      	b.n	8008b04 <_printf_float+0x16c>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e7f2      	b.n	8008b04 <_printf_float+0x16c>
 8008b1e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008b22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b24:	4299      	cmp	r1, r3
 8008b26:	db05      	blt.n	8008b34 <_printf_float+0x19c>
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	6121      	str	r1, [r4, #16]
 8008b2c:	07d8      	lsls	r0, r3, #31
 8008b2e:	d5ea      	bpl.n	8008b06 <_printf_float+0x16e>
 8008b30:	1c4b      	adds	r3, r1, #1
 8008b32:	e7e7      	b.n	8008b04 <_printf_float+0x16c>
 8008b34:	2900      	cmp	r1, #0
 8008b36:	bfd4      	ite	le
 8008b38:	f1c1 0202 	rsble	r2, r1, #2
 8008b3c:	2201      	movgt	r2, #1
 8008b3e:	4413      	add	r3, r2
 8008b40:	e7e0      	b.n	8008b04 <_printf_float+0x16c>
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	055a      	lsls	r2, r3, #21
 8008b46:	d407      	bmi.n	8008b58 <_printf_float+0x1c0>
 8008b48:	6923      	ldr	r3, [r4, #16]
 8008b4a:	4642      	mov	r2, r8
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4628      	mov	r0, r5
 8008b50:	47b8      	blx	r7
 8008b52:	3001      	adds	r0, #1
 8008b54:	d12a      	bne.n	8008bac <_printf_float+0x214>
 8008b56:	e76b      	b.n	8008a30 <_printf_float+0x98>
 8008b58:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008b5c:	f240 80e0 	bls.w	8008d20 <_printf_float+0x388>
 8008b60:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008b64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b6c:	d133      	bne.n	8008bd6 <_printf_float+0x23e>
 8008b6e:	4a38      	ldr	r2, [pc, #224]	@ (8008c50 <_printf_float+0x2b8>)
 8008b70:	2301      	movs	r3, #1
 8008b72:	4631      	mov	r1, r6
 8008b74:	4628      	mov	r0, r5
 8008b76:	47b8      	blx	r7
 8008b78:	3001      	adds	r0, #1
 8008b7a:	f43f af59 	beq.w	8008a30 <_printf_float+0x98>
 8008b7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008b82:	4543      	cmp	r3, r8
 8008b84:	db02      	blt.n	8008b8c <_printf_float+0x1f4>
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	07d8      	lsls	r0, r3, #31
 8008b8a:	d50f      	bpl.n	8008bac <_printf_float+0x214>
 8008b8c:	9b05      	ldr	r3, [sp, #20]
 8008b8e:	465a      	mov	r2, fp
 8008b90:	4631      	mov	r1, r6
 8008b92:	4628      	mov	r0, r5
 8008b94:	47b8      	blx	r7
 8008b96:	3001      	adds	r0, #1
 8008b98:	f43f af4a 	beq.w	8008a30 <_printf_float+0x98>
 8008b9c:	f04f 0900 	mov.w	r9, #0
 8008ba0:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ba4:	f104 0a1a 	add.w	sl, r4, #26
 8008ba8:	45c8      	cmp	r8, r9
 8008baa:	dc09      	bgt.n	8008bc0 <_printf_float+0x228>
 8008bac:	6823      	ldr	r3, [r4, #0]
 8008bae:	079b      	lsls	r3, r3, #30
 8008bb0:	f100 8107 	bmi.w	8008dc2 <_printf_float+0x42a>
 8008bb4:	68e0      	ldr	r0, [r4, #12]
 8008bb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bb8:	4298      	cmp	r0, r3
 8008bba:	bfb8      	it	lt
 8008bbc:	4618      	movlt	r0, r3
 8008bbe:	e739      	b.n	8008a34 <_printf_float+0x9c>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	4652      	mov	r2, sl
 8008bc4:	4631      	mov	r1, r6
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	47b8      	blx	r7
 8008bca:	3001      	adds	r0, #1
 8008bcc:	f43f af30 	beq.w	8008a30 <_printf_float+0x98>
 8008bd0:	f109 0901 	add.w	r9, r9, #1
 8008bd4:	e7e8      	b.n	8008ba8 <_printf_float+0x210>
 8008bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	dc3b      	bgt.n	8008c54 <_printf_float+0x2bc>
 8008bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8008c50 <_printf_float+0x2b8>)
 8008bde:	2301      	movs	r3, #1
 8008be0:	4631      	mov	r1, r6
 8008be2:	4628      	mov	r0, r5
 8008be4:	47b8      	blx	r7
 8008be6:	3001      	adds	r0, #1
 8008be8:	f43f af22 	beq.w	8008a30 <_printf_float+0x98>
 8008bec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008bf0:	ea59 0303 	orrs.w	r3, r9, r3
 8008bf4:	d102      	bne.n	8008bfc <_printf_float+0x264>
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	07d9      	lsls	r1, r3, #31
 8008bfa:	d5d7      	bpl.n	8008bac <_printf_float+0x214>
 8008bfc:	9b05      	ldr	r3, [sp, #20]
 8008bfe:	465a      	mov	r2, fp
 8008c00:	4631      	mov	r1, r6
 8008c02:	4628      	mov	r0, r5
 8008c04:	47b8      	blx	r7
 8008c06:	3001      	adds	r0, #1
 8008c08:	f43f af12 	beq.w	8008a30 <_printf_float+0x98>
 8008c0c:	f04f 0a00 	mov.w	sl, #0
 8008c10:	f104 0b1a 	add.w	fp, r4, #26
 8008c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c16:	425b      	negs	r3, r3
 8008c18:	4553      	cmp	r3, sl
 8008c1a:	dc01      	bgt.n	8008c20 <_printf_float+0x288>
 8008c1c:	464b      	mov	r3, r9
 8008c1e:	e794      	b.n	8008b4a <_printf_float+0x1b2>
 8008c20:	2301      	movs	r3, #1
 8008c22:	465a      	mov	r2, fp
 8008c24:	4631      	mov	r1, r6
 8008c26:	4628      	mov	r0, r5
 8008c28:	47b8      	blx	r7
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	f43f af00 	beq.w	8008a30 <_printf_float+0x98>
 8008c30:	f10a 0a01 	add.w	sl, sl, #1
 8008c34:	e7ee      	b.n	8008c14 <_printf_float+0x27c>
 8008c36:	bf00      	nop
 8008c38:	ffffffff 	.word	0xffffffff
 8008c3c:	7fefffff 	.word	0x7fefffff
 8008c40:	0800ce44 	.word	0x0800ce44
 8008c44:	0800ce40 	.word	0x0800ce40
 8008c48:	0800ce4c 	.word	0x0800ce4c
 8008c4c:	0800ce48 	.word	0x0800ce48
 8008c50:	0800ce50 	.word	0x0800ce50
 8008c54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c5a:	4553      	cmp	r3, sl
 8008c5c:	bfa8      	it	ge
 8008c5e:	4653      	movge	r3, sl
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	4699      	mov	r9, r3
 8008c64:	dc37      	bgt.n	8008cd6 <_printf_float+0x33e>
 8008c66:	2300      	movs	r3, #0
 8008c68:	9307      	str	r3, [sp, #28]
 8008c6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c6e:	f104 021a 	add.w	r2, r4, #26
 8008c72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c74:	9907      	ldr	r1, [sp, #28]
 8008c76:	9306      	str	r3, [sp, #24]
 8008c78:	eba3 0309 	sub.w	r3, r3, r9
 8008c7c:	428b      	cmp	r3, r1
 8008c7e:	dc31      	bgt.n	8008ce4 <_printf_float+0x34c>
 8008c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c82:	459a      	cmp	sl, r3
 8008c84:	dc3b      	bgt.n	8008cfe <_printf_float+0x366>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	07da      	lsls	r2, r3, #31
 8008c8a:	d438      	bmi.n	8008cfe <_printf_float+0x366>
 8008c8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c8e:	ebaa 0903 	sub.w	r9, sl, r3
 8008c92:	9b06      	ldr	r3, [sp, #24]
 8008c94:	ebaa 0303 	sub.w	r3, sl, r3
 8008c98:	4599      	cmp	r9, r3
 8008c9a:	bfa8      	it	ge
 8008c9c:	4699      	movge	r9, r3
 8008c9e:	f1b9 0f00 	cmp.w	r9, #0
 8008ca2:	dc34      	bgt.n	8008d0e <_printf_float+0x376>
 8008ca4:	f04f 0800 	mov.w	r8, #0
 8008ca8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cac:	f104 0b1a 	add.w	fp, r4, #26
 8008cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb2:	ebaa 0303 	sub.w	r3, sl, r3
 8008cb6:	eba3 0309 	sub.w	r3, r3, r9
 8008cba:	4543      	cmp	r3, r8
 8008cbc:	f77f af76 	ble.w	8008bac <_printf_float+0x214>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	465a      	mov	r2, fp
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	47b8      	blx	r7
 8008cca:	3001      	adds	r0, #1
 8008ccc:	f43f aeb0 	beq.w	8008a30 <_printf_float+0x98>
 8008cd0:	f108 0801 	add.w	r8, r8, #1
 8008cd4:	e7ec      	b.n	8008cb0 <_printf_float+0x318>
 8008cd6:	4642      	mov	r2, r8
 8008cd8:	4631      	mov	r1, r6
 8008cda:	4628      	mov	r0, r5
 8008cdc:	47b8      	blx	r7
 8008cde:	3001      	adds	r0, #1
 8008ce0:	d1c1      	bne.n	8008c66 <_printf_float+0x2ce>
 8008ce2:	e6a5      	b.n	8008a30 <_printf_float+0x98>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	4628      	mov	r0, r5
 8008cea:	9206      	str	r2, [sp, #24]
 8008cec:	47b8      	blx	r7
 8008cee:	3001      	adds	r0, #1
 8008cf0:	f43f ae9e 	beq.w	8008a30 <_printf_float+0x98>
 8008cf4:	9b07      	ldr	r3, [sp, #28]
 8008cf6:	9a06      	ldr	r2, [sp, #24]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	9307      	str	r3, [sp, #28]
 8008cfc:	e7b9      	b.n	8008c72 <_printf_float+0x2da>
 8008cfe:	9b05      	ldr	r3, [sp, #20]
 8008d00:	465a      	mov	r2, fp
 8008d02:	4631      	mov	r1, r6
 8008d04:	4628      	mov	r0, r5
 8008d06:	47b8      	blx	r7
 8008d08:	3001      	adds	r0, #1
 8008d0a:	d1bf      	bne.n	8008c8c <_printf_float+0x2f4>
 8008d0c:	e690      	b.n	8008a30 <_printf_float+0x98>
 8008d0e:	9a06      	ldr	r2, [sp, #24]
 8008d10:	464b      	mov	r3, r9
 8008d12:	4442      	add	r2, r8
 8008d14:	4631      	mov	r1, r6
 8008d16:	4628      	mov	r0, r5
 8008d18:	47b8      	blx	r7
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d1c2      	bne.n	8008ca4 <_printf_float+0x30c>
 8008d1e:	e687      	b.n	8008a30 <_printf_float+0x98>
 8008d20:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008d24:	f1b9 0f01 	cmp.w	r9, #1
 8008d28:	dc01      	bgt.n	8008d2e <_printf_float+0x396>
 8008d2a:	07db      	lsls	r3, r3, #31
 8008d2c:	d536      	bpl.n	8008d9c <_printf_float+0x404>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	4642      	mov	r2, r8
 8008d32:	4631      	mov	r1, r6
 8008d34:	4628      	mov	r0, r5
 8008d36:	47b8      	blx	r7
 8008d38:	3001      	adds	r0, #1
 8008d3a:	f43f ae79 	beq.w	8008a30 <_printf_float+0x98>
 8008d3e:	9b05      	ldr	r3, [sp, #20]
 8008d40:	465a      	mov	r2, fp
 8008d42:	4631      	mov	r1, r6
 8008d44:	4628      	mov	r0, r5
 8008d46:	47b8      	blx	r7
 8008d48:	3001      	adds	r0, #1
 8008d4a:	f43f ae71 	beq.w	8008a30 <_printf_float+0x98>
 8008d4e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008d52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d5a:	f109 39ff 	add.w	r9, r9, #4294967295
 8008d5e:	d018      	beq.n	8008d92 <_printf_float+0x3fa>
 8008d60:	464b      	mov	r3, r9
 8008d62:	f108 0201 	add.w	r2, r8, #1
 8008d66:	4631      	mov	r1, r6
 8008d68:	4628      	mov	r0, r5
 8008d6a:	47b8      	blx	r7
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d10c      	bne.n	8008d8a <_printf_float+0x3f2>
 8008d70:	e65e      	b.n	8008a30 <_printf_float+0x98>
 8008d72:	2301      	movs	r3, #1
 8008d74:	465a      	mov	r2, fp
 8008d76:	4631      	mov	r1, r6
 8008d78:	4628      	mov	r0, r5
 8008d7a:	47b8      	blx	r7
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	f43f ae57 	beq.w	8008a30 <_printf_float+0x98>
 8008d82:	f108 0801 	add.w	r8, r8, #1
 8008d86:	45c8      	cmp	r8, r9
 8008d88:	dbf3      	blt.n	8008d72 <_printf_float+0x3da>
 8008d8a:	4653      	mov	r3, sl
 8008d8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008d90:	e6dc      	b.n	8008b4c <_printf_float+0x1b4>
 8008d92:	f04f 0800 	mov.w	r8, #0
 8008d96:	f104 0b1a 	add.w	fp, r4, #26
 8008d9a:	e7f4      	b.n	8008d86 <_printf_float+0x3ee>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	4642      	mov	r2, r8
 8008da0:	e7e1      	b.n	8008d66 <_printf_float+0x3ce>
 8008da2:	2301      	movs	r3, #1
 8008da4:	464a      	mov	r2, r9
 8008da6:	4631      	mov	r1, r6
 8008da8:	4628      	mov	r0, r5
 8008daa:	47b8      	blx	r7
 8008dac:	3001      	adds	r0, #1
 8008dae:	f43f ae3f 	beq.w	8008a30 <_printf_float+0x98>
 8008db2:	f108 0801 	add.w	r8, r8, #1
 8008db6:	68e3      	ldr	r3, [r4, #12]
 8008db8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008dba:	1a5b      	subs	r3, r3, r1
 8008dbc:	4543      	cmp	r3, r8
 8008dbe:	dcf0      	bgt.n	8008da2 <_printf_float+0x40a>
 8008dc0:	e6f8      	b.n	8008bb4 <_printf_float+0x21c>
 8008dc2:	f04f 0800 	mov.w	r8, #0
 8008dc6:	f104 0919 	add.w	r9, r4, #25
 8008dca:	e7f4      	b.n	8008db6 <_printf_float+0x41e>

08008dcc <_printf_common>:
 8008dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd0:	4616      	mov	r6, r2
 8008dd2:	4698      	mov	r8, r3
 8008dd4:	688a      	ldr	r2, [r1, #8]
 8008dd6:	690b      	ldr	r3, [r1, #16]
 8008dd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	bfb8      	it	lt
 8008de0:	4613      	movlt	r3, r2
 8008de2:	6033      	str	r3, [r6, #0]
 8008de4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008de8:	4607      	mov	r7, r0
 8008dea:	460c      	mov	r4, r1
 8008dec:	b10a      	cbz	r2, 8008df2 <_printf_common+0x26>
 8008dee:	3301      	adds	r3, #1
 8008df0:	6033      	str	r3, [r6, #0]
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	0699      	lsls	r1, r3, #26
 8008df6:	bf42      	ittt	mi
 8008df8:	6833      	ldrmi	r3, [r6, #0]
 8008dfa:	3302      	addmi	r3, #2
 8008dfc:	6033      	strmi	r3, [r6, #0]
 8008dfe:	6825      	ldr	r5, [r4, #0]
 8008e00:	f015 0506 	ands.w	r5, r5, #6
 8008e04:	d106      	bne.n	8008e14 <_printf_common+0x48>
 8008e06:	f104 0a19 	add.w	sl, r4, #25
 8008e0a:	68e3      	ldr	r3, [r4, #12]
 8008e0c:	6832      	ldr	r2, [r6, #0]
 8008e0e:	1a9b      	subs	r3, r3, r2
 8008e10:	42ab      	cmp	r3, r5
 8008e12:	dc26      	bgt.n	8008e62 <_printf_common+0x96>
 8008e14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e18:	6822      	ldr	r2, [r4, #0]
 8008e1a:	3b00      	subs	r3, #0
 8008e1c:	bf18      	it	ne
 8008e1e:	2301      	movne	r3, #1
 8008e20:	0692      	lsls	r2, r2, #26
 8008e22:	d42b      	bmi.n	8008e7c <_printf_common+0xb0>
 8008e24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e28:	4641      	mov	r1, r8
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	47c8      	blx	r9
 8008e2e:	3001      	adds	r0, #1
 8008e30:	d01e      	beq.n	8008e70 <_printf_common+0xa4>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	6922      	ldr	r2, [r4, #16]
 8008e36:	f003 0306 	and.w	r3, r3, #6
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	bf02      	ittt	eq
 8008e3e:	68e5      	ldreq	r5, [r4, #12]
 8008e40:	6833      	ldreq	r3, [r6, #0]
 8008e42:	1aed      	subeq	r5, r5, r3
 8008e44:	68a3      	ldr	r3, [r4, #8]
 8008e46:	bf0c      	ite	eq
 8008e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e4c:	2500      	movne	r5, #0
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	bfc4      	itt	gt
 8008e52:	1a9b      	subgt	r3, r3, r2
 8008e54:	18ed      	addgt	r5, r5, r3
 8008e56:	2600      	movs	r6, #0
 8008e58:	341a      	adds	r4, #26
 8008e5a:	42b5      	cmp	r5, r6
 8008e5c:	d11a      	bne.n	8008e94 <_printf_common+0xc8>
 8008e5e:	2000      	movs	r0, #0
 8008e60:	e008      	b.n	8008e74 <_printf_common+0xa8>
 8008e62:	2301      	movs	r3, #1
 8008e64:	4652      	mov	r2, sl
 8008e66:	4641      	mov	r1, r8
 8008e68:	4638      	mov	r0, r7
 8008e6a:	47c8      	blx	r9
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	d103      	bne.n	8008e78 <_printf_common+0xac>
 8008e70:	f04f 30ff 	mov.w	r0, #4294967295
 8008e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e78:	3501      	adds	r5, #1
 8008e7a:	e7c6      	b.n	8008e0a <_printf_common+0x3e>
 8008e7c:	18e1      	adds	r1, r4, r3
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	2030      	movs	r0, #48	@ 0x30
 8008e82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e86:	4422      	add	r2, r4
 8008e88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e90:	3302      	adds	r3, #2
 8008e92:	e7c7      	b.n	8008e24 <_printf_common+0x58>
 8008e94:	2301      	movs	r3, #1
 8008e96:	4622      	mov	r2, r4
 8008e98:	4641      	mov	r1, r8
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	47c8      	blx	r9
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	d0e6      	beq.n	8008e70 <_printf_common+0xa4>
 8008ea2:	3601      	adds	r6, #1
 8008ea4:	e7d9      	b.n	8008e5a <_printf_common+0x8e>
	...

08008ea8 <_printf_i>:
 8008ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008eac:	7e0f      	ldrb	r7, [r1, #24]
 8008eae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008eb0:	2f78      	cmp	r7, #120	@ 0x78
 8008eb2:	4691      	mov	r9, r2
 8008eb4:	4680      	mov	r8, r0
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	469a      	mov	sl, r3
 8008eba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ebe:	d807      	bhi.n	8008ed0 <_printf_i+0x28>
 8008ec0:	2f62      	cmp	r7, #98	@ 0x62
 8008ec2:	d80a      	bhi.n	8008eda <_printf_i+0x32>
 8008ec4:	2f00      	cmp	r7, #0
 8008ec6:	f000 80d1 	beq.w	800906c <_printf_i+0x1c4>
 8008eca:	2f58      	cmp	r7, #88	@ 0x58
 8008ecc:	f000 80b8 	beq.w	8009040 <_printf_i+0x198>
 8008ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ed4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ed8:	e03a      	b.n	8008f50 <_printf_i+0xa8>
 8008eda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ede:	2b15      	cmp	r3, #21
 8008ee0:	d8f6      	bhi.n	8008ed0 <_printf_i+0x28>
 8008ee2:	a101      	add	r1, pc, #4	@ (adr r1, 8008ee8 <_printf_i+0x40>)
 8008ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ee8:	08008f41 	.word	0x08008f41
 8008eec:	08008f55 	.word	0x08008f55
 8008ef0:	08008ed1 	.word	0x08008ed1
 8008ef4:	08008ed1 	.word	0x08008ed1
 8008ef8:	08008ed1 	.word	0x08008ed1
 8008efc:	08008ed1 	.word	0x08008ed1
 8008f00:	08008f55 	.word	0x08008f55
 8008f04:	08008ed1 	.word	0x08008ed1
 8008f08:	08008ed1 	.word	0x08008ed1
 8008f0c:	08008ed1 	.word	0x08008ed1
 8008f10:	08008ed1 	.word	0x08008ed1
 8008f14:	08009053 	.word	0x08009053
 8008f18:	08008f7f 	.word	0x08008f7f
 8008f1c:	0800900d 	.word	0x0800900d
 8008f20:	08008ed1 	.word	0x08008ed1
 8008f24:	08008ed1 	.word	0x08008ed1
 8008f28:	08009075 	.word	0x08009075
 8008f2c:	08008ed1 	.word	0x08008ed1
 8008f30:	08008f7f 	.word	0x08008f7f
 8008f34:	08008ed1 	.word	0x08008ed1
 8008f38:	08008ed1 	.word	0x08008ed1
 8008f3c:	08009015 	.word	0x08009015
 8008f40:	6833      	ldr	r3, [r6, #0]
 8008f42:	1d1a      	adds	r2, r3, #4
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	6032      	str	r2, [r6, #0]
 8008f48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f50:	2301      	movs	r3, #1
 8008f52:	e09c      	b.n	800908e <_printf_i+0x1e6>
 8008f54:	6833      	ldr	r3, [r6, #0]
 8008f56:	6820      	ldr	r0, [r4, #0]
 8008f58:	1d19      	adds	r1, r3, #4
 8008f5a:	6031      	str	r1, [r6, #0]
 8008f5c:	0606      	lsls	r6, r0, #24
 8008f5e:	d501      	bpl.n	8008f64 <_printf_i+0xbc>
 8008f60:	681d      	ldr	r5, [r3, #0]
 8008f62:	e003      	b.n	8008f6c <_printf_i+0xc4>
 8008f64:	0645      	lsls	r5, r0, #25
 8008f66:	d5fb      	bpl.n	8008f60 <_printf_i+0xb8>
 8008f68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f6c:	2d00      	cmp	r5, #0
 8008f6e:	da03      	bge.n	8008f78 <_printf_i+0xd0>
 8008f70:	232d      	movs	r3, #45	@ 0x2d
 8008f72:	426d      	negs	r5, r5
 8008f74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f78:	4858      	ldr	r0, [pc, #352]	@ (80090dc <_printf_i+0x234>)
 8008f7a:	230a      	movs	r3, #10
 8008f7c:	e011      	b.n	8008fa2 <_printf_i+0xfa>
 8008f7e:	6821      	ldr	r1, [r4, #0]
 8008f80:	6833      	ldr	r3, [r6, #0]
 8008f82:	0608      	lsls	r0, r1, #24
 8008f84:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f88:	d402      	bmi.n	8008f90 <_printf_i+0xe8>
 8008f8a:	0649      	lsls	r1, r1, #25
 8008f8c:	bf48      	it	mi
 8008f8e:	b2ad      	uxthmi	r5, r5
 8008f90:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f92:	4852      	ldr	r0, [pc, #328]	@ (80090dc <_printf_i+0x234>)
 8008f94:	6033      	str	r3, [r6, #0]
 8008f96:	bf14      	ite	ne
 8008f98:	230a      	movne	r3, #10
 8008f9a:	2308      	moveq	r3, #8
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008fa2:	6866      	ldr	r6, [r4, #4]
 8008fa4:	60a6      	str	r6, [r4, #8]
 8008fa6:	2e00      	cmp	r6, #0
 8008fa8:	db05      	blt.n	8008fb6 <_printf_i+0x10e>
 8008faa:	6821      	ldr	r1, [r4, #0]
 8008fac:	432e      	orrs	r6, r5
 8008fae:	f021 0104 	bic.w	r1, r1, #4
 8008fb2:	6021      	str	r1, [r4, #0]
 8008fb4:	d04b      	beq.n	800904e <_printf_i+0x1a6>
 8008fb6:	4616      	mov	r6, r2
 8008fb8:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fbc:	fb03 5711 	mls	r7, r3, r1, r5
 8008fc0:	5dc7      	ldrb	r7, [r0, r7]
 8008fc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fc6:	462f      	mov	r7, r5
 8008fc8:	42bb      	cmp	r3, r7
 8008fca:	460d      	mov	r5, r1
 8008fcc:	d9f4      	bls.n	8008fb8 <_printf_i+0x110>
 8008fce:	2b08      	cmp	r3, #8
 8008fd0:	d10b      	bne.n	8008fea <_printf_i+0x142>
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	07df      	lsls	r7, r3, #31
 8008fd6:	d508      	bpl.n	8008fea <_printf_i+0x142>
 8008fd8:	6923      	ldr	r3, [r4, #16]
 8008fda:	6861      	ldr	r1, [r4, #4]
 8008fdc:	4299      	cmp	r1, r3
 8008fde:	bfde      	ittt	le
 8008fe0:	2330      	movle	r3, #48	@ 0x30
 8008fe2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fe6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008fea:	1b92      	subs	r2, r2, r6
 8008fec:	6122      	str	r2, [r4, #16]
 8008fee:	f8cd a000 	str.w	sl, [sp]
 8008ff2:	464b      	mov	r3, r9
 8008ff4:	aa03      	add	r2, sp, #12
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	4640      	mov	r0, r8
 8008ffa:	f7ff fee7 	bl	8008dcc <_printf_common>
 8008ffe:	3001      	adds	r0, #1
 8009000:	d14a      	bne.n	8009098 <_printf_i+0x1f0>
 8009002:	f04f 30ff 	mov.w	r0, #4294967295
 8009006:	b004      	add	sp, #16
 8009008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800900c:	6823      	ldr	r3, [r4, #0]
 800900e:	f043 0320 	orr.w	r3, r3, #32
 8009012:	6023      	str	r3, [r4, #0]
 8009014:	4832      	ldr	r0, [pc, #200]	@ (80090e0 <_printf_i+0x238>)
 8009016:	2778      	movs	r7, #120	@ 0x78
 8009018:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	6831      	ldr	r1, [r6, #0]
 8009020:	061f      	lsls	r7, r3, #24
 8009022:	f851 5b04 	ldr.w	r5, [r1], #4
 8009026:	d402      	bmi.n	800902e <_printf_i+0x186>
 8009028:	065f      	lsls	r7, r3, #25
 800902a:	bf48      	it	mi
 800902c:	b2ad      	uxthmi	r5, r5
 800902e:	6031      	str	r1, [r6, #0]
 8009030:	07d9      	lsls	r1, r3, #31
 8009032:	bf44      	itt	mi
 8009034:	f043 0320 	orrmi.w	r3, r3, #32
 8009038:	6023      	strmi	r3, [r4, #0]
 800903a:	b11d      	cbz	r5, 8009044 <_printf_i+0x19c>
 800903c:	2310      	movs	r3, #16
 800903e:	e7ad      	b.n	8008f9c <_printf_i+0xf4>
 8009040:	4826      	ldr	r0, [pc, #152]	@ (80090dc <_printf_i+0x234>)
 8009042:	e7e9      	b.n	8009018 <_printf_i+0x170>
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	f023 0320 	bic.w	r3, r3, #32
 800904a:	6023      	str	r3, [r4, #0]
 800904c:	e7f6      	b.n	800903c <_printf_i+0x194>
 800904e:	4616      	mov	r6, r2
 8009050:	e7bd      	b.n	8008fce <_printf_i+0x126>
 8009052:	6833      	ldr	r3, [r6, #0]
 8009054:	6825      	ldr	r5, [r4, #0]
 8009056:	6961      	ldr	r1, [r4, #20]
 8009058:	1d18      	adds	r0, r3, #4
 800905a:	6030      	str	r0, [r6, #0]
 800905c:	062e      	lsls	r6, r5, #24
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	d501      	bpl.n	8009066 <_printf_i+0x1be>
 8009062:	6019      	str	r1, [r3, #0]
 8009064:	e002      	b.n	800906c <_printf_i+0x1c4>
 8009066:	0668      	lsls	r0, r5, #25
 8009068:	d5fb      	bpl.n	8009062 <_printf_i+0x1ba>
 800906a:	8019      	strh	r1, [r3, #0]
 800906c:	2300      	movs	r3, #0
 800906e:	6123      	str	r3, [r4, #16]
 8009070:	4616      	mov	r6, r2
 8009072:	e7bc      	b.n	8008fee <_printf_i+0x146>
 8009074:	6833      	ldr	r3, [r6, #0]
 8009076:	1d1a      	adds	r2, r3, #4
 8009078:	6032      	str	r2, [r6, #0]
 800907a:	681e      	ldr	r6, [r3, #0]
 800907c:	6862      	ldr	r2, [r4, #4]
 800907e:	2100      	movs	r1, #0
 8009080:	4630      	mov	r0, r6
 8009082:	f7f7 f92d 	bl	80002e0 <memchr>
 8009086:	b108      	cbz	r0, 800908c <_printf_i+0x1e4>
 8009088:	1b80      	subs	r0, r0, r6
 800908a:	6060      	str	r0, [r4, #4]
 800908c:	6863      	ldr	r3, [r4, #4]
 800908e:	6123      	str	r3, [r4, #16]
 8009090:	2300      	movs	r3, #0
 8009092:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009096:	e7aa      	b.n	8008fee <_printf_i+0x146>
 8009098:	6923      	ldr	r3, [r4, #16]
 800909a:	4632      	mov	r2, r6
 800909c:	4649      	mov	r1, r9
 800909e:	4640      	mov	r0, r8
 80090a0:	47d0      	blx	sl
 80090a2:	3001      	adds	r0, #1
 80090a4:	d0ad      	beq.n	8009002 <_printf_i+0x15a>
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	079b      	lsls	r3, r3, #30
 80090aa:	d413      	bmi.n	80090d4 <_printf_i+0x22c>
 80090ac:	68e0      	ldr	r0, [r4, #12]
 80090ae:	9b03      	ldr	r3, [sp, #12]
 80090b0:	4298      	cmp	r0, r3
 80090b2:	bfb8      	it	lt
 80090b4:	4618      	movlt	r0, r3
 80090b6:	e7a6      	b.n	8009006 <_printf_i+0x15e>
 80090b8:	2301      	movs	r3, #1
 80090ba:	4632      	mov	r2, r6
 80090bc:	4649      	mov	r1, r9
 80090be:	4640      	mov	r0, r8
 80090c0:	47d0      	blx	sl
 80090c2:	3001      	adds	r0, #1
 80090c4:	d09d      	beq.n	8009002 <_printf_i+0x15a>
 80090c6:	3501      	adds	r5, #1
 80090c8:	68e3      	ldr	r3, [r4, #12]
 80090ca:	9903      	ldr	r1, [sp, #12]
 80090cc:	1a5b      	subs	r3, r3, r1
 80090ce:	42ab      	cmp	r3, r5
 80090d0:	dcf2      	bgt.n	80090b8 <_printf_i+0x210>
 80090d2:	e7eb      	b.n	80090ac <_printf_i+0x204>
 80090d4:	2500      	movs	r5, #0
 80090d6:	f104 0619 	add.w	r6, r4, #25
 80090da:	e7f5      	b.n	80090c8 <_printf_i+0x220>
 80090dc:	0800ce52 	.word	0x0800ce52
 80090e0:	0800ce63 	.word	0x0800ce63

080090e4 <_scanf_float>:
 80090e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e8:	b087      	sub	sp, #28
 80090ea:	4691      	mov	r9, r2
 80090ec:	9303      	str	r3, [sp, #12]
 80090ee:	688b      	ldr	r3, [r1, #8]
 80090f0:	1e5a      	subs	r2, r3, #1
 80090f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80090f6:	bf81      	itttt	hi
 80090f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80090fc:	eb03 0b05 	addhi.w	fp, r3, r5
 8009100:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009104:	608b      	strhi	r3, [r1, #8]
 8009106:	680b      	ldr	r3, [r1, #0]
 8009108:	460a      	mov	r2, r1
 800910a:	f04f 0500 	mov.w	r5, #0
 800910e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009112:	f842 3b1c 	str.w	r3, [r2], #28
 8009116:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800911a:	4680      	mov	r8, r0
 800911c:	460c      	mov	r4, r1
 800911e:	bf98      	it	ls
 8009120:	f04f 0b00 	movls.w	fp, #0
 8009124:	9201      	str	r2, [sp, #4]
 8009126:	4616      	mov	r6, r2
 8009128:	46aa      	mov	sl, r5
 800912a:	462f      	mov	r7, r5
 800912c:	9502      	str	r5, [sp, #8]
 800912e:	68a2      	ldr	r2, [r4, #8]
 8009130:	b15a      	cbz	r2, 800914a <_scanf_float+0x66>
 8009132:	f8d9 3000 	ldr.w	r3, [r9]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	2b4e      	cmp	r3, #78	@ 0x4e
 800913a:	d863      	bhi.n	8009204 <_scanf_float+0x120>
 800913c:	2b40      	cmp	r3, #64	@ 0x40
 800913e:	d83b      	bhi.n	80091b8 <_scanf_float+0xd4>
 8009140:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009144:	b2c8      	uxtb	r0, r1
 8009146:	280e      	cmp	r0, #14
 8009148:	d939      	bls.n	80091be <_scanf_float+0xda>
 800914a:	b11f      	cbz	r7, 8009154 <_scanf_float+0x70>
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009152:	6023      	str	r3, [r4, #0]
 8009154:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009158:	f1ba 0f01 	cmp.w	sl, #1
 800915c:	f200 8114 	bhi.w	8009388 <_scanf_float+0x2a4>
 8009160:	9b01      	ldr	r3, [sp, #4]
 8009162:	429e      	cmp	r6, r3
 8009164:	f200 8105 	bhi.w	8009372 <_scanf_float+0x28e>
 8009168:	2001      	movs	r0, #1
 800916a:	b007      	add	sp, #28
 800916c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009170:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009174:	2a0d      	cmp	r2, #13
 8009176:	d8e8      	bhi.n	800914a <_scanf_float+0x66>
 8009178:	a101      	add	r1, pc, #4	@ (adr r1, 8009180 <_scanf_float+0x9c>)
 800917a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800917e:	bf00      	nop
 8009180:	080092c9 	.word	0x080092c9
 8009184:	0800914b 	.word	0x0800914b
 8009188:	0800914b 	.word	0x0800914b
 800918c:	0800914b 	.word	0x0800914b
 8009190:	08009325 	.word	0x08009325
 8009194:	080092ff 	.word	0x080092ff
 8009198:	0800914b 	.word	0x0800914b
 800919c:	0800914b 	.word	0x0800914b
 80091a0:	080092d7 	.word	0x080092d7
 80091a4:	0800914b 	.word	0x0800914b
 80091a8:	0800914b 	.word	0x0800914b
 80091ac:	0800914b 	.word	0x0800914b
 80091b0:	0800914b 	.word	0x0800914b
 80091b4:	08009293 	.word	0x08009293
 80091b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80091bc:	e7da      	b.n	8009174 <_scanf_float+0x90>
 80091be:	290e      	cmp	r1, #14
 80091c0:	d8c3      	bhi.n	800914a <_scanf_float+0x66>
 80091c2:	a001      	add	r0, pc, #4	@ (adr r0, 80091c8 <_scanf_float+0xe4>)
 80091c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80091c8:	08009283 	.word	0x08009283
 80091cc:	0800914b 	.word	0x0800914b
 80091d0:	08009283 	.word	0x08009283
 80091d4:	08009313 	.word	0x08009313
 80091d8:	0800914b 	.word	0x0800914b
 80091dc:	08009225 	.word	0x08009225
 80091e0:	08009269 	.word	0x08009269
 80091e4:	08009269 	.word	0x08009269
 80091e8:	08009269 	.word	0x08009269
 80091ec:	08009269 	.word	0x08009269
 80091f0:	08009269 	.word	0x08009269
 80091f4:	08009269 	.word	0x08009269
 80091f8:	08009269 	.word	0x08009269
 80091fc:	08009269 	.word	0x08009269
 8009200:	08009269 	.word	0x08009269
 8009204:	2b6e      	cmp	r3, #110	@ 0x6e
 8009206:	d809      	bhi.n	800921c <_scanf_float+0x138>
 8009208:	2b60      	cmp	r3, #96	@ 0x60
 800920a:	d8b1      	bhi.n	8009170 <_scanf_float+0x8c>
 800920c:	2b54      	cmp	r3, #84	@ 0x54
 800920e:	d07b      	beq.n	8009308 <_scanf_float+0x224>
 8009210:	2b59      	cmp	r3, #89	@ 0x59
 8009212:	d19a      	bne.n	800914a <_scanf_float+0x66>
 8009214:	2d07      	cmp	r5, #7
 8009216:	d198      	bne.n	800914a <_scanf_float+0x66>
 8009218:	2508      	movs	r5, #8
 800921a:	e02f      	b.n	800927c <_scanf_float+0x198>
 800921c:	2b74      	cmp	r3, #116	@ 0x74
 800921e:	d073      	beq.n	8009308 <_scanf_float+0x224>
 8009220:	2b79      	cmp	r3, #121	@ 0x79
 8009222:	e7f6      	b.n	8009212 <_scanf_float+0x12e>
 8009224:	6821      	ldr	r1, [r4, #0]
 8009226:	05c8      	lsls	r0, r1, #23
 8009228:	d51e      	bpl.n	8009268 <_scanf_float+0x184>
 800922a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800922e:	6021      	str	r1, [r4, #0]
 8009230:	3701      	adds	r7, #1
 8009232:	f1bb 0f00 	cmp.w	fp, #0
 8009236:	d003      	beq.n	8009240 <_scanf_float+0x15c>
 8009238:	3201      	adds	r2, #1
 800923a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800923e:	60a2      	str	r2, [r4, #8]
 8009240:	68a3      	ldr	r3, [r4, #8]
 8009242:	3b01      	subs	r3, #1
 8009244:	60a3      	str	r3, [r4, #8]
 8009246:	6923      	ldr	r3, [r4, #16]
 8009248:	3301      	adds	r3, #1
 800924a:	6123      	str	r3, [r4, #16]
 800924c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009250:	3b01      	subs	r3, #1
 8009252:	2b00      	cmp	r3, #0
 8009254:	f8c9 3004 	str.w	r3, [r9, #4]
 8009258:	f340 8082 	ble.w	8009360 <_scanf_float+0x27c>
 800925c:	f8d9 3000 	ldr.w	r3, [r9]
 8009260:	3301      	adds	r3, #1
 8009262:	f8c9 3000 	str.w	r3, [r9]
 8009266:	e762      	b.n	800912e <_scanf_float+0x4a>
 8009268:	eb1a 0105 	adds.w	r1, sl, r5
 800926c:	f47f af6d 	bne.w	800914a <_scanf_float+0x66>
 8009270:	6822      	ldr	r2, [r4, #0]
 8009272:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009276:	6022      	str	r2, [r4, #0]
 8009278:	460d      	mov	r5, r1
 800927a:	468a      	mov	sl, r1
 800927c:	f806 3b01 	strb.w	r3, [r6], #1
 8009280:	e7de      	b.n	8009240 <_scanf_float+0x15c>
 8009282:	6822      	ldr	r2, [r4, #0]
 8009284:	0610      	lsls	r0, r2, #24
 8009286:	f57f af60 	bpl.w	800914a <_scanf_float+0x66>
 800928a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800928e:	6022      	str	r2, [r4, #0]
 8009290:	e7f4      	b.n	800927c <_scanf_float+0x198>
 8009292:	f1ba 0f00 	cmp.w	sl, #0
 8009296:	d10c      	bne.n	80092b2 <_scanf_float+0x1ce>
 8009298:	b977      	cbnz	r7, 80092b8 <_scanf_float+0x1d4>
 800929a:	6822      	ldr	r2, [r4, #0]
 800929c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80092a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80092a4:	d108      	bne.n	80092b8 <_scanf_float+0x1d4>
 80092a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80092aa:	6022      	str	r2, [r4, #0]
 80092ac:	f04f 0a01 	mov.w	sl, #1
 80092b0:	e7e4      	b.n	800927c <_scanf_float+0x198>
 80092b2:	f1ba 0f02 	cmp.w	sl, #2
 80092b6:	d050      	beq.n	800935a <_scanf_float+0x276>
 80092b8:	2d01      	cmp	r5, #1
 80092ba:	d002      	beq.n	80092c2 <_scanf_float+0x1de>
 80092bc:	2d04      	cmp	r5, #4
 80092be:	f47f af44 	bne.w	800914a <_scanf_float+0x66>
 80092c2:	3501      	adds	r5, #1
 80092c4:	b2ed      	uxtb	r5, r5
 80092c6:	e7d9      	b.n	800927c <_scanf_float+0x198>
 80092c8:	f1ba 0f01 	cmp.w	sl, #1
 80092cc:	f47f af3d 	bne.w	800914a <_scanf_float+0x66>
 80092d0:	f04f 0a02 	mov.w	sl, #2
 80092d4:	e7d2      	b.n	800927c <_scanf_float+0x198>
 80092d6:	b975      	cbnz	r5, 80092f6 <_scanf_float+0x212>
 80092d8:	2f00      	cmp	r7, #0
 80092da:	f47f af37 	bne.w	800914c <_scanf_float+0x68>
 80092de:	6822      	ldr	r2, [r4, #0]
 80092e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80092e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80092e8:	f040 80fc 	bne.w	80094e4 <_scanf_float+0x400>
 80092ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80092f0:	6022      	str	r2, [r4, #0]
 80092f2:	2501      	movs	r5, #1
 80092f4:	e7c2      	b.n	800927c <_scanf_float+0x198>
 80092f6:	2d03      	cmp	r5, #3
 80092f8:	d0e3      	beq.n	80092c2 <_scanf_float+0x1de>
 80092fa:	2d05      	cmp	r5, #5
 80092fc:	e7df      	b.n	80092be <_scanf_float+0x1da>
 80092fe:	2d02      	cmp	r5, #2
 8009300:	f47f af23 	bne.w	800914a <_scanf_float+0x66>
 8009304:	2503      	movs	r5, #3
 8009306:	e7b9      	b.n	800927c <_scanf_float+0x198>
 8009308:	2d06      	cmp	r5, #6
 800930a:	f47f af1e 	bne.w	800914a <_scanf_float+0x66>
 800930e:	2507      	movs	r5, #7
 8009310:	e7b4      	b.n	800927c <_scanf_float+0x198>
 8009312:	6822      	ldr	r2, [r4, #0]
 8009314:	0591      	lsls	r1, r2, #22
 8009316:	f57f af18 	bpl.w	800914a <_scanf_float+0x66>
 800931a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800931e:	6022      	str	r2, [r4, #0]
 8009320:	9702      	str	r7, [sp, #8]
 8009322:	e7ab      	b.n	800927c <_scanf_float+0x198>
 8009324:	6822      	ldr	r2, [r4, #0]
 8009326:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800932a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800932e:	d005      	beq.n	800933c <_scanf_float+0x258>
 8009330:	0550      	lsls	r0, r2, #21
 8009332:	f57f af0a 	bpl.w	800914a <_scanf_float+0x66>
 8009336:	2f00      	cmp	r7, #0
 8009338:	f000 80d4 	beq.w	80094e4 <_scanf_float+0x400>
 800933c:	0591      	lsls	r1, r2, #22
 800933e:	bf58      	it	pl
 8009340:	9902      	ldrpl	r1, [sp, #8]
 8009342:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009346:	bf58      	it	pl
 8009348:	1a79      	subpl	r1, r7, r1
 800934a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800934e:	bf58      	it	pl
 8009350:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009354:	6022      	str	r2, [r4, #0]
 8009356:	2700      	movs	r7, #0
 8009358:	e790      	b.n	800927c <_scanf_float+0x198>
 800935a:	f04f 0a03 	mov.w	sl, #3
 800935e:	e78d      	b.n	800927c <_scanf_float+0x198>
 8009360:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009364:	4649      	mov	r1, r9
 8009366:	4640      	mov	r0, r8
 8009368:	4798      	blx	r3
 800936a:	2800      	cmp	r0, #0
 800936c:	f43f aedf 	beq.w	800912e <_scanf_float+0x4a>
 8009370:	e6eb      	b.n	800914a <_scanf_float+0x66>
 8009372:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009376:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800937a:	464a      	mov	r2, r9
 800937c:	4640      	mov	r0, r8
 800937e:	4798      	blx	r3
 8009380:	6923      	ldr	r3, [r4, #16]
 8009382:	3b01      	subs	r3, #1
 8009384:	6123      	str	r3, [r4, #16]
 8009386:	e6eb      	b.n	8009160 <_scanf_float+0x7c>
 8009388:	1e6b      	subs	r3, r5, #1
 800938a:	2b06      	cmp	r3, #6
 800938c:	d824      	bhi.n	80093d8 <_scanf_float+0x2f4>
 800938e:	2d02      	cmp	r5, #2
 8009390:	d836      	bhi.n	8009400 <_scanf_float+0x31c>
 8009392:	9b01      	ldr	r3, [sp, #4]
 8009394:	429e      	cmp	r6, r3
 8009396:	f67f aee7 	bls.w	8009168 <_scanf_float+0x84>
 800939a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800939e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093a2:	464a      	mov	r2, r9
 80093a4:	4640      	mov	r0, r8
 80093a6:	4798      	blx	r3
 80093a8:	6923      	ldr	r3, [r4, #16]
 80093aa:	3b01      	subs	r3, #1
 80093ac:	6123      	str	r3, [r4, #16]
 80093ae:	e7f0      	b.n	8009392 <_scanf_float+0x2ae>
 80093b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80093b8:	464a      	mov	r2, r9
 80093ba:	4640      	mov	r0, r8
 80093bc:	4798      	blx	r3
 80093be:	6923      	ldr	r3, [r4, #16]
 80093c0:	3b01      	subs	r3, #1
 80093c2:	6123      	str	r3, [r4, #16]
 80093c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093c8:	fa5f fa8a 	uxtb.w	sl, sl
 80093cc:	f1ba 0f02 	cmp.w	sl, #2
 80093d0:	d1ee      	bne.n	80093b0 <_scanf_float+0x2cc>
 80093d2:	3d03      	subs	r5, #3
 80093d4:	b2ed      	uxtb	r5, r5
 80093d6:	1b76      	subs	r6, r6, r5
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	05da      	lsls	r2, r3, #23
 80093dc:	d530      	bpl.n	8009440 <_scanf_float+0x35c>
 80093de:	055b      	lsls	r3, r3, #21
 80093e0:	d511      	bpl.n	8009406 <_scanf_float+0x322>
 80093e2:	9b01      	ldr	r3, [sp, #4]
 80093e4:	429e      	cmp	r6, r3
 80093e6:	f67f aebf 	bls.w	8009168 <_scanf_float+0x84>
 80093ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093f2:	464a      	mov	r2, r9
 80093f4:	4640      	mov	r0, r8
 80093f6:	4798      	blx	r3
 80093f8:	6923      	ldr	r3, [r4, #16]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	6123      	str	r3, [r4, #16]
 80093fe:	e7f0      	b.n	80093e2 <_scanf_float+0x2fe>
 8009400:	46aa      	mov	sl, r5
 8009402:	46b3      	mov	fp, r6
 8009404:	e7de      	b.n	80093c4 <_scanf_float+0x2e0>
 8009406:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800940a:	6923      	ldr	r3, [r4, #16]
 800940c:	2965      	cmp	r1, #101	@ 0x65
 800940e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009412:	f106 35ff 	add.w	r5, r6, #4294967295
 8009416:	6123      	str	r3, [r4, #16]
 8009418:	d00c      	beq.n	8009434 <_scanf_float+0x350>
 800941a:	2945      	cmp	r1, #69	@ 0x45
 800941c:	d00a      	beq.n	8009434 <_scanf_float+0x350>
 800941e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009422:	464a      	mov	r2, r9
 8009424:	4640      	mov	r0, r8
 8009426:	4798      	blx	r3
 8009428:	6923      	ldr	r3, [r4, #16]
 800942a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800942e:	3b01      	subs	r3, #1
 8009430:	1eb5      	subs	r5, r6, #2
 8009432:	6123      	str	r3, [r4, #16]
 8009434:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009438:	464a      	mov	r2, r9
 800943a:	4640      	mov	r0, r8
 800943c:	4798      	blx	r3
 800943e:	462e      	mov	r6, r5
 8009440:	6822      	ldr	r2, [r4, #0]
 8009442:	f012 0210 	ands.w	r2, r2, #16
 8009446:	d001      	beq.n	800944c <_scanf_float+0x368>
 8009448:	2000      	movs	r0, #0
 800944a:	e68e      	b.n	800916a <_scanf_float+0x86>
 800944c:	7032      	strb	r2, [r6, #0]
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009458:	d123      	bne.n	80094a2 <_scanf_float+0x3be>
 800945a:	9b02      	ldr	r3, [sp, #8]
 800945c:	429f      	cmp	r7, r3
 800945e:	d00a      	beq.n	8009476 <_scanf_float+0x392>
 8009460:	1bda      	subs	r2, r3, r7
 8009462:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009466:	429e      	cmp	r6, r3
 8009468:	bf28      	it	cs
 800946a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800946e:	491e      	ldr	r1, [pc, #120]	@ (80094e8 <_scanf_float+0x404>)
 8009470:	4630      	mov	r0, r6
 8009472:	f000 f911 	bl	8009698 <siprintf>
 8009476:	9901      	ldr	r1, [sp, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	4640      	mov	r0, r8
 800947c:	f002 fb4a 	bl	800bb14 <_strtod_r>
 8009480:	9b03      	ldr	r3, [sp, #12]
 8009482:	6821      	ldr	r1, [r4, #0]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f011 0f02 	tst.w	r1, #2
 800948a:	f103 0204 	add.w	r2, r3, #4
 800948e:	d015      	beq.n	80094bc <_scanf_float+0x3d8>
 8009490:	9903      	ldr	r1, [sp, #12]
 8009492:	600a      	str	r2, [r1, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	ed83 0b00 	vstr	d0, [r3]
 800949a:	68e3      	ldr	r3, [r4, #12]
 800949c:	3301      	adds	r3, #1
 800949e:	60e3      	str	r3, [r4, #12]
 80094a0:	e7d2      	b.n	8009448 <_scanf_float+0x364>
 80094a2:	9b04      	ldr	r3, [sp, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d0e6      	beq.n	8009476 <_scanf_float+0x392>
 80094a8:	9905      	ldr	r1, [sp, #20]
 80094aa:	230a      	movs	r3, #10
 80094ac:	3101      	adds	r1, #1
 80094ae:	4640      	mov	r0, r8
 80094b0:	f002 fbb0 	bl	800bc14 <_strtol_r>
 80094b4:	9b04      	ldr	r3, [sp, #16]
 80094b6:	9e05      	ldr	r6, [sp, #20]
 80094b8:	1ac2      	subs	r2, r0, r3
 80094ba:	e7d2      	b.n	8009462 <_scanf_float+0x37e>
 80094bc:	f011 0f04 	tst.w	r1, #4
 80094c0:	9903      	ldr	r1, [sp, #12]
 80094c2:	600a      	str	r2, [r1, #0]
 80094c4:	d1e6      	bne.n	8009494 <_scanf_float+0x3b0>
 80094c6:	eeb4 0b40 	vcmp.f64	d0, d0
 80094ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ce:	681d      	ldr	r5, [r3, #0]
 80094d0:	d705      	bvc.n	80094de <_scanf_float+0x3fa>
 80094d2:	4806      	ldr	r0, [pc, #24]	@ (80094ec <_scanf_float+0x408>)
 80094d4:	f000 f9d4 	bl	8009880 <nanf>
 80094d8:	ed85 0a00 	vstr	s0, [r5]
 80094dc:	e7dd      	b.n	800949a <_scanf_float+0x3b6>
 80094de:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80094e2:	e7f9      	b.n	80094d8 <_scanf_float+0x3f4>
 80094e4:	2700      	movs	r7, #0
 80094e6:	e635      	b.n	8009154 <_scanf_float+0x70>
 80094e8:	0800ce74 	.word	0x0800ce74
 80094ec:	0800cfb5 	.word	0x0800cfb5

080094f0 <std>:
 80094f0:	2300      	movs	r3, #0
 80094f2:	b510      	push	{r4, lr}
 80094f4:	4604      	mov	r4, r0
 80094f6:	e9c0 3300 	strd	r3, r3, [r0]
 80094fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094fe:	6083      	str	r3, [r0, #8]
 8009500:	8181      	strh	r1, [r0, #12]
 8009502:	6643      	str	r3, [r0, #100]	@ 0x64
 8009504:	81c2      	strh	r2, [r0, #14]
 8009506:	6183      	str	r3, [r0, #24]
 8009508:	4619      	mov	r1, r3
 800950a:	2208      	movs	r2, #8
 800950c:	305c      	adds	r0, #92	@ 0x5c
 800950e:	f000 f928 	bl	8009762 <memset>
 8009512:	4b0d      	ldr	r3, [pc, #52]	@ (8009548 <std+0x58>)
 8009514:	6263      	str	r3, [r4, #36]	@ 0x24
 8009516:	4b0d      	ldr	r3, [pc, #52]	@ (800954c <std+0x5c>)
 8009518:	62a3      	str	r3, [r4, #40]	@ 0x28
 800951a:	4b0d      	ldr	r3, [pc, #52]	@ (8009550 <std+0x60>)
 800951c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800951e:	4b0d      	ldr	r3, [pc, #52]	@ (8009554 <std+0x64>)
 8009520:	6323      	str	r3, [r4, #48]	@ 0x30
 8009522:	4b0d      	ldr	r3, [pc, #52]	@ (8009558 <std+0x68>)
 8009524:	6224      	str	r4, [r4, #32]
 8009526:	429c      	cmp	r4, r3
 8009528:	d006      	beq.n	8009538 <std+0x48>
 800952a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800952e:	4294      	cmp	r4, r2
 8009530:	d002      	beq.n	8009538 <std+0x48>
 8009532:	33d0      	adds	r3, #208	@ 0xd0
 8009534:	429c      	cmp	r4, r3
 8009536:	d105      	bne.n	8009544 <std+0x54>
 8009538:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800953c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009540:	f000 b98c 	b.w	800985c <__retarget_lock_init_recursive>
 8009544:	bd10      	pop	{r4, pc}
 8009546:	bf00      	nop
 8009548:	080096dd 	.word	0x080096dd
 800954c:	080096ff 	.word	0x080096ff
 8009550:	08009737 	.word	0x08009737
 8009554:	0800975b 	.word	0x0800975b
 8009558:	24004c1c 	.word	0x24004c1c

0800955c <stdio_exit_handler>:
 800955c:	4a02      	ldr	r2, [pc, #8]	@ (8009568 <stdio_exit_handler+0xc>)
 800955e:	4903      	ldr	r1, [pc, #12]	@ (800956c <stdio_exit_handler+0x10>)
 8009560:	4803      	ldr	r0, [pc, #12]	@ (8009570 <stdio_exit_handler+0x14>)
 8009562:	f000 b869 	b.w	8009638 <_fwalk_sglue>
 8009566:	bf00      	nop
 8009568:	24000030 	.word	0x24000030
 800956c:	0800c255 	.word	0x0800c255
 8009570:	24000040 	.word	0x24000040

08009574 <cleanup_stdio>:
 8009574:	6841      	ldr	r1, [r0, #4]
 8009576:	4b0c      	ldr	r3, [pc, #48]	@ (80095a8 <cleanup_stdio+0x34>)
 8009578:	4299      	cmp	r1, r3
 800957a:	b510      	push	{r4, lr}
 800957c:	4604      	mov	r4, r0
 800957e:	d001      	beq.n	8009584 <cleanup_stdio+0x10>
 8009580:	f002 fe68 	bl	800c254 <_fflush_r>
 8009584:	68a1      	ldr	r1, [r4, #8]
 8009586:	4b09      	ldr	r3, [pc, #36]	@ (80095ac <cleanup_stdio+0x38>)
 8009588:	4299      	cmp	r1, r3
 800958a:	d002      	beq.n	8009592 <cleanup_stdio+0x1e>
 800958c:	4620      	mov	r0, r4
 800958e:	f002 fe61 	bl	800c254 <_fflush_r>
 8009592:	68e1      	ldr	r1, [r4, #12]
 8009594:	4b06      	ldr	r3, [pc, #24]	@ (80095b0 <cleanup_stdio+0x3c>)
 8009596:	4299      	cmp	r1, r3
 8009598:	d004      	beq.n	80095a4 <cleanup_stdio+0x30>
 800959a:	4620      	mov	r0, r4
 800959c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095a0:	f002 be58 	b.w	800c254 <_fflush_r>
 80095a4:	bd10      	pop	{r4, pc}
 80095a6:	bf00      	nop
 80095a8:	24004c1c 	.word	0x24004c1c
 80095ac:	24004c84 	.word	0x24004c84
 80095b0:	24004cec 	.word	0x24004cec

080095b4 <global_stdio_init.part.0>:
 80095b4:	b510      	push	{r4, lr}
 80095b6:	4b0b      	ldr	r3, [pc, #44]	@ (80095e4 <global_stdio_init.part.0+0x30>)
 80095b8:	4c0b      	ldr	r4, [pc, #44]	@ (80095e8 <global_stdio_init.part.0+0x34>)
 80095ba:	4a0c      	ldr	r2, [pc, #48]	@ (80095ec <global_stdio_init.part.0+0x38>)
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	4620      	mov	r0, r4
 80095c0:	2200      	movs	r2, #0
 80095c2:	2104      	movs	r1, #4
 80095c4:	f7ff ff94 	bl	80094f0 <std>
 80095c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80095cc:	2201      	movs	r2, #1
 80095ce:	2109      	movs	r1, #9
 80095d0:	f7ff ff8e 	bl	80094f0 <std>
 80095d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095d8:	2202      	movs	r2, #2
 80095da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095de:	2112      	movs	r1, #18
 80095e0:	f7ff bf86 	b.w	80094f0 <std>
 80095e4:	24004d54 	.word	0x24004d54
 80095e8:	24004c1c 	.word	0x24004c1c
 80095ec:	0800955d 	.word	0x0800955d

080095f0 <__sfp_lock_acquire>:
 80095f0:	4801      	ldr	r0, [pc, #4]	@ (80095f8 <__sfp_lock_acquire+0x8>)
 80095f2:	f000 b934 	b.w	800985e <__retarget_lock_acquire_recursive>
 80095f6:	bf00      	nop
 80095f8:	24004d5d 	.word	0x24004d5d

080095fc <__sfp_lock_release>:
 80095fc:	4801      	ldr	r0, [pc, #4]	@ (8009604 <__sfp_lock_release+0x8>)
 80095fe:	f000 b92f 	b.w	8009860 <__retarget_lock_release_recursive>
 8009602:	bf00      	nop
 8009604:	24004d5d 	.word	0x24004d5d

08009608 <__sinit>:
 8009608:	b510      	push	{r4, lr}
 800960a:	4604      	mov	r4, r0
 800960c:	f7ff fff0 	bl	80095f0 <__sfp_lock_acquire>
 8009610:	6a23      	ldr	r3, [r4, #32]
 8009612:	b11b      	cbz	r3, 800961c <__sinit+0x14>
 8009614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009618:	f7ff bff0 	b.w	80095fc <__sfp_lock_release>
 800961c:	4b04      	ldr	r3, [pc, #16]	@ (8009630 <__sinit+0x28>)
 800961e:	6223      	str	r3, [r4, #32]
 8009620:	4b04      	ldr	r3, [pc, #16]	@ (8009634 <__sinit+0x2c>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1f5      	bne.n	8009614 <__sinit+0xc>
 8009628:	f7ff ffc4 	bl	80095b4 <global_stdio_init.part.0>
 800962c:	e7f2      	b.n	8009614 <__sinit+0xc>
 800962e:	bf00      	nop
 8009630:	08009575 	.word	0x08009575
 8009634:	24004d54 	.word	0x24004d54

08009638 <_fwalk_sglue>:
 8009638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800963c:	4607      	mov	r7, r0
 800963e:	4688      	mov	r8, r1
 8009640:	4614      	mov	r4, r2
 8009642:	2600      	movs	r6, #0
 8009644:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009648:	f1b9 0901 	subs.w	r9, r9, #1
 800964c:	d505      	bpl.n	800965a <_fwalk_sglue+0x22>
 800964e:	6824      	ldr	r4, [r4, #0]
 8009650:	2c00      	cmp	r4, #0
 8009652:	d1f7      	bne.n	8009644 <_fwalk_sglue+0xc>
 8009654:	4630      	mov	r0, r6
 8009656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800965a:	89ab      	ldrh	r3, [r5, #12]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d907      	bls.n	8009670 <_fwalk_sglue+0x38>
 8009660:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009664:	3301      	adds	r3, #1
 8009666:	d003      	beq.n	8009670 <_fwalk_sglue+0x38>
 8009668:	4629      	mov	r1, r5
 800966a:	4638      	mov	r0, r7
 800966c:	47c0      	blx	r8
 800966e:	4306      	orrs	r6, r0
 8009670:	3568      	adds	r5, #104	@ 0x68
 8009672:	e7e9      	b.n	8009648 <_fwalk_sglue+0x10>

08009674 <iprintf>:
 8009674:	b40f      	push	{r0, r1, r2, r3}
 8009676:	b507      	push	{r0, r1, r2, lr}
 8009678:	4906      	ldr	r1, [pc, #24]	@ (8009694 <iprintf+0x20>)
 800967a:	ab04      	add	r3, sp, #16
 800967c:	6808      	ldr	r0, [r1, #0]
 800967e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009682:	6881      	ldr	r1, [r0, #8]
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	f002 fc49 	bl	800bf1c <_vfiprintf_r>
 800968a:	b003      	add	sp, #12
 800968c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009690:	b004      	add	sp, #16
 8009692:	4770      	bx	lr
 8009694:	2400003c 	.word	0x2400003c

08009698 <siprintf>:
 8009698:	b40e      	push	{r1, r2, r3}
 800969a:	b510      	push	{r4, lr}
 800969c:	b09d      	sub	sp, #116	@ 0x74
 800969e:	ab1f      	add	r3, sp, #124	@ 0x7c
 80096a0:	9002      	str	r0, [sp, #8]
 80096a2:	9006      	str	r0, [sp, #24]
 80096a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80096a8:	480a      	ldr	r0, [pc, #40]	@ (80096d4 <siprintf+0x3c>)
 80096aa:	9107      	str	r1, [sp, #28]
 80096ac:	9104      	str	r1, [sp, #16]
 80096ae:	490a      	ldr	r1, [pc, #40]	@ (80096d8 <siprintf+0x40>)
 80096b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80096b4:	9105      	str	r1, [sp, #20]
 80096b6:	2400      	movs	r4, #0
 80096b8:	a902      	add	r1, sp, #8
 80096ba:	6800      	ldr	r0, [r0, #0]
 80096bc:	9301      	str	r3, [sp, #4]
 80096be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80096c0:	f002 fb06 	bl	800bcd0 <_svfiprintf_r>
 80096c4:	9b02      	ldr	r3, [sp, #8]
 80096c6:	701c      	strb	r4, [r3, #0]
 80096c8:	b01d      	add	sp, #116	@ 0x74
 80096ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096ce:	b003      	add	sp, #12
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	2400003c 	.word	0x2400003c
 80096d8:	ffff0208 	.word	0xffff0208

080096dc <__sread>:
 80096dc:	b510      	push	{r4, lr}
 80096de:	460c      	mov	r4, r1
 80096e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e4:	f000 f86c 	bl	80097c0 <_read_r>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	bfab      	itete	ge
 80096ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80096ee:	89a3      	ldrhlt	r3, [r4, #12]
 80096f0:	181b      	addge	r3, r3, r0
 80096f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80096f6:	bfac      	ite	ge
 80096f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80096fa:	81a3      	strhlt	r3, [r4, #12]
 80096fc:	bd10      	pop	{r4, pc}

080096fe <__swrite>:
 80096fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009702:	461f      	mov	r7, r3
 8009704:	898b      	ldrh	r3, [r1, #12]
 8009706:	05db      	lsls	r3, r3, #23
 8009708:	4605      	mov	r5, r0
 800970a:	460c      	mov	r4, r1
 800970c:	4616      	mov	r6, r2
 800970e:	d505      	bpl.n	800971c <__swrite+0x1e>
 8009710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009714:	2302      	movs	r3, #2
 8009716:	2200      	movs	r2, #0
 8009718:	f000 f840 	bl	800979c <_lseek_r>
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009722:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009726:	81a3      	strh	r3, [r4, #12]
 8009728:	4632      	mov	r2, r6
 800972a:	463b      	mov	r3, r7
 800972c:	4628      	mov	r0, r5
 800972e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009732:	f000 b857 	b.w	80097e4 <_write_r>

08009736 <__sseek>:
 8009736:	b510      	push	{r4, lr}
 8009738:	460c      	mov	r4, r1
 800973a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800973e:	f000 f82d 	bl	800979c <_lseek_r>
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	89a3      	ldrh	r3, [r4, #12]
 8009746:	bf15      	itete	ne
 8009748:	6560      	strne	r0, [r4, #84]	@ 0x54
 800974a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800974e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009752:	81a3      	strheq	r3, [r4, #12]
 8009754:	bf18      	it	ne
 8009756:	81a3      	strhne	r3, [r4, #12]
 8009758:	bd10      	pop	{r4, pc}

0800975a <__sclose>:
 800975a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800975e:	f000 b80d 	b.w	800977c <_close_r>

08009762 <memset>:
 8009762:	4402      	add	r2, r0
 8009764:	4603      	mov	r3, r0
 8009766:	4293      	cmp	r3, r2
 8009768:	d100      	bne.n	800976c <memset+0xa>
 800976a:	4770      	bx	lr
 800976c:	f803 1b01 	strb.w	r1, [r3], #1
 8009770:	e7f9      	b.n	8009766 <memset+0x4>
	...

08009774 <_localeconv_r>:
 8009774:	4800      	ldr	r0, [pc, #0]	@ (8009778 <_localeconv_r+0x4>)
 8009776:	4770      	bx	lr
 8009778:	2400017c 	.word	0x2400017c

0800977c <_close_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4d06      	ldr	r5, [pc, #24]	@ (8009798 <_close_r+0x1c>)
 8009780:	2300      	movs	r3, #0
 8009782:	4604      	mov	r4, r0
 8009784:	4608      	mov	r0, r1
 8009786:	602b      	str	r3, [r5, #0]
 8009788:	f7f7 fd27 	bl	80011da <_close>
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	d102      	bne.n	8009796 <_close_r+0x1a>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	b103      	cbz	r3, 8009796 <_close_r+0x1a>
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	bd38      	pop	{r3, r4, r5, pc}
 8009798:	24004d58 	.word	0x24004d58

0800979c <_lseek_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4d07      	ldr	r5, [pc, #28]	@ (80097bc <_lseek_r+0x20>)
 80097a0:	4604      	mov	r4, r0
 80097a2:	4608      	mov	r0, r1
 80097a4:	4611      	mov	r1, r2
 80097a6:	2200      	movs	r2, #0
 80097a8:	602a      	str	r2, [r5, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	f7f7 fd3c 	bl	8001228 <_lseek>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d102      	bne.n	80097ba <_lseek_r+0x1e>
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	b103      	cbz	r3, 80097ba <_lseek_r+0x1e>
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	24004d58 	.word	0x24004d58

080097c0 <_read_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4d07      	ldr	r5, [pc, #28]	@ (80097e0 <_read_r+0x20>)
 80097c4:	4604      	mov	r4, r0
 80097c6:	4608      	mov	r0, r1
 80097c8:	4611      	mov	r1, r2
 80097ca:	2200      	movs	r2, #0
 80097cc:	602a      	str	r2, [r5, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	f7f7 fce6 	bl	80011a0 <_read>
 80097d4:	1c43      	adds	r3, r0, #1
 80097d6:	d102      	bne.n	80097de <_read_r+0x1e>
 80097d8:	682b      	ldr	r3, [r5, #0]
 80097da:	b103      	cbz	r3, 80097de <_read_r+0x1e>
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	24004d58 	.word	0x24004d58

080097e4 <_write_r>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	4d07      	ldr	r5, [pc, #28]	@ (8009804 <_write_r+0x20>)
 80097e8:	4604      	mov	r4, r0
 80097ea:	4608      	mov	r0, r1
 80097ec:	4611      	mov	r1, r2
 80097ee:	2200      	movs	r2, #0
 80097f0:	602a      	str	r2, [r5, #0]
 80097f2:	461a      	mov	r2, r3
 80097f4:	f7f7 fbc6 	bl	8000f84 <_write>
 80097f8:	1c43      	adds	r3, r0, #1
 80097fa:	d102      	bne.n	8009802 <_write_r+0x1e>
 80097fc:	682b      	ldr	r3, [r5, #0]
 80097fe:	b103      	cbz	r3, 8009802 <_write_r+0x1e>
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	bd38      	pop	{r3, r4, r5, pc}
 8009804:	24004d58 	.word	0x24004d58

08009808 <__errno>:
 8009808:	4b01      	ldr	r3, [pc, #4]	@ (8009810 <__errno+0x8>)
 800980a:	6818      	ldr	r0, [r3, #0]
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	2400003c 	.word	0x2400003c

08009814 <__libc_init_array>:
 8009814:	b570      	push	{r4, r5, r6, lr}
 8009816:	4d0d      	ldr	r5, [pc, #52]	@ (800984c <__libc_init_array+0x38>)
 8009818:	4c0d      	ldr	r4, [pc, #52]	@ (8009850 <__libc_init_array+0x3c>)
 800981a:	1b64      	subs	r4, r4, r5
 800981c:	10a4      	asrs	r4, r4, #2
 800981e:	2600      	movs	r6, #0
 8009820:	42a6      	cmp	r6, r4
 8009822:	d109      	bne.n	8009838 <__libc_init_array+0x24>
 8009824:	4d0b      	ldr	r5, [pc, #44]	@ (8009854 <__libc_init_array+0x40>)
 8009826:	4c0c      	ldr	r4, [pc, #48]	@ (8009858 <__libc_init_array+0x44>)
 8009828:	f003 fab8 	bl	800cd9c <_init>
 800982c:	1b64      	subs	r4, r4, r5
 800982e:	10a4      	asrs	r4, r4, #2
 8009830:	2600      	movs	r6, #0
 8009832:	42a6      	cmp	r6, r4
 8009834:	d105      	bne.n	8009842 <__libc_init_array+0x2e>
 8009836:	bd70      	pop	{r4, r5, r6, pc}
 8009838:	f855 3b04 	ldr.w	r3, [r5], #4
 800983c:	4798      	blx	r3
 800983e:	3601      	adds	r6, #1
 8009840:	e7ee      	b.n	8009820 <__libc_init_array+0xc>
 8009842:	f855 3b04 	ldr.w	r3, [r5], #4
 8009846:	4798      	blx	r3
 8009848:	3601      	adds	r6, #1
 800984a:	e7f2      	b.n	8009832 <__libc_init_array+0x1e>
 800984c:	0800d274 	.word	0x0800d274
 8009850:	0800d274 	.word	0x0800d274
 8009854:	0800d274 	.word	0x0800d274
 8009858:	0800d278 	.word	0x0800d278

0800985c <__retarget_lock_init_recursive>:
 800985c:	4770      	bx	lr

0800985e <__retarget_lock_acquire_recursive>:
 800985e:	4770      	bx	lr

08009860 <__retarget_lock_release_recursive>:
 8009860:	4770      	bx	lr

08009862 <memcpy>:
 8009862:	440a      	add	r2, r1
 8009864:	4291      	cmp	r1, r2
 8009866:	f100 33ff 	add.w	r3, r0, #4294967295
 800986a:	d100      	bne.n	800986e <memcpy+0xc>
 800986c:	4770      	bx	lr
 800986e:	b510      	push	{r4, lr}
 8009870:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009874:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009878:	4291      	cmp	r1, r2
 800987a:	d1f9      	bne.n	8009870 <memcpy+0xe>
 800987c:	bd10      	pop	{r4, pc}
	...

08009880 <nanf>:
 8009880:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009888 <nanf+0x8>
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	7fc00000 	.word	0x7fc00000

0800988c <quorem>:
 800988c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009890:	6903      	ldr	r3, [r0, #16]
 8009892:	690c      	ldr	r4, [r1, #16]
 8009894:	42a3      	cmp	r3, r4
 8009896:	4607      	mov	r7, r0
 8009898:	db7e      	blt.n	8009998 <quorem+0x10c>
 800989a:	3c01      	subs	r4, #1
 800989c:	f101 0814 	add.w	r8, r1, #20
 80098a0:	00a3      	lsls	r3, r4, #2
 80098a2:	f100 0514 	add.w	r5, r0, #20
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098ac:	9301      	str	r3, [sp, #4]
 80098ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098b6:	3301      	adds	r3, #1
 80098b8:	429a      	cmp	r2, r3
 80098ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098be:	fbb2 f6f3 	udiv	r6, r2, r3
 80098c2:	d32e      	bcc.n	8009922 <quorem+0x96>
 80098c4:	f04f 0a00 	mov.w	sl, #0
 80098c8:	46c4      	mov	ip, r8
 80098ca:	46ae      	mov	lr, r5
 80098cc:	46d3      	mov	fp, sl
 80098ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 80098d2:	b298      	uxth	r0, r3
 80098d4:	fb06 a000 	mla	r0, r6, r0, sl
 80098d8:	0c02      	lsrs	r2, r0, #16
 80098da:	0c1b      	lsrs	r3, r3, #16
 80098dc:	fb06 2303 	mla	r3, r6, r3, r2
 80098e0:	f8de 2000 	ldr.w	r2, [lr]
 80098e4:	b280      	uxth	r0, r0
 80098e6:	b292      	uxth	r2, r2
 80098e8:	1a12      	subs	r2, r2, r0
 80098ea:	445a      	add	r2, fp
 80098ec:	f8de 0000 	ldr.w	r0, [lr]
 80098f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80098fa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80098fe:	b292      	uxth	r2, r2
 8009900:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009904:	45e1      	cmp	r9, ip
 8009906:	f84e 2b04 	str.w	r2, [lr], #4
 800990a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800990e:	d2de      	bcs.n	80098ce <quorem+0x42>
 8009910:	9b00      	ldr	r3, [sp, #0]
 8009912:	58eb      	ldr	r3, [r5, r3]
 8009914:	b92b      	cbnz	r3, 8009922 <quorem+0x96>
 8009916:	9b01      	ldr	r3, [sp, #4]
 8009918:	3b04      	subs	r3, #4
 800991a:	429d      	cmp	r5, r3
 800991c:	461a      	mov	r2, r3
 800991e:	d32f      	bcc.n	8009980 <quorem+0xf4>
 8009920:	613c      	str	r4, [r7, #16]
 8009922:	4638      	mov	r0, r7
 8009924:	f001 f956 	bl	800abd4 <__mcmp>
 8009928:	2800      	cmp	r0, #0
 800992a:	db25      	blt.n	8009978 <quorem+0xec>
 800992c:	4629      	mov	r1, r5
 800992e:	2000      	movs	r0, #0
 8009930:	f858 2b04 	ldr.w	r2, [r8], #4
 8009934:	f8d1 c000 	ldr.w	ip, [r1]
 8009938:	fa1f fe82 	uxth.w	lr, r2
 800993c:	fa1f f38c 	uxth.w	r3, ip
 8009940:	eba3 030e 	sub.w	r3, r3, lr
 8009944:	4403      	add	r3, r0
 8009946:	0c12      	lsrs	r2, r2, #16
 8009948:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800994c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009950:	b29b      	uxth	r3, r3
 8009952:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009956:	45c1      	cmp	r9, r8
 8009958:	f841 3b04 	str.w	r3, [r1], #4
 800995c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009960:	d2e6      	bcs.n	8009930 <quorem+0xa4>
 8009962:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009966:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800996a:	b922      	cbnz	r2, 8009976 <quorem+0xea>
 800996c:	3b04      	subs	r3, #4
 800996e:	429d      	cmp	r5, r3
 8009970:	461a      	mov	r2, r3
 8009972:	d30b      	bcc.n	800998c <quorem+0x100>
 8009974:	613c      	str	r4, [r7, #16]
 8009976:	3601      	adds	r6, #1
 8009978:	4630      	mov	r0, r6
 800997a:	b003      	add	sp, #12
 800997c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009980:	6812      	ldr	r2, [r2, #0]
 8009982:	3b04      	subs	r3, #4
 8009984:	2a00      	cmp	r2, #0
 8009986:	d1cb      	bne.n	8009920 <quorem+0x94>
 8009988:	3c01      	subs	r4, #1
 800998a:	e7c6      	b.n	800991a <quorem+0x8e>
 800998c:	6812      	ldr	r2, [r2, #0]
 800998e:	3b04      	subs	r3, #4
 8009990:	2a00      	cmp	r2, #0
 8009992:	d1ef      	bne.n	8009974 <quorem+0xe8>
 8009994:	3c01      	subs	r4, #1
 8009996:	e7ea      	b.n	800996e <quorem+0xe2>
 8009998:	2000      	movs	r0, #0
 800999a:	e7ee      	b.n	800997a <quorem+0xee>
 800999c:	0000      	movs	r0, r0
	...

080099a0 <_dtoa_r>:
 80099a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a4:	ed2d 8b02 	vpush	{d8}
 80099a8:	69c7      	ldr	r7, [r0, #28]
 80099aa:	b091      	sub	sp, #68	@ 0x44
 80099ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80099b0:	ec55 4b10 	vmov	r4, r5, d0
 80099b4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80099b6:	9107      	str	r1, [sp, #28]
 80099b8:	4681      	mov	r9, r0
 80099ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80099bc:	930d      	str	r3, [sp, #52]	@ 0x34
 80099be:	b97f      	cbnz	r7, 80099e0 <_dtoa_r+0x40>
 80099c0:	2010      	movs	r0, #16
 80099c2:	f000 fd95 	bl	800a4f0 <malloc>
 80099c6:	4602      	mov	r2, r0
 80099c8:	f8c9 001c 	str.w	r0, [r9, #28]
 80099cc:	b920      	cbnz	r0, 80099d8 <_dtoa_r+0x38>
 80099ce:	4ba0      	ldr	r3, [pc, #640]	@ (8009c50 <_dtoa_r+0x2b0>)
 80099d0:	21ef      	movs	r1, #239	@ 0xef
 80099d2:	48a0      	ldr	r0, [pc, #640]	@ (8009c54 <_dtoa_r+0x2b4>)
 80099d4:	f002 fd40 	bl	800c458 <__assert_func>
 80099d8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80099dc:	6007      	str	r7, [r0, #0]
 80099de:	60c7      	str	r7, [r0, #12]
 80099e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80099e4:	6819      	ldr	r1, [r3, #0]
 80099e6:	b159      	cbz	r1, 8009a00 <_dtoa_r+0x60>
 80099e8:	685a      	ldr	r2, [r3, #4]
 80099ea:	604a      	str	r2, [r1, #4]
 80099ec:	2301      	movs	r3, #1
 80099ee:	4093      	lsls	r3, r2
 80099f0:	608b      	str	r3, [r1, #8]
 80099f2:	4648      	mov	r0, r9
 80099f4:	f000 fe72 	bl	800a6dc <_Bfree>
 80099f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80099fc:	2200      	movs	r2, #0
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	1e2b      	subs	r3, r5, #0
 8009a02:	bfbb      	ittet	lt
 8009a04:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a08:	9303      	strlt	r3, [sp, #12]
 8009a0a:	2300      	movge	r3, #0
 8009a0c:	2201      	movlt	r2, #1
 8009a0e:	bfac      	ite	ge
 8009a10:	6033      	strge	r3, [r6, #0]
 8009a12:	6032      	strlt	r2, [r6, #0]
 8009a14:	4b90      	ldr	r3, [pc, #576]	@ (8009c58 <_dtoa_r+0x2b8>)
 8009a16:	9e03      	ldr	r6, [sp, #12]
 8009a18:	43b3      	bics	r3, r6
 8009a1a:	d110      	bne.n	8009a3e <_dtoa_r+0x9e>
 8009a1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a1e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a22:	6013      	str	r3, [r2, #0]
 8009a24:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8009a28:	4323      	orrs	r3, r4
 8009a2a:	f000 84e6 	beq.w	800a3fa <_dtoa_r+0xa5a>
 8009a2e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009a30:	4f8a      	ldr	r7, [pc, #552]	@ (8009c5c <_dtoa_r+0x2bc>)
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 84e8 	beq.w	800a408 <_dtoa_r+0xa68>
 8009a38:	1cfb      	adds	r3, r7, #3
 8009a3a:	f000 bce3 	b.w	800a404 <_dtoa_r+0xa64>
 8009a3e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009a42:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a4a:	d10a      	bne.n	8009a62 <_dtoa_r+0xc2>
 8009a4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a4e:	2301      	movs	r3, #1
 8009a50:	6013      	str	r3, [r2, #0]
 8009a52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009a54:	b113      	cbz	r3, 8009a5c <_dtoa_r+0xbc>
 8009a56:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009a58:	4b81      	ldr	r3, [pc, #516]	@ (8009c60 <_dtoa_r+0x2c0>)
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	4f81      	ldr	r7, [pc, #516]	@ (8009c64 <_dtoa_r+0x2c4>)
 8009a5e:	f000 bcd3 	b.w	800a408 <_dtoa_r+0xa68>
 8009a62:	aa0e      	add	r2, sp, #56	@ 0x38
 8009a64:	a90f      	add	r1, sp, #60	@ 0x3c
 8009a66:	4648      	mov	r0, r9
 8009a68:	eeb0 0b48 	vmov.f64	d0, d8
 8009a6c:	f001 f9d2 	bl	800ae14 <__d2b>
 8009a70:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8009a74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a76:	9001      	str	r0, [sp, #4]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d045      	beq.n	8009b08 <_dtoa_r+0x168>
 8009a7c:	eeb0 7b48 	vmov.f64	d7, d8
 8009a80:	ee18 1a90 	vmov	r1, s17
 8009a84:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009a88:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8009a8c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009a90:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009a94:	2500      	movs	r5, #0
 8009a96:	ee07 1a90 	vmov	s15, r1
 8009a9a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009a9e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009c38 <_dtoa_r+0x298>
 8009aa2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009aa6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009c40 <_dtoa_r+0x2a0>
 8009aaa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009aae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009c48 <_dtoa_r+0x2a8>
 8009ab2:	ee07 3a90 	vmov	s15, r3
 8009ab6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009aba:	eeb0 7b46 	vmov.f64	d7, d6
 8009abe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009ac2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009ac6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ace:	ee16 8a90 	vmov	r8, s13
 8009ad2:	d508      	bpl.n	8009ae6 <_dtoa_r+0x146>
 8009ad4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009ad8:	eeb4 6b47 	vcmp.f64	d6, d7
 8009adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae0:	bf18      	it	ne
 8009ae2:	f108 38ff 	addne.w	r8, r8, #4294967295
 8009ae6:	f1b8 0f16 	cmp.w	r8, #22
 8009aea:	d82b      	bhi.n	8009b44 <_dtoa_r+0x1a4>
 8009aec:	495e      	ldr	r1, [pc, #376]	@ (8009c68 <_dtoa_r+0x2c8>)
 8009aee:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8009af2:	ed91 7b00 	vldr	d7, [r1]
 8009af6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009afe:	d501      	bpl.n	8009b04 <_dtoa_r+0x164>
 8009b00:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b04:	2100      	movs	r1, #0
 8009b06:	e01e      	b.n	8009b46 <_dtoa_r+0x1a6>
 8009b08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009b10:	2920      	cmp	r1, #32
 8009b12:	bfc1      	itttt	gt
 8009b14:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009b18:	408e      	lslgt	r6, r1
 8009b1a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8009b1e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8009b22:	bfd6      	itet	le
 8009b24:	f1c1 0120 	rsble	r1, r1, #32
 8009b28:	4331      	orrgt	r1, r6
 8009b2a:	fa04 f101 	lslle.w	r1, r4, r1
 8009b2e:	ee07 1a90 	vmov	s15, r1
 8009b32:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009b36:	3b01      	subs	r3, #1
 8009b38:	ee17 1a90 	vmov	r1, s15
 8009b3c:	2501      	movs	r5, #1
 8009b3e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8009b42:	e7a8      	b.n	8009a96 <_dtoa_r+0xf6>
 8009b44:	2101      	movs	r1, #1
 8009b46:	1ad2      	subs	r2, r2, r3
 8009b48:	1e53      	subs	r3, r2, #1
 8009b4a:	9306      	str	r3, [sp, #24]
 8009b4c:	bf45      	ittet	mi
 8009b4e:	f1c2 0301 	rsbmi	r3, r2, #1
 8009b52:	9304      	strmi	r3, [sp, #16]
 8009b54:	2300      	movpl	r3, #0
 8009b56:	2300      	movmi	r3, #0
 8009b58:	bf4c      	ite	mi
 8009b5a:	9306      	strmi	r3, [sp, #24]
 8009b5c:	9304      	strpl	r3, [sp, #16]
 8009b5e:	f1b8 0f00 	cmp.w	r8, #0
 8009b62:	910c      	str	r1, [sp, #48]	@ 0x30
 8009b64:	db18      	blt.n	8009b98 <_dtoa_r+0x1f8>
 8009b66:	9b06      	ldr	r3, [sp, #24]
 8009b68:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009b6c:	4443      	add	r3, r8
 8009b6e:	9306      	str	r3, [sp, #24]
 8009b70:	2300      	movs	r3, #0
 8009b72:	9a07      	ldr	r2, [sp, #28]
 8009b74:	2a09      	cmp	r2, #9
 8009b76:	d845      	bhi.n	8009c04 <_dtoa_r+0x264>
 8009b78:	2a05      	cmp	r2, #5
 8009b7a:	bfc4      	itt	gt
 8009b7c:	3a04      	subgt	r2, #4
 8009b7e:	9207      	strgt	r2, [sp, #28]
 8009b80:	9a07      	ldr	r2, [sp, #28]
 8009b82:	f1a2 0202 	sub.w	r2, r2, #2
 8009b86:	bfcc      	ite	gt
 8009b88:	2400      	movgt	r4, #0
 8009b8a:	2401      	movle	r4, #1
 8009b8c:	2a03      	cmp	r2, #3
 8009b8e:	d844      	bhi.n	8009c1a <_dtoa_r+0x27a>
 8009b90:	e8df f002 	tbb	[pc, r2]
 8009b94:	0b173634 	.word	0x0b173634
 8009b98:	9b04      	ldr	r3, [sp, #16]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	eba3 0308 	sub.w	r3, r3, r8
 8009ba0:	9304      	str	r3, [sp, #16]
 8009ba2:	920a      	str	r2, [sp, #40]	@ 0x28
 8009ba4:	f1c8 0300 	rsb	r3, r8, #0
 8009ba8:	e7e3      	b.n	8009b72 <_dtoa_r+0x1d2>
 8009baa:	2201      	movs	r2, #1
 8009bac:	9208      	str	r2, [sp, #32]
 8009bae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bb0:	eb08 0b02 	add.w	fp, r8, r2
 8009bb4:	f10b 0a01 	add.w	sl, fp, #1
 8009bb8:	4652      	mov	r2, sl
 8009bba:	2a01      	cmp	r2, #1
 8009bbc:	bfb8      	it	lt
 8009bbe:	2201      	movlt	r2, #1
 8009bc0:	e006      	b.n	8009bd0 <_dtoa_r+0x230>
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	9208      	str	r2, [sp, #32]
 8009bc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bc8:	2a00      	cmp	r2, #0
 8009bca:	dd29      	ble.n	8009c20 <_dtoa_r+0x280>
 8009bcc:	4693      	mov	fp, r2
 8009bce:	4692      	mov	sl, r2
 8009bd0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	2004      	movs	r0, #4
 8009bd8:	f100 0614 	add.w	r6, r0, #20
 8009bdc:	4296      	cmp	r6, r2
 8009bde:	d926      	bls.n	8009c2e <_dtoa_r+0x28e>
 8009be0:	6079      	str	r1, [r7, #4]
 8009be2:	4648      	mov	r0, r9
 8009be4:	9305      	str	r3, [sp, #20]
 8009be6:	f000 fd39 	bl	800a65c <_Balloc>
 8009bea:	9b05      	ldr	r3, [sp, #20]
 8009bec:	4607      	mov	r7, r0
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d13e      	bne.n	8009c70 <_dtoa_r+0x2d0>
 8009bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8009c6c <_dtoa_r+0x2cc>)
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	f240 11af 	movw	r1, #431	@ 0x1af
 8009bfa:	e6ea      	b.n	80099d2 <_dtoa_r+0x32>
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	e7e1      	b.n	8009bc4 <_dtoa_r+0x224>
 8009c00:	2200      	movs	r2, #0
 8009c02:	e7d3      	b.n	8009bac <_dtoa_r+0x20c>
 8009c04:	2401      	movs	r4, #1
 8009c06:	2200      	movs	r2, #0
 8009c08:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009c0c:	f04f 3bff 	mov.w	fp, #4294967295
 8009c10:	2100      	movs	r1, #0
 8009c12:	46da      	mov	sl, fp
 8009c14:	2212      	movs	r2, #18
 8009c16:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c18:	e7da      	b.n	8009bd0 <_dtoa_r+0x230>
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	9208      	str	r2, [sp, #32]
 8009c1e:	e7f5      	b.n	8009c0c <_dtoa_r+0x26c>
 8009c20:	f04f 0b01 	mov.w	fp, #1
 8009c24:	46da      	mov	sl, fp
 8009c26:	465a      	mov	r2, fp
 8009c28:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009c2c:	e7d0      	b.n	8009bd0 <_dtoa_r+0x230>
 8009c2e:	3101      	adds	r1, #1
 8009c30:	0040      	lsls	r0, r0, #1
 8009c32:	e7d1      	b.n	8009bd8 <_dtoa_r+0x238>
 8009c34:	f3af 8000 	nop.w
 8009c38:	636f4361 	.word	0x636f4361
 8009c3c:	3fd287a7 	.word	0x3fd287a7
 8009c40:	8b60c8b3 	.word	0x8b60c8b3
 8009c44:	3fc68a28 	.word	0x3fc68a28
 8009c48:	509f79fb 	.word	0x509f79fb
 8009c4c:	3fd34413 	.word	0x3fd34413
 8009c50:	0800ce86 	.word	0x0800ce86
 8009c54:	0800ce9d 	.word	0x0800ce9d
 8009c58:	7ff00000 	.word	0x7ff00000
 8009c5c:	0800ce82 	.word	0x0800ce82
 8009c60:	0800ce51 	.word	0x0800ce51
 8009c64:	0800ce50 	.word	0x0800ce50
 8009c68:	0800d050 	.word	0x0800d050
 8009c6c:	0800cef5 	.word	0x0800cef5
 8009c70:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8009c74:	f1ba 0f0e 	cmp.w	sl, #14
 8009c78:	6010      	str	r0, [r2, #0]
 8009c7a:	d86e      	bhi.n	8009d5a <_dtoa_r+0x3ba>
 8009c7c:	2c00      	cmp	r4, #0
 8009c7e:	d06c      	beq.n	8009d5a <_dtoa_r+0x3ba>
 8009c80:	f1b8 0f00 	cmp.w	r8, #0
 8009c84:	f340 80b4 	ble.w	8009df0 <_dtoa_r+0x450>
 8009c88:	4ac8      	ldr	r2, [pc, #800]	@ (8009fac <_dtoa_r+0x60c>)
 8009c8a:	f008 010f 	and.w	r1, r8, #15
 8009c8e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009c92:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8009c96:	ed92 7b00 	vldr	d7, [r2]
 8009c9a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009c9e:	f000 809b 	beq.w	8009dd8 <_dtoa_r+0x438>
 8009ca2:	4ac3      	ldr	r2, [pc, #780]	@ (8009fb0 <_dtoa_r+0x610>)
 8009ca4:	ed92 6b08 	vldr	d6, [r2, #32]
 8009ca8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009cac:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009cb0:	f001 010f 	and.w	r1, r1, #15
 8009cb4:	2203      	movs	r2, #3
 8009cb6:	48be      	ldr	r0, [pc, #760]	@ (8009fb0 <_dtoa_r+0x610>)
 8009cb8:	2900      	cmp	r1, #0
 8009cba:	f040 808f 	bne.w	8009ddc <_dtoa_r+0x43c>
 8009cbe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009cc2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009cc6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009cca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009ccc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009cd0:	2900      	cmp	r1, #0
 8009cd2:	f000 80b3 	beq.w	8009e3c <_dtoa_r+0x49c>
 8009cd6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009cda:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce2:	f140 80ab 	bpl.w	8009e3c <_dtoa_r+0x49c>
 8009ce6:	f1ba 0f00 	cmp.w	sl, #0
 8009cea:	f000 80a7 	beq.w	8009e3c <_dtoa_r+0x49c>
 8009cee:	f1bb 0f00 	cmp.w	fp, #0
 8009cf2:	dd30      	ble.n	8009d56 <_dtoa_r+0x3b6>
 8009cf4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009cf8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009cfc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d00:	f108 31ff 	add.w	r1, r8, #4294967295
 8009d04:	9105      	str	r1, [sp, #20]
 8009d06:	3201      	adds	r2, #1
 8009d08:	465c      	mov	r4, fp
 8009d0a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009d0e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009d12:	ee07 2a90 	vmov	s15, r2
 8009d16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009d1a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009d1e:	ee15 2a90 	vmov	r2, s11
 8009d22:	ec51 0b15 	vmov	r0, r1, d5
 8009d26:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8009d2a:	2c00      	cmp	r4, #0
 8009d2c:	f040 808a 	bne.w	8009e44 <_dtoa_r+0x4a4>
 8009d30:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009d34:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009d38:	ec41 0b17 	vmov	d7, r0, r1
 8009d3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d44:	f300 826a 	bgt.w	800a21c <_dtoa_r+0x87c>
 8009d48:	eeb1 7b47 	vneg.f64	d7, d7
 8009d4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d54:	d423      	bmi.n	8009d9e <_dtoa_r+0x3fe>
 8009d56:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009d5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009d5c:	2a00      	cmp	r2, #0
 8009d5e:	f2c0 8129 	blt.w	8009fb4 <_dtoa_r+0x614>
 8009d62:	f1b8 0f0e 	cmp.w	r8, #14
 8009d66:	f300 8125 	bgt.w	8009fb4 <_dtoa_r+0x614>
 8009d6a:	4b90      	ldr	r3, [pc, #576]	@ (8009fac <_dtoa_r+0x60c>)
 8009d6c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009d70:	ed93 6b00 	vldr	d6, [r3]
 8009d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f280 80c8 	bge.w	8009f0c <_dtoa_r+0x56c>
 8009d7c:	f1ba 0f00 	cmp.w	sl, #0
 8009d80:	f300 80c4 	bgt.w	8009f0c <_dtoa_r+0x56c>
 8009d84:	d10b      	bne.n	8009d9e <_dtoa_r+0x3fe>
 8009d86:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009d8a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009d8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d92:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d9a:	f2c0 823c 	blt.w	800a216 <_dtoa_r+0x876>
 8009d9e:	2400      	movs	r4, #0
 8009da0:	4625      	mov	r5, r4
 8009da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da4:	43db      	mvns	r3, r3
 8009da6:	9305      	str	r3, [sp, #20]
 8009da8:	463e      	mov	r6, r7
 8009daa:	f04f 0800 	mov.w	r8, #0
 8009dae:	4621      	mov	r1, r4
 8009db0:	4648      	mov	r0, r9
 8009db2:	f000 fc93 	bl	800a6dc <_Bfree>
 8009db6:	2d00      	cmp	r5, #0
 8009db8:	f000 80a2 	beq.w	8009f00 <_dtoa_r+0x560>
 8009dbc:	f1b8 0f00 	cmp.w	r8, #0
 8009dc0:	d005      	beq.n	8009dce <_dtoa_r+0x42e>
 8009dc2:	45a8      	cmp	r8, r5
 8009dc4:	d003      	beq.n	8009dce <_dtoa_r+0x42e>
 8009dc6:	4641      	mov	r1, r8
 8009dc8:	4648      	mov	r0, r9
 8009dca:	f000 fc87 	bl	800a6dc <_Bfree>
 8009dce:	4629      	mov	r1, r5
 8009dd0:	4648      	mov	r0, r9
 8009dd2:	f000 fc83 	bl	800a6dc <_Bfree>
 8009dd6:	e093      	b.n	8009f00 <_dtoa_r+0x560>
 8009dd8:	2202      	movs	r2, #2
 8009dda:	e76c      	b.n	8009cb6 <_dtoa_r+0x316>
 8009ddc:	07cc      	lsls	r4, r1, #31
 8009dde:	d504      	bpl.n	8009dea <_dtoa_r+0x44a>
 8009de0:	ed90 6b00 	vldr	d6, [r0]
 8009de4:	3201      	adds	r2, #1
 8009de6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009dea:	1049      	asrs	r1, r1, #1
 8009dec:	3008      	adds	r0, #8
 8009dee:	e763      	b.n	8009cb8 <_dtoa_r+0x318>
 8009df0:	d022      	beq.n	8009e38 <_dtoa_r+0x498>
 8009df2:	f1c8 0100 	rsb	r1, r8, #0
 8009df6:	4a6d      	ldr	r2, [pc, #436]	@ (8009fac <_dtoa_r+0x60c>)
 8009df8:	f001 000f 	and.w	r0, r1, #15
 8009dfc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009e00:	ed92 7b00 	vldr	d7, [r2]
 8009e04:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009e08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009e0c:	4868      	ldr	r0, [pc, #416]	@ (8009fb0 <_dtoa_r+0x610>)
 8009e0e:	1109      	asrs	r1, r1, #4
 8009e10:	2400      	movs	r4, #0
 8009e12:	2202      	movs	r2, #2
 8009e14:	b929      	cbnz	r1, 8009e22 <_dtoa_r+0x482>
 8009e16:	2c00      	cmp	r4, #0
 8009e18:	f43f af57 	beq.w	8009cca <_dtoa_r+0x32a>
 8009e1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009e20:	e753      	b.n	8009cca <_dtoa_r+0x32a>
 8009e22:	07ce      	lsls	r6, r1, #31
 8009e24:	d505      	bpl.n	8009e32 <_dtoa_r+0x492>
 8009e26:	ed90 6b00 	vldr	d6, [r0]
 8009e2a:	3201      	adds	r2, #1
 8009e2c:	2401      	movs	r4, #1
 8009e2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009e32:	1049      	asrs	r1, r1, #1
 8009e34:	3008      	adds	r0, #8
 8009e36:	e7ed      	b.n	8009e14 <_dtoa_r+0x474>
 8009e38:	2202      	movs	r2, #2
 8009e3a:	e746      	b.n	8009cca <_dtoa_r+0x32a>
 8009e3c:	f8cd 8014 	str.w	r8, [sp, #20]
 8009e40:	4654      	mov	r4, sl
 8009e42:	e762      	b.n	8009d0a <_dtoa_r+0x36a>
 8009e44:	4a59      	ldr	r2, [pc, #356]	@ (8009fac <_dtoa_r+0x60c>)
 8009e46:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009e4a:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009e4e:	9a08      	ldr	r2, [sp, #32]
 8009e50:	ec41 0b17 	vmov	d7, r0, r1
 8009e54:	443c      	add	r4, r7
 8009e56:	b34a      	cbz	r2, 8009eac <_dtoa_r+0x50c>
 8009e58:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009e5c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009e60:	463e      	mov	r6, r7
 8009e62:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009e66:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009e6a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009e6e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009e72:	ee14 2a90 	vmov	r2, s9
 8009e76:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009e7a:	3230      	adds	r2, #48	@ 0x30
 8009e7c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009e80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e88:	f806 2b01 	strb.w	r2, [r6], #1
 8009e8c:	d438      	bmi.n	8009f00 <_dtoa_r+0x560>
 8009e8e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009e92:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e9a:	d46e      	bmi.n	8009f7a <_dtoa_r+0x5da>
 8009e9c:	42a6      	cmp	r6, r4
 8009e9e:	f43f af5a 	beq.w	8009d56 <_dtoa_r+0x3b6>
 8009ea2:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009ea6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009eaa:	e7e0      	b.n	8009e6e <_dtoa_r+0x4ce>
 8009eac:	4621      	mov	r1, r4
 8009eae:	463e      	mov	r6, r7
 8009eb0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009eb4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009eb8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009ebc:	ee14 2a90 	vmov	r2, s9
 8009ec0:	3230      	adds	r2, #48	@ 0x30
 8009ec2:	f806 2b01 	strb.w	r2, [r6], #1
 8009ec6:	42a6      	cmp	r6, r4
 8009ec8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009ecc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009ed0:	d119      	bne.n	8009f06 <_dtoa_r+0x566>
 8009ed2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009ed6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009eda:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee2:	dc4a      	bgt.n	8009f7a <_dtoa_r+0x5da>
 8009ee4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009ee8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef0:	f57f af31 	bpl.w	8009d56 <_dtoa_r+0x3b6>
 8009ef4:	460e      	mov	r6, r1
 8009ef6:	3901      	subs	r1, #1
 8009ef8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009efc:	2b30      	cmp	r3, #48	@ 0x30
 8009efe:	d0f9      	beq.n	8009ef4 <_dtoa_r+0x554>
 8009f00:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009f04:	e027      	b.n	8009f56 <_dtoa_r+0x5b6>
 8009f06:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009f0a:	e7d5      	b.n	8009eb8 <_dtoa_r+0x518>
 8009f0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f10:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009f14:	463e      	mov	r6, r7
 8009f16:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009f1a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009f1e:	ee15 3a10 	vmov	r3, s10
 8009f22:	3330      	adds	r3, #48	@ 0x30
 8009f24:	f806 3b01 	strb.w	r3, [r6], #1
 8009f28:	1bf3      	subs	r3, r6, r7
 8009f2a:	459a      	cmp	sl, r3
 8009f2c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009f30:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009f34:	d132      	bne.n	8009f9c <_dtoa_r+0x5fc>
 8009f36:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009f3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f42:	dc18      	bgt.n	8009f76 <_dtoa_r+0x5d6>
 8009f44:	eeb4 7b46 	vcmp.f64	d7, d6
 8009f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f4c:	d103      	bne.n	8009f56 <_dtoa_r+0x5b6>
 8009f4e:	ee15 3a10 	vmov	r3, s10
 8009f52:	07db      	lsls	r3, r3, #31
 8009f54:	d40f      	bmi.n	8009f76 <_dtoa_r+0x5d6>
 8009f56:	9901      	ldr	r1, [sp, #4]
 8009f58:	4648      	mov	r0, r9
 8009f5a:	f000 fbbf 	bl	800a6dc <_Bfree>
 8009f5e:	2300      	movs	r3, #0
 8009f60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f62:	7033      	strb	r3, [r6, #0]
 8009f64:	f108 0301 	add.w	r3, r8, #1
 8009f68:	6013      	str	r3, [r2, #0]
 8009f6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f000 824b 	beq.w	800a408 <_dtoa_r+0xa68>
 8009f72:	601e      	str	r6, [r3, #0]
 8009f74:	e248      	b.n	800a408 <_dtoa_r+0xa68>
 8009f76:	f8cd 8014 	str.w	r8, [sp, #20]
 8009f7a:	4633      	mov	r3, r6
 8009f7c:	461e      	mov	r6, r3
 8009f7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f82:	2a39      	cmp	r2, #57	@ 0x39
 8009f84:	d106      	bne.n	8009f94 <_dtoa_r+0x5f4>
 8009f86:	429f      	cmp	r7, r3
 8009f88:	d1f8      	bne.n	8009f7c <_dtoa_r+0x5dc>
 8009f8a:	9a05      	ldr	r2, [sp, #20]
 8009f8c:	3201      	adds	r2, #1
 8009f8e:	9205      	str	r2, [sp, #20]
 8009f90:	2230      	movs	r2, #48	@ 0x30
 8009f92:	703a      	strb	r2, [r7, #0]
 8009f94:	781a      	ldrb	r2, [r3, #0]
 8009f96:	3201      	adds	r2, #1
 8009f98:	701a      	strb	r2, [r3, #0]
 8009f9a:	e7b1      	b.n	8009f00 <_dtoa_r+0x560>
 8009f9c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009fa0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa8:	d1b5      	bne.n	8009f16 <_dtoa_r+0x576>
 8009faa:	e7d4      	b.n	8009f56 <_dtoa_r+0x5b6>
 8009fac:	0800d050 	.word	0x0800d050
 8009fb0:	0800d028 	.word	0x0800d028
 8009fb4:	9908      	ldr	r1, [sp, #32]
 8009fb6:	2900      	cmp	r1, #0
 8009fb8:	f000 80e9 	beq.w	800a18e <_dtoa_r+0x7ee>
 8009fbc:	9907      	ldr	r1, [sp, #28]
 8009fbe:	2901      	cmp	r1, #1
 8009fc0:	f300 80cb 	bgt.w	800a15a <_dtoa_r+0x7ba>
 8009fc4:	2d00      	cmp	r5, #0
 8009fc6:	f000 80c4 	beq.w	800a152 <_dtoa_r+0x7b2>
 8009fca:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009fce:	9e04      	ldr	r6, [sp, #16]
 8009fd0:	461c      	mov	r4, r3
 8009fd2:	9305      	str	r3, [sp, #20]
 8009fd4:	9b04      	ldr	r3, [sp, #16]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	9304      	str	r3, [sp, #16]
 8009fda:	9b06      	ldr	r3, [sp, #24]
 8009fdc:	2101      	movs	r1, #1
 8009fde:	4413      	add	r3, r2
 8009fe0:	4648      	mov	r0, r9
 8009fe2:	9306      	str	r3, [sp, #24]
 8009fe4:	f000 fc78 	bl	800a8d8 <__i2b>
 8009fe8:	9b05      	ldr	r3, [sp, #20]
 8009fea:	4605      	mov	r5, r0
 8009fec:	b166      	cbz	r6, 800a008 <_dtoa_r+0x668>
 8009fee:	9a06      	ldr	r2, [sp, #24]
 8009ff0:	2a00      	cmp	r2, #0
 8009ff2:	dd09      	ble.n	800a008 <_dtoa_r+0x668>
 8009ff4:	42b2      	cmp	r2, r6
 8009ff6:	9904      	ldr	r1, [sp, #16]
 8009ff8:	bfa8      	it	ge
 8009ffa:	4632      	movge	r2, r6
 8009ffc:	1a89      	subs	r1, r1, r2
 8009ffe:	9104      	str	r1, [sp, #16]
 800a000:	9906      	ldr	r1, [sp, #24]
 800a002:	1ab6      	subs	r6, r6, r2
 800a004:	1a8a      	subs	r2, r1, r2
 800a006:	9206      	str	r2, [sp, #24]
 800a008:	b30b      	cbz	r3, 800a04e <_dtoa_r+0x6ae>
 800a00a:	9a08      	ldr	r2, [sp, #32]
 800a00c:	2a00      	cmp	r2, #0
 800a00e:	f000 80c5 	beq.w	800a19c <_dtoa_r+0x7fc>
 800a012:	2c00      	cmp	r4, #0
 800a014:	f000 80bf 	beq.w	800a196 <_dtoa_r+0x7f6>
 800a018:	4629      	mov	r1, r5
 800a01a:	4622      	mov	r2, r4
 800a01c:	4648      	mov	r0, r9
 800a01e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a020:	f000 fd12 	bl	800aa48 <__pow5mult>
 800a024:	9a01      	ldr	r2, [sp, #4]
 800a026:	4601      	mov	r1, r0
 800a028:	4605      	mov	r5, r0
 800a02a:	4648      	mov	r0, r9
 800a02c:	f000 fc6a 	bl	800a904 <__multiply>
 800a030:	9901      	ldr	r1, [sp, #4]
 800a032:	9005      	str	r0, [sp, #20]
 800a034:	4648      	mov	r0, r9
 800a036:	f000 fb51 	bl	800a6dc <_Bfree>
 800a03a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a03c:	1b1b      	subs	r3, r3, r4
 800a03e:	f000 80b0 	beq.w	800a1a2 <_dtoa_r+0x802>
 800a042:	9905      	ldr	r1, [sp, #20]
 800a044:	461a      	mov	r2, r3
 800a046:	4648      	mov	r0, r9
 800a048:	f000 fcfe 	bl	800aa48 <__pow5mult>
 800a04c:	9001      	str	r0, [sp, #4]
 800a04e:	2101      	movs	r1, #1
 800a050:	4648      	mov	r0, r9
 800a052:	f000 fc41 	bl	800a8d8 <__i2b>
 800a056:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a058:	4604      	mov	r4, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f000 81da 	beq.w	800a414 <_dtoa_r+0xa74>
 800a060:	461a      	mov	r2, r3
 800a062:	4601      	mov	r1, r0
 800a064:	4648      	mov	r0, r9
 800a066:	f000 fcef 	bl	800aa48 <__pow5mult>
 800a06a:	9b07      	ldr	r3, [sp, #28]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	4604      	mov	r4, r0
 800a070:	f300 80a0 	bgt.w	800a1b4 <_dtoa_r+0x814>
 800a074:	9b02      	ldr	r3, [sp, #8]
 800a076:	2b00      	cmp	r3, #0
 800a078:	f040 8096 	bne.w	800a1a8 <_dtoa_r+0x808>
 800a07c:	9b03      	ldr	r3, [sp, #12]
 800a07e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a082:	2a00      	cmp	r2, #0
 800a084:	f040 8092 	bne.w	800a1ac <_dtoa_r+0x80c>
 800a088:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a08c:	0d12      	lsrs	r2, r2, #20
 800a08e:	0512      	lsls	r2, r2, #20
 800a090:	2a00      	cmp	r2, #0
 800a092:	f000 808d 	beq.w	800a1b0 <_dtoa_r+0x810>
 800a096:	9b04      	ldr	r3, [sp, #16]
 800a098:	3301      	adds	r3, #1
 800a09a:	9304      	str	r3, [sp, #16]
 800a09c:	9b06      	ldr	r3, [sp, #24]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	9306      	str	r3, [sp, #24]
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 81b9 	beq.w	800a420 <_dtoa_r+0xa80>
 800a0ae:	6922      	ldr	r2, [r4, #16]
 800a0b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a0b4:	6910      	ldr	r0, [r2, #16]
 800a0b6:	f000 fbc3 	bl	800a840 <__hi0bits>
 800a0ba:	f1c0 0020 	rsb	r0, r0, #32
 800a0be:	9b06      	ldr	r3, [sp, #24]
 800a0c0:	4418      	add	r0, r3
 800a0c2:	f010 001f 	ands.w	r0, r0, #31
 800a0c6:	f000 8081 	beq.w	800a1cc <_dtoa_r+0x82c>
 800a0ca:	f1c0 0220 	rsb	r2, r0, #32
 800a0ce:	2a04      	cmp	r2, #4
 800a0d0:	dd73      	ble.n	800a1ba <_dtoa_r+0x81a>
 800a0d2:	9b04      	ldr	r3, [sp, #16]
 800a0d4:	f1c0 001c 	rsb	r0, r0, #28
 800a0d8:	4403      	add	r3, r0
 800a0da:	9304      	str	r3, [sp, #16]
 800a0dc:	9b06      	ldr	r3, [sp, #24]
 800a0de:	4406      	add	r6, r0
 800a0e0:	4403      	add	r3, r0
 800a0e2:	9306      	str	r3, [sp, #24]
 800a0e4:	9b04      	ldr	r3, [sp, #16]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	dd05      	ble.n	800a0f6 <_dtoa_r+0x756>
 800a0ea:	9901      	ldr	r1, [sp, #4]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	4648      	mov	r0, r9
 800a0f0:	f000 fd04 	bl	800aafc <__lshift>
 800a0f4:	9001      	str	r0, [sp, #4]
 800a0f6:	9b06      	ldr	r3, [sp, #24]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	dd05      	ble.n	800a108 <_dtoa_r+0x768>
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	461a      	mov	r2, r3
 800a100:	4648      	mov	r0, r9
 800a102:	f000 fcfb 	bl	800aafc <__lshift>
 800a106:	4604      	mov	r4, r0
 800a108:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d060      	beq.n	800a1d0 <_dtoa_r+0x830>
 800a10e:	9801      	ldr	r0, [sp, #4]
 800a110:	4621      	mov	r1, r4
 800a112:	f000 fd5f 	bl	800abd4 <__mcmp>
 800a116:	2800      	cmp	r0, #0
 800a118:	da5a      	bge.n	800a1d0 <_dtoa_r+0x830>
 800a11a:	f108 33ff 	add.w	r3, r8, #4294967295
 800a11e:	9305      	str	r3, [sp, #20]
 800a120:	9901      	ldr	r1, [sp, #4]
 800a122:	2300      	movs	r3, #0
 800a124:	220a      	movs	r2, #10
 800a126:	4648      	mov	r0, r9
 800a128:	f000 fafa 	bl	800a720 <__multadd>
 800a12c:	9b08      	ldr	r3, [sp, #32]
 800a12e:	9001      	str	r0, [sp, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 8177 	beq.w	800a424 <_dtoa_r+0xa84>
 800a136:	4629      	mov	r1, r5
 800a138:	2300      	movs	r3, #0
 800a13a:	220a      	movs	r2, #10
 800a13c:	4648      	mov	r0, r9
 800a13e:	f000 faef 	bl	800a720 <__multadd>
 800a142:	f1bb 0f00 	cmp.w	fp, #0
 800a146:	4605      	mov	r5, r0
 800a148:	dc6e      	bgt.n	800a228 <_dtoa_r+0x888>
 800a14a:	9b07      	ldr	r3, [sp, #28]
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	dc48      	bgt.n	800a1e2 <_dtoa_r+0x842>
 800a150:	e06a      	b.n	800a228 <_dtoa_r+0x888>
 800a152:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a154:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a158:	e739      	b.n	8009fce <_dtoa_r+0x62e>
 800a15a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800a15e:	42a3      	cmp	r3, r4
 800a160:	db07      	blt.n	800a172 <_dtoa_r+0x7d2>
 800a162:	f1ba 0f00 	cmp.w	sl, #0
 800a166:	eba3 0404 	sub.w	r4, r3, r4
 800a16a:	db0b      	blt.n	800a184 <_dtoa_r+0x7e4>
 800a16c:	9e04      	ldr	r6, [sp, #16]
 800a16e:	4652      	mov	r2, sl
 800a170:	e72f      	b.n	8009fd2 <_dtoa_r+0x632>
 800a172:	1ae2      	subs	r2, r4, r3
 800a174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a176:	9e04      	ldr	r6, [sp, #16]
 800a178:	4413      	add	r3, r2
 800a17a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a17c:	4652      	mov	r2, sl
 800a17e:	4623      	mov	r3, r4
 800a180:	2400      	movs	r4, #0
 800a182:	e726      	b.n	8009fd2 <_dtoa_r+0x632>
 800a184:	9a04      	ldr	r2, [sp, #16]
 800a186:	eba2 060a 	sub.w	r6, r2, sl
 800a18a:	2200      	movs	r2, #0
 800a18c:	e721      	b.n	8009fd2 <_dtoa_r+0x632>
 800a18e:	9e04      	ldr	r6, [sp, #16]
 800a190:	9d08      	ldr	r5, [sp, #32]
 800a192:	461c      	mov	r4, r3
 800a194:	e72a      	b.n	8009fec <_dtoa_r+0x64c>
 800a196:	9a01      	ldr	r2, [sp, #4]
 800a198:	9205      	str	r2, [sp, #20]
 800a19a:	e752      	b.n	800a042 <_dtoa_r+0x6a2>
 800a19c:	9901      	ldr	r1, [sp, #4]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	e751      	b.n	800a046 <_dtoa_r+0x6a6>
 800a1a2:	9b05      	ldr	r3, [sp, #20]
 800a1a4:	9301      	str	r3, [sp, #4]
 800a1a6:	e752      	b.n	800a04e <_dtoa_r+0x6ae>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	e77b      	b.n	800a0a4 <_dtoa_r+0x704>
 800a1ac:	9b02      	ldr	r3, [sp, #8]
 800a1ae:	e779      	b.n	800a0a4 <_dtoa_r+0x704>
 800a1b0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a1b2:	e778      	b.n	800a0a6 <_dtoa_r+0x706>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1b8:	e779      	b.n	800a0ae <_dtoa_r+0x70e>
 800a1ba:	d093      	beq.n	800a0e4 <_dtoa_r+0x744>
 800a1bc:	9b04      	ldr	r3, [sp, #16]
 800a1be:	321c      	adds	r2, #28
 800a1c0:	4413      	add	r3, r2
 800a1c2:	9304      	str	r3, [sp, #16]
 800a1c4:	9b06      	ldr	r3, [sp, #24]
 800a1c6:	4416      	add	r6, r2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	e78a      	b.n	800a0e2 <_dtoa_r+0x742>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	e7f5      	b.n	800a1bc <_dtoa_r+0x81c>
 800a1d0:	f1ba 0f00 	cmp.w	sl, #0
 800a1d4:	f8cd 8014 	str.w	r8, [sp, #20]
 800a1d8:	46d3      	mov	fp, sl
 800a1da:	dc21      	bgt.n	800a220 <_dtoa_r+0x880>
 800a1dc:	9b07      	ldr	r3, [sp, #28]
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	dd1e      	ble.n	800a220 <_dtoa_r+0x880>
 800a1e2:	f1bb 0f00 	cmp.w	fp, #0
 800a1e6:	f47f addc 	bne.w	8009da2 <_dtoa_r+0x402>
 800a1ea:	4621      	mov	r1, r4
 800a1ec:	465b      	mov	r3, fp
 800a1ee:	2205      	movs	r2, #5
 800a1f0:	4648      	mov	r0, r9
 800a1f2:	f000 fa95 	bl	800a720 <__multadd>
 800a1f6:	4601      	mov	r1, r0
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	9801      	ldr	r0, [sp, #4]
 800a1fc:	f000 fcea 	bl	800abd4 <__mcmp>
 800a200:	2800      	cmp	r0, #0
 800a202:	f77f adce 	ble.w	8009da2 <_dtoa_r+0x402>
 800a206:	463e      	mov	r6, r7
 800a208:	2331      	movs	r3, #49	@ 0x31
 800a20a:	f806 3b01 	strb.w	r3, [r6], #1
 800a20e:	9b05      	ldr	r3, [sp, #20]
 800a210:	3301      	adds	r3, #1
 800a212:	9305      	str	r3, [sp, #20]
 800a214:	e5c9      	b.n	8009daa <_dtoa_r+0x40a>
 800a216:	f8cd 8014 	str.w	r8, [sp, #20]
 800a21a:	4654      	mov	r4, sl
 800a21c:	4625      	mov	r5, r4
 800a21e:	e7f2      	b.n	800a206 <_dtoa_r+0x866>
 800a220:	9b08      	ldr	r3, [sp, #32]
 800a222:	2b00      	cmp	r3, #0
 800a224:	f000 8102 	beq.w	800a42c <_dtoa_r+0xa8c>
 800a228:	2e00      	cmp	r6, #0
 800a22a:	dd05      	ble.n	800a238 <_dtoa_r+0x898>
 800a22c:	4629      	mov	r1, r5
 800a22e:	4632      	mov	r2, r6
 800a230:	4648      	mov	r0, r9
 800a232:	f000 fc63 	bl	800aafc <__lshift>
 800a236:	4605      	mov	r5, r0
 800a238:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d058      	beq.n	800a2f0 <_dtoa_r+0x950>
 800a23e:	6869      	ldr	r1, [r5, #4]
 800a240:	4648      	mov	r0, r9
 800a242:	f000 fa0b 	bl	800a65c <_Balloc>
 800a246:	4606      	mov	r6, r0
 800a248:	b928      	cbnz	r0, 800a256 <_dtoa_r+0x8b6>
 800a24a:	4b82      	ldr	r3, [pc, #520]	@ (800a454 <_dtoa_r+0xab4>)
 800a24c:	4602      	mov	r2, r0
 800a24e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a252:	f7ff bbbe 	b.w	80099d2 <_dtoa_r+0x32>
 800a256:	692a      	ldr	r2, [r5, #16]
 800a258:	3202      	adds	r2, #2
 800a25a:	0092      	lsls	r2, r2, #2
 800a25c:	f105 010c 	add.w	r1, r5, #12
 800a260:	300c      	adds	r0, #12
 800a262:	f7ff fafe 	bl	8009862 <memcpy>
 800a266:	2201      	movs	r2, #1
 800a268:	4631      	mov	r1, r6
 800a26a:	4648      	mov	r0, r9
 800a26c:	f000 fc46 	bl	800aafc <__lshift>
 800a270:	1c7b      	adds	r3, r7, #1
 800a272:	9304      	str	r3, [sp, #16]
 800a274:	eb07 030b 	add.w	r3, r7, fp
 800a278:	9309      	str	r3, [sp, #36]	@ 0x24
 800a27a:	9b02      	ldr	r3, [sp, #8]
 800a27c:	f003 0301 	and.w	r3, r3, #1
 800a280:	46a8      	mov	r8, r5
 800a282:	9308      	str	r3, [sp, #32]
 800a284:	4605      	mov	r5, r0
 800a286:	9b04      	ldr	r3, [sp, #16]
 800a288:	9801      	ldr	r0, [sp, #4]
 800a28a:	4621      	mov	r1, r4
 800a28c:	f103 3bff 	add.w	fp, r3, #4294967295
 800a290:	f7ff fafc 	bl	800988c <quorem>
 800a294:	4641      	mov	r1, r8
 800a296:	9002      	str	r0, [sp, #8]
 800a298:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a29c:	9801      	ldr	r0, [sp, #4]
 800a29e:	f000 fc99 	bl	800abd4 <__mcmp>
 800a2a2:	462a      	mov	r2, r5
 800a2a4:	9006      	str	r0, [sp, #24]
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4648      	mov	r0, r9
 800a2aa:	f000 fcaf 	bl	800ac0c <__mdiff>
 800a2ae:	68c2      	ldr	r2, [r0, #12]
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	b9fa      	cbnz	r2, 800a2f4 <_dtoa_r+0x954>
 800a2b4:	4601      	mov	r1, r0
 800a2b6:	9801      	ldr	r0, [sp, #4]
 800a2b8:	f000 fc8c 	bl	800abd4 <__mcmp>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	4631      	mov	r1, r6
 800a2c0:	4648      	mov	r0, r9
 800a2c2:	920a      	str	r2, [sp, #40]	@ 0x28
 800a2c4:	f000 fa0a 	bl	800a6dc <_Bfree>
 800a2c8:	9b07      	ldr	r3, [sp, #28]
 800a2ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2cc:	9e04      	ldr	r6, [sp, #16]
 800a2ce:	ea42 0103 	orr.w	r1, r2, r3
 800a2d2:	9b08      	ldr	r3, [sp, #32]
 800a2d4:	4319      	orrs	r1, r3
 800a2d6:	d10f      	bne.n	800a2f8 <_dtoa_r+0x958>
 800a2d8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a2dc:	d028      	beq.n	800a330 <_dtoa_r+0x990>
 800a2de:	9b06      	ldr	r3, [sp, #24]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	dd02      	ble.n	800a2ea <_dtoa_r+0x94a>
 800a2e4:	9b02      	ldr	r3, [sp, #8]
 800a2e6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a2ea:	f88b a000 	strb.w	sl, [fp]
 800a2ee:	e55e      	b.n	8009dae <_dtoa_r+0x40e>
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	e7bd      	b.n	800a270 <_dtoa_r+0x8d0>
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	e7e2      	b.n	800a2be <_dtoa_r+0x91e>
 800a2f8:	9b06      	ldr	r3, [sp, #24]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	db04      	blt.n	800a308 <_dtoa_r+0x968>
 800a2fe:	9907      	ldr	r1, [sp, #28]
 800a300:	430b      	orrs	r3, r1
 800a302:	9908      	ldr	r1, [sp, #32]
 800a304:	430b      	orrs	r3, r1
 800a306:	d120      	bne.n	800a34a <_dtoa_r+0x9aa>
 800a308:	2a00      	cmp	r2, #0
 800a30a:	ddee      	ble.n	800a2ea <_dtoa_r+0x94a>
 800a30c:	9901      	ldr	r1, [sp, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	4648      	mov	r0, r9
 800a312:	f000 fbf3 	bl	800aafc <__lshift>
 800a316:	4621      	mov	r1, r4
 800a318:	9001      	str	r0, [sp, #4]
 800a31a:	f000 fc5b 	bl	800abd4 <__mcmp>
 800a31e:	2800      	cmp	r0, #0
 800a320:	dc03      	bgt.n	800a32a <_dtoa_r+0x98a>
 800a322:	d1e2      	bne.n	800a2ea <_dtoa_r+0x94a>
 800a324:	f01a 0f01 	tst.w	sl, #1
 800a328:	d0df      	beq.n	800a2ea <_dtoa_r+0x94a>
 800a32a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a32e:	d1d9      	bne.n	800a2e4 <_dtoa_r+0x944>
 800a330:	2339      	movs	r3, #57	@ 0x39
 800a332:	f88b 3000 	strb.w	r3, [fp]
 800a336:	4633      	mov	r3, r6
 800a338:	461e      	mov	r6, r3
 800a33a:	3b01      	subs	r3, #1
 800a33c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a340:	2a39      	cmp	r2, #57	@ 0x39
 800a342:	d052      	beq.n	800a3ea <_dtoa_r+0xa4a>
 800a344:	3201      	adds	r2, #1
 800a346:	701a      	strb	r2, [r3, #0]
 800a348:	e531      	b.n	8009dae <_dtoa_r+0x40e>
 800a34a:	2a00      	cmp	r2, #0
 800a34c:	dd07      	ble.n	800a35e <_dtoa_r+0x9be>
 800a34e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a352:	d0ed      	beq.n	800a330 <_dtoa_r+0x990>
 800a354:	f10a 0301 	add.w	r3, sl, #1
 800a358:	f88b 3000 	strb.w	r3, [fp]
 800a35c:	e527      	b.n	8009dae <_dtoa_r+0x40e>
 800a35e:	9b04      	ldr	r3, [sp, #16]
 800a360:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a362:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a366:	4293      	cmp	r3, r2
 800a368:	d029      	beq.n	800a3be <_dtoa_r+0xa1e>
 800a36a:	9901      	ldr	r1, [sp, #4]
 800a36c:	2300      	movs	r3, #0
 800a36e:	220a      	movs	r2, #10
 800a370:	4648      	mov	r0, r9
 800a372:	f000 f9d5 	bl	800a720 <__multadd>
 800a376:	45a8      	cmp	r8, r5
 800a378:	9001      	str	r0, [sp, #4]
 800a37a:	f04f 0300 	mov.w	r3, #0
 800a37e:	f04f 020a 	mov.w	r2, #10
 800a382:	4641      	mov	r1, r8
 800a384:	4648      	mov	r0, r9
 800a386:	d107      	bne.n	800a398 <_dtoa_r+0x9f8>
 800a388:	f000 f9ca 	bl	800a720 <__multadd>
 800a38c:	4680      	mov	r8, r0
 800a38e:	4605      	mov	r5, r0
 800a390:	9b04      	ldr	r3, [sp, #16]
 800a392:	3301      	adds	r3, #1
 800a394:	9304      	str	r3, [sp, #16]
 800a396:	e776      	b.n	800a286 <_dtoa_r+0x8e6>
 800a398:	f000 f9c2 	bl	800a720 <__multadd>
 800a39c:	4629      	mov	r1, r5
 800a39e:	4680      	mov	r8, r0
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	220a      	movs	r2, #10
 800a3a4:	4648      	mov	r0, r9
 800a3a6:	f000 f9bb 	bl	800a720 <__multadd>
 800a3aa:	4605      	mov	r5, r0
 800a3ac:	e7f0      	b.n	800a390 <_dtoa_r+0x9f0>
 800a3ae:	f1bb 0f00 	cmp.w	fp, #0
 800a3b2:	bfcc      	ite	gt
 800a3b4:	465e      	movgt	r6, fp
 800a3b6:	2601      	movle	r6, #1
 800a3b8:	443e      	add	r6, r7
 800a3ba:	f04f 0800 	mov.w	r8, #0
 800a3be:	9901      	ldr	r1, [sp, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	4648      	mov	r0, r9
 800a3c4:	f000 fb9a 	bl	800aafc <__lshift>
 800a3c8:	4621      	mov	r1, r4
 800a3ca:	9001      	str	r0, [sp, #4]
 800a3cc:	f000 fc02 	bl	800abd4 <__mcmp>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	dcb0      	bgt.n	800a336 <_dtoa_r+0x996>
 800a3d4:	d102      	bne.n	800a3dc <_dtoa_r+0xa3c>
 800a3d6:	f01a 0f01 	tst.w	sl, #1
 800a3da:	d1ac      	bne.n	800a336 <_dtoa_r+0x996>
 800a3dc:	4633      	mov	r3, r6
 800a3de:	461e      	mov	r6, r3
 800a3e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3e4:	2a30      	cmp	r2, #48	@ 0x30
 800a3e6:	d0fa      	beq.n	800a3de <_dtoa_r+0xa3e>
 800a3e8:	e4e1      	b.n	8009dae <_dtoa_r+0x40e>
 800a3ea:	429f      	cmp	r7, r3
 800a3ec:	d1a4      	bne.n	800a338 <_dtoa_r+0x998>
 800a3ee:	9b05      	ldr	r3, [sp, #20]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	9305      	str	r3, [sp, #20]
 800a3f4:	2331      	movs	r3, #49	@ 0x31
 800a3f6:	703b      	strb	r3, [r7, #0]
 800a3f8:	e4d9      	b.n	8009dae <_dtoa_r+0x40e>
 800a3fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a3fc:	4f16      	ldr	r7, [pc, #88]	@ (800a458 <_dtoa_r+0xab8>)
 800a3fe:	b11b      	cbz	r3, 800a408 <_dtoa_r+0xa68>
 800a400:	f107 0308 	add.w	r3, r7, #8
 800a404:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a406:	6013      	str	r3, [r2, #0]
 800a408:	4638      	mov	r0, r7
 800a40a:	b011      	add	sp, #68	@ 0x44
 800a40c:	ecbd 8b02 	vpop	{d8}
 800a410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a414:	9b07      	ldr	r3, [sp, #28]
 800a416:	2b01      	cmp	r3, #1
 800a418:	f77f ae2c 	ble.w	800a074 <_dtoa_r+0x6d4>
 800a41c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a41e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a420:	2001      	movs	r0, #1
 800a422:	e64c      	b.n	800a0be <_dtoa_r+0x71e>
 800a424:	f1bb 0f00 	cmp.w	fp, #0
 800a428:	f77f aed8 	ble.w	800a1dc <_dtoa_r+0x83c>
 800a42c:	463e      	mov	r6, r7
 800a42e:	9801      	ldr	r0, [sp, #4]
 800a430:	4621      	mov	r1, r4
 800a432:	f7ff fa2b 	bl	800988c <quorem>
 800a436:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a43a:	f806 ab01 	strb.w	sl, [r6], #1
 800a43e:	1bf2      	subs	r2, r6, r7
 800a440:	4593      	cmp	fp, r2
 800a442:	ddb4      	ble.n	800a3ae <_dtoa_r+0xa0e>
 800a444:	9901      	ldr	r1, [sp, #4]
 800a446:	2300      	movs	r3, #0
 800a448:	220a      	movs	r2, #10
 800a44a:	4648      	mov	r0, r9
 800a44c:	f000 f968 	bl	800a720 <__multadd>
 800a450:	9001      	str	r0, [sp, #4]
 800a452:	e7ec      	b.n	800a42e <_dtoa_r+0xa8e>
 800a454:	0800cef5 	.word	0x0800cef5
 800a458:	0800ce79 	.word	0x0800ce79

0800a45c <_free_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4605      	mov	r5, r0
 800a460:	2900      	cmp	r1, #0
 800a462:	d041      	beq.n	800a4e8 <_free_r+0x8c>
 800a464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a468:	1f0c      	subs	r4, r1, #4
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	bfb8      	it	lt
 800a46e:	18e4      	addlt	r4, r4, r3
 800a470:	f000 f8e8 	bl	800a644 <__malloc_lock>
 800a474:	4a1d      	ldr	r2, [pc, #116]	@ (800a4ec <_free_r+0x90>)
 800a476:	6813      	ldr	r3, [r2, #0]
 800a478:	b933      	cbnz	r3, 800a488 <_free_r+0x2c>
 800a47a:	6063      	str	r3, [r4, #4]
 800a47c:	6014      	str	r4, [r2, #0]
 800a47e:	4628      	mov	r0, r5
 800a480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a484:	f000 b8e4 	b.w	800a650 <__malloc_unlock>
 800a488:	42a3      	cmp	r3, r4
 800a48a:	d908      	bls.n	800a49e <_free_r+0x42>
 800a48c:	6820      	ldr	r0, [r4, #0]
 800a48e:	1821      	adds	r1, r4, r0
 800a490:	428b      	cmp	r3, r1
 800a492:	bf01      	itttt	eq
 800a494:	6819      	ldreq	r1, [r3, #0]
 800a496:	685b      	ldreq	r3, [r3, #4]
 800a498:	1809      	addeq	r1, r1, r0
 800a49a:	6021      	streq	r1, [r4, #0]
 800a49c:	e7ed      	b.n	800a47a <_free_r+0x1e>
 800a49e:	461a      	mov	r2, r3
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	b10b      	cbz	r3, 800a4a8 <_free_r+0x4c>
 800a4a4:	42a3      	cmp	r3, r4
 800a4a6:	d9fa      	bls.n	800a49e <_free_r+0x42>
 800a4a8:	6811      	ldr	r1, [r2, #0]
 800a4aa:	1850      	adds	r0, r2, r1
 800a4ac:	42a0      	cmp	r0, r4
 800a4ae:	d10b      	bne.n	800a4c8 <_free_r+0x6c>
 800a4b0:	6820      	ldr	r0, [r4, #0]
 800a4b2:	4401      	add	r1, r0
 800a4b4:	1850      	adds	r0, r2, r1
 800a4b6:	4283      	cmp	r3, r0
 800a4b8:	6011      	str	r1, [r2, #0]
 800a4ba:	d1e0      	bne.n	800a47e <_free_r+0x22>
 800a4bc:	6818      	ldr	r0, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	6053      	str	r3, [r2, #4]
 800a4c2:	4408      	add	r0, r1
 800a4c4:	6010      	str	r0, [r2, #0]
 800a4c6:	e7da      	b.n	800a47e <_free_r+0x22>
 800a4c8:	d902      	bls.n	800a4d0 <_free_r+0x74>
 800a4ca:	230c      	movs	r3, #12
 800a4cc:	602b      	str	r3, [r5, #0]
 800a4ce:	e7d6      	b.n	800a47e <_free_r+0x22>
 800a4d0:	6820      	ldr	r0, [r4, #0]
 800a4d2:	1821      	adds	r1, r4, r0
 800a4d4:	428b      	cmp	r3, r1
 800a4d6:	bf04      	itt	eq
 800a4d8:	6819      	ldreq	r1, [r3, #0]
 800a4da:	685b      	ldreq	r3, [r3, #4]
 800a4dc:	6063      	str	r3, [r4, #4]
 800a4de:	bf04      	itt	eq
 800a4e0:	1809      	addeq	r1, r1, r0
 800a4e2:	6021      	streq	r1, [r4, #0]
 800a4e4:	6054      	str	r4, [r2, #4]
 800a4e6:	e7ca      	b.n	800a47e <_free_r+0x22>
 800a4e8:	bd38      	pop	{r3, r4, r5, pc}
 800a4ea:	bf00      	nop
 800a4ec:	24004d64 	.word	0x24004d64

0800a4f0 <malloc>:
 800a4f0:	4b02      	ldr	r3, [pc, #8]	@ (800a4fc <malloc+0xc>)
 800a4f2:	4601      	mov	r1, r0
 800a4f4:	6818      	ldr	r0, [r3, #0]
 800a4f6:	f000 b825 	b.w	800a544 <_malloc_r>
 800a4fa:	bf00      	nop
 800a4fc:	2400003c 	.word	0x2400003c

0800a500 <sbrk_aligned>:
 800a500:	b570      	push	{r4, r5, r6, lr}
 800a502:	4e0f      	ldr	r6, [pc, #60]	@ (800a540 <sbrk_aligned+0x40>)
 800a504:	460c      	mov	r4, r1
 800a506:	6831      	ldr	r1, [r6, #0]
 800a508:	4605      	mov	r5, r0
 800a50a:	b911      	cbnz	r1, 800a512 <sbrk_aligned+0x12>
 800a50c:	f001 ff8a 	bl	800c424 <_sbrk_r>
 800a510:	6030      	str	r0, [r6, #0]
 800a512:	4621      	mov	r1, r4
 800a514:	4628      	mov	r0, r5
 800a516:	f001 ff85 	bl	800c424 <_sbrk_r>
 800a51a:	1c43      	adds	r3, r0, #1
 800a51c:	d103      	bne.n	800a526 <sbrk_aligned+0x26>
 800a51e:	f04f 34ff 	mov.w	r4, #4294967295
 800a522:	4620      	mov	r0, r4
 800a524:	bd70      	pop	{r4, r5, r6, pc}
 800a526:	1cc4      	adds	r4, r0, #3
 800a528:	f024 0403 	bic.w	r4, r4, #3
 800a52c:	42a0      	cmp	r0, r4
 800a52e:	d0f8      	beq.n	800a522 <sbrk_aligned+0x22>
 800a530:	1a21      	subs	r1, r4, r0
 800a532:	4628      	mov	r0, r5
 800a534:	f001 ff76 	bl	800c424 <_sbrk_r>
 800a538:	3001      	adds	r0, #1
 800a53a:	d1f2      	bne.n	800a522 <sbrk_aligned+0x22>
 800a53c:	e7ef      	b.n	800a51e <sbrk_aligned+0x1e>
 800a53e:	bf00      	nop
 800a540:	24004d60 	.word	0x24004d60

0800a544 <_malloc_r>:
 800a544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a548:	1ccd      	adds	r5, r1, #3
 800a54a:	f025 0503 	bic.w	r5, r5, #3
 800a54e:	3508      	adds	r5, #8
 800a550:	2d0c      	cmp	r5, #12
 800a552:	bf38      	it	cc
 800a554:	250c      	movcc	r5, #12
 800a556:	2d00      	cmp	r5, #0
 800a558:	4606      	mov	r6, r0
 800a55a:	db01      	blt.n	800a560 <_malloc_r+0x1c>
 800a55c:	42a9      	cmp	r1, r5
 800a55e:	d904      	bls.n	800a56a <_malloc_r+0x26>
 800a560:	230c      	movs	r3, #12
 800a562:	6033      	str	r3, [r6, #0]
 800a564:	2000      	movs	r0, #0
 800a566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a56a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a640 <_malloc_r+0xfc>
 800a56e:	f000 f869 	bl	800a644 <__malloc_lock>
 800a572:	f8d8 3000 	ldr.w	r3, [r8]
 800a576:	461c      	mov	r4, r3
 800a578:	bb44      	cbnz	r4, 800a5cc <_malloc_r+0x88>
 800a57a:	4629      	mov	r1, r5
 800a57c:	4630      	mov	r0, r6
 800a57e:	f7ff ffbf 	bl	800a500 <sbrk_aligned>
 800a582:	1c43      	adds	r3, r0, #1
 800a584:	4604      	mov	r4, r0
 800a586:	d158      	bne.n	800a63a <_malloc_r+0xf6>
 800a588:	f8d8 4000 	ldr.w	r4, [r8]
 800a58c:	4627      	mov	r7, r4
 800a58e:	2f00      	cmp	r7, #0
 800a590:	d143      	bne.n	800a61a <_malloc_r+0xd6>
 800a592:	2c00      	cmp	r4, #0
 800a594:	d04b      	beq.n	800a62e <_malloc_r+0xea>
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	4639      	mov	r1, r7
 800a59a:	4630      	mov	r0, r6
 800a59c:	eb04 0903 	add.w	r9, r4, r3
 800a5a0:	f001 ff40 	bl	800c424 <_sbrk_r>
 800a5a4:	4581      	cmp	r9, r0
 800a5a6:	d142      	bne.n	800a62e <_malloc_r+0xea>
 800a5a8:	6821      	ldr	r1, [r4, #0]
 800a5aa:	1a6d      	subs	r5, r5, r1
 800a5ac:	4629      	mov	r1, r5
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	f7ff ffa6 	bl	800a500 <sbrk_aligned>
 800a5b4:	3001      	adds	r0, #1
 800a5b6:	d03a      	beq.n	800a62e <_malloc_r+0xea>
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	442b      	add	r3, r5
 800a5bc:	6023      	str	r3, [r4, #0]
 800a5be:	f8d8 3000 	ldr.w	r3, [r8]
 800a5c2:	685a      	ldr	r2, [r3, #4]
 800a5c4:	bb62      	cbnz	r2, 800a620 <_malloc_r+0xdc>
 800a5c6:	f8c8 7000 	str.w	r7, [r8]
 800a5ca:	e00f      	b.n	800a5ec <_malloc_r+0xa8>
 800a5cc:	6822      	ldr	r2, [r4, #0]
 800a5ce:	1b52      	subs	r2, r2, r5
 800a5d0:	d420      	bmi.n	800a614 <_malloc_r+0xd0>
 800a5d2:	2a0b      	cmp	r2, #11
 800a5d4:	d917      	bls.n	800a606 <_malloc_r+0xc2>
 800a5d6:	1961      	adds	r1, r4, r5
 800a5d8:	42a3      	cmp	r3, r4
 800a5da:	6025      	str	r5, [r4, #0]
 800a5dc:	bf18      	it	ne
 800a5de:	6059      	strne	r1, [r3, #4]
 800a5e0:	6863      	ldr	r3, [r4, #4]
 800a5e2:	bf08      	it	eq
 800a5e4:	f8c8 1000 	streq.w	r1, [r8]
 800a5e8:	5162      	str	r2, [r4, r5]
 800a5ea:	604b      	str	r3, [r1, #4]
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f000 f82f 	bl	800a650 <__malloc_unlock>
 800a5f2:	f104 000b 	add.w	r0, r4, #11
 800a5f6:	1d23      	adds	r3, r4, #4
 800a5f8:	f020 0007 	bic.w	r0, r0, #7
 800a5fc:	1ac2      	subs	r2, r0, r3
 800a5fe:	bf1c      	itt	ne
 800a600:	1a1b      	subne	r3, r3, r0
 800a602:	50a3      	strne	r3, [r4, r2]
 800a604:	e7af      	b.n	800a566 <_malloc_r+0x22>
 800a606:	6862      	ldr	r2, [r4, #4]
 800a608:	42a3      	cmp	r3, r4
 800a60a:	bf0c      	ite	eq
 800a60c:	f8c8 2000 	streq.w	r2, [r8]
 800a610:	605a      	strne	r2, [r3, #4]
 800a612:	e7eb      	b.n	800a5ec <_malloc_r+0xa8>
 800a614:	4623      	mov	r3, r4
 800a616:	6864      	ldr	r4, [r4, #4]
 800a618:	e7ae      	b.n	800a578 <_malloc_r+0x34>
 800a61a:	463c      	mov	r4, r7
 800a61c:	687f      	ldr	r7, [r7, #4]
 800a61e:	e7b6      	b.n	800a58e <_malloc_r+0x4a>
 800a620:	461a      	mov	r2, r3
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	42a3      	cmp	r3, r4
 800a626:	d1fb      	bne.n	800a620 <_malloc_r+0xdc>
 800a628:	2300      	movs	r3, #0
 800a62a:	6053      	str	r3, [r2, #4]
 800a62c:	e7de      	b.n	800a5ec <_malloc_r+0xa8>
 800a62e:	230c      	movs	r3, #12
 800a630:	6033      	str	r3, [r6, #0]
 800a632:	4630      	mov	r0, r6
 800a634:	f000 f80c 	bl	800a650 <__malloc_unlock>
 800a638:	e794      	b.n	800a564 <_malloc_r+0x20>
 800a63a:	6005      	str	r5, [r0, #0]
 800a63c:	e7d6      	b.n	800a5ec <_malloc_r+0xa8>
 800a63e:	bf00      	nop
 800a640:	24004d64 	.word	0x24004d64

0800a644 <__malloc_lock>:
 800a644:	4801      	ldr	r0, [pc, #4]	@ (800a64c <__malloc_lock+0x8>)
 800a646:	f7ff b90a 	b.w	800985e <__retarget_lock_acquire_recursive>
 800a64a:	bf00      	nop
 800a64c:	24004d5c 	.word	0x24004d5c

0800a650 <__malloc_unlock>:
 800a650:	4801      	ldr	r0, [pc, #4]	@ (800a658 <__malloc_unlock+0x8>)
 800a652:	f7ff b905 	b.w	8009860 <__retarget_lock_release_recursive>
 800a656:	bf00      	nop
 800a658:	24004d5c 	.word	0x24004d5c

0800a65c <_Balloc>:
 800a65c:	b570      	push	{r4, r5, r6, lr}
 800a65e:	69c6      	ldr	r6, [r0, #28]
 800a660:	4604      	mov	r4, r0
 800a662:	460d      	mov	r5, r1
 800a664:	b976      	cbnz	r6, 800a684 <_Balloc+0x28>
 800a666:	2010      	movs	r0, #16
 800a668:	f7ff ff42 	bl	800a4f0 <malloc>
 800a66c:	4602      	mov	r2, r0
 800a66e:	61e0      	str	r0, [r4, #28]
 800a670:	b920      	cbnz	r0, 800a67c <_Balloc+0x20>
 800a672:	4b18      	ldr	r3, [pc, #96]	@ (800a6d4 <_Balloc+0x78>)
 800a674:	4818      	ldr	r0, [pc, #96]	@ (800a6d8 <_Balloc+0x7c>)
 800a676:	216b      	movs	r1, #107	@ 0x6b
 800a678:	f001 feee 	bl	800c458 <__assert_func>
 800a67c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a680:	6006      	str	r6, [r0, #0]
 800a682:	60c6      	str	r6, [r0, #12]
 800a684:	69e6      	ldr	r6, [r4, #28]
 800a686:	68f3      	ldr	r3, [r6, #12]
 800a688:	b183      	cbz	r3, 800a6ac <_Balloc+0x50>
 800a68a:	69e3      	ldr	r3, [r4, #28]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a692:	b9b8      	cbnz	r0, 800a6c4 <_Balloc+0x68>
 800a694:	2101      	movs	r1, #1
 800a696:	fa01 f605 	lsl.w	r6, r1, r5
 800a69a:	1d72      	adds	r2, r6, #5
 800a69c:	0092      	lsls	r2, r2, #2
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f001 fef8 	bl	800c494 <_calloc_r>
 800a6a4:	b160      	cbz	r0, 800a6c0 <_Balloc+0x64>
 800a6a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a6aa:	e00e      	b.n	800a6ca <_Balloc+0x6e>
 800a6ac:	2221      	movs	r2, #33	@ 0x21
 800a6ae:	2104      	movs	r1, #4
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f001 feef 	bl	800c494 <_calloc_r>
 800a6b6:	69e3      	ldr	r3, [r4, #28]
 800a6b8:	60f0      	str	r0, [r6, #12]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1e4      	bne.n	800a68a <_Balloc+0x2e>
 800a6c0:	2000      	movs	r0, #0
 800a6c2:	bd70      	pop	{r4, r5, r6, pc}
 800a6c4:	6802      	ldr	r2, [r0, #0]
 800a6c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a6d0:	e7f7      	b.n	800a6c2 <_Balloc+0x66>
 800a6d2:	bf00      	nop
 800a6d4:	0800ce86 	.word	0x0800ce86
 800a6d8:	0800cf06 	.word	0x0800cf06

0800a6dc <_Bfree>:
 800a6dc:	b570      	push	{r4, r5, r6, lr}
 800a6de:	69c6      	ldr	r6, [r0, #28]
 800a6e0:	4605      	mov	r5, r0
 800a6e2:	460c      	mov	r4, r1
 800a6e4:	b976      	cbnz	r6, 800a704 <_Bfree+0x28>
 800a6e6:	2010      	movs	r0, #16
 800a6e8:	f7ff ff02 	bl	800a4f0 <malloc>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	61e8      	str	r0, [r5, #28]
 800a6f0:	b920      	cbnz	r0, 800a6fc <_Bfree+0x20>
 800a6f2:	4b09      	ldr	r3, [pc, #36]	@ (800a718 <_Bfree+0x3c>)
 800a6f4:	4809      	ldr	r0, [pc, #36]	@ (800a71c <_Bfree+0x40>)
 800a6f6:	218f      	movs	r1, #143	@ 0x8f
 800a6f8:	f001 feae 	bl	800c458 <__assert_func>
 800a6fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a700:	6006      	str	r6, [r0, #0]
 800a702:	60c6      	str	r6, [r0, #12]
 800a704:	b13c      	cbz	r4, 800a716 <_Bfree+0x3a>
 800a706:	69eb      	ldr	r3, [r5, #28]
 800a708:	6862      	ldr	r2, [r4, #4]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a710:	6021      	str	r1, [r4, #0]
 800a712:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a716:	bd70      	pop	{r4, r5, r6, pc}
 800a718:	0800ce86 	.word	0x0800ce86
 800a71c:	0800cf06 	.word	0x0800cf06

0800a720 <__multadd>:
 800a720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a724:	690d      	ldr	r5, [r1, #16]
 800a726:	4607      	mov	r7, r0
 800a728:	460c      	mov	r4, r1
 800a72a:	461e      	mov	r6, r3
 800a72c:	f101 0c14 	add.w	ip, r1, #20
 800a730:	2000      	movs	r0, #0
 800a732:	f8dc 3000 	ldr.w	r3, [ip]
 800a736:	b299      	uxth	r1, r3
 800a738:	fb02 6101 	mla	r1, r2, r1, r6
 800a73c:	0c1e      	lsrs	r6, r3, #16
 800a73e:	0c0b      	lsrs	r3, r1, #16
 800a740:	fb02 3306 	mla	r3, r2, r6, r3
 800a744:	b289      	uxth	r1, r1
 800a746:	3001      	adds	r0, #1
 800a748:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a74c:	4285      	cmp	r5, r0
 800a74e:	f84c 1b04 	str.w	r1, [ip], #4
 800a752:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a756:	dcec      	bgt.n	800a732 <__multadd+0x12>
 800a758:	b30e      	cbz	r6, 800a79e <__multadd+0x7e>
 800a75a:	68a3      	ldr	r3, [r4, #8]
 800a75c:	42ab      	cmp	r3, r5
 800a75e:	dc19      	bgt.n	800a794 <__multadd+0x74>
 800a760:	6861      	ldr	r1, [r4, #4]
 800a762:	4638      	mov	r0, r7
 800a764:	3101      	adds	r1, #1
 800a766:	f7ff ff79 	bl	800a65c <_Balloc>
 800a76a:	4680      	mov	r8, r0
 800a76c:	b928      	cbnz	r0, 800a77a <__multadd+0x5a>
 800a76e:	4602      	mov	r2, r0
 800a770:	4b0c      	ldr	r3, [pc, #48]	@ (800a7a4 <__multadd+0x84>)
 800a772:	480d      	ldr	r0, [pc, #52]	@ (800a7a8 <__multadd+0x88>)
 800a774:	21ba      	movs	r1, #186	@ 0xba
 800a776:	f001 fe6f 	bl	800c458 <__assert_func>
 800a77a:	6922      	ldr	r2, [r4, #16]
 800a77c:	3202      	adds	r2, #2
 800a77e:	f104 010c 	add.w	r1, r4, #12
 800a782:	0092      	lsls	r2, r2, #2
 800a784:	300c      	adds	r0, #12
 800a786:	f7ff f86c 	bl	8009862 <memcpy>
 800a78a:	4621      	mov	r1, r4
 800a78c:	4638      	mov	r0, r7
 800a78e:	f7ff ffa5 	bl	800a6dc <_Bfree>
 800a792:	4644      	mov	r4, r8
 800a794:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a798:	3501      	adds	r5, #1
 800a79a:	615e      	str	r6, [r3, #20]
 800a79c:	6125      	str	r5, [r4, #16]
 800a79e:	4620      	mov	r0, r4
 800a7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a4:	0800cef5 	.word	0x0800cef5
 800a7a8:	0800cf06 	.word	0x0800cf06

0800a7ac <__s2b>:
 800a7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7b0:	460c      	mov	r4, r1
 800a7b2:	4615      	mov	r5, r2
 800a7b4:	461f      	mov	r7, r3
 800a7b6:	2209      	movs	r2, #9
 800a7b8:	3308      	adds	r3, #8
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	db09      	blt.n	800a7dc <__s2b+0x30>
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	f7ff ff47 	bl	800a65c <_Balloc>
 800a7ce:	b940      	cbnz	r0, 800a7e2 <__s2b+0x36>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	4b19      	ldr	r3, [pc, #100]	@ (800a838 <__s2b+0x8c>)
 800a7d4:	4819      	ldr	r0, [pc, #100]	@ (800a83c <__s2b+0x90>)
 800a7d6:	21d3      	movs	r1, #211	@ 0xd3
 800a7d8:	f001 fe3e 	bl	800c458 <__assert_func>
 800a7dc:	0052      	lsls	r2, r2, #1
 800a7de:	3101      	adds	r1, #1
 800a7e0:	e7f0      	b.n	800a7c4 <__s2b+0x18>
 800a7e2:	9b08      	ldr	r3, [sp, #32]
 800a7e4:	6143      	str	r3, [r0, #20]
 800a7e6:	2d09      	cmp	r5, #9
 800a7e8:	f04f 0301 	mov.w	r3, #1
 800a7ec:	6103      	str	r3, [r0, #16]
 800a7ee:	dd16      	ble.n	800a81e <__s2b+0x72>
 800a7f0:	f104 0909 	add.w	r9, r4, #9
 800a7f4:	46c8      	mov	r8, r9
 800a7f6:	442c      	add	r4, r5
 800a7f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a7fc:	4601      	mov	r1, r0
 800a7fe:	3b30      	subs	r3, #48	@ 0x30
 800a800:	220a      	movs	r2, #10
 800a802:	4630      	mov	r0, r6
 800a804:	f7ff ff8c 	bl	800a720 <__multadd>
 800a808:	45a0      	cmp	r8, r4
 800a80a:	d1f5      	bne.n	800a7f8 <__s2b+0x4c>
 800a80c:	f1a5 0408 	sub.w	r4, r5, #8
 800a810:	444c      	add	r4, r9
 800a812:	1b2d      	subs	r5, r5, r4
 800a814:	1963      	adds	r3, r4, r5
 800a816:	42bb      	cmp	r3, r7
 800a818:	db04      	blt.n	800a824 <__s2b+0x78>
 800a81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a81e:	340a      	adds	r4, #10
 800a820:	2509      	movs	r5, #9
 800a822:	e7f6      	b.n	800a812 <__s2b+0x66>
 800a824:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a828:	4601      	mov	r1, r0
 800a82a:	3b30      	subs	r3, #48	@ 0x30
 800a82c:	220a      	movs	r2, #10
 800a82e:	4630      	mov	r0, r6
 800a830:	f7ff ff76 	bl	800a720 <__multadd>
 800a834:	e7ee      	b.n	800a814 <__s2b+0x68>
 800a836:	bf00      	nop
 800a838:	0800cef5 	.word	0x0800cef5
 800a83c:	0800cf06 	.word	0x0800cf06

0800a840 <__hi0bits>:
 800a840:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a844:	4603      	mov	r3, r0
 800a846:	bf36      	itet	cc
 800a848:	0403      	lslcc	r3, r0, #16
 800a84a:	2000      	movcs	r0, #0
 800a84c:	2010      	movcc	r0, #16
 800a84e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a852:	bf3c      	itt	cc
 800a854:	021b      	lslcc	r3, r3, #8
 800a856:	3008      	addcc	r0, #8
 800a858:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a85c:	bf3c      	itt	cc
 800a85e:	011b      	lslcc	r3, r3, #4
 800a860:	3004      	addcc	r0, #4
 800a862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a866:	bf3c      	itt	cc
 800a868:	009b      	lslcc	r3, r3, #2
 800a86a:	3002      	addcc	r0, #2
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	db05      	blt.n	800a87c <__hi0bits+0x3c>
 800a870:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a874:	f100 0001 	add.w	r0, r0, #1
 800a878:	bf08      	it	eq
 800a87a:	2020      	moveq	r0, #32
 800a87c:	4770      	bx	lr

0800a87e <__lo0bits>:
 800a87e:	6803      	ldr	r3, [r0, #0]
 800a880:	4602      	mov	r2, r0
 800a882:	f013 0007 	ands.w	r0, r3, #7
 800a886:	d00b      	beq.n	800a8a0 <__lo0bits+0x22>
 800a888:	07d9      	lsls	r1, r3, #31
 800a88a:	d421      	bmi.n	800a8d0 <__lo0bits+0x52>
 800a88c:	0798      	lsls	r0, r3, #30
 800a88e:	bf49      	itett	mi
 800a890:	085b      	lsrmi	r3, r3, #1
 800a892:	089b      	lsrpl	r3, r3, #2
 800a894:	2001      	movmi	r0, #1
 800a896:	6013      	strmi	r3, [r2, #0]
 800a898:	bf5c      	itt	pl
 800a89a:	6013      	strpl	r3, [r2, #0]
 800a89c:	2002      	movpl	r0, #2
 800a89e:	4770      	bx	lr
 800a8a0:	b299      	uxth	r1, r3
 800a8a2:	b909      	cbnz	r1, 800a8a8 <__lo0bits+0x2a>
 800a8a4:	0c1b      	lsrs	r3, r3, #16
 800a8a6:	2010      	movs	r0, #16
 800a8a8:	b2d9      	uxtb	r1, r3
 800a8aa:	b909      	cbnz	r1, 800a8b0 <__lo0bits+0x32>
 800a8ac:	3008      	adds	r0, #8
 800a8ae:	0a1b      	lsrs	r3, r3, #8
 800a8b0:	0719      	lsls	r1, r3, #28
 800a8b2:	bf04      	itt	eq
 800a8b4:	091b      	lsreq	r3, r3, #4
 800a8b6:	3004      	addeq	r0, #4
 800a8b8:	0799      	lsls	r1, r3, #30
 800a8ba:	bf04      	itt	eq
 800a8bc:	089b      	lsreq	r3, r3, #2
 800a8be:	3002      	addeq	r0, #2
 800a8c0:	07d9      	lsls	r1, r3, #31
 800a8c2:	d403      	bmi.n	800a8cc <__lo0bits+0x4e>
 800a8c4:	085b      	lsrs	r3, r3, #1
 800a8c6:	f100 0001 	add.w	r0, r0, #1
 800a8ca:	d003      	beq.n	800a8d4 <__lo0bits+0x56>
 800a8cc:	6013      	str	r3, [r2, #0]
 800a8ce:	4770      	bx	lr
 800a8d0:	2000      	movs	r0, #0
 800a8d2:	4770      	bx	lr
 800a8d4:	2020      	movs	r0, #32
 800a8d6:	4770      	bx	lr

0800a8d8 <__i2b>:
 800a8d8:	b510      	push	{r4, lr}
 800a8da:	460c      	mov	r4, r1
 800a8dc:	2101      	movs	r1, #1
 800a8de:	f7ff febd 	bl	800a65c <_Balloc>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	b928      	cbnz	r0, 800a8f2 <__i2b+0x1a>
 800a8e6:	4b05      	ldr	r3, [pc, #20]	@ (800a8fc <__i2b+0x24>)
 800a8e8:	4805      	ldr	r0, [pc, #20]	@ (800a900 <__i2b+0x28>)
 800a8ea:	f240 1145 	movw	r1, #325	@ 0x145
 800a8ee:	f001 fdb3 	bl	800c458 <__assert_func>
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	6144      	str	r4, [r0, #20]
 800a8f6:	6103      	str	r3, [r0, #16]
 800a8f8:	bd10      	pop	{r4, pc}
 800a8fa:	bf00      	nop
 800a8fc:	0800cef5 	.word	0x0800cef5
 800a900:	0800cf06 	.word	0x0800cf06

0800a904 <__multiply>:
 800a904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a908:	4617      	mov	r7, r2
 800a90a:	690a      	ldr	r2, [r1, #16]
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	429a      	cmp	r2, r3
 800a910:	bfa8      	it	ge
 800a912:	463b      	movge	r3, r7
 800a914:	4689      	mov	r9, r1
 800a916:	bfa4      	itt	ge
 800a918:	460f      	movge	r7, r1
 800a91a:	4699      	movge	r9, r3
 800a91c:	693d      	ldr	r5, [r7, #16]
 800a91e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	6879      	ldr	r1, [r7, #4]
 800a926:	eb05 060a 	add.w	r6, r5, sl
 800a92a:	42b3      	cmp	r3, r6
 800a92c:	b085      	sub	sp, #20
 800a92e:	bfb8      	it	lt
 800a930:	3101      	addlt	r1, #1
 800a932:	f7ff fe93 	bl	800a65c <_Balloc>
 800a936:	b930      	cbnz	r0, 800a946 <__multiply+0x42>
 800a938:	4602      	mov	r2, r0
 800a93a:	4b41      	ldr	r3, [pc, #260]	@ (800aa40 <__multiply+0x13c>)
 800a93c:	4841      	ldr	r0, [pc, #260]	@ (800aa44 <__multiply+0x140>)
 800a93e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a942:	f001 fd89 	bl	800c458 <__assert_func>
 800a946:	f100 0414 	add.w	r4, r0, #20
 800a94a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a94e:	4623      	mov	r3, r4
 800a950:	2200      	movs	r2, #0
 800a952:	4573      	cmp	r3, lr
 800a954:	d320      	bcc.n	800a998 <__multiply+0x94>
 800a956:	f107 0814 	add.w	r8, r7, #20
 800a95a:	f109 0114 	add.w	r1, r9, #20
 800a95e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a962:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a966:	9302      	str	r3, [sp, #8]
 800a968:	1beb      	subs	r3, r5, r7
 800a96a:	3b15      	subs	r3, #21
 800a96c:	f023 0303 	bic.w	r3, r3, #3
 800a970:	3304      	adds	r3, #4
 800a972:	3715      	adds	r7, #21
 800a974:	42bd      	cmp	r5, r7
 800a976:	bf38      	it	cc
 800a978:	2304      	movcc	r3, #4
 800a97a:	9301      	str	r3, [sp, #4]
 800a97c:	9b02      	ldr	r3, [sp, #8]
 800a97e:	9103      	str	r1, [sp, #12]
 800a980:	428b      	cmp	r3, r1
 800a982:	d80c      	bhi.n	800a99e <__multiply+0x9a>
 800a984:	2e00      	cmp	r6, #0
 800a986:	dd03      	ble.n	800a990 <__multiply+0x8c>
 800a988:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d055      	beq.n	800aa3c <__multiply+0x138>
 800a990:	6106      	str	r6, [r0, #16]
 800a992:	b005      	add	sp, #20
 800a994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a998:	f843 2b04 	str.w	r2, [r3], #4
 800a99c:	e7d9      	b.n	800a952 <__multiply+0x4e>
 800a99e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a9a2:	f1ba 0f00 	cmp.w	sl, #0
 800a9a6:	d01f      	beq.n	800a9e8 <__multiply+0xe4>
 800a9a8:	46c4      	mov	ip, r8
 800a9aa:	46a1      	mov	r9, r4
 800a9ac:	2700      	movs	r7, #0
 800a9ae:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a9b2:	f8d9 3000 	ldr.w	r3, [r9]
 800a9b6:	fa1f fb82 	uxth.w	fp, r2
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	fb0a 330b 	mla	r3, sl, fp, r3
 800a9c0:	443b      	add	r3, r7
 800a9c2:	f8d9 7000 	ldr.w	r7, [r9]
 800a9c6:	0c12      	lsrs	r2, r2, #16
 800a9c8:	0c3f      	lsrs	r7, r7, #16
 800a9ca:	fb0a 7202 	mla	r2, sl, r2, r7
 800a9ce:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9d8:	4565      	cmp	r5, ip
 800a9da:	f849 3b04 	str.w	r3, [r9], #4
 800a9de:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a9e2:	d8e4      	bhi.n	800a9ae <__multiply+0xaa>
 800a9e4:	9b01      	ldr	r3, [sp, #4]
 800a9e6:	50e7      	str	r7, [r4, r3]
 800a9e8:	9b03      	ldr	r3, [sp, #12]
 800a9ea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a9ee:	3104      	adds	r1, #4
 800a9f0:	f1b9 0f00 	cmp.w	r9, #0
 800a9f4:	d020      	beq.n	800aa38 <__multiply+0x134>
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	4647      	mov	r7, r8
 800a9fa:	46a4      	mov	ip, r4
 800a9fc:	f04f 0a00 	mov.w	sl, #0
 800aa00:	f8b7 b000 	ldrh.w	fp, [r7]
 800aa04:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800aa08:	fb09 220b 	mla	r2, r9, fp, r2
 800aa0c:	4452      	add	r2, sl
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa14:	f84c 3b04 	str.w	r3, [ip], #4
 800aa18:	f857 3b04 	ldr.w	r3, [r7], #4
 800aa1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa20:	f8bc 3000 	ldrh.w	r3, [ip]
 800aa24:	fb09 330a 	mla	r3, r9, sl, r3
 800aa28:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800aa2c:	42bd      	cmp	r5, r7
 800aa2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa32:	d8e5      	bhi.n	800aa00 <__multiply+0xfc>
 800aa34:	9a01      	ldr	r2, [sp, #4]
 800aa36:	50a3      	str	r3, [r4, r2]
 800aa38:	3404      	adds	r4, #4
 800aa3a:	e79f      	b.n	800a97c <__multiply+0x78>
 800aa3c:	3e01      	subs	r6, #1
 800aa3e:	e7a1      	b.n	800a984 <__multiply+0x80>
 800aa40:	0800cef5 	.word	0x0800cef5
 800aa44:	0800cf06 	.word	0x0800cf06

0800aa48 <__pow5mult>:
 800aa48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa4c:	4615      	mov	r5, r2
 800aa4e:	f012 0203 	ands.w	r2, r2, #3
 800aa52:	4607      	mov	r7, r0
 800aa54:	460e      	mov	r6, r1
 800aa56:	d007      	beq.n	800aa68 <__pow5mult+0x20>
 800aa58:	4c25      	ldr	r4, [pc, #148]	@ (800aaf0 <__pow5mult+0xa8>)
 800aa5a:	3a01      	subs	r2, #1
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa62:	f7ff fe5d 	bl	800a720 <__multadd>
 800aa66:	4606      	mov	r6, r0
 800aa68:	10ad      	asrs	r5, r5, #2
 800aa6a:	d03d      	beq.n	800aae8 <__pow5mult+0xa0>
 800aa6c:	69fc      	ldr	r4, [r7, #28]
 800aa6e:	b97c      	cbnz	r4, 800aa90 <__pow5mult+0x48>
 800aa70:	2010      	movs	r0, #16
 800aa72:	f7ff fd3d 	bl	800a4f0 <malloc>
 800aa76:	4602      	mov	r2, r0
 800aa78:	61f8      	str	r0, [r7, #28]
 800aa7a:	b928      	cbnz	r0, 800aa88 <__pow5mult+0x40>
 800aa7c:	4b1d      	ldr	r3, [pc, #116]	@ (800aaf4 <__pow5mult+0xac>)
 800aa7e:	481e      	ldr	r0, [pc, #120]	@ (800aaf8 <__pow5mult+0xb0>)
 800aa80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aa84:	f001 fce8 	bl	800c458 <__assert_func>
 800aa88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa8c:	6004      	str	r4, [r0, #0]
 800aa8e:	60c4      	str	r4, [r0, #12]
 800aa90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aa94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa98:	b94c      	cbnz	r4, 800aaae <__pow5mult+0x66>
 800aa9a:	f240 2171 	movw	r1, #625	@ 0x271
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	f7ff ff1a 	bl	800a8d8 <__i2b>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f8c8 0008 	str.w	r0, [r8, #8]
 800aaaa:	4604      	mov	r4, r0
 800aaac:	6003      	str	r3, [r0, #0]
 800aaae:	f04f 0900 	mov.w	r9, #0
 800aab2:	07eb      	lsls	r3, r5, #31
 800aab4:	d50a      	bpl.n	800aacc <__pow5mult+0x84>
 800aab6:	4631      	mov	r1, r6
 800aab8:	4622      	mov	r2, r4
 800aaba:	4638      	mov	r0, r7
 800aabc:	f7ff ff22 	bl	800a904 <__multiply>
 800aac0:	4631      	mov	r1, r6
 800aac2:	4680      	mov	r8, r0
 800aac4:	4638      	mov	r0, r7
 800aac6:	f7ff fe09 	bl	800a6dc <_Bfree>
 800aaca:	4646      	mov	r6, r8
 800aacc:	106d      	asrs	r5, r5, #1
 800aace:	d00b      	beq.n	800aae8 <__pow5mult+0xa0>
 800aad0:	6820      	ldr	r0, [r4, #0]
 800aad2:	b938      	cbnz	r0, 800aae4 <__pow5mult+0x9c>
 800aad4:	4622      	mov	r2, r4
 800aad6:	4621      	mov	r1, r4
 800aad8:	4638      	mov	r0, r7
 800aada:	f7ff ff13 	bl	800a904 <__multiply>
 800aade:	6020      	str	r0, [r4, #0]
 800aae0:	f8c0 9000 	str.w	r9, [r0]
 800aae4:	4604      	mov	r4, r0
 800aae6:	e7e4      	b.n	800aab2 <__pow5mult+0x6a>
 800aae8:	4630      	mov	r0, r6
 800aaea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaee:	bf00      	nop
 800aaf0:	0800d018 	.word	0x0800d018
 800aaf4:	0800ce86 	.word	0x0800ce86
 800aaf8:	0800cf06 	.word	0x0800cf06

0800aafc <__lshift>:
 800aafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab00:	460c      	mov	r4, r1
 800ab02:	6849      	ldr	r1, [r1, #4]
 800ab04:	6923      	ldr	r3, [r4, #16]
 800ab06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab0a:	68a3      	ldr	r3, [r4, #8]
 800ab0c:	4607      	mov	r7, r0
 800ab0e:	4691      	mov	r9, r2
 800ab10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab14:	f108 0601 	add.w	r6, r8, #1
 800ab18:	42b3      	cmp	r3, r6
 800ab1a:	db0b      	blt.n	800ab34 <__lshift+0x38>
 800ab1c:	4638      	mov	r0, r7
 800ab1e:	f7ff fd9d 	bl	800a65c <_Balloc>
 800ab22:	4605      	mov	r5, r0
 800ab24:	b948      	cbnz	r0, 800ab3a <__lshift+0x3e>
 800ab26:	4602      	mov	r2, r0
 800ab28:	4b28      	ldr	r3, [pc, #160]	@ (800abcc <__lshift+0xd0>)
 800ab2a:	4829      	ldr	r0, [pc, #164]	@ (800abd0 <__lshift+0xd4>)
 800ab2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ab30:	f001 fc92 	bl	800c458 <__assert_func>
 800ab34:	3101      	adds	r1, #1
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	e7ee      	b.n	800ab18 <__lshift+0x1c>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f100 0114 	add.w	r1, r0, #20
 800ab40:	f100 0210 	add.w	r2, r0, #16
 800ab44:	4618      	mov	r0, r3
 800ab46:	4553      	cmp	r3, sl
 800ab48:	db33      	blt.n	800abb2 <__lshift+0xb6>
 800ab4a:	6920      	ldr	r0, [r4, #16]
 800ab4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab50:	f104 0314 	add.w	r3, r4, #20
 800ab54:	f019 091f 	ands.w	r9, r9, #31
 800ab58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab60:	d02b      	beq.n	800abba <__lshift+0xbe>
 800ab62:	f1c9 0e20 	rsb	lr, r9, #32
 800ab66:	468a      	mov	sl, r1
 800ab68:	2200      	movs	r2, #0
 800ab6a:	6818      	ldr	r0, [r3, #0]
 800ab6c:	fa00 f009 	lsl.w	r0, r0, r9
 800ab70:	4310      	orrs	r0, r2
 800ab72:	f84a 0b04 	str.w	r0, [sl], #4
 800ab76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab7a:	459c      	cmp	ip, r3
 800ab7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab80:	d8f3      	bhi.n	800ab6a <__lshift+0x6e>
 800ab82:	ebac 0304 	sub.w	r3, ip, r4
 800ab86:	3b15      	subs	r3, #21
 800ab88:	f023 0303 	bic.w	r3, r3, #3
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	f104 0015 	add.w	r0, r4, #21
 800ab92:	4560      	cmp	r0, ip
 800ab94:	bf88      	it	hi
 800ab96:	2304      	movhi	r3, #4
 800ab98:	50ca      	str	r2, [r1, r3]
 800ab9a:	b10a      	cbz	r2, 800aba0 <__lshift+0xa4>
 800ab9c:	f108 0602 	add.w	r6, r8, #2
 800aba0:	3e01      	subs	r6, #1
 800aba2:	4638      	mov	r0, r7
 800aba4:	612e      	str	r6, [r5, #16]
 800aba6:	4621      	mov	r1, r4
 800aba8:	f7ff fd98 	bl	800a6dc <_Bfree>
 800abac:	4628      	mov	r0, r5
 800abae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800abb6:	3301      	adds	r3, #1
 800abb8:	e7c5      	b.n	800ab46 <__lshift+0x4a>
 800abba:	3904      	subs	r1, #4
 800abbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800abc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800abc4:	459c      	cmp	ip, r3
 800abc6:	d8f9      	bhi.n	800abbc <__lshift+0xc0>
 800abc8:	e7ea      	b.n	800aba0 <__lshift+0xa4>
 800abca:	bf00      	nop
 800abcc:	0800cef5 	.word	0x0800cef5
 800abd0:	0800cf06 	.word	0x0800cf06

0800abd4 <__mcmp>:
 800abd4:	690a      	ldr	r2, [r1, #16]
 800abd6:	4603      	mov	r3, r0
 800abd8:	6900      	ldr	r0, [r0, #16]
 800abda:	1a80      	subs	r0, r0, r2
 800abdc:	b530      	push	{r4, r5, lr}
 800abde:	d10e      	bne.n	800abfe <__mcmp+0x2a>
 800abe0:	3314      	adds	r3, #20
 800abe2:	3114      	adds	r1, #20
 800abe4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800abe8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800abec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800abf0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800abf4:	4295      	cmp	r5, r2
 800abf6:	d003      	beq.n	800ac00 <__mcmp+0x2c>
 800abf8:	d205      	bcs.n	800ac06 <__mcmp+0x32>
 800abfa:	f04f 30ff 	mov.w	r0, #4294967295
 800abfe:	bd30      	pop	{r4, r5, pc}
 800ac00:	42a3      	cmp	r3, r4
 800ac02:	d3f3      	bcc.n	800abec <__mcmp+0x18>
 800ac04:	e7fb      	b.n	800abfe <__mcmp+0x2a>
 800ac06:	2001      	movs	r0, #1
 800ac08:	e7f9      	b.n	800abfe <__mcmp+0x2a>
	...

0800ac0c <__mdiff>:
 800ac0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac10:	4689      	mov	r9, r1
 800ac12:	4606      	mov	r6, r0
 800ac14:	4611      	mov	r1, r2
 800ac16:	4648      	mov	r0, r9
 800ac18:	4614      	mov	r4, r2
 800ac1a:	f7ff ffdb 	bl	800abd4 <__mcmp>
 800ac1e:	1e05      	subs	r5, r0, #0
 800ac20:	d112      	bne.n	800ac48 <__mdiff+0x3c>
 800ac22:	4629      	mov	r1, r5
 800ac24:	4630      	mov	r0, r6
 800ac26:	f7ff fd19 	bl	800a65c <_Balloc>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	b928      	cbnz	r0, 800ac3a <__mdiff+0x2e>
 800ac2e:	4b3f      	ldr	r3, [pc, #252]	@ (800ad2c <__mdiff+0x120>)
 800ac30:	f240 2137 	movw	r1, #567	@ 0x237
 800ac34:	483e      	ldr	r0, [pc, #248]	@ (800ad30 <__mdiff+0x124>)
 800ac36:	f001 fc0f 	bl	800c458 <__assert_func>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac40:	4610      	mov	r0, r2
 800ac42:	b003      	add	sp, #12
 800ac44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac48:	bfbc      	itt	lt
 800ac4a:	464b      	movlt	r3, r9
 800ac4c:	46a1      	movlt	r9, r4
 800ac4e:	4630      	mov	r0, r6
 800ac50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ac54:	bfba      	itte	lt
 800ac56:	461c      	movlt	r4, r3
 800ac58:	2501      	movlt	r5, #1
 800ac5a:	2500      	movge	r5, #0
 800ac5c:	f7ff fcfe 	bl	800a65c <_Balloc>
 800ac60:	4602      	mov	r2, r0
 800ac62:	b918      	cbnz	r0, 800ac6c <__mdiff+0x60>
 800ac64:	4b31      	ldr	r3, [pc, #196]	@ (800ad2c <__mdiff+0x120>)
 800ac66:	f240 2145 	movw	r1, #581	@ 0x245
 800ac6a:	e7e3      	b.n	800ac34 <__mdiff+0x28>
 800ac6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ac70:	6926      	ldr	r6, [r4, #16]
 800ac72:	60c5      	str	r5, [r0, #12]
 800ac74:	f109 0310 	add.w	r3, r9, #16
 800ac78:	f109 0514 	add.w	r5, r9, #20
 800ac7c:	f104 0e14 	add.w	lr, r4, #20
 800ac80:	f100 0b14 	add.w	fp, r0, #20
 800ac84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ac88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ac8c:	9301      	str	r3, [sp, #4]
 800ac8e:	46d9      	mov	r9, fp
 800ac90:	f04f 0c00 	mov.w	ip, #0
 800ac94:	9b01      	ldr	r3, [sp, #4]
 800ac96:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ac9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	fa1f f38a 	uxth.w	r3, sl
 800aca4:	4619      	mov	r1, r3
 800aca6:	b283      	uxth	r3, r0
 800aca8:	1acb      	subs	r3, r1, r3
 800acaa:	0c00      	lsrs	r0, r0, #16
 800acac:	4463      	add	r3, ip
 800acae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800acb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800acbc:	4576      	cmp	r6, lr
 800acbe:	f849 3b04 	str.w	r3, [r9], #4
 800acc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800acc6:	d8e5      	bhi.n	800ac94 <__mdiff+0x88>
 800acc8:	1b33      	subs	r3, r6, r4
 800acca:	3b15      	subs	r3, #21
 800accc:	f023 0303 	bic.w	r3, r3, #3
 800acd0:	3415      	adds	r4, #21
 800acd2:	3304      	adds	r3, #4
 800acd4:	42a6      	cmp	r6, r4
 800acd6:	bf38      	it	cc
 800acd8:	2304      	movcc	r3, #4
 800acda:	441d      	add	r5, r3
 800acdc:	445b      	add	r3, fp
 800acde:	461e      	mov	r6, r3
 800ace0:	462c      	mov	r4, r5
 800ace2:	4544      	cmp	r4, r8
 800ace4:	d30e      	bcc.n	800ad04 <__mdiff+0xf8>
 800ace6:	f108 0103 	add.w	r1, r8, #3
 800acea:	1b49      	subs	r1, r1, r5
 800acec:	f021 0103 	bic.w	r1, r1, #3
 800acf0:	3d03      	subs	r5, #3
 800acf2:	45a8      	cmp	r8, r5
 800acf4:	bf38      	it	cc
 800acf6:	2100      	movcc	r1, #0
 800acf8:	440b      	add	r3, r1
 800acfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800acfe:	b191      	cbz	r1, 800ad26 <__mdiff+0x11a>
 800ad00:	6117      	str	r7, [r2, #16]
 800ad02:	e79d      	b.n	800ac40 <__mdiff+0x34>
 800ad04:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad08:	46e6      	mov	lr, ip
 800ad0a:	0c08      	lsrs	r0, r1, #16
 800ad0c:	fa1c fc81 	uxtah	ip, ip, r1
 800ad10:	4471      	add	r1, lr
 800ad12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ad16:	b289      	uxth	r1, r1
 800ad18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ad1c:	f846 1b04 	str.w	r1, [r6], #4
 800ad20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad24:	e7dd      	b.n	800ace2 <__mdiff+0xd6>
 800ad26:	3f01      	subs	r7, #1
 800ad28:	e7e7      	b.n	800acfa <__mdiff+0xee>
 800ad2a:	bf00      	nop
 800ad2c:	0800cef5 	.word	0x0800cef5
 800ad30:	0800cf06 	.word	0x0800cf06

0800ad34 <__ulp>:
 800ad34:	b082      	sub	sp, #8
 800ad36:	ed8d 0b00 	vstr	d0, [sp]
 800ad3a:	9a01      	ldr	r2, [sp, #4]
 800ad3c:	4b0f      	ldr	r3, [pc, #60]	@ (800ad7c <__ulp+0x48>)
 800ad3e:	4013      	ands	r3, r2
 800ad40:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	dc08      	bgt.n	800ad5a <__ulp+0x26>
 800ad48:	425b      	negs	r3, r3
 800ad4a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ad4e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ad52:	da04      	bge.n	800ad5e <__ulp+0x2a>
 800ad54:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ad58:	4113      	asrs	r3, r2
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	e008      	b.n	800ad70 <__ulp+0x3c>
 800ad5e:	f1a2 0314 	sub.w	r3, r2, #20
 800ad62:	2b1e      	cmp	r3, #30
 800ad64:	bfda      	itte	le
 800ad66:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ad6a:	40da      	lsrle	r2, r3
 800ad6c:	2201      	movgt	r2, #1
 800ad6e:	2300      	movs	r3, #0
 800ad70:	4619      	mov	r1, r3
 800ad72:	4610      	mov	r0, r2
 800ad74:	ec41 0b10 	vmov	d0, r0, r1
 800ad78:	b002      	add	sp, #8
 800ad7a:	4770      	bx	lr
 800ad7c:	7ff00000 	.word	0x7ff00000

0800ad80 <__b2d>:
 800ad80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad84:	6906      	ldr	r6, [r0, #16]
 800ad86:	f100 0814 	add.w	r8, r0, #20
 800ad8a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ad8e:	1f37      	subs	r7, r6, #4
 800ad90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ad94:	4610      	mov	r0, r2
 800ad96:	f7ff fd53 	bl	800a840 <__hi0bits>
 800ad9a:	f1c0 0320 	rsb	r3, r0, #32
 800ad9e:	280a      	cmp	r0, #10
 800ada0:	600b      	str	r3, [r1, #0]
 800ada2:	491b      	ldr	r1, [pc, #108]	@ (800ae10 <__b2d+0x90>)
 800ada4:	dc15      	bgt.n	800add2 <__b2d+0x52>
 800ada6:	f1c0 0c0b 	rsb	ip, r0, #11
 800adaa:	fa22 f30c 	lsr.w	r3, r2, ip
 800adae:	45b8      	cmp	r8, r7
 800adb0:	ea43 0501 	orr.w	r5, r3, r1
 800adb4:	bf34      	ite	cc
 800adb6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800adba:	2300      	movcs	r3, #0
 800adbc:	3015      	adds	r0, #21
 800adbe:	fa02 f000 	lsl.w	r0, r2, r0
 800adc2:	fa23 f30c 	lsr.w	r3, r3, ip
 800adc6:	4303      	orrs	r3, r0
 800adc8:	461c      	mov	r4, r3
 800adca:	ec45 4b10 	vmov	d0, r4, r5
 800adce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add2:	45b8      	cmp	r8, r7
 800add4:	bf3a      	itte	cc
 800add6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800adda:	f1a6 0708 	subcc.w	r7, r6, #8
 800adde:	2300      	movcs	r3, #0
 800ade0:	380b      	subs	r0, #11
 800ade2:	d012      	beq.n	800ae0a <__b2d+0x8a>
 800ade4:	f1c0 0120 	rsb	r1, r0, #32
 800ade8:	fa23 f401 	lsr.w	r4, r3, r1
 800adec:	4082      	lsls	r2, r0
 800adee:	4322      	orrs	r2, r4
 800adf0:	4547      	cmp	r7, r8
 800adf2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800adf6:	bf8c      	ite	hi
 800adf8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800adfc:	2200      	movls	r2, #0
 800adfe:	4083      	lsls	r3, r0
 800ae00:	40ca      	lsrs	r2, r1
 800ae02:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ae06:	4313      	orrs	r3, r2
 800ae08:	e7de      	b.n	800adc8 <__b2d+0x48>
 800ae0a:	ea42 0501 	orr.w	r5, r2, r1
 800ae0e:	e7db      	b.n	800adc8 <__b2d+0x48>
 800ae10:	3ff00000 	.word	0x3ff00000

0800ae14 <__d2b>:
 800ae14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae18:	460f      	mov	r7, r1
 800ae1a:	2101      	movs	r1, #1
 800ae1c:	ec59 8b10 	vmov	r8, r9, d0
 800ae20:	4616      	mov	r6, r2
 800ae22:	f7ff fc1b 	bl	800a65c <_Balloc>
 800ae26:	4604      	mov	r4, r0
 800ae28:	b930      	cbnz	r0, 800ae38 <__d2b+0x24>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	4b23      	ldr	r3, [pc, #140]	@ (800aebc <__d2b+0xa8>)
 800ae2e:	4824      	ldr	r0, [pc, #144]	@ (800aec0 <__d2b+0xac>)
 800ae30:	f240 310f 	movw	r1, #783	@ 0x30f
 800ae34:	f001 fb10 	bl	800c458 <__assert_func>
 800ae38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae40:	b10d      	cbz	r5, 800ae46 <__d2b+0x32>
 800ae42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae46:	9301      	str	r3, [sp, #4]
 800ae48:	f1b8 0300 	subs.w	r3, r8, #0
 800ae4c:	d023      	beq.n	800ae96 <__d2b+0x82>
 800ae4e:	4668      	mov	r0, sp
 800ae50:	9300      	str	r3, [sp, #0]
 800ae52:	f7ff fd14 	bl	800a87e <__lo0bits>
 800ae56:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae5a:	b1d0      	cbz	r0, 800ae92 <__d2b+0x7e>
 800ae5c:	f1c0 0320 	rsb	r3, r0, #32
 800ae60:	fa02 f303 	lsl.w	r3, r2, r3
 800ae64:	430b      	orrs	r3, r1
 800ae66:	40c2      	lsrs	r2, r0
 800ae68:	6163      	str	r3, [r4, #20]
 800ae6a:	9201      	str	r2, [sp, #4]
 800ae6c:	9b01      	ldr	r3, [sp, #4]
 800ae6e:	61a3      	str	r3, [r4, #24]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	bf0c      	ite	eq
 800ae74:	2201      	moveq	r2, #1
 800ae76:	2202      	movne	r2, #2
 800ae78:	6122      	str	r2, [r4, #16]
 800ae7a:	b1a5      	cbz	r5, 800aea6 <__d2b+0x92>
 800ae7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ae80:	4405      	add	r5, r0
 800ae82:	603d      	str	r5, [r7, #0]
 800ae84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ae88:	6030      	str	r0, [r6, #0]
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	b003      	add	sp, #12
 800ae8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae92:	6161      	str	r1, [r4, #20]
 800ae94:	e7ea      	b.n	800ae6c <__d2b+0x58>
 800ae96:	a801      	add	r0, sp, #4
 800ae98:	f7ff fcf1 	bl	800a87e <__lo0bits>
 800ae9c:	9b01      	ldr	r3, [sp, #4]
 800ae9e:	6163      	str	r3, [r4, #20]
 800aea0:	3020      	adds	r0, #32
 800aea2:	2201      	movs	r2, #1
 800aea4:	e7e8      	b.n	800ae78 <__d2b+0x64>
 800aea6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aeaa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aeae:	6038      	str	r0, [r7, #0]
 800aeb0:	6918      	ldr	r0, [r3, #16]
 800aeb2:	f7ff fcc5 	bl	800a840 <__hi0bits>
 800aeb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aeba:	e7e5      	b.n	800ae88 <__d2b+0x74>
 800aebc:	0800cef5 	.word	0x0800cef5
 800aec0:	0800cf06 	.word	0x0800cf06

0800aec4 <__ratio>:
 800aec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec8:	4688      	mov	r8, r1
 800aeca:	4669      	mov	r1, sp
 800aecc:	4681      	mov	r9, r0
 800aece:	f7ff ff57 	bl	800ad80 <__b2d>
 800aed2:	a901      	add	r1, sp, #4
 800aed4:	4640      	mov	r0, r8
 800aed6:	ec55 4b10 	vmov	r4, r5, d0
 800aeda:	f7ff ff51 	bl	800ad80 <__b2d>
 800aede:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800aee2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800aee6:	1ad2      	subs	r2, r2, r3
 800aee8:	e9dd 3100 	ldrd	r3, r1, [sp]
 800aeec:	1a5b      	subs	r3, r3, r1
 800aeee:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800aef2:	ec57 6b10 	vmov	r6, r7, d0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	bfd6      	itet	le
 800aefa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aefe:	462a      	movgt	r2, r5
 800af00:	463a      	movle	r2, r7
 800af02:	46ab      	mov	fp, r5
 800af04:	46a2      	mov	sl, r4
 800af06:	bfce      	itee	gt
 800af08:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800af0c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800af10:	ee00 3a90 	vmovle	s1, r3
 800af14:	ec4b ab17 	vmov	d7, sl, fp
 800af18:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800af1c:	b003      	add	sp, #12
 800af1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af22 <__copybits>:
 800af22:	3901      	subs	r1, #1
 800af24:	b570      	push	{r4, r5, r6, lr}
 800af26:	1149      	asrs	r1, r1, #5
 800af28:	6914      	ldr	r4, [r2, #16]
 800af2a:	3101      	adds	r1, #1
 800af2c:	f102 0314 	add.w	r3, r2, #20
 800af30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800af34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800af38:	1f05      	subs	r5, r0, #4
 800af3a:	42a3      	cmp	r3, r4
 800af3c:	d30c      	bcc.n	800af58 <__copybits+0x36>
 800af3e:	1aa3      	subs	r3, r4, r2
 800af40:	3b11      	subs	r3, #17
 800af42:	f023 0303 	bic.w	r3, r3, #3
 800af46:	3211      	adds	r2, #17
 800af48:	42a2      	cmp	r2, r4
 800af4a:	bf88      	it	hi
 800af4c:	2300      	movhi	r3, #0
 800af4e:	4418      	add	r0, r3
 800af50:	2300      	movs	r3, #0
 800af52:	4288      	cmp	r0, r1
 800af54:	d305      	bcc.n	800af62 <__copybits+0x40>
 800af56:	bd70      	pop	{r4, r5, r6, pc}
 800af58:	f853 6b04 	ldr.w	r6, [r3], #4
 800af5c:	f845 6f04 	str.w	r6, [r5, #4]!
 800af60:	e7eb      	b.n	800af3a <__copybits+0x18>
 800af62:	f840 3b04 	str.w	r3, [r0], #4
 800af66:	e7f4      	b.n	800af52 <__copybits+0x30>

0800af68 <__any_on>:
 800af68:	f100 0214 	add.w	r2, r0, #20
 800af6c:	6900      	ldr	r0, [r0, #16]
 800af6e:	114b      	asrs	r3, r1, #5
 800af70:	4298      	cmp	r0, r3
 800af72:	b510      	push	{r4, lr}
 800af74:	db11      	blt.n	800af9a <__any_on+0x32>
 800af76:	dd0a      	ble.n	800af8e <__any_on+0x26>
 800af78:	f011 011f 	ands.w	r1, r1, #31
 800af7c:	d007      	beq.n	800af8e <__any_on+0x26>
 800af7e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800af82:	fa24 f001 	lsr.w	r0, r4, r1
 800af86:	fa00 f101 	lsl.w	r1, r0, r1
 800af8a:	428c      	cmp	r4, r1
 800af8c:	d10b      	bne.n	800afa6 <__any_on+0x3e>
 800af8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af92:	4293      	cmp	r3, r2
 800af94:	d803      	bhi.n	800af9e <__any_on+0x36>
 800af96:	2000      	movs	r0, #0
 800af98:	bd10      	pop	{r4, pc}
 800af9a:	4603      	mov	r3, r0
 800af9c:	e7f7      	b.n	800af8e <__any_on+0x26>
 800af9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800afa2:	2900      	cmp	r1, #0
 800afa4:	d0f5      	beq.n	800af92 <__any_on+0x2a>
 800afa6:	2001      	movs	r0, #1
 800afa8:	e7f6      	b.n	800af98 <__any_on+0x30>

0800afaa <sulp>:
 800afaa:	b570      	push	{r4, r5, r6, lr}
 800afac:	4604      	mov	r4, r0
 800afae:	460d      	mov	r5, r1
 800afb0:	4616      	mov	r6, r2
 800afb2:	ec45 4b10 	vmov	d0, r4, r5
 800afb6:	f7ff febd 	bl	800ad34 <__ulp>
 800afba:	b17e      	cbz	r6, 800afdc <sulp+0x32>
 800afbc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800afc0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	dd09      	ble.n	800afdc <sulp+0x32>
 800afc8:	051b      	lsls	r3, r3, #20
 800afca:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800afce:	2000      	movs	r0, #0
 800afd0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800afd4:	ec41 0b17 	vmov	d7, r0, r1
 800afd8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800afdc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800afe0 <_strtod_l>:
 800afe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe4:	ed2d 8b0a 	vpush	{d8-d12}
 800afe8:	b097      	sub	sp, #92	@ 0x5c
 800afea:	4688      	mov	r8, r1
 800afec:	920e      	str	r2, [sp, #56]	@ 0x38
 800afee:	2200      	movs	r2, #0
 800aff0:	9212      	str	r2, [sp, #72]	@ 0x48
 800aff2:	9005      	str	r0, [sp, #20]
 800aff4:	f04f 0a00 	mov.w	sl, #0
 800aff8:	f04f 0b00 	mov.w	fp, #0
 800affc:	460a      	mov	r2, r1
 800affe:	9211      	str	r2, [sp, #68]	@ 0x44
 800b000:	7811      	ldrb	r1, [r2, #0]
 800b002:	292b      	cmp	r1, #43	@ 0x2b
 800b004:	d04c      	beq.n	800b0a0 <_strtod_l+0xc0>
 800b006:	d839      	bhi.n	800b07c <_strtod_l+0x9c>
 800b008:	290d      	cmp	r1, #13
 800b00a:	d833      	bhi.n	800b074 <_strtod_l+0x94>
 800b00c:	2908      	cmp	r1, #8
 800b00e:	d833      	bhi.n	800b078 <_strtod_l+0x98>
 800b010:	2900      	cmp	r1, #0
 800b012:	d03c      	beq.n	800b08e <_strtod_l+0xae>
 800b014:	2200      	movs	r2, #0
 800b016:	9208      	str	r2, [sp, #32]
 800b018:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b01a:	782a      	ldrb	r2, [r5, #0]
 800b01c:	2a30      	cmp	r2, #48	@ 0x30
 800b01e:	f040 80b7 	bne.w	800b190 <_strtod_l+0x1b0>
 800b022:	786a      	ldrb	r2, [r5, #1]
 800b024:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b028:	2a58      	cmp	r2, #88	@ 0x58
 800b02a:	d170      	bne.n	800b10e <_strtod_l+0x12e>
 800b02c:	9302      	str	r3, [sp, #8]
 800b02e:	9b08      	ldr	r3, [sp, #32]
 800b030:	9301      	str	r3, [sp, #4]
 800b032:	ab12      	add	r3, sp, #72	@ 0x48
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	4a90      	ldr	r2, [pc, #576]	@ (800b278 <_strtod_l+0x298>)
 800b038:	9805      	ldr	r0, [sp, #20]
 800b03a:	ab13      	add	r3, sp, #76	@ 0x4c
 800b03c:	a911      	add	r1, sp, #68	@ 0x44
 800b03e:	f001 faa5 	bl	800c58c <__gethex>
 800b042:	f010 060f 	ands.w	r6, r0, #15
 800b046:	4604      	mov	r4, r0
 800b048:	d005      	beq.n	800b056 <_strtod_l+0x76>
 800b04a:	2e06      	cmp	r6, #6
 800b04c:	d12a      	bne.n	800b0a4 <_strtod_l+0xc4>
 800b04e:	3501      	adds	r5, #1
 800b050:	2300      	movs	r3, #0
 800b052:	9511      	str	r5, [sp, #68]	@ 0x44
 800b054:	9308      	str	r3, [sp, #32]
 800b056:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f040 8537 	bne.w	800bacc <_strtod_l+0xaec>
 800b05e:	9b08      	ldr	r3, [sp, #32]
 800b060:	ec4b ab10 	vmov	d0, sl, fp
 800b064:	b1cb      	cbz	r3, 800b09a <_strtod_l+0xba>
 800b066:	eeb1 0b40 	vneg.f64	d0, d0
 800b06a:	b017      	add	sp, #92	@ 0x5c
 800b06c:	ecbd 8b0a 	vpop	{d8-d12}
 800b070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b074:	2920      	cmp	r1, #32
 800b076:	d1cd      	bne.n	800b014 <_strtod_l+0x34>
 800b078:	3201      	adds	r2, #1
 800b07a:	e7c0      	b.n	800affe <_strtod_l+0x1e>
 800b07c:	292d      	cmp	r1, #45	@ 0x2d
 800b07e:	d1c9      	bne.n	800b014 <_strtod_l+0x34>
 800b080:	2101      	movs	r1, #1
 800b082:	9108      	str	r1, [sp, #32]
 800b084:	1c51      	adds	r1, r2, #1
 800b086:	9111      	str	r1, [sp, #68]	@ 0x44
 800b088:	7852      	ldrb	r2, [r2, #1]
 800b08a:	2a00      	cmp	r2, #0
 800b08c:	d1c4      	bne.n	800b018 <_strtod_l+0x38>
 800b08e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b090:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800b094:	2b00      	cmp	r3, #0
 800b096:	f040 8517 	bne.w	800bac8 <_strtod_l+0xae8>
 800b09a:	ec4b ab10 	vmov	d0, sl, fp
 800b09e:	e7e4      	b.n	800b06a <_strtod_l+0x8a>
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	e7ee      	b.n	800b082 <_strtod_l+0xa2>
 800b0a4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b0a6:	b13a      	cbz	r2, 800b0b8 <_strtod_l+0xd8>
 800b0a8:	2135      	movs	r1, #53	@ 0x35
 800b0aa:	a814      	add	r0, sp, #80	@ 0x50
 800b0ac:	f7ff ff39 	bl	800af22 <__copybits>
 800b0b0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b0b2:	9805      	ldr	r0, [sp, #20]
 800b0b4:	f7ff fb12 	bl	800a6dc <_Bfree>
 800b0b8:	1e73      	subs	r3, r6, #1
 800b0ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b0bc:	2b04      	cmp	r3, #4
 800b0be:	d806      	bhi.n	800b0ce <_strtod_l+0xee>
 800b0c0:	e8df f003 	tbb	[pc, r3]
 800b0c4:	201d0314 	.word	0x201d0314
 800b0c8:	14          	.byte	0x14
 800b0c9:	00          	.byte	0x00
 800b0ca:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800b0ce:	05e3      	lsls	r3, r4, #23
 800b0d0:	bf48      	it	mi
 800b0d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b0d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b0da:	0d1b      	lsrs	r3, r3, #20
 800b0dc:	051b      	lsls	r3, r3, #20
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1b9      	bne.n	800b056 <_strtod_l+0x76>
 800b0e2:	f7fe fb91 	bl	8009808 <__errno>
 800b0e6:	2322      	movs	r3, #34	@ 0x22
 800b0e8:	6003      	str	r3, [r0, #0]
 800b0ea:	e7b4      	b.n	800b056 <_strtod_l+0x76>
 800b0ec:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800b0f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b0f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b0f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b0fc:	e7e7      	b.n	800b0ce <_strtod_l+0xee>
 800b0fe:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b280 <_strtod_l+0x2a0>
 800b102:	e7e4      	b.n	800b0ce <_strtod_l+0xee>
 800b104:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b108:	f04f 3aff 	mov.w	sl, #4294967295
 800b10c:	e7df      	b.n	800b0ce <_strtod_l+0xee>
 800b10e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b110:	1c5a      	adds	r2, r3, #1
 800b112:	9211      	str	r2, [sp, #68]	@ 0x44
 800b114:	785b      	ldrb	r3, [r3, #1]
 800b116:	2b30      	cmp	r3, #48	@ 0x30
 800b118:	d0f9      	beq.n	800b10e <_strtod_l+0x12e>
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d09b      	beq.n	800b056 <_strtod_l+0x76>
 800b11e:	2301      	movs	r3, #1
 800b120:	9307      	str	r3, [sp, #28]
 800b122:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b124:	930a      	str	r3, [sp, #40]	@ 0x28
 800b126:	2300      	movs	r3, #0
 800b128:	9306      	str	r3, [sp, #24]
 800b12a:	4699      	mov	r9, r3
 800b12c:	461d      	mov	r5, r3
 800b12e:	220a      	movs	r2, #10
 800b130:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800b132:	7804      	ldrb	r4, [r0, #0]
 800b134:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800b138:	b2d9      	uxtb	r1, r3
 800b13a:	2909      	cmp	r1, #9
 800b13c:	d92a      	bls.n	800b194 <_strtod_l+0x1b4>
 800b13e:	494f      	ldr	r1, [pc, #316]	@ (800b27c <_strtod_l+0x29c>)
 800b140:	2201      	movs	r2, #1
 800b142:	f001 f95d 	bl	800c400 <strncmp>
 800b146:	b398      	cbz	r0, 800b1b0 <_strtod_l+0x1d0>
 800b148:	2000      	movs	r0, #0
 800b14a:	4622      	mov	r2, r4
 800b14c:	462b      	mov	r3, r5
 800b14e:	4607      	mov	r7, r0
 800b150:	4601      	mov	r1, r0
 800b152:	2a65      	cmp	r2, #101	@ 0x65
 800b154:	d001      	beq.n	800b15a <_strtod_l+0x17a>
 800b156:	2a45      	cmp	r2, #69	@ 0x45
 800b158:	d118      	bne.n	800b18c <_strtod_l+0x1ac>
 800b15a:	b91b      	cbnz	r3, 800b164 <_strtod_l+0x184>
 800b15c:	9b07      	ldr	r3, [sp, #28]
 800b15e:	4303      	orrs	r3, r0
 800b160:	d095      	beq.n	800b08e <_strtod_l+0xae>
 800b162:	2300      	movs	r3, #0
 800b164:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800b168:	f108 0201 	add.w	r2, r8, #1
 800b16c:	9211      	str	r2, [sp, #68]	@ 0x44
 800b16e:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b172:	2a2b      	cmp	r2, #43	@ 0x2b
 800b174:	d074      	beq.n	800b260 <_strtod_l+0x280>
 800b176:	2a2d      	cmp	r2, #45	@ 0x2d
 800b178:	d07a      	beq.n	800b270 <_strtod_l+0x290>
 800b17a:	f04f 0e00 	mov.w	lr, #0
 800b17e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800b182:	2c09      	cmp	r4, #9
 800b184:	f240 8082 	bls.w	800b28c <_strtod_l+0x2ac>
 800b188:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800b18c:	2400      	movs	r4, #0
 800b18e:	e09d      	b.n	800b2cc <_strtod_l+0x2ec>
 800b190:	2300      	movs	r3, #0
 800b192:	e7c5      	b.n	800b120 <_strtod_l+0x140>
 800b194:	2d08      	cmp	r5, #8
 800b196:	bfc8      	it	gt
 800b198:	9906      	ldrgt	r1, [sp, #24]
 800b19a:	f100 0001 	add.w	r0, r0, #1
 800b19e:	bfca      	itet	gt
 800b1a0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b1a4:	fb02 3909 	mlale	r9, r2, r9, r3
 800b1a8:	9306      	strgt	r3, [sp, #24]
 800b1aa:	3501      	adds	r5, #1
 800b1ac:	9011      	str	r0, [sp, #68]	@ 0x44
 800b1ae:	e7bf      	b.n	800b130 <_strtod_l+0x150>
 800b1b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b1b2:	1c5a      	adds	r2, r3, #1
 800b1b4:	9211      	str	r2, [sp, #68]	@ 0x44
 800b1b6:	785a      	ldrb	r2, [r3, #1]
 800b1b8:	b3bd      	cbz	r5, 800b22a <_strtod_l+0x24a>
 800b1ba:	4607      	mov	r7, r0
 800b1bc:	462b      	mov	r3, r5
 800b1be:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b1c2:	2909      	cmp	r1, #9
 800b1c4:	d912      	bls.n	800b1ec <_strtod_l+0x20c>
 800b1c6:	2101      	movs	r1, #1
 800b1c8:	e7c3      	b.n	800b152 <_strtod_l+0x172>
 800b1ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	9211      	str	r2, [sp, #68]	@ 0x44
 800b1d0:	785a      	ldrb	r2, [r3, #1]
 800b1d2:	3001      	adds	r0, #1
 800b1d4:	2a30      	cmp	r2, #48	@ 0x30
 800b1d6:	d0f8      	beq.n	800b1ca <_strtod_l+0x1ea>
 800b1d8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b1dc:	2b08      	cmp	r3, #8
 800b1de:	f200 847a 	bhi.w	800bad6 <_strtod_l+0xaf6>
 800b1e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b1e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1e6:	4607      	mov	r7, r0
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	3a30      	subs	r2, #48	@ 0x30
 800b1ee:	f100 0101 	add.w	r1, r0, #1
 800b1f2:	d014      	beq.n	800b21e <_strtod_l+0x23e>
 800b1f4:	440f      	add	r7, r1
 800b1f6:	469c      	mov	ip, r3
 800b1f8:	f04f 0e0a 	mov.w	lr, #10
 800b1fc:	f10c 0401 	add.w	r4, ip, #1
 800b200:	1ae6      	subs	r6, r4, r3
 800b202:	42b1      	cmp	r1, r6
 800b204:	dc13      	bgt.n	800b22e <_strtod_l+0x24e>
 800b206:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b20a:	1819      	adds	r1, r3, r0
 800b20c:	2908      	cmp	r1, #8
 800b20e:	f103 0301 	add.w	r3, r3, #1
 800b212:	4403      	add	r3, r0
 800b214:	dc19      	bgt.n	800b24a <_strtod_l+0x26a>
 800b216:	210a      	movs	r1, #10
 800b218:	fb01 2909 	mla	r9, r1, r9, r2
 800b21c:	2100      	movs	r1, #0
 800b21e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b220:	1c50      	adds	r0, r2, #1
 800b222:	9011      	str	r0, [sp, #68]	@ 0x44
 800b224:	7852      	ldrb	r2, [r2, #1]
 800b226:	4608      	mov	r0, r1
 800b228:	e7c9      	b.n	800b1be <_strtod_l+0x1de>
 800b22a:	4628      	mov	r0, r5
 800b22c:	e7d2      	b.n	800b1d4 <_strtod_l+0x1f4>
 800b22e:	f1bc 0f08 	cmp.w	ip, #8
 800b232:	dc03      	bgt.n	800b23c <_strtod_l+0x25c>
 800b234:	fb0e f909 	mul.w	r9, lr, r9
 800b238:	46a4      	mov	ip, r4
 800b23a:	e7df      	b.n	800b1fc <_strtod_l+0x21c>
 800b23c:	2c10      	cmp	r4, #16
 800b23e:	bfde      	ittt	le
 800b240:	9e06      	ldrle	r6, [sp, #24]
 800b242:	fb0e f606 	mulle.w	r6, lr, r6
 800b246:	9606      	strle	r6, [sp, #24]
 800b248:	e7f6      	b.n	800b238 <_strtod_l+0x258>
 800b24a:	290f      	cmp	r1, #15
 800b24c:	bfdf      	itttt	le
 800b24e:	9806      	ldrle	r0, [sp, #24]
 800b250:	210a      	movle	r1, #10
 800b252:	fb01 2200 	mlale	r2, r1, r0, r2
 800b256:	9206      	strle	r2, [sp, #24]
 800b258:	e7e0      	b.n	800b21c <_strtod_l+0x23c>
 800b25a:	2700      	movs	r7, #0
 800b25c:	2101      	movs	r1, #1
 800b25e:	e77d      	b.n	800b15c <_strtod_l+0x17c>
 800b260:	f04f 0e00 	mov.w	lr, #0
 800b264:	f108 0202 	add.w	r2, r8, #2
 800b268:	9211      	str	r2, [sp, #68]	@ 0x44
 800b26a:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b26e:	e786      	b.n	800b17e <_strtod_l+0x19e>
 800b270:	f04f 0e01 	mov.w	lr, #1
 800b274:	e7f6      	b.n	800b264 <_strtod_l+0x284>
 800b276:	bf00      	nop
 800b278:	0800d12c 	.word	0x0800d12c
 800b27c:	0800cf5f 	.word	0x0800cf5f
 800b280:	7ff00000 	.word	0x7ff00000
 800b284:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b286:	1c54      	adds	r4, r2, #1
 800b288:	9411      	str	r4, [sp, #68]	@ 0x44
 800b28a:	7852      	ldrb	r2, [r2, #1]
 800b28c:	2a30      	cmp	r2, #48	@ 0x30
 800b28e:	d0f9      	beq.n	800b284 <_strtod_l+0x2a4>
 800b290:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800b294:	2c08      	cmp	r4, #8
 800b296:	f63f af79 	bhi.w	800b18c <_strtod_l+0x1ac>
 800b29a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800b29e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b2a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2a2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b2a4:	1c54      	adds	r4, r2, #1
 800b2a6:	9411      	str	r4, [sp, #68]	@ 0x44
 800b2a8:	7852      	ldrb	r2, [r2, #1]
 800b2aa:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800b2ae:	2e09      	cmp	r6, #9
 800b2b0:	d937      	bls.n	800b322 <_strtod_l+0x342>
 800b2b2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800b2b4:	1ba4      	subs	r4, r4, r6
 800b2b6:	2c08      	cmp	r4, #8
 800b2b8:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800b2bc:	dc02      	bgt.n	800b2c4 <_strtod_l+0x2e4>
 800b2be:	4564      	cmp	r4, ip
 800b2c0:	bfa8      	it	ge
 800b2c2:	4664      	movge	r4, ip
 800b2c4:	f1be 0f00 	cmp.w	lr, #0
 800b2c8:	d000      	beq.n	800b2cc <_strtod_l+0x2ec>
 800b2ca:	4264      	negs	r4, r4
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d14d      	bne.n	800b36c <_strtod_l+0x38c>
 800b2d0:	9b07      	ldr	r3, [sp, #28]
 800b2d2:	4318      	orrs	r0, r3
 800b2d4:	f47f aebf 	bne.w	800b056 <_strtod_l+0x76>
 800b2d8:	2900      	cmp	r1, #0
 800b2da:	f47f aed8 	bne.w	800b08e <_strtod_l+0xae>
 800b2de:	2a69      	cmp	r2, #105	@ 0x69
 800b2e0:	d027      	beq.n	800b332 <_strtod_l+0x352>
 800b2e2:	dc24      	bgt.n	800b32e <_strtod_l+0x34e>
 800b2e4:	2a49      	cmp	r2, #73	@ 0x49
 800b2e6:	d024      	beq.n	800b332 <_strtod_l+0x352>
 800b2e8:	2a4e      	cmp	r2, #78	@ 0x4e
 800b2ea:	f47f aed0 	bne.w	800b08e <_strtod_l+0xae>
 800b2ee:	4997      	ldr	r1, [pc, #604]	@ (800b54c <_strtod_l+0x56c>)
 800b2f0:	a811      	add	r0, sp, #68	@ 0x44
 800b2f2:	f001 fb6d 	bl	800c9d0 <__match>
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	f43f aec9 	beq.w	800b08e <_strtod_l+0xae>
 800b2fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	2b28      	cmp	r3, #40	@ 0x28
 800b302:	d12d      	bne.n	800b360 <_strtod_l+0x380>
 800b304:	4992      	ldr	r1, [pc, #584]	@ (800b550 <_strtod_l+0x570>)
 800b306:	aa14      	add	r2, sp, #80	@ 0x50
 800b308:	a811      	add	r0, sp, #68	@ 0x44
 800b30a:	f001 fb75 	bl	800c9f8 <__hexnan>
 800b30e:	2805      	cmp	r0, #5
 800b310:	d126      	bne.n	800b360 <_strtod_l+0x380>
 800b312:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b314:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800b318:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b31c:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b320:	e699      	b.n	800b056 <_strtod_l+0x76>
 800b322:	240a      	movs	r4, #10
 800b324:	fb04 2c0c 	mla	ip, r4, ip, r2
 800b328:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800b32c:	e7b9      	b.n	800b2a2 <_strtod_l+0x2c2>
 800b32e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b330:	e7db      	b.n	800b2ea <_strtod_l+0x30a>
 800b332:	4988      	ldr	r1, [pc, #544]	@ (800b554 <_strtod_l+0x574>)
 800b334:	a811      	add	r0, sp, #68	@ 0x44
 800b336:	f001 fb4b 	bl	800c9d0 <__match>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	f43f aea7 	beq.w	800b08e <_strtod_l+0xae>
 800b340:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b342:	4985      	ldr	r1, [pc, #532]	@ (800b558 <_strtod_l+0x578>)
 800b344:	3b01      	subs	r3, #1
 800b346:	a811      	add	r0, sp, #68	@ 0x44
 800b348:	9311      	str	r3, [sp, #68]	@ 0x44
 800b34a:	f001 fb41 	bl	800c9d0 <__match>
 800b34e:	b910      	cbnz	r0, 800b356 <_strtod_l+0x376>
 800b350:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b352:	3301      	adds	r3, #1
 800b354:	9311      	str	r3, [sp, #68]	@ 0x44
 800b356:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800b56c <_strtod_l+0x58c>
 800b35a:	f04f 0a00 	mov.w	sl, #0
 800b35e:	e67a      	b.n	800b056 <_strtod_l+0x76>
 800b360:	487e      	ldr	r0, [pc, #504]	@ (800b55c <_strtod_l+0x57c>)
 800b362:	f001 f871 	bl	800c448 <nan>
 800b366:	ec5b ab10 	vmov	sl, fp, d0
 800b36a:	e674      	b.n	800b056 <_strtod_l+0x76>
 800b36c:	ee07 9a90 	vmov	s15, r9
 800b370:	1be2      	subs	r2, r4, r7
 800b372:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b376:	2d00      	cmp	r5, #0
 800b378:	bf08      	it	eq
 800b37a:	461d      	moveq	r5, r3
 800b37c:	2b10      	cmp	r3, #16
 800b37e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b380:	461a      	mov	r2, r3
 800b382:	bfa8      	it	ge
 800b384:	2210      	movge	r2, #16
 800b386:	2b09      	cmp	r3, #9
 800b388:	ec5b ab17 	vmov	sl, fp, d7
 800b38c:	dc15      	bgt.n	800b3ba <_strtod_l+0x3da>
 800b38e:	1be1      	subs	r1, r4, r7
 800b390:	2900      	cmp	r1, #0
 800b392:	f43f ae60 	beq.w	800b056 <_strtod_l+0x76>
 800b396:	eba4 0107 	sub.w	r1, r4, r7
 800b39a:	dd72      	ble.n	800b482 <_strtod_l+0x4a2>
 800b39c:	2916      	cmp	r1, #22
 800b39e:	dc59      	bgt.n	800b454 <_strtod_l+0x474>
 800b3a0:	4b6f      	ldr	r3, [pc, #444]	@ (800b560 <_strtod_l+0x580>)
 800b3a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3a8:	ed93 7b00 	vldr	d7, [r3]
 800b3ac:	ec4b ab16 	vmov	d6, sl, fp
 800b3b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b3b4:	ec5b ab17 	vmov	sl, fp, d7
 800b3b8:	e64d      	b.n	800b056 <_strtod_l+0x76>
 800b3ba:	4969      	ldr	r1, [pc, #420]	@ (800b560 <_strtod_l+0x580>)
 800b3bc:	eddd 6a06 	vldr	s13, [sp, #24]
 800b3c0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b3c4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800b3c8:	2b0f      	cmp	r3, #15
 800b3ca:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800b3ce:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b3d2:	ec5b ab16 	vmov	sl, fp, d6
 800b3d6:	ddda      	ble.n	800b38e <_strtod_l+0x3ae>
 800b3d8:	1a9a      	subs	r2, r3, r2
 800b3da:	1be1      	subs	r1, r4, r7
 800b3dc:	440a      	add	r2, r1
 800b3de:	2a00      	cmp	r2, #0
 800b3e0:	f340 8094 	ble.w	800b50c <_strtod_l+0x52c>
 800b3e4:	f012 000f 	ands.w	r0, r2, #15
 800b3e8:	d00a      	beq.n	800b400 <_strtod_l+0x420>
 800b3ea:	495d      	ldr	r1, [pc, #372]	@ (800b560 <_strtod_l+0x580>)
 800b3ec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b3f0:	ed91 7b00 	vldr	d7, [r1]
 800b3f4:	ec4b ab16 	vmov	d6, sl, fp
 800b3f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b3fc:	ec5b ab17 	vmov	sl, fp, d7
 800b400:	f032 020f 	bics.w	r2, r2, #15
 800b404:	d073      	beq.n	800b4ee <_strtod_l+0x50e>
 800b406:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800b40a:	dd47      	ble.n	800b49c <_strtod_l+0x4bc>
 800b40c:	2400      	movs	r4, #0
 800b40e:	4625      	mov	r5, r4
 800b410:	9407      	str	r4, [sp, #28]
 800b412:	4626      	mov	r6, r4
 800b414:	9a05      	ldr	r2, [sp, #20]
 800b416:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b56c <_strtod_l+0x58c>
 800b41a:	2322      	movs	r3, #34	@ 0x22
 800b41c:	6013      	str	r3, [r2, #0]
 800b41e:	f04f 0a00 	mov.w	sl, #0
 800b422:	9b07      	ldr	r3, [sp, #28]
 800b424:	2b00      	cmp	r3, #0
 800b426:	f43f ae16 	beq.w	800b056 <_strtod_l+0x76>
 800b42a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b42c:	9805      	ldr	r0, [sp, #20]
 800b42e:	f7ff f955 	bl	800a6dc <_Bfree>
 800b432:	9805      	ldr	r0, [sp, #20]
 800b434:	4631      	mov	r1, r6
 800b436:	f7ff f951 	bl	800a6dc <_Bfree>
 800b43a:	9805      	ldr	r0, [sp, #20]
 800b43c:	4629      	mov	r1, r5
 800b43e:	f7ff f94d 	bl	800a6dc <_Bfree>
 800b442:	9907      	ldr	r1, [sp, #28]
 800b444:	9805      	ldr	r0, [sp, #20]
 800b446:	f7ff f949 	bl	800a6dc <_Bfree>
 800b44a:	9805      	ldr	r0, [sp, #20]
 800b44c:	4621      	mov	r1, r4
 800b44e:	f7ff f945 	bl	800a6dc <_Bfree>
 800b452:	e600      	b.n	800b056 <_strtod_l+0x76>
 800b454:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800b458:	1be0      	subs	r0, r4, r7
 800b45a:	4281      	cmp	r1, r0
 800b45c:	dbbc      	blt.n	800b3d8 <_strtod_l+0x3f8>
 800b45e:	4a40      	ldr	r2, [pc, #256]	@ (800b560 <_strtod_l+0x580>)
 800b460:	f1c3 030f 	rsb	r3, r3, #15
 800b464:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b468:	ed91 7b00 	vldr	d7, [r1]
 800b46c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b46e:	ec4b ab16 	vmov	d6, sl, fp
 800b472:	1acb      	subs	r3, r1, r3
 800b474:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b478:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b47c:	ed92 6b00 	vldr	d6, [r2]
 800b480:	e796      	b.n	800b3b0 <_strtod_l+0x3d0>
 800b482:	3116      	adds	r1, #22
 800b484:	dba8      	blt.n	800b3d8 <_strtod_l+0x3f8>
 800b486:	4b36      	ldr	r3, [pc, #216]	@ (800b560 <_strtod_l+0x580>)
 800b488:	1b3c      	subs	r4, r7, r4
 800b48a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b48e:	ed94 7b00 	vldr	d7, [r4]
 800b492:	ec4b ab16 	vmov	d6, sl, fp
 800b496:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b49a:	e78b      	b.n	800b3b4 <_strtod_l+0x3d4>
 800b49c:	2000      	movs	r0, #0
 800b49e:	ec4b ab17 	vmov	d7, sl, fp
 800b4a2:	4e30      	ldr	r6, [pc, #192]	@ (800b564 <_strtod_l+0x584>)
 800b4a4:	1112      	asrs	r2, r2, #4
 800b4a6:	4601      	mov	r1, r0
 800b4a8:	2a01      	cmp	r2, #1
 800b4aa:	dc23      	bgt.n	800b4f4 <_strtod_l+0x514>
 800b4ac:	b108      	cbz	r0, 800b4b2 <_strtod_l+0x4d2>
 800b4ae:	ec5b ab17 	vmov	sl, fp, d7
 800b4b2:	4a2c      	ldr	r2, [pc, #176]	@ (800b564 <_strtod_l+0x584>)
 800b4b4:	482c      	ldr	r0, [pc, #176]	@ (800b568 <_strtod_l+0x588>)
 800b4b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b4ba:	ed92 7b00 	vldr	d7, [r2]
 800b4be:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b4c2:	ec4b ab16 	vmov	d6, sl, fp
 800b4c6:	4a29      	ldr	r2, [pc, #164]	@ (800b56c <_strtod_l+0x58c>)
 800b4c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b4cc:	ee17 1a90 	vmov	r1, s15
 800b4d0:	400a      	ands	r2, r1
 800b4d2:	4282      	cmp	r2, r0
 800b4d4:	ec5b ab17 	vmov	sl, fp, d7
 800b4d8:	d898      	bhi.n	800b40c <_strtod_l+0x42c>
 800b4da:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800b4de:	4282      	cmp	r2, r0
 800b4e0:	bf86      	itte	hi
 800b4e2:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800b570 <_strtod_l+0x590>
 800b4e6:	f04f 3aff 	movhi.w	sl, #4294967295
 800b4ea:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	9206      	str	r2, [sp, #24]
 800b4f2:	e076      	b.n	800b5e2 <_strtod_l+0x602>
 800b4f4:	f012 0f01 	tst.w	r2, #1
 800b4f8:	d004      	beq.n	800b504 <_strtod_l+0x524>
 800b4fa:	ed96 6b00 	vldr	d6, [r6]
 800b4fe:	2001      	movs	r0, #1
 800b500:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b504:	3101      	adds	r1, #1
 800b506:	1052      	asrs	r2, r2, #1
 800b508:	3608      	adds	r6, #8
 800b50a:	e7cd      	b.n	800b4a8 <_strtod_l+0x4c8>
 800b50c:	d0ef      	beq.n	800b4ee <_strtod_l+0x50e>
 800b50e:	4252      	negs	r2, r2
 800b510:	f012 000f 	ands.w	r0, r2, #15
 800b514:	d00a      	beq.n	800b52c <_strtod_l+0x54c>
 800b516:	4912      	ldr	r1, [pc, #72]	@ (800b560 <_strtod_l+0x580>)
 800b518:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b51c:	ed91 7b00 	vldr	d7, [r1]
 800b520:	ec4b ab16 	vmov	d6, sl, fp
 800b524:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b528:	ec5b ab17 	vmov	sl, fp, d7
 800b52c:	1112      	asrs	r2, r2, #4
 800b52e:	d0de      	beq.n	800b4ee <_strtod_l+0x50e>
 800b530:	2a1f      	cmp	r2, #31
 800b532:	dd1f      	ble.n	800b574 <_strtod_l+0x594>
 800b534:	2400      	movs	r4, #0
 800b536:	4625      	mov	r5, r4
 800b538:	9407      	str	r4, [sp, #28]
 800b53a:	4626      	mov	r6, r4
 800b53c:	9a05      	ldr	r2, [sp, #20]
 800b53e:	2322      	movs	r3, #34	@ 0x22
 800b540:	f04f 0a00 	mov.w	sl, #0
 800b544:	f04f 0b00 	mov.w	fp, #0
 800b548:	6013      	str	r3, [r2, #0]
 800b54a:	e76a      	b.n	800b422 <_strtod_l+0x442>
 800b54c:	0800ce4d 	.word	0x0800ce4d
 800b550:	0800d118 	.word	0x0800d118
 800b554:	0800ce45 	.word	0x0800ce45
 800b558:	0800ce7c 	.word	0x0800ce7c
 800b55c:	0800cfb5 	.word	0x0800cfb5
 800b560:	0800d050 	.word	0x0800d050
 800b564:	0800d028 	.word	0x0800d028
 800b568:	7ca00000 	.word	0x7ca00000
 800b56c:	7ff00000 	.word	0x7ff00000
 800b570:	7fefffff 	.word	0x7fefffff
 800b574:	f012 0110 	ands.w	r1, r2, #16
 800b578:	bf18      	it	ne
 800b57a:	216a      	movne	r1, #106	@ 0x6a
 800b57c:	9106      	str	r1, [sp, #24]
 800b57e:	ec4b ab17 	vmov	d7, sl, fp
 800b582:	49af      	ldr	r1, [pc, #700]	@ (800b840 <_strtod_l+0x860>)
 800b584:	2000      	movs	r0, #0
 800b586:	07d6      	lsls	r6, r2, #31
 800b588:	d504      	bpl.n	800b594 <_strtod_l+0x5b4>
 800b58a:	ed91 6b00 	vldr	d6, [r1]
 800b58e:	2001      	movs	r0, #1
 800b590:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b594:	1052      	asrs	r2, r2, #1
 800b596:	f101 0108 	add.w	r1, r1, #8
 800b59a:	d1f4      	bne.n	800b586 <_strtod_l+0x5a6>
 800b59c:	b108      	cbz	r0, 800b5a2 <_strtod_l+0x5c2>
 800b59e:	ec5b ab17 	vmov	sl, fp, d7
 800b5a2:	9a06      	ldr	r2, [sp, #24]
 800b5a4:	b1b2      	cbz	r2, 800b5d4 <_strtod_l+0x5f4>
 800b5a6:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800b5aa:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800b5ae:	2a00      	cmp	r2, #0
 800b5b0:	4658      	mov	r0, fp
 800b5b2:	dd0f      	ble.n	800b5d4 <_strtod_l+0x5f4>
 800b5b4:	2a1f      	cmp	r2, #31
 800b5b6:	dd55      	ble.n	800b664 <_strtod_l+0x684>
 800b5b8:	2a34      	cmp	r2, #52	@ 0x34
 800b5ba:	bfde      	ittt	le
 800b5bc:	f04f 32ff 	movle.w	r2, #4294967295
 800b5c0:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800b5c4:	408a      	lslle	r2, r1
 800b5c6:	f04f 0a00 	mov.w	sl, #0
 800b5ca:	bfcc      	ite	gt
 800b5cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b5d0:	ea02 0b00 	andle.w	fp, r2, r0
 800b5d4:	ec4b ab17 	vmov	d7, sl, fp
 800b5d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5e0:	d0a8      	beq.n	800b534 <_strtod_l+0x554>
 800b5e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b5e4:	9805      	ldr	r0, [sp, #20]
 800b5e6:	f8cd 9000 	str.w	r9, [sp]
 800b5ea:	462a      	mov	r2, r5
 800b5ec:	f7ff f8de 	bl	800a7ac <__s2b>
 800b5f0:	9007      	str	r0, [sp, #28]
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	f43f af0a 	beq.w	800b40c <_strtod_l+0x42c>
 800b5f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5fa:	1b3f      	subs	r7, r7, r4
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	bfb4      	ite	lt
 800b600:	463b      	movlt	r3, r7
 800b602:	2300      	movge	r3, #0
 800b604:	930a      	str	r3, [sp, #40]	@ 0x28
 800b606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b608:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800b830 <_strtod_l+0x850>
 800b60c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b610:	2400      	movs	r4, #0
 800b612:	930d      	str	r3, [sp, #52]	@ 0x34
 800b614:	4625      	mov	r5, r4
 800b616:	9b07      	ldr	r3, [sp, #28]
 800b618:	9805      	ldr	r0, [sp, #20]
 800b61a:	6859      	ldr	r1, [r3, #4]
 800b61c:	f7ff f81e 	bl	800a65c <_Balloc>
 800b620:	4606      	mov	r6, r0
 800b622:	2800      	cmp	r0, #0
 800b624:	f43f aef6 	beq.w	800b414 <_strtod_l+0x434>
 800b628:	9b07      	ldr	r3, [sp, #28]
 800b62a:	691a      	ldr	r2, [r3, #16]
 800b62c:	ec4b ab19 	vmov	d9, sl, fp
 800b630:	3202      	adds	r2, #2
 800b632:	f103 010c 	add.w	r1, r3, #12
 800b636:	0092      	lsls	r2, r2, #2
 800b638:	300c      	adds	r0, #12
 800b63a:	f7fe f912 	bl	8009862 <memcpy>
 800b63e:	eeb0 0b49 	vmov.f64	d0, d9
 800b642:	9805      	ldr	r0, [sp, #20]
 800b644:	aa14      	add	r2, sp, #80	@ 0x50
 800b646:	a913      	add	r1, sp, #76	@ 0x4c
 800b648:	f7ff fbe4 	bl	800ae14 <__d2b>
 800b64c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b64e:	2800      	cmp	r0, #0
 800b650:	f43f aee0 	beq.w	800b414 <_strtod_l+0x434>
 800b654:	9805      	ldr	r0, [sp, #20]
 800b656:	2101      	movs	r1, #1
 800b658:	f7ff f93e 	bl	800a8d8 <__i2b>
 800b65c:	4605      	mov	r5, r0
 800b65e:	b940      	cbnz	r0, 800b672 <_strtod_l+0x692>
 800b660:	2500      	movs	r5, #0
 800b662:	e6d7      	b.n	800b414 <_strtod_l+0x434>
 800b664:	f04f 31ff 	mov.w	r1, #4294967295
 800b668:	fa01 f202 	lsl.w	r2, r1, r2
 800b66c:	ea02 0a0a 	and.w	sl, r2, sl
 800b670:	e7b0      	b.n	800b5d4 <_strtod_l+0x5f4>
 800b672:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800b674:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b676:	2f00      	cmp	r7, #0
 800b678:	bfab      	itete	ge
 800b67a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800b67c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800b67e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800b682:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800b686:	bfac      	ite	ge
 800b688:	eb07 0903 	addge.w	r9, r7, r3
 800b68c:	eba3 0807 	sublt.w	r8, r3, r7
 800b690:	9b06      	ldr	r3, [sp, #24]
 800b692:	1aff      	subs	r7, r7, r3
 800b694:	4417      	add	r7, r2
 800b696:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800b69a:	4a6a      	ldr	r2, [pc, #424]	@ (800b844 <_strtod_l+0x864>)
 800b69c:	3f01      	subs	r7, #1
 800b69e:	4297      	cmp	r7, r2
 800b6a0:	da51      	bge.n	800b746 <_strtod_l+0x766>
 800b6a2:	1bd1      	subs	r1, r2, r7
 800b6a4:	291f      	cmp	r1, #31
 800b6a6:	eba3 0301 	sub.w	r3, r3, r1
 800b6aa:	f04f 0201 	mov.w	r2, #1
 800b6ae:	dc3e      	bgt.n	800b72e <_strtod_l+0x74e>
 800b6b0:	408a      	lsls	r2, r1
 800b6b2:	920c      	str	r2, [sp, #48]	@ 0x30
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b6b8:	eb09 0703 	add.w	r7, r9, r3
 800b6bc:	4498      	add	r8, r3
 800b6be:	9b06      	ldr	r3, [sp, #24]
 800b6c0:	45b9      	cmp	r9, r7
 800b6c2:	4498      	add	r8, r3
 800b6c4:	464b      	mov	r3, r9
 800b6c6:	bfa8      	it	ge
 800b6c8:	463b      	movge	r3, r7
 800b6ca:	4543      	cmp	r3, r8
 800b6cc:	bfa8      	it	ge
 800b6ce:	4643      	movge	r3, r8
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	bfc2      	ittt	gt
 800b6d4:	1aff      	subgt	r7, r7, r3
 800b6d6:	eba8 0803 	subgt.w	r8, r8, r3
 800b6da:	eba9 0903 	subgt.w	r9, r9, r3
 800b6de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	dd16      	ble.n	800b712 <_strtod_l+0x732>
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	9805      	ldr	r0, [sp, #20]
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	f7ff f9ad 	bl	800aa48 <__pow5mult>
 800b6ee:	4605      	mov	r5, r0
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	d0b5      	beq.n	800b660 <_strtod_l+0x680>
 800b6f4:	4601      	mov	r1, r0
 800b6f6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b6f8:	9805      	ldr	r0, [sp, #20]
 800b6fa:	f7ff f903 	bl	800a904 <__multiply>
 800b6fe:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b700:	2800      	cmp	r0, #0
 800b702:	f43f ae87 	beq.w	800b414 <_strtod_l+0x434>
 800b706:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b708:	9805      	ldr	r0, [sp, #20]
 800b70a:	f7fe ffe7 	bl	800a6dc <_Bfree>
 800b70e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b710:	9312      	str	r3, [sp, #72]	@ 0x48
 800b712:	2f00      	cmp	r7, #0
 800b714:	dc1b      	bgt.n	800b74e <_strtod_l+0x76e>
 800b716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b718:	2b00      	cmp	r3, #0
 800b71a:	dd21      	ble.n	800b760 <_strtod_l+0x780>
 800b71c:	4631      	mov	r1, r6
 800b71e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b720:	9805      	ldr	r0, [sp, #20]
 800b722:	f7ff f991 	bl	800aa48 <__pow5mult>
 800b726:	4606      	mov	r6, r0
 800b728:	b9d0      	cbnz	r0, 800b760 <_strtod_l+0x780>
 800b72a:	2600      	movs	r6, #0
 800b72c:	e672      	b.n	800b414 <_strtod_l+0x434>
 800b72e:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800b732:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800b736:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800b73a:	37e2      	adds	r7, #226	@ 0xe2
 800b73c:	fa02 f107 	lsl.w	r1, r2, r7
 800b740:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b742:	920c      	str	r2, [sp, #48]	@ 0x30
 800b744:	e7b8      	b.n	800b6b8 <_strtod_l+0x6d8>
 800b746:	2200      	movs	r2, #0
 800b748:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b74a:	2201      	movs	r2, #1
 800b74c:	e7f9      	b.n	800b742 <_strtod_l+0x762>
 800b74e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b750:	9805      	ldr	r0, [sp, #20]
 800b752:	463a      	mov	r2, r7
 800b754:	f7ff f9d2 	bl	800aafc <__lshift>
 800b758:	9012      	str	r0, [sp, #72]	@ 0x48
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d1db      	bne.n	800b716 <_strtod_l+0x736>
 800b75e:	e659      	b.n	800b414 <_strtod_l+0x434>
 800b760:	f1b8 0f00 	cmp.w	r8, #0
 800b764:	dd07      	ble.n	800b776 <_strtod_l+0x796>
 800b766:	4631      	mov	r1, r6
 800b768:	9805      	ldr	r0, [sp, #20]
 800b76a:	4642      	mov	r2, r8
 800b76c:	f7ff f9c6 	bl	800aafc <__lshift>
 800b770:	4606      	mov	r6, r0
 800b772:	2800      	cmp	r0, #0
 800b774:	d0d9      	beq.n	800b72a <_strtod_l+0x74a>
 800b776:	f1b9 0f00 	cmp.w	r9, #0
 800b77a:	dd08      	ble.n	800b78e <_strtod_l+0x7ae>
 800b77c:	4629      	mov	r1, r5
 800b77e:	9805      	ldr	r0, [sp, #20]
 800b780:	464a      	mov	r2, r9
 800b782:	f7ff f9bb 	bl	800aafc <__lshift>
 800b786:	4605      	mov	r5, r0
 800b788:	2800      	cmp	r0, #0
 800b78a:	f43f ae43 	beq.w	800b414 <_strtod_l+0x434>
 800b78e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b790:	9805      	ldr	r0, [sp, #20]
 800b792:	4632      	mov	r2, r6
 800b794:	f7ff fa3a 	bl	800ac0c <__mdiff>
 800b798:	4604      	mov	r4, r0
 800b79a:	2800      	cmp	r0, #0
 800b79c:	f43f ae3a 	beq.w	800b414 <_strtod_l+0x434>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800b7a6:	60c3      	str	r3, [r0, #12]
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	f7ff fa13 	bl	800abd4 <__mcmp>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	da4c      	bge.n	800b84c <_strtod_l+0x86c>
 800b7b2:	ea58 080a 	orrs.w	r8, r8, sl
 800b7b6:	d172      	bne.n	800b89e <_strtod_l+0x8be>
 800b7b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d16e      	bne.n	800b89e <_strtod_l+0x8be>
 800b7c0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b7c4:	0d1b      	lsrs	r3, r3, #20
 800b7c6:	051b      	lsls	r3, r3, #20
 800b7c8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b7cc:	d967      	bls.n	800b89e <_strtod_l+0x8be>
 800b7ce:	6963      	ldr	r3, [r4, #20]
 800b7d0:	b913      	cbnz	r3, 800b7d8 <_strtod_l+0x7f8>
 800b7d2:	6923      	ldr	r3, [r4, #16]
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	dd62      	ble.n	800b89e <_strtod_l+0x8be>
 800b7d8:	4621      	mov	r1, r4
 800b7da:	2201      	movs	r2, #1
 800b7dc:	9805      	ldr	r0, [sp, #20]
 800b7de:	f7ff f98d 	bl	800aafc <__lshift>
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	f7ff f9f5 	bl	800abd4 <__mcmp>
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	dd57      	ble.n	800b89e <_strtod_l+0x8be>
 800b7ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b7f2:	9a06      	ldr	r2, [sp, #24]
 800b7f4:	0d1b      	lsrs	r3, r3, #20
 800b7f6:	051b      	lsls	r3, r3, #20
 800b7f8:	2a00      	cmp	r2, #0
 800b7fa:	d06e      	beq.n	800b8da <_strtod_l+0x8fa>
 800b7fc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b800:	d86b      	bhi.n	800b8da <_strtod_l+0x8fa>
 800b802:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b806:	f67f ae99 	bls.w	800b53c <_strtod_l+0x55c>
 800b80a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800b838 <_strtod_l+0x858>
 800b80e:	ec4b ab16 	vmov	d6, sl, fp
 800b812:	4b0d      	ldr	r3, [pc, #52]	@ (800b848 <_strtod_l+0x868>)
 800b814:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b818:	ee17 2a90 	vmov	r2, s15
 800b81c:	4013      	ands	r3, r2
 800b81e:	ec5b ab17 	vmov	sl, fp, d7
 800b822:	2b00      	cmp	r3, #0
 800b824:	f47f ae01 	bne.w	800b42a <_strtod_l+0x44a>
 800b828:	9a05      	ldr	r2, [sp, #20]
 800b82a:	2322      	movs	r3, #34	@ 0x22
 800b82c:	6013      	str	r3, [r2, #0]
 800b82e:	e5fc      	b.n	800b42a <_strtod_l+0x44a>
 800b830:	ffc00000 	.word	0xffc00000
 800b834:	41dfffff 	.word	0x41dfffff
 800b838:	00000000 	.word	0x00000000
 800b83c:	39500000 	.word	0x39500000
 800b840:	0800d140 	.word	0x0800d140
 800b844:	fffffc02 	.word	0xfffffc02
 800b848:	7ff00000 	.word	0x7ff00000
 800b84c:	46d9      	mov	r9, fp
 800b84e:	d15d      	bne.n	800b90c <_strtod_l+0x92c>
 800b850:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b854:	f1b8 0f00 	cmp.w	r8, #0
 800b858:	d02a      	beq.n	800b8b0 <_strtod_l+0x8d0>
 800b85a:	4aa9      	ldr	r2, [pc, #676]	@ (800bb00 <_strtod_l+0xb20>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d12a      	bne.n	800b8b6 <_strtod_l+0x8d6>
 800b860:	9b06      	ldr	r3, [sp, #24]
 800b862:	4652      	mov	r2, sl
 800b864:	b1fb      	cbz	r3, 800b8a6 <_strtod_l+0x8c6>
 800b866:	4ba7      	ldr	r3, [pc, #668]	@ (800bb04 <_strtod_l+0xb24>)
 800b868:	ea0b 0303 	and.w	r3, fp, r3
 800b86c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b870:	f04f 31ff 	mov.w	r1, #4294967295
 800b874:	d81a      	bhi.n	800b8ac <_strtod_l+0x8cc>
 800b876:	0d1b      	lsrs	r3, r3, #20
 800b878:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b87c:	fa01 f303 	lsl.w	r3, r1, r3
 800b880:	429a      	cmp	r2, r3
 800b882:	d118      	bne.n	800b8b6 <_strtod_l+0x8d6>
 800b884:	4ba0      	ldr	r3, [pc, #640]	@ (800bb08 <_strtod_l+0xb28>)
 800b886:	4599      	cmp	r9, r3
 800b888:	d102      	bne.n	800b890 <_strtod_l+0x8b0>
 800b88a:	3201      	adds	r2, #1
 800b88c:	f43f adc2 	beq.w	800b414 <_strtod_l+0x434>
 800b890:	4b9c      	ldr	r3, [pc, #624]	@ (800bb04 <_strtod_l+0xb24>)
 800b892:	ea09 0303 	and.w	r3, r9, r3
 800b896:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800b89a:	f04f 0a00 	mov.w	sl, #0
 800b89e:	9b06      	ldr	r3, [sp, #24]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d1b2      	bne.n	800b80a <_strtod_l+0x82a>
 800b8a4:	e5c1      	b.n	800b42a <_strtod_l+0x44a>
 800b8a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8aa:	e7e9      	b.n	800b880 <_strtod_l+0x8a0>
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	e7e7      	b.n	800b880 <_strtod_l+0x8a0>
 800b8b0:	ea53 030a 	orrs.w	r3, r3, sl
 800b8b4:	d09b      	beq.n	800b7ee <_strtod_l+0x80e>
 800b8b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8b8:	b1c3      	cbz	r3, 800b8ec <_strtod_l+0x90c>
 800b8ba:	ea13 0f09 	tst.w	r3, r9
 800b8be:	d0ee      	beq.n	800b89e <_strtod_l+0x8be>
 800b8c0:	9a06      	ldr	r2, [sp, #24]
 800b8c2:	4650      	mov	r0, sl
 800b8c4:	4659      	mov	r1, fp
 800b8c6:	f1b8 0f00 	cmp.w	r8, #0
 800b8ca:	d013      	beq.n	800b8f4 <_strtod_l+0x914>
 800b8cc:	f7ff fb6d 	bl	800afaa <sulp>
 800b8d0:	ee39 7b00 	vadd.f64	d7, d9, d0
 800b8d4:	ec5b ab17 	vmov	sl, fp, d7
 800b8d8:	e7e1      	b.n	800b89e <_strtod_l+0x8be>
 800b8da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b8de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b8e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b8e6:	f04f 3aff 	mov.w	sl, #4294967295
 800b8ea:	e7d8      	b.n	800b89e <_strtod_l+0x8be>
 800b8ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b8ee:	ea13 0f0a 	tst.w	r3, sl
 800b8f2:	e7e4      	b.n	800b8be <_strtod_l+0x8de>
 800b8f4:	f7ff fb59 	bl	800afaa <sulp>
 800b8f8:	ee39 0b40 	vsub.f64	d0, d9, d0
 800b8fc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800b900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b904:	ec5b ab10 	vmov	sl, fp, d0
 800b908:	d1c9      	bne.n	800b89e <_strtod_l+0x8be>
 800b90a:	e617      	b.n	800b53c <_strtod_l+0x55c>
 800b90c:	4629      	mov	r1, r5
 800b90e:	4620      	mov	r0, r4
 800b910:	f7ff fad8 	bl	800aec4 <__ratio>
 800b914:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800b918:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b920:	d85d      	bhi.n	800b9de <_strtod_l+0x9fe>
 800b922:	f1b8 0f00 	cmp.w	r8, #0
 800b926:	d164      	bne.n	800b9f2 <_strtod_l+0xa12>
 800b928:	f1ba 0f00 	cmp.w	sl, #0
 800b92c:	d14b      	bne.n	800b9c6 <_strtod_l+0x9e6>
 800b92e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b932:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d160      	bne.n	800b9fc <_strtod_l+0xa1c>
 800b93a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800b93e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800b942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b946:	d401      	bmi.n	800b94c <_strtod_l+0x96c>
 800b948:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b94c:	eeb1 ab48 	vneg.f64	d10, d8
 800b950:	486c      	ldr	r0, [pc, #432]	@ (800bb04 <_strtod_l+0xb24>)
 800b952:	496e      	ldr	r1, [pc, #440]	@ (800bb0c <_strtod_l+0xb2c>)
 800b954:	ea09 0700 	and.w	r7, r9, r0
 800b958:	428f      	cmp	r7, r1
 800b95a:	ec53 2b1a 	vmov	r2, r3, d10
 800b95e:	d17d      	bne.n	800ba5c <_strtod_l+0xa7c>
 800b960:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800b964:	ec4b ab1c 	vmov	d12, sl, fp
 800b968:	eeb0 0b4c 	vmov.f64	d0, d12
 800b96c:	f7ff f9e2 	bl	800ad34 <__ulp>
 800b970:	4864      	ldr	r0, [pc, #400]	@ (800bb04 <_strtod_l+0xb24>)
 800b972:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800b976:	ee1c 3a90 	vmov	r3, s25
 800b97a:	4a65      	ldr	r2, [pc, #404]	@ (800bb10 <_strtod_l+0xb30>)
 800b97c:	ea03 0100 	and.w	r1, r3, r0
 800b980:	4291      	cmp	r1, r2
 800b982:	ec5b ab1c 	vmov	sl, fp, d12
 800b986:	d93c      	bls.n	800ba02 <_strtod_l+0xa22>
 800b988:	ee19 2a90 	vmov	r2, s19
 800b98c:	4b5e      	ldr	r3, [pc, #376]	@ (800bb08 <_strtod_l+0xb28>)
 800b98e:	429a      	cmp	r2, r3
 800b990:	d104      	bne.n	800b99c <_strtod_l+0x9bc>
 800b992:	ee19 3a10 	vmov	r3, s18
 800b996:	3301      	adds	r3, #1
 800b998:	f43f ad3c 	beq.w	800b414 <_strtod_l+0x434>
 800b99c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800bb08 <_strtod_l+0xb28>
 800b9a0:	f04f 3aff 	mov.w	sl, #4294967295
 800b9a4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b9a6:	9805      	ldr	r0, [sp, #20]
 800b9a8:	f7fe fe98 	bl	800a6dc <_Bfree>
 800b9ac:	9805      	ldr	r0, [sp, #20]
 800b9ae:	4631      	mov	r1, r6
 800b9b0:	f7fe fe94 	bl	800a6dc <_Bfree>
 800b9b4:	9805      	ldr	r0, [sp, #20]
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	f7fe fe90 	bl	800a6dc <_Bfree>
 800b9bc:	9805      	ldr	r0, [sp, #20]
 800b9be:	4621      	mov	r1, r4
 800b9c0:	f7fe fe8c 	bl	800a6dc <_Bfree>
 800b9c4:	e627      	b.n	800b616 <_strtod_l+0x636>
 800b9c6:	f1ba 0f01 	cmp.w	sl, #1
 800b9ca:	d103      	bne.n	800b9d4 <_strtod_l+0x9f4>
 800b9cc:	f1bb 0f00 	cmp.w	fp, #0
 800b9d0:	f43f adb4 	beq.w	800b53c <_strtod_l+0x55c>
 800b9d4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800b9d8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800b9dc:	e7b8      	b.n	800b950 <_strtod_l+0x970>
 800b9de:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800b9e2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b9e6:	f1b8 0f00 	cmp.w	r8, #0
 800b9ea:	d0af      	beq.n	800b94c <_strtod_l+0x96c>
 800b9ec:	eeb0 ab48 	vmov.f64	d10, d8
 800b9f0:	e7ae      	b.n	800b950 <_strtod_l+0x970>
 800b9f2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800b9f6:	eeb0 8b4a 	vmov.f64	d8, d10
 800b9fa:	e7a9      	b.n	800b950 <_strtod_l+0x970>
 800b9fc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ba00:	e7a6      	b.n	800b950 <_strtod_l+0x970>
 800ba02:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ba06:	9b06      	ldr	r3, [sp, #24]
 800ba08:	46d9      	mov	r9, fp
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1ca      	bne.n	800b9a4 <_strtod_l+0x9c4>
 800ba0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ba12:	0d1b      	lsrs	r3, r3, #20
 800ba14:	051b      	lsls	r3, r3, #20
 800ba16:	429f      	cmp	r7, r3
 800ba18:	d1c4      	bne.n	800b9a4 <_strtod_l+0x9c4>
 800ba1a:	ec51 0b18 	vmov	r0, r1, d8
 800ba1e:	f7f4 fe8b 	bl	8000738 <__aeabi_d2lz>
 800ba22:	f7f4 fe43 	bl	80006ac <__aeabi_l2d>
 800ba26:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800ba2a:	ec41 0b17 	vmov	d7, r0, r1
 800ba2e:	ea49 090a 	orr.w	r9, r9, sl
 800ba32:	ea59 0908 	orrs.w	r9, r9, r8
 800ba36:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ba3a:	d03c      	beq.n	800bab6 <_strtod_l+0xad6>
 800ba3c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800bae8 <_strtod_l+0xb08>
 800ba40:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ba44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba48:	f53f acef 	bmi.w	800b42a <_strtod_l+0x44a>
 800ba4c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800baf0 <_strtod_l+0xb10>
 800ba50:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ba54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba58:	dda4      	ble.n	800b9a4 <_strtod_l+0x9c4>
 800ba5a:	e4e6      	b.n	800b42a <_strtod_l+0x44a>
 800ba5c:	9906      	ldr	r1, [sp, #24]
 800ba5e:	b1e1      	cbz	r1, 800ba9a <_strtod_l+0xaba>
 800ba60:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800ba64:	d819      	bhi.n	800ba9a <_strtod_l+0xaba>
 800ba66:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800ba6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6e:	d811      	bhi.n	800ba94 <_strtod_l+0xab4>
 800ba70:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800ba74:	ee18 3a10 	vmov	r3, s16
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	bf38      	it	cc
 800ba7c:	2301      	movcc	r3, #1
 800ba7e:	ee08 3a10 	vmov	s16, r3
 800ba82:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800ba86:	f1b8 0f00 	cmp.w	r8, #0
 800ba8a:	d111      	bne.n	800bab0 <_strtod_l+0xad0>
 800ba8c:	eeb1 7b48 	vneg.f64	d7, d8
 800ba90:	ec53 2b17 	vmov	r2, r3, d7
 800ba94:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800ba98:	1bcb      	subs	r3, r1, r7
 800ba9a:	eeb0 0b49 	vmov.f64	d0, d9
 800ba9e:	ec43 2b1a 	vmov	d10, r2, r3
 800baa2:	f7ff f947 	bl	800ad34 <__ulp>
 800baa6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800baaa:	ec5b ab19 	vmov	sl, fp, d9
 800baae:	e7aa      	b.n	800ba06 <_strtod_l+0xa26>
 800bab0:	eeb0 7b48 	vmov.f64	d7, d8
 800bab4:	e7ec      	b.n	800ba90 <_strtod_l+0xab0>
 800bab6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800baf8 <_strtod_l+0xb18>
 800baba:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800babe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac2:	f57f af6f 	bpl.w	800b9a4 <_strtod_l+0x9c4>
 800bac6:	e4b0      	b.n	800b42a <_strtod_l+0x44a>
 800bac8:	2300      	movs	r3, #0
 800baca:	9308      	str	r3, [sp, #32]
 800bacc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bace:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bad0:	6013      	str	r3, [r2, #0]
 800bad2:	f7ff bac4 	b.w	800b05e <_strtod_l+0x7e>
 800bad6:	2a65      	cmp	r2, #101	@ 0x65
 800bad8:	f43f abbf 	beq.w	800b25a <_strtod_l+0x27a>
 800badc:	2a45      	cmp	r2, #69	@ 0x45
 800bade:	f43f abbc 	beq.w	800b25a <_strtod_l+0x27a>
 800bae2:	2101      	movs	r1, #1
 800bae4:	f7ff bbf4 	b.w	800b2d0 <_strtod_l+0x2f0>
 800bae8:	94a03595 	.word	0x94a03595
 800baec:	3fdfffff 	.word	0x3fdfffff
 800baf0:	35afe535 	.word	0x35afe535
 800baf4:	3fe00000 	.word	0x3fe00000
 800baf8:	94a03595 	.word	0x94a03595
 800bafc:	3fcfffff 	.word	0x3fcfffff
 800bb00:	000fffff 	.word	0x000fffff
 800bb04:	7ff00000 	.word	0x7ff00000
 800bb08:	7fefffff 	.word	0x7fefffff
 800bb0c:	7fe00000 	.word	0x7fe00000
 800bb10:	7c9fffff 	.word	0x7c9fffff

0800bb14 <_strtod_r>:
 800bb14:	4b01      	ldr	r3, [pc, #4]	@ (800bb1c <_strtod_r+0x8>)
 800bb16:	f7ff ba63 	b.w	800afe0 <_strtod_l>
 800bb1a:	bf00      	nop
 800bb1c:	2400008c 	.word	0x2400008c

0800bb20 <_strtol_l.isra.0>:
 800bb20:	2b24      	cmp	r3, #36	@ 0x24
 800bb22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb26:	4686      	mov	lr, r0
 800bb28:	4690      	mov	r8, r2
 800bb2a:	d801      	bhi.n	800bb30 <_strtol_l.isra.0+0x10>
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d106      	bne.n	800bb3e <_strtol_l.isra.0+0x1e>
 800bb30:	f7fd fe6a 	bl	8009808 <__errno>
 800bb34:	2316      	movs	r3, #22
 800bb36:	6003      	str	r3, [r0, #0]
 800bb38:	2000      	movs	r0, #0
 800bb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb3e:	4834      	ldr	r0, [pc, #208]	@ (800bc10 <_strtol_l.isra.0+0xf0>)
 800bb40:	460d      	mov	r5, r1
 800bb42:	462a      	mov	r2, r5
 800bb44:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb48:	5d06      	ldrb	r6, [r0, r4]
 800bb4a:	f016 0608 	ands.w	r6, r6, #8
 800bb4e:	d1f8      	bne.n	800bb42 <_strtol_l.isra.0+0x22>
 800bb50:	2c2d      	cmp	r4, #45	@ 0x2d
 800bb52:	d110      	bne.n	800bb76 <_strtol_l.isra.0+0x56>
 800bb54:	782c      	ldrb	r4, [r5, #0]
 800bb56:	2601      	movs	r6, #1
 800bb58:	1c95      	adds	r5, r2, #2
 800bb5a:	f033 0210 	bics.w	r2, r3, #16
 800bb5e:	d115      	bne.n	800bb8c <_strtol_l.isra.0+0x6c>
 800bb60:	2c30      	cmp	r4, #48	@ 0x30
 800bb62:	d10d      	bne.n	800bb80 <_strtol_l.isra.0+0x60>
 800bb64:	782a      	ldrb	r2, [r5, #0]
 800bb66:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bb6a:	2a58      	cmp	r2, #88	@ 0x58
 800bb6c:	d108      	bne.n	800bb80 <_strtol_l.isra.0+0x60>
 800bb6e:	786c      	ldrb	r4, [r5, #1]
 800bb70:	3502      	adds	r5, #2
 800bb72:	2310      	movs	r3, #16
 800bb74:	e00a      	b.n	800bb8c <_strtol_l.isra.0+0x6c>
 800bb76:	2c2b      	cmp	r4, #43	@ 0x2b
 800bb78:	bf04      	itt	eq
 800bb7a:	782c      	ldrbeq	r4, [r5, #0]
 800bb7c:	1c95      	addeq	r5, r2, #2
 800bb7e:	e7ec      	b.n	800bb5a <_strtol_l.isra.0+0x3a>
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d1f6      	bne.n	800bb72 <_strtol_l.isra.0+0x52>
 800bb84:	2c30      	cmp	r4, #48	@ 0x30
 800bb86:	bf14      	ite	ne
 800bb88:	230a      	movne	r3, #10
 800bb8a:	2308      	moveq	r3, #8
 800bb8c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bb90:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bb94:	2200      	movs	r2, #0
 800bb96:	fbbc f9f3 	udiv	r9, ip, r3
 800bb9a:	4610      	mov	r0, r2
 800bb9c:	fb03 ca19 	mls	sl, r3, r9, ip
 800bba0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bba4:	2f09      	cmp	r7, #9
 800bba6:	d80f      	bhi.n	800bbc8 <_strtol_l.isra.0+0xa8>
 800bba8:	463c      	mov	r4, r7
 800bbaa:	42a3      	cmp	r3, r4
 800bbac:	dd1b      	ble.n	800bbe6 <_strtol_l.isra.0+0xc6>
 800bbae:	1c57      	adds	r7, r2, #1
 800bbb0:	d007      	beq.n	800bbc2 <_strtol_l.isra.0+0xa2>
 800bbb2:	4581      	cmp	r9, r0
 800bbb4:	d314      	bcc.n	800bbe0 <_strtol_l.isra.0+0xc0>
 800bbb6:	d101      	bne.n	800bbbc <_strtol_l.isra.0+0x9c>
 800bbb8:	45a2      	cmp	sl, r4
 800bbba:	db11      	blt.n	800bbe0 <_strtol_l.isra.0+0xc0>
 800bbbc:	fb00 4003 	mla	r0, r0, r3, r4
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbc6:	e7eb      	b.n	800bba0 <_strtol_l.isra.0+0x80>
 800bbc8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bbcc:	2f19      	cmp	r7, #25
 800bbce:	d801      	bhi.n	800bbd4 <_strtol_l.isra.0+0xb4>
 800bbd0:	3c37      	subs	r4, #55	@ 0x37
 800bbd2:	e7ea      	b.n	800bbaa <_strtol_l.isra.0+0x8a>
 800bbd4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bbd8:	2f19      	cmp	r7, #25
 800bbda:	d804      	bhi.n	800bbe6 <_strtol_l.isra.0+0xc6>
 800bbdc:	3c57      	subs	r4, #87	@ 0x57
 800bbde:	e7e4      	b.n	800bbaa <_strtol_l.isra.0+0x8a>
 800bbe0:	f04f 32ff 	mov.w	r2, #4294967295
 800bbe4:	e7ed      	b.n	800bbc2 <_strtol_l.isra.0+0xa2>
 800bbe6:	1c53      	adds	r3, r2, #1
 800bbe8:	d108      	bne.n	800bbfc <_strtol_l.isra.0+0xdc>
 800bbea:	2322      	movs	r3, #34	@ 0x22
 800bbec:	f8ce 3000 	str.w	r3, [lr]
 800bbf0:	4660      	mov	r0, ip
 800bbf2:	f1b8 0f00 	cmp.w	r8, #0
 800bbf6:	d0a0      	beq.n	800bb3a <_strtol_l.isra.0+0x1a>
 800bbf8:	1e69      	subs	r1, r5, #1
 800bbfa:	e006      	b.n	800bc0a <_strtol_l.isra.0+0xea>
 800bbfc:	b106      	cbz	r6, 800bc00 <_strtol_l.isra.0+0xe0>
 800bbfe:	4240      	negs	r0, r0
 800bc00:	f1b8 0f00 	cmp.w	r8, #0
 800bc04:	d099      	beq.n	800bb3a <_strtol_l.isra.0+0x1a>
 800bc06:	2a00      	cmp	r2, #0
 800bc08:	d1f6      	bne.n	800bbf8 <_strtol_l.isra.0+0xd8>
 800bc0a:	f8c8 1000 	str.w	r1, [r8]
 800bc0e:	e794      	b.n	800bb3a <_strtol_l.isra.0+0x1a>
 800bc10:	0800d169 	.word	0x0800d169

0800bc14 <_strtol_r>:
 800bc14:	f7ff bf84 	b.w	800bb20 <_strtol_l.isra.0>

0800bc18 <__ssputs_r>:
 800bc18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc1c:	688e      	ldr	r6, [r1, #8]
 800bc1e:	461f      	mov	r7, r3
 800bc20:	42be      	cmp	r6, r7
 800bc22:	680b      	ldr	r3, [r1, #0]
 800bc24:	4682      	mov	sl, r0
 800bc26:	460c      	mov	r4, r1
 800bc28:	4690      	mov	r8, r2
 800bc2a:	d82d      	bhi.n	800bc88 <__ssputs_r+0x70>
 800bc2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc34:	d026      	beq.n	800bc84 <__ssputs_r+0x6c>
 800bc36:	6965      	ldr	r5, [r4, #20]
 800bc38:	6909      	ldr	r1, [r1, #16]
 800bc3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc3e:	eba3 0901 	sub.w	r9, r3, r1
 800bc42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc46:	1c7b      	adds	r3, r7, #1
 800bc48:	444b      	add	r3, r9
 800bc4a:	106d      	asrs	r5, r5, #1
 800bc4c:	429d      	cmp	r5, r3
 800bc4e:	bf38      	it	cc
 800bc50:	461d      	movcc	r5, r3
 800bc52:	0553      	lsls	r3, r2, #21
 800bc54:	d527      	bpl.n	800bca6 <__ssputs_r+0x8e>
 800bc56:	4629      	mov	r1, r5
 800bc58:	f7fe fc74 	bl	800a544 <_malloc_r>
 800bc5c:	4606      	mov	r6, r0
 800bc5e:	b360      	cbz	r0, 800bcba <__ssputs_r+0xa2>
 800bc60:	6921      	ldr	r1, [r4, #16]
 800bc62:	464a      	mov	r2, r9
 800bc64:	f7fd fdfd 	bl	8009862 <memcpy>
 800bc68:	89a3      	ldrh	r3, [r4, #12]
 800bc6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bc6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc72:	81a3      	strh	r3, [r4, #12]
 800bc74:	6126      	str	r6, [r4, #16]
 800bc76:	6165      	str	r5, [r4, #20]
 800bc78:	444e      	add	r6, r9
 800bc7a:	eba5 0509 	sub.w	r5, r5, r9
 800bc7e:	6026      	str	r6, [r4, #0]
 800bc80:	60a5      	str	r5, [r4, #8]
 800bc82:	463e      	mov	r6, r7
 800bc84:	42be      	cmp	r6, r7
 800bc86:	d900      	bls.n	800bc8a <__ssputs_r+0x72>
 800bc88:	463e      	mov	r6, r7
 800bc8a:	6820      	ldr	r0, [r4, #0]
 800bc8c:	4632      	mov	r2, r6
 800bc8e:	4641      	mov	r1, r8
 800bc90:	f000 fb9c 	bl	800c3cc <memmove>
 800bc94:	68a3      	ldr	r3, [r4, #8]
 800bc96:	1b9b      	subs	r3, r3, r6
 800bc98:	60a3      	str	r3, [r4, #8]
 800bc9a:	6823      	ldr	r3, [r4, #0]
 800bc9c:	4433      	add	r3, r6
 800bc9e:	6023      	str	r3, [r4, #0]
 800bca0:	2000      	movs	r0, #0
 800bca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bca6:	462a      	mov	r2, r5
 800bca8:	f000 ff53 	bl	800cb52 <_realloc_r>
 800bcac:	4606      	mov	r6, r0
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d1e0      	bne.n	800bc74 <__ssputs_r+0x5c>
 800bcb2:	6921      	ldr	r1, [r4, #16]
 800bcb4:	4650      	mov	r0, sl
 800bcb6:	f7fe fbd1 	bl	800a45c <_free_r>
 800bcba:	230c      	movs	r3, #12
 800bcbc:	f8ca 3000 	str.w	r3, [sl]
 800bcc0:	89a3      	ldrh	r3, [r4, #12]
 800bcc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcc6:	81a3      	strh	r3, [r4, #12]
 800bcc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bccc:	e7e9      	b.n	800bca2 <__ssputs_r+0x8a>
	...

0800bcd0 <_svfiprintf_r>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	4698      	mov	r8, r3
 800bcd6:	898b      	ldrh	r3, [r1, #12]
 800bcd8:	061b      	lsls	r3, r3, #24
 800bcda:	b09d      	sub	sp, #116	@ 0x74
 800bcdc:	4607      	mov	r7, r0
 800bcde:	460d      	mov	r5, r1
 800bce0:	4614      	mov	r4, r2
 800bce2:	d510      	bpl.n	800bd06 <_svfiprintf_r+0x36>
 800bce4:	690b      	ldr	r3, [r1, #16]
 800bce6:	b973      	cbnz	r3, 800bd06 <_svfiprintf_r+0x36>
 800bce8:	2140      	movs	r1, #64	@ 0x40
 800bcea:	f7fe fc2b 	bl	800a544 <_malloc_r>
 800bcee:	6028      	str	r0, [r5, #0]
 800bcf0:	6128      	str	r0, [r5, #16]
 800bcf2:	b930      	cbnz	r0, 800bd02 <_svfiprintf_r+0x32>
 800bcf4:	230c      	movs	r3, #12
 800bcf6:	603b      	str	r3, [r7, #0]
 800bcf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcfc:	b01d      	add	sp, #116	@ 0x74
 800bcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd02:	2340      	movs	r3, #64	@ 0x40
 800bd04:	616b      	str	r3, [r5, #20]
 800bd06:	2300      	movs	r3, #0
 800bd08:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd0a:	2320      	movs	r3, #32
 800bd0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd10:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd14:	2330      	movs	r3, #48	@ 0x30
 800bd16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800beb4 <_svfiprintf_r+0x1e4>
 800bd1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd1e:	f04f 0901 	mov.w	r9, #1
 800bd22:	4623      	mov	r3, r4
 800bd24:	469a      	mov	sl, r3
 800bd26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd2a:	b10a      	cbz	r2, 800bd30 <_svfiprintf_r+0x60>
 800bd2c:	2a25      	cmp	r2, #37	@ 0x25
 800bd2e:	d1f9      	bne.n	800bd24 <_svfiprintf_r+0x54>
 800bd30:	ebba 0b04 	subs.w	fp, sl, r4
 800bd34:	d00b      	beq.n	800bd4e <_svfiprintf_r+0x7e>
 800bd36:	465b      	mov	r3, fp
 800bd38:	4622      	mov	r2, r4
 800bd3a:	4629      	mov	r1, r5
 800bd3c:	4638      	mov	r0, r7
 800bd3e:	f7ff ff6b 	bl	800bc18 <__ssputs_r>
 800bd42:	3001      	adds	r0, #1
 800bd44:	f000 80a7 	beq.w	800be96 <_svfiprintf_r+0x1c6>
 800bd48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd4a:	445a      	add	r2, fp
 800bd4c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd4e:	f89a 3000 	ldrb.w	r3, [sl]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	f000 809f 	beq.w	800be96 <_svfiprintf_r+0x1c6>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd62:	f10a 0a01 	add.w	sl, sl, #1
 800bd66:	9304      	str	r3, [sp, #16]
 800bd68:	9307      	str	r3, [sp, #28]
 800bd6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd6e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd70:	4654      	mov	r4, sl
 800bd72:	2205      	movs	r2, #5
 800bd74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd78:	484e      	ldr	r0, [pc, #312]	@ (800beb4 <_svfiprintf_r+0x1e4>)
 800bd7a:	f7f4 fab1 	bl	80002e0 <memchr>
 800bd7e:	9a04      	ldr	r2, [sp, #16]
 800bd80:	b9d8      	cbnz	r0, 800bdba <_svfiprintf_r+0xea>
 800bd82:	06d0      	lsls	r0, r2, #27
 800bd84:	bf44      	itt	mi
 800bd86:	2320      	movmi	r3, #32
 800bd88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd8c:	0711      	lsls	r1, r2, #28
 800bd8e:	bf44      	itt	mi
 800bd90:	232b      	movmi	r3, #43	@ 0x2b
 800bd92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd96:	f89a 3000 	ldrb.w	r3, [sl]
 800bd9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd9c:	d015      	beq.n	800bdca <_svfiprintf_r+0xfa>
 800bd9e:	9a07      	ldr	r2, [sp, #28]
 800bda0:	4654      	mov	r4, sl
 800bda2:	2000      	movs	r0, #0
 800bda4:	f04f 0c0a 	mov.w	ip, #10
 800bda8:	4621      	mov	r1, r4
 800bdaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdae:	3b30      	subs	r3, #48	@ 0x30
 800bdb0:	2b09      	cmp	r3, #9
 800bdb2:	d94b      	bls.n	800be4c <_svfiprintf_r+0x17c>
 800bdb4:	b1b0      	cbz	r0, 800bde4 <_svfiprintf_r+0x114>
 800bdb6:	9207      	str	r2, [sp, #28]
 800bdb8:	e014      	b.n	800bde4 <_svfiprintf_r+0x114>
 800bdba:	eba0 0308 	sub.w	r3, r0, r8
 800bdbe:	fa09 f303 	lsl.w	r3, r9, r3
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	9304      	str	r3, [sp, #16]
 800bdc6:	46a2      	mov	sl, r4
 800bdc8:	e7d2      	b.n	800bd70 <_svfiprintf_r+0xa0>
 800bdca:	9b03      	ldr	r3, [sp, #12]
 800bdcc:	1d19      	adds	r1, r3, #4
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	9103      	str	r1, [sp, #12]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	bfbb      	ittet	lt
 800bdd6:	425b      	neglt	r3, r3
 800bdd8:	f042 0202 	orrlt.w	r2, r2, #2
 800bddc:	9307      	strge	r3, [sp, #28]
 800bdde:	9307      	strlt	r3, [sp, #28]
 800bde0:	bfb8      	it	lt
 800bde2:	9204      	strlt	r2, [sp, #16]
 800bde4:	7823      	ldrb	r3, [r4, #0]
 800bde6:	2b2e      	cmp	r3, #46	@ 0x2e
 800bde8:	d10a      	bne.n	800be00 <_svfiprintf_r+0x130>
 800bdea:	7863      	ldrb	r3, [r4, #1]
 800bdec:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdee:	d132      	bne.n	800be56 <_svfiprintf_r+0x186>
 800bdf0:	9b03      	ldr	r3, [sp, #12]
 800bdf2:	1d1a      	adds	r2, r3, #4
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	9203      	str	r2, [sp, #12]
 800bdf8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bdfc:	3402      	adds	r4, #2
 800bdfe:	9305      	str	r3, [sp, #20]
 800be00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bec4 <_svfiprintf_r+0x1f4>
 800be04:	7821      	ldrb	r1, [r4, #0]
 800be06:	2203      	movs	r2, #3
 800be08:	4650      	mov	r0, sl
 800be0a:	f7f4 fa69 	bl	80002e0 <memchr>
 800be0e:	b138      	cbz	r0, 800be20 <_svfiprintf_r+0x150>
 800be10:	9b04      	ldr	r3, [sp, #16]
 800be12:	eba0 000a 	sub.w	r0, r0, sl
 800be16:	2240      	movs	r2, #64	@ 0x40
 800be18:	4082      	lsls	r2, r0
 800be1a:	4313      	orrs	r3, r2
 800be1c:	3401      	adds	r4, #1
 800be1e:	9304      	str	r3, [sp, #16]
 800be20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be24:	4824      	ldr	r0, [pc, #144]	@ (800beb8 <_svfiprintf_r+0x1e8>)
 800be26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be2a:	2206      	movs	r2, #6
 800be2c:	f7f4 fa58 	bl	80002e0 <memchr>
 800be30:	2800      	cmp	r0, #0
 800be32:	d036      	beq.n	800bea2 <_svfiprintf_r+0x1d2>
 800be34:	4b21      	ldr	r3, [pc, #132]	@ (800bebc <_svfiprintf_r+0x1ec>)
 800be36:	bb1b      	cbnz	r3, 800be80 <_svfiprintf_r+0x1b0>
 800be38:	9b03      	ldr	r3, [sp, #12]
 800be3a:	3307      	adds	r3, #7
 800be3c:	f023 0307 	bic.w	r3, r3, #7
 800be40:	3308      	adds	r3, #8
 800be42:	9303      	str	r3, [sp, #12]
 800be44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be46:	4433      	add	r3, r6
 800be48:	9309      	str	r3, [sp, #36]	@ 0x24
 800be4a:	e76a      	b.n	800bd22 <_svfiprintf_r+0x52>
 800be4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800be50:	460c      	mov	r4, r1
 800be52:	2001      	movs	r0, #1
 800be54:	e7a8      	b.n	800bda8 <_svfiprintf_r+0xd8>
 800be56:	2300      	movs	r3, #0
 800be58:	3401      	adds	r4, #1
 800be5a:	9305      	str	r3, [sp, #20]
 800be5c:	4619      	mov	r1, r3
 800be5e:	f04f 0c0a 	mov.w	ip, #10
 800be62:	4620      	mov	r0, r4
 800be64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be68:	3a30      	subs	r2, #48	@ 0x30
 800be6a:	2a09      	cmp	r2, #9
 800be6c:	d903      	bls.n	800be76 <_svfiprintf_r+0x1a6>
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d0c6      	beq.n	800be00 <_svfiprintf_r+0x130>
 800be72:	9105      	str	r1, [sp, #20]
 800be74:	e7c4      	b.n	800be00 <_svfiprintf_r+0x130>
 800be76:	fb0c 2101 	mla	r1, ip, r1, r2
 800be7a:	4604      	mov	r4, r0
 800be7c:	2301      	movs	r3, #1
 800be7e:	e7f0      	b.n	800be62 <_svfiprintf_r+0x192>
 800be80:	ab03      	add	r3, sp, #12
 800be82:	9300      	str	r3, [sp, #0]
 800be84:	462a      	mov	r2, r5
 800be86:	4b0e      	ldr	r3, [pc, #56]	@ (800bec0 <_svfiprintf_r+0x1f0>)
 800be88:	a904      	add	r1, sp, #16
 800be8a:	4638      	mov	r0, r7
 800be8c:	f7fc fd84 	bl	8008998 <_printf_float>
 800be90:	1c42      	adds	r2, r0, #1
 800be92:	4606      	mov	r6, r0
 800be94:	d1d6      	bne.n	800be44 <_svfiprintf_r+0x174>
 800be96:	89ab      	ldrh	r3, [r5, #12]
 800be98:	065b      	lsls	r3, r3, #25
 800be9a:	f53f af2d 	bmi.w	800bcf8 <_svfiprintf_r+0x28>
 800be9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bea0:	e72c      	b.n	800bcfc <_svfiprintf_r+0x2c>
 800bea2:	ab03      	add	r3, sp, #12
 800bea4:	9300      	str	r3, [sp, #0]
 800bea6:	462a      	mov	r2, r5
 800bea8:	4b05      	ldr	r3, [pc, #20]	@ (800bec0 <_svfiprintf_r+0x1f0>)
 800beaa:	a904      	add	r1, sp, #16
 800beac:	4638      	mov	r0, r7
 800beae:	f7fc fffb 	bl	8008ea8 <_printf_i>
 800beb2:	e7ed      	b.n	800be90 <_svfiprintf_r+0x1c0>
 800beb4:	0800cf61 	.word	0x0800cf61
 800beb8:	0800cf6b 	.word	0x0800cf6b
 800bebc:	08008999 	.word	0x08008999
 800bec0:	0800bc19 	.word	0x0800bc19
 800bec4:	0800cf67 	.word	0x0800cf67

0800bec8 <__sfputc_r>:
 800bec8:	6893      	ldr	r3, [r2, #8]
 800beca:	3b01      	subs	r3, #1
 800becc:	2b00      	cmp	r3, #0
 800bece:	b410      	push	{r4}
 800bed0:	6093      	str	r3, [r2, #8]
 800bed2:	da08      	bge.n	800bee6 <__sfputc_r+0x1e>
 800bed4:	6994      	ldr	r4, [r2, #24]
 800bed6:	42a3      	cmp	r3, r4
 800bed8:	db01      	blt.n	800bede <__sfputc_r+0x16>
 800beda:	290a      	cmp	r1, #10
 800bedc:	d103      	bne.n	800bee6 <__sfputc_r+0x1e>
 800bede:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bee2:	f000 b9df 	b.w	800c2a4 <__swbuf_r>
 800bee6:	6813      	ldr	r3, [r2, #0]
 800bee8:	1c58      	adds	r0, r3, #1
 800beea:	6010      	str	r0, [r2, #0]
 800beec:	7019      	strb	r1, [r3, #0]
 800beee:	4608      	mov	r0, r1
 800bef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bef4:	4770      	bx	lr

0800bef6 <__sfputs_r>:
 800bef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef8:	4606      	mov	r6, r0
 800befa:	460f      	mov	r7, r1
 800befc:	4614      	mov	r4, r2
 800befe:	18d5      	adds	r5, r2, r3
 800bf00:	42ac      	cmp	r4, r5
 800bf02:	d101      	bne.n	800bf08 <__sfputs_r+0x12>
 800bf04:	2000      	movs	r0, #0
 800bf06:	e007      	b.n	800bf18 <__sfputs_r+0x22>
 800bf08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf0c:	463a      	mov	r2, r7
 800bf0e:	4630      	mov	r0, r6
 800bf10:	f7ff ffda 	bl	800bec8 <__sfputc_r>
 800bf14:	1c43      	adds	r3, r0, #1
 800bf16:	d1f3      	bne.n	800bf00 <__sfputs_r+0xa>
 800bf18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf1c <_vfiprintf_r>:
 800bf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf20:	460d      	mov	r5, r1
 800bf22:	b09d      	sub	sp, #116	@ 0x74
 800bf24:	4614      	mov	r4, r2
 800bf26:	4698      	mov	r8, r3
 800bf28:	4606      	mov	r6, r0
 800bf2a:	b118      	cbz	r0, 800bf34 <_vfiprintf_r+0x18>
 800bf2c:	6a03      	ldr	r3, [r0, #32]
 800bf2e:	b90b      	cbnz	r3, 800bf34 <_vfiprintf_r+0x18>
 800bf30:	f7fd fb6a 	bl	8009608 <__sinit>
 800bf34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf36:	07d9      	lsls	r1, r3, #31
 800bf38:	d405      	bmi.n	800bf46 <_vfiprintf_r+0x2a>
 800bf3a:	89ab      	ldrh	r3, [r5, #12]
 800bf3c:	059a      	lsls	r2, r3, #22
 800bf3e:	d402      	bmi.n	800bf46 <_vfiprintf_r+0x2a>
 800bf40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf42:	f7fd fc8c 	bl	800985e <__retarget_lock_acquire_recursive>
 800bf46:	89ab      	ldrh	r3, [r5, #12]
 800bf48:	071b      	lsls	r3, r3, #28
 800bf4a:	d501      	bpl.n	800bf50 <_vfiprintf_r+0x34>
 800bf4c:	692b      	ldr	r3, [r5, #16]
 800bf4e:	b99b      	cbnz	r3, 800bf78 <_vfiprintf_r+0x5c>
 800bf50:	4629      	mov	r1, r5
 800bf52:	4630      	mov	r0, r6
 800bf54:	f000 f9e4 	bl	800c320 <__swsetup_r>
 800bf58:	b170      	cbz	r0, 800bf78 <_vfiprintf_r+0x5c>
 800bf5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf5c:	07dc      	lsls	r4, r3, #31
 800bf5e:	d504      	bpl.n	800bf6a <_vfiprintf_r+0x4e>
 800bf60:	f04f 30ff 	mov.w	r0, #4294967295
 800bf64:	b01d      	add	sp, #116	@ 0x74
 800bf66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf6a:	89ab      	ldrh	r3, [r5, #12]
 800bf6c:	0598      	lsls	r0, r3, #22
 800bf6e:	d4f7      	bmi.n	800bf60 <_vfiprintf_r+0x44>
 800bf70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf72:	f7fd fc75 	bl	8009860 <__retarget_lock_release_recursive>
 800bf76:	e7f3      	b.n	800bf60 <_vfiprintf_r+0x44>
 800bf78:	2300      	movs	r3, #0
 800bf7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf7c:	2320      	movs	r3, #32
 800bf7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf82:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf86:	2330      	movs	r3, #48	@ 0x30
 800bf88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c138 <_vfiprintf_r+0x21c>
 800bf8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf90:	f04f 0901 	mov.w	r9, #1
 800bf94:	4623      	mov	r3, r4
 800bf96:	469a      	mov	sl, r3
 800bf98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf9c:	b10a      	cbz	r2, 800bfa2 <_vfiprintf_r+0x86>
 800bf9e:	2a25      	cmp	r2, #37	@ 0x25
 800bfa0:	d1f9      	bne.n	800bf96 <_vfiprintf_r+0x7a>
 800bfa2:	ebba 0b04 	subs.w	fp, sl, r4
 800bfa6:	d00b      	beq.n	800bfc0 <_vfiprintf_r+0xa4>
 800bfa8:	465b      	mov	r3, fp
 800bfaa:	4622      	mov	r2, r4
 800bfac:	4629      	mov	r1, r5
 800bfae:	4630      	mov	r0, r6
 800bfb0:	f7ff ffa1 	bl	800bef6 <__sfputs_r>
 800bfb4:	3001      	adds	r0, #1
 800bfb6:	f000 80a7 	beq.w	800c108 <_vfiprintf_r+0x1ec>
 800bfba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfbc:	445a      	add	r2, fp
 800bfbe:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfc0:	f89a 3000 	ldrb.w	r3, [sl]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f000 809f 	beq.w	800c108 <_vfiprintf_r+0x1ec>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f04f 32ff 	mov.w	r2, #4294967295
 800bfd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfd4:	f10a 0a01 	add.w	sl, sl, #1
 800bfd8:	9304      	str	r3, [sp, #16]
 800bfda:	9307      	str	r3, [sp, #28]
 800bfdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bfe0:	931a      	str	r3, [sp, #104]	@ 0x68
 800bfe2:	4654      	mov	r4, sl
 800bfe4:	2205      	movs	r2, #5
 800bfe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfea:	4853      	ldr	r0, [pc, #332]	@ (800c138 <_vfiprintf_r+0x21c>)
 800bfec:	f7f4 f978 	bl	80002e0 <memchr>
 800bff0:	9a04      	ldr	r2, [sp, #16]
 800bff2:	b9d8      	cbnz	r0, 800c02c <_vfiprintf_r+0x110>
 800bff4:	06d1      	lsls	r1, r2, #27
 800bff6:	bf44      	itt	mi
 800bff8:	2320      	movmi	r3, #32
 800bffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bffe:	0713      	lsls	r3, r2, #28
 800c000:	bf44      	itt	mi
 800c002:	232b      	movmi	r3, #43	@ 0x2b
 800c004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c008:	f89a 3000 	ldrb.w	r3, [sl]
 800c00c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c00e:	d015      	beq.n	800c03c <_vfiprintf_r+0x120>
 800c010:	9a07      	ldr	r2, [sp, #28]
 800c012:	4654      	mov	r4, sl
 800c014:	2000      	movs	r0, #0
 800c016:	f04f 0c0a 	mov.w	ip, #10
 800c01a:	4621      	mov	r1, r4
 800c01c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c020:	3b30      	subs	r3, #48	@ 0x30
 800c022:	2b09      	cmp	r3, #9
 800c024:	d94b      	bls.n	800c0be <_vfiprintf_r+0x1a2>
 800c026:	b1b0      	cbz	r0, 800c056 <_vfiprintf_r+0x13a>
 800c028:	9207      	str	r2, [sp, #28]
 800c02a:	e014      	b.n	800c056 <_vfiprintf_r+0x13a>
 800c02c:	eba0 0308 	sub.w	r3, r0, r8
 800c030:	fa09 f303 	lsl.w	r3, r9, r3
 800c034:	4313      	orrs	r3, r2
 800c036:	9304      	str	r3, [sp, #16]
 800c038:	46a2      	mov	sl, r4
 800c03a:	e7d2      	b.n	800bfe2 <_vfiprintf_r+0xc6>
 800c03c:	9b03      	ldr	r3, [sp, #12]
 800c03e:	1d19      	adds	r1, r3, #4
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	9103      	str	r1, [sp, #12]
 800c044:	2b00      	cmp	r3, #0
 800c046:	bfbb      	ittet	lt
 800c048:	425b      	neglt	r3, r3
 800c04a:	f042 0202 	orrlt.w	r2, r2, #2
 800c04e:	9307      	strge	r3, [sp, #28]
 800c050:	9307      	strlt	r3, [sp, #28]
 800c052:	bfb8      	it	lt
 800c054:	9204      	strlt	r2, [sp, #16]
 800c056:	7823      	ldrb	r3, [r4, #0]
 800c058:	2b2e      	cmp	r3, #46	@ 0x2e
 800c05a:	d10a      	bne.n	800c072 <_vfiprintf_r+0x156>
 800c05c:	7863      	ldrb	r3, [r4, #1]
 800c05e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c060:	d132      	bne.n	800c0c8 <_vfiprintf_r+0x1ac>
 800c062:	9b03      	ldr	r3, [sp, #12]
 800c064:	1d1a      	adds	r2, r3, #4
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	9203      	str	r2, [sp, #12]
 800c06a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c06e:	3402      	adds	r4, #2
 800c070:	9305      	str	r3, [sp, #20]
 800c072:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c148 <_vfiprintf_r+0x22c>
 800c076:	7821      	ldrb	r1, [r4, #0]
 800c078:	2203      	movs	r2, #3
 800c07a:	4650      	mov	r0, sl
 800c07c:	f7f4 f930 	bl	80002e0 <memchr>
 800c080:	b138      	cbz	r0, 800c092 <_vfiprintf_r+0x176>
 800c082:	9b04      	ldr	r3, [sp, #16]
 800c084:	eba0 000a 	sub.w	r0, r0, sl
 800c088:	2240      	movs	r2, #64	@ 0x40
 800c08a:	4082      	lsls	r2, r0
 800c08c:	4313      	orrs	r3, r2
 800c08e:	3401      	adds	r4, #1
 800c090:	9304      	str	r3, [sp, #16]
 800c092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c096:	4829      	ldr	r0, [pc, #164]	@ (800c13c <_vfiprintf_r+0x220>)
 800c098:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c09c:	2206      	movs	r2, #6
 800c09e:	f7f4 f91f 	bl	80002e0 <memchr>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d03f      	beq.n	800c126 <_vfiprintf_r+0x20a>
 800c0a6:	4b26      	ldr	r3, [pc, #152]	@ (800c140 <_vfiprintf_r+0x224>)
 800c0a8:	bb1b      	cbnz	r3, 800c0f2 <_vfiprintf_r+0x1d6>
 800c0aa:	9b03      	ldr	r3, [sp, #12]
 800c0ac:	3307      	adds	r3, #7
 800c0ae:	f023 0307 	bic.w	r3, r3, #7
 800c0b2:	3308      	adds	r3, #8
 800c0b4:	9303      	str	r3, [sp, #12]
 800c0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0b8:	443b      	add	r3, r7
 800c0ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0bc:	e76a      	b.n	800bf94 <_vfiprintf_r+0x78>
 800c0be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0c2:	460c      	mov	r4, r1
 800c0c4:	2001      	movs	r0, #1
 800c0c6:	e7a8      	b.n	800c01a <_vfiprintf_r+0xfe>
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	3401      	adds	r4, #1
 800c0cc:	9305      	str	r3, [sp, #20]
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	f04f 0c0a 	mov.w	ip, #10
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0da:	3a30      	subs	r2, #48	@ 0x30
 800c0dc:	2a09      	cmp	r2, #9
 800c0de:	d903      	bls.n	800c0e8 <_vfiprintf_r+0x1cc>
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d0c6      	beq.n	800c072 <_vfiprintf_r+0x156>
 800c0e4:	9105      	str	r1, [sp, #20]
 800c0e6:	e7c4      	b.n	800c072 <_vfiprintf_r+0x156>
 800c0e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	e7f0      	b.n	800c0d4 <_vfiprintf_r+0x1b8>
 800c0f2:	ab03      	add	r3, sp, #12
 800c0f4:	9300      	str	r3, [sp, #0]
 800c0f6:	462a      	mov	r2, r5
 800c0f8:	4b12      	ldr	r3, [pc, #72]	@ (800c144 <_vfiprintf_r+0x228>)
 800c0fa:	a904      	add	r1, sp, #16
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	f7fc fc4b 	bl	8008998 <_printf_float>
 800c102:	4607      	mov	r7, r0
 800c104:	1c78      	adds	r0, r7, #1
 800c106:	d1d6      	bne.n	800c0b6 <_vfiprintf_r+0x19a>
 800c108:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c10a:	07d9      	lsls	r1, r3, #31
 800c10c:	d405      	bmi.n	800c11a <_vfiprintf_r+0x1fe>
 800c10e:	89ab      	ldrh	r3, [r5, #12]
 800c110:	059a      	lsls	r2, r3, #22
 800c112:	d402      	bmi.n	800c11a <_vfiprintf_r+0x1fe>
 800c114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c116:	f7fd fba3 	bl	8009860 <__retarget_lock_release_recursive>
 800c11a:	89ab      	ldrh	r3, [r5, #12]
 800c11c:	065b      	lsls	r3, r3, #25
 800c11e:	f53f af1f 	bmi.w	800bf60 <_vfiprintf_r+0x44>
 800c122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c124:	e71e      	b.n	800bf64 <_vfiprintf_r+0x48>
 800c126:	ab03      	add	r3, sp, #12
 800c128:	9300      	str	r3, [sp, #0]
 800c12a:	462a      	mov	r2, r5
 800c12c:	4b05      	ldr	r3, [pc, #20]	@ (800c144 <_vfiprintf_r+0x228>)
 800c12e:	a904      	add	r1, sp, #16
 800c130:	4630      	mov	r0, r6
 800c132:	f7fc feb9 	bl	8008ea8 <_printf_i>
 800c136:	e7e4      	b.n	800c102 <_vfiprintf_r+0x1e6>
 800c138:	0800cf61 	.word	0x0800cf61
 800c13c:	0800cf6b 	.word	0x0800cf6b
 800c140:	08008999 	.word	0x08008999
 800c144:	0800bef7 	.word	0x0800bef7
 800c148:	0800cf67 	.word	0x0800cf67

0800c14c <__sflush_r>:
 800c14c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c154:	0716      	lsls	r6, r2, #28
 800c156:	4605      	mov	r5, r0
 800c158:	460c      	mov	r4, r1
 800c15a:	d454      	bmi.n	800c206 <__sflush_r+0xba>
 800c15c:	684b      	ldr	r3, [r1, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	dc02      	bgt.n	800c168 <__sflush_r+0x1c>
 800c162:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c164:	2b00      	cmp	r3, #0
 800c166:	dd48      	ble.n	800c1fa <__sflush_r+0xae>
 800c168:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c16a:	2e00      	cmp	r6, #0
 800c16c:	d045      	beq.n	800c1fa <__sflush_r+0xae>
 800c16e:	2300      	movs	r3, #0
 800c170:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c174:	682f      	ldr	r7, [r5, #0]
 800c176:	6a21      	ldr	r1, [r4, #32]
 800c178:	602b      	str	r3, [r5, #0]
 800c17a:	d030      	beq.n	800c1de <__sflush_r+0x92>
 800c17c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c17e:	89a3      	ldrh	r3, [r4, #12]
 800c180:	0759      	lsls	r1, r3, #29
 800c182:	d505      	bpl.n	800c190 <__sflush_r+0x44>
 800c184:	6863      	ldr	r3, [r4, #4]
 800c186:	1ad2      	subs	r2, r2, r3
 800c188:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c18a:	b10b      	cbz	r3, 800c190 <__sflush_r+0x44>
 800c18c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c18e:	1ad2      	subs	r2, r2, r3
 800c190:	2300      	movs	r3, #0
 800c192:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c194:	6a21      	ldr	r1, [r4, #32]
 800c196:	4628      	mov	r0, r5
 800c198:	47b0      	blx	r6
 800c19a:	1c43      	adds	r3, r0, #1
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	d106      	bne.n	800c1ae <__sflush_r+0x62>
 800c1a0:	6829      	ldr	r1, [r5, #0]
 800c1a2:	291d      	cmp	r1, #29
 800c1a4:	d82b      	bhi.n	800c1fe <__sflush_r+0xb2>
 800c1a6:	4a2a      	ldr	r2, [pc, #168]	@ (800c250 <__sflush_r+0x104>)
 800c1a8:	40ca      	lsrs	r2, r1
 800c1aa:	07d6      	lsls	r6, r2, #31
 800c1ac:	d527      	bpl.n	800c1fe <__sflush_r+0xb2>
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	6062      	str	r2, [r4, #4]
 800c1b2:	04d9      	lsls	r1, r3, #19
 800c1b4:	6922      	ldr	r2, [r4, #16]
 800c1b6:	6022      	str	r2, [r4, #0]
 800c1b8:	d504      	bpl.n	800c1c4 <__sflush_r+0x78>
 800c1ba:	1c42      	adds	r2, r0, #1
 800c1bc:	d101      	bne.n	800c1c2 <__sflush_r+0x76>
 800c1be:	682b      	ldr	r3, [r5, #0]
 800c1c0:	b903      	cbnz	r3, 800c1c4 <__sflush_r+0x78>
 800c1c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c1c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1c6:	602f      	str	r7, [r5, #0]
 800c1c8:	b1b9      	cbz	r1, 800c1fa <__sflush_r+0xae>
 800c1ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1ce:	4299      	cmp	r1, r3
 800c1d0:	d002      	beq.n	800c1d8 <__sflush_r+0x8c>
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	f7fe f942 	bl	800a45c <_free_r>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1dc:	e00d      	b.n	800c1fa <__sflush_r+0xae>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	47b0      	blx	r6
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	1c50      	adds	r0, r2, #1
 800c1e8:	d1c9      	bne.n	800c17e <__sflush_r+0x32>
 800c1ea:	682b      	ldr	r3, [r5, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d0c6      	beq.n	800c17e <__sflush_r+0x32>
 800c1f0:	2b1d      	cmp	r3, #29
 800c1f2:	d001      	beq.n	800c1f8 <__sflush_r+0xac>
 800c1f4:	2b16      	cmp	r3, #22
 800c1f6:	d11e      	bne.n	800c236 <__sflush_r+0xea>
 800c1f8:	602f      	str	r7, [r5, #0]
 800c1fa:	2000      	movs	r0, #0
 800c1fc:	e022      	b.n	800c244 <__sflush_r+0xf8>
 800c1fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c202:	b21b      	sxth	r3, r3
 800c204:	e01b      	b.n	800c23e <__sflush_r+0xf2>
 800c206:	690f      	ldr	r7, [r1, #16]
 800c208:	2f00      	cmp	r7, #0
 800c20a:	d0f6      	beq.n	800c1fa <__sflush_r+0xae>
 800c20c:	0793      	lsls	r3, r2, #30
 800c20e:	680e      	ldr	r6, [r1, #0]
 800c210:	bf08      	it	eq
 800c212:	694b      	ldreq	r3, [r1, #20]
 800c214:	600f      	str	r7, [r1, #0]
 800c216:	bf18      	it	ne
 800c218:	2300      	movne	r3, #0
 800c21a:	eba6 0807 	sub.w	r8, r6, r7
 800c21e:	608b      	str	r3, [r1, #8]
 800c220:	f1b8 0f00 	cmp.w	r8, #0
 800c224:	dde9      	ble.n	800c1fa <__sflush_r+0xae>
 800c226:	6a21      	ldr	r1, [r4, #32]
 800c228:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c22a:	4643      	mov	r3, r8
 800c22c:	463a      	mov	r2, r7
 800c22e:	4628      	mov	r0, r5
 800c230:	47b0      	blx	r6
 800c232:	2800      	cmp	r0, #0
 800c234:	dc08      	bgt.n	800c248 <__sflush_r+0xfc>
 800c236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c23a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c23e:	81a3      	strh	r3, [r4, #12]
 800c240:	f04f 30ff 	mov.w	r0, #4294967295
 800c244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c248:	4407      	add	r7, r0
 800c24a:	eba8 0800 	sub.w	r8, r8, r0
 800c24e:	e7e7      	b.n	800c220 <__sflush_r+0xd4>
 800c250:	20400001 	.word	0x20400001

0800c254 <_fflush_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	690b      	ldr	r3, [r1, #16]
 800c258:	4605      	mov	r5, r0
 800c25a:	460c      	mov	r4, r1
 800c25c:	b913      	cbnz	r3, 800c264 <_fflush_r+0x10>
 800c25e:	2500      	movs	r5, #0
 800c260:	4628      	mov	r0, r5
 800c262:	bd38      	pop	{r3, r4, r5, pc}
 800c264:	b118      	cbz	r0, 800c26e <_fflush_r+0x1a>
 800c266:	6a03      	ldr	r3, [r0, #32]
 800c268:	b90b      	cbnz	r3, 800c26e <_fflush_r+0x1a>
 800c26a:	f7fd f9cd 	bl	8009608 <__sinit>
 800c26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d0f3      	beq.n	800c25e <_fflush_r+0xa>
 800c276:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c278:	07d0      	lsls	r0, r2, #31
 800c27a:	d404      	bmi.n	800c286 <_fflush_r+0x32>
 800c27c:	0599      	lsls	r1, r3, #22
 800c27e:	d402      	bmi.n	800c286 <_fflush_r+0x32>
 800c280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c282:	f7fd faec 	bl	800985e <__retarget_lock_acquire_recursive>
 800c286:	4628      	mov	r0, r5
 800c288:	4621      	mov	r1, r4
 800c28a:	f7ff ff5f 	bl	800c14c <__sflush_r>
 800c28e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c290:	07da      	lsls	r2, r3, #31
 800c292:	4605      	mov	r5, r0
 800c294:	d4e4      	bmi.n	800c260 <_fflush_r+0xc>
 800c296:	89a3      	ldrh	r3, [r4, #12]
 800c298:	059b      	lsls	r3, r3, #22
 800c29a:	d4e1      	bmi.n	800c260 <_fflush_r+0xc>
 800c29c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c29e:	f7fd fadf 	bl	8009860 <__retarget_lock_release_recursive>
 800c2a2:	e7dd      	b.n	800c260 <_fflush_r+0xc>

0800c2a4 <__swbuf_r>:
 800c2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a6:	460e      	mov	r6, r1
 800c2a8:	4614      	mov	r4, r2
 800c2aa:	4605      	mov	r5, r0
 800c2ac:	b118      	cbz	r0, 800c2b6 <__swbuf_r+0x12>
 800c2ae:	6a03      	ldr	r3, [r0, #32]
 800c2b0:	b90b      	cbnz	r3, 800c2b6 <__swbuf_r+0x12>
 800c2b2:	f7fd f9a9 	bl	8009608 <__sinit>
 800c2b6:	69a3      	ldr	r3, [r4, #24]
 800c2b8:	60a3      	str	r3, [r4, #8]
 800c2ba:	89a3      	ldrh	r3, [r4, #12]
 800c2bc:	071a      	lsls	r2, r3, #28
 800c2be:	d501      	bpl.n	800c2c4 <__swbuf_r+0x20>
 800c2c0:	6923      	ldr	r3, [r4, #16]
 800c2c2:	b943      	cbnz	r3, 800c2d6 <__swbuf_r+0x32>
 800c2c4:	4621      	mov	r1, r4
 800c2c6:	4628      	mov	r0, r5
 800c2c8:	f000 f82a 	bl	800c320 <__swsetup_r>
 800c2cc:	b118      	cbz	r0, 800c2d6 <__swbuf_r+0x32>
 800c2ce:	f04f 37ff 	mov.w	r7, #4294967295
 800c2d2:	4638      	mov	r0, r7
 800c2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	6922      	ldr	r2, [r4, #16]
 800c2da:	1a98      	subs	r0, r3, r2
 800c2dc:	6963      	ldr	r3, [r4, #20]
 800c2de:	b2f6      	uxtb	r6, r6
 800c2e0:	4283      	cmp	r3, r0
 800c2e2:	4637      	mov	r7, r6
 800c2e4:	dc05      	bgt.n	800c2f2 <__swbuf_r+0x4e>
 800c2e6:	4621      	mov	r1, r4
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	f7ff ffb3 	bl	800c254 <_fflush_r>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d1ed      	bne.n	800c2ce <__swbuf_r+0x2a>
 800c2f2:	68a3      	ldr	r3, [r4, #8]
 800c2f4:	3b01      	subs	r3, #1
 800c2f6:	60a3      	str	r3, [r4, #8]
 800c2f8:	6823      	ldr	r3, [r4, #0]
 800c2fa:	1c5a      	adds	r2, r3, #1
 800c2fc:	6022      	str	r2, [r4, #0]
 800c2fe:	701e      	strb	r6, [r3, #0]
 800c300:	6962      	ldr	r2, [r4, #20]
 800c302:	1c43      	adds	r3, r0, #1
 800c304:	429a      	cmp	r2, r3
 800c306:	d004      	beq.n	800c312 <__swbuf_r+0x6e>
 800c308:	89a3      	ldrh	r3, [r4, #12]
 800c30a:	07db      	lsls	r3, r3, #31
 800c30c:	d5e1      	bpl.n	800c2d2 <__swbuf_r+0x2e>
 800c30e:	2e0a      	cmp	r6, #10
 800c310:	d1df      	bne.n	800c2d2 <__swbuf_r+0x2e>
 800c312:	4621      	mov	r1, r4
 800c314:	4628      	mov	r0, r5
 800c316:	f7ff ff9d 	bl	800c254 <_fflush_r>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d0d9      	beq.n	800c2d2 <__swbuf_r+0x2e>
 800c31e:	e7d6      	b.n	800c2ce <__swbuf_r+0x2a>

0800c320 <__swsetup_r>:
 800c320:	b538      	push	{r3, r4, r5, lr}
 800c322:	4b29      	ldr	r3, [pc, #164]	@ (800c3c8 <__swsetup_r+0xa8>)
 800c324:	4605      	mov	r5, r0
 800c326:	6818      	ldr	r0, [r3, #0]
 800c328:	460c      	mov	r4, r1
 800c32a:	b118      	cbz	r0, 800c334 <__swsetup_r+0x14>
 800c32c:	6a03      	ldr	r3, [r0, #32]
 800c32e:	b90b      	cbnz	r3, 800c334 <__swsetup_r+0x14>
 800c330:	f7fd f96a 	bl	8009608 <__sinit>
 800c334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c338:	0719      	lsls	r1, r3, #28
 800c33a:	d422      	bmi.n	800c382 <__swsetup_r+0x62>
 800c33c:	06da      	lsls	r2, r3, #27
 800c33e:	d407      	bmi.n	800c350 <__swsetup_r+0x30>
 800c340:	2209      	movs	r2, #9
 800c342:	602a      	str	r2, [r5, #0]
 800c344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c348:	81a3      	strh	r3, [r4, #12]
 800c34a:	f04f 30ff 	mov.w	r0, #4294967295
 800c34e:	e033      	b.n	800c3b8 <__swsetup_r+0x98>
 800c350:	0758      	lsls	r0, r3, #29
 800c352:	d512      	bpl.n	800c37a <__swsetup_r+0x5a>
 800c354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c356:	b141      	cbz	r1, 800c36a <__swsetup_r+0x4a>
 800c358:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c35c:	4299      	cmp	r1, r3
 800c35e:	d002      	beq.n	800c366 <__swsetup_r+0x46>
 800c360:	4628      	mov	r0, r5
 800c362:	f7fe f87b 	bl	800a45c <_free_r>
 800c366:	2300      	movs	r3, #0
 800c368:	6363      	str	r3, [r4, #52]	@ 0x34
 800c36a:	89a3      	ldrh	r3, [r4, #12]
 800c36c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c370:	81a3      	strh	r3, [r4, #12]
 800c372:	2300      	movs	r3, #0
 800c374:	6063      	str	r3, [r4, #4]
 800c376:	6923      	ldr	r3, [r4, #16]
 800c378:	6023      	str	r3, [r4, #0]
 800c37a:	89a3      	ldrh	r3, [r4, #12]
 800c37c:	f043 0308 	orr.w	r3, r3, #8
 800c380:	81a3      	strh	r3, [r4, #12]
 800c382:	6923      	ldr	r3, [r4, #16]
 800c384:	b94b      	cbnz	r3, 800c39a <__swsetup_r+0x7a>
 800c386:	89a3      	ldrh	r3, [r4, #12]
 800c388:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c38c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c390:	d003      	beq.n	800c39a <__swsetup_r+0x7a>
 800c392:	4621      	mov	r1, r4
 800c394:	4628      	mov	r0, r5
 800c396:	f000 fc4f 	bl	800cc38 <__smakebuf_r>
 800c39a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c39e:	f013 0201 	ands.w	r2, r3, #1
 800c3a2:	d00a      	beq.n	800c3ba <__swsetup_r+0x9a>
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	60a2      	str	r2, [r4, #8]
 800c3a8:	6962      	ldr	r2, [r4, #20]
 800c3aa:	4252      	negs	r2, r2
 800c3ac:	61a2      	str	r2, [r4, #24]
 800c3ae:	6922      	ldr	r2, [r4, #16]
 800c3b0:	b942      	cbnz	r2, 800c3c4 <__swsetup_r+0xa4>
 800c3b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c3b6:	d1c5      	bne.n	800c344 <__swsetup_r+0x24>
 800c3b8:	bd38      	pop	{r3, r4, r5, pc}
 800c3ba:	0799      	lsls	r1, r3, #30
 800c3bc:	bf58      	it	pl
 800c3be:	6962      	ldrpl	r2, [r4, #20]
 800c3c0:	60a2      	str	r2, [r4, #8]
 800c3c2:	e7f4      	b.n	800c3ae <__swsetup_r+0x8e>
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	e7f7      	b.n	800c3b8 <__swsetup_r+0x98>
 800c3c8:	2400003c 	.word	0x2400003c

0800c3cc <memmove>:
 800c3cc:	4288      	cmp	r0, r1
 800c3ce:	b510      	push	{r4, lr}
 800c3d0:	eb01 0402 	add.w	r4, r1, r2
 800c3d4:	d902      	bls.n	800c3dc <memmove+0x10>
 800c3d6:	4284      	cmp	r4, r0
 800c3d8:	4623      	mov	r3, r4
 800c3da:	d807      	bhi.n	800c3ec <memmove+0x20>
 800c3dc:	1e43      	subs	r3, r0, #1
 800c3de:	42a1      	cmp	r1, r4
 800c3e0:	d008      	beq.n	800c3f4 <memmove+0x28>
 800c3e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3ea:	e7f8      	b.n	800c3de <memmove+0x12>
 800c3ec:	4402      	add	r2, r0
 800c3ee:	4601      	mov	r1, r0
 800c3f0:	428a      	cmp	r2, r1
 800c3f2:	d100      	bne.n	800c3f6 <memmove+0x2a>
 800c3f4:	bd10      	pop	{r4, pc}
 800c3f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3fe:	e7f7      	b.n	800c3f0 <memmove+0x24>

0800c400 <strncmp>:
 800c400:	b510      	push	{r4, lr}
 800c402:	b16a      	cbz	r2, 800c420 <strncmp+0x20>
 800c404:	3901      	subs	r1, #1
 800c406:	1884      	adds	r4, r0, r2
 800c408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c40c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c410:	429a      	cmp	r2, r3
 800c412:	d103      	bne.n	800c41c <strncmp+0x1c>
 800c414:	42a0      	cmp	r0, r4
 800c416:	d001      	beq.n	800c41c <strncmp+0x1c>
 800c418:	2a00      	cmp	r2, #0
 800c41a:	d1f5      	bne.n	800c408 <strncmp+0x8>
 800c41c:	1ad0      	subs	r0, r2, r3
 800c41e:	bd10      	pop	{r4, pc}
 800c420:	4610      	mov	r0, r2
 800c422:	e7fc      	b.n	800c41e <strncmp+0x1e>

0800c424 <_sbrk_r>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	4d06      	ldr	r5, [pc, #24]	@ (800c440 <_sbrk_r+0x1c>)
 800c428:	2300      	movs	r3, #0
 800c42a:	4604      	mov	r4, r0
 800c42c:	4608      	mov	r0, r1
 800c42e:	602b      	str	r3, [r5, #0]
 800c430:	f7f4 ff08 	bl	8001244 <_sbrk>
 800c434:	1c43      	adds	r3, r0, #1
 800c436:	d102      	bne.n	800c43e <_sbrk_r+0x1a>
 800c438:	682b      	ldr	r3, [r5, #0]
 800c43a:	b103      	cbz	r3, 800c43e <_sbrk_r+0x1a>
 800c43c:	6023      	str	r3, [r4, #0]
 800c43e:	bd38      	pop	{r3, r4, r5, pc}
 800c440:	24004d58 	.word	0x24004d58
 800c444:	00000000 	.word	0x00000000

0800c448 <nan>:
 800c448:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c450 <nan+0x8>
 800c44c:	4770      	bx	lr
 800c44e:	bf00      	nop
 800c450:	00000000 	.word	0x00000000
 800c454:	7ff80000 	.word	0x7ff80000

0800c458 <__assert_func>:
 800c458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c45a:	4614      	mov	r4, r2
 800c45c:	461a      	mov	r2, r3
 800c45e:	4b09      	ldr	r3, [pc, #36]	@ (800c484 <__assert_func+0x2c>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4605      	mov	r5, r0
 800c464:	68d8      	ldr	r0, [r3, #12]
 800c466:	b14c      	cbz	r4, 800c47c <__assert_func+0x24>
 800c468:	4b07      	ldr	r3, [pc, #28]	@ (800c488 <__assert_func+0x30>)
 800c46a:	9100      	str	r1, [sp, #0]
 800c46c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c470:	4906      	ldr	r1, [pc, #24]	@ (800c48c <__assert_func+0x34>)
 800c472:	462b      	mov	r3, r5
 800c474:	f000 fba8 	bl	800cbc8 <fiprintf>
 800c478:	f000 fc3c 	bl	800ccf4 <abort>
 800c47c:	4b04      	ldr	r3, [pc, #16]	@ (800c490 <__assert_func+0x38>)
 800c47e:	461c      	mov	r4, r3
 800c480:	e7f3      	b.n	800c46a <__assert_func+0x12>
 800c482:	bf00      	nop
 800c484:	2400003c 	.word	0x2400003c
 800c488:	0800cf7a 	.word	0x0800cf7a
 800c48c:	0800cf87 	.word	0x0800cf87
 800c490:	0800cfb5 	.word	0x0800cfb5

0800c494 <_calloc_r>:
 800c494:	b570      	push	{r4, r5, r6, lr}
 800c496:	fba1 5402 	umull	r5, r4, r1, r2
 800c49a:	b934      	cbnz	r4, 800c4aa <_calloc_r+0x16>
 800c49c:	4629      	mov	r1, r5
 800c49e:	f7fe f851 	bl	800a544 <_malloc_r>
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	b928      	cbnz	r0, 800c4b2 <_calloc_r+0x1e>
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	bd70      	pop	{r4, r5, r6, pc}
 800c4aa:	220c      	movs	r2, #12
 800c4ac:	6002      	str	r2, [r0, #0]
 800c4ae:	2600      	movs	r6, #0
 800c4b0:	e7f9      	b.n	800c4a6 <_calloc_r+0x12>
 800c4b2:	462a      	mov	r2, r5
 800c4b4:	4621      	mov	r1, r4
 800c4b6:	f7fd f954 	bl	8009762 <memset>
 800c4ba:	e7f4      	b.n	800c4a6 <_calloc_r+0x12>

0800c4bc <rshift>:
 800c4bc:	6903      	ldr	r3, [r0, #16]
 800c4be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c4c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c4ca:	f100 0414 	add.w	r4, r0, #20
 800c4ce:	dd45      	ble.n	800c55c <rshift+0xa0>
 800c4d0:	f011 011f 	ands.w	r1, r1, #31
 800c4d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c4d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c4dc:	d10c      	bne.n	800c4f8 <rshift+0x3c>
 800c4de:	f100 0710 	add.w	r7, r0, #16
 800c4e2:	4629      	mov	r1, r5
 800c4e4:	42b1      	cmp	r1, r6
 800c4e6:	d334      	bcc.n	800c552 <rshift+0x96>
 800c4e8:	1a9b      	subs	r3, r3, r2
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	1eea      	subs	r2, r5, #3
 800c4ee:	4296      	cmp	r6, r2
 800c4f0:	bf38      	it	cc
 800c4f2:	2300      	movcc	r3, #0
 800c4f4:	4423      	add	r3, r4
 800c4f6:	e015      	b.n	800c524 <rshift+0x68>
 800c4f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c4fc:	f1c1 0820 	rsb	r8, r1, #32
 800c500:	40cf      	lsrs	r7, r1
 800c502:	f105 0e04 	add.w	lr, r5, #4
 800c506:	46a1      	mov	r9, r4
 800c508:	4576      	cmp	r6, lr
 800c50a:	46f4      	mov	ip, lr
 800c50c:	d815      	bhi.n	800c53a <rshift+0x7e>
 800c50e:	1a9a      	subs	r2, r3, r2
 800c510:	0092      	lsls	r2, r2, #2
 800c512:	3a04      	subs	r2, #4
 800c514:	3501      	adds	r5, #1
 800c516:	42ae      	cmp	r6, r5
 800c518:	bf38      	it	cc
 800c51a:	2200      	movcc	r2, #0
 800c51c:	18a3      	adds	r3, r4, r2
 800c51e:	50a7      	str	r7, [r4, r2]
 800c520:	b107      	cbz	r7, 800c524 <rshift+0x68>
 800c522:	3304      	adds	r3, #4
 800c524:	1b1a      	subs	r2, r3, r4
 800c526:	42a3      	cmp	r3, r4
 800c528:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c52c:	bf08      	it	eq
 800c52e:	2300      	moveq	r3, #0
 800c530:	6102      	str	r2, [r0, #16]
 800c532:	bf08      	it	eq
 800c534:	6143      	streq	r3, [r0, #20]
 800c536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c53a:	f8dc c000 	ldr.w	ip, [ip]
 800c53e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c542:	ea4c 0707 	orr.w	r7, ip, r7
 800c546:	f849 7b04 	str.w	r7, [r9], #4
 800c54a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c54e:	40cf      	lsrs	r7, r1
 800c550:	e7da      	b.n	800c508 <rshift+0x4c>
 800c552:	f851 cb04 	ldr.w	ip, [r1], #4
 800c556:	f847 cf04 	str.w	ip, [r7, #4]!
 800c55a:	e7c3      	b.n	800c4e4 <rshift+0x28>
 800c55c:	4623      	mov	r3, r4
 800c55e:	e7e1      	b.n	800c524 <rshift+0x68>

0800c560 <__hexdig_fun>:
 800c560:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c564:	2b09      	cmp	r3, #9
 800c566:	d802      	bhi.n	800c56e <__hexdig_fun+0xe>
 800c568:	3820      	subs	r0, #32
 800c56a:	b2c0      	uxtb	r0, r0
 800c56c:	4770      	bx	lr
 800c56e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c572:	2b05      	cmp	r3, #5
 800c574:	d801      	bhi.n	800c57a <__hexdig_fun+0x1a>
 800c576:	3847      	subs	r0, #71	@ 0x47
 800c578:	e7f7      	b.n	800c56a <__hexdig_fun+0xa>
 800c57a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c57e:	2b05      	cmp	r3, #5
 800c580:	d801      	bhi.n	800c586 <__hexdig_fun+0x26>
 800c582:	3827      	subs	r0, #39	@ 0x27
 800c584:	e7f1      	b.n	800c56a <__hexdig_fun+0xa>
 800c586:	2000      	movs	r0, #0
 800c588:	4770      	bx	lr
	...

0800c58c <__gethex>:
 800c58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c590:	b085      	sub	sp, #20
 800c592:	468a      	mov	sl, r1
 800c594:	9302      	str	r3, [sp, #8]
 800c596:	680b      	ldr	r3, [r1, #0]
 800c598:	9001      	str	r0, [sp, #4]
 800c59a:	4690      	mov	r8, r2
 800c59c:	1c9c      	adds	r4, r3, #2
 800c59e:	46a1      	mov	r9, r4
 800c5a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c5a4:	2830      	cmp	r0, #48	@ 0x30
 800c5a6:	d0fa      	beq.n	800c59e <__gethex+0x12>
 800c5a8:	eba9 0303 	sub.w	r3, r9, r3
 800c5ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800c5b0:	f7ff ffd6 	bl	800c560 <__hexdig_fun>
 800c5b4:	4605      	mov	r5, r0
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d168      	bne.n	800c68c <__gethex+0x100>
 800c5ba:	49a0      	ldr	r1, [pc, #640]	@ (800c83c <__gethex+0x2b0>)
 800c5bc:	2201      	movs	r2, #1
 800c5be:	4648      	mov	r0, r9
 800c5c0:	f7ff ff1e 	bl	800c400 <strncmp>
 800c5c4:	4607      	mov	r7, r0
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	d167      	bne.n	800c69a <__gethex+0x10e>
 800c5ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c5ce:	4626      	mov	r6, r4
 800c5d0:	f7ff ffc6 	bl	800c560 <__hexdig_fun>
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	d062      	beq.n	800c69e <__gethex+0x112>
 800c5d8:	4623      	mov	r3, r4
 800c5da:	7818      	ldrb	r0, [r3, #0]
 800c5dc:	2830      	cmp	r0, #48	@ 0x30
 800c5de:	4699      	mov	r9, r3
 800c5e0:	f103 0301 	add.w	r3, r3, #1
 800c5e4:	d0f9      	beq.n	800c5da <__gethex+0x4e>
 800c5e6:	f7ff ffbb 	bl	800c560 <__hexdig_fun>
 800c5ea:	fab0 f580 	clz	r5, r0
 800c5ee:	096d      	lsrs	r5, r5, #5
 800c5f0:	f04f 0b01 	mov.w	fp, #1
 800c5f4:	464a      	mov	r2, r9
 800c5f6:	4616      	mov	r6, r2
 800c5f8:	3201      	adds	r2, #1
 800c5fa:	7830      	ldrb	r0, [r6, #0]
 800c5fc:	f7ff ffb0 	bl	800c560 <__hexdig_fun>
 800c600:	2800      	cmp	r0, #0
 800c602:	d1f8      	bne.n	800c5f6 <__gethex+0x6a>
 800c604:	498d      	ldr	r1, [pc, #564]	@ (800c83c <__gethex+0x2b0>)
 800c606:	2201      	movs	r2, #1
 800c608:	4630      	mov	r0, r6
 800c60a:	f7ff fef9 	bl	800c400 <strncmp>
 800c60e:	2800      	cmp	r0, #0
 800c610:	d13f      	bne.n	800c692 <__gethex+0x106>
 800c612:	b944      	cbnz	r4, 800c626 <__gethex+0x9a>
 800c614:	1c74      	adds	r4, r6, #1
 800c616:	4622      	mov	r2, r4
 800c618:	4616      	mov	r6, r2
 800c61a:	3201      	adds	r2, #1
 800c61c:	7830      	ldrb	r0, [r6, #0]
 800c61e:	f7ff ff9f 	bl	800c560 <__hexdig_fun>
 800c622:	2800      	cmp	r0, #0
 800c624:	d1f8      	bne.n	800c618 <__gethex+0x8c>
 800c626:	1ba4      	subs	r4, r4, r6
 800c628:	00a7      	lsls	r7, r4, #2
 800c62a:	7833      	ldrb	r3, [r6, #0]
 800c62c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c630:	2b50      	cmp	r3, #80	@ 0x50
 800c632:	d13e      	bne.n	800c6b2 <__gethex+0x126>
 800c634:	7873      	ldrb	r3, [r6, #1]
 800c636:	2b2b      	cmp	r3, #43	@ 0x2b
 800c638:	d033      	beq.n	800c6a2 <__gethex+0x116>
 800c63a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c63c:	d034      	beq.n	800c6a8 <__gethex+0x11c>
 800c63e:	1c71      	adds	r1, r6, #1
 800c640:	2400      	movs	r4, #0
 800c642:	7808      	ldrb	r0, [r1, #0]
 800c644:	f7ff ff8c 	bl	800c560 <__hexdig_fun>
 800c648:	1e43      	subs	r3, r0, #1
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	2b18      	cmp	r3, #24
 800c64e:	d830      	bhi.n	800c6b2 <__gethex+0x126>
 800c650:	f1a0 0210 	sub.w	r2, r0, #16
 800c654:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c658:	f7ff ff82 	bl	800c560 <__hexdig_fun>
 800c65c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c660:	fa5f fc8c 	uxtb.w	ip, ip
 800c664:	f1bc 0f18 	cmp.w	ip, #24
 800c668:	f04f 030a 	mov.w	r3, #10
 800c66c:	d91e      	bls.n	800c6ac <__gethex+0x120>
 800c66e:	b104      	cbz	r4, 800c672 <__gethex+0xe6>
 800c670:	4252      	negs	r2, r2
 800c672:	4417      	add	r7, r2
 800c674:	f8ca 1000 	str.w	r1, [sl]
 800c678:	b1ed      	cbz	r5, 800c6b6 <__gethex+0x12a>
 800c67a:	f1bb 0f00 	cmp.w	fp, #0
 800c67e:	bf0c      	ite	eq
 800c680:	2506      	moveq	r5, #6
 800c682:	2500      	movne	r5, #0
 800c684:	4628      	mov	r0, r5
 800c686:	b005      	add	sp, #20
 800c688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c68c:	2500      	movs	r5, #0
 800c68e:	462c      	mov	r4, r5
 800c690:	e7b0      	b.n	800c5f4 <__gethex+0x68>
 800c692:	2c00      	cmp	r4, #0
 800c694:	d1c7      	bne.n	800c626 <__gethex+0x9a>
 800c696:	4627      	mov	r7, r4
 800c698:	e7c7      	b.n	800c62a <__gethex+0x9e>
 800c69a:	464e      	mov	r6, r9
 800c69c:	462f      	mov	r7, r5
 800c69e:	2501      	movs	r5, #1
 800c6a0:	e7c3      	b.n	800c62a <__gethex+0x9e>
 800c6a2:	2400      	movs	r4, #0
 800c6a4:	1cb1      	adds	r1, r6, #2
 800c6a6:	e7cc      	b.n	800c642 <__gethex+0xb6>
 800c6a8:	2401      	movs	r4, #1
 800c6aa:	e7fb      	b.n	800c6a4 <__gethex+0x118>
 800c6ac:	fb03 0002 	mla	r0, r3, r2, r0
 800c6b0:	e7ce      	b.n	800c650 <__gethex+0xc4>
 800c6b2:	4631      	mov	r1, r6
 800c6b4:	e7de      	b.n	800c674 <__gethex+0xe8>
 800c6b6:	eba6 0309 	sub.w	r3, r6, r9
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	4629      	mov	r1, r5
 800c6be:	2b07      	cmp	r3, #7
 800c6c0:	dc0a      	bgt.n	800c6d8 <__gethex+0x14c>
 800c6c2:	9801      	ldr	r0, [sp, #4]
 800c6c4:	f7fd ffca 	bl	800a65c <_Balloc>
 800c6c8:	4604      	mov	r4, r0
 800c6ca:	b940      	cbnz	r0, 800c6de <__gethex+0x152>
 800c6cc:	4b5c      	ldr	r3, [pc, #368]	@ (800c840 <__gethex+0x2b4>)
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	21e4      	movs	r1, #228	@ 0xe4
 800c6d2:	485c      	ldr	r0, [pc, #368]	@ (800c844 <__gethex+0x2b8>)
 800c6d4:	f7ff fec0 	bl	800c458 <__assert_func>
 800c6d8:	3101      	adds	r1, #1
 800c6da:	105b      	asrs	r3, r3, #1
 800c6dc:	e7ef      	b.n	800c6be <__gethex+0x132>
 800c6de:	f100 0a14 	add.w	sl, r0, #20
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	4655      	mov	r5, sl
 800c6e6:	469b      	mov	fp, r3
 800c6e8:	45b1      	cmp	r9, r6
 800c6ea:	d337      	bcc.n	800c75c <__gethex+0x1d0>
 800c6ec:	f845 bb04 	str.w	fp, [r5], #4
 800c6f0:	eba5 050a 	sub.w	r5, r5, sl
 800c6f4:	10ad      	asrs	r5, r5, #2
 800c6f6:	6125      	str	r5, [r4, #16]
 800c6f8:	4658      	mov	r0, fp
 800c6fa:	f7fe f8a1 	bl	800a840 <__hi0bits>
 800c6fe:	016d      	lsls	r5, r5, #5
 800c700:	f8d8 6000 	ldr.w	r6, [r8]
 800c704:	1a2d      	subs	r5, r5, r0
 800c706:	42b5      	cmp	r5, r6
 800c708:	dd54      	ble.n	800c7b4 <__gethex+0x228>
 800c70a:	1bad      	subs	r5, r5, r6
 800c70c:	4629      	mov	r1, r5
 800c70e:	4620      	mov	r0, r4
 800c710:	f7fe fc2a 	bl	800af68 <__any_on>
 800c714:	4681      	mov	r9, r0
 800c716:	b178      	cbz	r0, 800c738 <__gethex+0x1ac>
 800c718:	1e6b      	subs	r3, r5, #1
 800c71a:	1159      	asrs	r1, r3, #5
 800c71c:	f003 021f 	and.w	r2, r3, #31
 800c720:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c724:	f04f 0901 	mov.w	r9, #1
 800c728:	fa09 f202 	lsl.w	r2, r9, r2
 800c72c:	420a      	tst	r2, r1
 800c72e:	d003      	beq.n	800c738 <__gethex+0x1ac>
 800c730:	454b      	cmp	r3, r9
 800c732:	dc36      	bgt.n	800c7a2 <__gethex+0x216>
 800c734:	f04f 0902 	mov.w	r9, #2
 800c738:	4629      	mov	r1, r5
 800c73a:	4620      	mov	r0, r4
 800c73c:	f7ff febe 	bl	800c4bc <rshift>
 800c740:	442f      	add	r7, r5
 800c742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c746:	42bb      	cmp	r3, r7
 800c748:	da42      	bge.n	800c7d0 <__gethex+0x244>
 800c74a:	9801      	ldr	r0, [sp, #4]
 800c74c:	4621      	mov	r1, r4
 800c74e:	f7fd ffc5 	bl	800a6dc <_Bfree>
 800c752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c754:	2300      	movs	r3, #0
 800c756:	6013      	str	r3, [r2, #0]
 800c758:	25a3      	movs	r5, #163	@ 0xa3
 800c75a:	e793      	b.n	800c684 <__gethex+0xf8>
 800c75c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c760:	2a2e      	cmp	r2, #46	@ 0x2e
 800c762:	d012      	beq.n	800c78a <__gethex+0x1fe>
 800c764:	2b20      	cmp	r3, #32
 800c766:	d104      	bne.n	800c772 <__gethex+0x1e6>
 800c768:	f845 bb04 	str.w	fp, [r5], #4
 800c76c:	f04f 0b00 	mov.w	fp, #0
 800c770:	465b      	mov	r3, fp
 800c772:	7830      	ldrb	r0, [r6, #0]
 800c774:	9303      	str	r3, [sp, #12]
 800c776:	f7ff fef3 	bl	800c560 <__hexdig_fun>
 800c77a:	9b03      	ldr	r3, [sp, #12]
 800c77c:	f000 000f 	and.w	r0, r0, #15
 800c780:	4098      	lsls	r0, r3
 800c782:	ea4b 0b00 	orr.w	fp, fp, r0
 800c786:	3304      	adds	r3, #4
 800c788:	e7ae      	b.n	800c6e8 <__gethex+0x15c>
 800c78a:	45b1      	cmp	r9, r6
 800c78c:	d8ea      	bhi.n	800c764 <__gethex+0x1d8>
 800c78e:	492b      	ldr	r1, [pc, #172]	@ (800c83c <__gethex+0x2b0>)
 800c790:	9303      	str	r3, [sp, #12]
 800c792:	2201      	movs	r2, #1
 800c794:	4630      	mov	r0, r6
 800c796:	f7ff fe33 	bl	800c400 <strncmp>
 800c79a:	9b03      	ldr	r3, [sp, #12]
 800c79c:	2800      	cmp	r0, #0
 800c79e:	d1e1      	bne.n	800c764 <__gethex+0x1d8>
 800c7a0:	e7a2      	b.n	800c6e8 <__gethex+0x15c>
 800c7a2:	1ea9      	subs	r1, r5, #2
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	f7fe fbdf 	bl	800af68 <__any_on>
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	d0c2      	beq.n	800c734 <__gethex+0x1a8>
 800c7ae:	f04f 0903 	mov.w	r9, #3
 800c7b2:	e7c1      	b.n	800c738 <__gethex+0x1ac>
 800c7b4:	da09      	bge.n	800c7ca <__gethex+0x23e>
 800c7b6:	1b75      	subs	r5, r6, r5
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	9801      	ldr	r0, [sp, #4]
 800c7bc:	462a      	mov	r2, r5
 800c7be:	f7fe f99d 	bl	800aafc <__lshift>
 800c7c2:	1b7f      	subs	r7, r7, r5
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	f100 0a14 	add.w	sl, r0, #20
 800c7ca:	f04f 0900 	mov.w	r9, #0
 800c7ce:	e7b8      	b.n	800c742 <__gethex+0x1b6>
 800c7d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c7d4:	42bd      	cmp	r5, r7
 800c7d6:	dd6f      	ble.n	800c8b8 <__gethex+0x32c>
 800c7d8:	1bed      	subs	r5, r5, r7
 800c7da:	42ae      	cmp	r6, r5
 800c7dc:	dc34      	bgt.n	800c848 <__gethex+0x2bc>
 800c7de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7e2:	2b02      	cmp	r3, #2
 800c7e4:	d022      	beq.n	800c82c <__gethex+0x2a0>
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	d024      	beq.n	800c834 <__gethex+0x2a8>
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	d115      	bne.n	800c81a <__gethex+0x28e>
 800c7ee:	42ae      	cmp	r6, r5
 800c7f0:	d113      	bne.n	800c81a <__gethex+0x28e>
 800c7f2:	2e01      	cmp	r6, #1
 800c7f4:	d10b      	bne.n	800c80e <__gethex+0x282>
 800c7f6:	9a02      	ldr	r2, [sp, #8]
 800c7f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7fc:	6013      	str	r3, [r2, #0]
 800c7fe:	2301      	movs	r3, #1
 800c800:	6123      	str	r3, [r4, #16]
 800c802:	f8ca 3000 	str.w	r3, [sl]
 800c806:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c808:	2562      	movs	r5, #98	@ 0x62
 800c80a:	601c      	str	r4, [r3, #0]
 800c80c:	e73a      	b.n	800c684 <__gethex+0xf8>
 800c80e:	1e71      	subs	r1, r6, #1
 800c810:	4620      	mov	r0, r4
 800c812:	f7fe fba9 	bl	800af68 <__any_on>
 800c816:	2800      	cmp	r0, #0
 800c818:	d1ed      	bne.n	800c7f6 <__gethex+0x26a>
 800c81a:	9801      	ldr	r0, [sp, #4]
 800c81c:	4621      	mov	r1, r4
 800c81e:	f7fd ff5d 	bl	800a6dc <_Bfree>
 800c822:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c824:	2300      	movs	r3, #0
 800c826:	6013      	str	r3, [r2, #0]
 800c828:	2550      	movs	r5, #80	@ 0x50
 800c82a:	e72b      	b.n	800c684 <__gethex+0xf8>
 800c82c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d1f3      	bne.n	800c81a <__gethex+0x28e>
 800c832:	e7e0      	b.n	800c7f6 <__gethex+0x26a>
 800c834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1dd      	bne.n	800c7f6 <__gethex+0x26a>
 800c83a:	e7ee      	b.n	800c81a <__gethex+0x28e>
 800c83c:	0800cf5f 	.word	0x0800cf5f
 800c840:	0800cef5 	.word	0x0800cef5
 800c844:	0800cfb6 	.word	0x0800cfb6
 800c848:	1e6f      	subs	r7, r5, #1
 800c84a:	f1b9 0f00 	cmp.w	r9, #0
 800c84e:	d130      	bne.n	800c8b2 <__gethex+0x326>
 800c850:	b127      	cbz	r7, 800c85c <__gethex+0x2d0>
 800c852:	4639      	mov	r1, r7
 800c854:	4620      	mov	r0, r4
 800c856:	f7fe fb87 	bl	800af68 <__any_on>
 800c85a:	4681      	mov	r9, r0
 800c85c:	117a      	asrs	r2, r7, #5
 800c85e:	2301      	movs	r3, #1
 800c860:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c864:	f007 071f 	and.w	r7, r7, #31
 800c868:	40bb      	lsls	r3, r7
 800c86a:	4213      	tst	r3, r2
 800c86c:	4629      	mov	r1, r5
 800c86e:	4620      	mov	r0, r4
 800c870:	bf18      	it	ne
 800c872:	f049 0902 	orrne.w	r9, r9, #2
 800c876:	f7ff fe21 	bl	800c4bc <rshift>
 800c87a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c87e:	1b76      	subs	r6, r6, r5
 800c880:	2502      	movs	r5, #2
 800c882:	f1b9 0f00 	cmp.w	r9, #0
 800c886:	d047      	beq.n	800c918 <__gethex+0x38c>
 800c888:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d015      	beq.n	800c8bc <__gethex+0x330>
 800c890:	2b03      	cmp	r3, #3
 800c892:	d017      	beq.n	800c8c4 <__gethex+0x338>
 800c894:	2b01      	cmp	r3, #1
 800c896:	d109      	bne.n	800c8ac <__gethex+0x320>
 800c898:	f019 0f02 	tst.w	r9, #2
 800c89c:	d006      	beq.n	800c8ac <__gethex+0x320>
 800c89e:	f8da 3000 	ldr.w	r3, [sl]
 800c8a2:	ea49 0903 	orr.w	r9, r9, r3
 800c8a6:	f019 0f01 	tst.w	r9, #1
 800c8aa:	d10e      	bne.n	800c8ca <__gethex+0x33e>
 800c8ac:	f045 0510 	orr.w	r5, r5, #16
 800c8b0:	e032      	b.n	800c918 <__gethex+0x38c>
 800c8b2:	f04f 0901 	mov.w	r9, #1
 800c8b6:	e7d1      	b.n	800c85c <__gethex+0x2d0>
 800c8b8:	2501      	movs	r5, #1
 800c8ba:	e7e2      	b.n	800c882 <__gethex+0x2f6>
 800c8bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8be:	f1c3 0301 	rsb	r3, r3, #1
 800c8c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d0f0      	beq.n	800c8ac <__gethex+0x320>
 800c8ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c8ce:	f104 0314 	add.w	r3, r4, #20
 800c8d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c8d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c8da:	f04f 0c00 	mov.w	ip, #0
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c8e8:	d01b      	beq.n	800c922 <__gethex+0x396>
 800c8ea:	3201      	adds	r2, #1
 800c8ec:	6002      	str	r2, [r0, #0]
 800c8ee:	2d02      	cmp	r5, #2
 800c8f0:	f104 0314 	add.w	r3, r4, #20
 800c8f4:	d13c      	bne.n	800c970 <__gethex+0x3e4>
 800c8f6:	f8d8 2000 	ldr.w	r2, [r8]
 800c8fa:	3a01      	subs	r2, #1
 800c8fc:	42b2      	cmp	r2, r6
 800c8fe:	d109      	bne.n	800c914 <__gethex+0x388>
 800c900:	1171      	asrs	r1, r6, #5
 800c902:	2201      	movs	r2, #1
 800c904:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c908:	f006 061f 	and.w	r6, r6, #31
 800c90c:	fa02 f606 	lsl.w	r6, r2, r6
 800c910:	421e      	tst	r6, r3
 800c912:	d13a      	bne.n	800c98a <__gethex+0x3fe>
 800c914:	f045 0520 	orr.w	r5, r5, #32
 800c918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c91a:	601c      	str	r4, [r3, #0]
 800c91c:	9b02      	ldr	r3, [sp, #8]
 800c91e:	601f      	str	r7, [r3, #0]
 800c920:	e6b0      	b.n	800c684 <__gethex+0xf8>
 800c922:	4299      	cmp	r1, r3
 800c924:	f843 cc04 	str.w	ip, [r3, #-4]
 800c928:	d8d9      	bhi.n	800c8de <__gethex+0x352>
 800c92a:	68a3      	ldr	r3, [r4, #8]
 800c92c:	459b      	cmp	fp, r3
 800c92e:	db17      	blt.n	800c960 <__gethex+0x3d4>
 800c930:	6861      	ldr	r1, [r4, #4]
 800c932:	9801      	ldr	r0, [sp, #4]
 800c934:	3101      	adds	r1, #1
 800c936:	f7fd fe91 	bl	800a65c <_Balloc>
 800c93a:	4681      	mov	r9, r0
 800c93c:	b918      	cbnz	r0, 800c946 <__gethex+0x3ba>
 800c93e:	4b1a      	ldr	r3, [pc, #104]	@ (800c9a8 <__gethex+0x41c>)
 800c940:	4602      	mov	r2, r0
 800c942:	2184      	movs	r1, #132	@ 0x84
 800c944:	e6c5      	b.n	800c6d2 <__gethex+0x146>
 800c946:	6922      	ldr	r2, [r4, #16]
 800c948:	3202      	adds	r2, #2
 800c94a:	f104 010c 	add.w	r1, r4, #12
 800c94e:	0092      	lsls	r2, r2, #2
 800c950:	300c      	adds	r0, #12
 800c952:	f7fc ff86 	bl	8009862 <memcpy>
 800c956:	4621      	mov	r1, r4
 800c958:	9801      	ldr	r0, [sp, #4]
 800c95a:	f7fd febf 	bl	800a6dc <_Bfree>
 800c95e:	464c      	mov	r4, r9
 800c960:	6923      	ldr	r3, [r4, #16]
 800c962:	1c5a      	adds	r2, r3, #1
 800c964:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c968:	6122      	str	r2, [r4, #16]
 800c96a:	2201      	movs	r2, #1
 800c96c:	615a      	str	r2, [r3, #20]
 800c96e:	e7be      	b.n	800c8ee <__gethex+0x362>
 800c970:	6922      	ldr	r2, [r4, #16]
 800c972:	455a      	cmp	r2, fp
 800c974:	dd0b      	ble.n	800c98e <__gethex+0x402>
 800c976:	2101      	movs	r1, #1
 800c978:	4620      	mov	r0, r4
 800c97a:	f7ff fd9f 	bl	800c4bc <rshift>
 800c97e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c982:	3701      	adds	r7, #1
 800c984:	42bb      	cmp	r3, r7
 800c986:	f6ff aee0 	blt.w	800c74a <__gethex+0x1be>
 800c98a:	2501      	movs	r5, #1
 800c98c:	e7c2      	b.n	800c914 <__gethex+0x388>
 800c98e:	f016 061f 	ands.w	r6, r6, #31
 800c992:	d0fa      	beq.n	800c98a <__gethex+0x3fe>
 800c994:	4453      	add	r3, sl
 800c996:	f1c6 0620 	rsb	r6, r6, #32
 800c99a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c99e:	f7fd ff4f 	bl	800a840 <__hi0bits>
 800c9a2:	42b0      	cmp	r0, r6
 800c9a4:	dbe7      	blt.n	800c976 <__gethex+0x3ea>
 800c9a6:	e7f0      	b.n	800c98a <__gethex+0x3fe>
 800c9a8:	0800cef5 	.word	0x0800cef5

0800c9ac <L_shift>:
 800c9ac:	f1c2 0208 	rsb	r2, r2, #8
 800c9b0:	0092      	lsls	r2, r2, #2
 800c9b2:	b570      	push	{r4, r5, r6, lr}
 800c9b4:	f1c2 0620 	rsb	r6, r2, #32
 800c9b8:	6843      	ldr	r3, [r0, #4]
 800c9ba:	6804      	ldr	r4, [r0, #0]
 800c9bc:	fa03 f506 	lsl.w	r5, r3, r6
 800c9c0:	432c      	orrs	r4, r5
 800c9c2:	40d3      	lsrs	r3, r2
 800c9c4:	6004      	str	r4, [r0, #0]
 800c9c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c9ca:	4288      	cmp	r0, r1
 800c9cc:	d3f4      	bcc.n	800c9b8 <L_shift+0xc>
 800c9ce:	bd70      	pop	{r4, r5, r6, pc}

0800c9d0 <__match>:
 800c9d0:	b530      	push	{r4, r5, lr}
 800c9d2:	6803      	ldr	r3, [r0, #0]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9da:	b914      	cbnz	r4, 800c9e2 <__match+0x12>
 800c9dc:	6003      	str	r3, [r0, #0]
 800c9de:	2001      	movs	r0, #1
 800c9e0:	bd30      	pop	{r4, r5, pc}
 800c9e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c9ea:	2d19      	cmp	r5, #25
 800c9ec:	bf98      	it	ls
 800c9ee:	3220      	addls	r2, #32
 800c9f0:	42a2      	cmp	r2, r4
 800c9f2:	d0f0      	beq.n	800c9d6 <__match+0x6>
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	e7f3      	b.n	800c9e0 <__match+0x10>

0800c9f8 <__hexnan>:
 800c9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9fc:	680b      	ldr	r3, [r1, #0]
 800c9fe:	6801      	ldr	r1, [r0, #0]
 800ca00:	115e      	asrs	r6, r3, #5
 800ca02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ca06:	f013 031f 	ands.w	r3, r3, #31
 800ca0a:	b087      	sub	sp, #28
 800ca0c:	bf18      	it	ne
 800ca0e:	3604      	addne	r6, #4
 800ca10:	2500      	movs	r5, #0
 800ca12:	1f37      	subs	r7, r6, #4
 800ca14:	4682      	mov	sl, r0
 800ca16:	4690      	mov	r8, r2
 800ca18:	9301      	str	r3, [sp, #4]
 800ca1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ca1e:	46b9      	mov	r9, r7
 800ca20:	463c      	mov	r4, r7
 800ca22:	9502      	str	r5, [sp, #8]
 800ca24:	46ab      	mov	fp, r5
 800ca26:	784a      	ldrb	r2, [r1, #1]
 800ca28:	1c4b      	adds	r3, r1, #1
 800ca2a:	9303      	str	r3, [sp, #12]
 800ca2c:	b342      	cbz	r2, 800ca80 <__hexnan+0x88>
 800ca2e:	4610      	mov	r0, r2
 800ca30:	9105      	str	r1, [sp, #20]
 800ca32:	9204      	str	r2, [sp, #16]
 800ca34:	f7ff fd94 	bl	800c560 <__hexdig_fun>
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d151      	bne.n	800cae0 <__hexnan+0xe8>
 800ca3c:	9a04      	ldr	r2, [sp, #16]
 800ca3e:	9905      	ldr	r1, [sp, #20]
 800ca40:	2a20      	cmp	r2, #32
 800ca42:	d818      	bhi.n	800ca76 <__hexnan+0x7e>
 800ca44:	9b02      	ldr	r3, [sp, #8]
 800ca46:	459b      	cmp	fp, r3
 800ca48:	dd13      	ble.n	800ca72 <__hexnan+0x7a>
 800ca4a:	454c      	cmp	r4, r9
 800ca4c:	d206      	bcs.n	800ca5c <__hexnan+0x64>
 800ca4e:	2d07      	cmp	r5, #7
 800ca50:	dc04      	bgt.n	800ca5c <__hexnan+0x64>
 800ca52:	462a      	mov	r2, r5
 800ca54:	4649      	mov	r1, r9
 800ca56:	4620      	mov	r0, r4
 800ca58:	f7ff ffa8 	bl	800c9ac <L_shift>
 800ca5c:	4544      	cmp	r4, r8
 800ca5e:	d952      	bls.n	800cb06 <__hexnan+0x10e>
 800ca60:	2300      	movs	r3, #0
 800ca62:	f1a4 0904 	sub.w	r9, r4, #4
 800ca66:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca6a:	f8cd b008 	str.w	fp, [sp, #8]
 800ca6e:	464c      	mov	r4, r9
 800ca70:	461d      	mov	r5, r3
 800ca72:	9903      	ldr	r1, [sp, #12]
 800ca74:	e7d7      	b.n	800ca26 <__hexnan+0x2e>
 800ca76:	2a29      	cmp	r2, #41	@ 0x29
 800ca78:	d157      	bne.n	800cb2a <__hexnan+0x132>
 800ca7a:	3102      	adds	r1, #2
 800ca7c:	f8ca 1000 	str.w	r1, [sl]
 800ca80:	f1bb 0f00 	cmp.w	fp, #0
 800ca84:	d051      	beq.n	800cb2a <__hexnan+0x132>
 800ca86:	454c      	cmp	r4, r9
 800ca88:	d206      	bcs.n	800ca98 <__hexnan+0xa0>
 800ca8a:	2d07      	cmp	r5, #7
 800ca8c:	dc04      	bgt.n	800ca98 <__hexnan+0xa0>
 800ca8e:	462a      	mov	r2, r5
 800ca90:	4649      	mov	r1, r9
 800ca92:	4620      	mov	r0, r4
 800ca94:	f7ff ff8a 	bl	800c9ac <L_shift>
 800ca98:	4544      	cmp	r4, r8
 800ca9a:	d936      	bls.n	800cb0a <__hexnan+0x112>
 800ca9c:	f1a8 0204 	sub.w	r2, r8, #4
 800caa0:	4623      	mov	r3, r4
 800caa2:	f853 1b04 	ldr.w	r1, [r3], #4
 800caa6:	f842 1f04 	str.w	r1, [r2, #4]!
 800caaa:	429f      	cmp	r7, r3
 800caac:	d2f9      	bcs.n	800caa2 <__hexnan+0xaa>
 800caae:	1b3b      	subs	r3, r7, r4
 800cab0:	f023 0303 	bic.w	r3, r3, #3
 800cab4:	3304      	adds	r3, #4
 800cab6:	3401      	adds	r4, #1
 800cab8:	3e03      	subs	r6, #3
 800caba:	42b4      	cmp	r4, r6
 800cabc:	bf88      	it	hi
 800cabe:	2304      	movhi	r3, #4
 800cac0:	4443      	add	r3, r8
 800cac2:	2200      	movs	r2, #0
 800cac4:	f843 2b04 	str.w	r2, [r3], #4
 800cac8:	429f      	cmp	r7, r3
 800caca:	d2fb      	bcs.n	800cac4 <__hexnan+0xcc>
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	b91b      	cbnz	r3, 800cad8 <__hexnan+0xe0>
 800cad0:	4547      	cmp	r7, r8
 800cad2:	d128      	bne.n	800cb26 <__hexnan+0x12e>
 800cad4:	2301      	movs	r3, #1
 800cad6:	603b      	str	r3, [r7, #0]
 800cad8:	2005      	movs	r0, #5
 800cada:	b007      	add	sp, #28
 800cadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae0:	3501      	adds	r5, #1
 800cae2:	2d08      	cmp	r5, #8
 800cae4:	f10b 0b01 	add.w	fp, fp, #1
 800cae8:	dd06      	ble.n	800caf8 <__hexnan+0x100>
 800caea:	4544      	cmp	r4, r8
 800caec:	d9c1      	bls.n	800ca72 <__hexnan+0x7a>
 800caee:	2300      	movs	r3, #0
 800caf0:	f844 3c04 	str.w	r3, [r4, #-4]
 800caf4:	2501      	movs	r5, #1
 800caf6:	3c04      	subs	r4, #4
 800caf8:	6822      	ldr	r2, [r4, #0]
 800cafa:	f000 000f 	and.w	r0, r0, #15
 800cafe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cb02:	6020      	str	r0, [r4, #0]
 800cb04:	e7b5      	b.n	800ca72 <__hexnan+0x7a>
 800cb06:	2508      	movs	r5, #8
 800cb08:	e7b3      	b.n	800ca72 <__hexnan+0x7a>
 800cb0a:	9b01      	ldr	r3, [sp, #4]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d0dd      	beq.n	800cacc <__hexnan+0xd4>
 800cb10:	f1c3 0320 	rsb	r3, r3, #32
 800cb14:	f04f 32ff 	mov.w	r2, #4294967295
 800cb18:	40da      	lsrs	r2, r3
 800cb1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cb1e:	4013      	ands	r3, r2
 800cb20:	f846 3c04 	str.w	r3, [r6, #-4]
 800cb24:	e7d2      	b.n	800cacc <__hexnan+0xd4>
 800cb26:	3f04      	subs	r7, #4
 800cb28:	e7d0      	b.n	800cacc <__hexnan+0xd4>
 800cb2a:	2004      	movs	r0, #4
 800cb2c:	e7d5      	b.n	800cada <__hexnan+0xe2>

0800cb2e <__ascii_mbtowc>:
 800cb2e:	b082      	sub	sp, #8
 800cb30:	b901      	cbnz	r1, 800cb34 <__ascii_mbtowc+0x6>
 800cb32:	a901      	add	r1, sp, #4
 800cb34:	b142      	cbz	r2, 800cb48 <__ascii_mbtowc+0x1a>
 800cb36:	b14b      	cbz	r3, 800cb4c <__ascii_mbtowc+0x1e>
 800cb38:	7813      	ldrb	r3, [r2, #0]
 800cb3a:	600b      	str	r3, [r1, #0]
 800cb3c:	7812      	ldrb	r2, [r2, #0]
 800cb3e:	1e10      	subs	r0, r2, #0
 800cb40:	bf18      	it	ne
 800cb42:	2001      	movne	r0, #1
 800cb44:	b002      	add	sp, #8
 800cb46:	4770      	bx	lr
 800cb48:	4610      	mov	r0, r2
 800cb4a:	e7fb      	b.n	800cb44 <__ascii_mbtowc+0x16>
 800cb4c:	f06f 0001 	mvn.w	r0, #1
 800cb50:	e7f8      	b.n	800cb44 <__ascii_mbtowc+0x16>

0800cb52 <_realloc_r>:
 800cb52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb56:	4607      	mov	r7, r0
 800cb58:	4614      	mov	r4, r2
 800cb5a:	460d      	mov	r5, r1
 800cb5c:	b921      	cbnz	r1, 800cb68 <_realloc_r+0x16>
 800cb5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb62:	4611      	mov	r1, r2
 800cb64:	f7fd bcee 	b.w	800a544 <_malloc_r>
 800cb68:	b92a      	cbnz	r2, 800cb76 <_realloc_r+0x24>
 800cb6a:	f7fd fc77 	bl	800a45c <_free_r>
 800cb6e:	4625      	mov	r5, r4
 800cb70:	4628      	mov	r0, r5
 800cb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb76:	f000 f8c4 	bl	800cd02 <_malloc_usable_size_r>
 800cb7a:	4284      	cmp	r4, r0
 800cb7c:	4606      	mov	r6, r0
 800cb7e:	d802      	bhi.n	800cb86 <_realloc_r+0x34>
 800cb80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb84:	d8f4      	bhi.n	800cb70 <_realloc_r+0x1e>
 800cb86:	4621      	mov	r1, r4
 800cb88:	4638      	mov	r0, r7
 800cb8a:	f7fd fcdb 	bl	800a544 <_malloc_r>
 800cb8e:	4680      	mov	r8, r0
 800cb90:	b908      	cbnz	r0, 800cb96 <_realloc_r+0x44>
 800cb92:	4645      	mov	r5, r8
 800cb94:	e7ec      	b.n	800cb70 <_realloc_r+0x1e>
 800cb96:	42b4      	cmp	r4, r6
 800cb98:	4622      	mov	r2, r4
 800cb9a:	4629      	mov	r1, r5
 800cb9c:	bf28      	it	cs
 800cb9e:	4632      	movcs	r2, r6
 800cba0:	f7fc fe5f 	bl	8009862 <memcpy>
 800cba4:	4629      	mov	r1, r5
 800cba6:	4638      	mov	r0, r7
 800cba8:	f7fd fc58 	bl	800a45c <_free_r>
 800cbac:	e7f1      	b.n	800cb92 <_realloc_r+0x40>

0800cbae <__ascii_wctomb>:
 800cbae:	4603      	mov	r3, r0
 800cbb0:	4608      	mov	r0, r1
 800cbb2:	b141      	cbz	r1, 800cbc6 <__ascii_wctomb+0x18>
 800cbb4:	2aff      	cmp	r2, #255	@ 0xff
 800cbb6:	d904      	bls.n	800cbc2 <__ascii_wctomb+0x14>
 800cbb8:	228a      	movs	r2, #138	@ 0x8a
 800cbba:	601a      	str	r2, [r3, #0]
 800cbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbc0:	4770      	bx	lr
 800cbc2:	700a      	strb	r2, [r1, #0]
 800cbc4:	2001      	movs	r0, #1
 800cbc6:	4770      	bx	lr

0800cbc8 <fiprintf>:
 800cbc8:	b40e      	push	{r1, r2, r3}
 800cbca:	b503      	push	{r0, r1, lr}
 800cbcc:	4601      	mov	r1, r0
 800cbce:	ab03      	add	r3, sp, #12
 800cbd0:	4805      	ldr	r0, [pc, #20]	@ (800cbe8 <fiprintf+0x20>)
 800cbd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbd6:	6800      	ldr	r0, [r0, #0]
 800cbd8:	9301      	str	r3, [sp, #4]
 800cbda:	f7ff f99f 	bl	800bf1c <_vfiprintf_r>
 800cbde:	b002      	add	sp, #8
 800cbe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbe4:	b003      	add	sp, #12
 800cbe6:	4770      	bx	lr
 800cbe8:	2400003c 	.word	0x2400003c

0800cbec <__swhatbuf_r>:
 800cbec:	b570      	push	{r4, r5, r6, lr}
 800cbee:	460c      	mov	r4, r1
 800cbf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf4:	2900      	cmp	r1, #0
 800cbf6:	b096      	sub	sp, #88	@ 0x58
 800cbf8:	4615      	mov	r5, r2
 800cbfa:	461e      	mov	r6, r3
 800cbfc:	da0d      	bge.n	800cc1a <__swhatbuf_r+0x2e>
 800cbfe:	89a3      	ldrh	r3, [r4, #12]
 800cc00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cc04:	f04f 0100 	mov.w	r1, #0
 800cc08:	bf14      	ite	ne
 800cc0a:	2340      	movne	r3, #64	@ 0x40
 800cc0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc10:	2000      	movs	r0, #0
 800cc12:	6031      	str	r1, [r6, #0]
 800cc14:	602b      	str	r3, [r5, #0]
 800cc16:	b016      	add	sp, #88	@ 0x58
 800cc18:	bd70      	pop	{r4, r5, r6, pc}
 800cc1a:	466a      	mov	r2, sp
 800cc1c:	f000 f848 	bl	800ccb0 <_fstat_r>
 800cc20:	2800      	cmp	r0, #0
 800cc22:	dbec      	blt.n	800cbfe <__swhatbuf_r+0x12>
 800cc24:	9901      	ldr	r1, [sp, #4]
 800cc26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc2e:	4259      	negs	r1, r3
 800cc30:	4159      	adcs	r1, r3
 800cc32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc36:	e7eb      	b.n	800cc10 <__swhatbuf_r+0x24>

0800cc38 <__smakebuf_r>:
 800cc38:	898b      	ldrh	r3, [r1, #12]
 800cc3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc3c:	079d      	lsls	r5, r3, #30
 800cc3e:	4606      	mov	r6, r0
 800cc40:	460c      	mov	r4, r1
 800cc42:	d507      	bpl.n	800cc54 <__smakebuf_r+0x1c>
 800cc44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc48:	6023      	str	r3, [r4, #0]
 800cc4a:	6123      	str	r3, [r4, #16]
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	6163      	str	r3, [r4, #20]
 800cc50:	b003      	add	sp, #12
 800cc52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc54:	ab01      	add	r3, sp, #4
 800cc56:	466a      	mov	r2, sp
 800cc58:	f7ff ffc8 	bl	800cbec <__swhatbuf_r>
 800cc5c:	9f00      	ldr	r7, [sp, #0]
 800cc5e:	4605      	mov	r5, r0
 800cc60:	4639      	mov	r1, r7
 800cc62:	4630      	mov	r0, r6
 800cc64:	f7fd fc6e 	bl	800a544 <_malloc_r>
 800cc68:	b948      	cbnz	r0, 800cc7e <__smakebuf_r+0x46>
 800cc6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc6e:	059a      	lsls	r2, r3, #22
 800cc70:	d4ee      	bmi.n	800cc50 <__smakebuf_r+0x18>
 800cc72:	f023 0303 	bic.w	r3, r3, #3
 800cc76:	f043 0302 	orr.w	r3, r3, #2
 800cc7a:	81a3      	strh	r3, [r4, #12]
 800cc7c:	e7e2      	b.n	800cc44 <__smakebuf_r+0xc>
 800cc7e:	89a3      	ldrh	r3, [r4, #12]
 800cc80:	6020      	str	r0, [r4, #0]
 800cc82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc86:	81a3      	strh	r3, [r4, #12]
 800cc88:	9b01      	ldr	r3, [sp, #4]
 800cc8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc8e:	b15b      	cbz	r3, 800cca8 <__smakebuf_r+0x70>
 800cc90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc94:	4630      	mov	r0, r6
 800cc96:	f000 f81d 	bl	800ccd4 <_isatty_r>
 800cc9a:	b128      	cbz	r0, 800cca8 <__smakebuf_r+0x70>
 800cc9c:	89a3      	ldrh	r3, [r4, #12]
 800cc9e:	f023 0303 	bic.w	r3, r3, #3
 800cca2:	f043 0301 	orr.w	r3, r3, #1
 800cca6:	81a3      	strh	r3, [r4, #12]
 800cca8:	89a3      	ldrh	r3, [r4, #12]
 800ccaa:	431d      	orrs	r5, r3
 800ccac:	81a5      	strh	r5, [r4, #12]
 800ccae:	e7cf      	b.n	800cc50 <__smakebuf_r+0x18>

0800ccb0 <_fstat_r>:
 800ccb0:	b538      	push	{r3, r4, r5, lr}
 800ccb2:	4d07      	ldr	r5, [pc, #28]	@ (800ccd0 <_fstat_r+0x20>)
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	4608      	mov	r0, r1
 800ccba:	4611      	mov	r1, r2
 800ccbc:	602b      	str	r3, [r5, #0]
 800ccbe:	f7f4 fa98 	bl	80011f2 <_fstat>
 800ccc2:	1c43      	adds	r3, r0, #1
 800ccc4:	d102      	bne.n	800cccc <_fstat_r+0x1c>
 800ccc6:	682b      	ldr	r3, [r5, #0]
 800ccc8:	b103      	cbz	r3, 800cccc <_fstat_r+0x1c>
 800ccca:	6023      	str	r3, [r4, #0]
 800cccc:	bd38      	pop	{r3, r4, r5, pc}
 800ccce:	bf00      	nop
 800ccd0:	24004d58 	.word	0x24004d58

0800ccd4 <_isatty_r>:
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	4d06      	ldr	r5, [pc, #24]	@ (800ccf0 <_isatty_r+0x1c>)
 800ccd8:	2300      	movs	r3, #0
 800ccda:	4604      	mov	r4, r0
 800ccdc:	4608      	mov	r0, r1
 800ccde:	602b      	str	r3, [r5, #0]
 800cce0:	f7f4 fa97 	bl	8001212 <_isatty>
 800cce4:	1c43      	adds	r3, r0, #1
 800cce6:	d102      	bne.n	800ccee <_isatty_r+0x1a>
 800cce8:	682b      	ldr	r3, [r5, #0]
 800ccea:	b103      	cbz	r3, 800ccee <_isatty_r+0x1a>
 800ccec:	6023      	str	r3, [r4, #0]
 800ccee:	bd38      	pop	{r3, r4, r5, pc}
 800ccf0:	24004d58 	.word	0x24004d58

0800ccf4 <abort>:
 800ccf4:	b508      	push	{r3, lr}
 800ccf6:	2006      	movs	r0, #6
 800ccf8:	f000 f834 	bl	800cd64 <raise>
 800ccfc:	2001      	movs	r0, #1
 800ccfe:	f7f4 fa44 	bl	800118a <_exit>

0800cd02 <_malloc_usable_size_r>:
 800cd02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd06:	1f18      	subs	r0, r3, #4
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	bfbc      	itt	lt
 800cd0c:	580b      	ldrlt	r3, [r1, r0]
 800cd0e:	18c0      	addlt	r0, r0, r3
 800cd10:	4770      	bx	lr

0800cd12 <_raise_r>:
 800cd12:	291f      	cmp	r1, #31
 800cd14:	b538      	push	{r3, r4, r5, lr}
 800cd16:	4605      	mov	r5, r0
 800cd18:	460c      	mov	r4, r1
 800cd1a:	d904      	bls.n	800cd26 <_raise_r+0x14>
 800cd1c:	2316      	movs	r3, #22
 800cd1e:	6003      	str	r3, [r0, #0]
 800cd20:	f04f 30ff 	mov.w	r0, #4294967295
 800cd24:	bd38      	pop	{r3, r4, r5, pc}
 800cd26:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cd28:	b112      	cbz	r2, 800cd30 <_raise_r+0x1e>
 800cd2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd2e:	b94b      	cbnz	r3, 800cd44 <_raise_r+0x32>
 800cd30:	4628      	mov	r0, r5
 800cd32:	f000 f831 	bl	800cd98 <_getpid_r>
 800cd36:	4622      	mov	r2, r4
 800cd38:	4601      	mov	r1, r0
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd40:	f000 b818 	b.w	800cd74 <_kill_r>
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d00a      	beq.n	800cd5e <_raise_r+0x4c>
 800cd48:	1c59      	adds	r1, r3, #1
 800cd4a:	d103      	bne.n	800cd54 <_raise_r+0x42>
 800cd4c:	2316      	movs	r3, #22
 800cd4e:	6003      	str	r3, [r0, #0]
 800cd50:	2001      	movs	r0, #1
 800cd52:	e7e7      	b.n	800cd24 <_raise_r+0x12>
 800cd54:	2100      	movs	r1, #0
 800cd56:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	4798      	blx	r3
 800cd5e:	2000      	movs	r0, #0
 800cd60:	e7e0      	b.n	800cd24 <_raise_r+0x12>
	...

0800cd64 <raise>:
 800cd64:	4b02      	ldr	r3, [pc, #8]	@ (800cd70 <raise+0xc>)
 800cd66:	4601      	mov	r1, r0
 800cd68:	6818      	ldr	r0, [r3, #0]
 800cd6a:	f7ff bfd2 	b.w	800cd12 <_raise_r>
 800cd6e:	bf00      	nop
 800cd70:	2400003c 	.word	0x2400003c

0800cd74 <_kill_r>:
 800cd74:	b538      	push	{r3, r4, r5, lr}
 800cd76:	4d07      	ldr	r5, [pc, #28]	@ (800cd94 <_kill_r+0x20>)
 800cd78:	2300      	movs	r3, #0
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	4608      	mov	r0, r1
 800cd7e:	4611      	mov	r1, r2
 800cd80:	602b      	str	r3, [r5, #0]
 800cd82:	f7f4 f9f2 	bl	800116a <_kill>
 800cd86:	1c43      	adds	r3, r0, #1
 800cd88:	d102      	bne.n	800cd90 <_kill_r+0x1c>
 800cd8a:	682b      	ldr	r3, [r5, #0]
 800cd8c:	b103      	cbz	r3, 800cd90 <_kill_r+0x1c>
 800cd8e:	6023      	str	r3, [r4, #0]
 800cd90:	bd38      	pop	{r3, r4, r5, pc}
 800cd92:	bf00      	nop
 800cd94:	24004d58 	.word	0x24004d58

0800cd98 <_getpid_r>:
 800cd98:	f7f4 b9df 	b.w	800115a <_getpid>

0800cd9c <_init>:
 800cd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9e:	bf00      	nop
 800cda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cda2:	bc08      	pop	{r3}
 800cda4:	469e      	mov	lr, r3
 800cda6:	4770      	bx	lr

0800cda8 <_fini>:
 800cda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdaa:	bf00      	nop
 800cdac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdae:	bc08      	pop	{r3}
 800cdb0:	469e      	mov	lr, r3
 800cdb2:	4770      	bx	lr
