
nodemcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a4  0800fb90  0800fb90  00010b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010334  08010334  000122b0  2**0
                  CONTENTS
  4 .ARM          00000008  08010334  08010334  00011334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801033c  0801033c  000122b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801033c  0801033c  0001133c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010340  08010340  00011340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b0  20000000  08010344  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e80  200002b0  080105f4  000122b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005130  080105f4  00013130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000122b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150e4  00000000  00000000  000122e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003567  00000000  00000000  000273c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0002a930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d63  00000000  00000000  0002ba70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024827  00000000  00000000  0002c7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001540a  00000000  00000000  00050ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d635d  00000000  00000000  00066404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c761  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e18  00000000  00000000  0013c7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001425bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002b0 	.word	0x200002b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fb78 	.word	0x0800fb78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002b4 	.word	0x200002b4
 800020c:	0800fb78 	.word	0x0800fb78

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a0 	b.w	8001040 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d14e      	bne.n	8000e2e <__udivmoddi4+0xaa>
 8000d90:	4694      	mov	ip, r2
 8000d92:	458c      	cmp	ip, r1
 8000d94:	4686      	mov	lr, r0
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	d962      	bls.n	8000e62 <__udivmoddi4+0xde>
 8000d9c:	b14a      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	4091      	lsls	r1, r2
 8000da4:	fa20 f303 	lsr.w	r3, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	4319      	orrs	r1, r3
 8000dae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f f68c 	uxth.w	r6, ip
 8000dba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb04 f106 	mul.w	r1, r4, r6
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x64>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dda:	f080 8112 	bcs.w	8001002 <__udivmoddi4+0x27e>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 810f 	bls.w	8001002 <__udivmoddi4+0x27e>
 8000de4:	3c02      	subs	r4, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a59      	subs	r1, r3, r1
 8000dea:	fa1f f38e 	uxth.w	r3, lr
 8000dee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df2:	fb07 1110 	mls	r1, r7, r0, r1
 8000df6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfa:	fb00 f606 	mul.w	r6, r0, r6
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	d90a      	bls.n	8000e18 <__udivmoddi4+0x94>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e0a:	f080 80fc 	bcs.w	8001006 <__udivmoddi4+0x282>
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	f240 80f9 	bls.w	8001006 <__udivmoddi4+0x282>
 8000e14:	4463      	add	r3, ip
 8000e16:	3802      	subs	r0, #2
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e1e:	2100      	movs	r1, #0
 8000e20:	b11d      	cbz	r5, 8000e2a <__udivmoddi4+0xa6>
 8000e22:	40d3      	lsrs	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	e9c5 3200 	strd	r3, r2, [r5]
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d905      	bls.n	8000e3e <__udivmoddi4+0xba>
 8000e32:	b10d      	cbz	r5, 8000e38 <__udivmoddi4+0xb4>
 8000e34:	e9c5 0100 	strd	r0, r1, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e7f5      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e3e:	fab3 f183 	clz	r1, r3
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d146      	bne.n	8000ed4 <__udivmoddi4+0x150>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d302      	bcc.n	8000e50 <__udivmoddi4+0xcc>
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	f0c0 80f0 	bcc.w	8001030 <__udivmoddi4+0x2ac>
 8000e50:	1a86      	subs	r6, r0, r2
 8000e52:	eb64 0303 	sbc.w	r3, r4, r3
 8000e56:	2001      	movs	r0, #1
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d0e6      	beq.n	8000e2a <__udivmoddi4+0xa6>
 8000e5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e60:	e7e3      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000e62:	2a00      	cmp	r2, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x204>
 8000e68:	eba1 040c 	sub.w	r4, r1, ip
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	2101      	movs	r1, #1
 8000e76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e86:	fb07 f006 	mul.w	r0, r7, r6
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x11c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x11a>
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	f200 80cd 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e9e:	4626      	mov	r6, r4
 8000ea0:	1a1c      	subs	r4, r3, r0
 8000ea2:	fa1f f38e 	uxth.w	r3, lr
 8000ea6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eaa:	fb08 4410 	mls	r4, r8, r0, r4
 8000eae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eb2:	fb00 f707 	mul.w	r7, r0, r7
 8000eb6:	429f      	cmp	r7, r3
 8000eb8:	d908      	bls.n	8000ecc <__udivmoddi4+0x148>
 8000eba:	eb1c 0303 	adds.w	r3, ip, r3
 8000ebe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x146>
 8000ec4:	429f      	cmp	r7, r3
 8000ec6:	f200 80b0 	bhi.w	800102a <__udivmoddi4+0x2a6>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	1bdb      	subs	r3, r3, r7
 8000ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed2:	e7a5      	b.n	8000e20 <__udivmoddi4+0x9c>
 8000ed4:	f1c1 0620 	rsb	r6, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 f706 	lsr.w	r7, r2, r6
 8000ede:	431f      	orrs	r7, r3
 8000ee0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ee4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ee8:	ea43 030c 	orr.w	r3, r3, ip
 8000eec:	40f4      	lsrs	r4, r6
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	0c38      	lsrs	r0, r7, #16
 8000ef4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ef8:	fbb4 fef0 	udiv	lr, r4, r0
 8000efc:	fa1f fc87 	uxth.w	ip, r7
 8000f00:	fb00 441e 	mls	r4, r0, lr, r4
 8000f04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f08:	fb0e f90c 	mul.w	r9, lr, ip
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90a      	bls.n	8000f2a <__udivmoddi4+0x1a6>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f1a:	f080 8084 	bcs.w	8001026 <__udivmoddi4+0x2a2>
 8000f1e:	45a1      	cmp	r9, r4
 8000f20:	f240 8081 	bls.w	8001026 <__udivmoddi4+0x2a2>
 8000f24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f28:	443c      	add	r4, r7
 8000f2a:	eba4 0409 	sub.w	r4, r4, r9
 8000f2e:	fa1f f983 	uxth.w	r9, r3
 8000f32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f36:	fb00 4413 	mls	r4, r0, r3, r4
 8000f3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x1d2>
 8000f46:	193c      	adds	r4, r7, r4
 8000f48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f4c:	d267      	bcs.n	800101e <__udivmoddi4+0x29a>
 8000f4e:	45a4      	cmp	ip, r4
 8000f50:	d965      	bls.n	800101e <__udivmoddi4+0x29a>
 8000f52:	3b02      	subs	r3, #2
 8000f54:	443c      	add	r4, r7
 8000f56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f5e:	eba4 040c 	sub.w	r4, r4, ip
 8000f62:	429c      	cmp	r4, r3
 8000f64:	46ce      	mov	lr, r9
 8000f66:	469c      	mov	ip, r3
 8000f68:	d351      	bcc.n	800100e <__udivmoddi4+0x28a>
 8000f6a:	d04e      	beq.n	800100a <__udivmoddi4+0x286>
 8000f6c:	b155      	cbz	r5, 8000f84 <__udivmoddi4+0x200>
 8000f6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f72:	eb64 040c 	sbc.w	r4, r4, ip
 8000f76:	fa04 f606 	lsl.w	r6, r4, r6
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	40cc      	lsrs	r4, r1
 8000f80:	e9c5 6400 	strd	r6, r4, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	e750      	b.n	8000e2a <__udivmoddi4+0xa6>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f94:	fa24 f303 	lsr.w	r3, r4, r3
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	430c      	orrs	r4, r1
 8000f9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fa0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fa4:	fa1f f78c 	uxth.w	r7, ip
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3110 	mls	r1, r8, r0, r3
 8000fb0:	0c23      	lsrs	r3, r4, #16
 8000fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb6:	fb00 f107 	mul.w	r1, r0, r7
 8000fba:	4299      	cmp	r1, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x24c>
 8000fbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fc6:	d22c      	bcs.n	8001022 <__udivmoddi4+0x29e>
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d92a      	bls.n	8001022 <__udivmoddi4+0x29e>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fe0:	fb01 f307 	mul.w	r3, r1, r7
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x276>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ff0:	d213      	bcs.n	800101a <__udivmoddi4+0x296>
 8000ff2:	42a3      	cmp	r3, r4
 8000ff4:	d911      	bls.n	800101a <__udivmoddi4+0x296>
 8000ff6:	3902      	subs	r1, #2
 8000ff8:	4464      	add	r4, ip
 8000ffa:	1ae4      	subs	r4, r4, r3
 8000ffc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001000:	e739      	b.n	8000e76 <__udivmoddi4+0xf2>
 8001002:	4604      	mov	r4, r0
 8001004:	e6f0      	b.n	8000de8 <__udivmoddi4+0x64>
 8001006:	4608      	mov	r0, r1
 8001008:	e706      	b.n	8000e18 <__udivmoddi4+0x94>
 800100a:	45c8      	cmp	r8, r9
 800100c:	d2ae      	bcs.n	8000f6c <__udivmoddi4+0x1e8>
 800100e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001012:	eb63 0c07 	sbc.w	ip, r3, r7
 8001016:	3801      	subs	r0, #1
 8001018:	e7a8      	b.n	8000f6c <__udivmoddi4+0x1e8>
 800101a:	4631      	mov	r1, r6
 800101c:	e7ed      	b.n	8000ffa <__udivmoddi4+0x276>
 800101e:	4603      	mov	r3, r0
 8001020:	e799      	b.n	8000f56 <__udivmoddi4+0x1d2>
 8001022:	4630      	mov	r0, r6
 8001024:	e7d4      	b.n	8000fd0 <__udivmoddi4+0x24c>
 8001026:	46d6      	mov	lr, sl
 8001028:	e77f      	b.n	8000f2a <__udivmoddi4+0x1a6>
 800102a:	4463      	add	r3, ip
 800102c:	3802      	subs	r0, #2
 800102e:	e74d      	b.n	8000ecc <__udivmoddi4+0x148>
 8001030:	4606      	mov	r6, r0
 8001032:	4623      	mov	r3, r4
 8001034:	4608      	mov	r0, r1
 8001036:	e70f      	b.n	8000e58 <__udivmoddi4+0xd4>
 8001038:	3e02      	subs	r6, #2
 800103a:	4463      	add	r3, ip
 800103c:	e730      	b.n	8000ea0 <__udivmoddi4+0x11c>
 800103e:	bf00      	nop

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <_cmd_reset>:

/* ---------------------------------------------------------------------- */
/* STM32 command handlers                                                 */
/* ---------------------------------------------------------------------- */
static void _cmd_reset(int argc, char *argv[])
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
    (void)argc; (void)argv;
    /* flush any pending TX */
    while (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TC) == RESET) { }
 800104e:	bf00      	nop
 8001050:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <_cmd_reset+0x34>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800105a:	2b40      	cmp	r3, #64	@ 0x40
 800105c:	d1f8      	bne.n	8001050 <_cmd_reset+0xc>
    HAL_UART_Transmit(&huart2, (uint8_t *)"STM32 resetting...\r\n", 20, HAL_MAX_DELAY);
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	2214      	movs	r2, #20
 8001064:	4905      	ldr	r1, [pc, #20]	@ (800107c <_cmd_reset+0x38>)
 8001066:	4804      	ldr	r0, [pc, #16]	@ (8001078 <_cmd_reset+0x34>)
 8001068:	f006 fa1e 	bl	80074a8 <HAL_UART_Transmit>
    HAL_NVIC_SystemReset();
 800106c:	f005 f979 	bl	8006362 <HAL_NVIC_SystemReset>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200005dc 	.word	0x200005dc
 800107c:	0800fd64 	.word	0x0800fd64

08001080 <cmdlinego>:

/* ---------------------------------------------------------------------- */
/* background task: forward BU-01 data to PC over UART2                   */
/* ---------------------------------------------------------------------- */
void cmdlinego(void *argument)
{
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af04      	add	r7, sp, #16
 8001086:	6078      	str	r0, [r7, #4]
    (void)argument;
    for (;;)
    {
        // === BU-01 direct parsing ===
    	if (bu01_rx_read_idx != bu01_rx_write_idx)
 8001088:	4b79      	ldr	r3, [pc, #484]	@ (8001270 <cmdlinego+0x1f0>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	b29a      	uxth	r2, r3
 800108e:	4b79      	ldr	r3, [pc, #484]	@ (8001274 <cmdlinego+0x1f4>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	b29b      	uxth	r3, r3
 8001094:	429a      	cmp	r2, r3
 8001096:	d035      	beq.n	8001104 <cmdlinego+0x84>
		{
			char c = bu01_rx_buffer[bu01_rx_read_idx++];
 8001098:	4b75      	ldr	r3, [pc, #468]	@ (8001270 <cmdlinego+0x1f0>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	b29b      	uxth	r3, r3
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	b291      	uxth	r1, r2
 80010a2:	4a73      	ldr	r2, [pc, #460]	@ (8001270 <cmdlinego+0x1f0>)
 80010a4:	8011      	strh	r1, [r2, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b73      	ldr	r3, [pc, #460]	@ (8001278 <cmdlinego+0x1f8>)
 80010aa:	5c9b      	ldrb	r3, [r3, r2]
 80010ac:	73fb      	strb	r3, [r7, #15]
			if (bu01_rx_read_idx >= BU01_BUF_SIZE)
 80010ae:	4b70      	ldr	r3, [pc, #448]	@ (8001270 <cmdlinego+0x1f0>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	2bff      	cmp	r3, #255	@ 0xff
 80010b6:	d902      	bls.n	80010be <cmdlinego+0x3e>
				bu01_rx_read_idx = 0;
 80010b8:	4b6d      	ldr	r3, [pc, #436]	@ (8001270 <cmdlinego+0x1f0>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	801a      	strh	r2, [r3, #0]

			line_buf[line_pos++] = c;
 80010be:	4b6f      	ldr	r3, [pc, #444]	@ (800127c <cmdlinego+0x1fc>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	b2d1      	uxtb	r1, r2
 80010c6:	4a6d      	ldr	r2, [pc, #436]	@ (800127c <cmdlinego+0x1fc>)
 80010c8:	7011      	strb	r1, [r2, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	4a6c      	ldr	r2, [pc, #432]	@ (8001280 <cmdlinego+0x200>)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	5453      	strb	r3, [r2, r1]
			if (c == '\n' || line_pos >= sizeof(line_buf) - 1)
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b0a      	cmp	r3, #10
 80010d6:	d003      	beq.n	80010e0 <cmdlinego+0x60>
 80010d8:	4b68      	ldr	r3, [pc, #416]	@ (800127c <cmdlinego+0x1fc>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80010de:	d911      	bls.n	8001104 <cmdlinego+0x84>
			{
				line_buf[line_pos] = '\0';
 80010e0:	4b66      	ldr	r3, [pc, #408]	@ (800127c <cmdlinego+0x1fc>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b66      	ldr	r3, [pc, #408]	@ (8001280 <cmdlinego+0x200>)
 80010e8:	2100      	movs	r1, #0
 80010ea:	5499      	strb	r1, [r3, r2]
				HAL_UART_Transmit(&huart2, (uint8_t *)line_buf, line_pos, HAL_MAX_DELAY);
 80010ec:	4b63      	ldr	r3, [pc, #396]	@ (800127c <cmdlinego+0x1fc>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	4962      	ldr	r1, [pc, #392]	@ (8001280 <cmdlinego+0x200>)
 80010f8:	4862      	ldr	r0, [pc, #392]	@ (8001284 <cmdlinego+0x204>)
 80010fa:	f006 f9d5 	bl	80074a8 <HAL_UART_Transmit>
				line_pos = 0;
 80010fe:	4b5f      	ldr	r3, [pc, #380]	@ (800127c <cmdlinego+0x1fc>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
			}
		}

        // === HC-05 Bluetooth parsing ===
        if (hc05_rx_read_idx != hc05_rx_write_idx)
 8001104:	4b60      	ldr	r3, [pc, #384]	@ (8001288 <cmdlinego+0x208>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	b29a      	uxth	r2, r3
 800110a:	4b60      	ldr	r3, [pc, #384]	@ (800128c <cmdlinego+0x20c>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	b29b      	uxth	r3, r3
 8001110:	429a      	cmp	r2, r3
 8001112:	f000 80a8 	beq.w	8001266 <cmdlinego+0x1e6>
        {

            char c = hc05_rx_buffer[hc05_rx_read_idx++];
 8001116:	4b5c      	ldr	r3, [pc, #368]	@ (8001288 <cmdlinego+0x208>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	1c5a      	adds	r2, r3, #1
 800111e:	b291      	uxth	r1, r2
 8001120:	4a59      	ldr	r2, [pc, #356]	@ (8001288 <cmdlinego+0x208>)
 8001122:	8011      	strh	r1, [r2, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b5a      	ldr	r3, [pc, #360]	@ (8001290 <cmdlinego+0x210>)
 8001128:	5c9b      	ldrb	r3, [r3, r2]
 800112a:	73bb      	strb	r3, [r7, #14]
            if (hc05_rx_read_idx >= HC05_BUF_SIZE)
 800112c:	4b56      	ldr	r3, [pc, #344]	@ (8001288 <cmdlinego+0x208>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	b29b      	uxth	r3, r3
 8001132:	2bff      	cmp	r3, #255	@ 0xff
 8001134:	d902      	bls.n	800113c <cmdlinego+0xbc>
                hc05_rx_read_idx = 0;
 8001136:	4b54      	ldr	r3, [pc, #336]	@ (8001288 <cmdlinego+0x208>)
 8001138:	2200      	movs	r2, #0
 800113a:	801a      	strh	r2, [r3, #0]

            if (hc05_line_pos < sizeof(hc05_line_buf) - 1)
 800113c:	4b55      	ldr	r3, [pc, #340]	@ (8001294 <cmdlinego+0x214>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b3e      	cmp	r3, #62	@ 0x3e
 8001142:	d809      	bhi.n	8001158 <cmdlinego+0xd8>
                hc05_line_buf[hc05_line_pos++] = c;
 8001144:	4b53      	ldr	r3, [pc, #332]	@ (8001294 <cmdlinego+0x214>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	b2d1      	uxtb	r1, r2
 800114c:	4a51      	ldr	r2, [pc, #324]	@ (8001294 <cmdlinego+0x214>)
 800114e:	7011      	strb	r1, [r2, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	4a51      	ldr	r2, [pc, #324]	@ (8001298 <cmdlinego+0x218>)
 8001154:	7bbb      	ldrb	r3, [r7, #14]
 8001156:	5453      	strb	r3, [r2, r1]

            if (c == '\n' || hc05_line_pos >= sizeof(hc05_line_buf) - 1)
 8001158:	7bbb      	ldrb	r3, [r7, #14]
 800115a:	2b0a      	cmp	r3, #10
 800115c:	d003      	beq.n	8001166 <cmdlinego+0xe6>
 800115e:	4b4d      	ldr	r3, [pc, #308]	@ (8001294 <cmdlinego+0x214>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b3e      	cmp	r3, #62	@ 0x3e
 8001164:	d97f      	bls.n	8001266 <cmdlinego+0x1e6>
            {
                hc05_line_buf[hc05_line_pos] = '\0';
 8001166:	4b4b      	ldr	r3, [pc, #300]	@ (8001294 <cmdlinego+0x214>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	4b4a      	ldr	r3, [pc, #296]	@ (8001298 <cmdlinego+0x218>)
 800116e:	2100      	movs	r1, #0
 8001170:	5499      	strb	r1, [r3, r2]

                if (strncmp(hc05_line_buf, "an0:", 4) == 0)
 8001172:	2204      	movs	r2, #4
 8001174:	4949      	ldr	r1, [pc, #292]	@ (800129c <cmdlinego+0x21c>)
 8001176:	4848      	ldr	r0, [pc, #288]	@ (8001298 <cmdlinego+0x218>)
 8001178:	f00b fee4 	bl	800cf44 <strncmp>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d112      	bne.n	80011a8 <cmdlinego+0x128>
                    anchordistance[0] = (uint16_t)(strtof(&hc05_line_buf[4], NULL) * 1000);
 8001182:	2100      	movs	r1, #0
 8001184:	4846      	ldr	r0, [pc, #280]	@ (80012a0 <cmdlinego+0x220>)
 8001186:	f00a fd55 	bl	800bc34 <strtof>
 800118a:	eef0 7a40 	vmov.f32	s15, s0
 800118e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80012a4 <cmdlinego+0x224>
 8001192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800119a:	ee17 3a90 	vmov	r3, s15
 800119e:	b29b      	uxth	r3, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b41      	ldr	r3, [pc, #260]	@ (80012a8 <cmdlinego+0x228>)
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	e050      	b.n	800124a <cmdlinego+0x1ca>
                else if (strncmp(hc05_line_buf, "an2:", 4) == 0)
 80011a8:	2204      	movs	r2, #4
 80011aa:	4940      	ldr	r1, [pc, #256]	@ (80012ac <cmdlinego+0x22c>)
 80011ac:	483a      	ldr	r0, [pc, #232]	@ (8001298 <cmdlinego+0x218>)
 80011ae:	f00b fec9 	bl	800cf44 <strncmp>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d112      	bne.n	80011de <cmdlinego+0x15e>
                    anchordistance[1] = (uint16_t)(strtof(&hc05_line_buf[4], NULL) * 1000);
 80011b8:	2100      	movs	r1, #0
 80011ba:	4839      	ldr	r0, [pc, #228]	@ (80012a0 <cmdlinego+0x220>)
 80011bc:	f00a fd3a 	bl	800bc34 <strtof>
 80011c0:	eef0 7a40 	vmov.f32	s15, s0
 80011c4:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80012a4 <cmdlinego+0x224>
 80011c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011d0:	ee17 3a90 	vmov	r3, s15
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b33      	ldr	r3, [pc, #204]	@ (80012a8 <cmdlinego+0x228>)
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	e035      	b.n	800124a <cmdlinego+0x1ca>
                else if (strncmp(hc05_line_buf, "an3:", 4) == 0)
 80011de:	2204      	movs	r2, #4
 80011e0:	4933      	ldr	r1, [pc, #204]	@ (80012b0 <cmdlinego+0x230>)
 80011e2:	482d      	ldr	r0, [pc, #180]	@ (8001298 <cmdlinego+0x218>)
 80011e4:	f00b feae 	bl	800cf44 <strncmp>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d12d      	bne.n	800124a <cmdlinego+0x1ca>
                {
                    anchordistance[2] = (uint16_t)(strtof(&hc05_line_buf[4], NULL) * 1000);
 80011ee:	2100      	movs	r1, #0
 80011f0:	482b      	ldr	r0, [pc, #172]	@ (80012a0 <cmdlinego+0x220>)
 80011f2:	f00a fd1f 	bl	800bc34 <strtof>
 80011f6:	eef0 7a40 	vmov.f32	s15, s0
 80011fa:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80012a4 <cmdlinego+0x224>
 80011fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001206:	ee17 3a90 	vmov	r3, s15
 800120a:	b29b      	uxth	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <cmdlinego+0x228>)
 8001210:	609a      	str	r2, [r3, #8]
					//if (now - last_anchor_print >= 500)
					{

						//last_anchor_print = now;
					//printf("an0=%d mm, an2=%d mm, an3=%d mm\n", anchordistance[0], anchordistance[1], anchordistance[2]);
					if(GetLocation(&tag_position, 0, &(AnchorList[0]), &(anchordistance[0])) != -1)
 8001212:	4b25      	ldr	r3, [pc, #148]	@ (80012a8 <cmdlinego+0x228>)
 8001214:	4a27      	ldr	r2, [pc, #156]	@ (80012b4 <cmdlinego+0x234>)
 8001216:	2100      	movs	r1, #0
 8001218:	4827      	ldr	r0, [pc, #156]	@ (80012b8 <cmdlinego+0x238>)
 800121a:	f004 fc6d 	bl	8005af8 <GetLocation>
 800121e:	4603      	mov	r3, r0
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001224:	d011      	beq.n	800124a <cmdlinego+0x1ca>
					{
					printf("Tag Location:x=%3.2fm y=%3.2fm z=%3.2fm\r\n",tag_position.x,tag_position.y,tag_position.z);
 8001226:	4b24      	ldr	r3, [pc, #144]	@ (80012b8 <cmdlinego+0x238>)
 8001228:	e9d3 4500 	ldrd	r4, r5, [r3]
 800122c:	4b22      	ldr	r3, [pc, #136]	@ (80012b8 <cmdlinego+0x238>)
 800122e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001232:	4921      	ldr	r1, [pc, #132]	@ (80012b8 <cmdlinego+0x238>)
 8001234:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800123c:	e9cd 2300 	strd	r2, r3, [sp]
 8001240:	4622      	mov	r2, r4
 8001242:	462b      	mov	r3, r5
 8001244:	481d      	ldr	r0, [pc, #116]	@ (80012bc <cmdlinego+0x23c>)
 8001246:	f00b fd0d 	bl	800cc64 <iprintf>
					//sprintf(dist_str, "x:%3.2f y:%3.2f",tag_best_solution.x,tag_best_solution.y);
					}
					}
                }
                if (strncmp(hc05_line_buf, "an", 2) != 0)
 800124a:	2202      	movs	r2, #2
 800124c:	491c      	ldr	r1, [pc, #112]	@ (80012c0 <cmdlinego+0x240>)
 800124e:	4812      	ldr	r0, [pc, #72]	@ (8001298 <cmdlinego+0x218>)
 8001250:	f00b fe78 	bl	800cf44 <strncmp>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <cmdlinego+0x1e0>
                	printf("%s\n",hc05_line_buf);
 800125a:	480f      	ldr	r0, [pc, #60]	@ (8001298 <cmdlinego+0x218>)
 800125c:	f00b fd6a 	bl	800cd34 <puts>

                hc05_line_pos = 0;
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <cmdlinego+0x214>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
            }
        }

        osDelay(1);
 8001266:	2001      	movs	r0, #1
 8001268:	f007 fa34 	bl	80086d4 <osDelay>
    	if (bu01_rx_read_idx != bu01_rx_write_idx)
 800126c:	e70c      	b.n	8001088 <cmdlinego+0x8>
 800126e:	bf00      	nop
 8001270:	200003f6 	.word	0x200003f6
 8001274:	200003f4 	.word	0x200003f4
 8001278:	200002f4 	.word	0x200002f4
 800127c:	20000438 	.word	0x20000438
 8001280:	200003f8 	.word	0x200003f8
 8001284:	200005dc 	.word	0x200005dc
 8001288:	2000054a 	.word	0x2000054a
 800128c:	20000548 	.word	0x20000548
 8001290:	20000448 	.word	0x20000448
 8001294:	2000058c 	.word	0x2000058c
 8001298:	2000054c 	.word	0x2000054c
 800129c:	0800fd7c 	.word	0x0800fd7c
 80012a0:	20000550 	.word	0x20000550
 80012a4:	447a0000 	.word	0x447a0000
 80012a8:	2000043c 	.word	0x2000043c
 80012ac:	0800fd84 	.word	0x0800fd84
 80012b0:	0800fd8c 	.word	0x0800fd8c
 80012b4:	20000080 	.word	0x20000080
 80012b8:	20000678 	.word	0x20000678
 80012bc:	0800fd94 	.word	0x0800fd94
 80012c0:	0800fdc0 	.word	0x0800fdc0

080012c4 <uartt_init>:

/* ---------------------------------------------------------------------- */
/* initialize UART interrupts for PC (UART2), BU-01 (UART1), HC-05(UART3)*/
/* ---------------------------------------------------------------------- */
void uartt_init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, &rx_from_bu01, 1);
 80012c8:	2201      	movs	r2, #1
 80012ca:	4908      	ldr	r1, [pc, #32]	@ (80012ec <uartt_init+0x28>)
 80012cc:	4808      	ldr	r0, [pc, #32]	@ (80012f0 <uartt_init+0x2c>)
 80012ce:	f006 f976 	bl	80075be <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&huart2, &rx_from_pc,   1);
 80012d2:	2201      	movs	r2, #1
 80012d4:	4907      	ldr	r1, [pc, #28]	@ (80012f4 <uartt_init+0x30>)
 80012d6:	4808      	ldr	r0, [pc, #32]	@ (80012f8 <uartt_init+0x34>)
 80012d8:	f006 f971 	bl	80075be <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(&huart3, &rx_from_hc05,  1);
 80012dc:	2201      	movs	r2, #1
 80012de:	4907      	ldr	r1, [pc, #28]	@ (80012fc <uartt_init+0x38>)
 80012e0:	4807      	ldr	r0, [pc, #28]	@ (8001300 <uartt_init+0x3c>)
 80012e2:	f006 f96c 	bl	80075be <HAL_UART_Receive_IT>
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200002cd 	.word	0x200002cd
 80012f0:	20000594 	.word	0x20000594
 80012f4:	200002cc 	.word	0x200002cc
 80012f8:	200005dc 	.word	0x200005dc
 80012fc:	200002ce 	.word	0x200002ce
 8001300:	20000624 	.word	0x20000624

08001304 <cmd_line_init>:

/* ---------------------------------------------------------------------- */
/* start the command-line thread                                          */
/* ---------------------------------------------------------------------- */
void cmd_line_init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
    cmdlineID = osThreadNew(cmdlinego, NULL, &cmdline_att);
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <cmd_line_init+0x18>)
 800130a:	2100      	movs	r1, #0
 800130c:	4804      	ldr	r0, [pc, #16]	@ (8001320 <cmd_line_init+0x1c>)
 800130e:	f007 f94f 	bl	80085b0 <osThreadNew>
 8001312:	4603      	mov	r3, r0
 8001314:	4a03      	ldr	r2, [pc, #12]	@ (8001324 <cmd_line_init+0x20>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	0800fe4c 	.word	0x0800fe4c
 8001320:	08001081 	.word	0x08001081
 8001324:	20000590 	.word	0x20000590

08001328 <HAL_UART_RxCpltCallback>:
/*   - UART2: commands from PC                                             */
/*   - UART1: responses from BU-01                                         */
/*   - UART3: responses from HC-05                                         */
/* ---------------------------------------------------------------------- */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b093      	sub	sp, #76	@ 0x4c
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    /* --- PC input (UART2) --- */
    if (huart == &huart2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4aa3      	ldr	r2, [pc, #652]	@ (80015c0 <HAL_UART_RxCpltCallback+0x298>)
 8001334:	4293      	cmp	r3, r2
 8001336:	f040 8124 	bne.w	8001582 <HAL_UART_RxCpltCallback+0x25a>
    {
        char c = rx_from_pc;
 800133a:	4ba2      	ldr	r3, [pc, #648]	@ (80015c4 <HAL_UART_RxCpltCallback+0x29c>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        /* echo back */
        //HAL_UART_Transmit(&huart2, &c, 1, HAL_MAX_DELAY);

        /* on newline, dispatch */
        if (c == '\r' || c == '\n')
 8001342:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001346:	2b0d      	cmp	r3, #13
 8001348:	d004      	beq.n	8001354 <HAL_UART_RxCpltCallback+0x2c>
 800134a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800134e:	2b0a      	cmp	r3, #10
 8001350:	f040 80f0 	bne.w	8001534 <HAL_UART_RxCpltCallback+0x20c>
        {
            input_buf[input_pos] = '\0';
 8001354:	4b9c      	ldr	r3, [pc, #624]	@ (80015c8 <HAL_UART_RxCpltCallback+0x2a0>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b9c      	ldr	r3, [pc, #624]	@ (80015cc <HAL_UART_RxCpltCallback+0x2a4>)
 800135c:	2100      	movs	r1, #0
 800135e:	5499      	strb	r1, [r3, r2]

            if (input_pos > 0)
 8001360:	4b99      	ldr	r3, [pc, #612]	@ (80015c8 <HAL_UART_RxCpltCallback+0x2a0>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80e1 	beq.w	800152c <HAL_UART_RxCpltCallback+0x204>
            {
                /* BU-01 if leading digit */
                if (isdigit((unsigned char)input_buf[0]))
 800136a:	4b98      	ldr	r3, [pc, #608]	@ (80015cc <HAL_UART_RxCpltCallback+0x2a4>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	3301      	adds	r3, #1
 8001370:	4a97      	ldr	r2, [pc, #604]	@ (80015d0 <HAL_UART_RxCpltCallback+0x2a8>)
 8001372:	4413      	add	r3, r2
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	2b00      	cmp	r3, #0
 800137c:	d038      	beq.n	80013f0 <HAL_UART_RxCpltCallback+0xc8>
                {
                    int idx = atoi(input_buf);
 800137e:	4893      	ldr	r0, [pc, #588]	@ (80015cc <HAL_UART_RxCpltCallback+0x2a4>)
 8001380:	f009 fe4a 	bl	800b018 <atoi>
 8001384:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    if (idx >= 0 && idx < NUM_BU01_CMDS)
 8001386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001388:	2b00      	cmp	r3, #0
 800138a:	db29      	blt.n	80013e0 <HAL_UART_RxCpltCallback+0xb8>
 800138c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800138e:	2b0b      	cmp	r3, #11
 8001390:	d826      	bhi.n	80013e0 <HAL_UART_RxCpltCallback+0xb8>
                    {
                        HAL_UART_Transmit(&huart1,
                                          (uint8_t*)bu01_commands[idx],
 8001392:	4a90      	ldr	r2, [pc, #576]	@ (80015d4 <HAL_UART_RxCpltCallback+0x2ac>)
 8001394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001396:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
                                          strlen(bu01_commands[idx]),
 800139a:	4a8e      	ldr	r2, [pc, #568]	@ (80015d4 <HAL_UART_RxCpltCallback+0x2ac>)
 800139c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7fe ff94 	bl	80002d0 <strlen>
 80013a8:	4603      	mov	r3, r0
                        HAL_UART_Transmit(&huart1,
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	4621      	mov	r1, r4
 80013b2:	4889      	ldr	r0, [pc, #548]	@ (80015d8 <HAL_UART_RxCpltCallback+0x2b0>)
 80013b4:	f006 f878 	bl	80074a8 <HAL_UART_Transmit>
                                          HAL_MAX_DELAY);
                        HAL_UART_Transmit(&huart2,
                                          (uint8_t*)bu01_commands[idx],
 80013b8:	4a86      	ldr	r2, [pc, #536]	@ (80015d4 <HAL_UART_RxCpltCallback+0x2ac>)
 80013ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
                                          strlen(bu01_commands[idx]),
 80013c0:	4a84      	ldr	r2, [pc, #528]	@ (80015d4 <HAL_UART_RxCpltCallback+0x2ac>)
 80013c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7fe ff81 	bl	80002d0 <strlen>
 80013ce:	4603      	mov	r3, r0
                        HAL_UART_Transmit(&huart2,
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	4621      	mov	r1, r4
 80013d8:	4879      	ldr	r0, [pc, #484]	@ (80015c0 <HAL_UART_RxCpltCallback+0x298>)
 80013da:	f006 f865 	bl	80074a8 <HAL_UART_Transmit>
 80013de:	e0a5      	b.n	800152c <HAL_UART_RxCpltCallback+0x204>
                                          HAL_MAX_DELAY);
                    }
                    else
                    {
                        HAL_UART_Transmit(&huart2,
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	2213      	movs	r2, #19
 80013e6:	497d      	ldr	r1, [pc, #500]	@ (80015dc <HAL_UART_RxCpltCallback+0x2b4>)
 80013e8:	4875      	ldr	r0, [pc, #468]	@ (80015c0 <HAL_UART_RxCpltCallback+0x298>)
 80013ea:	f006 f85d 	bl	80074a8 <HAL_UART_Transmit>
 80013ee:	e09d      	b.n	800152c <HAL_UART_RxCpltCallback+0x204>
                                          19,
                                          HAL_MAX_DELAY);
                    }
                }
                /* HC-05 if ‘H’ or ‘h’ + digit */
                else if ((input_buf[0] == 'H' || input_buf[0] == 'h')
 80013f0:	4b76      	ldr	r3, [pc, #472]	@ (80015cc <HAL_UART_RxCpltCallback+0x2a4>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b48      	cmp	r3, #72	@ 0x48
 80013f6:	d003      	beq.n	8001400 <HAL_UART_RxCpltCallback+0xd8>
 80013f8:	4b74      	ldr	r3, [pc, #464]	@ (80015cc <HAL_UART_RxCpltCallback+0x2a4>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b68      	cmp	r3, #104	@ 0x68
 80013fe:	d142      	bne.n	8001486 <HAL_UART_RxCpltCallback+0x15e>
                         && isdigit((unsigned char)input_buf[1]))
 8001400:	4b72      	ldr	r3, [pc, #456]	@ (80015cc <HAL_UART_RxCpltCallback+0x2a4>)
 8001402:	785b      	ldrb	r3, [r3, #1]
 8001404:	3301      	adds	r3, #1
 8001406:	4a72      	ldr	r2, [pc, #456]	@ (80015d0 <HAL_UART_RxCpltCallback+0x2a8>)
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	d038      	beq.n	8001486 <HAL_UART_RxCpltCallback+0x15e>
                {
                    int idx = atoi(&input_buf[1]);
 8001414:	4872      	ldr	r0, [pc, #456]	@ (80015e0 <HAL_UART_RxCpltCallback+0x2b8>)
 8001416:	f009 fdff 	bl	800b018 <atoi>
 800141a:	6338      	str	r0, [r7, #48]	@ 0x30
                    if (idx >= 0 && idx < NUM_HC05_CMDS)
 800141c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800141e:	2b00      	cmp	r3, #0
 8001420:	db29      	blt.n	8001476 <HAL_UART_RxCpltCallback+0x14e>
 8001422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001424:	2b12      	cmp	r3, #18
 8001426:	d826      	bhi.n	8001476 <HAL_UART_RxCpltCallback+0x14e>
                    {
                        HAL_UART_Transmit(&huart3,
                                          (uint8_t*)hc05_commands[idx],
 8001428:	4a6e      	ldr	r2, [pc, #440]	@ (80015e4 <HAL_UART_RxCpltCallback+0x2bc>)
 800142a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800142c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
                                          strlen(hc05_commands[idx]),
 8001430:	4a6c      	ldr	r2, [pc, #432]	@ (80015e4 <HAL_UART_RxCpltCallback+0x2bc>)
 8001432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001438:	4618      	mov	r0, r3
 800143a:	f7fe ff49 	bl	80002d0 <strlen>
 800143e:	4603      	mov	r3, r0
                        HAL_UART_Transmit(&huart3,
 8001440:	b29a      	uxth	r2, r3
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	4621      	mov	r1, r4
 8001448:	4867      	ldr	r0, [pc, #412]	@ (80015e8 <HAL_UART_RxCpltCallback+0x2c0>)
 800144a:	f006 f82d 	bl	80074a8 <HAL_UART_Transmit>
                                          HAL_MAX_DELAY);
                        HAL_UART_Transmit(&huart2,
                                          (uint8_t*)hc05_commands[idx],
 800144e:	4a65      	ldr	r2, [pc, #404]	@ (80015e4 <HAL_UART_RxCpltCallback+0x2bc>)
 8001450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001452:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
                                          strlen(hc05_commands[idx]),
 8001456:	4a63      	ldr	r2, [pc, #396]	@ (80015e4 <HAL_UART_RxCpltCallback+0x2bc>)
 8001458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800145a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145e:	4618      	mov	r0, r3
 8001460:	f7fe ff36 	bl	80002d0 <strlen>
 8001464:	4603      	mov	r3, r0
                        HAL_UART_Transmit(&huart2,
 8001466:	b29a      	uxth	r2, r3
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
 800146c:	4621      	mov	r1, r4
 800146e:	4854      	ldr	r0, [pc, #336]	@ (80015c0 <HAL_UART_RxCpltCallback+0x298>)
 8001470:	f006 f81a 	bl	80074a8 <HAL_UART_Transmit>
                {
 8001474:	e05a      	b.n	800152c <HAL_UART_RxCpltCallback+0x204>
                                          HAL_MAX_DELAY);
                    }
                    else
                    {
                        HAL_UART_Transmit(&huart2,
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	2214      	movs	r2, #20
 800147c:	495b      	ldr	r1, [pc, #364]	@ (80015ec <HAL_UART_RxCpltCallback+0x2c4>)
 800147e:	4850      	ldr	r0, [pc, #320]	@ (80015c0 <HAL_UART_RxCpltCallback+0x298>)
 8001480:	f006 f812 	bl	80074a8 <HAL_UART_Transmit>
                {
 8001484:	e052      	b.n	800152c <HAL_UART_RxCpltCallback+0x204>
                }
                /* otherwise STM32 commands */
                else
                {
                    char *argv[8];
                    int   argc = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	647b      	str	r3, [r7, #68]	@ 0x44
                    char *tok = strtok(input_buf, " ");
 800148a:	4959      	ldr	r1, [pc, #356]	@ (80015f0 <HAL_UART_RxCpltCallback+0x2c8>)
 800148c:	484f      	ldr	r0, [pc, #316]	@ (80015cc <HAL_UART_RxCpltCallback+0x2a4>)
 800148e:	f00b fd6b 	bl	800cf68 <strtok>
 8001492:	6438      	str	r0, [r7, #64]	@ 0x40
                    while (tok && argc < (int)(sizeof(argv)/sizeof(argv[0])))
 8001494:	e00d      	b.n	80014b2 <HAL_UART_RxCpltCallback+0x18a>
                    {
                        argv[argc++] = tok;
 8001496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	647a      	str	r2, [r7, #68]	@ 0x44
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	3348      	adds	r3, #72	@ 0x48
 80014a0:	443b      	add	r3, r7
 80014a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80014a4:	f843 2c3c 	str.w	r2, [r3, #-60]
                        tok = strtok(NULL, " ");
 80014a8:	4951      	ldr	r1, [pc, #324]	@ (80015f0 <HAL_UART_RxCpltCallback+0x2c8>)
 80014aa:	2000      	movs	r0, #0
 80014ac:	f00b fd5c 	bl	800cf68 <strtok>
 80014b0:	6438      	str	r0, [r7, #64]	@ 0x40
                    while (tok && argc < (int)(sizeof(argv)/sizeof(argv[0])))
 80014b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d002      	beq.n	80014be <HAL_UART_RxCpltCallback+0x196>
 80014b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014ba:	2b07      	cmp	r3, #7
 80014bc:	ddeb      	ble.n	8001496 <HAL_UART_RxCpltCallback+0x16e>
                    }

                    bool matched = false;
 80014be:	2300      	movs	r3, #0
 80014c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                    for (size_t i = 0; i < stm32_cmd_count; ++i)
 80014c4:	2300      	movs	r3, #0
 80014c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80014c8:	e01e      	b.n	8001508 <HAL_UART_RxCpltCallback+0x1e0>
                    {
                        if (strcmp(argv[0], stm32_cmds[i].cmd) == 0)
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4949      	ldr	r1, [pc, #292]	@ (80015f4 <HAL_UART_RxCpltCallback+0x2cc>)
 80014ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	440b      	add	r3, r1
 80014d4:	3304      	adds	r3, #4
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	4610      	mov	r0, r2
 80014dc:	f7fe fe98 	bl	8000210 <strcmp>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10d      	bne.n	8001502 <HAL_UART_RxCpltCallback+0x1da>
                        {
                            stm32_cmds[i].func(argc, argv);
 80014e6:	4a43      	ldr	r2, [pc, #268]	@ (80015f4 <HAL_UART_RxCpltCallback+0x2cc>)
 80014e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	4413      	add	r3, r2
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f107 020c 	add.w	r2, r7, #12
 80014f4:	4611      	mov	r1, r2
 80014f6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80014f8:	4798      	blx	r3
                            matched = true;
 80014fa:	2301      	movs	r3, #1
 80014fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 8001500:	e006      	b.n	8001510 <HAL_UART_RxCpltCallback+0x1e8>
                    for (size_t i = 0; i < stm32_cmd_count; ++i)
 8001502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001504:	3301      	adds	r3, #1
 8001506:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001508:	2201      	movs	r2, #1
 800150a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800150c:	4293      	cmp	r3, r2
 800150e:	d3dc      	bcc.n	80014ca <HAL_UART_RxCpltCallback+0x1a2>
                        }
                    }
                    if (!matched)
 8001510:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001514:	f083 0301 	eor.w	r3, r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <HAL_UART_RxCpltCallback+0x204>
                    {
                        HAL_UART_Transmit(&huart2,
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	2211      	movs	r2, #17
 8001524:	4934      	ldr	r1, [pc, #208]	@ (80015f8 <HAL_UART_RxCpltCallback+0x2d0>)
 8001526:	4826      	ldr	r0, [pc, #152]	@ (80015c0 <HAL_UART_RxCpltCallback+0x298>)
 8001528:	f005 ffbe 	bl	80074a8 <HAL_UART_Transmit>
                    }
                }
            }

            /* reset buffer */
            input_pos = 0;
 800152c:	4b26      	ldr	r3, [pc, #152]	@ (80015c8 <HAL_UART_RxCpltCallback+0x2a0>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	e020      	b.n	8001576 <HAL_UART_RxCpltCallback+0x24e>
        }
        /* accumulate valid characters */
        else if (input_pos < (MAX_INPUT - 1) &&
 8001534:	4b24      	ldr	r3, [pc, #144]	@ (80015c8 <HAL_UART_RxCpltCallback+0x2a0>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b1e      	cmp	r3, #30
 800153a:	d819      	bhi.n	8001570 <HAL_UART_RxCpltCallback+0x248>
                 (isalnum((unsigned char)c) || c == '_'))
 800153c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001540:	3301      	adds	r3, #1
 8001542:	4a23      	ldr	r2, [pc, #140]	@ (80015d0 <HAL_UART_RxCpltCallback+0x2a8>)
 8001544:	4413      	add	r3, r2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	f003 0307 	and.w	r3, r3, #7
        else if (input_pos < (MAX_INPUT - 1) &&
 800154c:	2b00      	cmp	r3, #0
 800154e:	d103      	bne.n	8001558 <HAL_UART_RxCpltCallback+0x230>
                 (isalnum((unsigned char)c) || c == '_'))
 8001550:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001554:	2b5f      	cmp	r3, #95	@ 0x5f
 8001556:	d10b      	bne.n	8001570 <HAL_UART_RxCpltCallback+0x248>
        {
            input_buf[input_pos++] = c;
 8001558:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <HAL_UART_RxCpltCallback+0x2a0>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	b2d1      	uxtb	r1, r2
 8001560:	4a19      	ldr	r2, [pc, #100]	@ (80015c8 <HAL_UART_RxCpltCallback+0x2a0>)
 8001562:	7011      	strb	r1, [r2, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	4a19      	ldr	r2, [pc, #100]	@ (80015cc <HAL_UART_RxCpltCallback+0x2a4>)
 8001568:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800156c:	5453      	strb	r3, [r2, r1]
 800156e:	e002      	b.n	8001576 <HAL_UART_RxCpltCallback+0x24e>
        }
        else
        {
            /* overflow or invalid => reset */
            input_pos = 0;
 8001570:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <HAL_UART_RxCpltCallback+0x2a0>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
        }

        /* re-arm PC receive */
        HAL_UART_Receive_IT(&huart2, &rx_from_pc, 1);
 8001576:	2201      	movs	r2, #1
 8001578:	4912      	ldr	r1, [pc, #72]	@ (80015c4 <HAL_UART_RxCpltCallback+0x29c>)
 800157a:	4811      	ldr	r0, [pc, #68]	@ (80015c0 <HAL_UART_RxCpltCallback+0x298>)
 800157c:	f006 f81f 	bl	80075be <HAL_UART_Receive_IT>
        // Optional: still forward to PC for debug
        //HAL_UART_Transmit(&huart2, &rx_from_hc05, 1, HAL_MAX_DELAY);

        HAL_UART_Receive_IT(&huart3, &rx_from_hc05, 1);
    }
}
 8001580:	e05f      	b.n	8001642 <HAL_UART_RxCpltCallback+0x31a>
    else if (huart == &huart1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a14      	ldr	r2, [pc, #80]	@ (80015d8 <HAL_UART_RxCpltCallback+0x2b0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d13e      	bne.n	8001608 <HAL_UART_RxCpltCallback+0x2e0>
        bu01_rx_buffer[bu01_rx_write_idx++] = rx_from_bu01;
 800158a:	4b1c      	ldr	r3, [pc, #112]	@ (80015fc <HAL_UART_RxCpltCallback+0x2d4>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	b291      	uxth	r1, r2
 8001594:	4a19      	ldr	r2, [pc, #100]	@ (80015fc <HAL_UART_RxCpltCallback+0x2d4>)
 8001596:	8011      	strh	r1, [r2, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <HAL_UART_RxCpltCallback+0x2d8>)
 800159c:	7819      	ldrb	r1, [r3, #0]
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_UART_RxCpltCallback+0x2dc>)
 80015a0:	5499      	strb	r1, [r3, r2]
        if (bu01_rx_write_idx >= BU01_BUF_SIZE)
 80015a2:	4b16      	ldr	r3, [pc, #88]	@ (80015fc <HAL_UART_RxCpltCallback+0x2d4>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	2bff      	cmp	r3, #255	@ 0xff
 80015aa:	d902      	bls.n	80015b2 <HAL_UART_RxCpltCallback+0x28a>
            bu01_rx_write_idx = 0;
 80015ac:	4b13      	ldr	r3, [pc, #76]	@ (80015fc <HAL_UART_RxCpltCallback+0x2d4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	801a      	strh	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart1, &rx_from_bu01, 1);
 80015b2:	2201      	movs	r2, #1
 80015b4:	4912      	ldr	r1, [pc, #72]	@ (8001600 <HAL_UART_RxCpltCallback+0x2d8>)
 80015b6:	4808      	ldr	r0, [pc, #32]	@ (80015d8 <HAL_UART_RxCpltCallback+0x2b0>)
 80015b8:	f006 f801 	bl	80075be <HAL_UART_Receive_IT>
}
 80015bc:	e041      	b.n	8001642 <HAL_UART_RxCpltCallback+0x31a>
 80015be:	bf00      	nop
 80015c0:	200005dc 	.word	0x200005dc
 80015c4:	200002cc 	.word	0x200002cc
 80015c8:	200002f0 	.word	0x200002f0
 80015cc:	200002d0 	.word	0x200002d0
 80015d0:	0800ff00 	.word	0x0800ff00
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000594 	.word	0x20000594
 80015dc:	0800fdc4 	.word	0x0800fdc4
 80015e0:	200002d1 	.word	0x200002d1
 80015e4:	20000030 	.word	0x20000030
 80015e8:	20000624 	.word	0x20000624
 80015ec:	0800fddc 	.word	0x0800fddc
 80015f0:	0800fdf4 	.word	0x0800fdf4
 80015f4:	0800fe3c 	.word	0x0800fe3c
 80015f8:	0800fdf8 	.word	0x0800fdf8
 80015fc:	200003f4 	.word	0x200003f4
 8001600:	200002cd 	.word	0x200002cd
 8001604:	200002f4 	.word	0x200002f4
    else if (huart == &huart3)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a10      	ldr	r2, [pc, #64]	@ (800164c <HAL_UART_RxCpltCallback+0x324>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d118      	bne.n	8001642 <HAL_UART_RxCpltCallback+0x31a>
        hc05_rx_buffer[hc05_rx_write_idx++] = rx_from_hc05;
 8001610:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <HAL_UART_RxCpltCallback+0x328>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	b29b      	uxth	r3, r3
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	b291      	uxth	r1, r2
 800161a:	4a0d      	ldr	r2, [pc, #52]	@ (8001650 <HAL_UART_RxCpltCallback+0x328>)
 800161c:	8011      	strh	r1, [r2, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <HAL_UART_RxCpltCallback+0x32c>)
 8001622:	7819      	ldrb	r1, [r3, #0]
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <HAL_UART_RxCpltCallback+0x330>)
 8001626:	5499      	strb	r1, [r3, r2]
        if (hc05_rx_write_idx >= HC05_BUF_SIZE)
 8001628:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <HAL_UART_RxCpltCallback+0x328>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	b29b      	uxth	r3, r3
 800162e:	2bff      	cmp	r3, #255	@ 0xff
 8001630:	d902      	bls.n	8001638 <HAL_UART_RxCpltCallback+0x310>
            hc05_rx_write_idx = 0;
 8001632:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <HAL_UART_RxCpltCallback+0x328>)
 8001634:	2200      	movs	r2, #0
 8001636:	801a      	strh	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart3, &rx_from_hc05, 1);
 8001638:	2201      	movs	r2, #1
 800163a:	4906      	ldr	r1, [pc, #24]	@ (8001654 <HAL_UART_RxCpltCallback+0x32c>)
 800163c:	4803      	ldr	r0, [pc, #12]	@ (800164c <HAL_UART_RxCpltCallback+0x324>)
 800163e:	f005 ffbe 	bl	80075be <HAL_UART_Receive_IT>
}
 8001642:	bf00      	nop
 8001644:	374c      	adds	r7, #76	@ 0x4c
 8001646:	46bd      	mov	sp, r7
 8001648:	bd90      	pop	{r4, r7, pc}
 800164a:	bf00      	nop
 800164c:	20000624 	.word	0x20000624
 8001650:	20000548 	.word	0x20000548
 8001654:	200002ce 	.word	0x200002ce
 8001658:	20000448 	.word	0x20000448

0800165c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001662:	f004 fccd 	bl	8006000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001666:	f000 f833 	bl	80016d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166a:	f000 f91d 	bl	80018a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800166e:	f000 f8c7 	bl	8001800 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001672:	f000 f89b 	bl	80017ac <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001676:	f000 f8ed 	bl	8001854 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100); // Let BU01 boot
 800167a:	2064      	movs	r0, #100	@ 0x64
 800167c:	f004 fd32 	bl	80060e4 <HAL_Delay>
  uartt_init();
 8001680:	f7ff fe20 	bl	80012c4 <uartt_init>
  cmd_line_init();
 8001684:	f7ff fe3e 	bl	8001304 <cmd_line_init>
  const char msg[] = "\nhey x\r\n";
 8001688:	4a0c      	ldr	r2, [pc, #48]	@ (80016bc <main+0x60>)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	ca07      	ldmia	r2, {r0, r1, r2}
 800168e:	c303      	stmia	r3!, {r0, r1}
 8001690:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8001692:	1d39      	adds	r1, r7, #4
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	2208      	movs	r2, #8
 800169a:	4809      	ldr	r0, [pc, #36]	@ (80016c0 <main+0x64>)
 800169c:	f005 ff04 	bl	80074a8 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016a0:	f006 ff3c 	bl	800851c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80016a4:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <main+0x68>)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4807      	ldr	r0, [pc, #28]	@ (80016c8 <main+0x6c>)
 80016aa:	f006 ff81 	bl	80085b0 <osThreadNew>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4a06      	ldr	r2, [pc, #24]	@ (80016cc <main+0x70>)
 80016b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80016b4:	f006 ff56 	bl	8008564 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <main+0x5c>
 80016bc:	0800fe18 	.word	0x0800fe18
 80016c0:	200005dc 	.word	0x200005dc
 80016c4:	0800fe70 	.word	0x0800fe70
 80016c8:	080019b1 	.word	0x080019b1
 80016cc:	2000066c 	.word	0x2000066c

080016d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b094      	sub	sp, #80	@ 0x50
 80016d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	2234      	movs	r2, #52	@ 0x34
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f00b fc28 	bl	800cf34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e4:	f107 0308 	add.w	r3, r7, #8
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <SystemClock_Config+0xd4>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fc:	4a29      	ldr	r2, [pc, #164]	@ (80017a4 <SystemClock_Config+0xd4>)
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001702:	6413      	str	r3, [r2, #64]	@ 0x40
 8001704:	4b27      	ldr	r3, [pc, #156]	@ (80017a4 <SystemClock_Config+0xd4>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001710:	2300      	movs	r3, #0
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <SystemClock_Config+0xd8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800171c:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <SystemClock_Config+0xd8>)
 800171e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <SystemClock_Config+0xd8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001730:	2302      	movs	r3, #2
 8001732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001734:	2301      	movs	r3, #1
 8001736:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001738:	2310      	movs	r3, #16
 800173a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173c:	2302      	movs	r3, #2
 800173e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001740:	2300      	movs	r3, #0
 8001742:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001744:	2310      	movs	r3, #16
 8001746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001748:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800174c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800174e:	2304      	movs	r3, #4
 8001750:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001752:	2302      	movs	r3, #2
 8001754:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001756:	2302      	movs	r3, #2
 8001758:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175a:	f107 031c 	add.w	r3, r7, #28
 800175e:	4618      	mov	r0, r3
 8001760:	f005 fbb4 	bl	8006ecc <HAL_RCC_OscConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800176a:	f000 f931 	bl	80019d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176e:	230f      	movs	r3, #15
 8001770:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001772:	2302      	movs	r3, #2
 8001774:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800177a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800177e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	2102      	movs	r1, #2
 800178a:	4618      	mov	r0, r3
 800178c:	f005 f854 	bl	8006838 <HAL_RCC_ClockConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001796:	f000 f91b 	bl	80019d0 <Error_Handler>
  }
}
 800179a:	bf00      	nop
 800179c:	3750      	adds	r7, #80	@ 0x50
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40007000 	.word	0x40007000

080017ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017b0:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <MX_USART1_UART_Init+0x4c>)
 80017b2:	4a12      	ldr	r2, [pc, #72]	@ (80017fc <MX_USART1_UART_Init+0x50>)
 80017b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <MX_USART1_UART_Init+0x4c>)
 80017b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017be:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <MX_USART1_UART_Init+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <MX_USART1_UART_Init+0x4c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <MX_USART1_UART_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017d0:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <MX_USART1_UART_Init+0x4c>)
 80017d2:	220c      	movs	r2, #12
 80017d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d6:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <MX_USART1_UART_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <MX_USART1_UART_Init+0x4c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017e2:	4805      	ldr	r0, [pc, #20]	@ (80017f8 <MX_USART1_UART_Init+0x4c>)
 80017e4:	f005 fe10 	bl	8007408 <HAL_UART_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017ee:	f000 f8ef 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000594 	.word	0x20000594
 80017fc:	40011000 	.word	0x40011000

08001800 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <MX_USART2_UART_Init+0x4c>)
 8001806:	4a12      	ldr	r2, [pc, #72]	@ (8001850 <MX_USART2_UART_Init+0x50>)
 8001808:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800180a:	4b10      	ldr	r3, [pc, #64]	@ (800184c <MX_USART2_UART_Init+0x4c>)
 800180c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001810:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <MX_USART2_UART_Init+0x4c>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <MX_USART2_UART_Init+0x4c>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <MX_USART2_UART_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <MX_USART2_UART_Init+0x4c>)
 8001826:	220c      	movs	r2, #12
 8001828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182a:	4b08      	ldr	r3, [pc, #32]	@ (800184c <MX_USART2_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <MX_USART2_UART_Init+0x4c>)
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_USART2_UART_Init+0x4c>)
 8001838:	f005 fde6 	bl	8007408 <HAL_UART_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001842:	f000 f8c5 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200005dc 	.word	0x200005dc
 8001850:	40004400 	.word	0x40004400

08001854 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001858:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <MX_USART3_UART_Init+0x4c>)
 800185a:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <MX_USART3_UART_Init+0x50>)
 800185c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <MX_USART3_UART_Init+0x4c>)
 8001860:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001864:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001866:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <MX_USART3_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <MX_USART3_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001872:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <MX_USART3_UART_Init+0x4c>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001878:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <MX_USART3_UART_Init+0x4c>)
 800187a:	220c      	movs	r2, #12
 800187c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <MX_USART3_UART_Init+0x4c>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <MX_USART3_UART_Init+0x4c>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800188a:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <MX_USART3_UART_Init+0x4c>)
 800188c:	f005 fdbc 	bl	8007408 <HAL_UART_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001896:	f000 f89b 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000624 	.word	0x20000624
 80018a4:	40004800 	.word	0x40004800

080018a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	@ 0x28
 80018ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001978 <MX_GPIO_Init+0xd0>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001978 <MX_GPIO_Init+0xd0>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <MX_GPIO_Init+0xd0>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <MX_GPIO_Init+0xd0>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	4a25      	ldr	r2, [pc, #148]	@ (8001978 <MX_GPIO_Init+0xd0>)
 80018e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ea:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <MX_GPIO_Init+0xd0>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001978 <MX_GPIO_Init+0xd0>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001978 <MX_GPIO_Init+0xd0>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <MX_GPIO_Init+0xd0>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <MX_GPIO_Init+0xd0>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a17      	ldr	r2, [pc, #92]	@ (8001978 <MX_GPIO_Init+0xd0>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <MX_GPIO_Init+0xd0>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	2120      	movs	r1, #32
 8001932:	4812      	ldr	r0, [pc, #72]	@ (800197c <MX_GPIO_Init+0xd4>)
 8001934:	f004 ff4c 	bl	80067d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001938:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800193c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800193e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	480c      	ldr	r0, [pc, #48]	@ (8001980 <MX_GPIO_Init+0xd8>)
 8001950:	f004 fdaa 	bl	80064a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001954:	2320      	movs	r3, #32
 8001956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001958:	2301      	movs	r3, #1
 800195a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	4804      	ldr	r0, [pc, #16]	@ (800197c <MX_GPIO_Init+0xd4>)
 800196c:	f004 fd9c 	bl	80064a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001970:	bf00      	nop
 8001972:	3728      	adds	r7, #40	@ 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	40020000 	.word	0x40020000
 8001980:	40020800 	.word	0x40020800

08001984 <_write>:
{
    char buffer[64];
    snprintf(buffer, sizeof(buffer), "%s\r\n", cmd);  // Add CRLF
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
} */
int _write(int file, char *ptr, int len) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	b29a      	uxth	r2, r3
 8001994:	f04f 33ff 	mov.w	r3, #4294967295
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	4804      	ldr	r0, [pc, #16]	@ (80019ac <_write+0x28>)
 800199c:	f005 fd84 	bl	80074a8 <HAL_UART_Transmit>
    return len;
 80019a0:	687b      	ldr	r3, [r7, #4]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200005dc 	.word	0x200005dc

080019b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  // Toggle the heartbeat LED
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80019b8:	2120      	movs	r1, #32
 80019ba:	4804      	ldr	r0, [pc, #16]	@ (80019cc <StartDefaultTask+0x1c>)
 80019bc:	f004 ff21 	bl	8006802 <HAL_GPIO_TogglePin>
	  // Non-blocking delay to wait
	  osDelay(HEARTBEATPERIOD);
 80019c0:	20c8      	movs	r0, #200	@ 0xc8
 80019c2:	f006 fe87 	bl	80086d4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80019c6:	bf00      	nop
 80019c8:	e7f6      	b.n	80019b8 <StartDefaultTask+0x8>
 80019ca:	bf00      	nop
 80019cc:	40020000 	.word	0x40020000

080019d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d4:	b672      	cpsid	i
}
 80019d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <Error_Handler+0x8>

080019dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_MspInit+0x54>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	4a11      	ldr	r2, [pc, #68]	@ (8001a30 <HAL_MspInit+0x54>)
 80019ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <HAL_MspInit+0x54>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <HAL_MspInit+0x54>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	4a0a      	ldr	r2, [pc, #40]	@ (8001a30 <HAL_MspInit+0x54>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0e:	4b08      	ldr	r3, [pc, #32]	@ (8001a30 <HAL_MspInit+0x54>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	210f      	movs	r1, #15
 8001a1e:	f06f 0001 	mvn.w	r0, #1
 8001a22:	f004 fc74 	bl	800630e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800

08001a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08e      	sub	sp, #56	@ 0x38
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a67      	ldr	r2, [pc, #412]	@ (8001bf0 <HAL_UART_MspInit+0x1bc>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d135      	bne.n	8001ac2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
 8001a5a:	4b66      	ldr	r3, [pc, #408]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5e:	4a65      	ldr	r2, [pc, #404]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001a60:	f043 0310 	orr.w	r3, r3, #16
 8001a64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a66:	4b63      	ldr	r3, [pc, #396]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	623b      	str	r3, [r7, #32]
 8001a70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	4b5f      	ldr	r3, [pc, #380]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a5e      	ldr	r2, [pc, #376]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a82:	4b5c      	ldr	r3, [pc, #368]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	61fb      	str	r3, [r7, #28]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a8e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4853      	ldr	r0, [pc, #332]	@ (8001bf8 <HAL_UART_MspInit+0x1c4>)
 8001aac:	f004 fcfc 	bl	80064a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2105      	movs	r1, #5
 8001ab4:	2025      	movs	r0, #37	@ 0x25
 8001ab6:	f004 fc2a 	bl	800630e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aba:	2025      	movs	r0, #37	@ 0x25
 8001abc:	f004 fc43 	bl	8006346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ac0:	e091      	b.n	8001be6 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a4d      	ldr	r2, [pc, #308]	@ (8001bfc <HAL_UART_MspInit+0x1c8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d134      	bne.n	8001b36 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001acc:	2300      	movs	r3, #0
 8001ace:	61bb      	str	r3, [r7, #24]
 8001ad0:	4b48      	ldr	r3, [pc, #288]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	4a47      	ldr	r2, [pc, #284]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ada:	6413      	str	r3, [r2, #64]	@ 0x40
 8001adc:	4b45      	ldr	r3, [pc, #276]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae4:	61bb      	str	r3, [r7, #24]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	4b41      	ldr	r3, [pc, #260]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af0:	4a40      	ldr	r2, [pc, #256]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af8:	4b3e      	ldr	r3, [pc, #248]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b04:	230c      	movs	r3, #12
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b14:	2307      	movs	r3, #7
 8001b16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4836      	ldr	r0, [pc, #216]	@ (8001bf8 <HAL_UART_MspInit+0x1c4>)
 8001b20:	f004 fcc2 	bl	80064a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2105      	movs	r1, #5
 8001b28:	2026      	movs	r0, #38	@ 0x26
 8001b2a:	f004 fbf0 	bl	800630e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b2e:	2026      	movs	r0, #38	@ 0x26
 8001b30:	f004 fc09 	bl	8006346 <HAL_NVIC_EnableIRQ>
}
 8001b34:	e057      	b.n	8001be6 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a31      	ldr	r2, [pc, #196]	@ (8001c00 <HAL_UART_MspInit+0x1cc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d152      	bne.n	8001be6 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b48:	4a2a      	ldr	r2, [pc, #168]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b50:	4b28      	ldr	r3, [pc, #160]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	4b24      	ldr	r3, [pc, #144]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b64:	4a23      	ldr	r2, [pc, #140]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6c:	4b21      	ldr	r3, [pc, #132]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b80:	4a1c      	ldr	r2, [pc, #112]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b82:	f043 0302 	orr.w	r3, r3, #2
 8001b86:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b88:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <HAL_UART_MspInit+0x1c0>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b94:	2320      	movs	r3, #32
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ba4:	2307      	movs	r3, #7
 8001ba6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bac:	4619      	mov	r1, r3
 8001bae:	4815      	ldr	r0, [pc, #84]	@ (8001c04 <HAL_UART_MspInit+0x1d0>)
 8001bb0:	f004 fc7a 	bl	80064a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480d      	ldr	r0, [pc, #52]	@ (8001c08 <HAL_UART_MspInit+0x1d4>)
 8001bd2:	f004 fc69 	bl	80064a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2105      	movs	r1, #5
 8001bda:	2027      	movs	r0, #39	@ 0x27
 8001bdc:	f004 fb97 	bl	800630e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001be0:	2027      	movs	r0, #39	@ 0x27
 8001be2:	f004 fbb0 	bl	8006346 <HAL_NVIC_EnableIRQ>
}
 8001be6:	bf00      	nop
 8001be8:	3738      	adds	r7, #56	@ 0x38
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	40004400 	.word	0x40004400
 8001c00:	40004800 	.word	0x40004800
 8001c04:	40020800 	.word	0x40020800
 8001c08:	40020400 	.word	0x40020400

08001c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <NMI_Handler+0x4>

08001c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <HardFault_Handler+0x4>

08001c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <MemManage_Handler+0x4>

08001c24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <BusFault_Handler+0x4>

08001c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <UsageFault_Handler+0x4>

08001c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c46:	f004 fa2d 	bl	80060a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c4a:	f008 f96b 	bl	8009f24 <xTaskGetSchedulerState>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d001      	beq.n	8001c58 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c54:	f008 ff60 	bl	800ab18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c60:	4802      	ldr	r0, [pc, #8]	@ (8001c6c <USART1_IRQHandler+0x10>)
 8001c62:	f005 fcd1 	bl	8007608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000594 	.word	0x20000594

08001c70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c74:	4802      	ldr	r0, [pc, #8]	@ (8001c80 <USART2_IRQHandler+0x10>)
 8001c76:	f005 fcc7 	bl	8007608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200005dc 	.word	0x200005dc

08001c84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c88:	4802      	ldr	r0, [pc, #8]	@ (8001c94 <USART3_IRQHandler+0x10>)
 8001c8a:	f005 fcbd 	bl	8007608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000624 	.word	0x20000624

08001c98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return 1;
 8001c9c:	2301      	movs	r3, #1
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <_kill>:

int _kill(int pid, int sig)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cb2:	f00b f9ff 	bl	800d0b4 <__errno>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2216      	movs	r2, #22
 8001cba:	601a      	str	r2, [r3, #0]
  return -1;
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_exit>:

void _exit (int status)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ffe7 	bl	8001ca8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cda:	bf00      	nop
 8001cdc:	e7fd      	b.n	8001cda <_exit+0x12>

08001cde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	e00a      	b.n	8001d06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cf0:	f3af 8000 	nop.w
 8001cf4:	4601      	mov	r1, r0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	60ba      	str	r2, [r7, #8]
 8001cfc:	b2ca      	uxtb	r2, r1
 8001cfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	3301      	adds	r3, #1
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	dbf0      	blt.n	8001cf0 <_read+0x12>
  }

  return len;
 8001d0e:	687b      	ldr	r3, [r7, #4]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d40:	605a      	str	r2, [r3, #4]
  return 0;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_isatty>:

int _isatty(int file)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d58:	2301      	movs	r3, #1
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b085      	sub	sp, #20
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d88:	4a14      	ldr	r2, [pc, #80]	@ (8001ddc <_sbrk+0x5c>)
 8001d8a:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <_sbrk+0x60>)
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d94:	4b13      	ldr	r3, [pc, #76]	@ (8001de4 <_sbrk+0x64>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d102      	bne.n	8001da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d9c:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <_sbrk+0x64>)
 8001d9e:	4a12      	ldr	r2, [pc, #72]	@ (8001de8 <_sbrk+0x68>)
 8001da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da2:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d207      	bcs.n	8001dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db0:	f00b f980 	bl	800d0b4 <__errno>
 8001db4:	4603      	mov	r3, r0
 8001db6:	220c      	movs	r2, #12
 8001db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbe:	e009      	b.n	8001dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc0:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <_sbrk+0x64>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dc6:	4b07      	ldr	r3, [pc, #28]	@ (8001de4 <_sbrk+0x64>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	4a05      	ldr	r2, [pc, #20]	@ (8001de4 <_sbrk+0x64>)
 8001dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20020000 	.word	0x20020000
 8001de0:	00000400 	.word	0x00000400
 8001de4:	20000670 	.word	0x20000670
 8001de8:	20005130 	.word	0x20005130

08001dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <SystemInit+0x20>)
 8001df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001df6:	4a05      	ldr	r2, [pc, #20]	@ (8001e0c <SystemInit+0x20>)
 8001df8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <vdiff>:
#define     ERR_TRIL_NEEDMORESPHERE                 -5


/* Return the difference of two vectors, (vector1 - vector2). */
vec3d vdiff(const vec3d vector1, const vec3d vector2)
{
 8001e10:	b5b0      	push	{r4, r5, r7, lr}
 8001e12:	b09e      	sub	sp, #120	@ 0x78
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	eeb0 6a44 	vmov.f32	s12, s8
 8001e1a:	eef0 6a64 	vmov.f32	s13, s9
 8001e1e:	eeb0 7a45 	vmov.f32	s14, s10
 8001e22:	eef0 7a65 	vmov.f32	s15, s11
 8001e26:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001e2a:	ed87 1b0e 	vstr	d1, [r7, #56]	@ 0x38
 8001e2e:	ed87 2b10 	vstr	d2, [r7, #64]	@ 0x40
 8001e32:	ed87 3b06 	vstr	d3, [r7, #24]
 8001e36:	ed87 6b08 	vstr	d6, [r7, #32]
 8001e3a:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    vec3d v;
    v.x = vector1.x - vector2.x;
 8001e3e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001e42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e46:	f7fe fa4f 	bl	80002e8 <__aeabi_dsub>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    v.y = vector1.y - vector2.y;
 8001e52:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001e56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e5a:	f7fe fa45 	bl	80002e8 <__aeabi_dsub>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    v.z = vector1.z - vector2.z;
 8001e66:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e6e:	f7fe fa3b 	bl	80002e8 <__aeabi_dsub>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    return v;
 8001e7a:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8001e7e:	f107 0548 	add.w	r5, r7, #72	@ 0x48
 8001e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e86:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e8a:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e8e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001e92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001e96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001e9a:	ec45 4b15 	vmov	d5, r4, r5
 8001e9e:	ec41 0b16 	vmov	d6, r0, r1
 8001ea2:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ea6:	eeb0 0a45 	vmov.f32	s0, s10
 8001eaa:	eef0 0a65 	vmov.f32	s1, s11
 8001eae:	eeb0 1a46 	vmov.f32	s2, s12
 8001eb2:	eef0 1a66 	vmov.f32	s3, s13
 8001eb6:	eeb0 2a47 	vmov.f32	s4, s14
 8001eba:	eef0 2a67 	vmov.f32	s5, s15
 8001ebe:	3778      	adds	r7, #120	@ 0x78
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bdb0      	pop	{r4, r5, r7, pc}

08001ec4 <vsum>:

/* Return the sum of two vectors. */
vec3d vsum(const vec3d vector1, const vec3d vector2)
{
 8001ec4:	b5b0      	push	{r4, r5, r7, lr}
 8001ec6:	b09e      	sub	sp, #120	@ 0x78
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	eeb0 6a44 	vmov.f32	s12, s8
 8001ece:	eef0 6a64 	vmov.f32	s13, s9
 8001ed2:	eeb0 7a45 	vmov.f32	s14, s10
 8001ed6:	eef0 7a65 	vmov.f32	s15, s11
 8001eda:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8001ede:	ed87 1b0e 	vstr	d1, [r7, #56]	@ 0x38
 8001ee2:	ed87 2b10 	vstr	d2, [r7, #64]	@ 0x40
 8001ee6:	ed87 3b06 	vstr	d3, [r7, #24]
 8001eea:	ed87 6b08 	vstr	d6, [r7, #32]
 8001eee:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    vec3d v;
    v.x = vector1.x + vector2.x;
 8001ef2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001ef6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001efa:	f7fe f9f7 	bl	80002ec <__adddf3>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    v.y = vector1.y + vector2.y;
 8001f06:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001f0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f0e:	f7fe f9ed 	bl	80002ec <__adddf3>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    v.z = vector1.z + vector2.z;
 8001f1a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f22:	f7fe f9e3 	bl	80002ec <__adddf3>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    return v;
 8001f2e:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8001f32:	f107 0548 	add.w	r5, r7, #72	@ 0x48
 8001f36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f3e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001f42:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001f46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001f4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001f4e:	ec45 4b15 	vmov	d5, r4, r5
 8001f52:	ec41 0b16 	vmov	d6, r0, r1
 8001f56:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f5a:	eeb0 0a45 	vmov.f32	s0, s10
 8001f5e:	eef0 0a65 	vmov.f32	s1, s11
 8001f62:	eeb0 1a46 	vmov.f32	s2, s12
 8001f66:	eef0 1a66 	vmov.f32	s3, s13
 8001f6a:	eeb0 2a47 	vmov.f32	s4, s14
 8001f6e:	eef0 2a67 	vmov.f32	s5, s15
 8001f72:	3778      	adds	r7, #120	@ 0x78
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bdb0      	pop	{r4, r5, r7, pc}

08001f78 <vmul>:

/* Multiply vector by a number. */
vec3d vmul(const vec3d vector, const double n)
{
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b09a      	sub	sp, #104	@ 0x68
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	eeb0 5a40 	vmov.f32	s10, s0
 8001f82:	eef0 5a60 	vmov.f32	s11, s1
 8001f86:	eeb0 6a41 	vmov.f32	s12, s2
 8001f8a:	eef0 6a61 	vmov.f32	s13, s3
 8001f8e:	eeb0 7a42 	vmov.f32	s14, s4
 8001f92:	eef0 7a62 	vmov.f32	s15, s5
 8001f96:	ed87 3b06 	vstr	d3, [r7, #24]
 8001f9a:	ed87 5b08 	vstr	d5, [r7, #32]
 8001f9e:	ed87 6b0a 	vstr	d6, [r7, #40]	@ 0x28
 8001fa2:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    vec3d v;
    v.x = vector.x * n;
 8001fa6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001faa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fae:	f7fe fb53 	bl	8000658 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    v.y = vector.y * n;
 8001fba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001fbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fc2:	f7fe fb49 	bl	8000658 <__aeabi_dmul>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    v.z = vector.z * n;
 8001fce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001fd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fd6:	f7fe fb3f 	bl	8000658 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    return v;
 8001fe2:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001fe6:	f107 0538 	add.w	r5, r7, #56	@ 0x38
 8001fea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fee:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ff2:	e884 0003 	stmia.w	r4, {r0, r1}
 8001ff6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001ffa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001ffe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002002:	ec45 4b15 	vmov	d5, r4, r5
 8002006:	ec41 0b16 	vmov	d6, r0, r1
 800200a:	ec43 2b17 	vmov	d7, r2, r3
}
 800200e:	eeb0 0a45 	vmov.f32	s0, s10
 8002012:	eef0 0a65 	vmov.f32	s1, s11
 8002016:	eeb0 1a46 	vmov.f32	s2, s12
 800201a:	eef0 1a66 	vmov.f32	s3, s13
 800201e:	eeb0 2a47 	vmov.f32	s4, s14
 8002022:	eef0 2a67 	vmov.f32	s5, s15
 8002026:	3768      	adds	r7, #104	@ 0x68
 8002028:	46bd      	mov	sp, r7
 800202a:	bdb0      	pop	{r4, r5, r7, pc}

0800202c <vdiv>:

/* Divide vector by a number. */
vec3d vdiv(const vec3d vector, const double n)
{
 800202c:	b5b0      	push	{r4, r5, r7, lr}
 800202e:	b09a      	sub	sp, #104	@ 0x68
 8002030:	af00      	add	r7, sp, #0
 8002032:	eeb0 5a40 	vmov.f32	s10, s0
 8002036:	eef0 5a60 	vmov.f32	s11, s1
 800203a:	eeb0 6a41 	vmov.f32	s12, s2
 800203e:	eef0 6a61 	vmov.f32	s13, s3
 8002042:	eeb0 7a42 	vmov.f32	s14, s4
 8002046:	eef0 7a62 	vmov.f32	s15, s5
 800204a:	ed87 3b06 	vstr	d3, [r7, #24]
 800204e:	ed87 5b08 	vstr	d5, [r7, #32]
 8002052:	ed87 6b0a 	vstr	d6, [r7, #40]	@ 0x28
 8002056:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    vec3d v;
    v.x = vector.x / n;
 800205a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800205e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002062:	f7fe fc23 	bl	80008ac <__aeabi_ddiv>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    v.y = vector.y / n;
 800206e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002072:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002076:	f7fe fc19 	bl	80008ac <__aeabi_ddiv>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    v.z = vector.z / n;
 8002082:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002086:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800208a:	f7fe fc0f 	bl	80008ac <__aeabi_ddiv>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    return v;
 8002096:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800209a:	f107 0538 	add.w	r5, r7, #56	@ 0x38
 800209e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020a6:	e884 0003 	stmia.w	r4, {r0, r1}
 80020aa:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80020ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80020b2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80020b6:	ec45 4b15 	vmov	d5, r4, r5
 80020ba:	ec41 0b16 	vmov	d6, r0, r1
 80020be:	ec43 2b17 	vmov	d7, r2, r3
}
 80020c2:	eeb0 0a45 	vmov.f32	s0, s10
 80020c6:	eef0 0a65 	vmov.f32	s1, s11
 80020ca:	eeb0 1a46 	vmov.f32	s2, s12
 80020ce:	eef0 1a66 	vmov.f32	s3, s13
 80020d2:	eeb0 2a47 	vmov.f32	s4, s14
 80020d6:	eef0 2a67 	vmov.f32	s5, s15
 80020da:	3768      	adds	r7, #104	@ 0x68
 80020dc:	46bd      	mov	sp, r7
 80020de:	bdb0      	pop	{r4, r5, r7, pc}

080020e0 <vnorm>:
    return sqrt(xd * xd + yd * yd + zd * zd);
}

/* Return the Euclidean norm. */
double vnorm(const vec3d vector)
{
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	eeb0 5a40 	vmov.f32	s10, s0
 80020ea:	eef0 5a60 	vmov.f32	s11, s1
 80020ee:	eeb0 6a41 	vmov.f32	s12, s2
 80020f2:	eef0 6a61 	vmov.f32	s13, s3
 80020f6:	eeb0 7a42 	vmov.f32	s14, s4
 80020fa:	eef0 7a62 	vmov.f32	s15, s5
 80020fe:	ed87 5b00 	vstr	d5, [r7]
 8002102:	ed87 6b02 	vstr	d6, [r7, #8]
 8002106:	ed87 7b04 	vstr	d7, [r7, #16]
    return sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
 800210a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800210e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002112:	f7fe faa1 	bl	8000658 <__aeabi_dmul>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4614      	mov	r4, r2
 800211c:	461d      	mov	r5, r3
 800211e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002122:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002126:	f7fe fa97 	bl	8000658 <__aeabi_dmul>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4620      	mov	r0, r4
 8002130:	4629      	mov	r1, r5
 8002132:	f7fe f8db 	bl	80002ec <__adddf3>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4614      	mov	r4, r2
 800213c:	461d      	mov	r5, r3
 800213e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002142:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002146:	f7fe fa87 	bl	8000658 <__aeabi_dmul>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4620      	mov	r0, r4
 8002150:	4629      	mov	r1, r5
 8002152:	f7fe f8cb 	bl	80002ec <__adddf3>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	ec43 2b17 	vmov	d7, r2, r3
 800215e:	eeb0 0a47 	vmov.f32	s0, s14
 8002162:	eef0 0a67 	vmov.f32	s1, s15
 8002166:	f00d fc01 	bl	800f96c <sqrt>
 800216a:	eeb0 7a40 	vmov.f32	s14, s0
 800216e:	eef0 7a60 	vmov.f32	s15, s1
}
 8002172:	eeb0 0a47 	vmov.f32	s0, s14
 8002176:	eef0 0a67 	vmov.f32	s1, s15
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bdb0      	pop	{r4, r5, r7, pc}

08002180 <dot>:

/* Return the dot product of two vectors. */
double dot(const vec3d vector1, const vec3d vector2)
{
 8002180:	b5b0      	push	{r4, r5, r7, lr}
 8002182:	b08c      	sub	sp, #48	@ 0x30
 8002184:	af00      	add	r7, sp, #0
 8002186:	eeb0 6a44 	vmov.f32	s12, s8
 800218a:	eef0 6a64 	vmov.f32	s13, s9
 800218e:	eeb0 7a45 	vmov.f32	s14, s10
 8002192:	eef0 7a65 	vmov.f32	s15, s11
 8002196:	ed87 0b06 	vstr	d0, [r7, #24]
 800219a:	ed87 1b08 	vstr	d1, [r7, #32]
 800219e:	ed87 2b0a 	vstr	d2, [r7, #40]	@ 0x28
 80021a2:	ed87 3b00 	vstr	d3, [r7]
 80021a6:	ed87 6b02 	vstr	d6, [r7, #8]
 80021aa:	ed87 7b04 	vstr	d7, [r7, #16]
    return vector1.x * vector2.x + vector1.y * vector2.y + vector1.z * vector2.z;
 80021ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021b6:	f7fe fa4f 	bl	8000658 <__aeabi_dmul>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4614      	mov	r4, r2
 80021c0:	461d      	mov	r5, r3
 80021c2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ca:	f7fe fa45 	bl	8000658 <__aeabi_dmul>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4620      	mov	r0, r4
 80021d4:	4629      	mov	r1, r5
 80021d6:	f7fe f889 	bl	80002ec <__adddf3>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4614      	mov	r4, r2
 80021e0:	461d      	mov	r5, r3
 80021e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80021e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021ea:	f7fe fa35 	bl	8000658 <__aeabi_dmul>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4620      	mov	r0, r4
 80021f4:	4629      	mov	r1, r5
 80021f6:	f7fe f879 	bl	80002ec <__adddf3>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	ec43 2b17 	vmov	d7, r2, r3
}
 8002202:	eeb0 0a47 	vmov.f32	s0, s14
 8002206:	eef0 0a67 	vmov.f32	s1, s15
 800220a:	3730      	adds	r7, #48	@ 0x30
 800220c:	46bd      	mov	sp, r7
 800220e:	bdb0      	pop	{r4, r5, r7, pc}

08002210 <cross>:

/* Replace vector with its cross product with another vector. */
vec3d cross(const vec3d vector1, const vec3d vector2)
{
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	b09e      	sub	sp, #120	@ 0x78
 8002214:	af00      	add	r7, sp, #0
 8002216:	eeb0 6a44 	vmov.f32	s12, s8
 800221a:	eef0 6a64 	vmov.f32	s13, s9
 800221e:	eeb0 7a45 	vmov.f32	s14, s10
 8002222:	eef0 7a65 	vmov.f32	s15, s11
 8002226:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 800222a:	ed87 1b0e 	vstr	d1, [r7, #56]	@ 0x38
 800222e:	ed87 2b10 	vstr	d2, [r7, #64]	@ 0x40
 8002232:	ed87 3b06 	vstr	d3, [r7, #24]
 8002236:	ed87 6b08 	vstr	d6, [r7, #32]
 800223a:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    vec3d v;
    v.x = vector1.y * vector2.z - vector1.z * vector2.y;
 800223e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002246:	f7fe fa07 	bl	8000658 <__aeabi_dmul>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4614      	mov	r4, r2
 8002250:	461d      	mov	r5, r3
 8002252:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800225a:	f7fe f9fd 	bl	8000658 <__aeabi_dmul>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4620      	mov	r0, r4
 8002264:	4629      	mov	r1, r5
 8002266:	f7fe f83f 	bl	80002e8 <__aeabi_dsub>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    v.y = vector1.z * vector2.x - vector1.x * vector2.z;
 8002272:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002276:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800227a:	f7fe f9ed 	bl	8000658 <__aeabi_dmul>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4614      	mov	r4, r2
 8002284:	461d      	mov	r5, r3
 8002286:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800228a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800228e:	f7fe f9e3 	bl	8000658 <__aeabi_dmul>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4620      	mov	r0, r4
 8002298:	4629      	mov	r1, r5
 800229a:	f7fe f825 	bl	80002e8 <__aeabi_dsub>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    v.z = vector1.x * vector2.y - vector1.y * vector2.x;
 80022a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80022aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022ae:	f7fe f9d3 	bl	8000658 <__aeabi_dmul>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4614      	mov	r4, r2
 80022b8:	461d      	mov	r5, r3
 80022ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80022be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022c2:	f7fe f9c9 	bl	8000658 <__aeabi_dmul>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4620      	mov	r0, r4
 80022cc:	4629      	mov	r1, r5
 80022ce:	f7fe f80b 	bl	80002e8 <__aeabi_dsub>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    return v;
 80022da:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 80022de:	f107 0548 	add.w	r5, r7, #72	@ 0x48
 80022e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022ea:	e884 0003 	stmia.w	r4, {r0, r1}
 80022ee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80022f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80022f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80022fa:	ec45 4b15 	vmov	d5, r4, r5
 80022fe:	ec41 0b16 	vmov	d6, r0, r1
 8002302:	ec43 2b17 	vmov	d7, r2, r3
}
 8002306:	eeb0 0a45 	vmov.f32	s0, s10
 800230a:	eef0 0a65 	vmov.f32	s1, s11
 800230e:	eeb0 1a46 	vmov.f32	s2, s12
 8002312:	eef0 1a66 	vmov.f32	s3, s13
 8002316:	eeb0 2a47 	vmov.f32	s4, s14
 800231a:	eef0 2a67 	vmov.f32	s5, s15
 800231e:	3778      	adds	r7, #120	@ 0x78
 8002320:	46bd      	mov	sp, r7
 8002322:	bdb0      	pop	{r4, r5, r7, pc}

08002324 <gdoprate>:

/* Return the GDOP (Geometric Dilution of Precision) rate between 0-1.
 * Lower GDOP rate means better precision of intersection.
 */
double gdoprate(const vec3d tag, const vec3d p1, const vec3d p2, const vec3d p3)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b0ae      	sub	sp, #184	@ 0xb8
 8002328:	af00      	add	r7, sp, #0
 800232a:	eeb0 6a44 	vmov.f32	s12, s8
 800232e:	eef0 6a64 	vmov.f32	s13, s9
 8002332:	eeb0 7a45 	vmov.f32	s14, s10
 8002336:	eef0 7a65 	vmov.f32	s15, s11
 800233a:	ed87 0b06 	vstr	d0, [r7, #24]
 800233e:	ed87 1b08 	vstr	d1, [r7, #32]
 8002342:	ed87 2b0a 	vstr	d2, [r7, #40]	@ 0x28
 8002346:	ed87 3b00 	vstr	d3, [r7]
 800234a:	ed87 6b02 	vstr	d6, [r7, #8]
 800234e:	ed87 7b04 	vstr	d7, [r7, #16]
    vec3d ex, t1, t2, t3;
    double h, gdop1, gdop2, gdop3, result;

    ex = vdiff(p1, tag);
 8002352:	ed97 3b06 	vldr	d3, [r7, #24]
 8002356:	ed97 4b08 	vldr	d4, [r7, #32]
 800235a:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 800235e:	ed97 2b00 	vldr	d2, [r7]
 8002362:	ed97 6b02 	vldr	d6, [r7, #8]
 8002366:	ed97 7b04 	vldr	d7, [r7, #16]
 800236a:	eeb0 0a42 	vmov.f32	s0, s4
 800236e:	eef0 0a62 	vmov.f32	s1, s5
 8002372:	eeb0 1a46 	vmov.f32	s2, s12
 8002376:	eef0 1a66 	vmov.f32	s3, s13
 800237a:	eeb0 2a47 	vmov.f32	s4, s14
 800237e:	eef0 2a67 	vmov.f32	s5, s15
 8002382:	f7ff fd45 	bl	8001e10 <vdiff>
 8002386:	eeb0 5a40 	vmov.f32	s10, s0
 800238a:	eef0 5a60 	vmov.f32	s11, s1
 800238e:	eeb0 6a41 	vmov.f32	s12, s2
 8002392:	eef0 6a61 	vmov.f32	s13, s3
 8002396:	eeb0 7a42 	vmov.f32	s14, s4
 800239a:	eef0 7a62 	vmov.f32	s15, s5
 800239e:	ed87 5b1e 	vstr	d5, [r7, #120]	@ 0x78
 80023a2:	ed87 6b20 	vstr	d6, [r7, #128]	@ 0x80
 80023a6:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    h = vnorm(ex);
 80023aa:	ed97 5b1e 	vldr	d5, [r7, #120]	@ 0x78
 80023ae:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 80023b2:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 80023b6:	eeb0 0a45 	vmov.f32	s0, s10
 80023ba:	eef0 0a65 	vmov.f32	s1, s11
 80023be:	eeb0 1a46 	vmov.f32	s2, s12
 80023c2:	eef0 1a66 	vmov.f32	s3, s13
 80023c6:	eeb0 2a47 	vmov.f32	s4, s14
 80023ca:	eef0 2a67 	vmov.f32	s5, s15
 80023ce:	f7ff fe87 	bl	80020e0 <vnorm>
 80023d2:	ed87 0b2a 	vstr	d0, [r7, #168]	@ 0xa8
    t1 = vdiv(ex, h);
 80023d6:	ed97 5b1e 	vldr	d5, [r7, #120]	@ 0x78
 80023da:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 80023de:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 80023e2:	ed97 3b2a 	vldr	d3, [r7, #168]	@ 0xa8
 80023e6:	eeb0 0a45 	vmov.f32	s0, s10
 80023ea:	eef0 0a65 	vmov.f32	s1, s11
 80023ee:	eeb0 1a46 	vmov.f32	s2, s12
 80023f2:	eef0 1a66 	vmov.f32	s3, s13
 80023f6:	eeb0 2a47 	vmov.f32	s4, s14
 80023fa:	eef0 2a67 	vmov.f32	s5, s15
 80023fe:	f7ff fe15 	bl	800202c <vdiv>
 8002402:	eeb0 5a40 	vmov.f32	s10, s0
 8002406:	eef0 5a60 	vmov.f32	s11, s1
 800240a:	eeb0 6a41 	vmov.f32	s12, s2
 800240e:	eef0 6a61 	vmov.f32	s13, s3
 8002412:	eeb0 7a42 	vmov.f32	s14, s4
 8002416:	eef0 7a62 	vmov.f32	s15, s5
 800241a:	ed87 5b18 	vstr	d5, [r7, #96]	@ 0x60
 800241e:	ed87 6b1a 	vstr	d6, [r7, #104]	@ 0x68
 8002422:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70

    ex = vdiff(p2, tag);
 8002426:	ed97 3b06 	vldr	d3, [r7, #24]
 800242a:	ed97 4b08 	vldr	d4, [r7, #32]
 800242e:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 8002432:	ed97 2b30 	vldr	d2, [r7, #192]	@ 0xc0
 8002436:	ed97 6b32 	vldr	d6, [r7, #200]	@ 0xc8
 800243a:	ed97 7b34 	vldr	d7, [r7, #208]	@ 0xd0
 800243e:	eeb0 0a42 	vmov.f32	s0, s4
 8002442:	eef0 0a62 	vmov.f32	s1, s5
 8002446:	eeb0 1a46 	vmov.f32	s2, s12
 800244a:	eef0 1a66 	vmov.f32	s3, s13
 800244e:	eeb0 2a47 	vmov.f32	s4, s14
 8002452:	eef0 2a67 	vmov.f32	s5, s15
 8002456:	f7ff fcdb 	bl	8001e10 <vdiff>
 800245a:	eeb0 5a40 	vmov.f32	s10, s0
 800245e:	eef0 5a60 	vmov.f32	s11, s1
 8002462:	eeb0 6a41 	vmov.f32	s12, s2
 8002466:	eef0 6a61 	vmov.f32	s13, s3
 800246a:	eeb0 7a42 	vmov.f32	s14, s4
 800246e:	eef0 7a62 	vmov.f32	s15, s5
 8002472:	ed87 5b1e 	vstr	d5, [r7, #120]	@ 0x78
 8002476:	ed87 6b20 	vstr	d6, [r7, #128]	@ 0x80
 800247a:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    h = vnorm(ex);
 800247e:	ed97 5b1e 	vldr	d5, [r7, #120]	@ 0x78
 8002482:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 8002486:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 800248a:	eeb0 0a45 	vmov.f32	s0, s10
 800248e:	eef0 0a65 	vmov.f32	s1, s11
 8002492:	eeb0 1a46 	vmov.f32	s2, s12
 8002496:	eef0 1a66 	vmov.f32	s3, s13
 800249a:	eeb0 2a47 	vmov.f32	s4, s14
 800249e:	eef0 2a67 	vmov.f32	s5, s15
 80024a2:	f7ff fe1d 	bl	80020e0 <vnorm>
 80024a6:	ed87 0b2a 	vstr	d0, [r7, #168]	@ 0xa8
    t2 = vdiv(ex, h);
 80024aa:	ed97 5b1e 	vldr	d5, [r7, #120]	@ 0x78
 80024ae:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 80024b2:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 80024b6:	ed97 3b2a 	vldr	d3, [r7, #168]	@ 0xa8
 80024ba:	eeb0 0a45 	vmov.f32	s0, s10
 80024be:	eef0 0a65 	vmov.f32	s1, s11
 80024c2:	eeb0 1a46 	vmov.f32	s2, s12
 80024c6:	eef0 1a66 	vmov.f32	s3, s13
 80024ca:	eeb0 2a47 	vmov.f32	s4, s14
 80024ce:	eef0 2a67 	vmov.f32	s5, s15
 80024d2:	f7ff fdab 	bl	800202c <vdiv>
 80024d6:	eeb0 5a40 	vmov.f32	s10, s0
 80024da:	eef0 5a60 	vmov.f32	s11, s1
 80024de:	eeb0 6a41 	vmov.f32	s12, s2
 80024e2:	eef0 6a61 	vmov.f32	s13, s3
 80024e6:	eeb0 7a42 	vmov.f32	s14, s4
 80024ea:	eef0 7a62 	vmov.f32	s15, s5
 80024ee:	ed87 5b12 	vstr	d5, [r7, #72]	@ 0x48
 80024f2:	ed87 6b14 	vstr	d6, [r7, #80]	@ 0x50
 80024f6:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58

    ex = vdiff(p3, tag);
 80024fa:	ed97 3b06 	vldr	d3, [r7, #24]
 80024fe:	ed97 4b08 	vldr	d4, [r7, #32]
 8002502:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 8002506:	ed97 2b36 	vldr	d2, [r7, #216]	@ 0xd8
 800250a:	ed97 6b38 	vldr	d6, [r7, #224]	@ 0xe0
 800250e:	ed97 7b3a 	vldr	d7, [r7, #232]	@ 0xe8
 8002512:	eeb0 0a42 	vmov.f32	s0, s4
 8002516:	eef0 0a62 	vmov.f32	s1, s5
 800251a:	eeb0 1a46 	vmov.f32	s2, s12
 800251e:	eef0 1a66 	vmov.f32	s3, s13
 8002522:	eeb0 2a47 	vmov.f32	s4, s14
 8002526:	eef0 2a67 	vmov.f32	s5, s15
 800252a:	f7ff fc71 	bl	8001e10 <vdiff>
 800252e:	eeb0 5a40 	vmov.f32	s10, s0
 8002532:	eef0 5a60 	vmov.f32	s11, s1
 8002536:	eeb0 6a41 	vmov.f32	s12, s2
 800253a:	eef0 6a61 	vmov.f32	s13, s3
 800253e:	eeb0 7a42 	vmov.f32	s14, s4
 8002542:	eef0 7a62 	vmov.f32	s15, s5
 8002546:	ed87 5b1e 	vstr	d5, [r7, #120]	@ 0x78
 800254a:	ed87 6b20 	vstr	d6, [r7, #128]	@ 0x80
 800254e:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88
    h = vnorm(ex);
 8002552:	ed97 5b1e 	vldr	d5, [r7, #120]	@ 0x78
 8002556:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 800255a:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 800255e:	eeb0 0a45 	vmov.f32	s0, s10
 8002562:	eef0 0a65 	vmov.f32	s1, s11
 8002566:	eeb0 1a46 	vmov.f32	s2, s12
 800256a:	eef0 1a66 	vmov.f32	s3, s13
 800256e:	eeb0 2a47 	vmov.f32	s4, s14
 8002572:	eef0 2a67 	vmov.f32	s5, s15
 8002576:	f7ff fdb3 	bl	80020e0 <vnorm>
 800257a:	ed87 0b2a 	vstr	d0, [r7, #168]	@ 0xa8
    t3 = vdiv(ex, h);
 800257e:	ed97 5b1e 	vldr	d5, [r7, #120]	@ 0x78
 8002582:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 8002586:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 800258a:	ed97 3b2a 	vldr	d3, [r7, #168]	@ 0xa8
 800258e:	eeb0 0a45 	vmov.f32	s0, s10
 8002592:	eef0 0a65 	vmov.f32	s1, s11
 8002596:	eeb0 1a46 	vmov.f32	s2, s12
 800259a:	eef0 1a66 	vmov.f32	s3, s13
 800259e:	eeb0 2a47 	vmov.f32	s4, s14
 80025a2:	eef0 2a67 	vmov.f32	s5, s15
 80025a6:	f7ff fd41 	bl	800202c <vdiv>
 80025aa:	eeb0 5a40 	vmov.f32	s10, s0
 80025ae:	eef0 5a60 	vmov.f32	s11, s1
 80025b2:	eeb0 6a41 	vmov.f32	s12, s2
 80025b6:	eef0 6a61 	vmov.f32	s13, s3
 80025ba:	eeb0 7a42 	vmov.f32	s14, s4
 80025be:	eef0 7a62 	vmov.f32	s15, s5
 80025c2:	ed87 5b0c 	vstr	d5, [r7, #48]	@ 0x30
 80025c6:	ed87 6b0e 	vstr	d6, [r7, #56]	@ 0x38
 80025ca:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

    gdop1 = fabs(dot(t1, t2));
 80025ce:	ed97 3b12 	vldr	d3, [r7, #72]	@ 0x48
 80025d2:	ed97 4b14 	vldr	d4, [r7, #80]	@ 0x50
 80025d6:	ed97 5b16 	vldr	d5, [r7, #88]	@ 0x58
 80025da:	ed97 2b18 	vldr	d2, [r7, #96]	@ 0x60
 80025de:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 80025e2:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 80025e6:	eeb0 0a42 	vmov.f32	s0, s4
 80025ea:	eef0 0a62 	vmov.f32	s1, s5
 80025ee:	eeb0 1a46 	vmov.f32	s2, s12
 80025f2:	eef0 1a66 	vmov.f32	s3, s13
 80025f6:	eeb0 2a47 	vmov.f32	s4, s14
 80025fa:	eef0 2a67 	vmov.f32	s5, s15
 80025fe:	f7ff fdbf 	bl	8002180 <dot>
 8002602:	ec53 2b10 	vmov	r2, r3, d0
 8002606:	4611      	mov	r1, r2
 8002608:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800260c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002610:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    gdop2 = fabs(dot(t2, t3));
 8002614:	ed97 3b0c 	vldr	d3, [r7, #48]	@ 0x30
 8002618:	ed97 4b0e 	vldr	d4, [r7, #56]	@ 0x38
 800261c:	ed97 5b10 	vldr	d5, [r7, #64]	@ 0x40
 8002620:	ed97 2b12 	vldr	d2, [r7, #72]	@ 0x48
 8002624:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002628:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800262c:	eeb0 0a42 	vmov.f32	s0, s4
 8002630:	eef0 0a62 	vmov.f32	s1, s5
 8002634:	eeb0 1a46 	vmov.f32	s2, s12
 8002638:	eef0 1a66 	vmov.f32	s3, s13
 800263c:	eeb0 2a47 	vmov.f32	s4, s14
 8002640:	eef0 2a67 	vmov.f32	s5, s15
 8002644:	f7ff fd9c 	bl	8002180 <dot>
 8002648:	ec53 2b10 	vmov	r2, r3, d0
 800264c:	4611      	mov	r1, r2
 800264e:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8002652:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002656:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    gdop3 = fabs(dot(t3, t1));
 800265a:	ed97 3b18 	vldr	d3, [r7, #96]	@ 0x60
 800265e:	ed97 4b1a 	vldr	d4, [r7, #104]	@ 0x68
 8002662:	ed97 5b1c 	vldr	d5, [r7, #112]	@ 0x70
 8002666:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 800266a:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800266e:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8002672:	eeb0 0a42 	vmov.f32	s0, s4
 8002676:	eef0 0a62 	vmov.f32	s1, s5
 800267a:	eeb0 1a46 	vmov.f32	s2, s12
 800267e:	eef0 1a66 	vmov.f32	s3, s13
 8002682:	eeb0 2a47 	vmov.f32	s4, s14
 8002686:	eef0 2a67 	vmov.f32	s5, s15
 800268a:	f7ff fd79 	bl	8002180 <dot>
 800268e:	ec53 2b10 	vmov	r2, r3, d0
 8002692:	4611      	mov	r1, r2
 8002694:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8002698:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800269c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    if (gdop1 < gdop2) result = gdop2;
 80026a0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80026a4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80026a8:	f7fe fa48 	bl	8000b3c <__aeabi_dcmplt>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d004      	beq.n	80026bc <gdoprate+0x398>
 80026b2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80026b6:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
 80026ba:	e003      	b.n	80026c4 <gdoprate+0x3a0>
    else result = gdop1;
 80026bc:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80026c0:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
    if (result < gdop3) result = gdop3;
 80026c4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80026c8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80026cc:	f7fe fa36 	bl	8000b3c <__aeabi_dcmplt>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <gdoprate+0x3ba>
 80026d6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80026da:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0

    return result;
 80026de:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 80026e2:	ec43 2b17 	vmov	d7, r2, r3
}
 80026e6:	eeb0 0a47 	vmov.f32	s0, s14
 80026ea:	eef0 0a67 	vmov.f32	s1, s15
 80026ee:	37b8      	adds	r7, #184	@ 0xb8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <sphereline>:
/* Intersecting a sphere sc with radius of r, with a line p1-p2.
 * Return zero if successful, negative error otherwise.
 * mu1 & mu2 are constant to find points of intersection.
*/
int sphereline(const vec3d p1, const vec3d p2, const vec3d sc, double r, double *const mu1, double *const mu2)
{
 80026f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f8:	b09c      	sub	sp, #112	@ 0x70
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	eeb0 6a44 	vmov.f32	s12, s8
 8002700:	eef0 6a64 	vmov.f32	s13, s9
 8002704:	eeb0 7a45 	vmov.f32	s14, s10
 8002708:	eef0 7a65 	vmov.f32	s15, s11
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
 8002710:	ed87 0b08 	vstr	d0, [r7, #32]
 8002714:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002718:	ed87 2b0c 	vstr	d2, [r7, #48]	@ 0x30
 800271c:	ed87 3b02 	vstr	d3, [r7, #8]
 8002720:	ed87 6b04 	vstr	d6, [r7, #16]
 8002724:	ed87 7b06 	vstr	d7, [r7, #24]
    double a,b,c;
    double bb4ac;
    vec3d dp;

    dp.x = p2.x - p1.x;
 8002728:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800272c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002730:	f7fd fdda 	bl	80002e8 <__aeabi_dsub>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    dp.y = p2.y - p1.y;
 800273c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002744:	f7fd fdd0 	bl	80002e8 <__aeabi_dsub>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    dp.z = p2.z - p1.z;
 8002750:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002754:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002758:	f7fd fdc6 	bl	80002e8 <__aeabi_dsub>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    a = dp.x * dp.x + dp.y * dp.y + dp.z * dp.z;
 8002764:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002768:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800276c:	f7fd ff74 	bl	8000658 <__aeabi_dmul>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4690      	mov	r8, r2
 8002776:	4699      	mov	r9, r3
 8002778:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800277c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002780:	f7fd ff6a 	bl	8000658 <__aeabi_dmul>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4640      	mov	r0, r8
 800278a:	4649      	mov	r1, r9
 800278c:	f7fd fdae 	bl	80002ec <__adddf3>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4690      	mov	r8, r2
 8002796:	4699      	mov	r9, r3
 8002798:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800279c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027a0:	f7fd ff5a 	bl	8000658 <__aeabi_dmul>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4640      	mov	r0, r8
 80027aa:	4649      	mov	r1, r9
 80027ac:	f7fd fd9e 	bl	80002ec <__adddf3>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

    b = 2 * (dp.x * (p1.x - sc.x) + dp.y * (p1.y - sc.y) + dp.z * (p1.z - sc.z));
 80027b8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80027bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80027c0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80027c4:	f7fd fd90 	bl	80002e8 <__aeabi_dsub>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4640      	mov	r0, r8
 80027ce:	4649      	mov	r1, r9
 80027d0:	f7fd ff42 	bl	8000658 <__aeabi_dmul>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4692      	mov	sl, r2
 80027da:	469b      	mov	fp, r3
 80027dc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80027e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80027e4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80027e8:	f7fd fd7e 	bl	80002e8 <__aeabi_dsub>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4640      	mov	r0, r8
 80027f2:	4649      	mov	r1, r9
 80027f4:	f7fd ff30 	bl	8000658 <__aeabi_dmul>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4650      	mov	r0, sl
 80027fe:	4659      	mov	r1, fp
 8002800:	f7fd fd74 	bl	80002ec <__adddf3>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4692      	mov	sl, r2
 800280a:	469b      	mov	fp, r3
 800280c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8002810:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002814:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8002818:	f7fd fd66 	bl	80002e8 <__aeabi_dsub>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4640      	mov	r0, r8
 8002822:	4649      	mov	r1, r9
 8002824:	f7fd ff18 	bl	8000658 <__aeabi_dmul>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4650      	mov	r0, sl
 800282e:	4659      	mov	r1, fp
 8002830:	f7fd fd5c 	bl	80002ec <__adddf3>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4610      	mov	r0, r2
 800283a:	4619      	mov	r1, r3
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	f7fd fd54 	bl	80002ec <__adddf3>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

    c = sc.x * sc.x + sc.y * sc.y + sc.z * sc.z;
 800284c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002850:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002854:	f7fd ff00 	bl	8000658 <__aeabi_dmul>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4690      	mov	r8, r2
 800285e:	4699      	mov	r9, r3
 8002860:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002864:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002868:	f7fd fef6 	bl	8000658 <__aeabi_dmul>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4640      	mov	r0, r8
 8002872:	4649      	mov	r1, r9
 8002874:	f7fd fd3a 	bl	80002ec <__adddf3>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4690      	mov	r8, r2
 800287e:	4699      	mov	r9, r3
 8002880:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002884:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8002888:	f7fd fee6 	bl	8000658 <__aeabi_dmul>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4640      	mov	r0, r8
 8002892:	4649      	mov	r1, r9
 8002894:	f7fd fd2a 	bl	80002ec <__adddf3>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    c += p1.x * p1.x + p1.y * p1.y + p1.z * p1.z;
 80028a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80028a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028a8:	f7fd fed6 	bl	8000658 <__aeabi_dmul>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4690      	mov	r8, r2
 80028b2:	4699      	mov	r9, r3
 80028b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80028b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028bc:	f7fd fecc 	bl	8000658 <__aeabi_dmul>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4640      	mov	r0, r8
 80028c6:	4649      	mov	r1, r9
 80028c8:	f7fd fd10 	bl	80002ec <__adddf3>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4690      	mov	r8, r2
 80028d2:	4699      	mov	r9, r3
 80028d4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80028d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80028dc:	f7fd febc 	bl	8000658 <__aeabi_dmul>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4640      	mov	r0, r8
 80028e6:	4649      	mov	r1, r9
 80028e8:	f7fd fd00 	bl	80002ec <__adddf3>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80028f4:	f7fd fcfa 	bl	80002ec <__adddf3>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    c -= 2 * (sc.x * p1.x + sc.y * p1.y + sc.z * p1.z);
 8002900:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002904:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002908:	f7fd fea6 	bl	8000658 <__aeabi_dmul>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4690      	mov	r8, r2
 8002912:	4699      	mov	r9, r3
 8002914:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002918:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800291c:	f7fd fe9c 	bl	8000658 <__aeabi_dmul>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4640      	mov	r0, r8
 8002926:	4649      	mov	r1, r9
 8002928:	f7fd fce0 	bl	80002ec <__adddf3>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4690      	mov	r8, r2
 8002932:	4699      	mov	r9, r3
 8002934:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002938:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800293c:	f7fd fe8c 	bl	8000658 <__aeabi_dmul>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4640      	mov	r0, r8
 8002946:	4649      	mov	r1, r9
 8002948:	f7fd fcd0 	bl	80002ec <__adddf3>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	f7fd fcc8 	bl	80002ec <__adddf3>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002964:	f7fd fcc0 	bl	80002e8 <__aeabi_dsub>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    c -= r * r;
 8002970:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8002974:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8002978:	f7fd fe6e 	bl	8000658 <__aeabi_dmul>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002984:	f7fd fcb0 	bl	80002e8 <__aeabi_dsub>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    bb4ac = b * b - 4 * a * c;
 8002990:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002994:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002998:	f7fd fe5e 	bl	8000658 <__aeabi_dmul>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4690      	mov	r8, r2
 80029a2:	4699      	mov	r9, r3
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	4b42      	ldr	r3, [pc, #264]	@ (8002ab4 <sphereline+0x3c0>)
 80029aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80029ae:	f7fd fe53 	bl	8000658 <__aeabi_dmul>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029be:	f7fd fe4b 	bl	8000658 <__aeabi_dmul>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4640      	mov	r0, r8
 80029c8:	4649      	mov	r1, r9
 80029ca:	f7fd fc8d 	bl	80002e8 <__aeabi_dsub>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    if (fabs(a) == 0 || bb4ac < 0)
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80029e2:	f7fe f8a1 	bl	8000b28 <__aeabi_dcmpeq>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <sphereline+0x30e>
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80029f8:	f7fe f8a0 	bl	8000b3c <__aeabi_dcmplt>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d010      	beq.n	8002a24 <sphereline+0x330>
    {
        *mu1 = 0;
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	e9c1 2300 	strd	r2, r3, [r1]
        *mu2 = 0;
 8002a10:	6839      	ldr	r1, [r7, #0]
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	e9c1 2300 	strd	r2, r3, [r1]
        return -1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	e042      	b.n	8002aaa <sphereline+0x3b6>
    }

    *mu1 = (-b + sqrt(bb4ac)) / (2 * a);
 8002a24:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8002a28:	f00c ffa0 	bl	800f96c <sqrt>
 8002a2c:	ec51 0b10 	vmov	r0, r1, d0
 8002a30:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002a34:	f7fd fc58 	bl	80002e8 <__aeabi_dsub>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4690      	mov	r8, r2
 8002a3e:	4699      	mov	r9, r3
 8002a40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	f7fd fc50 	bl	80002ec <__adddf3>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4640      	mov	r0, r8
 8002a52:	4649      	mov	r1, r9
 8002a54:	f7fd ff2a 	bl	80008ac <__aeabi_ddiv>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	e9c1 2300 	strd	r2, r3, [r1]
    *mu2 = (-b - sqrt(bb4ac)) / (2 * a);
 8002a62:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8002a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a66:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002a6a:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8002a6e:	f00c ff7d 	bl	800f96c <sqrt>
 8002a72:	ec53 2b10 	vmov	r2, r3, d0
 8002a76:	4620      	mov	r0, r4
 8002a78:	4629      	mov	r1, r5
 8002a7a:	f7fd fc35 	bl	80002e8 <__aeabi_dsub>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4614      	mov	r4, r2
 8002a84:	461d      	mov	r5, r3
 8002a86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	f7fd fc2d 	bl	80002ec <__adddf3>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4620      	mov	r0, r4
 8002a98:	4629      	mov	r1, r5
 8002a9a:	f7fd ff07 	bl	80008ac <__aeabi_ddiv>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	6839      	ldr	r1, [r7, #0]
 8002aa4:	e9c1 2300 	strd	r2, r3, [r1]

    return 0;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3770      	adds	r7, #112	@ 0x70
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ab4:	40100000 	.word	0x40100000

08002ab8 <trilateration>:
                  const vec3d p1, const double r1,
                  const vec3d p2, const double r2,
                  const vec3d p3, const double r3,
                  const vec3d p4, const double r4,
                  const double maxzero)
{
 8002ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002abc:	f5ad 7d29 	sub.w	sp, sp, #676	@ 0x2a4
 8002ac0:	af08      	add	r7, sp, #32
 8002ac2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002ac6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aca:	6018      	str	r0, [r3, #0]
 8002acc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002ad0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8002ad4:	6019      	str	r1, [r3, #0]
 8002ad6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002ada:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002ae4:	f5a3 7108 	sub.w	r1, r3, #544	@ 0x220
 8002ae8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002aec:	ed03 3b02 	vstr	d3, [r3, #-8]
 8002af0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002af4:	f5a3 7210 	sub.w	r2, r3, #576	@ 0x240
 8002af8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002afc:	ed03 7b02 	vstr	d7, [r3, #-8]
 8002b00:	ed81 0b00 	vstr	d0, [r1]
 8002b04:	ed81 1b02 	vstr	d1, [r1, #8]
 8002b08:	ed81 2b04 	vstr	d2, [r1, #16]
 8002b0c:	ed82 4b00 	vstr	d4, [r2]
 8002b10:	ed82 5b02 	vstr	d5, [r2, #8]
 8002b14:	ed82 6b04 	vstr	d6, [r2, #16]

    // if there are at least 2 concentric spheres within the first 3 spheres
    // then the calculation may not continue, drop it with error -1

    /* h = |p3 - p1|, ex = (p3 - p1) / |p3 - p1| */
    ex = vdiff(p3, p1); // vector p13
 8002b18:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002b1c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002b20:	ed93 3b00 	vldr	d3, [r3]
 8002b24:	ed93 4b02 	vldr	d4, [r3, #8]
 8002b28:	ed93 5b04 	vldr	d5, [r3, #16]
 8002b2c:	ed97 2baa 	vldr	d2, [r7, #680]	@ 0x2a8
 8002b30:	ed97 6bac 	vldr	d6, [r7, #688]	@ 0x2b0
 8002b34:	ed97 7bae 	vldr	d7, [r7, #696]	@ 0x2b8
 8002b38:	eeb0 0a42 	vmov.f32	s0, s4
 8002b3c:	eef0 0a62 	vmov.f32	s1, s5
 8002b40:	eeb0 1a46 	vmov.f32	s2, s12
 8002b44:	eef0 1a66 	vmov.f32	s3, s13
 8002b48:	eeb0 2a47 	vmov.f32	s4, s14
 8002b4c:	eef0 2a67 	vmov.f32	s5, s15
 8002b50:	f7ff f95e 	bl	8001e10 <vdiff>
 8002b54:	eeb0 5a40 	vmov.f32	s10, s0
 8002b58:	eef0 5a60 	vmov.f32	s11, s1
 8002b5c:	eeb0 6a41 	vmov.f32	s12, s2
 8002b60:	eef0 6a61 	vmov.f32	s13, s3
 8002b64:	eeb0 7a42 	vmov.f32	s14, s4
 8002b68:	eef0 7a62 	vmov.f32	s15, s5
 8002b6c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002b70:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b74:	ed83 5b00 	vstr	d5, [r3]
 8002b78:	ed83 6b02 	vstr	d6, [r3, #8]
 8002b7c:	ed83 7b04 	vstr	d7, [r3, #16]
    h = vnorm(ex); // scalar p13
 8002b80:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002b84:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b88:	ed93 5b00 	vldr	d5, [r3]
 8002b8c:	ed93 6b02 	vldr	d6, [r3, #8]
 8002b90:	ed93 7b04 	vldr	d7, [r3, #16]
 8002b94:	eeb0 0a45 	vmov.f32	s0, s10
 8002b98:	eef0 0a65 	vmov.f32	s1, s11
 8002b9c:	eeb0 1a46 	vmov.f32	s2, s12
 8002ba0:	eef0 1a66 	vmov.f32	s3, s13
 8002ba4:	eeb0 2a47 	vmov.f32	s4, s14
 8002ba8:	eef0 2a67 	vmov.f32	s5, s15
 8002bac:	f7ff fa98 	bl	80020e0 <vnorm>
 8002bb0:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
    if (h <= maxzero)
 8002bb4:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 8002bb8:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 8002bbc:	f7fd ffc8 	bl	8000b50 <__aeabi_dcmple>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <trilateration+0x116>
    {
        /* p1 and p3 are concentric, not good to obtain a precise intersection point */
        //printf("concentric13 return -1\n");
        return ERR_TRIL_CONCENTRIC;
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	f002 ba23 	b.w	8005014 <trilateration+0x255c>
    }

    /* h = |p3 - p2|, ex = (p3 - p2) / |p3 - p2| */
    ex = vdiff(p3, p2); // vector p23
 8002bce:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002bd2:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002bd6:	ed93 3b00 	vldr	d3, [r3]
 8002bda:	ed93 4b02 	vldr	d4, [r3, #8]
 8002bde:	ed93 5b04 	vldr	d5, [r3, #16]
 8002be2:	ed97 2baa 	vldr	d2, [r7, #680]	@ 0x2a8
 8002be6:	ed97 6bac 	vldr	d6, [r7, #688]	@ 0x2b0
 8002bea:	ed97 7bae 	vldr	d7, [r7, #696]	@ 0x2b8
 8002bee:	eeb0 0a42 	vmov.f32	s0, s4
 8002bf2:	eef0 0a62 	vmov.f32	s1, s5
 8002bf6:	eeb0 1a46 	vmov.f32	s2, s12
 8002bfa:	eef0 1a66 	vmov.f32	s3, s13
 8002bfe:	eeb0 2a47 	vmov.f32	s4, s14
 8002c02:	eef0 2a67 	vmov.f32	s5, s15
 8002c06:	f7ff f903 	bl	8001e10 <vdiff>
 8002c0a:	eeb0 5a40 	vmov.f32	s10, s0
 8002c0e:	eef0 5a60 	vmov.f32	s11, s1
 8002c12:	eeb0 6a41 	vmov.f32	s12, s2
 8002c16:	eef0 6a61 	vmov.f32	s13, s3
 8002c1a:	eeb0 7a42 	vmov.f32	s14, s4
 8002c1e:	eef0 7a62 	vmov.f32	s15, s5
 8002c22:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002c26:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c2a:	ed83 5b00 	vstr	d5, [r3]
 8002c2e:	ed83 6b02 	vstr	d6, [r3, #8]
 8002c32:	ed83 7b04 	vstr	d7, [r3, #16]
    h = vnorm(ex); // scalar p23
 8002c36:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002c3a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c3e:	ed93 5b00 	vldr	d5, [r3]
 8002c42:	ed93 6b02 	vldr	d6, [r3, #8]
 8002c46:	ed93 7b04 	vldr	d7, [r3, #16]
 8002c4a:	eeb0 0a45 	vmov.f32	s0, s10
 8002c4e:	eef0 0a65 	vmov.f32	s1, s11
 8002c52:	eeb0 1a46 	vmov.f32	s2, s12
 8002c56:	eef0 1a66 	vmov.f32	s3, s13
 8002c5a:	eeb0 2a47 	vmov.f32	s4, s14
 8002c5e:	eef0 2a67 	vmov.f32	s5, s15
 8002c62:	f7ff fa3d 	bl	80020e0 <vnorm>
 8002c66:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
    if (h <= maxzero)
 8002c6a:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 8002c6e:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 8002c72:	f7fd ff6d 	bl	8000b50 <__aeabi_dcmple>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <trilateration+0x1cc>
    {
        /* p2 and p3 are concentric, not good to obtain a precise intersection point */
        //printf("concentric23 return -1\n");
        return ERR_TRIL_CONCENTRIC;
 8002c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c80:	f002 b9c8 	b.w	8005014 <trilateration+0x255c>
    }

    /* h = |p2 - p1|, ex = (p2 - p1) / |p2 - p1| */
    ex = vdiff(p2, p1); // vector p12
 8002c84:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002c88:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002c8c:	ed93 3b00 	vldr	d3, [r3]
 8002c90:	ed93 4b02 	vldr	d4, [r3, #8]
 8002c94:	ed93 5b04 	vldr	d5, [r3, #16]
 8002c98:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002c9c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002ca0:	ed93 2b00 	vldr	d2, [r3]
 8002ca4:	ed93 6b02 	vldr	d6, [r3, #8]
 8002ca8:	ed93 7b04 	vldr	d7, [r3, #16]
 8002cac:	eeb0 0a42 	vmov.f32	s0, s4
 8002cb0:	eef0 0a62 	vmov.f32	s1, s5
 8002cb4:	eeb0 1a46 	vmov.f32	s2, s12
 8002cb8:	eef0 1a66 	vmov.f32	s3, s13
 8002cbc:	eeb0 2a47 	vmov.f32	s4, s14
 8002cc0:	eef0 2a67 	vmov.f32	s5, s15
 8002cc4:	f7ff f8a4 	bl	8001e10 <vdiff>
 8002cc8:	eeb0 5a40 	vmov.f32	s10, s0
 8002ccc:	eef0 5a60 	vmov.f32	s11, s1
 8002cd0:	eeb0 6a41 	vmov.f32	s12, s2
 8002cd4:	eef0 6a61 	vmov.f32	s13, s3
 8002cd8:	eeb0 7a42 	vmov.f32	s14, s4
 8002cdc:	eef0 7a62 	vmov.f32	s15, s5
 8002ce0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002ce4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002ce8:	ed83 5b00 	vstr	d5, [r3]
 8002cec:	ed83 6b02 	vstr	d6, [r3, #8]
 8002cf0:	ed83 7b04 	vstr	d7, [r3, #16]
    h = vnorm(ex); // scalar p12
 8002cf4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002cf8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002cfc:	ed93 5b00 	vldr	d5, [r3]
 8002d00:	ed93 6b02 	vldr	d6, [r3, #8]
 8002d04:	ed93 7b04 	vldr	d7, [r3, #16]
 8002d08:	eeb0 0a45 	vmov.f32	s0, s10
 8002d0c:	eef0 0a65 	vmov.f32	s1, s11
 8002d10:	eeb0 1a46 	vmov.f32	s2, s12
 8002d14:	eef0 1a66 	vmov.f32	s3, s13
 8002d18:	eeb0 2a47 	vmov.f32	s4, s14
 8002d1c:	eef0 2a67 	vmov.f32	s5, s15
 8002d20:	f7ff f9de 	bl	80020e0 <vnorm>
 8002d24:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
    if (h <= maxzero)
 8002d28:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 8002d2c:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 8002d30:	f7fd ff0e 	bl	8000b50 <__aeabi_dcmple>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <trilateration+0x28a>
    {
        /* p1 and p2 are concentric, not good to obtain a precise intersection point */
        //printf("concentric12 return -1\n");
        return ERR_TRIL_CONCENTRIC;
 8002d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3e:	f002 b969 	b.w	8005014 <trilateration+0x255c>
    }


    ex = vdiv(ex, h); // unit vector ex with respect to p1 (new coordinate system)
 8002d42:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002d46:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d4a:	ed93 5b00 	vldr	d5, [r3]
 8002d4e:	ed93 6b02 	vldr	d6, [r3, #8]
 8002d52:	ed93 7b04 	vldr	d7, [r3, #16]
 8002d56:	ed97 3b94 	vldr	d3, [r7, #592]	@ 0x250
 8002d5a:	eeb0 0a45 	vmov.f32	s0, s10
 8002d5e:	eef0 0a65 	vmov.f32	s1, s11
 8002d62:	eeb0 1a46 	vmov.f32	s2, s12
 8002d66:	eef0 1a66 	vmov.f32	s3, s13
 8002d6a:	eeb0 2a47 	vmov.f32	s4, s14
 8002d6e:	eef0 2a67 	vmov.f32	s5, s15
 8002d72:	f7ff f95b 	bl	800202c <vdiv>
 8002d76:	eeb0 5a40 	vmov.f32	s10, s0
 8002d7a:	eef0 5a60 	vmov.f32	s11, s1
 8002d7e:	eeb0 6a41 	vmov.f32	s12, s2
 8002d82:	eef0 6a61 	vmov.f32	s13, s3
 8002d86:	eeb0 7a42 	vmov.f32	s14, s4
 8002d8a:	eef0 7a62 	vmov.f32	s15, s5
 8002d8e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002d92:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d96:	ed83 5b00 	vstr	d5, [r3]
 8002d9a:	ed83 6b02 	vstr	d6, [r3, #8]
 8002d9e:	ed83 7b04 	vstr	d7, [r3, #16]

    /* t1 = p3 - p1, t2 = ex (ex . (p3 - p1)) */
    t1 = vdiff(p3, p1); // vector p13
 8002da2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002da6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002daa:	ed93 3b00 	vldr	d3, [r3]
 8002dae:	ed93 4b02 	vldr	d4, [r3, #8]
 8002db2:	ed93 5b04 	vldr	d5, [r3, #16]
 8002db6:	ed97 2baa 	vldr	d2, [r7, #680]	@ 0x2a8
 8002dba:	ed97 6bac 	vldr	d6, [r7, #688]	@ 0x2b0
 8002dbe:	ed97 7bae 	vldr	d7, [r7, #696]	@ 0x2b8
 8002dc2:	eeb0 0a42 	vmov.f32	s0, s4
 8002dc6:	eef0 0a62 	vmov.f32	s1, s5
 8002dca:	eeb0 1a46 	vmov.f32	s2, s12
 8002dce:	eef0 1a66 	vmov.f32	s3, s13
 8002dd2:	eeb0 2a47 	vmov.f32	s4, s14
 8002dd6:	eef0 2a67 	vmov.f32	s5, s15
 8002dda:	f7ff f819 	bl	8001e10 <vdiff>
 8002dde:	eeb0 5a40 	vmov.f32	s10, s0
 8002de2:	eef0 5a60 	vmov.f32	s11, s1
 8002de6:	eeb0 6a41 	vmov.f32	s12, s2
 8002dea:	eef0 6a61 	vmov.f32	s13, s3
 8002dee:	eeb0 7a42 	vmov.f32	s14, s4
 8002df2:	eef0 7a62 	vmov.f32	s15, s5
 8002df6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002dfa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002dfe:	ed83 5b00 	vstr	d5, [r3]
 8002e02:	ed83 6b02 	vstr	d6, [r3, #8]
 8002e06:	ed83 7b04 	vstr	d7, [r3, #16]
    i = dot(ex, t1); // the scalar of t1 on the ex direction
 8002e0a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002e0e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002e12:	ed93 3b00 	vldr	d3, [r3]
 8002e16:	ed93 4b02 	vldr	d4, [r3, #8]
 8002e1a:	ed93 5b04 	vldr	d5, [r3, #16]
 8002e1e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002e22:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002e26:	ed93 2b00 	vldr	d2, [r3]
 8002e2a:	ed93 6b02 	vldr	d6, [r3, #8]
 8002e2e:	ed93 7b04 	vldr	d7, [r3, #16]
 8002e32:	eeb0 0a42 	vmov.f32	s0, s4
 8002e36:	eef0 0a62 	vmov.f32	s1, s5
 8002e3a:	eeb0 1a46 	vmov.f32	s2, s12
 8002e3e:	eef0 1a66 	vmov.f32	s3, s13
 8002e42:	eeb0 2a47 	vmov.f32	s4, s14
 8002e46:	eef0 2a67 	vmov.f32	s5, s15
 8002e4a:	f7ff f999 	bl	8002180 <dot>
 8002e4e:	ed87 0b92 	vstr	d0, [r7, #584]	@ 0x248
    t2 = vmul(ex, i); // colinear vector to p13 with the length of i
 8002e52:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002e56:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002e5a:	ed93 5b00 	vldr	d5, [r3]
 8002e5e:	ed93 6b02 	vldr	d6, [r3, #8]
 8002e62:	ed93 7b04 	vldr	d7, [r3, #16]
 8002e66:	ed97 3b92 	vldr	d3, [r7, #584]	@ 0x248
 8002e6a:	eeb0 0a45 	vmov.f32	s0, s10
 8002e6e:	eef0 0a65 	vmov.f32	s1, s11
 8002e72:	eeb0 1a46 	vmov.f32	s2, s12
 8002e76:	eef0 1a66 	vmov.f32	s3, s13
 8002e7a:	eeb0 2a47 	vmov.f32	s4, s14
 8002e7e:	eef0 2a67 	vmov.f32	s5, s15
 8002e82:	f7ff f879 	bl	8001f78 <vmul>
 8002e86:	eeb0 5a40 	vmov.f32	s10, s0
 8002e8a:	eef0 5a60 	vmov.f32	s11, s1
 8002e8e:	eeb0 6a41 	vmov.f32	s12, s2
 8002e92:	eef0 6a61 	vmov.f32	s13, s3
 8002e96:	eeb0 7a42 	vmov.f32	s14, s4
 8002e9a:	eef0 7a62 	vmov.f32	s15, s5
 8002e9e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002ea2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002ea6:	ed83 5b00 	vstr	d5, [r3]
 8002eaa:	ed83 6b02 	vstr	d6, [r3, #8]
 8002eae:	ed83 7b04 	vstr	d7, [r3, #16]

    /* ey = (t1 - t2), t = |t1 - t2| */
    ey = vdiff(t1, t2); // vector t21 perpendicular to t1
 8002eb2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002eb6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002eba:	ed93 3b00 	vldr	d3, [r3]
 8002ebe:	ed93 4b02 	vldr	d4, [r3, #8]
 8002ec2:	ed93 5b04 	vldr	d5, [r3, #16]
 8002ec6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002eca:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ece:	ed93 2b00 	vldr	d2, [r3]
 8002ed2:	ed93 6b02 	vldr	d6, [r3, #8]
 8002ed6:	ed93 7b04 	vldr	d7, [r3, #16]
 8002eda:	eeb0 0a42 	vmov.f32	s0, s4
 8002ede:	eef0 0a62 	vmov.f32	s1, s5
 8002ee2:	eeb0 1a46 	vmov.f32	s2, s12
 8002ee6:	eef0 1a66 	vmov.f32	s3, s13
 8002eea:	eeb0 2a47 	vmov.f32	s4, s14
 8002eee:	eef0 2a67 	vmov.f32	s5, s15
 8002ef2:	f7fe ff8d 	bl	8001e10 <vdiff>
 8002ef6:	eeb0 5a40 	vmov.f32	s10, s0
 8002efa:	eef0 5a60 	vmov.f32	s11, s1
 8002efe:	eeb0 6a41 	vmov.f32	s12, s2
 8002f02:	eef0 6a61 	vmov.f32	s13, s3
 8002f06:	eeb0 7a42 	vmov.f32	s14, s4
 8002f0a:	eef0 7a62 	vmov.f32	s15, s5
 8002f0e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002f12:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f16:	ed83 5b00 	vstr	d5, [r3]
 8002f1a:	ed83 6b02 	vstr	d6, [r3, #8]
 8002f1e:	ed83 7b04 	vstr	d7, [r3, #16]
    t = vnorm(ey); // scalar t21
 8002f22:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002f26:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f2a:	ed93 5b00 	vldr	d5, [r3]
 8002f2e:	ed93 6b02 	vldr	d6, [r3, #8]
 8002f32:	ed93 7b04 	vldr	d7, [r3, #16]
 8002f36:	eeb0 0a45 	vmov.f32	s0, s10
 8002f3a:	eef0 0a65 	vmov.f32	s1, s11
 8002f3e:	eeb0 1a46 	vmov.f32	s2, s12
 8002f42:	eef0 1a66 	vmov.f32	s3, s13
 8002f46:	eeb0 2a47 	vmov.f32	s4, s14
 8002f4a:	eef0 2a67 	vmov.f32	s5, s15
 8002f4e:	f7ff f8c7 	bl	80020e0 <vnorm>
 8002f52:	ed87 0b90 	vstr	d0, [r7, #576]	@ 0x240
    if (t > maxzero)
 8002f56:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 8002f5a:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 8002f5e:	f7fd fe0b 	bl	8000b78 <__aeabi_dcmpgt>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d054      	beq.n	8003012 <trilateration+0x55a>
    {
        /* ey = (t1 - t2) / |t1 - t2| */
        ey = vdiv(ey, t); // unit vector ey with respect to p1 (new coordinate system)
 8002f68:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002f6c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f70:	ed93 5b00 	vldr	d5, [r3]
 8002f74:	ed93 6b02 	vldr	d6, [r3, #8]
 8002f78:	ed93 7b04 	vldr	d7, [r3, #16]
 8002f7c:	ed97 3b90 	vldr	d3, [r7, #576]	@ 0x240
 8002f80:	eeb0 0a45 	vmov.f32	s0, s10
 8002f84:	eef0 0a65 	vmov.f32	s1, s11
 8002f88:	eeb0 1a46 	vmov.f32	s2, s12
 8002f8c:	eef0 1a66 	vmov.f32	s3, s13
 8002f90:	eeb0 2a47 	vmov.f32	s4, s14
 8002f94:	eef0 2a67 	vmov.f32	s5, s15
 8002f98:	f7ff f848 	bl	800202c <vdiv>
 8002f9c:	eeb0 5a40 	vmov.f32	s10, s0
 8002fa0:	eef0 5a60 	vmov.f32	s11, s1
 8002fa4:	eeb0 6a41 	vmov.f32	s12, s2
 8002fa8:	eef0 6a61 	vmov.f32	s13, s3
 8002fac:	eeb0 7a42 	vmov.f32	s14, s4
 8002fb0:	eef0 7a62 	vmov.f32	s15, s5
 8002fb4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002fb8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002fbc:	ed83 5b00 	vstr	d5, [r3]
 8002fc0:	ed83 6b02 	vstr	d6, [r3, #8]
 8002fc4:	ed83 7b04 	vstr	d7, [r3, #16]

        /* j = ey . (p3 - p1) */
        j = dot(ey, t1); // scalar t1 on the ey direction
 8002fc8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002fcc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002fd0:	ed93 3b00 	vldr	d3, [r3]
 8002fd4:	ed93 4b02 	vldr	d4, [r3, #8]
 8002fd8:	ed93 5b04 	vldr	d5, [r3, #16]
 8002fdc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002fe0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002fe4:	ed93 2b00 	vldr	d2, [r3]
 8002fe8:	ed93 6b02 	vldr	d6, [r3, #8]
 8002fec:	ed93 7b04 	vldr	d7, [r3, #16]
 8002ff0:	eeb0 0a42 	vmov.f32	s0, s4
 8002ff4:	eef0 0a62 	vmov.f32	s1, s5
 8002ff8:	eeb0 1a46 	vmov.f32	s2, s12
 8002ffc:	eef0 1a66 	vmov.f32	s3, s13
 8003000:	eeb0 2a47 	vmov.f32	s4, s14
 8003004:	eef0 2a67 	vmov.f32	s5, s15
 8003008:	f7ff f8ba 	bl	8002180 <dot>
 800300c:	ed87 0b9e 	vstr	d0, [r7, #632]	@ 0x278
 8003010:	e005      	b.n	800301e <trilateration+0x566>
    }
    else
        j = 0.0;
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	e9c7 239e 	strd	r2, r3, [r7, #632]	@ 0x278

    /* Note: t <= maxzero implies j = 0.0. */
    if (fabs(j) <= maxzero)
 800301e:	f8d7 4278 	ldr.w	r4, [r7, #632]	@ 0x278
 8003022:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8003026:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800302a:	4622      	mov	r2, r4
 800302c:	462b      	mov	r3, r5
 800302e:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8003032:	f7fd fd97 	bl	8000b64 <__aeabi_dcmpge>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 82c7 	beq.w	80035cc <trilateration+0xb14>
    {

        /* Is point p1 + (r1 along the axis) the intersection? */
        t2 = vsum(p1, vmul(ex, r1));
 800303e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003042:	461a      	mov	r2, r3
 8003044:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003048:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800304c:	ed93 5b00 	vldr	d5, [r3]
 8003050:	ed93 6b02 	vldr	d6, [r3, #8]
 8003054:	ed93 7b04 	vldr	d7, [r3, #16]
 8003058:	ed12 3b02 	vldr	d3, [r2, #-8]
 800305c:	eeb0 0a45 	vmov.f32	s0, s10
 8003060:	eef0 0a65 	vmov.f32	s1, s11
 8003064:	eeb0 1a46 	vmov.f32	s2, s12
 8003068:	eef0 1a66 	vmov.f32	s3, s13
 800306c:	eeb0 2a47 	vmov.f32	s4, s14
 8003070:	eef0 2a67 	vmov.f32	s5, s15
 8003074:	f7fe ff80 	bl	8001f78 <vmul>
 8003078:	eeb0 5a40 	vmov.f32	s10, s0
 800307c:	eef0 5a60 	vmov.f32	s11, s1
 8003080:	eeb0 6a41 	vmov.f32	s12, s2
 8003084:	eef0 6a61 	vmov.f32	s13, s3
 8003088:	eeb0 7a42 	vmov.f32	s14, s4
 800308c:	eef0 7a62 	vmov.f32	s15, s5
 8003090:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003094:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003098:	ed83 5b00 	vstr	d5, [r3]
 800309c:	ed83 6b02 	vstr	d6, [r3, #8]
 80030a0:	ed83 7b04 	vstr	d7, [r3, #16]
 80030a4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80030a8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80030ac:	ed93 3b00 	vldr	d3, [r3]
 80030b0:	ed93 4b02 	vldr	d4, [r3, #8]
 80030b4:	ed93 5b04 	vldr	d5, [r3, #16]
 80030b8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80030bc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80030c0:	ed93 2b00 	vldr	d2, [r3]
 80030c4:	ed93 6b02 	vldr	d6, [r3, #8]
 80030c8:	ed93 7b04 	vldr	d7, [r3, #16]
 80030cc:	eeb0 0a42 	vmov.f32	s0, s4
 80030d0:	eef0 0a62 	vmov.f32	s1, s5
 80030d4:	eeb0 1a46 	vmov.f32	s2, s12
 80030d8:	eef0 1a66 	vmov.f32	s3, s13
 80030dc:	eeb0 2a47 	vmov.f32	s4, s14
 80030e0:	eef0 2a67 	vmov.f32	s5, s15
 80030e4:	f7fe feee 	bl	8001ec4 <vsum>
 80030e8:	eeb0 5a40 	vmov.f32	s10, s0
 80030ec:	eef0 5a60 	vmov.f32	s11, s1
 80030f0:	eeb0 6a41 	vmov.f32	s12, s2
 80030f4:	eef0 6a61 	vmov.f32	s13, s3
 80030f8:	eeb0 7a42 	vmov.f32	s14, s4
 80030fc:	eef0 7a62 	vmov.f32	s15, s5
 8003100:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003104:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003108:	ed83 5b00 	vstr	d5, [r3]
 800310c:	ed83 6b02 	vstr	d6, [r3, #8]
 8003110:	ed83 7b04 	vstr	d7, [r3, #16]
        if (fabs(vnorm(vdiff(p2, t2)) - r2) <= maxzero &&
 8003114:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003118:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800311c:	ed93 3b00 	vldr	d3, [r3]
 8003120:	ed93 4b02 	vldr	d4, [r3, #8]
 8003124:	ed93 5b04 	vldr	d5, [r3, #16]
 8003128:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800312c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8003130:	ed93 2b00 	vldr	d2, [r3]
 8003134:	ed93 6b02 	vldr	d6, [r3, #8]
 8003138:	ed93 7b04 	vldr	d7, [r3, #16]
 800313c:	eeb0 0a42 	vmov.f32	s0, s4
 8003140:	eef0 0a62 	vmov.f32	s1, s5
 8003144:	eeb0 1a46 	vmov.f32	s2, s12
 8003148:	eef0 1a66 	vmov.f32	s3, s13
 800314c:	eeb0 2a47 	vmov.f32	s4, s14
 8003150:	eef0 2a67 	vmov.f32	s5, s15
 8003154:	f7fe fe5c 	bl	8001e10 <vdiff>
 8003158:	eeb0 5a40 	vmov.f32	s10, s0
 800315c:	eef0 5a60 	vmov.f32	s11, s1
 8003160:	eeb0 6a41 	vmov.f32	s12, s2
 8003164:	eef0 6a61 	vmov.f32	s13, s3
 8003168:	eeb0 7a42 	vmov.f32	s14, s4
 800316c:	eef0 7a62 	vmov.f32	s15, s5
 8003170:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003174:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003178:	ed83 5b00 	vstr	d5, [r3]
 800317c:	ed83 6b02 	vstr	d6, [r3, #8]
 8003180:	ed83 7b04 	vstr	d7, [r3, #16]
 8003184:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003188:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800318c:	ed93 5b00 	vldr	d5, [r3]
 8003190:	ed93 6b02 	vldr	d6, [r3, #8]
 8003194:	ed93 7b04 	vldr	d7, [r3, #16]
 8003198:	eeb0 0a45 	vmov.f32	s0, s10
 800319c:	eef0 0a65 	vmov.f32	s1, s11
 80031a0:	eeb0 1a46 	vmov.f32	s2, s12
 80031a4:	eef0 1a66 	vmov.f32	s3, s13
 80031a8:	eeb0 2a47 	vmov.f32	s4, s14
 80031ac:	eef0 2a67 	vmov.f32	s5, s15
 80031b0:	f7fe ff96 	bl	80020e0 <vnorm>
 80031b4:	ec51 0b10 	vmov	r0, r1, d0
 80031b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80031bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80031c0:	f7fd f892 	bl	80002e8 <__aeabi_dsub>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4690      	mov	r8, r2
 80031ca:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80031ce:	4642      	mov	r2, r8
 80031d0:	464b      	mov	r3, r9
 80031d2:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 80031d6:	f7fd fcc5 	bl	8000b64 <__aeabi_dcmpge>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8094 	beq.w	800330a <trilateration+0x852>
            fabs(vnorm(vdiff(p3, t2)) - r3) <= maxzero)
 80031e2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80031e6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80031ea:	ed93 3b00 	vldr	d3, [r3]
 80031ee:	ed93 4b02 	vldr	d4, [r3, #8]
 80031f2:	ed93 5b04 	vldr	d5, [r3, #16]
 80031f6:	ed97 2baa 	vldr	d2, [r7, #680]	@ 0x2a8
 80031fa:	ed97 6bac 	vldr	d6, [r7, #688]	@ 0x2b0
 80031fe:	ed97 7bae 	vldr	d7, [r7, #696]	@ 0x2b8
 8003202:	eeb0 0a42 	vmov.f32	s0, s4
 8003206:	eef0 0a62 	vmov.f32	s1, s5
 800320a:	eeb0 1a46 	vmov.f32	s2, s12
 800320e:	eef0 1a66 	vmov.f32	s3, s13
 8003212:	eeb0 2a47 	vmov.f32	s4, s14
 8003216:	eef0 2a67 	vmov.f32	s5, s15
 800321a:	f7fe fdf9 	bl	8001e10 <vdiff>
 800321e:	eeb0 5a40 	vmov.f32	s10, s0
 8003222:	eef0 5a60 	vmov.f32	s11, s1
 8003226:	eeb0 6a41 	vmov.f32	s12, s2
 800322a:	eef0 6a61 	vmov.f32	s13, s3
 800322e:	eeb0 7a42 	vmov.f32	s14, s4
 8003232:	eef0 7a62 	vmov.f32	s15, s5
 8003236:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800323a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800323e:	ed83 5b00 	vstr	d5, [r3]
 8003242:	ed83 6b02 	vstr	d6, [r3, #8]
 8003246:	ed83 7b04 	vstr	d7, [r3, #16]
 800324a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800324e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003252:	ed93 5b00 	vldr	d5, [r3]
 8003256:	ed93 6b02 	vldr	d6, [r3, #8]
 800325a:	ed93 7b04 	vldr	d7, [r3, #16]
 800325e:	eeb0 0a45 	vmov.f32	s0, s10
 8003262:	eef0 0a65 	vmov.f32	s1, s11
 8003266:	eeb0 1a46 	vmov.f32	s2, s12
 800326a:	eef0 1a66 	vmov.f32	s3, s13
 800326e:	eeb0 2a47 	vmov.f32	s4, s14
 8003272:	eef0 2a67 	vmov.f32	s5, s15
 8003276:	f7fe ff33 	bl	80020e0 <vnorm>
 800327a:	ec51 0b10 	vmov	r0, r1, d0
 800327e:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8003282:	f7fd f831 	bl	80002e8 <__aeabi_dsub>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	633a      	str	r2, [r7, #48]	@ 0x30
 800328c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003290:	637b      	str	r3, [r7, #52]	@ 0x34
        if (fabs(vnorm(vdiff(p2, t2)) - r2) <= maxzero &&
 8003292:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003296:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 800329a:	f7fd fc63 	bl	8000b64 <__aeabi_dcmpge>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d032      	beq.n	800330a <trilateration+0x852>
        {
            /* Yes, t2 is the only intersection point. */
            if (result1)
 80032a4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80032a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d010      	beq.n	80032d4 <trilateration+0x81c>
                *result1 = t2;
 80032b2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80032b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80032c0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80032c4:	4614      	mov	r4, r2
 80032c6:	461d      	mov	r5, r3
 80032c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80032d0:	e884 0003 	stmia.w	r4, {r0, r1}
            if (result2)
 80032d4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80032d8:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d010      	beq.n	8003304 <trilateration+0x84c>
                *result2 = t2;
 80032e2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80032e6:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80032f0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80032f4:	4614      	mov	r4, r2
 80032f6:	461d      	mov	r5, r3
 80032f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003300:	e884 0003 	stmia.w	r4, {r0, r1}
            return TRIL_3SPHERES;
 8003304:	2303      	movs	r3, #3
 8003306:	f001 be85 	b.w	8005014 <trilateration+0x255c>
        }

        /* Is point p1 - (r1 along the axis) the intersection? */
        t2 = vsum(p1, vmul(ex, -r1));
 800330a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800330e:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8003312:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003314:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8003318:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800331c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800331e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003322:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003326:	ed93 5b00 	vldr	d5, [r3]
 800332a:	ed93 6b02 	vldr	d6, [r3, #8]
 800332e:	ed93 7b04 	vldr	d7, [r3, #16]
 8003332:	ed97 3b0a 	vldr	d3, [r7, #40]	@ 0x28
 8003336:	eeb0 0a45 	vmov.f32	s0, s10
 800333a:	eef0 0a65 	vmov.f32	s1, s11
 800333e:	eeb0 1a46 	vmov.f32	s2, s12
 8003342:	eef0 1a66 	vmov.f32	s3, s13
 8003346:	eeb0 2a47 	vmov.f32	s4, s14
 800334a:	eef0 2a67 	vmov.f32	s5, s15
 800334e:	f7fe fe13 	bl	8001f78 <vmul>
 8003352:	eeb0 5a40 	vmov.f32	s10, s0
 8003356:	eef0 5a60 	vmov.f32	s11, s1
 800335a:	eeb0 6a41 	vmov.f32	s12, s2
 800335e:	eef0 6a61 	vmov.f32	s13, s3
 8003362:	eeb0 7a42 	vmov.f32	s14, s4
 8003366:	eef0 7a62 	vmov.f32	s15, s5
 800336a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800336e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003372:	ed83 5b00 	vstr	d5, [r3]
 8003376:	ed83 6b02 	vstr	d6, [r3, #8]
 800337a:	ed83 7b04 	vstr	d7, [r3, #16]
 800337e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003382:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003386:	ed93 3b00 	vldr	d3, [r3]
 800338a:	ed93 4b02 	vldr	d4, [r3, #8]
 800338e:	ed93 5b04 	vldr	d5, [r3, #16]
 8003392:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003396:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800339a:	ed93 2b00 	vldr	d2, [r3]
 800339e:	ed93 6b02 	vldr	d6, [r3, #8]
 80033a2:	ed93 7b04 	vldr	d7, [r3, #16]
 80033a6:	eeb0 0a42 	vmov.f32	s0, s4
 80033aa:	eef0 0a62 	vmov.f32	s1, s5
 80033ae:	eeb0 1a46 	vmov.f32	s2, s12
 80033b2:	eef0 1a66 	vmov.f32	s3, s13
 80033b6:	eeb0 2a47 	vmov.f32	s4, s14
 80033ba:	eef0 2a67 	vmov.f32	s5, s15
 80033be:	f7fe fd81 	bl	8001ec4 <vsum>
 80033c2:	eeb0 5a40 	vmov.f32	s10, s0
 80033c6:	eef0 5a60 	vmov.f32	s11, s1
 80033ca:	eeb0 6a41 	vmov.f32	s12, s2
 80033ce:	eef0 6a61 	vmov.f32	s13, s3
 80033d2:	eeb0 7a42 	vmov.f32	s14, s4
 80033d6:	eef0 7a62 	vmov.f32	s15, s5
 80033da:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80033de:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80033e2:	ed83 5b00 	vstr	d5, [r3]
 80033e6:	ed83 6b02 	vstr	d6, [r3, #8]
 80033ea:	ed83 7b04 	vstr	d7, [r3, #16]
        if (fabs(vnorm(vdiff(p2, t2)) - r2) <= maxzero &&
 80033ee:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80033f2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80033f6:	ed93 3b00 	vldr	d3, [r3]
 80033fa:	ed93 4b02 	vldr	d4, [r3, #8]
 80033fe:	ed93 5b04 	vldr	d5, [r3, #16]
 8003402:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003406:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800340a:	ed93 2b00 	vldr	d2, [r3]
 800340e:	ed93 6b02 	vldr	d6, [r3, #8]
 8003412:	ed93 7b04 	vldr	d7, [r3, #16]
 8003416:	eeb0 0a42 	vmov.f32	s0, s4
 800341a:	eef0 0a62 	vmov.f32	s1, s5
 800341e:	eeb0 1a46 	vmov.f32	s2, s12
 8003422:	eef0 1a66 	vmov.f32	s3, s13
 8003426:	eeb0 2a47 	vmov.f32	s4, s14
 800342a:	eef0 2a67 	vmov.f32	s5, s15
 800342e:	f7fe fcef 	bl	8001e10 <vdiff>
 8003432:	eeb0 5a40 	vmov.f32	s10, s0
 8003436:	eef0 5a60 	vmov.f32	s11, s1
 800343a:	eeb0 6a41 	vmov.f32	s12, s2
 800343e:	eef0 6a61 	vmov.f32	s13, s3
 8003442:	eeb0 7a42 	vmov.f32	s14, s4
 8003446:	eef0 7a62 	vmov.f32	s15, s5
 800344a:	ed87 5b62 	vstr	d5, [r7, #392]	@ 0x188
 800344e:	ed87 6b64 	vstr	d6, [r7, #400]	@ 0x190
 8003452:	ed87 7b66 	vstr	d7, [r7, #408]	@ 0x198
 8003456:	ed97 5b62 	vldr	d5, [r7, #392]	@ 0x188
 800345a:	ed97 6b64 	vldr	d6, [r7, #400]	@ 0x190
 800345e:	ed97 7b66 	vldr	d7, [r7, #408]	@ 0x198
 8003462:	eeb0 0a45 	vmov.f32	s0, s10
 8003466:	eef0 0a65 	vmov.f32	s1, s11
 800346a:	eeb0 1a46 	vmov.f32	s2, s12
 800346e:	eef0 1a66 	vmov.f32	s3, s13
 8003472:	eeb0 2a47 	vmov.f32	s4, s14
 8003476:	eef0 2a67 	vmov.f32	s5, s15
 800347a:	f7fe fe31 	bl	80020e0 <vnorm>
 800347e:	ec51 0b10 	vmov	r0, r1, d0
 8003482:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003486:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800348a:	f7fc ff2d 	bl	80002e8 <__aeabi_dsub>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	623a      	str	r2, [r7, #32]
 8003494:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24
 800349a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800349e:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 80034a2:	f7fd fb5f 	bl	8000b64 <__aeabi_dcmpge>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 808b 	beq.w	80035c4 <trilateration+0xb0c>
            fabs(vnorm(vdiff(p3, t2)) - r3) <= maxzero)
 80034ae:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80034b2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034b6:	ed93 3b00 	vldr	d3, [r3]
 80034ba:	ed93 4b02 	vldr	d4, [r3, #8]
 80034be:	ed93 5b04 	vldr	d5, [r3, #16]
 80034c2:	ed97 2baa 	vldr	d2, [r7, #680]	@ 0x2a8
 80034c6:	ed97 6bac 	vldr	d6, [r7, #688]	@ 0x2b0
 80034ca:	ed97 7bae 	vldr	d7, [r7, #696]	@ 0x2b8
 80034ce:	eeb0 0a42 	vmov.f32	s0, s4
 80034d2:	eef0 0a62 	vmov.f32	s1, s5
 80034d6:	eeb0 1a46 	vmov.f32	s2, s12
 80034da:	eef0 1a66 	vmov.f32	s3, s13
 80034de:	eeb0 2a47 	vmov.f32	s4, s14
 80034e2:	eef0 2a67 	vmov.f32	s5, s15
 80034e6:	f7fe fc93 	bl	8001e10 <vdiff>
 80034ea:	eeb0 5a40 	vmov.f32	s10, s0
 80034ee:	eef0 5a60 	vmov.f32	s11, s1
 80034f2:	eeb0 6a41 	vmov.f32	s12, s2
 80034f6:	eef0 6a61 	vmov.f32	s13, s3
 80034fa:	eeb0 7a42 	vmov.f32	s14, s4
 80034fe:	eef0 7a62 	vmov.f32	s15, s5
 8003502:	ed87 5b68 	vstr	d5, [r7, #416]	@ 0x1a0
 8003506:	ed87 6b6a 	vstr	d6, [r7, #424]	@ 0x1a8
 800350a:	ed87 7b6c 	vstr	d7, [r7, #432]	@ 0x1b0
 800350e:	ed97 5b68 	vldr	d5, [r7, #416]	@ 0x1a0
 8003512:	ed97 6b6a 	vldr	d6, [r7, #424]	@ 0x1a8
 8003516:	ed97 7b6c 	vldr	d7, [r7, #432]	@ 0x1b0
 800351a:	eeb0 0a45 	vmov.f32	s0, s10
 800351e:	eef0 0a65 	vmov.f32	s1, s11
 8003522:	eeb0 1a46 	vmov.f32	s2, s12
 8003526:	eef0 1a66 	vmov.f32	s3, s13
 800352a:	eeb0 2a47 	vmov.f32	s4, s14
 800352e:	eef0 2a67 	vmov.f32	s5, s15
 8003532:	f7fe fdd5 	bl	80020e0 <vnorm>
 8003536:	ec51 0b10 	vmov	r0, r1, d0
 800353a:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 800353e:	f7fc fed3 	bl	80002e8 <__aeabi_dsub>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4692      	mov	sl, r2
 8003548:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
        if (fabs(vnorm(vdiff(p2, t2)) - r2) <= maxzero &&
 800354c:	4652      	mov	r2, sl
 800354e:	465b      	mov	r3, fp
 8003550:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8003554:	f7fd fb06 	bl	8000b64 <__aeabi_dcmpge>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d032      	beq.n	80035c4 <trilateration+0xb0c>
        {
            /* Yes, t2 is the only intersection point. */
            if (result1)
 800355e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003562:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d010      	beq.n	800358e <trilateration+0xad6>
                *result1 = t2;
 800356c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003570:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800357a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800357e:	4614      	mov	r4, r2
 8003580:	461d      	mov	r5, r3
 8003582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003586:	e895 0003 	ldmia.w	r5, {r0, r1}
 800358a:	e884 0003 	stmia.w	r4, {r0, r1}
            if (result2)
 800358e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003592:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d010      	beq.n	80035be <trilateration+0xb06>
                *result2 = t2;
 800359c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80035a0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80035aa:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80035ae:	4614      	mov	r4, r2
 80035b0:	461d      	mov	r5, r3
 80035b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80035ba:	e884 0003 	stmia.w	r4, {r0, r1}
            return TRIL_3SPHERES;
 80035be:	2303      	movs	r3, #3
 80035c0:	f001 bd28 	b.w	8005014 <trilateration+0x255c>
        }
        /* p1, p2 and p3 are colinear with more than one solution */
        return ERR_TRIL_COLINEAR_2SOLUTIONS;
 80035c4:	f06f 0301 	mvn.w	r3, #1
 80035c8:	f001 bd24 	b.w	8005014 <trilateration+0x255c>
    }

    /* ez = ex x ey */
    ez = cross(ex, ey); // unit vector ez with respect to p1 (new coordinate system)
 80035cc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80035d0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80035d4:	ed93 3b00 	vldr	d3, [r3]
 80035d8:	ed93 4b02 	vldr	d4, [r3, #8]
 80035dc:	ed93 5b04 	vldr	d5, [r3, #16]
 80035e0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80035e4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80035e8:	ed93 2b00 	vldr	d2, [r3]
 80035ec:	ed93 6b02 	vldr	d6, [r3, #8]
 80035f0:	ed93 7b04 	vldr	d7, [r3, #16]
 80035f4:	eeb0 0a42 	vmov.f32	s0, s4
 80035f8:	eef0 0a62 	vmov.f32	s1, s5
 80035fc:	eeb0 1a46 	vmov.f32	s2, s12
 8003600:	eef0 1a66 	vmov.f32	s3, s13
 8003604:	eeb0 2a47 	vmov.f32	s4, s14
 8003608:	eef0 2a67 	vmov.f32	s5, s15
 800360c:	f7fe fe00 	bl	8002210 <cross>
 8003610:	eeb0 5a40 	vmov.f32	s10, s0
 8003614:	eef0 5a60 	vmov.f32	s11, s1
 8003618:	eeb0 6a41 	vmov.f32	s12, s2
 800361c:	eef0 6a61 	vmov.f32	s13, s3
 8003620:	eeb0 7a42 	vmov.f32	s14, s4
 8003624:	eef0 7a62 	vmov.f32	s15, s5
 8003628:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800362c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003630:	ed83 5b00 	vstr	d5, [r3]
 8003634:	ed83 6b02 	vstr	d6, [r3, #8]
 8003638:	ed83 7b04 	vstr	d7, [r3, #16]

    x = (r1*r1 - r2*r2) / (2*h) + h / 2;
 800363c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003640:	4619      	mov	r1, r3
 8003642:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 8003646:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800364a:	f7fd f805 	bl	8000658 <__aeabi_dmul>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4614      	mov	r4, r2
 8003654:	461d      	mov	r5, r3
 8003656:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800365a:	4619      	mov	r1, r3
 800365c:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 8003660:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8003664:	f7fc fff8 	bl	8000658 <__aeabi_dmul>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4620      	mov	r0, r4
 800366e:	4629      	mov	r1, r5
 8003670:	f7fc fe3a 	bl	80002e8 <__aeabi_dsub>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4614      	mov	r4, r2
 800367a:	461d      	mov	r5, r3
 800367c:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	f7fc fe32 	bl	80002ec <__adddf3>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4620      	mov	r0, r4
 800368e:	4629      	mov	r1, r5
 8003690:	f7fd f90c 	bl	80008ac <__aeabi_ddiv>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4614      	mov	r4, r2
 800369a:	461d      	mov	r5, r3
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80036a4:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 80036a8:	f7fd f900 	bl	80008ac <__aeabi_ddiv>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4620      	mov	r0, r4
 80036b2:	4629      	mov	r1, r5
 80036b4:	f7fc fe1a 	bl	80002ec <__adddf3>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
    y = (r1*r1 - r3*r3 + i*i) / (2*j) + j / 2 - x * i / j;
 80036c0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80036c4:	4619      	mov	r1, r3
 80036c6:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 80036ca:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80036ce:	f7fc ffc3 	bl	8000658 <__aeabi_dmul>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4614      	mov	r4, r2
 80036d8:	461d      	mov	r5, r3
 80036da:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 80036de:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 80036e2:	f7fc ffb9 	bl	8000658 <__aeabi_dmul>
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	4620      	mov	r0, r4
 80036ec:	4629      	mov	r1, r5
 80036ee:	f7fc fdfb 	bl	80002e8 <__aeabi_dsub>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4614      	mov	r4, r2
 80036f8:	461d      	mov	r5, r3
 80036fa:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	@ 0x248
 80036fe:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 8003702:	f7fc ffa9 	bl	8000658 <__aeabi_dmul>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4620      	mov	r0, r4
 800370c:	4629      	mov	r1, r5
 800370e:	f7fc fded 	bl	80002ec <__adddf3>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	4614      	mov	r4, r2
 8003718:	461d      	mov	r5, r3
 800371a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	f7fc fde3 	bl	80002ec <__adddf3>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4620      	mov	r0, r4
 800372c:	4629      	mov	r1, r5
 800372e:	f7fd f8bd 	bl	80008ac <__aeabi_ddiv>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4614      	mov	r4, r2
 8003738:	461d      	mov	r5, r3
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003742:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8003746:	f7fd f8b1 	bl	80008ac <__aeabi_ddiv>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4620      	mov	r0, r4
 8003750:	4629      	mov	r1, r5
 8003752:	f7fc fdcb 	bl	80002ec <__adddf3>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4614      	mov	r4, r2
 800375c:	461d      	mov	r5, r3
 800375e:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	@ 0x248
 8003762:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
 8003766:	f7fc ff77 	bl	8000658 <__aeabi_dmul>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4610      	mov	r0, r2
 8003770:	4619      	mov	r1, r3
 8003772:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	@ 0x278
 8003776:	f7fd f899 	bl	80008ac <__aeabi_ddiv>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4620      	mov	r0, r4
 8003780:	4629      	mov	r1, r5
 8003782:	f7fc fdb1 	bl	80002e8 <__aeabi_dsub>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	e9c7 238c 	strd	r2, r3, [r7, #560]	@ 0x230
    z = r1*r1 - x*x - y*y;
 800378e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003792:	4619      	mov	r1, r3
 8003794:	e951 2302 	ldrd	r2, r3, [r1, #-8]
 8003798:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800379c:	f7fc ff5c 	bl	8000658 <__aeabi_dmul>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4614      	mov	r4, r2
 80037a6:	461d      	mov	r5, r3
 80037a8:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 80037ac:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
 80037b0:	f7fc ff52 	bl	8000658 <__aeabi_dmul>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4620      	mov	r0, r4
 80037ba:	4629      	mov	r1, r5
 80037bc:	f7fc fd94 	bl	80002e8 <__aeabi_dsub>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4614      	mov	r4, r2
 80037c6:	461d      	mov	r5, r3
 80037c8:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	@ 0x230
 80037cc:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 80037d0:	f7fc ff42 	bl	8000658 <__aeabi_dmul>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4620      	mov	r0, r4
 80037da:	4629      	mov	r1, r5
 80037dc:	f7fc fd84 	bl	80002e8 <__aeabi_dsub>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270
    if (z < -maxzero-100)
 80037e8:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80037f2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	4b11      	ldr	r3, [pc, #68]	@ (8003844 <trilateration+0xd8c>)
 80037fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003802:	f7fc fd71 	bl	80002e8 <__aeabi_dsub>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 800380e:	f7fd f995 	bl	8000b3c <__aeabi_dcmplt>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <trilateration+0xd68>
    {
        /* The solution is invalid, square root of negative number */
        return ERR_TRIL_SQRTNEGNUMB;
 8003818:	f06f 0302 	mvn.w	r3, #2
 800381c:	f001 bbfa 	b.w	8005014 <trilateration+0x255c>
    }
    else if (z > 0.0)
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 800382c:	f7fd f9a4 	bl	8000b78 <__aeabi_dcmpgt>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <trilateration+0xd90>
        z = sqrt(z);
 8003836:	ed97 0b9c 	vldr	d0, [r7, #624]	@ 0x270
 800383a:	f00c f897 	bl	800f96c <sqrt>
 800383e:	ed87 0b9c 	vstr	d0, [r7, #624]	@ 0x270
 8003842:	e007      	b.n	8003854 <trilateration+0xd9c>
 8003844:	40590000 	.word	0x40590000
    else
        z = 0.0;
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	e9c7 239c 	strd	r2, r3, [r7, #624]	@ 0x270

    /* t2 = p1 + x ex + y ey */
    t2 = vsum(p1, vmul(ex, x));
 8003854:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003858:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800385c:	ed93 5b00 	vldr	d5, [r3]
 8003860:	ed93 6b02 	vldr	d6, [r3, #8]
 8003864:	ed93 7b04 	vldr	d7, [r3, #16]
 8003868:	ed97 3b8e 	vldr	d3, [r7, #568]	@ 0x238
 800386c:	eeb0 0a45 	vmov.f32	s0, s10
 8003870:	eef0 0a65 	vmov.f32	s1, s11
 8003874:	eeb0 1a46 	vmov.f32	s2, s12
 8003878:	eef0 1a66 	vmov.f32	s3, s13
 800387c:	eeb0 2a47 	vmov.f32	s4, s14
 8003880:	eef0 2a67 	vmov.f32	s5, s15
 8003884:	f7fe fb78 	bl	8001f78 <vmul>
 8003888:	eeb0 5a40 	vmov.f32	s10, s0
 800388c:	eef0 5a60 	vmov.f32	s11, s1
 8003890:	eeb0 6a41 	vmov.f32	s12, s2
 8003894:	eef0 6a61 	vmov.f32	s13, s3
 8003898:	eeb0 7a42 	vmov.f32	s14, s4
 800389c:	eef0 7a62 	vmov.f32	s15, s5
 80038a0:	ed87 5b6e 	vstr	d5, [r7, #440]	@ 0x1b8
 80038a4:	ed87 6b70 	vstr	d6, [r7, #448]	@ 0x1c0
 80038a8:	ed87 7b72 	vstr	d7, [r7, #456]	@ 0x1c8
 80038ac:	ed97 3b6e 	vldr	d3, [r7, #440]	@ 0x1b8
 80038b0:	ed97 4b70 	vldr	d4, [r7, #448]	@ 0x1c0
 80038b4:	ed97 5b72 	vldr	d5, [r7, #456]	@ 0x1c8
 80038b8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80038bc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80038c0:	ed93 2b00 	vldr	d2, [r3]
 80038c4:	ed93 6b02 	vldr	d6, [r3, #8]
 80038c8:	ed93 7b04 	vldr	d7, [r3, #16]
 80038cc:	eeb0 0a42 	vmov.f32	s0, s4
 80038d0:	eef0 0a62 	vmov.f32	s1, s5
 80038d4:	eeb0 1a46 	vmov.f32	s2, s12
 80038d8:	eef0 1a66 	vmov.f32	s3, s13
 80038dc:	eeb0 2a47 	vmov.f32	s4, s14
 80038e0:	eef0 2a67 	vmov.f32	s5, s15
 80038e4:	f7fe faee 	bl	8001ec4 <vsum>
 80038e8:	eeb0 5a40 	vmov.f32	s10, s0
 80038ec:	eef0 5a60 	vmov.f32	s11, s1
 80038f0:	eeb0 6a41 	vmov.f32	s12, s2
 80038f4:	eef0 6a61 	vmov.f32	s13, s3
 80038f8:	eeb0 7a42 	vmov.f32	s14, s4
 80038fc:	eef0 7a62 	vmov.f32	s15, s5
 8003900:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003904:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003908:	ed83 5b00 	vstr	d5, [r3]
 800390c:	ed83 6b02 	vstr	d6, [r3, #8]
 8003910:	ed83 7b04 	vstr	d7, [r3, #16]
    t2 = vsum(t2, vmul(ey, y));
 8003914:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003918:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800391c:	ed93 5b00 	vldr	d5, [r3]
 8003920:	ed93 6b02 	vldr	d6, [r3, #8]
 8003924:	ed93 7b04 	vldr	d7, [r3, #16]
 8003928:	ed97 3b8c 	vldr	d3, [r7, #560]	@ 0x230
 800392c:	eeb0 0a45 	vmov.f32	s0, s10
 8003930:	eef0 0a65 	vmov.f32	s1, s11
 8003934:	eeb0 1a46 	vmov.f32	s2, s12
 8003938:	eef0 1a66 	vmov.f32	s3, s13
 800393c:	eeb0 2a47 	vmov.f32	s4, s14
 8003940:	eef0 2a67 	vmov.f32	s5, s15
 8003944:	f7fe fb18 	bl	8001f78 <vmul>
 8003948:	eeb0 5a40 	vmov.f32	s10, s0
 800394c:	eef0 5a60 	vmov.f32	s11, s1
 8003950:	eeb0 6a41 	vmov.f32	s12, s2
 8003954:	eef0 6a61 	vmov.f32	s13, s3
 8003958:	eeb0 7a42 	vmov.f32	s14, s4
 800395c:	eef0 7a62 	vmov.f32	s15, s5
 8003960:	ed87 5b74 	vstr	d5, [r7, #464]	@ 0x1d0
 8003964:	ed87 6b76 	vstr	d6, [r7, #472]	@ 0x1d8
 8003968:	ed87 7b78 	vstr	d7, [r7, #480]	@ 0x1e0
 800396c:	ed97 3b74 	vldr	d3, [r7, #464]	@ 0x1d0
 8003970:	ed97 4b76 	vldr	d4, [r7, #472]	@ 0x1d8
 8003974:	ed97 5b78 	vldr	d5, [r7, #480]	@ 0x1e0
 8003978:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800397c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003980:	ed93 2b00 	vldr	d2, [r3]
 8003984:	ed93 6b02 	vldr	d6, [r3, #8]
 8003988:	ed93 7b04 	vldr	d7, [r3, #16]
 800398c:	eeb0 0a42 	vmov.f32	s0, s4
 8003990:	eef0 0a62 	vmov.f32	s1, s5
 8003994:	eeb0 1a46 	vmov.f32	s2, s12
 8003998:	eef0 1a66 	vmov.f32	s3, s13
 800399c:	eeb0 2a47 	vmov.f32	s4, s14
 80039a0:	eef0 2a67 	vmov.f32	s5, s15
 80039a4:	f7fe fa8e 	bl	8001ec4 <vsum>
 80039a8:	eeb0 5a40 	vmov.f32	s10, s0
 80039ac:	eef0 5a60 	vmov.f32	s11, s1
 80039b0:	eeb0 6a41 	vmov.f32	s12, s2
 80039b4:	eef0 6a61 	vmov.f32	s13, s3
 80039b8:	eeb0 7a42 	vmov.f32	s14, s4
 80039bc:	eef0 7a62 	vmov.f32	s15, s5
 80039c0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80039c4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80039c8:	ed83 5b00 	vstr	d5, [r3]
 80039cc:	ed83 6b02 	vstr	d6, [r3, #8]
 80039d0:	ed83 7b04 	vstr	d7, [r3, #16]

    /* result1 = p1 + x ex + y ey + z ez */
    if (result1)
 80039d4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80039d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d060      	beq.n	8003aa4 <trilateration+0xfec>
        *result1 = vsum(t2, vmul(ez, z));
 80039e2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80039e6:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80039ea:	ed93 5b00 	vldr	d5, [r3]
 80039ee:	ed93 6b02 	vldr	d6, [r3, #8]
 80039f2:	ed93 7b04 	vldr	d7, [r3, #16]
 80039f6:	ed97 3b9c 	vldr	d3, [r7, #624]	@ 0x270
 80039fa:	eeb0 0a45 	vmov.f32	s0, s10
 80039fe:	eef0 0a65 	vmov.f32	s1, s11
 8003a02:	eeb0 1a46 	vmov.f32	s2, s12
 8003a06:	eef0 1a66 	vmov.f32	s3, s13
 8003a0a:	eeb0 2a47 	vmov.f32	s4, s14
 8003a0e:	eef0 2a67 	vmov.f32	s5, s15
 8003a12:	f7fe fab1 	bl	8001f78 <vmul>
 8003a16:	eeb0 5a40 	vmov.f32	s10, s0
 8003a1a:	eef0 5a60 	vmov.f32	s11, s1
 8003a1e:	eeb0 6a41 	vmov.f32	s12, s2
 8003a22:	eef0 6a61 	vmov.f32	s13, s3
 8003a26:	eeb0 7a42 	vmov.f32	s14, s4
 8003a2a:	eef0 7a62 	vmov.f32	s15, s5
 8003a2e:	ed87 5b7a 	vstr	d5, [r7, #488]	@ 0x1e8
 8003a32:	ed87 6b7c 	vstr	d6, [r7, #496]	@ 0x1f0
 8003a36:	ed87 7b7e 	vstr	d7, [r7, #504]	@ 0x1f8
 8003a3a:	ed97 3b7a 	vldr	d3, [r7, #488]	@ 0x1e8
 8003a3e:	ed97 4b7c 	vldr	d4, [r7, #496]	@ 0x1f0
 8003a42:	ed97 5b7e 	vldr	d5, [r7, #504]	@ 0x1f8
 8003a46:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003a4a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003a4e:	ed93 2b00 	vldr	d2, [r3]
 8003a52:	ed93 6b02 	vldr	d6, [r3, #8]
 8003a56:	ed93 7b04 	vldr	d7, [r3, #16]
 8003a5a:	eeb0 0a42 	vmov.f32	s0, s4
 8003a5e:	eef0 0a62 	vmov.f32	s1, s5
 8003a62:	eeb0 1a46 	vmov.f32	s2, s12
 8003a66:	eef0 1a66 	vmov.f32	s3, s13
 8003a6a:	eeb0 2a47 	vmov.f32	s4, s14
 8003a6e:	eef0 2a67 	vmov.f32	s5, s15
 8003a72:	f7fe fa27 	bl	8001ec4 <vsum>
 8003a76:	eeb0 5a40 	vmov.f32	s10, s0
 8003a7a:	eef0 5a60 	vmov.f32	s11, s1
 8003a7e:	eeb0 6a41 	vmov.f32	s12, s2
 8003a82:	eef0 6a61 	vmov.f32	s13, s3
 8003a86:	eeb0 7a42 	vmov.f32	s14, s4
 8003a8a:	eef0 7a62 	vmov.f32	s15, s5
 8003a8e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003a92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	ed83 5b00 	vstr	d5, [r3]
 8003a9c:	ed83 6b02 	vstr	d6, [r3, #8]
 8003aa0:	ed83 7b04 	vstr	d7, [r3, #16]

    /* result1 = p1 + x ex + y ey - z ez */
    if (result2)
 8003aa4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003aa8:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d068      	beq.n	8003b84 <trilateration+0x10cc>
        *result2 = vsum(t2, vmul(ez, -z));
 8003ab2:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8003abc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003ac6:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003aca:	ed93 5b00 	vldr	d5, [r3]
 8003ace:	ed93 6b02 	vldr	d6, [r3, #8]
 8003ad2:	ed93 7b04 	vldr	d7, [r3, #16]
 8003ad6:	ed97 3b04 	vldr	d3, [r7, #16]
 8003ada:	eeb0 0a45 	vmov.f32	s0, s10
 8003ade:	eef0 0a65 	vmov.f32	s1, s11
 8003ae2:	eeb0 1a46 	vmov.f32	s2, s12
 8003ae6:	eef0 1a66 	vmov.f32	s3, s13
 8003aea:	eeb0 2a47 	vmov.f32	s4, s14
 8003aee:	eef0 2a67 	vmov.f32	s5, s15
 8003af2:	f7fe fa41 	bl	8001f78 <vmul>
 8003af6:	eeb0 5a40 	vmov.f32	s10, s0
 8003afa:	eef0 5a60 	vmov.f32	s11, s1
 8003afe:	eeb0 6a41 	vmov.f32	s12, s2
 8003b02:	eef0 6a61 	vmov.f32	s13, s3
 8003b06:	eeb0 7a42 	vmov.f32	s14, s4
 8003b0a:	eef0 7a62 	vmov.f32	s15, s5
 8003b0e:	ed87 5b80 	vstr	d5, [r7, #512]	@ 0x200
 8003b12:	ed87 6b82 	vstr	d6, [r7, #520]	@ 0x208
 8003b16:	ed87 7b84 	vstr	d7, [r7, #528]	@ 0x210
 8003b1a:	ed97 3b80 	vldr	d3, [r7, #512]	@ 0x200
 8003b1e:	ed97 4b82 	vldr	d4, [r7, #520]	@ 0x208
 8003b22:	ed97 5b84 	vldr	d5, [r7, #528]	@ 0x210
 8003b26:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003b2a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003b2e:	ed93 2b00 	vldr	d2, [r3]
 8003b32:	ed93 6b02 	vldr	d6, [r3, #8]
 8003b36:	ed93 7b04 	vldr	d7, [r3, #16]
 8003b3a:	eeb0 0a42 	vmov.f32	s0, s4
 8003b3e:	eef0 0a62 	vmov.f32	s1, s5
 8003b42:	eeb0 1a46 	vmov.f32	s2, s12
 8003b46:	eef0 1a66 	vmov.f32	s3, s13
 8003b4a:	eeb0 2a47 	vmov.f32	s4, s14
 8003b4e:	eef0 2a67 	vmov.f32	s5, s15
 8003b52:	f7fe f9b7 	bl	8001ec4 <vsum>
 8003b56:	eeb0 5a40 	vmov.f32	s10, s0
 8003b5a:	eef0 5a60 	vmov.f32	s11, s1
 8003b5e:	eeb0 6a41 	vmov.f32	s12, s2
 8003b62:	eef0 6a61 	vmov.f32	s13, s3
 8003b66:	eeb0 7a42 	vmov.f32	s14, s4
 8003b6a:	eef0 7a62 	vmov.f32	s15, s5
 8003b6e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003b72:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	ed83 5b00 	vstr	d5, [r3]
 8003b7c:	ed83 6b02 	vstr	d6, [r3, #8]
 8003b80:	ed83 7b04 	vstr	d7, [r3, #16]
    // check for concentricness of sphere 4 to sphere 1, 2 and 3
    // if it is concentric to one of them, then sphere 4 cannot be used
    // to determine the best solution and return -1

    /* h = |p4 - p1|, ex = (p4 - p1) / |p4 - p1| */
    ex = vdiff(p4, p1); // vector p14
 8003b84:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003b88:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8003b8c:	ed93 3b00 	vldr	d3, [r3]
 8003b90:	ed93 4b02 	vldr	d4, [r3, #8]
 8003b94:	ed93 5b04 	vldr	d5, [r3, #16]
 8003b98:	ed97 2bb2 	vldr	d2, [r7, #712]	@ 0x2c8
 8003b9c:	ed97 6bb4 	vldr	d6, [r7, #720]	@ 0x2d0
 8003ba0:	ed97 7bb6 	vldr	d7, [r7, #728]	@ 0x2d8
 8003ba4:	eeb0 0a42 	vmov.f32	s0, s4
 8003ba8:	eef0 0a62 	vmov.f32	s1, s5
 8003bac:	eeb0 1a46 	vmov.f32	s2, s12
 8003bb0:	eef0 1a66 	vmov.f32	s3, s13
 8003bb4:	eeb0 2a47 	vmov.f32	s4, s14
 8003bb8:	eef0 2a67 	vmov.f32	s5, s15
 8003bbc:	f7fe f928 	bl	8001e10 <vdiff>
 8003bc0:	eeb0 5a40 	vmov.f32	s10, s0
 8003bc4:	eef0 5a60 	vmov.f32	s11, s1
 8003bc8:	eeb0 6a41 	vmov.f32	s12, s2
 8003bcc:	eef0 6a61 	vmov.f32	s13, s3
 8003bd0:	eeb0 7a42 	vmov.f32	s14, s4
 8003bd4:	eef0 7a62 	vmov.f32	s15, s5
 8003bd8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003bdc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003be0:	ed83 5b00 	vstr	d5, [r3]
 8003be4:	ed83 6b02 	vstr	d6, [r3, #8]
 8003be8:	ed83 7b04 	vstr	d7, [r3, #16]
    h = vnorm(ex); // scalar p14
 8003bec:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003bf0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003bf4:	ed93 5b00 	vldr	d5, [r3]
 8003bf8:	ed93 6b02 	vldr	d6, [r3, #8]
 8003bfc:	ed93 7b04 	vldr	d7, [r3, #16]
 8003c00:	eeb0 0a45 	vmov.f32	s0, s10
 8003c04:	eef0 0a65 	vmov.f32	s1, s11
 8003c08:	eeb0 1a46 	vmov.f32	s2, s12
 8003c0c:	eef0 1a66 	vmov.f32	s3, s13
 8003c10:	eeb0 2a47 	vmov.f32	s4, s14
 8003c14:	eef0 2a67 	vmov.f32	s5, s15
 8003c18:	f7fe fa62 	bl	80020e0 <vnorm>
 8003c1c:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
    if (h <= maxzero)
 8003c20:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 8003c24:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 8003c28:	f7fc ff92 	bl	8000b50 <__aeabi_dcmple>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <trilateration+0x1180>
    {
        /* p1 and p4 are concentric, not good to obtain a precise intersection point */
        //printf("concentric14 return 0\n");
        return TRIL_3SPHERES;
 8003c32:	2303      	movs	r3, #3
 8003c34:	f001 b9ee 	b.w	8005014 <trilateration+0x255c>
    }
    /* h = |p4 - p2|, ex = (p4 - p2) / |p4 - p2| */
    ex = vdiff(p4, p2); // vector p24
 8003c38:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003c3c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8003c40:	ed93 3b00 	vldr	d3, [r3]
 8003c44:	ed93 4b02 	vldr	d4, [r3, #8]
 8003c48:	ed93 5b04 	vldr	d5, [r3, #16]
 8003c4c:	ed97 2bb2 	vldr	d2, [r7, #712]	@ 0x2c8
 8003c50:	ed97 6bb4 	vldr	d6, [r7, #720]	@ 0x2d0
 8003c54:	ed97 7bb6 	vldr	d7, [r7, #728]	@ 0x2d8
 8003c58:	eeb0 0a42 	vmov.f32	s0, s4
 8003c5c:	eef0 0a62 	vmov.f32	s1, s5
 8003c60:	eeb0 1a46 	vmov.f32	s2, s12
 8003c64:	eef0 1a66 	vmov.f32	s3, s13
 8003c68:	eeb0 2a47 	vmov.f32	s4, s14
 8003c6c:	eef0 2a67 	vmov.f32	s5, s15
 8003c70:	f7fe f8ce 	bl	8001e10 <vdiff>
 8003c74:	eeb0 5a40 	vmov.f32	s10, s0
 8003c78:	eef0 5a60 	vmov.f32	s11, s1
 8003c7c:	eeb0 6a41 	vmov.f32	s12, s2
 8003c80:	eef0 6a61 	vmov.f32	s13, s3
 8003c84:	eeb0 7a42 	vmov.f32	s14, s4
 8003c88:	eef0 7a62 	vmov.f32	s15, s5
 8003c8c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003c90:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c94:	ed83 5b00 	vstr	d5, [r3]
 8003c98:	ed83 6b02 	vstr	d6, [r3, #8]
 8003c9c:	ed83 7b04 	vstr	d7, [r3, #16]
    h = vnorm(ex); // scalar p24
 8003ca0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003ca4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003ca8:	ed93 5b00 	vldr	d5, [r3]
 8003cac:	ed93 6b02 	vldr	d6, [r3, #8]
 8003cb0:	ed93 7b04 	vldr	d7, [r3, #16]
 8003cb4:	eeb0 0a45 	vmov.f32	s0, s10
 8003cb8:	eef0 0a65 	vmov.f32	s1, s11
 8003cbc:	eeb0 1a46 	vmov.f32	s2, s12
 8003cc0:	eef0 1a66 	vmov.f32	s3, s13
 8003cc4:	eeb0 2a47 	vmov.f32	s4, s14
 8003cc8:	eef0 2a67 	vmov.f32	s5, s15
 8003ccc:	f7fe fa08 	bl	80020e0 <vnorm>
 8003cd0:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
    if (h <= maxzero)
 8003cd4:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 8003cd8:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 8003cdc:	f7fc ff38 	bl	8000b50 <__aeabi_dcmple>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <trilateration+0x1234>
    {
        /* p2 and p4 are concentric, not good to obtain a precise intersection point */
        //printf("concentric24 return 0\n");
        return TRIL_3SPHERES;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	f001 b994 	b.w	8005014 <trilateration+0x255c>
    }
    /* h = |p4 - p3|, ex = (p4 - p3) / |p4 - p3| */
    ex = vdiff(p4, p3); // vector p34
 8003cec:	ed97 3baa 	vldr	d3, [r7, #680]	@ 0x2a8
 8003cf0:	ed97 4bac 	vldr	d4, [r7, #688]	@ 0x2b0
 8003cf4:	ed97 5bae 	vldr	d5, [r7, #696]	@ 0x2b8
 8003cf8:	ed97 2bb2 	vldr	d2, [r7, #712]	@ 0x2c8
 8003cfc:	ed97 6bb4 	vldr	d6, [r7, #720]	@ 0x2d0
 8003d00:	ed97 7bb6 	vldr	d7, [r7, #728]	@ 0x2d8
 8003d04:	eeb0 0a42 	vmov.f32	s0, s4
 8003d08:	eef0 0a62 	vmov.f32	s1, s5
 8003d0c:	eeb0 1a46 	vmov.f32	s2, s12
 8003d10:	eef0 1a66 	vmov.f32	s3, s13
 8003d14:	eeb0 2a47 	vmov.f32	s4, s14
 8003d18:	eef0 2a67 	vmov.f32	s5, s15
 8003d1c:	f7fe f878 	bl	8001e10 <vdiff>
 8003d20:	eeb0 5a40 	vmov.f32	s10, s0
 8003d24:	eef0 5a60 	vmov.f32	s11, s1
 8003d28:	eeb0 6a41 	vmov.f32	s12, s2
 8003d2c:	eef0 6a61 	vmov.f32	s13, s3
 8003d30:	eeb0 7a42 	vmov.f32	s14, s4
 8003d34:	eef0 7a62 	vmov.f32	s15, s5
 8003d38:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003d3c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003d40:	ed83 5b00 	vstr	d5, [r3]
 8003d44:	ed83 6b02 	vstr	d6, [r3, #8]
 8003d48:	ed83 7b04 	vstr	d7, [r3, #16]
    h = vnorm(ex); // scalar p34
 8003d4c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003d50:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003d54:	ed93 5b00 	vldr	d5, [r3]
 8003d58:	ed93 6b02 	vldr	d6, [r3, #8]
 8003d5c:	ed93 7b04 	vldr	d7, [r3, #16]
 8003d60:	eeb0 0a45 	vmov.f32	s0, s10
 8003d64:	eef0 0a65 	vmov.f32	s1, s11
 8003d68:	eeb0 1a46 	vmov.f32	s2, s12
 8003d6c:	eef0 1a66 	vmov.f32	s3, s13
 8003d70:	eeb0 2a47 	vmov.f32	s4, s14
 8003d74:	eef0 2a67 	vmov.f32	s5, s15
 8003d78:	f7fe f9b2 	bl	80020e0 <vnorm>
 8003d7c:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
    if (h <= maxzero)
 8003d80:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 8003d84:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 8003d88:	f7fc fee2 	bl	8000b50 <__aeabi_dcmple>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <trilateration+0x12e0>
    {
        /* p3 and p4 are concentric, not good to obtain a precise intersection point */
        //printf("concentric34 return 0\n");
        return TRIL_3SPHERES;
 8003d92:	2303      	movs	r3, #3
 8003d94:	f001 b93e 	b.w	8005014 <trilateration+0x255c>
    }

    // if sphere 4 is not concentric to any sphere, then best solution can be obtained
    /* find i as the distance of result1 to p4 */
    t3 = vdiff(*result1, p4);
 8003d98:	ed97 3bb2 	vldr	d3, [r7, #712]	@ 0x2c8
 8003d9c:	ed97 4bb4 	vldr	d4, [r7, #720]	@ 0x2d0
 8003da0:	ed97 5bb6 	vldr	d5, [r7, #728]	@ 0x2d8
 8003da4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003da8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	ed93 2b00 	vldr	d2, [r3]
 8003db2:	ed93 6b02 	vldr	d6, [r3, #8]
 8003db6:	ed93 7b04 	vldr	d7, [r3, #16]
 8003dba:	eeb0 0a42 	vmov.f32	s0, s4
 8003dbe:	eef0 0a62 	vmov.f32	s1, s5
 8003dc2:	eeb0 1a46 	vmov.f32	s2, s12
 8003dc6:	eef0 1a66 	vmov.f32	s3, s13
 8003dca:	eeb0 2a47 	vmov.f32	s4, s14
 8003dce:	eef0 2a67 	vmov.f32	s5, s15
 8003dd2:	f7fe f81d 	bl	8001e10 <vdiff>
 8003dd6:	eeb0 5a40 	vmov.f32	s10, s0
 8003dda:	eef0 5a60 	vmov.f32	s11, s1
 8003dde:	eeb0 6a41 	vmov.f32	s12, s2
 8003de2:	eef0 6a61 	vmov.f32	s13, s3
 8003de6:	eeb0 7a42 	vmov.f32	s14, s4
 8003dea:	eef0 7a62 	vmov.f32	s15, s5
 8003dee:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003df2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003df6:	ed83 5b00 	vstr	d5, [r3]
 8003dfa:	ed83 6b02 	vstr	d6, [r3, #8]
 8003dfe:	ed83 7b04 	vstr	d7, [r3, #16]
    i = vnorm(t3);
 8003e02:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003e06:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003e0a:	ed93 5b00 	vldr	d5, [r3]
 8003e0e:	ed93 6b02 	vldr	d6, [r3, #8]
 8003e12:	ed93 7b04 	vldr	d7, [r3, #16]
 8003e16:	eeb0 0a45 	vmov.f32	s0, s10
 8003e1a:	eef0 0a65 	vmov.f32	s1, s11
 8003e1e:	eeb0 1a46 	vmov.f32	s2, s12
 8003e22:	eef0 1a66 	vmov.f32	s3, s13
 8003e26:	eeb0 2a47 	vmov.f32	s4, s14
 8003e2a:	eef0 2a67 	vmov.f32	s5, s15
 8003e2e:	f7fe f957 	bl	80020e0 <vnorm>
 8003e32:	ed87 0b92 	vstr	d0, [r7, #584]	@ 0x248
    /* find h as the distance of result2 to p4 */
    t3 = vdiff(*result2, p4);
 8003e36:	ed97 3bb2 	vldr	d3, [r7, #712]	@ 0x2c8
 8003e3a:	ed97 4bb4 	vldr	d4, [r7, #720]	@ 0x2d0
 8003e3e:	ed97 5bb6 	vldr	d5, [r7, #728]	@ 0x2d8
 8003e42:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003e46:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	ed93 2b00 	vldr	d2, [r3]
 8003e50:	ed93 6b02 	vldr	d6, [r3, #8]
 8003e54:	ed93 7b04 	vldr	d7, [r3, #16]
 8003e58:	eeb0 0a42 	vmov.f32	s0, s4
 8003e5c:	eef0 0a62 	vmov.f32	s1, s5
 8003e60:	eeb0 1a46 	vmov.f32	s2, s12
 8003e64:	eef0 1a66 	vmov.f32	s3, s13
 8003e68:	eeb0 2a47 	vmov.f32	s4, s14
 8003e6c:	eef0 2a67 	vmov.f32	s5, s15
 8003e70:	f7fd ffce 	bl	8001e10 <vdiff>
 8003e74:	eeb0 5a40 	vmov.f32	s10, s0
 8003e78:	eef0 5a60 	vmov.f32	s11, s1
 8003e7c:	eeb0 6a41 	vmov.f32	s12, s2
 8003e80:	eef0 6a61 	vmov.f32	s13, s3
 8003e84:	eeb0 7a42 	vmov.f32	s14, s4
 8003e88:	eef0 7a62 	vmov.f32	s15, s5
 8003e8c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003e90:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003e94:	ed83 5b00 	vstr	d5, [r3]
 8003e98:	ed83 6b02 	vstr	d6, [r3, #8]
 8003e9c:	ed83 7b04 	vstr	d7, [r3, #16]
    h = vnorm(t3);
 8003ea0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003ea4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003ea8:	ed93 5b00 	vldr	d5, [r3]
 8003eac:	ed93 6b02 	vldr	d6, [r3, #8]
 8003eb0:	ed93 7b04 	vldr	d7, [r3, #16]
 8003eb4:	eeb0 0a45 	vmov.f32	s0, s10
 8003eb8:	eef0 0a65 	vmov.f32	s1, s11
 8003ebc:	eeb0 1a46 	vmov.f32	s2, s12
 8003ec0:	eef0 1a66 	vmov.f32	s3, s13
 8003ec4:	eeb0 2a47 	vmov.f32	s4, s14
 8003ec8:	eef0 2a67 	vmov.f32	s5, s15
 8003ecc:	f7fe f908 	bl	80020e0 <vnorm>
 8003ed0:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250

    /* pick the result1 as the nearest point to the center of sphere 4 */
    if (i > h)
 8003ed4:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 8003ed8:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 8003edc:	f7fc fe4c 	bl	8000b78 <__aeabi_dcmpgt>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d035      	beq.n	8003f52 <trilateration+0x149a>
    {
        *best_solution = *result1;
 8003ee6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003eea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003ef4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4614      	mov	r4, r2
 8003efc:	461d      	mov	r5, r3
 8003efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003f06:	e884 0003 	stmia.w	r4, {r0, r1}
        *result1 = *result2;
 8003f0a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003f0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003f18:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4614      	mov	r4, r2
 8003f20:	461d      	mov	r5, r3
 8003f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f26:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003f2a:	e884 0003 	stmia.w	r4, {r0, r1}
        *result2 = *best_solution;
 8003f2e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003f32:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003f3c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4614      	mov	r4, r2
 8003f44:	461d      	mov	r5, r3
 8003f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003f4e:	e884 0003 	stmia.w	r4, {r0, r1}
    }

    int count4 = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
    double rr4 = r4;
 8003f58:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 8003f5c:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
    result = 1;
 8003f60:	2301      	movs	r3, #1
 8003f62:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
    /* intersect result1-result2 vector with sphere 4 */
    while(result && count4 < 10)
 8003f66:	e048      	b.n	8003ffa <trilateration+0x1542>
    {
        result=sphereline(*result1, *result2, p4, rr4, &mu1, &mu2);
 8003f68:	f107 0c88 	add.w	ip, r7, #136	@ 0x88
 8003f6c:	f107 0690 	add.w	r6, r7, #144	@ 0x90
 8003f70:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003f74:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	ed93 3b00 	vldr	d3, [r3]
 8003f7e:	ed93 4b02 	vldr	d4, [r3, #8]
 8003f82:	ed93 5b04 	vldr	d5, [r3, #16]
 8003f86:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8003f8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	ed93 2b00 	vldr	d2, [r3]
 8003f94:	ed93 6b02 	vldr	d6, [r3, #8]
 8003f98:	ed93 7b04 	vldr	d7, [r3, #16]
 8003f9c:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 8003fa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003fa4:	466d      	mov	r5, sp
 8003fa6:	f507 7432 	add.w	r4, r7, #712	@ 0x2c8
 8003faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fb6:	4661      	mov	r1, ip
 8003fb8:	4630      	mov	r0, r6
 8003fba:	eeb0 0a42 	vmov.f32	s0, s4
 8003fbe:	eef0 0a62 	vmov.f32	s1, s5
 8003fc2:	eeb0 1a46 	vmov.f32	s2, s12
 8003fc6:	eef0 1a66 	vmov.f32	s3, s13
 8003fca:	eeb0 2a47 	vmov.f32	s4, s14
 8003fce:	eef0 2a67 	vmov.f32	s5, s15
 8003fd2:	f7fe fb8f 	bl	80026f4 <sphereline>
 8003fd6:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
        rr4+=0.1;
 8003fda:	a3eb      	add	r3, pc, #940	@ (adr r3, 8004388 <trilateration+0x18d0>)
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 8003fe4:	f7fc f982 	bl	80002ec <__adddf3>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
        count4++;
 8003ff0:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
    while(result && count4 < 10)
 8003ffa:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <trilateration+0x1552>
 8004002:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8004006:	2b09      	cmp	r3, #9
 8004008:	ddae      	ble.n	8003f68 <trilateration+0x14b0>
    }

    if (result)
 800400a:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800400e:	2b00      	cmp	r3, #0
 8004010:	d013      	beq.n	800403a <trilateration+0x1582>
    {

        /* No intersection between sphere 4 and the line with the gradient of result1-result2! */
        *best_solution = *result1; // result1 is the closer solution to sphere 4
 8004012:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004016:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004020:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4614      	mov	r4, r2
 8004028:	461d      	mov	r5, r3
 800402a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800402c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800402e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004032:	e884 0003 	stmia.w	r4, {r0, r1}
 8004036:	f000 bfec 	b.w	8005012 <trilateration+0x255a>

    }
    else
    {

        if (mu1 < 0 && mu2 < 0)
 800403a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800403e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	f7fc fd77 	bl	8000b3c <__aeabi_dcmplt>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 814b 	beq.w	80042ec <trilateration+0x1834>
 8004056:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800405a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	f7fc fd69 	bl	8000b3c <__aeabi_dcmplt>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 813d 	beq.w	80042ec <trilateration+0x1834>
        {

            /* if both mu1 and mu2 are less than 0 */
            /* result1-result2 line segment is outside sphere 4 with no intersection */
            if (fabs(mu1) <= fabs(mu2)) mu = mu1;
 8004072:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407a:	60ba      	str	r2, [r7, #8]
 800407c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004086:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800408a:	603a      	str	r2, [r7, #0]
 800408c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004096:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800409a:	f7fc fd59 	bl	8000b50 <__aeabi_dcmple>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d006      	beq.n	80040b2 <trilateration+0x15fa>
 80040a4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
 80040b0:	e005      	b.n	80040be <trilateration+0x1606>
            else mu = mu2;
 80040b2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80040b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80040ba:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* h = |result2 - result1|, ex = (result2 - result1) / |result2 - result1| */
            ex = vdiff(*result2, *result1); // vector result1-result2
 80040be:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80040c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	ed93 3b00 	vldr	d3, [r3]
 80040cc:	ed93 4b02 	vldr	d4, [r3, #8]
 80040d0:	ed93 5b04 	vldr	d5, [r3, #16]
 80040d4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80040d8:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	ed93 2b00 	vldr	d2, [r3]
 80040e2:	ed93 6b02 	vldr	d6, [r3, #8]
 80040e6:	ed93 7b04 	vldr	d7, [r3, #16]
 80040ea:	eeb0 0a42 	vmov.f32	s0, s4
 80040ee:	eef0 0a62 	vmov.f32	s1, s5
 80040f2:	eeb0 1a46 	vmov.f32	s2, s12
 80040f6:	eef0 1a66 	vmov.f32	s3, s13
 80040fa:	eeb0 2a47 	vmov.f32	s4, s14
 80040fe:	eef0 2a67 	vmov.f32	s5, s15
 8004102:	f7fd fe85 	bl	8001e10 <vdiff>
 8004106:	eeb0 5a40 	vmov.f32	s10, s0
 800410a:	eef0 5a60 	vmov.f32	s11, s1
 800410e:	eeb0 6a41 	vmov.f32	s12, s2
 8004112:	eef0 6a61 	vmov.f32	s13, s3
 8004116:	eeb0 7a42 	vmov.f32	s14, s4
 800411a:	eef0 7a62 	vmov.f32	s15, s5
 800411e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004122:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004126:	ed83 5b00 	vstr	d5, [r3]
 800412a:	ed83 6b02 	vstr	d6, [r3, #8]
 800412e:	ed83 7b04 	vstr	d7, [r3, #16]
            h = vnorm(ex); // scalar result1-result2
 8004132:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004136:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800413a:	ed93 5b00 	vldr	d5, [r3]
 800413e:	ed93 6b02 	vldr	d6, [r3, #8]
 8004142:	ed93 7b04 	vldr	d7, [r3, #16]
 8004146:	eeb0 0a45 	vmov.f32	s0, s10
 800414a:	eef0 0a65 	vmov.f32	s1, s11
 800414e:	eeb0 1a46 	vmov.f32	s2, s12
 8004152:	eef0 1a66 	vmov.f32	s3, s13
 8004156:	eeb0 2a47 	vmov.f32	s4, s14
 800415a:	eef0 2a67 	vmov.f32	s5, s15
 800415e:	f7fd ffbf 	bl	80020e0 <vnorm>
 8004162:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
            ex = vdiv(ex, h); // unit vector ex with respect to result1 (new coordinate system)
 8004166:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800416a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800416e:	ed93 5b00 	vldr	d5, [r3]
 8004172:	ed93 6b02 	vldr	d6, [r3, #8]
 8004176:	ed93 7b04 	vldr	d7, [r3, #16]
 800417a:	ed97 3b94 	vldr	d3, [r7, #592]	@ 0x250
 800417e:	eeb0 0a45 	vmov.f32	s0, s10
 8004182:	eef0 0a65 	vmov.f32	s1, s11
 8004186:	eeb0 1a46 	vmov.f32	s2, s12
 800418a:	eef0 1a66 	vmov.f32	s3, s13
 800418e:	eeb0 2a47 	vmov.f32	s4, s14
 8004192:	eef0 2a67 	vmov.f32	s5, s15
 8004196:	f7fd ff49 	bl	800202c <vdiv>
 800419a:	eeb0 5a40 	vmov.f32	s10, s0
 800419e:	eef0 5a60 	vmov.f32	s11, s1
 80041a2:	eeb0 6a41 	vmov.f32	s12, s2
 80041a6:	eef0 6a61 	vmov.f32	s13, s3
 80041aa:	eeb0 7a42 	vmov.f32	s14, s4
 80041ae:	eef0 7a62 	vmov.f32	s15, s5
 80041b2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80041b6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80041ba:	ed83 5b00 	vstr	d5, [r3]
 80041be:	ed83 6b02 	vstr	d6, [r3, #8]
 80041c2:	ed83 7b04 	vstr	d7, [r3, #16]
            /* 50-50 error correction for mu */
            mu = 0.5*mu;
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004380 <trilateration+0x18c8>)
 80041cc:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 80041d0:	f7fc fa42 	bl	8000658 <__aeabi_dmul>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* t2 points to the intersection */
            t2 = vmul(ex, mu*h);
 80041dc:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 80041e0:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 80041e4:	f7fc fa38 	bl	8000658 <__aeabi_dmul>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	ec43 2b14 	vmov	d4, r2, r3
 80041f0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80041f4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80041f8:	ed93 5b00 	vldr	d5, [r3]
 80041fc:	ed93 6b02 	vldr	d6, [r3, #8]
 8004200:	ed93 7b04 	vldr	d7, [r3, #16]
 8004204:	eeb0 3a44 	vmov.f32	s6, s8
 8004208:	eef0 3a64 	vmov.f32	s7, s9
 800420c:	eeb0 0a45 	vmov.f32	s0, s10
 8004210:	eef0 0a65 	vmov.f32	s1, s11
 8004214:	eeb0 1a46 	vmov.f32	s2, s12
 8004218:	eef0 1a66 	vmov.f32	s3, s13
 800421c:	eeb0 2a47 	vmov.f32	s4, s14
 8004220:	eef0 2a67 	vmov.f32	s5, s15
 8004224:	f7fd fea8 	bl	8001f78 <vmul>
 8004228:	eeb0 5a40 	vmov.f32	s10, s0
 800422c:	eef0 5a60 	vmov.f32	s11, s1
 8004230:	eeb0 6a41 	vmov.f32	s12, s2
 8004234:	eef0 6a61 	vmov.f32	s13, s3
 8004238:	eeb0 7a42 	vmov.f32	s14, s4
 800423c:	eef0 7a62 	vmov.f32	s15, s5
 8004240:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004244:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004248:	ed83 5b00 	vstr	d5, [r3]
 800424c:	ed83 6b02 	vstr	d6, [r3, #8]
 8004250:	ed83 7b04 	vstr	d7, [r3, #16]
            t2 = vsum(*result1, t2);
 8004254:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004258:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800425c:	ed93 3b00 	vldr	d3, [r3]
 8004260:	ed93 4b02 	vldr	d4, [r3, #8]
 8004264:	ed93 5b04 	vldr	d5, [r3, #16]
 8004268:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800426c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	ed93 2b00 	vldr	d2, [r3]
 8004276:	ed93 6b02 	vldr	d6, [r3, #8]
 800427a:	ed93 7b04 	vldr	d7, [r3, #16]
 800427e:	eeb0 0a42 	vmov.f32	s0, s4
 8004282:	eef0 0a62 	vmov.f32	s1, s5
 8004286:	eeb0 1a46 	vmov.f32	s2, s12
 800428a:	eef0 1a66 	vmov.f32	s3, s13
 800428e:	eeb0 2a47 	vmov.f32	s4, s14
 8004292:	eef0 2a67 	vmov.f32	s5, s15
 8004296:	f7fd fe15 	bl	8001ec4 <vsum>
 800429a:	eeb0 5a40 	vmov.f32	s10, s0
 800429e:	eef0 5a60 	vmov.f32	s11, s1
 80042a2:	eeb0 6a41 	vmov.f32	s12, s2
 80042a6:	eef0 6a61 	vmov.f32	s13, s3
 80042aa:	eeb0 7a42 	vmov.f32	s14, s4
 80042ae:	eef0 7a62 	vmov.f32	s15, s5
 80042b2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80042b6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80042ba:	ed83 5b00 	vstr	d5, [r3]
 80042be:	ed83 6b02 	vstr	d6, [r3, #8]
 80042c2:	ed83 7b04 	vstr	d7, [r3, #16]
            /* the best solution = t2 */
            *best_solution = t2;
 80042c6:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80042ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80042d4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80042d8:	4614      	mov	r4, r2
 80042da:	461d      	mov	r5, r3
 80042dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80042e4:	e884 0003 	stmia.w	r4, {r0, r1}
 80042e8:	f000 be93 	b.w	8005012 <trilateration+0x255a>

        }
        else if ((mu1 < 0 && mu2 > 1) || (mu2 < 0 && mu1 > 1))
 80042ec:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80042f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	f7fc fc1e 	bl	8000b3c <__aeabi_dcmplt>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <trilateration+0x1866>
 8004306:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800430a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	4b1c      	ldr	r3, [pc, #112]	@ (8004384 <trilateration+0x18cc>)
 8004314:	f7fc fc30 	bl	8000b78 <__aeabi_dcmpgt>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d11a      	bne.n	8004354 <trilateration+0x189c>
 800431e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004322:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	f7fc fc05 	bl	8000b3c <__aeabi_dcmplt>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 81ca 	beq.w	80046ce <trilateration+0x1c16>
 800433a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800433e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	4b0f      	ldr	r3, [pc, #60]	@ (8004384 <trilateration+0x18cc>)
 8004348:	f7fc fc16 	bl	8000b78 <__aeabi_dcmpgt>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 81bd 	beq.w	80046ce <trilateration+0x1c16>
        {

            /* if mu1 is less than zero and mu2 is greater than 1, or the other way around */
            /* result1-result2 line segment is inside sphere 4 with no intersection */
            if (mu1 > mu2) mu = mu1;
 8004354:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004358:	e9d3 0100 	ldrd	r0, r1, [r3]
 800435c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004360:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004364:	f7fc fc08 	bl	8000b78 <__aeabi_dcmpgt>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d014      	beq.n	8004398 <trilateration+0x18e0>
 800436e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
 800437a:	e013      	b.n	80043a4 <trilateration+0x18ec>
 800437c:	f3af 8000 	nop.w
 8004380:	3fe00000 	.word	0x3fe00000
 8004384:	3ff00000 	.word	0x3ff00000
 8004388:	9999999a 	.word	0x9999999a
 800438c:	3fb99999 	.word	0x3fb99999
 8004390:	00000000 	.word	0x00000000
 8004394:	3fe00000 	.word	0x3fe00000
            else mu = mu2;
 8004398:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800439c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80043a0:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* h = |result2 - result1|, ex = (result2 - result1) / |result2 - result1| */
            ex = vdiff(*result2, *result1); // vector result1-result2
 80043a4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80043a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	ed93 3b00 	vldr	d3, [r3]
 80043b2:	ed93 4b02 	vldr	d4, [r3, #8]
 80043b6:	ed93 5b04 	vldr	d5, [r3, #16]
 80043ba:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80043be:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	ed93 2b00 	vldr	d2, [r3]
 80043c8:	ed93 6b02 	vldr	d6, [r3, #8]
 80043cc:	ed93 7b04 	vldr	d7, [r3, #16]
 80043d0:	eeb0 0a42 	vmov.f32	s0, s4
 80043d4:	eef0 0a62 	vmov.f32	s1, s5
 80043d8:	eeb0 1a46 	vmov.f32	s2, s12
 80043dc:	eef0 1a66 	vmov.f32	s3, s13
 80043e0:	eeb0 2a47 	vmov.f32	s4, s14
 80043e4:	eef0 2a67 	vmov.f32	s5, s15
 80043e8:	f7fd fd12 	bl	8001e10 <vdiff>
 80043ec:	eeb0 5a40 	vmov.f32	s10, s0
 80043f0:	eef0 5a60 	vmov.f32	s11, s1
 80043f4:	eeb0 6a41 	vmov.f32	s12, s2
 80043f8:	eef0 6a61 	vmov.f32	s13, s3
 80043fc:	eeb0 7a42 	vmov.f32	s14, s4
 8004400:	eef0 7a62 	vmov.f32	s15, s5
 8004404:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004408:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800440c:	ed83 5b00 	vstr	d5, [r3]
 8004410:	ed83 6b02 	vstr	d6, [r3, #8]
 8004414:	ed83 7b04 	vstr	d7, [r3, #16]
            h = vnorm(ex); // scalar result1-result2
 8004418:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800441c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004420:	ed93 5b00 	vldr	d5, [r3]
 8004424:	ed93 6b02 	vldr	d6, [r3, #8]
 8004428:	ed93 7b04 	vldr	d7, [r3, #16]
 800442c:	eeb0 0a45 	vmov.f32	s0, s10
 8004430:	eef0 0a65 	vmov.f32	s1, s11
 8004434:	eeb0 1a46 	vmov.f32	s2, s12
 8004438:	eef0 1a66 	vmov.f32	s3, s13
 800443c:	eeb0 2a47 	vmov.f32	s4, s14
 8004440:	eef0 2a67 	vmov.f32	s5, s15
 8004444:	f7fd fe4c 	bl	80020e0 <vnorm>
 8004448:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
            ex = vdiv(ex, h); // unit vector ex with respect to result1 (new coordinate system)
 800444c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004450:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004454:	ed93 5b00 	vldr	d5, [r3]
 8004458:	ed93 6b02 	vldr	d6, [r3, #8]
 800445c:	ed93 7b04 	vldr	d7, [r3, #16]
 8004460:	ed97 3b94 	vldr	d3, [r7, #592]	@ 0x250
 8004464:	eeb0 0a45 	vmov.f32	s0, s10
 8004468:	eef0 0a65 	vmov.f32	s1, s11
 800446c:	eeb0 1a46 	vmov.f32	s2, s12
 8004470:	eef0 1a66 	vmov.f32	s3, s13
 8004474:	eeb0 2a47 	vmov.f32	s4, s14
 8004478:	eef0 2a67 	vmov.f32	s5, s15
 800447c:	f7fd fdd6 	bl	800202c <vdiv>
 8004480:	eeb0 5a40 	vmov.f32	s10, s0
 8004484:	eef0 5a60 	vmov.f32	s11, s1
 8004488:	eeb0 6a41 	vmov.f32	s12, s2
 800448c:	eef0 6a61 	vmov.f32	s13, s3
 8004490:	eeb0 7a42 	vmov.f32	s14, s4
 8004494:	eef0 7a62 	vmov.f32	s15, s5
 8004498:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800449c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80044a0:	ed83 5b00 	vstr	d5, [r3]
 80044a4:	ed83 6b02 	vstr	d6, [r3, #8]
 80044a8:	ed83 7b04 	vstr	d7, [r3, #16]
            /* t2 points to the intersection */
            t2 = vmul(ex, mu*h);
 80044ac:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 80044b0:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 80044b4:	f7fc f8d0 	bl	8000658 <__aeabi_dmul>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	ec43 2b14 	vmov	d4, r2, r3
 80044c0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80044c4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80044c8:	ed93 5b00 	vldr	d5, [r3]
 80044cc:	ed93 6b02 	vldr	d6, [r3, #8]
 80044d0:	ed93 7b04 	vldr	d7, [r3, #16]
 80044d4:	eeb0 3a44 	vmov.f32	s6, s8
 80044d8:	eef0 3a64 	vmov.f32	s7, s9
 80044dc:	eeb0 0a45 	vmov.f32	s0, s10
 80044e0:	eef0 0a65 	vmov.f32	s1, s11
 80044e4:	eeb0 1a46 	vmov.f32	s2, s12
 80044e8:	eef0 1a66 	vmov.f32	s3, s13
 80044ec:	eeb0 2a47 	vmov.f32	s4, s14
 80044f0:	eef0 2a67 	vmov.f32	s5, s15
 80044f4:	f7fd fd40 	bl	8001f78 <vmul>
 80044f8:	eeb0 5a40 	vmov.f32	s10, s0
 80044fc:	eef0 5a60 	vmov.f32	s11, s1
 8004500:	eeb0 6a41 	vmov.f32	s12, s2
 8004504:	eef0 6a61 	vmov.f32	s13, s3
 8004508:	eeb0 7a42 	vmov.f32	s14, s4
 800450c:	eef0 7a62 	vmov.f32	s15, s5
 8004510:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004514:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004518:	ed83 5b00 	vstr	d5, [r3]
 800451c:	ed83 6b02 	vstr	d6, [r3, #8]
 8004520:	ed83 7b04 	vstr	d7, [r3, #16]
            t2 = vsum(*result1, t2);
 8004524:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004528:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800452c:	ed93 3b00 	vldr	d3, [r3]
 8004530:	ed93 4b02 	vldr	d4, [r3, #8]
 8004534:	ed93 5b04 	vldr	d5, [r3, #16]
 8004538:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800453c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	ed93 2b00 	vldr	d2, [r3]
 8004546:	ed93 6b02 	vldr	d6, [r3, #8]
 800454a:	ed93 7b04 	vldr	d7, [r3, #16]
 800454e:	eeb0 0a42 	vmov.f32	s0, s4
 8004552:	eef0 0a62 	vmov.f32	s1, s5
 8004556:	eeb0 1a46 	vmov.f32	s2, s12
 800455a:	eef0 1a66 	vmov.f32	s3, s13
 800455e:	eeb0 2a47 	vmov.f32	s4, s14
 8004562:	eef0 2a67 	vmov.f32	s5, s15
 8004566:	f7fd fcad 	bl	8001ec4 <vsum>
 800456a:	eeb0 5a40 	vmov.f32	s10, s0
 800456e:	eef0 5a60 	vmov.f32	s11, s1
 8004572:	eeb0 6a41 	vmov.f32	s12, s2
 8004576:	eef0 6a61 	vmov.f32	s13, s3
 800457a:	eeb0 7a42 	vmov.f32	s14, s4
 800457e:	eef0 7a62 	vmov.f32	s15, s5
 8004582:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004586:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800458a:	ed83 5b00 	vstr	d5, [r3]
 800458e:	ed83 6b02 	vstr	d6, [r3, #8]
 8004592:	ed83 7b04 	vstr	d7, [r3, #16]
            /* vector t2-result2 with 50-50 error correction on the length of t3 */
            t3 = vmul(vdiff(*result2, t2),0.5);
 8004596:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800459a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800459e:	ed93 3b00 	vldr	d3, [r3]
 80045a2:	ed93 4b02 	vldr	d4, [r3, #8]
 80045a6:	ed93 5b04 	vldr	d5, [r3, #16]
 80045aa:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80045ae:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	ed93 2b00 	vldr	d2, [r3]
 80045b8:	ed93 6b02 	vldr	d6, [r3, #8]
 80045bc:	ed93 7b04 	vldr	d7, [r3, #16]
 80045c0:	eeb0 0a42 	vmov.f32	s0, s4
 80045c4:	eef0 0a62 	vmov.f32	s1, s5
 80045c8:	eeb0 1a46 	vmov.f32	s2, s12
 80045cc:	eef0 1a66 	vmov.f32	s3, s13
 80045d0:	eeb0 2a47 	vmov.f32	s4, s14
 80045d4:	eef0 2a67 	vmov.f32	s5, s15
 80045d8:	f7fd fc1a 	bl	8001e10 <vdiff>
 80045dc:	eeb0 5a40 	vmov.f32	s10, s0
 80045e0:	eef0 5a60 	vmov.f32	s11, s1
 80045e4:	eeb0 6a41 	vmov.f32	s12, s2
 80045e8:	eef0 6a61 	vmov.f32	s13, s3
 80045ec:	eeb0 7a42 	vmov.f32	s14, s4
 80045f0:	eef0 7a62 	vmov.f32	s15, s5
 80045f4:	ed87 5b86 	vstr	d5, [r7, #536]	@ 0x218
 80045f8:	ed87 6b88 	vstr	d6, [r7, #544]	@ 0x220
 80045fc:	ed87 7b8a 	vstr	d7, [r7, #552]	@ 0x228
 8004600:	ed97 5b86 	vldr	d5, [r7, #536]	@ 0x218
 8004604:	ed97 6b88 	vldr	d6, [r7, #544]	@ 0x220
 8004608:	ed97 7b8a 	vldr	d7, [r7, #552]	@ 0x228
 800460c:	ed1f 3ba0 	vldr	d3, [pc, #-640]	@ 8004390 <trilateration+0x18d8>
 8004610:	eeb0 0a45 	vmov.f32	s0, s10
 8004614:	eef0 0a65 	vmov.f32	s1, s11
 8004618:	eeb0 1a46 	vmov.f32	s2, s12
 800461c:	eef0 1a66 	vmov.f32	s3, s13
 8004620:	eeb0 2a47 	vmov.f32	s4, s14
 8004624:	eef0 2a67 	vmov.f32	s5, s15
 8004628:	f7fd fca6 	bl	8001f78 <vmul>
 800462c:	eeb0 5a40 	vmov.f32	s10, s0
 8004630:	eef0 5a60 	vmov.f32	s11, s1
 8004634:	eeb0 6a41 	vmov.f32	s12, s2
 8004638:	eef0 6a61 	vmov.f32	s13, s3
 800463c:	eeb0 7a42 	vmov.f32	s14, s4
 8004640:	eef0 7a62 	vmov.f32	s15, s5
 8004644:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004648:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800464c:	ed83 5b00 	vstr	d5, [r3]
 8004650:	ed83 6b02 	vstr	d6, [r3, #8]
 8004654:	ed83 7b04 	vstr	d7, [r3, #16]
            /* the best solution = t2 + t3 */
            *best_solution = vsum(t2, t3);
 8004658:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800465c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004660:	ed93 3b00 	vldr	d3, [r3]
 8004664:	ed93 4b02 	vldr	d4, [r3, #8]
 8004668:	ed93 5b04 	vldr	d5, [r3, #16]
 800466c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004670:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004674:	ed93 2b00 	vldr	d2, [r3]
 8004678:	ed93 6b02 	vldr	d6, [r3, #8]
 800467c:	ed93 7b04 	vldr	d7, [r3, #16]
 8004680:	eeb0 0a42 	vmov.f32	s0, s4
 8004684:	eef0 0a62 	vmov.f32	s1, s5
 8004688:	eeb0 1a46 	vmov.f32	s2, s12
 800468c:	eef0 1a66 	vmov.f32	s3, s13
 8004690:	eeb0 2a47 	vmov.f32	s4, s14
 8004694:	eef0 2a67 	vmov.f32	s5, s15
 8004698:	f7fd fc14 	bl	8001ec4 <vsum>
 800469c:	eeb0 5a40 	vmov.f32	s10, s0
 80046a0:	eef0 5a60 	vmov.f32	s11, s1
 80046a4:	eeb0 6a41 	vmov.f32	s12, s2
 80046a8:	eef0 6a61 	vmov.f32	s13, s3
 80046ac:	eeb0 7a42 	vmov.f32	s14, s4
 80046b0:	eef0 7a62 	vmov.f32	s15, s5
 80046b4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80046b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	ed83 5b00 	vstr	d5, [r3]
 80046c2:	ed83 6b02 	vstr	d6, [r3, #8]
 80046c6:	ed83 7b04 	vstr	d7, [r3, #16]
 80046ca:	f000 bca2 	b.w	8005012 <trilateration+0x255a>

        }
        else if (((mu1 > 0 && mu1 < 1) && (mu2 < 0 || mu2 > 1))
 80046ce:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80046d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	f7fc fa4b 	bl	8000b78 <__aeabi_dcmpgt>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d024      	beq.n	8004732 <trilateration+0x1c7a>
 80046e8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80046ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	4b4a      	ldr	r3, [pc, #296]	@ (8004820 <trilateration+0x1d68>)
 80046f6:	f7fc fa21 	bl	8000b3c <__aeabi_dcmplt>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d018      	beq.n	8004732 <trilateration+0x1c7a>
 8004700:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004704:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	f7fc fa14 	bl	8000b3c <__aeabi_dcmplt>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d140      	bne.n	800479c <trilateration+0x1ce4>
 800471a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800471e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	4b3e      	ldr	r3, [pc, #248]	@ (8004820 <trilateration+0x1d68>)
 8004728:	f7fc fa26 	bl	8000b78 <__aeabi_dcmpgt>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d134      	bne.n	800479c <trilateration+0x1ce4>
                 || ((mu2 > 0 && mu2 < 1) && (mu1 < 0 || mu1 > 1)))
 8004732:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004736:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	f7fc fa19 	bl	8000b78 <__aeabi_dcmpgt>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 8192 	beq.w	8004a72 <trilateration+0x1fba>
 800474e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004752:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	4b31      	ldr	r3, [pc, #196]	@ (8004820 <trilateration+0x1d68>)
 800475c:	f7fc f9ee 	bl	8000b3c <__aeabi_dcmplt>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8185 	beq.w	8004a72 <trilateration+0x1fba>
 8004768:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800476c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	f7fc f9e0 	bl	8000b3c <__aeabi_dcmplt>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <trilateration+0x1ce4>
 8004782:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004786:	e9d3 0100 	ldrd	r0, r1, [r3]
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	4b24      	ldr	r3, [pc, #144]	@ (8004820 <trilateration+0x1d68>)
 8004790:	f7fc f9f2 	bl	8000b78 <__aeabi_dcmpgt>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 816b 	beq.w	8004a72 <trilateration+0x1fba>
        {

            /* if one mu is between 0 to 1 and the other is not */
            /* result1-result2 line segment intersects sphere 4 at one point */
            if (mu1 >= 0 && mu1 <= 1) mu = mu1;
 800479c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80047a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	f7fc f9da 	bl	8000b64 <__aeabi_dcmpge>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d012      	beq.n	80047dc <trilateration+0x1d24>
 80047b6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80047ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	4b17      	ldr	r3, [pc, #92]	@ (8004820 <trilateration+0x1d68>)
 80047c4:	f7fc f9c4 	bl	8000b50 <__aeabi_dcmple>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d006      	beq.n	80047dc <trilateration+0x1d24>
 80047ce:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
 80047da:	e005      	b.n	80047e8 <trilateration+0x1d30>
            else mu = mu2;
 80047dc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80047e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80047e4:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* add or subtract with 0.5*mu to distribute error equally onto every sphere */
            if (mu <= 0.5) mu-=0.5*mu;
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004824 <trilateration+0x1d6c>)
 80047ee:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 80047f2:	f7fc f9ad 	bl	8000b50 <__aeabi_dcmple>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d015      	beq.n	8004828 <trilateration+0x1d70>
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	4b08      	ldr	r3, [pc, #32]	@ (8004824 <trilateration+0x1d6c>)
 8004802:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8004806:	f7fb ff27 	bl	8000658 <__aeabi_dmul>
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8004812:	f7fb fd69 	bl	80002e8 <__aeabi_dsub>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
 800481e:	e01d      	b.n	800485c <trilateration+0x1da4>
 8004820:	3ff00000 	.word	0x3ff00000
 8004824:	3fe00000 	.word	0x3fe00000
            else mu-=0.5*(1-mu);
 8004828:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 800482c:	f04f 0000 	mov.w	r0, #0
 8004830:	49cd      	ldr	r1, [pc, #820]	@ (8004b68 <trilateration+0x20b0>)
 8004832:	f7fb fd59 	bl	80002e8 <__aeabi_dsub>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4610      	mov	r0, r2
 800483c:	4619      	mov	r1, r3
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	4bca      	ldr	r3, [pc, #808]	@ (8004b6c <trilateration+0x20b4>)
 8004844:	f7fb ff08 	bl	8000658 <__aeabi_dmul>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8004850:	f7fb fd4a 	bl	80002e8 <__aeabi_dsub>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* h = |result2 - result1|, ex = (result2 - result1) / |result2 - result1| */
            ex = vdiff(*result2, *result1); // vector result1-result2
 800485c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004860:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	ed93 3b00 	vldr	d3, [r3]
 800486a:	ed93 4b02 	vldr	d4, [r3, #8]
 800486e:	ed93 5b04 	vldr	d5, [r3, #16]
 8004872:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004876:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	ed93 2b00 	vldr	d2, [r3]
 8004880:	ed93 6b02 	vldr	d6, [r3, #8]
 8004884:	ed93 7b04 	vldr	d7, [r3, #16]
 8004888:	eeb0 0a42 	vmov.f32	s0, s4
 800488c:	eef0 0a62 	vmov.f32	s1, s5
 8004890:	eeb0 1a46 	vmov.f32	s2, s12
 8004894:	eef0 1a66 	vmov.f32	s3, s13
 8004898:	eeb0 2a47 	vmov.f32	s4, s14
 800489c:	eef0 2a67 	vmov.f32	s5, s15
 80048a0:	f7fd fab6 	bl	8001e10 <vdiff>
 80048a4:	eeb0 5a40 	vmov.f32	s10, s0
 80048a8:	eef0 5a60 	vmov.f32	s11, s1
 80048ac:	eeb0 6a41 	vmov.f32	s12, s2
 80048b0:	eef0 6a61 	vmov.f32	s13, s3
 80048b4:	eeb0 7a42 	vmov.f32	s14, s4
 80048b8:	eef0 7a62 	vmov.f32	s15, s5
 80048bc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80048c0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80048c4:	ed83 5b00 	vstr	d5, [r3]
 80048c8:	ed83 6b02 	vstr	d6, [r3, #8]
 80048cc:	ed83 7b04 	vstr	d7, [r3, #16]
            h = vnorm(ex); // scalar result1-result2
 80048d0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80048d4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80048d8:	ed93 5b00 	vldr	d5, [r3]
 80048dc:	ed93 6b02 	vldr	d6, [r3, #8]
 80048e0:	ed93 7b04 	vldr	d7, [r3, #16]
 80048e4:	eeb0 0a45 	vmov.f32	s0, s10
 80048e8:	eef0 0a65 	vmov.f32	s1, s11
 80048ec:	eeb0 1a46 	vmov.f32	s2, s12
 80048f0:	eef0 1a66 	vmov.f32	s3, s13
 80048f4:	eeb0 2a47 	vmov.f32	s4, s14
 80048f8:	eef0 2a67 	vmov.f32	s5, s15
 80048fc:	f7fd fbf0 	bl	80020e0 <vnorm>
 8004900:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
            ex = vdiv(ex, h); // unit vector ex with respect to result1 (new coordinate system)
 8004904:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004908:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800490c:	ed93 5b00 	vldr	d5, [r3]
 8004910:	ed93 6b02 	vldr	d6, [r3, #8]
 8004914:	ed93 7b04 	vldr	d7, [r3, #16]
 8004918:	ed97 3b94 	vldr	d3, [r7, #592]	@ 0x250
 800491c:	eeb0 0a45 	vmov.f32	s0, s10
 8004920:	eef0 0a65 	vmov.f32	s1, s11
 8004924:	eeb0 1a46 	vmov.f32	s2, s12
 8004928:	eef0 1a66 	vmov.f32	s3, s13
 800492c:	eeb0 2a47 	vmov.f32	s4, s14
 8004930:	eef0 2a67 	vmov.f32	s5, s15
 8004934:	f7fd fb7a 	bl	800202c <vdiv>
 8004938:	eeb0 5a40 	vmov.f32	s10, s0
 800493c:	eef0 5a60 	vmov.f32	s11, s1
 8004940:	eeb0 6a41 	vmov.f32	s12, s2
 8004944:	eef0 6a61 	vmov.f32	s13, s3
 8004948:	eeb0 7a42 	vmov.f32	s14, s4
 800494c:	eef0 7a62 	vmov.f32	s15, s5
 8004950:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004954:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004958:	ed83 5b00 	vstr	d5, [r3]
 800495c:	ed83 6b02 	vstr	d6, [r3, #8]
 8004960:	ed83 7b04 	vstr	d7, [r3, #16]
            /* t2 points to the intersection */
            t2 = vmul(ex, mu*h);
 8004964:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 8004968:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 800496c:	f7fb fe74 	bl	8000658 <__aeabi_dmul>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	ec43 2b14 	vmov	d4, r2, r3
 8004978:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800497c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004980:	ed93 5b00 	vldr	d5, [r3]
 8004984:	ed93 6b02 	vldr	d6, [r3, #8]
 8004988:	ed93 7b04 	vldr	d7, [r3, #16]
 800498c:	eeb0 3a44 	vmov.f32	s6, s8
 8004990:	eef0 3a64 	vmov.f32	s7, s9
 8004994:	eeb0 0a45 	vmov.f32	s0, s10
 8004998:	eef0 0a65 	vmov.f32	s1, s11
 800499c:	eeb0 1a46 	vmov.f32	s2, s12
 80049a0:	eef0 1a66 	vmov.f32	s3, s13
 80049a4:	eeb0 2a47 	vmov.f32	s4, s14
 80049a8:	eef0 2a67 	vmov.f32	s5, s15
 80049ac:	f7fd fae4 	bl	8001f78 <vmul>
 80049b0:	eeb0 5a40 	vmov.f32	s10, s0
 80049b4:	eef0 5a60 	vmov.f32	s11, s1
 80049b8:	eeb0 6a41 	vmov.f32	s12, s2
 80049bc:	eef0 6a61 	vmov.f32	s13, s3
 80049c0:	eeb0 7a42 	vmov.f32	s14, s4
 80049c4:	eef0 7a62 	vmov.f32	s15, s5
 80049c8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80049cc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80049d0:	ed83 5b00 	vstr	d5, [r3]
 80049d4:	ed83 6b02 	vstr	d6, [r3, #8]
 80049d8:	ed83 7b04 	vstr	d7, [r3, #16]
            t2 = vsum(*result1, t2);
 80049dc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80049e0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80049e4:	ed93 3b00 	vldr	d3, [r3]
 80049e8:	ed93 4b02 	vldr	d4, [r3, #8]
 80049ec:	ed93 5b04 	vldr	d5, [r3, #16]
 80049f0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80049f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	ed93 2b00 	vldr	d2, [r3]
 80049fe:	ed93 6b02 	vldr	d6, [r3, #8]
 8004a02:	ed93 7b04 	vldr	d7, [r3, #16]
 8004a06:	eeb0 0a42 	vmov.f32	s0, s4
 8004a0a:	eef0 0a62 	vmov.f32	s1, s5
 8004a0e:	eeb0 1a46 	vmov.f32	s2, s12
 8004a12:	eef0 1a66 	vmov.f32	s3, s13
 8004a16:	eeb0 2a47 	vmov.f32	s4, s14
 8004a1a:	eef0 2a67 	vmov.f32	s5, s15
 8004a1e:	f7fd fa51 	bl	8001ec4 <vsum>
 8004a22:	eeb0 5a40 	vmov.f32	s10, s0
 8004a26:	eef0 5a60 	vmov.f32	s11, s1
 8004a2a:	eeb0 6a41 	vmov.f32	s12, s2
 8004a2e:	eef0 6a61 	vmov.f32	s13, s3
 8004a32:	eeb0 7a42 	vmov.f32	s14, s4
 8004a36:	eef0 7a62 	vmov.f32	s15, s5
 8004a3a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004a3e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004a42:	ed83 5b00 	vstr	d5, [r3]
 8004a46:	ed83 6b02 	vstr	d6, [r3, #8]
 8004a4a:	ed83 7b04 	vstr	d7, [r3, #16]
            /* the best solution = t2 */
            *best_solution = t2;
 8004a4e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004a52:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004a5c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004a60:	4614      	mov	r4, r2
 8004a62:	461d      	mov	r5, r3
 8004a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004a6c:	e884 0003 	stmia.w	r4, {r0, r1}
 8004a70:	e2cf      	b.n	8005012 <trilateration+0x255a>

        }
        else if (mu1 == mu2)
 8004a72:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004a76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a7a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004a7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a82:	f7fc f851 	bl	8000b28 <__aeabi_dcmpeq>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 819f 	beq.w	8004dcc <trilateration+0x2314>
        {

            /* if both mu1 and mu2 are between 0 and 1, and mu1 = mu2 */
            /* result1-result2 line segment is tangential to sphere 4 at one point */
            mu = mu1;
 8004a8e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a96:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* add or subtract with 0.5*mu to distribute error equally onto every sphere */
            if (mu <= 0.25) mu-=0.5*mu;
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	4b34      	ldr	r3, [pc, #208]	@ (8004b70 <trilateration+0x20b8>)
 8004aa0:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8004aa4:	f7fc f854 	bl	8000b50 <__aeabi_dcmple>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d011      	beq.n	8004ad2 <trilateration+0x201a>
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8004b6c <trilateration+0x20b4>)
 8004ab4:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8004ab8:	f7fb fdce 	bl	8000658 <__aeabi_dmul>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8004ac4:	f7fb fc10 	bl	80002e8 <__aeabi_dsub>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
 8004ad0:	e06c      	b.n	8004bac <trilateration+0x20f4>
            else if (mu <=0.5) mu-=0.5*(0.5-mu);
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	4b25      	ldr	r3, [pc, #148]	@ (8004b6c <trilateration+0x20b4>)
 8004ad8:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8004adc:	f7fc f838 	bl	8000b50 <__aeabi_dcmple>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d01a      	beq.n	8004b1c <trilateration+0x2064>
 8004ae6:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 8004aea:	f04f 0000 	mov.w	r0, #0
 8004aee:	491f      	ldr	r1, [pc, #124]	@ (8004b6c <trilateration+0x20b4>)
 8004af0:	f7fb fbfa 	bl	80002e8 <__aeabi_dsub>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4610      	mov	r0, r2
 8004afa:	4619      	mov	r1, r3
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	4b1a      	ldr	r3, [pc, #104]	@ (8004b6c <trilateration+0x20b4>)
 8004b02:	f7fb fda9 	bl	8000658 <__aeabi_dmul>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8004b0e:	f7fb fbeb 	bl	80002e8 <__aeabi_dsub>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
 8004b1a:	e047      	b.n	8004bac <trilateration+0x20f4>
            else if (mu <=0.75) mu-=0.5*(mu-0.5);
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	4b14      	ldr	r3, [pc, #80]	@ (8004b74 <trilateration+0x20bc>)
 8004b22:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8004b26:	f7fc f813 	bl	8000b50 <__aeabi_dcmple>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d023      	beq.n	8004b78 <trilateration+0x20c0>
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	4b0d      	ldr	r3, [pc, #52]	@ (8004b6c <trilateration+0x20b4>)
 8004b36:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8004b3a:	f7fb fbd5 	bl	80002e8 <__aeabi_dsub>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4610      	mov	r0, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	4b08      	ldr	r3, [pc, #32]	@ (8004b6c <trilateration+0x20b4>)
 8004b4c:	f7fb fd84 	bl	8000658 <__aeabi_dmul>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8004b58:	f7fb fbc6 	bl	80002e8 <__aeabi_dsub>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
 8004b64:	e022      	b.n	8004bac <trilateration+0x20f4>
 8004b66:	bf00      	nop
 8004b68:	3ff00000 	.word	0x3ff00000
 8004b6c:	3fe00000 	.word	0x3fe00000
 8004b70:	3fd00000 	.word	0x3fd00000
 8004b74:	3fe80000 	.word	0x3fe80000
            else mu-=0.5*(1-mu);
 8004b78:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 8004b7c:	f04f 0000 	mov.w	r0, #0
 8004b80:	4990      	ldr	r1, [pc, #576]	@ (8004dc4 <trilateration+0x230c>)
 8004b82:	f7fb fbb1 	bl	80002e8 <__aeabi_dsub>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	4b8d      	ldr	r3, [pc, #564]	@ (8004dc8 <trilateration+0x2310>)
 8004b94:	f7fb fd60 	bl	8000658 <__aeabi_dmul>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8004ba0:	f7fb fba2 	bl	80002e8 <__aeabi_dsub>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* h = |result2 - result1|, ex = (result2 - result1) / |result2 - result1| */
            ex = vdiff(*result2, *result1); // vector result1-result2
 8004bac:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004bb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	ed93 3b00 	vldr	d3, [r3]
 8004bba:	ed93 4b02 	vldr	d4, [r3, #8]
 8004bbe:	ed93 5b04 	vldr	d5, [r3, #16]
 8004bc2:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004bc6:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	ed93 2b00 	vldr	d2, [r3]
 8004bd0:	ed93 6b02 	vldr	d6, [r3, #8]
 8004bd4:	ed93 7b04 	vldr	d7, [r3, #16]
 8004bd8:	eeb0 0a42 	vmov.f32	s0, s4
 8004bdc:	eef0 0a62 	vmov.f32	s1, s5
 8004be0:	eeb0 1a46 	vmov.f32	s2, s12
 8004be4:	eef0 1a66 	vmov.f32	s3, s13
 8004be8:	eeb0 2a47 	vmov.f32	s4, s14
 8004bec:	eef0 2a67 	vmov.f32	s5, s15
 8004bf0:	f7fd f90e 	bl	8001e10 <vdiff>
 8004bf4:	eeb0 5a40 	vmov.f32	s10, s0
 8004bf8:	eef0 5a60 	vmov.f32	s11, s1
 8004bfc:	eeb0 6a41 	vmov.f32	s12, s2
 8004c00:	eef0 6a61 	vmov.f32	s13, s3
 8004c04:	eeb0 7a42 	vmov.f32	s14, s4
 8004c08:	eef0 7a62 	vmov.f32	s15, s5
 8004c0c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004c10:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004c14:	ed83 5b00 	vstr	d5, [r3]
 8004c18:	ed83 6b02 	vstr	d6, [r3, #8]
 8004c1c:	ed83 7b04 	vstr	d7, [r3, #16]
            h = vnorm(ex); // scalar result1-result2
 8004c20:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004c24:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004c28:	ed93 5b00 	vldr	d5, [r3]
 8004c2c:	ed93 6b02 	vldr	d6, [r3, #8]
 8004c30:	ed93 7b04 	vldr	d7, [r3, #16]
 8004c34:	eeb0 0a45 	vmov.f32	s0, s10
 8004c38:	eef0 0a65 	vmov.f32	s1, s11
 8004c3c:	eeb0 1a46 	vmov.f32	s2, s12
 8004c40:	eef0 1a66 	vmov.f32	s3, s13
 8004c44:	eeb0 2a47 	vmov.f32	s4, s14
 8004c48:	eef0 2a67 	vmov.f32	s5, s15
 8004c4c:	f7fd fa48 	bl	80020e0 <vnorm>
 8004c50:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
            ex = vdiv(ex, h); // unit vector ex with respect to result1 (new coordinate system)
 8004c54:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004c58:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004c5c:	ed93 5b00 	vldr	d5, [r3]
 8004c60:	ed93 6b02 	vldr	d6, [r3, #8]
 8004c64:	ed93 7b04 	vldr	d7, [r3, #16]
 8004c68:	ed97 3b94 	vldr	d3, [r7, #592]	@ 0x250
 8004c6c:	eeb0 0a45 	vmov.f32	s0, s10
 8004c70:	eef0 0a65 	vmov.f32	s1, s11
 8004c74:	eeb0 1a46 	vmov.f32	s2, s12
 8004c78:	eef0 1a66 	vmov.f32	s3, s13
 8004c7c:	eeb0 2a47 	vmov.f32	s4, s14
 8004c80:	eef0 2a67 	vmov.f32	s5, s15
 8004c84:	f7fd f9d2 	bl	800202c <vdiv>
 8004c88:	eeb0 5a40 	vmov.f32	s10, s0
 8004c8c:	eef0 5a60 	vmov.f32	s11, s1
 8004c90:	eeb0 6a41 	vmov.f32	s12, s2
 8004c94:	eef0 6a61 	vmov.f32	s13, s3
 8004c98:	eeb0 7a42 	vmov.f32	s14, s4
 8004c9c:	eef0 7a62 	vmov.f32	s15, s5
 8004ca0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004ca4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004ca8:	ed83 5b00 	vstr	d5, [r3]
 8004cac:	ed83 6b02 	vstr	d6, [r3, #8]
 8004cb0:	ed83 7b04 	vstr	d7, [r3, #16]
            /* t2 points to the intersection */
            t2 = vmul(ex, mu*h);
 8004cb4:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 8004cb8:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8004cbc:	f7fb fccc 	bl	8000658 <__aeabi_dmul>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	ec43 2b14 	vmov	d4, r2, r3
 8004cc8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004ccc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004cd0:	ed93 5b00 	vldr	d5, [r3]
 8004cd4:	ed93 6b02 	vldr	d6, [r3, #8]
 8004cd8:	ed93 7b04 	vldr	d7, [r3, #16]
 8004cdc:	eeb0 3a44 	vmov.f32	s6, s8
 8004ce0:	eef0 3a64 	vmov.f32	s7, s9
 8004ce4:	eeb0 0a45 	vmov.f32	s0, s10
 8004ce8:	eef0 0a65 	vmov.f32	s1, s11
 8004cec:	eeb0 1a46 	vmov.f32	s2, s12
 8004cf0:	eef0 1a66 	vmov.f32	s3, s13
 8004cf4:	eeb0 2a47 	vmov.f32	s4, s14
 8004cf8:	eef0 2a67 	vmov.f32	s5, s15
 8004cfc:	f7fd f93c 	bl	8001f78 <vmul>
 8004d00:	eeb0 5a40 	vmov.f32	s10, s0
 8004d04:	eef0 5a60 	vmov.f32	s11, s1
 8004d08:	eeb0 6a41 	vmov.f32	s12, s2
 8004d0c:	eef0 6a61 	vmov.f32	s13, s3
 8004d10:	eeb0 7a42 	vmov.f32	s14, s4
 8004d14:	eef0 7a62 	vmov.f32	s15, s5
 8004d18:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004d1c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004d20:	ed83 5b00 	vstr	d5, [r3]
 8004d24:	ed83 6b02 	vstr	d6, [r3, #8]
 8004d28:	ed83 7b04 	vstr	d7, [r3, #16]
            t2 = vsum(*result1, t2);
 8004d2c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004d30:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004d34:	ed93 3b00 	vldr	d3, [r3]
 8004d38:	ed93 4b02 	vldr	d4, [r3, #8]
 8004d3c:	ed93 5b04 	vldr	d5, [r3, #16]
 8004d40:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004d44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	ed93 2b00 	vldr	d2, [r3]
 8004d4e:	ed93 6b02 	vldr	d6, [r3, #8]
 8004d52:	ed93 7b04 	vldr	d7, [r3, #16]
 8004d56:	eeb0 0a42 	vmov.f32	s0, s4
 8004d5a:	eef0 0a62 	vmov.f32	s1, s5
 8004d5e:	eeb0 1a46 	vmov.f32	s2, s12
 8004d62:	eef0 1a66 	vmov.f32	s3, s13
 8004d66:	eeb0 2a47 	vmov.f32	s4, s14
 8004d6a:	eef0 2a67 	vmov.f32	s5, s15
 8004d6e:	f7fd f8a9 	bl	8001ec4 <vsum>
 8004d72:	eeb0 5a40 	vmov.f32	s10, s0
 8004d76:	eef0 5a60 	vmov.f32	s11, s1
 8004d7a:	eeb0 6a41 	vmov.f32	s12, s2
 8004d7e:	eef0 6a61 	vmov.f32	s13, s3
 8004d82:	eeb0 7a42 	vmov.f32	s14, s4
 8004d86:	eef0 7a62 	vmov.f32	s15, s5
 8004d8a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004d8e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004d92:	ed83 5b00 	vstr	d5, [r3]
 8004d96:	ed83 6b02 	vstr	d6, [r3, #8]
 8004d9a:	ed83 7b04 	vstr	d7, [r3, #16]
            /* the best solution = t2 */
            *best_solution = t2;
 8004d9e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004da2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004dac:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004db0:	4614      	mov	r4, r2
 8004db2:	461d      	mov	r5, r3
 8004db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004db8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004dbc:	e884 0003 	stmia.w	r4, {r0, r1}
 8004dc0:	e127      	b.n	8005012 <trilateration+0x255a>
 8004dc2:	bf00      	nop
 8004dc4:	3ff00000 	.word	0x3ff00000
 8004dc8:	3fe00000 	.word	0x3fe00000
            /* if both mu1 and mu2 are between 0 and 1 */
            /* result1-result2 line segment intersects sphere 4 at two points */

            //return ERR_TRIL_NEEDMORESPHERE;

            mu = mu1 + mu2;
 8004dcc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004dd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dd4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004dd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ddc:	f7fb fa86 	bl	80002ec <__adddf3>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* h = |result2 - result1|, ex = (result2 - result1) / |result2 - result1| */
            ex = vdiff(*result2, *result1); // vector result1-result2
 8004de8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004dec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	ed93 3b00 	vldr	d3, [r3]
 8004df6:	ed93 4b02 	vldr	d4, [r3, #8]
 8004dfa:	ed93 5b04 	vldr	d5, [r3, #16]
 8004dfe:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004e02:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	ed93 2b00 	vldr	d2, [r3]
 8004e0c:	ed93 6b02 	vldr	d6, [r3, #8]
 8004e10:	ed93 7b04 	vldr	d7, [r3, #16]
 8004e14:	eeb0 0a42 	vmov.f32	s0, s4
 8004e18:	eef0 0a62 	vmov.f32	s1, s5
 8004e1c:	eeb0 1a46 	vmov.f32	s2, s12
 8004e20:	eef0 1a66 	vmov.f32	s3, s13
 8004e24:	eeb0 2a47 	vmov.f32	s4, s14
 8004e28:	eef0 2a67 	vmov.f32	s5, s15
 8004e2c:	f7fc fff0 	bl	8001e10 <vdiff>
 8004e30:	eeb0 5a40 	vmov.f32	s10, s0
 8004e34:	eef0 5a60 	vmov.f32	s11, s1
 8004e38:	eeb0 6a41 	vmov.f32	s12, s2
 8004e3c:	eef0 6a61 	vmov.f32	s13, s3
 8004e40:	eeb0 7a42 	vmov.f32	s14, s4
 8004e44:	eef0 7a62 	vmov.f32	s15, s5
 8004e48:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004e4c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004e50:	ed83 5b00 	vstr	d5, [r3]
 8004e54:	ed83 6b02 	vstr	d6, [r3, #8]
 8004e58:	ed83 7b04 	vstr	d7, [r3, #16]
            h = vnorm(ex); // scalar result1-result2
 8004e5c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004e60:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004e64:	ed93 5b00 	vldr	d5, [r3]
 8004e68:	ed93 6b02 	vldr	d6, [r3, #8]
 8004e6c:	ed93 7b04 	vldr	d7, [r3, #16]
 8004e70:	eeb0 0a45 	vmov.f32	s0, s10
 8004e74:	eef0 0a65 	vmov.f32	s1, s11
 8004e78:	eeb0 1a46 	vmov.f32	s2, s12
 8004e7c:	eef0 1a66 	vmov.f32	s3, s13
 8004e80:	eeb0 2a47 	vmov.f32	s4, s14
 8004e84:	eef0 2a67 	vmov.f32	s5, s15
 8004e88:	f7fd f92a 	bl	80020e0 <vnorm>
 8004e8c:	ed87 0b94 	vstr	d0, [r7, #592]	@ 0x250
            ex = vdiv(ex, h); // unit vector ex with respect to result1 (new coordinate system)
 8004e90:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004e94:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004e98:	ed93 5b00 	vldr	d5, [r3]
 8004e9c:	ed93 6b02 	vldr	d6, [r3, #8]
 8004ea0:	ed93 7b04 	vldr	d7, [r3, #16]
 8004ea4:	ed97 3b94 	vldr	d3, [r7, #592]	@ 0x250
 8004ea8:	eeb0 0a45 	vmov.f32	s0, s10
 8004eac:	eef0 0a65 	vmov.f32	s1, s11
 8004eb0:	eeb0 1a46 	vmov.f32	s2, s12
 8004eb4:	eef0 1a66 	vmov.f32	s3, s13
 8004eb8:	eeb0 2a47 	vmov.f32	s4, s14
 8004ebc:	eef0 2a67 	vmov.f32	s5, s15
 8004ec0:	f7fd f8b4 	bl	800202c <vdiv>
 8004ec4:	eeb0 5a40 	vmov.f32	s10, s0
 8004ec8:	eef0 5a60 	vmov.f32	s11, s1
 8004ecc:	eeb0 6a41 	vmov.f32	s12, s2
 8004ed0:	eef0 6a61 	vmov.f32	s13, s3
 8004ed4:	eeb0 7a42 	vmov.f32	s14, s4
 8004ed8:	eef0 7a62 	vmov.f32	s15, s5
 8004edc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004ee0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004ee4:	ed83 5b00 	vstr	d5, [r3]
 8004ee8:	ed83 6b02 	vstr	d6, [r3, #8]
 8004eec:	ed83 7b04 	vstr	d7, [r3, #16]
            /* 50-50 error correction for mu */
            mu = 0.5*mu;
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	4b4a      	ldr	r3, [pc, #296]	@ (8005020 <trilateration+0x2568>)
 8004ef6:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8004efa:	f7fb fbad 	bl	8000658 <__aeabi_dmul>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	e9c7 239a 	strd	r2, r3, [r7, #616]	@ 0x268
            /* t2 points to the intersection */
            t2 = vmul(ex, mu*h);
 8004f06:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 8004f0a:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8004f0e:	f7fb fba3 	bl	8000658 <__aeabi_dmul>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	ec43 2b14 	vmov	d4, r2, r3
 8004f1a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004f1e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004f22:	ed93 5b00 	vldr	d5, [r3]
 8004f26:	ed93 6b02 	vldr	d6, [r3, #8]
 8004f2a:	ed93 7b04 	vldr	d7, [r3, #16]
 8004f2e:	eeb0 3a44 	vmov.f32	s6, s8
 8004f32:	eef0 3a64 	vmov.f32	s7, s9
 8004f36:	eeb0 0a45 	vmov.f32	s0, s10
 8004f3a:	eef0 0a65 	vmov.f32	s1, s11
 8004f3e:	eeb0 1a46 	vmov.f32	s2, s12
 8004f42:	eef0 1a66 	vmov.f32	s3, s13
 8004f46:	eeb0 2a47 	vmov.f32	s4, s14
 8004f4a:	eef0 2a67 	vmov.f32	s5, s15
 8004f4e:	f7fd f813 	bl	8001f78 <vmul>
 8004f52:	eeb0 5a40 	vmov.f32	s10, s0
 8004f56:	eef0 5a60 	vmov.f32	s11, s1
 8004f5a:	eeb0 6a41 	vmov.f32	s12, s2
 8004f5e:	eef0 6a61 	vmov.f32	s13, s3
 8004f62:	eeb0 7a42 	vmov.f32	s14, s4
 8004f66:	eef0 7a62 	vmov.f32	s15, s5
 8004f6a:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004f6e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004f72:	ed83 5b00 	vstr	d5, [r3]
 8004f76:	ed83 6b02 	vstr	d6, [r3, #8]
 8004f7a:	ed83 7b04 	vstr	d7, [r3, #16]
            t2 = vsum(*result1, t2);
 8004f7e:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004f82:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004f86:	ed93 3b00 	vldr	d3, [r3]
 8004f8a:	ed93 4b02 	vldr	d4, [r3, #8]
 8004f8e:	ed93 5b04 	vldr	d5, [r3, #16]
 8004f92:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004f96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	ed93 2b00 	vldr	d2, [r3]
 8004fa0:	ed93 6b02 	vldr	d6, [r3, #8]
 8004fa4:	ed93 7b04 	vldr	d7, [r3, #16]
 8004fa8:	eeb0 0a42 	vmov.f32	s0, s4
 8004fac:	eef0 0a62 	vmov.f32	s1, s5
 8004fb0:	eeb0 1a46 	vmov.f32	s2, s12
 8004fb4:	eef0 1a66 	vmov.f32	s3, s13
 8004fb8:	eeb0 2a47 	vmov.f32	s4, s14
 8004fbc:	eef0 2a67 	vmov.f32	s5, s15
 8004fc0:	f7fc ff80 	bl	8001ec4 <vsum>
 8004fc4:	eeb0 5a40 	vmov.f32	s10, s0
 8004fc8:	eef0 5a60 	vmov.f32	s11, s1
 8004fcc:	eeb0 6a41 	vmov.f32	s12, s2
 8004fd0:	eef0 6a61 	vmov.f32	s13, s3
 8004fd4:	eeb0 7a42 	vmov.f32	s14, s4
 8004fd8:	eef0 7a62 	vmov.f32	s15, s5
 8004fdc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004fe0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004fe4:	ed83 5b00 	vstr	d5, [r3]
 8004fe8:	ed83 6b02 	vstr	d6, [r3, #8]
 8004fec:	ed83 7b04 	vstr	d7, [r3, #16]
            /* the best solution = t2 */
            *best_solution = t2;
 8004ff0:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004ff4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8004ffe:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005002:	4614      	mov	r4, r2
 8005004:	461d      	mov	r5, r3
 8005006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800500a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800500e:	e884 0003 	stmia.w	r4, {r0, r1}

        }

    }
    return TRIL_4SPHERES;
 8005012:	2304      	movs	r3, #4
    /******** END OF FINDING ONE SOLUTION BY INTRODUCING ONE MORE SPHERE *********/
}
 8005014:	4618      	mov	r0, r3
 8005016:	f507 7721 	add.w	r7, r7, #644	@ 0x284
 800501a:	46bd      	mov	sp, r7
 800501c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005020:	3fe00000 	.word	0x3fe00000
 8005024:	00000000 	.word	0x00000000

08005028 <deca_3dlocate>:
                    vec3d p1, double r1,
                    vec3d p2, double r2,
                    vec3d p3, double r3,
                    vec3d p4, double r4,
                    int *combination)
{
 8005028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800502c:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8005030:	af12      	add	r7, sp, #72	@ 0x48
 8005032:	f507 74fc 	add.w	r4, r7, #504	@ 0x1f8
 8005036:	f5a4 74d6 	sub.w	r4, r4, #428	@ 0x1ac
 800503a:	6020      	str	r0, [r4, #0]
 800503c:	f507 70fc 	add.w	r0, r7, #504	@ 0x1f8
 8005040:	f5a0 70d8 	sub.w	r0, r0, #432	@ 0x1b0
 8005044:	6001      	str	r1, [r0, #0]
 8005046:	f507 71fc 	add.w	r1, r7, #504	@ 0x1f8
 800504a:	f5a1 71da 	sub.w	r1, r1, #436	@ 0x1b4
 800504e:	600a      	str	r2, [r1, #0]
 8005050:	f507 72fc 	add.w	r2, r7, #504	@ 0x1f8
 8005054:	f5a2 72dc 	sub.w	r2, r2, #440	@ 0x1b8
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800505e:	f5a3 72e8 	sub.w	r2, r3, #464	@ 0x1d0
 8005062:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005066:	ed03 3b02 	vstr	d3, [r3, #-8]
 800506a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800506e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8005072:	f107 0108 	add.w	r1, r7, #8
 8005076:	ed01 7b02 	vstr	d7, [r1, #-8]
 800507a:	ed82 0b00 	vstr	d0, [r2]
 800507e:	ed82 1b02 	vstr	d1, [r2, #8]
 8005082:	ed82 2b04 	vstr	d2, [r2, #16]
 8005086:	ed83 4b00 	vstr	d4, [r3]
 800508a:	ed83 5b02 	vstr	d5, [r3, #8]
 800508e:	ed83 6b04 	vstr	d6, [r3, #16]
    double  ovr_r1, ovr_r2, ovr_r3, ovr_r4;
    int     overlook_count, combination_counter;
    int     trilateration_errcounter, trilateration_mode34;
    int     success, concentric, result;

    trilateration_errcounter = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
    trilateration_mode34 = 0;
 8005098:	2300      	movs	r3, #0
 800509a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

    combination_counter = 4; /* four spheres combination */
 800509e:	2304      	movs	r3, #4
 80050a0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8

    *best_gdoprate = 1; /* put the worst gdoprate init */
 80050a4:	f8d7 121c 	ldr.w	r1, [r7, #540]	@ 0x21c
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	4bba      	ldr	r3, [pc, #744]	@ (8005398 <deca_3dlocate+0x370>)
 80050ae:	e9c1 2300 	strd	r2, r3, [r1]
    gdoprate_compare1 = 1;
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	4bb8      	ldr	r3, [pc, #736]	@ (8005398 <deca_3dlocate+0x370>)
 80050b8:	e9c7 236c 	strd	r2, r3, [r7, #432]	@ 0x1b0
    gdoprate_compare2 = 1;
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	4bb5      	ldr	r3, [pc, #724]	@ (8005398 <deca_3dlocate+0x370>)
 80050c2:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0
    solution_compare1.x = 0;
 80050c6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80050ca:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	e9c1 2300 	strd	r2, r3, [r1]
    solution_compare1.y = 0;
 80050da:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80050de:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
    solution_compare1.z = 0;
 80050ee:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80050f2:	f5a3 71c8 	sub.w	r1, r3, #400	@ 0x190
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	e9c1 2304 	strd	r2, r3, [r1, #16]
    //error_3dcompare1 = 0;

    do
    {
        success = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
        concentric = 0;
 8005108:	2300      	movs	r3, #0
 800510a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
        overlook_count = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        ovr_r1 = r1;
 8005114:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005118:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800511c:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
        ovr_r2 = r2;
 8005120:	f107 0308 	add.w	r3, r7, #8
 8005124:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005128:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
        ovr_r3 = r3;
 800512c:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 8005130:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
        ovr_r4 = r4;
 8005134:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 8005138:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
        do
        {
            result = trilateration(&o1, &o2, &solution, p1, ovr_r1, p2, ovr_r2, p3, ovr_r3, p4, ovr_r4, MAXZERO);
 800513c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8005140:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8005144:	ed93 4b00 	vldr	d4, [r3]
 8005148:	ed93 5b02 	vldr	d5, [r3, #8]
 800514c:	ed93 6b04 	vldr	d6, [r3, #16]
 8005150:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8005154:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005158:	ed93 0b00 	vldr	d0, [r3]
 800515c:	ed93 1b02 	vldr	d1, [r3, #8]
 8005160:	ed93 2b04 	vldr	d2, [r3, #16]
 8005164:	f107 0e98 	add.w	lr, r7, #152	@ 0x98
 8005168:	f107 0cb0 	add.w	ip, r7, #176	@ 0xb0
 800516c:	f107 06c8 	add.w	r6, r7, #200	@ 0xc8
 8005170:	a385      	add	r3, pc, #532	@ (adr r3, 8005388 <deca_3dlocate+0x360>)
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800517a:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 800517e:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8005182:	ad08      	add	r5, sp, #32
 8005184:	f507 7410 	add.w	r4, r7, #576	@ 0x240
 8005188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800518a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800518c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005190:	e885 0003 	stmia.w	r5, {r0, r1}
 8005194:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8005198:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800519c:	466d      	mov	r5, sp
 800519e:	f507 7408 	add.w	r4, r7, #544	@ 0x220
 80051a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80051ae:	ed97 7b78 	vldr	d7, [r7, #480]	@ 0x1e0
 80051b2:	ed97 3b7a 	vldr	d3, [r7, #488]	@ 0x1e8
 80051b6:	4672      	mov	r2, lr
 80051b8:	4661      	mov	r1, ip
 80051ba:	4630      	mov	r0, r6
 80051bc:	f7fd fc7c 	bl	8002ab8 <trilateration>
 80051c0:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac
            switch (result)
 80051c4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d013      	beq.n	80051f4 <deca_3dlocate+0x1cc>
 80051cc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	dc1a      	bgt.n	800520a <deca_3dlocate+0x1e2>
 80051d4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d011      	beq.n	8005202 <deca_3dlocate+0x1da>
 80051de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d111      	bne.n	800520a <deca_3dlocate+0x1e2>
            {
                case TRIL_3SPHERES: // 3 spheres are used to get the result
                    trilateration_mode34 = TRIL_3SPHERES;
 80051e6:	2303      	movs	r3, #3
 80051e8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
                    success = 1;
 80051ec:	2301      	movs	r3, #1
 80051ee:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                    break;
 80051f2:	e03c      	b.n	800526e <deca_3dlocate+0x246>

                case TRIL_4SPHERES: // 4 spheres are used to get the result
                    trilateration_mode34 = TRIL_4SPHERES;
 80051f4:	2304      	movs	r3, #4
 80051f6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
                    success = 1;
 80051fa:	2301      	movs	r3, #1
 80051fc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                    break;
 8005200:	e035      	b.n	800526e <deca_3dlocate+0x246>

                case ERR_TRIL_CONCENTRIC:
                    concentric = 1;
 8005202:	2301      	movs	r3, #1
 8005204:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
                    break;
 8005208:	e031      	b.n	800526e <deca_3dlocate+0x246>

                default: // any other return value goes here
                    ovr_r1 += 0.10;
 800520a:	a361      	add	r3, pc, #388	@ (adr r3, 8005390 <deca_3dlocate+0x368>)
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8005214:	f7fb f86a 	bl	80002ec <__adddf3>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
                    ovr_r2 += 0.10;
 8005220:	a35b      	add	r3, pc, #364	@ (adr r3, 8005390 <deca_3dlocate+0x368>)
 8005222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005226:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 800522a:	f7fb f85f 	bl	80002ec <__adddf3>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0
                    ovr_r3 += 0.10;
 8005236:	a356      	add	r3, pc, #344	@ (adr r3, 8005390 <deca_3dlocate+0x368>)
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 8005240:	f7fb f854 	bl	80002ec <__adddf3>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	e9c7 2376 	strd	r2, r3, [r7, #472]	@ 0x1d8
                    ovr_r4 += 0.10;
 800524c:	a350      	add	r3, pc, #320	@ (adr r3, 8005390 <deca_3dlocate+0x368>)
 800524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005252:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8005256:	f7fb f849 	bl	80002ec <__adddf3>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	e9c7 2374 	strd	r2, r3, [r7, #464]	@ 0x1d0
                    overlook_count++;
 8005262:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8005266:	3301      	adds	r3, #1
 8005268:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
                    break;
 800526c:	bf00      	nop
            }

            //qDebug() << "while(!success)" << overlook_count << concentric << "result" << result;

        }
        while (!success && (overlook_count <= 5) && !concentric);
 800526e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8005272:	2b00      	cmp	r3, #0
 8005274:	d108      	bne.n	8005288 <deca_3dlocate+0x260>
 8005276:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800527a:	2b05      	cmp	r3, #5
 800527c:	dc04      	bgt.n	8005288 <deca_3dlocate+0x260>
 800527e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8005282:	2b00      	cmp	r3, #0
 8005284:	f43f af5a 	beq.w	800513c <deca_3dlocate+0x114>

        if (success)
 8005288:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 8419 	beq.w	8005ac4 <deca_3dlocate+0xa9c>
        {
            switch (result)
 8005292:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8005296:	2b03      	cmp	r3, #3
 8005298:	d005      	beq.n	80052a6 <deca_3dlocate+0x27e>
 800529a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d02f      	beq.n	8005302 <deca_3dlocate+0x2da>
                        combination_counter--;
                    }
                    break;

                default:
                    break;
 80052a2:	f000 bc15 	b.w	8005ad0 <deca_3dlocate+0xaa8>
                    *solution1 = o1;
 80052a6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80052aa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80052b4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80052b8:	4614      	mov	r4, r2
 80052ba:	461d      	mov	r5, r3
 80052bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80052c4:	e884 0003 	stmia.w	r4, {r0, r1}
                    *solution2 = o2;
 80052c8:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80052cc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80052d6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80052da:	4614      	mov	r4, r2
 80052dc:	461d      	mov	r5, r3
 80052de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80052e6:	e884 0003 	stmia.w	r4, {r0, r1}
                    *nosolution_count = overlook_count;
 80052ea:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80052ee:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80052f8:	601a      	str	r2, [r3, #0]
                    combination_counter = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                    break;
 8005300:	e3e6      	b.n	8005ad0 <deca_3dlocate+0xaa8>
                    gdoprate_compare1   = gdoprate(solution, p1, p2, p3);
 8005302:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8005306:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800530a:	ed93 3b00 	vldr	d3, [r3]
 800530e:	ed93 4b02 	vldr	d4, [r3, #8]
 8005312:	ed93 5b04 	vldr	d5, [r3, #16]
 8005316:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800531a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800531e:	ed93 2b00 	vldr	d2, [r3]
 8005322:	ed93 6b02 	vldr	d6, [r3, #8]
 8005326:	ed93 7b04 	vldr	d7, [r3, #16]
 800532a:	ad06      	add	r5, sp, #24
 800532c:	f507 7408 	add.w	r4, r7, #544	@ 0x220
 8005330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005334:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005338:	e885 0003 	stmia.w	r5, {r0, r1}
 800533c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8005340:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8005344:	466c      	mov	r4, sp
 8005346:	461d      	mov	r5, r3
 8005348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800534a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800534c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005350:	e884 0003 	stmia.w	r4, {r0, r1}
 8005354:	eeb0 0a42 	vmov.f32	s0, s4
 8005358:	eef0 0a62 	vmov.f32	s1, s5
 800535c:	eeb0 1a46 	vmov.f32	s2, s12
 8005360:	eef0 1a66 	vmov.f32	s3, s13
 8005364:	eeb0 2a47 	vmov.f32	s4, s14
 8005368:	eef0 2a67 	vmov.f32	s5, s15
 800536c:	f7fc ffda 	bl	8002324 <gdoprate>
 8005370:	ed87 0b6c 	vstr	d0, [r7, #432]	@ 0x1b0
                    if (gdoprate_compare1 <= gdoprate_compare2)
 8005374:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8005378:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 800537c:	f7fb fbe8 	bl	8000b50 <__aeabi_dcmple>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <deca_3dlocate+0x374>
                    break;
 8005386:	e3a3      	b.n	8005ad0 <deca_3dlocate+0xaa8>
 8005388:	d2f1a9fc 	.word	0xd2f1a9fc
 800538c:	3f50624d 	.word	0x3f50624d
 8005390:	9999999a 	.word	0x9999999a
 8005394:	3fb99999 	.word	0x3fb99999
 8005398:	3ff00000 	.word	0x3ff00000
                        *solution1 = o1;
 800539c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80053a0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80053aa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80053ae:	4614      	mov	r4, r2
 80053b0:	461d      	mov	r5, r3
 80053b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80053ba:	e884 0003 	stmia.w	r4, {r0, r1}
                        *solution2 = o2;
 80053be:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80053c2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80053cc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80053d0:	4614      	mov	r4, r2
 80053d2:	461d      	mov	r5, r3
 80053d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80053dc:	e884 0003 	stmia.w	r4, {r0, r1}
                        *best_solution  = solution;
 80053e0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80053e4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80053ee:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80053f2:	4614      	mov	r4, r2
 80053f4:	461d      	mov	r5, r3
 80053f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80053fe:	e884 0003 	stmia.w	r4, {r0, r1}
                        *nosolution_count = overlook_count;
 8005402:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8005406:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8005410:	601a      	str	r2, [r3, #0]
                        *best_3derror   = sqrt((vnorm(vdiff(solution, p1))-r1)*(vnorm(vdiff(solution, p1))-r1) +
 8005412:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8005416:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800541a:	ed93 3b00 	vldr	d3, [r3]
 800541e:	ed93 4b02 	vldr	d4, [r3, #8]
 8005422:	ed93 5b04 	vldr	d5, [r3, #16]
 8005426:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800542a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800542e:	ed93 2b00 	vldr	d2, [r3]
 8005432:	ed93 6b02 	vldr	d6, [r3, #8]
 8005436:	ed93 7b04 	vldr	d7, [r3, #16]
 800543a:	eeb0 0a42 	vmov.f32	s0, s4
 800543e:	eef0 0a62 	vmov.f32	s1, s5
 8005442:	eeb0 1a46 	vmov.f32	s2, s12
 8005446:	eef0 1a66 	vmov.f32	s3, s13
 800544a:	eeb0 2a47 	vmov.f32	s4, s14
 800544e:	eef0 2a67 	vmov.f32	s5, s15
 8005452:	f7fc fcdd 	bl	8001e10 <vdiff>
 8005456:	eeb0 5a40 	vmov.f32	s10, s0
 800545a:	eef0 5a60 	vmov.f32	s11, s1
 800545e:	eeb0 6a41 	vmov.f32	s12, s2
 8005462:	eef0 6a61 	vmov.f32	s13, s3
 8005466:	eeb0 7a42 	vmov.f32	s14, s4
 800546a:	eef0 7a62 	vmov.f32	s15, s5
 800546e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8005472:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005476:	ed83 5b00 	vstr	d5, [r3]
 800547a:	ed83 6b02 	vstr	d6, [r3, #8]
 800547e:	ed83 7b04 	vstr	d7, [r3, #16]
 8005482:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8005486:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800548a:	ed93 5b00 	vldr	d5, [r3]
 800548e:	ed93 6b02 	vldr	d6, [r3, #8]
 8005492:	ed93 7b04 	vldr	d7, [r3, #16]
 8005496:	eeb0 0a45 	vmov.f32	s0, s10
 800549a:	eef0 0a65 	vmov.f32	s1, s11
 800549e:	eeb0 1a46 	vmov.f32	s2, s12
 80054a2:	eef0 1a66 	vmov.f32	s3, s13
 80054a6:	eeb0 2a47 	vmov.f32	s4, s14
 80054aa:	eef0 2a67 	vmov.f32	s5, s15
 80054ae:	f7fc fe17 	bl	80020e0 <vnorm>
 80054b2:	ec51 0b10 	vmov	r0, r1, d0
 80054b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80054ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054be:	f7fa ff13 	bl	80002e8 <__aeabi_dsub>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4614      	mov	r4, r2
 80054c8:	461d      	mov	r5, r3
 80054ca:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80054ce:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80054d2:	ed93 3b00 	vldr	d3, [r3]
 80054d6:	ed93 4b02 	vldr	d4, [r3, #8]
 80054da:	ed93 5b04 	vldr	d5, [r3, #16]
 80054de:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80054e2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80054e6:	ed93 2b00 	vldr	d2, [r3]
 80054ea:	ed93 6b02 	vldr	d6, [r3, #8]
 80054ee:	ed93 7b04 	vldr	d7, [r3, #16]
 80054f2:	eeb0 0a42 	vmov.f32	s0, s4
 80054f6:	eef0 0a62 	vmov.f32	s1, s5
 80054fa:	eeb0 1a46 	vmov.f32	s2, s12
 80054fe:	eef0 1a66 	vmov.f32	s3, s13
 8005502:	eeb0 2a47 	vmov.f32	s4, s14
 8005506:	eef0 2a67 	vmov.f32	s5, s15
 800550a:	f7fc fc81 	bl	8001e10 <vdiff>
 800550e:	eeb0 5a40 	vmov.f32	s10, s0
 8005512:	eef0 5a60 	vmov.f32	s11, s1
 8005516:	eeb0 6a41 	vmov.f32	s12, s2
 800551a:	eef0 6a61 	vmov.f32	s13, s3
 800551e:	eeb0 7a42 	vmov.f32	s14, s4
 8005522:	eef0 7a62 	vmov.f32	s15, s5
 8005526:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800552a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800552e:	ed83 5b00 	vstr	d5, [r3]
 8005532:	ed83 6b02 	vstr	d6, [r3, #8]
 8005536:	ed83 7b04 	vstr	d7, [r3, #16]
 800553a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800553e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005542:	ed93 5b00 	vldr	d5, [r3]
 8005546:	ed93 6b02 	vldr	d6, [r3, #8]
 800554a:	ed93 7b04 	vldr	d7, [r3, #16]
 800554e:	eeb0 0a45 	vmov.f32	s0, s10
 8005552:	eef0 0a65 	vmov.f32	s1, s11
 8005556:	eeb0 1a46 	vmov.f32	s2, s12
 800555a:	eef0 1a66 	vmov.f32	s3, s13
 800555e:	eeb0 2a47 	vmov.f32	s4, s14
 8005562:	eef0 2a67 	vmov.f32	s5, s15
 8005566:	f7fc fdbb 	bl	80020e0 <vnorm>
 800556a:	ec51 0b10 	vmov	r0, r1, d0
 800556e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005572:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005576:	f7fa feb7 	bl	80002e8 <__aeabi_dsub>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	4620      	mov	r0, r4
 8005580:	4629      	mov	r1, r5
 8005582:	f7fb f869 	bl	8000658 <__aeabi_dmul>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	4614      	mov	r4, r2
 800558c:	461d      	mov	r5, r3
                                               (vnorm(vdiff(solution, p2))-r2)*(vnorm(vdiff(solution, p2))-r2) +
 800558e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8005592:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8005596:	ed93 3b00 	vldr	d3, [r3]
 800559a:	ed93 4b02 	vldr	d4, [r3, #8]
 800559e:	ed93 5b04 	vldr	d5, [r3, #16]
 80055a2:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80055a6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80055aa:	ed93 2b00 	vldr	d2, [r3]
 80055ae:	ed93 6b02 	vldr	d6, [r3, #8]
 80055b2:	ed93 7b04 	vldr	d7, [r3, #16]
 80055b6:	eeb0 0a42 	vmov.f32	s0, s4
 80055ba:	eef0 0a62 	vmov.f32	s1, s5
 80055be:	eeb0 1a46 	vmov.f32	s2, s12
 80055c2:	eef0 1a66 	vmov.f32	s3, s13
 80055c6:	eeb0 2a47 	vmov.f32	s4, s14
 80055ca:	eef0 2a67 	vmov.f32	s5, s15
 80055ce:	f7fc fc1f 	bl	8001e10 <vdiff>
 80055d2:	eeb0 5a40 	vmov.f32	s10, s0
 80055d6:	eef0 5a60 	vmov.f32	s11, s1
 80055da:	eeb0 6a41 	vmov.f32	s12, s2
 80055de:	eef0 6a61 	vmov.f32	s13, s3
 80055e2:	eeb0 7a42 	vmov.f32	s14, s4
 80055e6:	eef0 7a62 	vmov.f32	s15, s5
 80055ea:	ed87 5b44 	vstr	d5, [r7, #272]	@ 0x110
 80055ee:	ed87 6b46 	vstr	d6, [r7, #280]	@ 0x118
 80055f2:	ed87 7b48 	vstr	d7, [r7, #288]	@ 0x120
 80055f6:	ed97 5b44 	vldr	d5, [r7, #272]	@ 0x110
 80055fa:	ed97 6b46 	vldr	d6, [r7, #280]	@ 0x118
 80055fe:	ed97 7b48 	vldr	d7, [r7, #288]	@ 0x120
 8005602:	eeb0 0a45 	vmov.f32	s0, s10
 8005606:	eef0 0a65 	vmov.f32	s1, s11
 800560a:	eeb0 1a46 	vmov.f32	s2, s12
 800560e:	eef0 1a66 	vmov.f32	s3, s13
 8005612:	eeb0 2a47 	vmov.f32	s4, s14
 8005616:	eef0 2a67 	vmov.f32	s5, s15
 800561a:	f7fc fd61 	bl	80020e0 <vnorm>
 800561e:	ec51 0b10 	vmov	r0, r1, d0
 8005622:	f107 0308 	add.w	r3, r7, #8
 8005626:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800562a:	f7fa fe5d 	bl	80002e8 <__aeabi_dsub>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4690      	mov	r8, r2
 8005634:	4699      	mov	r9, r3
 8005636:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800563a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800563e:	ed93 3b00 	vldr	d3, [r3]
 8005642:	ed93 4b02 	vldr	d4, [r3, #8]
 8005646:	ed93 5b04 	vldr	d5, [r3, #16]
 800564a:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800564e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005652:	ed93 2b00 	vldr	d2, [r3]
 8005656:	ed93 6b02 	vldr	d6, [r3, #8]
 800565a:	ed93 7b04 	vldr	d7, [r3, #16]
 800565e:	eeb0 0a42 	vmov.f32	s0, s4
 8005662:	eef0 0a62 	vmov.f32	s1, s5
 8005666:	eeb0 1a46 	vmov.f32	s2, s12
 800566a:	eef0 1a66 	vmov.f32	s3, s13
 800566e:	eeb0 2a47 	vmov.f32	s4, s14
 8005672:	eef0 2a67 	vmov.f32	s5, s15
 8005676:	f7fc fbcb 	bl	8001e10 <vdiff>
 800567a:	eeb0 5a40 	vmov.f32	s10, s0
 800567e:	eef0 5a60 	vmov.f32	s11, s1
 8005682:	eeb0 6a41 	vmov.f32	s12, s2
 8005686:	eef0 6a61 	vmov.f32	s13, s3
 800568a:	eeb0 7a42 	vmov.f32	s14, s4
 800568e:	eef0 7a62 	vmov.f32	s15, s5
 8005692:	ed87 5b4a 	vstr	d5, [r7, #296]	@ 0x128
 8005696:	ed87 6b4c 	vstr	d6, [r7, #304]	@ 0x130
 800569a:	ed87 7b4e 	vstr	d7, [r7, #312]	@ 0x138
 800569e:	ed97 5b4a 	vldr	d5, [r7, #296]	@ 0x128
 80056a2:	ed97 6b4c 	vldr	d6, [r7, #304]	@ 0x130
 80056a6:	ed97 7b4e 	vldr	d7, [r7, #312]	@ 0x138
 80056aa:	eeb0 0a45 	vmov.f32	s0, s10
 80056ae:	eef0 0a65 	vmov.f32	s1, s11
 80056b2:	eeb0 1a46 	vmov.f32	s2, s12
 80056b6:	eef0 1a66 	vmov.f32	s3, s13
 80056ba:	eeb0 2a47 	vmov.f32	s4, s14
 80056be:	eef0 2a67 	vmov.f32	s5, s15
 80056c2:	f7fc fd0d 	bl	80020e0 <vnorm>
 80056c6:	ec51 0b10 	vmov	r0, r1, d0
 80056ca:	f107 0308 	add.w	r3, r7, #8
 80056ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80056d2:	f7fa fe09 	bl	80002e8 <__aeabi_dsub>
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	4640      	mov	r0, r8
 80056dc:	4649      	mov	r1, r9
 80056de:	f7fa ffbb 	bl	8000658 <__aeabi_dmul>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
                        *best_3derror   = sqrt((vnorm(vdiff(solution, p1))-r1)*(vnorm(vdiff(solution, p1))-r1) +
 80056e6:	4620      	mov	r0, r4
 80056e8:	4629      	mov	r1, r5
 80056ea:	f7fa fdff 	bl	80002ec <__adddf3>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4614      	mov	r4, r2
 80056f4:	461d      	mov	r5, r3
                                               (vnorm(vdiff(solution, p3))-r3)*(vnorm(vdiff(solution, p3))-r3) +
 80056f6:	ed97 3b88 	vldr	d3, [r7, #544]	@ 0x220
 80056fa:	ed97 4b8a 	vldr	d4, [r7, #552]	@ 0x228
 80056fe:	ed97 5b8c 	vldr	d5, [r7, #560]	@ 0x230
 8005702:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8005706:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800570a:	ed93 2b00 	vldr	d2, [r3]
 800570e:	ed93 6b02 	vldr	d6, [r3, #8]
 8005712:	ed93 7b04 	vldr	d7, [r3, #16]
 8005716:	eeb0 0a42 	vmov.f32	s0, s4
 800571a:	eef0 0a62 	vmov.f32	s1, s5
 800571e:	eeb0 1a46 	vmov.f32	s2, s12
 8005722:	eef0 1a66 	vmov.f32	s3, s13
 8005726:	eeb0 2a47 	vmov.f32	s4, s14
 800572a:	eef0 2a67 	vmov.f32	s5, s15
 800572e:	f7fc fb6f 	bl	8001e10 <vdiff>
 8005732:	eeb0 5a40 	vmov.f32	s10, s0
 8005736:	eef0 5a60 	vmov.f32	s11, s1
 800573a:	eeb0 6a41 	vmov.f32	s12, s2
 800573e:	eef0 6a61 	vmov.f32	s13, s3
 8005742:	eeb0 7a42 	vmov.f32	s14, s4
 8005746:	eef0 7a62 	vmov.f32	s15, s5
 800574a:	ed87 5b50 	vstr	d5, [r7, #320]	@ 0x140
 800574e:	ed87 6b52 	vstr	d6, [r7, #328]	@ 0x148
 8005752:	ed87 7b54 	vstr	d7, [r7, #336]	@ 0x150
 8005756:	ed97 5b50 	vldr	d5, [r7, #320]	@ 0x140
 800575a:	ed97 6b52 	vldr	d6, [r7, #328]	@ 0x148
 800575e:	ed97 7b54 	vldr	d7, [r7, #336]	@ 0x150
 8005762:	eeb0 0a45 	vmov.f32	s0, s10
 8005766:	eef0 0a65 	vmov.f32	s1, s11
 800576a:	eeb0 1a46 	vmov.f32	s2, s12
 800576e:	eef0 1a66 	vmov.f32	s3, s13
 8005772:	eeb0 2a47 	vmov.f32	s4, s14
 8005776:	eef0 2a67 	vmov.f32	s5, s15
 800577a:	f7fc fcb1 	bl	80020e0 <vnorm>
 800577e:	ec51 0b10 	vmov	r0, r1, d0
 8005782:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 8005786:	f7fa fdaf 	bl	80002e8 <__aeabi_dsub>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4690      	mov	r8, r2
 8005790:	4699      	mov	r9, r3
 8005792:	ed97 3b88 	vldr	d3, [r7, #544]	@ 0x220
 8005796:	ed97 4b8a 	vldr	d4, [r7, #552]	@ 0x228
 800579a:	ed97 5b8c 	vldr	d5, [r7, #560]	@ 0x230
 800579e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80057a2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80057a6:	ed93 2b00 	vldr	d2, [r3]
 80057aa:	ed93 6b02 	vldr	d6, [r3, #8]
 80057ae:	ed93 7b04 	vldr	d7, [r3, #16]
 80057b2:	eeb0 0a42 	vmov.f32	s0, s4
 80057b6:	eef0 0a62 	vmov.f32	s1, s5
 80057ba:	eeb0 1a46 	vmov.f32	s2, s12
 80057be:	eef0 1a66 	vmov.f32	s3, s13
 80057c2:	eeb0 2a47 	vmov.f32	s4, s14
 80057c6:	eef0 2a67 	vmov.f32	s5, s15
 80057ca:	f7fc fb21 	bl	8001e10 <vdiff>
 80057ce:	eeb0 5a40 	vmov.f32	s10, s0
 80057d2:	eef0 5a60 	vmov.f32	s11, s1
 80057d6:	eeb0 6a41 	vmov.f32	s12, s2
 80057da:	eef0 6a61 	vmov.f32	s13, s3
 80057de:	eeb0 7a42 	vmov.f32	s14, s4
 80057e2:	eef0 7a62 	vmov.f32	s15, s5
 80057e6:	ed87 5b56 	vstr	d5, [r7, #344]	@ 0x158
 80057ea:	ed87 6b58 	vstr	d6, [r7, #352]	@ 0x160
 80057ee:	ed87 7b5a 	vstr	d7, [r7, #360]	@ 0x168
 80057f2:	ed97 5b56 	vldr	d5, [r7, #344]	@ 0x158
 80057f6:	ed97 6b58 	vldr	d6, [r7, #352]	@ 0x160
 80057fa:	ed97 7b5a 	vldr	d7, [r7, #360]	@ 0x168
 80057fe:	eeb0 0a45 	vmov.f32	s0, s10
 8005802:	eef0 0a65 	vmov.f32	s1, s11
 8005806:	eeb0 1a46 	vmov.f32	s2, s12
 800580a:	eef0 1a66 	vmov.f32	s3, s13
 800580e:	eeb0 2a47 	vmov.f32	s4, s14
 8005812:	eef0 2a67 	vmov.f32	s5, s15
 8005816:	f7fc fc63 	bl	80020e0 <vnorm>
 800581a:	ec51 0b10 	vmov	r0, r1, d0
 800581e:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 8005822:	f7fa fd61 	bl	80002e8 <__aeabi_dsub>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4640      	mov	r0, r8
 800582c:	4649      	mov	r1, r9
 800582e:	f7fa ff13 	bl	8000658 <__aeabi_dmul>
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
                                               (vnorm(vdiff(solution, p2))-r2)*(vnorm(vdiff(solution, p2))-r2) +
 8005836:	4620      	mov	r0, r4
 8005838:	4629      	mov	r1, r5
 800583a:	f7fa fd57 	bl	80002ec <__adddf3>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4614      	mov	r4, r2
 8005844:	461d      	mov	r5, r3
                                               (vnorm(vdiff(solution, p4))-r4)*(vnorm(vdiff(solution, p4))-r4));
 8005846:	ed97 3b90 	vldr	d3, [r7, #576]	@ 0x240
 800584a:	ed97 4b92 	vldr	d4, [r7, #584]	@ 0x248
 800584e:	ed97 5b94 	vldr	d5, [r7, #592]	@ 0x250
 8005852:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8005856:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800585a:	ed93 2b00 	vldr	d2, [r3]
 800585e:	ed93 6b02 	vldr	d6, [r3, #8]
 8005862:	ed93 7b04 	vldr	d7, [r3, #16]
 8005866:	eeb0 0a42 	vmov.f32	s0, s4
 800586a:	eef0 0a62 	vmov.f32	s1, s5
 800586e:	eeb0 1a46 	vmov.f32	s2, s12
 8005872:	eef0 1a66 	vmov.f32	s3, s13
 8005876:	eeb0 2a47 	vmov.f32	s4, s14
 800587a:	eef0 2a67 	vmov.f32	s5, s15
 800587e:	f7fc fac7 	bl	8001e10 <vdiff>
 8005882:	eeb0 5a40 	vmov.f32	s10, s0
 8005886:	eef0 5a60 	vmov.f32	s11, s1
 800588a:	eeb0 6a41 	vmov.f32	s12, s2
 800588e:	eef0 6a61 	vmov.f32	s13, s3
 8005892:	eeb0 7a42 	vmov.f32	s14, s4
 8005896:	eef0 7a62 	vmov.f32	s15, s5
 800589a:	ed87 5b5c 	vstr	d5, [r7, #368]	@ 0x170
 800589e:	ed87 6b5e 	vstr	d6, [r7, #376]	@ 0x178
 80058a2:	ed87 7b60 	vstr	d7, [r7, #384]	@ 0x180
 80058a6:	ed97 5b5c 	vldr	d5, [r7, #368]	@ 0x170
 80058aa:	ed97 6b5e 	vldr	d6, [r7, #376]	@ 0x178
 80058ae:	ed97 7b60 	vldr	d7, [r7, #384]	@ 0x180
 80058b2:	eeb0 0a45 	vmov.f32	s0, s10
 80058b6:	eef0 0a65 	vmov.f32	s1, s11
 80058ba:	eeb0 1a46 	vmov.f32	s2, s12
 80058be:	eef0 1a66 	vmov.f32	s3, s13
 80058c2:	eeb0 2a47 	vmov.f32	s4, s14
 80058c6:	eef0 2a67 	vmov.f32	s5, s15
 80058ca:	f7fc fc09 	bl	80020e0 <vnorm>
 80058ce:	ec51 0b10 	vmov	r0, r1, d0
 80058d2:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 80058d6:	f7fa fd07 	bl	80002e8 <__aeabi_dsub>
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	4690      	mov	r8, r2
 80058e0:	4699      	mov	r9, r3
 80058e2:	ed97 3b90 	vldr	d3, [r7, #576]	@ 0x240
 80058e6:	ed97 4b92 	vldr	d4, [r7, #584]	@ 0x248
 80058ea:	ed97 5b94 	vldr	d5, [r7, #592]	@ 0x250
 80058ee:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80058f2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80058f6:	ed93 2b00 	vldr	d2, [r3]
 80058fa:	ed93 6b02 	vldr	d6, [r3, #8]
 80058fe:	ed93 7b04 	vldr	d7, [r3, #16]
 8005902:	eeb0 0a42 	vmov.f32	s0, s4
 8005906:	eef0 0a62 	vmov.f32	s1, s5
 800590a:	eeb0 1a46 	vmov.f32	s2, s12
 800590e:	eef0 1a66 	vmov.f32	s3, s13
 8005912:	eeb0 2a47 	vmov.f32	s4, s14
 8005916:	eef0 2a67 	vmov.f32	s5, s15
 800591a:	f7fc fa79 	bl	8001e10 <vdiff>
 800591e:	eeb0 5a40 	vmov.f32	s10, s0
 8005922:	eef0 5a60 	vmov.f32	s11, s1
 8005926:	eeb0 6a41 	vmov.f32	s12, s2
 800592a:	eef0 6a61 	vmov.f32	s13, s3
 800592e:	eeb0 7a42 	vmov.f32	s14, s4
 8005932:	eef0 7a62 	vmov.f32	s15, s5
 8005936:	ed87 5b62 	vstr	d5, [r7, #392]	@ 0x188
 800593a:	ed87 6b64 	vstr	d6, [r7, #400]	@ 0x190
 800593e:	ed87 7b66 	vstr	d7, [r7, #408]	@ 0x198
 8005942:	ed97 5b62 	vldr	d5, [r7, #392]	@ 0x188
 8005946:	ed97 6b64 	vldr	d6, [r7, #400]	@ 0x190
 800594a:	ed97 7b66 	vldr	d7, [r7, #408]	@ 0x198
 800594e:	eeb0 0a45 	vmov.f32	s0, s10
 8005952:	eef0 0a65 	vmov.f32	s1, s11
 8005956:	eeb0 1a46 	vmov.f32	s2, s12
 800595a:	eef0 1a66 	vmov.f32	s3, s13
 800595e:	eeb0 2a47 	vmov.f32	s4, s14
 8005962:	eef0 2a67 	vmov.f32	s5, s15
 8005966:	f7fc fbbb 	bl	80020e0 <vnorm>
 800596a:	ec51 0b10 	vmov	r0, r1, d0
 800596e:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 8005972:	f7fa fcb9 	bl	80002e8 <__aeabi_dsub>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4640      	mov	r0, r8
 800597c:	4649      	mov	r1, r9
 800597e:	f7fa fe6b 	bl	8000658 <__aeabi_dmul>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
                        *best_3derror   = sqrt((vnorm(vdiff(solution, p1))-r1)*(vnorm(vdiff(solution, p1))-r1) +
 8005986:	4620      	mov	r0, r4
 8005988:	4629      	mov	r1, r5
 800598a:	f7fa fcaf 	bl	80002ec <__adddf3>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	ec43 2b17 	vmov	d7, r2, r3
 8005996:	eeb0 0a47 	vmov.f32	s0, s14
 800599a:	eef0 0a67 	vmov.f32	s1, s15
 800599e:	f009 ffe5 	bl	800f96c <sqrt>
 80059a2:	eeb0 7a40 	vmov.f32	s14, s0
 80059a6:	eef0 7a60 	vmov.f32	s15, s1
 80059aa:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80059ae:	ed83 7b00 	vstr	d7, [r3]
                        *best_gdoprate  = gdoprate_compare1;
 80059b2:	f8d7 121c 	ldr.w	r1, [r7, #540]	@ 0x21c
 80059b6:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 80059ba:	e9c1 2300 	strd	r2, r3, [r1]
                        solution_compare2 = solution_compare1;
 80059be:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80059c2:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 80059c6:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80059ca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80059ce:	4614      	mov	r4, r2
 80059d0:	461d      	mov	r5, r3
 80059d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80059da:	e884 0003 	stmia.w	r4, {r0, r1}
                        gdoprate_compare2 = gdoprate_compare1;
 80059de:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 80059e2:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0
                        *combination = 5 - combination_counter;
 80059e6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80059ea:	f1c3 0205 	rsb	r2, r3, #5
 80059ee:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 80059f2:	601a      	str	r2, [r3, #0]
                        ptemp = p1;
 80059f4:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80059f8:	f5a3 72bc 	sub.w	r2, r3, #376	@ 0x178
 80059fc:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8005a00:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005a04:	4614      	mov	r4, r2
 8005a06:	461d      	mov	r5, r3
 8005a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005a10:	e884 0003 	stmia.w	r4, {r0, r1}
                        p1 = p2;
 8005a14:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8005a18:	f5a3 72e8 	sub.w	r2, r3, #464	@ 0x1d0
 8005a1c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8005a20:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8005a24:	4614      	mov	r4, r2
 8005a26:	461d      	mov	r5, r3
 8005a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005a30:	e884 0003 	stmia.w	r4, {r0, r1}
                        p2 = p3;
 8005a34:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8005a38:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8005a3c:	461d      	mov	r5, r3
 8005a3e:	f507 7408 	add.w	r4, r7, #544	@ 0x220
 8005a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a4a:	e885 0003 	stmia.w	r5, {r0, r1}
                        p3 = p4;
 8005a4e:	f507 7408 	add.w	r4, r7, #544	@ 0x220
 8005a52:	f507 7510 	add.w	r5, r7, #576	@ 0x240
 8005a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005a5e:	e884 0003 	stmia.w	r4, {r0, r1}
                        p4 = ptemp;
 8005a62:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8005a66:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8005a6a:	f507 7410 	add.w	r4, r7, #576	@ 0x240
 8005a6e:	461d      	mov	r5, r3
 8005a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a74:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005a78:	e884 0003 	stmia.w	r4, {r0, r1}
                        rtemp = r1;
 8005a7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005a80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a84:	e9c7 2368 	strd	r2, r3, [r7, #416]	@ 0x1a0
                        r1 = r2;
 8005a88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	f107 0308 	add.w	r3, r7, #8
 8005a92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a96:	e941 2302 	strd	r2, r3, [r1, #-8]
                        r2 = r3;
 8005a9a:	f107 0308 	add.w	r3, r7, #8
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 8005aa4:	e941 2302 	strd	r2, r3, [r1, #-8]
                        r3 = r4;
 8005aa8:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 8005aac:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
                        r4 = rtemp;
 8005ab0:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 8005ab4:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
                        combination_counter--;
 8005ab8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005abc:	3b01      	subs	r3, #1
 8005abe:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                    break;
 8005ac2:	e005      	b.n	8005ad0 <deca_3dlocate+0xaa8>
            }
        }
        else
        {
            //trilateration_errcounter++;
            trilateration_errcounter = 4;
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
            combination_counter = 0;
 8005aca:	2300      	movs	r3, #0
 8005acc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
        //ptemp = p1; p1 = p2; p2 = p3; p3 = p4; p4 = ptemp;
        //rtemp = r1; r1 = r2; r2 = r3; r3 = r4; r4 = rtemp;
        //combination_counter--;
        //qDebug() << "while(combination_counter)" << combination_counter;
    }
    while (combination_counter);
 8005ad0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f47f ab14 	bne.w	8005102 <deca_3dlocate+0xda>

    // if it gives error for all 4 sphere combinations then no valid result is given
    // otherwise return the trilateration mode used
    if (trilateration_errcounter >= 4) return -1;
 8005ada:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	dd02      	ble.n	8005ae8 <deca_3dlocate+0xac0>
 8005ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae6:	e001      	b.n	8005aec <deca_3dlocate+0xac4>
    else return trilateration_mode34;
 8005ae8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0

}
 8005aec:	4618      	mov	r0, r3
 8005aee:	f507 77fe 	add.w	r7, r7, #508	@ 0x1fc
 8005af2:	46bd      	mov	sp, r7
 8005af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005af8 <GetLocation>:


int GetLocation(vec3d *best_solution, int use4thAnchor, vec3d* anchorArray, int *distanceArray)
{
 8005af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005afc:	b0da      	sub	sp, #360	@ 0x168
 8005afe:	af14      	add	r7, sp, #80	@ 0x50
 8005b00:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8005b04:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8005b08:	6020      	str	r0, [r4, #0]
 8005b0a:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8005b0e:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 8005b12:	6001      	str	r1, [r0, #0]
 8005b14:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8005b18:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8005b1c:	600a      	str	r2, [r1, #0]
 8005b1e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8005b22:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8005b26:	6013      	str	r3, [r2, #0]

    vec3d   o1, o2, p1, p2, p3, p4;
    double    r1 = 0, r2 = 0, r3 = 0, r4 = 0, best_3derror, best_gdoprate;
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	f04f 0300 	mov.w	r3, #0
 8005b3c:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8

    vec3d   t3;
    double  dist1, dist2;

    /* Anchors coordinate */
    p1.x = anchorArray[0].x;
 8005b58:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005b5c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    p1.y = anchorArray[0].y;
 8005b6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005b6e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005b78:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    p1.z = anchorArray[0].z;
 8005b7c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005b80:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005b8a:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98

    p2.x = anchorArray[1].x;
 8005b8e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005b92:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3318      	adds	r3, #24
 8005b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    p2.y = anchorArray[1].y;
 8005ba2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005ba6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3318      	adds	r3, #24
 8005bae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005bb2:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    p2.z = anchorArray[1].z;
 8005bb6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005bba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3318      	adds	r3, #24
 8005bc2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005bc6:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

    p3.x = anchorArray[2].x;
 8005bca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005bce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3330      	adds	r3, #48	@ 0x30
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    p3.y = anchorArray[2].y;
 8005bde:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005be2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3330      	adds	r3, #48	@ 0x30
 8005bea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005bee:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    p3.z = anchorArray[2].z;
 8005bf2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005bf6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3330      	adds	r3, #48	@ 0x30
 8005bfe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005c02:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

    p4.x = anchorArray[0].x;
 8005c06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005c0a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    p4.y = anchorArray[0].y;
 8005c18:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005c1c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005c26:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    p4.z = anchorArray[0].z; //4th same as 1st - only 3 used for trilateration
 8005c2a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005c2e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005c38:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    r1 = (double) distanceArray[0] / 1000.0;
 8005c3c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005c40:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fa fc9b 	bl	8000584 <__aeabi_i2d>
 8005c4e:	f04f 0200 	mov.w	r2, #0
 8005c52:	4bd5      	ldr	r3, [pc, #852]	@ (8005fa8 <GetLocation+0x4b0>)
 8005c54:	f7fa fe2a 	bl	80008ac <__aeabi_ddiv>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    r2 = (double) distanceArray[1] / 1000.0;
 8005c60:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005c64:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fa fc88 	bl	8000584 <__aeabi_i2d>
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	4bcb      	ldr	r3, [pc, #812]	@ (8005fa8 <GetLocation+0x4b0>)
 8005c7a:	f7fa fe17 	bl	80008ac <__aeabi_ddiv>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
    r3 = (double) distanceArray[2] / 1000.0;
 8005c86:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005c8a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3308      	adds	r3, #8
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fa fc75 	bl	8000584 <__aeabi_i2d>
 8005c9a:	f04f 0200 	mov.w	r2, #0
 8005c9e:	4bc2      	ldr	r3, [pc, #776]	@ (8005fa8 <GetLocation+0x4b0>)
 8005ca0:	f7fa fe04 	bl	80008ac <__aeabi_ddiv>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100

    //r4 = (double) distanceArray[3] / 1000.0;

    r4 = (double) distanceArray[0] / 1000.0;//4th same as 1st - only 3 used for trilateration
 8005cac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005cb0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fa fc63 	bl	8000584 <__aeabi_i2d>
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	4bb9      	ldr	r3, [pc, #740]	@ (8005fa8 <GetLocation+0x4b0>)
 8005cc4:	f7fa fdf2 	bl	80008ac <__aeabi_ddiv>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
    //printf("r1=%f , r2=%f, r3=%f,  r4=%f\r\n",r1,r2,r3,r4);
    //printf("Anthor0:x = %f,y = %f\r\n",p1.x,p1.y);
    //printf("Anthor1:x = %f,y = %f\r\n",p2.x,p2.y);
    //printf("Anthor2:x = %f,y = %f\r\n",p3.x,p3.y);
    /* get the best location using 3 or 4 spheres and keep it as know_best_location */
    result = deca_3dlocate (&o1, &o2, best_solution, &error, &best_3derror, &best_gdoprate,
 8005cd0:	ed97 4b1c 	vldr	d4, [r7, #112]	@ 0x70
 8005cd4:	ed97 5b1e 	vldr	d5, [r7, #120]	@ 0x78
 8005cd8:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 8005cdc:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 8005ce0:	ed97 1b24 	vldr	d1, [r7, #144]	@ 0x90
 8005ce4:	ed97 2b26 	vldr	d2, [r7, #152]	@ 0x98
 8005ce8:	f107 082c 	add.w	r8, r7, #44	@ 0x2c
 8005cec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005cf0:	f5a3 7686 	sub.w	r6, r3, #268	@ 0x10c
 8005cf4:	f107 0ea0 	add.w	lr, r7, #160	@ 0xa0
 8005cf8:	f107 0cb8 	add.w	ip, r7, #184	@ 0xb8
 8005cfc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005d00:	9312      	str	r3, [sp, #72]	@ 0x48
 8005d02:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8005d06:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005d0a:	ad0a      	add	r5, sp, #40	@ 0x28
 8005d0c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8005d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d18:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d1c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8005d20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005d24:	ad02      	add	r5, sp, #8
 8005d26:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8005d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d32:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	ed97 7b42 	vldr	d7, [r7, #264]	@ 0x108
 8005d46:	ed97 3b44 	vldr	d3, [r7, #272]	@ 0x110
 8005d4a:	4643      	mov	r3, r8
 8005d4c:	6832      	ldr	r2, [r6, #0]
 8005d4e:	4671      	mov	r1, lr
 8005d50:	4660      	mov	r0, ip
 8005d52:	f7ff f969 	bl	8005028 <deca_3dlocate>
 8005d56:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
                            p1, r1, p2, r2, p3, r3, p4, r1, &combination);

    //printf("result = %d\r\n",result);
    //qDebug() << "GetLocation" << result << "sol1: " << o1.x << o1.y << o1.z << " sol2: " << o2.x << o2.y << o2.z;

    if(result >= 0)
 8005d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f2c0 8113 	blt.w	8005f8a <GetLocation+0x492>
    {
        if (use4thAnchor == 1) //if have 4 ranging results, then use 4th anchor to pick solution closest to it
 8005d64:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005d68:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	f040 80e5 	bne.w	8005f3e <GetLocation+0x446>
        {
            double diff1, diff2;
            /* find dist1 as the distance of o1 to known_best_location */
            t3 = vdiff(o1, anchorArray[3]);
 8005d74:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005d78:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3348      	adds	r3, #72	@ 0x48
 8005d80:	ed93 3b00 	vldr	d3, [r3]
 8005d84:	ed93 4b02 	vldr	d4, [r3, #8]
 8005d88:	ed93 5b04 	vldr	d5, [r3, #16]
 8005d8c:	ed97 2b2e 	vldr	d2, [r7, #184]	@ 0xb8
 8005d90:	ed97 6b30 	vldr	d6, [r7, #192]	@ 0xc0
 8005d94:	ed97 7b32 	vldr	d7, [r7, #200]	@ 0xc8
 8005d98:	eeb0 0a42 	vmov.f32	s0, s4
 8005d9c:	eef0 0a62 	vmov.f32	s1, s5
 8005da0:	eeb0 1a46 	vmov.f32	s2, s12
 8005da4:	eef0 1a66 	vmov.f32	s3, s13
 8005da8:	eeb0 2a47 	vmov.f32	s4, s14
 8005dac:	eef0 2a67 	vmov.f32	s5, s15
 8005db0:	f7fc f82e 	bl	8001e10 <vdiff>
 8005db4:	eeb0 5a40 	vmov.f32	s10, s0
 8005db8:	eef0 5a60 	vmov.f32	s11, s1
 8005dbc:	eeb0 6a41 	vmov.f32	s12, s2
 8005dc0:	eef0 6a61 	vmov.f32	s13, s3
 8005dc4:	eeb0 7a42 	vmov.f32	s14, s4
 8005dc8:	eef0 7a62 	vmov.f32	s15, s5
 8005dcc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd4:	ed83 5b00 	vstr	d5, [r3]
 8005dd8:	ed83 6b02 	vstr	d6, [r3, #8]
 8005ddc:	ed83 7b04 	vstr	d7, [r3, #16]
            dist1 = vnorm(t3);
 8005de0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de8:	ed93 5b00 	vldr	d5, [r3]
 8005dec:	ed93 6b02 	vldr	d6, [r3, #8]
 8005df0:	ed93 7b04 	vldr	d7, [r3, #16]
 8005df4:	eeb0 0a45 	vmov.f32	s0, s10
 8005df8:	eef0 0a65 	vmov.f32	s1, s11
 8005dfc:	eeb0 1a46 	vmov.f32	s2, s12
 8005e00:	eef0 1a66 	vmov.f32	s3, s13
 8005e04:	eeb0 2a47 	vmov.f32	s4, s14
 8005e08:	eef0 2a67 	vmov.f32	s5, s15
 8005e0c:	f7fc f968 	bl	80020e0 <vnorm>
 8005e10:	ed87 0b3a 	vstr	d0, [r7, #232]	@ 0xe8

            t3 = vdiff(o2, anchorArray[3]);
 8005e14:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005e18:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3348      	adds	r3, #72	@ 0x48
 8005e20:	ed93 3b00 	vldr	d3, [r3]
 8005e24:	ed93 4b02 	vldr	d4, [r3, #8]
 8005e28:	ed93 5b04 	vldr	d5, [r3, #16]
 8005e2c:	ed97 2b28 	vldr	d2, [r7, #160]	@ 0xa0
 8005e30:	ed97 6b2a 	vldr	d6, [r7, #168]	@ 0xa8
 8005e34:	ed97 7b2c 	vldr	d7, [r7, #176]	@ 0xb0
 8005e38:	eeb0 0a42 	vmov.f32	s0, s4
 8005e3c:	eef0 0a62 	vmov.f32	s1, s5
 8005e40:	eeb0 1a46 	vmov.f32	s2, s12
 8005e44:	eef0 1a66 	vmov.f32	s3, s13
 8005e48:	eeb0 2a47 	vmov.f32	s4, s14
 8005e4c:	eef0 2a67 	vmov.f32	s5, s15
 8005e50:	f7fb ffde 	bl	8001e10 <vdiff>
 8005e54:	eeb0 5a40 	vmov.f32	s10, s0
 8005e58:	eef0 5a60 	vmov.f32	s11, s1
 8005e5c:	eeb0 6a41 	vmov.f32	s12, s2
 8005e60:	eef0 6a61 	vmov.f32	s13, s3
 8005e64:	eeb0 7a42 	vmov.f32	s14, s4
 8005e68:	eef0 7a62 	vmov.f32	s15, s5
 8005e6c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e74:	ed83 5b00 	vstr	d5, [r3]
 8005e78:	ed83 6b02 	vstr	d6, [r3, #8]
 8005e7c:	ed83 7b04 	vstr	d7, [r3, #16]
            dist2 = vnorm(t3);
 8005e80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e88:	ed93 5b00 	vldr	d5, [r3]
 8005e8c:	ed93 6b02 	vldr	d6, [r3, #8]
 8005e90:	ed93 7b04 	vldr	d7, [r3, #16]
 8005e94:	eeb0 0a45 	vmov.f32	s0, s10
 8005e98:	eef0 0a65 	vmov.f32	s1, s11
 8005e9c:	eeb0 1a46 	vmov.f32	s2, s12
 8005ea0:	eef0 1a66 	vmov.f32	s3, s13
 8005ea4:	eeb0 2a47 	vmov.f32	s4, s14
 8005ea8:	eef0 2a67 	vmov.f32	s5, s15
 8005eac:	f7fc f918 	bl	80020e0 <vnorm>
 8005eb0:	ed87 0b38 	vstr	d0, [r7, #224]	@ 0xe0

            /* find the distance closest to received range measurement from 4th anchor */
            diff1 = fabs(r4 - dist1);
 8005eb4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8005eb8:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8005ebc:	f7fa fa14 	bl	80002e8 <__aeabi_dsub>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8005eca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ece:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            diff2 = fabs(r4 - dist2);
 8005ed2:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8005ed6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8005eda:	f7fa fa05 	bl	80002e8 <__aeabi_dsub>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8005ee8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005eec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

            /* pick the closest match to the 4th anchor range */
            if (diff1 < diff2) *best_solution = o1;
 8005ef0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8005ef4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8005ef8:	f7fa fe20 	bl	8000b3c <__aeabi_dcmplt>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00e      	beq.n	8005f20 <GetLocation+0x428>
 8005f02:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005f06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	461d      	mov	r5, r3
 8005f0e:	f107 04b8 	add.w	r4, r7, #184	@ 0xb8
 8005f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f1e:	e034      	b.n	8005f8a <GetLocation+0x492>
            else *best_solution = o2;
 8005f20:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005f24:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	461d      	mov	r5, r3
 8005f2c:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8005f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f38:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f3c:	e025      	b.n	8005f8a <GetLocation+0x492>
        }
        else
        {
            //assume tag is above the anchors (1, 2, and 3)
            if(o1.z >= p1.z) *best_solution = o1;
 8005f3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f42:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8005f46:	f7fa fe0d 	bl	8000b64 <__aeabi_dcmpge>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00e      	beq.n	8005f6e <GetLocation+0x476>
 8005f50:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005f54:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	461d      	mov	r5, r3
 8005f5c:	f107 04b8 	add.w	r4, r7, #184	@ 0xb8
 8005f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f68:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f6c:	e00d      	b.n	8005f8a <GetLocation+0x492>
            else *best_solution = o2;
 8005f6e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005f72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	461d      	mov	r5, r3
 8005f7a:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8005f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f86:	e885 0003 	stmia.w	r5, {r0, r1}
        }
    }

    if (result >= 0)
 8005f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	db02      	blt.n	8005f98 <GetLocation+0x4a0>
    {
        return result;
 8005f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f96:	e001      	b.n	8005f9c <GetLocation+0x4a4>
    }

    //return error
    return -1;
 8005f98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fa8:	408f4000 	.word	0x408f4000

08005fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005fac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005fe4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005fb0:	f7fb ff1c 	bl	8001dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005fb4:	480c      	ldr	r0, [pc, #48]	@ (8005fe8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005fb6:	490d      	ldr	r1, [pc, #52]	@ (8005fec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8005ff0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005fbc:	e002      	b.n	8005fc4 <LoopCopyDataInit>

08005fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005fc2:	3304      	adds	r3, #4

08005fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fc8:	d3f9      	bcc.n	8005fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005fca:	4a0a      	ldr	r2, [pc, #40]	@ (8005ff4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005fcc:	4c0a      	ldr	r4, [pc, #40]	@ (8005ff8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fd0:	e001      	b.n	8005fd6 <LoopFillZerobss>

08005fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fd4:	3204      	adds	r2, #4

08005fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fd8:	d3fb      	bcc.n	8005fd2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005fda:	f007 f871 	bl	800d0c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005fde:	f7fb fb3d 	bl	800165c <main>
  bx  lr    
 8005fe2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005fe4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fec:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8005ff0:	08010344 	.word	0x08010344
  ldr r2, =_sbss
 8005ff4:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8005ff8:	20005130 	.word	0x20005130

08005ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ffc:	e7fe      	b.n	8005ffc <ADC_IRQHandler>
	...

08006000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006004:	4b0e      	ldr	r3, [pc, #56]	@ (8006040 <HAL_Init+0x40>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a0d      	ldr	r2, [pc, #52]	@ (8006040 <HAL_Init+0x40>)
 800600a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800600e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006010:	4b0b      	ldr	r3, [pc, #44]	@ (8006040 <HAL_Init+0x40>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a0a      	ldr	r2, [pc, #40]	@ (8006040 <HAL_Init+0x40>)
 8006016:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800601a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800601c:	4b08      	ldr	r3, [pc, #32]	@ (8006040 <HAL_Init+0x40>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a07      	ldr	r2, [pc, #28]	@ (8006040 <HAL_Init+0x40>)
 8006022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006028:	2003      	movs	r0, #3
 800602a:	f000 f965 	bl	80062f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800602e:	200f      	movs	r0, #15
 8006030:	f000 f808 	bl	8006044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006034:	f7fb fcd2 	bl	80019dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	40023c00 	.word	0x40023c00

08006044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800604c:	4b12      	ldr	r3, [pc, #72]	@ (8006098 <HAL_InitTick+0x54>)
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	4b12      	ldr	r3, [pc, #72]	@ (800609c <HAL_InitTick+0x58>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	4619      	mov	r1, r3
 8006056:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800605a:	fbb3 f3f1 	udiv	r3, r3, r1
 800605e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006062:	4618      	mov	r0, r3
 8006064:	f000 f981 	bl	800636a <HAL_SYSTICK_Config>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e00e      	b.n	8006090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b0f      	cmp	r3, #15
 8006076:	d80a      	bhi.n	800608e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006078:	2200      	movs	r2, #0
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	f04f 30ff 	mov.w	r0, #4294967295
 8006080:	f000 f945 	bl	800630e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006084:	4a06      	ldr	r2, [pc, #24]	@ (80060a0 <HAL_InitTick+0x5c>)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	e000      	b.n	8006090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	2000007c 	.word	0x2000007c
 800609c:	200000cc 	.word	0x200000cc
 80060a0:	200000c8 	.word	0x200000c8

080060a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80060a8:	4b06      	ldr	r3, [pc, #24]	@ (80060c4 <HAL_IncTick+0x20>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	4b06      	ldr	r3, [pc, #24]	@ (80060c8 <HAL_IncTick+0x24>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4413      	add	r3, r2
 80060b4:	4a04      	ldr	r2, [pc, #16]	@ (80060c8 <HAL_IncTick+0x24>)
 80060b6:	6013      	str	r3, [r2, #0]
}
 80060b8:	bf00      	nop
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	200000cc 	.word	0x200000cc
 80060c8:	20000690 	.word	0x20000690

080060cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
  return uwTick;
 80060d0:	4b03      	ldr	r3, [pc, #12]	@ (80060e0 <HAL_GetTick+0x14>)
 80060d2:	681b      	ldr	r3, [r3, #0]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	20000690 	.word	0x20000690

080060e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80060ec:	f7ff ffee 	bl	80060cc <HAL_GetTick>
 80060f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fc:	d005      	beq.n	800610a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80060fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006128 <HAL_Delay+0x44>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800610a:	bf00      	nop
 800610c:	f7ff ffde 	bl	80060cc <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	429a      	cmp	r2, r3
 800611a:	d8f7      	bhi.n	800610c <HAL_Delay+0x28>
  {
  }
}
 800611c:	bf00      	nop
 800611e:	bf00      	nop
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	200000cc 	.word	0x200000cc

0800612c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800613c:	4b0c      	ldr	r3, [pc, #48]	@ (8006170 <__NVIC_SetPriorityGrouping+0x44>)
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006148:	4013      	ands	r3, r2
 800614a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006154:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800615c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800615e:	4a04      	ldr	r2, [pc, #16]	@ (8006170 <__NVIC_SetPriorityGrouping+0x44>)
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	60d3      	str	r3, [r2, #12]
}
 8006164:	bf00      	nop
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	e000ed00 	.word	0xe000ed00

08006174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006174:	b480      	push	{r7}
 8006176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006178:	4b04      	ldr	r3, [pc, #16]	@ (800618c <__NVIC_GetPriorityGrouping+0x18>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	0a1b      	lsrs	r3, r3, #8
 800617e:	f003 0307 	and.w	r3, r3, #7
}
 8006182:	4618      	mov	r0, r3
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	e000ed00 	.word	0xe000ed00

08006190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	4603      	mov	r3, r0
 8006198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800619a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	db0b      	blt.n	80061ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	f003 021f 	and.w	r2, r3, #31
 80061a8:	4907      	ldr	r1, [pc, #28]	@ (80061c8 <__NVIC_EnableIRQ+0x38>)
 80061aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	2001      	movs	r0, #1
 80061b2:	fa00 f202 	lsl.w	r2, r0, r2
 80061b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	e000e100 	.word	0xe000e100

080061cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	6039      	str	r1, [r7, #0]
 80061d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	db0a      	blt.n	80061f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	490c      	ldr	r1, [pc, #48]	@ (8006218 <__NVIC_SetPriority+0x4c>)
 80061e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ea:	0112      	lsls	r2, r2, #4
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	440b      	add	r3, r1
 80061f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061f4:	e00a      	b.n	800620c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	4908      	ldr	r1, [pc, #32]	@ (800621c <__NVIC_SetPriority+0x50>)
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	3b04      	subs	r3, #4
 8006204:	0112      	lsls	r2, r2, #4
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	440b      	add	r3, r1
 800620a:	761a      	strb	r2, [r3, #24]
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	e000e100 	.word	0xe000e100
 800621c:	e000ed00 	.word	0xe000ed00

08006220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006220:	b480      	push	{r7}
 8006222:	b089      	sub	sp, #36	@ 0x24
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	f1c3 0307 	rsb	r3, r3, #7
 800623a:	2b04      	cmp	r3, #4
 800623c:	bf28      	it	cs
 800623e:	2304      	movcs	r3, #4
 8006240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	3304      	adds	r3, #4
 8006246:	2b06      	cmp	r3, #6
 8006248:	d902      	bls.n	8006250 <NVIC_EncodePriority+0x30>
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	3b03      	subs	r3, #3
 800624e:	e000      	b.n	8006252 <NVIC_EncodePriority+0x32>
 8006250:	2300      	movs	r3, #0
 8006252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006254:	f04f 32ff 	mov.w	r2, #4294967295
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	43da      	mvns	r2, r3
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	401a      	ands	r2, r3
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006268:	f04f 31ff 	mov.w	r1, #4294967295
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	fa01 f303 	lsl.w	r3, r1, r3
 8006272:	43d9      	mvns	r1, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006278:	4313      	orrs	r3, r2
         );
}
 800627a:	4618      	mov	r0, r3
 800627c:	3724      	adds	r7, #36	@ 0x24
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
	...

08006288 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800628c:	f3bf 8f4f 	dsb	sy
}
 8006290:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006292:	4b06      	ldr	r3, [pc, #24]	@ (80062ac <__NVIC_SystemReset+0x24>)
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800629a:	4904      	ldr	r1, [pc, #16]	@ (80062ac <__NVIC_SystemReset+0x24>)
 800629c:	4b04      	ldr	r3, [pc, #16]	@ (80062b0 <__NVIC_SystemReset+0x28>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80062a2:	f3bf 8f4f 	dsb	sy
}
 80062a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80062a8:	bf00      	nop
 80062aa:	e7fd      	b.n	80062a8 <__NVIC_SystemReset+0x20>
 80062ac:	e000ed00 	.word	0xe000ed00
 80062b0:	05fa0004 	.word	0x05fa0004

080062b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3b01      	subs	r3, #1
 80062c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062c4:	d301      	bcc.n	80062ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062c6:	2301      	movs	r3, #1
 80062c8:	e00f      	b.n	80062ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062ca:	4a0a      	ldr	r2, [pc, #40]	@ (80062f4 <SysTick_Config+0x40>)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062d2:	210f      	movs	r1, #15
 80062d4:	f04f 30ff 	mov.w	r0, #4294967295
 80062d8:	f7ff ff78 	bl	80061cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062dc:	4b05      	ldr	r3, [pc, #20]	@ (80062f4 <SysTick_Config+0x40>)
 80062de:	2200      	movs	r2, #0
 80062e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062e2:	4b04      	ldr	r3, [pc, #16]	@ (80062f4 <SysTick_Config+0x40>)
 80062e4:	2207      	movs	r2, #7
 80062e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	e000e010 	.word	0xe000e010

080062f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff ff13 	bl	800612c <__NVIC_SetPriorityGrouping>
}
 8006306:	bf00      	nop
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800630e:	b580      	push	{r7, lr}
 8006310:	b086      	sub	sp, #24
 8006312:	af00      	add	r7, sp, #0
 8006314:	4603      	mov	r3, r0
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	607a      	str	r2, [r7, #4]
 800631a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800631c:	2300      	movs	r3, #0
 800631e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006320:	f7ff ff28 	bl	8006174 <__NVIC_GetPriorityGrouping>
 8006324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	6978      	ldr	r0, [r7, #20]
 800632c:	f7ff ff78 	bl	8006220 <NVIC_EncodePriority>
 8006330:	4602      	mov	r2, r0
 8006332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006336:	4611      	mov	r1, r2
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff ff47 	bl	80061cc <__NVIC_SetPriority>
}
 800633e:	bf00      	nop
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b082      	sub	sp, #8
 800634a:	af00      	add	r7, sp, #0
 800634c:	4603      	mov	r3, r0
 800634e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff ff1b 	bl	8006190 <__NVIC_EnableIRQ>
}
 800635a:	bf00      	nop
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006366:	f7ff ff8f 	bl	8006288 <__NVIC_SystemReset>

0800636a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7ff ff9e 	bl	80062b4 <SysTick_Config>
 8006378:	4603      	mov	r3, r0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b084      	sub	sp, #16
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800638e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006390:	f7ff fe9c 	bl	80060cc <HAL_GetTick>
 8006394:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d008      	beq.n	80063b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2280      	movs	r2, #128	@ 0x80
 80063a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e052      	b.n	800645a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0216 	bic.w	r2, r2, #22
 80063c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695a      	ldr	r2, [r3, #20]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d103      	bne.n	80063e4 <HAL_DMA_Abort+0x62>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d007      	beq.n	80063f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0208 	bic.w	r2, r2, #8
 80063f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0201 	bic.w	r2, r2, #1
 8006402:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006404:	e013      	b.n	800642e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006406:	f7ff fe61 	bl	80060cc <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	2b05      	cmp	r3, #5
 8006412:	d90c      	bls.n	800642e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2220      	movs	r2, #32
 8006418:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2203      	movs	r2, #3
 800641e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e015      	b.n	800645a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e4      	bne.n	8006406 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006440:	223f      	movs	r2, #63	@ 0x3f
 8006442:	409a      	lsls	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b02      	cmp	r3, #2
 8006474:	d004      	beq.n	8006480 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2280      	movs	r2, #128	@ 0x80
 800647a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e00c      	b.n	800649a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2205      	movs	r2, #5
 8006484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0201 	bic.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
	...

080064a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b089      	sub	sp, #36	@ 0x24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
 80064c2:	e165      	b.n	8006790 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064c4:	2201      	movs	r2, #1
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	fa02 f303 	lsl.w	r3, r2, r3
 80064cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4013      	ands	r3, r2
 80064d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	429a      	cmp	r2, r3
 80064de:	f040 8154 	bne.w	800678a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d005      	beq.n	80064fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d130      	bne.n	800655c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	2203      	movs	r2, #3
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	43db      	mvns	r3, r3
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	4013      	ands	r3, r2
 8006510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	4313      	orrs	r3, r2
 8006522:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006530:	2201      	movs	r2, #1
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	43db      	mvns	r3, r3
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	4013      	ands	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	091b      	lsrs	r3, r3, #4
 8006546:	f003 0201 	and.w	r2, r3, #1
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	fa02 f303 	lsl.w	r3, r2, r3
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	4313      	orrs	r3, r2
 8006554:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f003 0303 	and.w	r3, r3, #3
 8006564:	2b03      	cmp	r3, #3
 8006566:	d017      	beq.n	8006598 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	2203      	movs	r2, #3
 8006574:	fa02 f303 	lsl.w	r3, r2, r3
 8006578:	43db      	mvns	r3, r3
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	4013      	ands	r3, r2
 800657e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	4313      	orrs	r3, r2
 8006590:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f003 0303 	and.w	r3, r3, #3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d123      	bne.n	80065ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	08da      	lsrs	r2, r3, #3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	3208      	adds	r2, #8
 80065ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	f003 0307 	and.w	r3, r3, #7
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	220f      	movs	r2, #15
 80065bc:	fa02 f303 	lsl.w	r3, r2, r3
 80065c0:	43db      	mvns	r3, r3
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	4013      	ands	r3, r2
 80065c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	fa02 f303 	lsl.w	r3, r2, r3
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	4313      	orrs	r3, r2
 80065dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	08da      	lsrs	r2, r3, #3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3208      	adds	r2, #8
 80065e6:	69b9      	ldr	r1, [r7, #24]
 80065e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	2203      	movs	r2, #3
 80065f8:	fa02 f303 	lsl.w	r3, r2, r3
 80065fc:	43db      	mvns	r3, r3
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	4013      	ands	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f003 0203 	and.w	r2, r3, #3
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	fa02 f303 	lsl.w	r3, r2, r3
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	4313      	orrs	r3, r2
 8006618:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 80ae 	beq.w	800678a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	4b5d      	ldr	r3, [pc, #372]	@ (80067a8 <HAL_GPIO_Init+0x300>)
 8006634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006636:	4a5c      	ldr	r2, [pc, #368]	@ (80067a8 <HAL_GPIO_Init+0x300>)
 8006638:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800663c:	6453      	str	r3, [r2, #68]	@ 0x44
 800663e:	4b5a      	ldr	r3, [pc, #360]	@ (80067a8 <HAL_GPIO_Init+0x300>)
 8006640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006642:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800664a:	4a58      	ldr	r2, [pc, #352]	@ (80067ac <HAL_GPIO_Init+0x304>)
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	089b      	lsrs	r3, r3, #2
 8006650:	3302      	adds	r3, #2
 8006652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	f003 0303 	and.w	r3, r3, #3
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	220f      	movs	r2, #15
 8006662:	fa02 f303 	lsl.w	r3, r2, r3
 8006666:	43db      	mvns	r3, r3
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	4013      	ands	r3, r2
 800666c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a4f      	ldr	r2, [pc, #316]	@ (80067b0 <HAL_GPIO_Init+0x308>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d025      	beq.n	80066c2 <HAL_GPIO_Init+0x21a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a4e      	ldr	r2, [pc, #312]	@ (80067b4 <HAL_GPIO_Init+0x30c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d01f      	beq.n	80066be <HAL_GPIO_Init+0x216>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a4d      	ldr	r2, [pc, #308]	@ (80067b8 <HAL_GPIO_Init+0x310>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d019      	beq.n	80066ba <HAL_GPIO_Init+0x212>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a4c      	ldr	r2, [pc, #304]	@ (80067bc <HAL_GPIO_Init+0x314>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d013      	beq.n	80066b6 <HAL_GPIO_Init+0x20e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a4b      	ldr	r2, [pc, #300]	@ (80067c0 <HAL_GPIO_Init+0x318>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00d      	beq.n	80066b2 <HAL_GPIO_Init+0x20a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a4a      	ldr	r2, [pc, #296]	@ (80067c4 <HAL_GPIO_Init+0x31c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d007      	beq.n	80066ae <HAL_GPIO_Init+0x206>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a49      	ldr	r2, [pc, #292]	@ (80067c8 <HAL_GPIO_Init+0x320>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d101      	bne.n	80066aa <HAL_GPIO_Init+0x202>
 80066a6:	2306      	movs	r3, #6
 80066a8:	e00c      	b.n	80066c4 <HAL_GPIO_Init+0x21c>
 80066aa:	2307      	movs	r3, #7
 80066ac:	e00a      	b.n	80066c4 <HAL_GPIO_Init+0x21c>
 80066ae:	2305      	movs	r3, #5
 80066b0:	e008      	b.n	80066c4 <HAL_GPIO_Init+0x21c>
 80066b2:	2304      	movs	r3, #4
 80066b4:	e006      	b.n	80066c4 <HAL_GPIO_Init+0x21c>
 80066b6:	2303      	movs	r3, #3
 80066b8:	e004      	b.n	80066c4 <HAL_GPIO_Init+0x21c>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e002      	b.n	80066c4 <HAL_GPIO_Init+0x21c>
 80066be:	2301      	movs	r3, #1
 80066c0:	e000      	b.n	80066c4 <HAL_GPIO_Init+0x21c>
 80066c2:	2300      	movs	r3, #0
 80066c4:	69fa      	ldr	r2, [r7, #28]
 80066c6:	f002 0203 	and.w	r2, r2, #3
 80066ca:	0092      	lsls	r2, r2, #2
 80066cc:	4093      	lsls	r3, r2
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066d4:	4935      	ldr	r1, [pc, #212]	@ (80067ac <HAL_GPIO_Init+0x304>)
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	089b      	lsrs	r3, r3, #2
 80066da:	3302      	adds	r3, #2
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066e2:	4b3a      	ldr	r3, [pc, #232]	@ (80067cc <HAL_GPIO_Init+0x324>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	43db      	mvns	r3, r3
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	4013      	ands	r3, r2
 80066f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4313      	orrs	r3, r2
 8006704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006706:	4a31      	ldr	r2, [pc, #196]	@ (80067cc <HAL_GPIO_Init+0x324>)
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800670c:	4b2f      	ldr	r3, [pc, #188]	@ (80067cc <HAL_GPIO_Init+0x324>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	43db      	mvns	r3, r3
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	4013      	ands	r3, r2
 800671a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006730:	4a26      	ldr	r2, [pc, #152]	@ (80067cc <HAL_GPIO_Init+0x324>)
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006736:	4b25      	ldr	r3, [pc, #148]	@ (80067cc <HAL_GPIO_Init+0x324>)
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	43db      	mvns	r3, r3
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	4013      	ands	r3, r2
 8006744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	4313      	orrs	r3, r2
 8006758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800675a:	4a1c      	ldr	r2, [pc, #112]	@ (80067cc <HAL_GPIO_Init+0x324>)
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006760:	4b1a      	ldr	r3, [pc, #104]	@ (80067cc <HAL_GPIO_Init+0x324>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	43db      	mvns	r3, r3
 800676a:	69ba      	ldr	r2, [r7, #24]
 800676c:	4013      	ands	r3, r2
 800676e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	4313      	orrs	r3, r2
 8006782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006784:	4a11      	ldr	r2, [pc, #68]	@ (80067cc <HAL_GPIO_Init+0x324>)
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	3301      	adds	r3, #1
 800678e:	61fb      	str	r3, [r7, #28]
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	2b0f      	cmp	r3, #15
 8006794:	f67f ae96 	bls.w	80064c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006798:	bf00      	nop
 800679a:	bf00      	nop
 800679c:	3724      	adds	r7, #36	@ 0x24
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40023800 	.word	0x40023800
 80067ac:	40013800 	.word	0x40013800
 80067b0:	40020000 	.word	0x40020000
 80067b4:	40020400 	.word	0x40020400
 80067b8:	40020800 	.word	0x40020800
 80067bc:	40020c00 	.word	0x40020c00
 80067c0:	40021000 	.word	0x40021000
 80067c4:	40021400 	.word	0x40021400
 80067c8:	40021800 	.word	0x40021800
 80067cc:	40013c00 	.word	0x40013c00

080067d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	807b      	strh	r3, [r7, #2]
 80067dc:	4613      	mov	r3, r2
 80067de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067e0:	787b      	ldrb	r3, [r7, #1]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067e6:	887a      	ldrh	r2, [r7, #2]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067ec:	e003      	b.n	80067f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067ee:	887b      	ldrh	r3, [r7, #2]
 80067f0:	041a      	lsls	r2, r3, #16
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	619a      	str	r2, [r3, #24]
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006814:	887a      	ldrh	r2, [r7, #2]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4013      	ands	r3, r2
 800681a:	041a      	lsls	r2, r3, #16
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	43d9      	mvns	r1, r3
 8006820:	887b      	ldrh	r3, [r7, #2]
 8006822:	400b      	ands	r3, r1
 8006824:	431a      	orrs	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	619a      	str	r2, [r3, #24]
}
 800682a:	bf00      	nop
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
	...

08006838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e0cc      	b.n	80069e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800684c:	4b68      	ldr	r3, [pc, #416]	@ (80069f0 <HAL_RCC_ClockConfig+0x1b8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 030f 	and.w	r3, r3, #15
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d90c      	bls.n	8006874 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800685a:	4b65      	ldr	r3, [pc, #404]	@ (80069f0 <HAL_RCC_ClockConfig+0x1b8>)
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006862:	4b63      	ldr	r3, [pc, #396]	@ (80069f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d001      	beq.n	8006874 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e0b8      	b.n	80069e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d020      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d005      	beq.n	8006898 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800688c:	4b59      	ldr	r3, [pc, #356]	@ (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	4a58      	ldr	r2, [pc, #352]	@ (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006892:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006896:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d005      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068a4:	4b53      	ldr	r3, [pc, #332]	@ (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	4a52      	ldr	r2, [pc, #328]	@ (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80068ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068b0:	4b50      	ldr	r3, [pc, #320]	@ (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	494d      	ldr	r1, [pc, #308]	@ (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d044      	beq.n	8006958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d107      	bne.n	80068e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068d6:	4b47      	ldr	r3, [pc, #284]	@ (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d119      	bne.n	8006916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e07f      	b.n	80069e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d003      	beq.n	80068f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d107      	bne.n	8006906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068f6:	4b3f      	ldr	r3, [pc, #252]	@ (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e06f      	b.n	80069e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006906:	4b3b      	ldr	r3, [pc, #236]	@ (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e067      	b.n	80069e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006916:	4b37      	ldr	r3, [pc, #220]	@ (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f023 0203 	bic.w	r2, r3, #3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	4934      	ldr	r1, [pc, #208]	@ (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006924:	4313      	orrs	r3, r2
 8006926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006928:	f7ff fbd0 	bl	80060cc <HAL_GetTick>
 800692c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800692e:	e00a      	b.n	8006946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006930:	f7ff fbcc 	bl	80060cc <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800693e:	4293      	cmp	r3, r2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e04f      	b.n	80069e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006946:	4b2b      	ldr	r3, [pc, #172]	@ (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 020c 	and.w	r2, r3, #12
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	429a      	cmp	r2, r3
 8006956:	d1eb      	bne.n	8006930 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006958:	4b25      	ldr	r3, [pc, #148]	@ (80069f0 <HAL_RCC_ClockConfig+0x1b8>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 030f 	and.w	r3, r3, #15
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d20c      	bcs.n	8006980 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006966:	4b22      	ldr	r3, [pc, #136]	@ (80069f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800696e:	4b20      	ldr	r3, [pc, #128]	@ (80069f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	d001      	beq.n	8006980 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e032      	b.n	80069e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	d008      	beq.n	800699e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800698c:	4b19      	ldr	r3, [pc, #100]	@ (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	4916      	ldr	r1, [pc, #88]	@ (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 800699a:	4313      	orrs	r3, r2
 800699c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d009      	beq.n	80069be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069aa:	4b12      	ldr	r3, [pc, #72]	@ (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	490e      	ldr	r1, [pc, #56]	@ (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069be:	f000 f855 	bl	8006a6c <HAL_RCC_GetSysClockFreq>
 80069c2:	4602      	mov	r2, r0
 80069c4:	4b0b      	ldr	r3, [pc, #44]	@ (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	091b      	lsrs	r3, r3, #4
 80069ca:	f003 030f 	and.w	r3, r3, #15
 80069ce:	490a      	ldr	r1, [pc, #40]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c0>)
 80069d0:	5ccb      	ldrb	r3, [r1, r3]
 80069d2:	fa22 f303 	lsr.w	r3, r2, r3
 80069d6:	4a09      	ldr	r2, [pc, #36]	@ (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 80069d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80069da:	4b09      	ldr	r3, [pc, #36]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c8>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff fb30 	bl	8006044 <HAL_InitTick>

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	40023c00 	.word	0x40023c00
 80069f4:	40023800 	.word	0x40023800
 80069f8:	0800fe94 	.word	0x0800fe94
 80069fc:	2000007c 	.word	0x2000007c
 8006a00:	200000c8 	.word	0x200000c8

08006a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a08:	4b03      	ldr	r3, [pc, #12]	@ (8006a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	2000007c 	.word	0x2000007c

08006a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a20:	f7ff fff0 	bl	8006a04 <HAL_RCC_GetHCLKFreq>
 8006a24:	4602      	mov	r2, r0
 8006a26:	4b05      	ldr	r3, [pc, #20]	@ (8006a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	0a9b      	lsrs	r3, r3, #10
 8006a2c:	f003 0307 	and.w	r3, r3, #7
 8006a30:	4903      	ldr	r1, [pc, #12]	@ (8006a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a32:	5ccb      	ldrb	r3, [r1, r3]
 8006a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	0800fea4 	.word	0x0800fea4

08006a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a48:	f7ff ffdc 	bl	8006a04 <HAL_RCC_GetHCLKFreq>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	4b05      	ldr	r3, [pc, #20]	@ (8006a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	0b5b      	lsrs	r3, r3, #13
 8006a54:	f003 0307 	and.w	r3, r3, #7
 8006a58:	4903      	ldr	r1, [pc, #12]	@ (8006a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a5a:	5ccb      	ldrb	r3, [r1, r3]
 8006a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	40023800 	.word	0x40023800
 8006a68:	0800fea4 	.word	0x0800fea4

08006a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a70:	b0ae      	sub	sp, #184	@ 0xb8
 8006a72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a92:	4bcb      	ldr	r3, [pc, #812]	@ (8006dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 030c 	and.w	r3, r3, #12
 8006a9a:	2b0c      	cmp	r3, #12
 8006a9c:	f200 8206 	bhi.w	8006eac <HAL_RCC_GetSysClockFreq+0x440>
 8006aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa6:	bf00      	nop
 8006aa8:	08006add 	.word	0x08006add
 8006aac:	08006ead 	.word	0x08006ead
 8006ab0:	08006ead 	.word	0x08006ead
 8006ab4:	08006ead 	.word	0x08006ead
 8006ab8:	08006ae5 	.word	0x08006ae5
 8006abc:	08006ead 	.word	0x08006ead
 8006ac0:	08006ead 	.word	0x08006ead
 8006ac4:	08006ead 	.word	0x08006ead
 8006ac8:	08006aed 	.word	0x08006aed
 8006acc:	08006ead 	.word	0x08006ead
 8006ad0:	08006ead 	.word	0x08006ead
 8006ad4:	08006ead 	.word	0x08006ead
 8006ad8:	08006cdd 	.word	0x08006cdd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006adc:	4bb9      	ldr	r3, [pc, #740]	@ (8006dc4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006ade:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006ae2:	e1e7      	b.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ae4:	4bb8      	ldr	r3, [pc, #736]	@ (8006dc8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006aea:	e1e3      	b.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006aec:	4bb4      	ldr	r3, [pc, #720]	@ (8006dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006af4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006af8:	4bb1      	ldr	r3, [pc, #708]	@ (8006dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d071      	beq.n	8006be8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b04:	4bae      	ldr	r3, [pc, #696]	@ (8006dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	099b      	lsrs	r3, r3, #6
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b10:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b20:	2300      	movs	r3, #0
 8006b22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006b2a:	4622      	mov	r2, r4
 8006b2c:	462b      	mov	r3, r5
 8006b2e:	f04f 0000 	mov.w	r0, #0
 8006b32:	f04f 0100 	mov.w	r1, #0
 8006b36:	0159      	lsls	r1, r3, #5
 8006b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b3c:	0150      	lsls	r0, r2, #5
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	4621      	mov	r1, r4
 8006b44:	1a51      	subs	r1, r2, r1
 8006b46:	6439      	str	r1, [r7, #64]	@ 0x40
 8006b48:	4629      	mov	r1, r5
 8006b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8006b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	f04f 0300 	mov.w	r3, #0
 8006b58:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	018b      	lsls	r3, r1, #6
 8006b60:	4641      	mov	r1, r8
 8006b62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b66:	4641      	mov	r1, r8
 8006b68:	018a      	lsls	r2, r1, #6
 8006b6a:	4641      	mov	r1, r8
 8006b6c:	1a51      	subs	r1, r2, r1
 8006b6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006b70:	4649      	mov	r1, r9
 8006b72:	eb63 0301 	sbc.w	r3, r3, r1
 8006b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006b84:	4649      	mov	r1, r9
 8006b86:	00cb      	lsls	r3, r1, #3
 8006b88:	4641      	mov	r1, r8
 8006b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b8e:	4641      	mov	r1, r8
 8006b90:	00ca      	lsls	r2, r1, #3
 8006b92:	4610      	mov	r0, r2
 8006b94:	4619      	mov	r1, r3
 8006b96:	4603      	mov	r3, r0
 8006b98:	4622      	mov	r2, r4
 8006b9a:	189b      	adds	r3, r3, r2
 8006b9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b9e:	462b      	mov	r3, r5
 8006ba0:	460a      	mov	r2, r1
 8006ba2:	eb42 0303 	adc.w	r3, r2, r3
 8006ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	f04f 0300 	mov.w	r3, #0
 8006bb0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	024b      	lsls	r3, r1, #9
 8006bb8:	4621      	mov	r1, r4
 8006bba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	024a      	lsls	r2, r1, #9
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006bd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006bd4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006bd8:	f7fa f886 	bl	8000ce8 <__aeabi_uldivmod>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4613      	mov	r3, r2
 8006be2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006be6:	e067      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006be8:	4b75      	ldr	r3, [pc, #468]	@ (8006dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	099b      	lsrs	r3, r3, #6
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006bf4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006bf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c02:	2300      	movs	r3, #0
 8006c04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c06:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006c0a:	4622      	mov	r2, r4
 8006c0c:	462b      	mov	r3, r5
 8006c0e:	f04f 0000 	mov.w	r0, #0
 8006c12:	f04f 0100 	mov.w	r1, #0
 8006c16:	0159      	lsls	r1, r3, #5
 8006c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c1c:	0150      	lsls	r0, r2, #5
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4621      	mov	r1, r4
 8006c24:	1a51      	subs	r1, r2, r1
 8006c26:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c28:	4629      	mov	r1, r5
 8006c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8006c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c30:	f04f 0200 	mov.w	r2, #0
 8006c34:	f04f 0300 	mov.w	r3, #0
 8006c38:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006c3c:	4649      	mov	r1, r9
 8006c3e:	018b      	lsls	r3, r1, #6
 8006c40:	4641      	mov	r1, r8
 8006c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c46:	4641      	mov	r1, r8
 8006c48:	018a      	lsls	r2, r1, #6
 8006c4a:	4641      	mov	r1, r8
 8006c4c:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c50:	4649      	mov	r1, r9
 8006c52:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c56:	f04f 0200 	mov.w	r2, #0
 8006c5a:	f04f 0300 	mov.w	r3, #0
 8006c5e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c62:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c6a:	4692      	mov	sl, r2
 8006c6c:	469b      	mov	fp, r3
 8006c6e:	4623      	mov	r3, r4
 8006c70:	eb1a 0303 	adds.w	r3, sl, r3
 8006c74:	623b      	str	r3, [r7, #32]
 8006c76:	462b      	mov	r3, r5
 8006c78:	eb4b 0303 	adc.w	r3, fp, r3
 8006c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c7e:	f04f 0200 	mov.w	r2, #0
 8006c82:	f04f 0300 	mov.w	r3, #0
 8006c86:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	028b      	lsls	r3, r1, #10
 8006c8e:	4621      	mov	r1, r4
 8006c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c94:	4621      	mov	r1, r4
 8006c96:	028a      	lsls	r2, r1, #10
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ca4:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ca6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006caa:	f7fa f81d 	bl	8000ce8 <__aeabi_uldivmod>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006cb8:	4b41      	ldr	r3, [pc, #260]	@ (8006dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	0c1b      	lsrs	r3, r3, #16
 8006cbe:	f003 0303 	and.w	r3, r3, #3
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006cce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006cda:	e0eb      	b.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cdc:	4b38      	ldr	r3, [pc, #224]	@ (8006dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ce8:	4b35      	ldr	r3, [pc, #212]	@ (8006dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d06b      	beq.n	8006dcc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cf4:	4b32      	ldr	r3, [pc, #200]	@ (8006dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	099b      	lsrs	r3, r3, #6
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006d00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d06:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d08:	2300      	movs	r3, #0
 8006d0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d0c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006d10:	4622      	mov	r2, r4
 8006d12:	462b      	mov	r3, r5
 8006d14:	f04f 0000 	mov.w	r0, #0
 8006d18:	f04f 0100 	mov.w	r1, #0
 8006d1c:	0159      	lsls	r1, r3, #5
 8006d1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d22:	0150      	lsls	r0, r2, #5
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	4621      	mov	r1, r4
 8006d2a:	1a51      	subs	r1, r2, r1
 8006d2c:	61b9      	str	r1, [r7, #24]
 8006d2e:	4629      	mov	r1, r5
 8006d30:	eb63 0301 	sbc.w	r3, r3, r1
 8006d34:	61fb      	str	r3, [r7, #28]
 8006d36:	f04f 0200 	mov.w	r2, #0
 8006d3a:	f04f 0300 	mov.w	r3, #0
 8006d3e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006d42:	4659      	mov	r1, fp
 8006d44:	018b      	lsls	r3, r1, #6
 8006d46:	4651      	mov	r1, sl
 8006d48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d4c:	4651      	mov	r1, sl
 8006d4e:	018a      	lsls	r2, r1, #6
 8006d50:	4651      	mov	r1, sl
 8006d52:	ebb2 0801 	subs.w	r8, r2, r1
 8006d56:	4659      	mov	r1, fp
 8006d58:	eb63 0901 	sbc.w	r9, r3, r1
 8006d5c:	f04f 0200 	mov.w	r2, #0
 8006d60:	f04f 0300 	mov.w	r3, #0
 8006d64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d70:	4690      	mov	r8, r2
 8006d72:	4699      	mov	r9, r3
 8006d74:	4623      	mov	r3, r4
 8006d76:	eb18 0303 	adds.w	r3, r8, r3
 8006d7a:	613b      	str	r3, [r7, #16]
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	eb49 0303 	adc.w	r3, r9, r3
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006d90:	4629      	mov	r1, r5
 8006d92:	024b      	lsls	r3, r1, #9
 8006d94:	4621      	mov	r1, r4
 8006d96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	024a      	lsls	r2, r1, #9
 8006d9e:	4610      	mov	r0, r2
 8006da0:	4619      	mov	r1, r3
 8006da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006da6:	2200      	movs	r2, #0
 8006da8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006daa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006dac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006db0:	f7f9 ff9a 	bl	8000ce8 <__aeabi_uldivmod>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4613      	mov	r3, r2
 8006dba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dbe:	e065      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x420>
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	00f42400 	.word	0x00f42400
 8006dc8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8006ec4 <HAL_RCC_GetSysClockFreq+0x458>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	099b      	lsrs	r3, r3, #6
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ddc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dde:	2300      	movs	r3, #0
 8006de0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006de2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006de6:	4642      	mov	r2, r8
 8006de8:	464b      	mov	r3, r9
 8006dea:	f04f 0000 	mov.w	r0, #0
 8006dee:	f04f 0100 	mov.w	r1, #0
 8006df2:	0159      	lsls	r1, r3, #5
 8006df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006df8:	0150      	lsls	r0, r2, #5
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4641      	mov	r1, r8
 8006e00:	1a51      	subs	r1, r2, r1
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	4649      	mov	r1, r9
 8006e06:	eb63 0301 	sbc.w	r3, r3, r1
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006e18:	4659      	mov	r1, fp
 8006e1a:	018b      	lsls	r3, r1, #6
 8006e1c:	4651      	mov	r1, sl
 8006e1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e22:	4651      	mov	r1, sl
 8006e24:	018a      	lsls	r2, r1, #6
 8006e26:	4651      	mov	r1, sl
 8006e28:	1a54      	subs	r4, r2, r1
 8006e2a:	4659      	mov	r1, fp
 8006e2c:	eb63 0501 	sbc.w	r5, r3, r1
 8006e30:	f04f 0200 	mov.w	r2, #0
 8006e34:	f04f 0300 	mov.w	r3, #0
 8006e38:	00eb      	lsls	r3, r5, #3
 8006e3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e3e:	00e2      	lsls	r2, r4, #3
 8006e40:	4614      	mov	r4, r2
 8006e42:	461d      	mov	r5, r3
 8006e44:	4643      	mov	r3, r8
 8006e46:	18e3      	adds	r3, r4, r3
 8006e48:	603b      	str	r3, [r7, #0]
 8006e4a:	464b      	mov	r3, r9
 8006e4c:	eb45 0303 	adc.w	r3, r5, r3
 8006e50:	607b      	str	r3, [r7, #4]
 8006e52:	f04f 0200 	mov.w	r2, #0
 8006e56:	f04f 0300 	mov.w	r3, #0
 8006e5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e5e:	4629      	mov	r1, r5
 8006e60:	028b      	lsls	r3, r1, #10
 8006e62:	4621      	mov	r1, r4
 8006e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e68:	4621      	mov	r1, r4
 8006e6a:	028a      	lsls	r2, r1, #10
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4619      	mov	r1, r3
 8006e70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e74:	2200      	movs	r2, #0
 8006e76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e78:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006e7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006e7e:	f7f9 ff33 	bl	8000ce8 <__aeabi_uldivmod>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4613      	mov	r3, r2
 8006e88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec4 <HAL_RCC_GetSysClockFreq+0x458>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	0f1b      	lsrs	r3, r3, #28
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006e9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006eaa:	e003      	b.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006eac:	4b06      	ldr	r3, [pc, #24]	@ (8006ec8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006eae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006eb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006eb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	37b8      	adds	r7, #184	@ 0xb8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ec2:	bf00      	nop
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	00f42400 	.word	0x00f42400

08006ecc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e28d      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 8083 	beq.w	8006ff2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006eec:	4b94      	ldr	r3, [pc, #592]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f003 030c 	and.w	r3, r3, #12
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d019      	beq.n	8006f2c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006ef8:	4b91      	ldr	r3, [pc, #580]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f003 030c 	and.w	r3, r3, #12
        || \
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d106      	bne.n	8006f12 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006f04:	4b8e      	ldr	r3, [pc, #568]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f10:	d00c      	beq.n	8006f2c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f12:	4b8b      	ldr	r3, [pc, #556]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006f1a:	2b0c      	cmp	r3, #12
 8006f1c:	d112      	bne.n	8006f44 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f1e:	4b88      	ldr	r3, [pc, #544]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f2a:	d10b      	bne.n	8006f44 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f2c:	4b84      	ldr	r3, [pc, #528]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d05b      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x124>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d157      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e25a      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f4c:	d106      	bne.n	8006f5c <HAL_RCC_OscConfig+0x90>
 8006f4e:	4b7c      	ldr	r3, [pc, #496]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a7b      	ldr	r2, [pc, #492]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	e01d      	b.n	8006f98 <HAL_RCC_OscConfig+0xcc>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f64:	d10c      	bne.n	8006f80 <HAL_RCC_OscConfig+0xb4>
 8006f66:	4b76      	ldr	r3, [pc, #472]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a75      	ldr	r2, [pc, #468]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	4b73      	ldr	r3, [pc, #460]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a72      	ldr	r2, [pc, #456]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	e00b      	b.n	8006f98 <HAL_RCC_OscConfig+0xcc>
 8006f80:	4b6f      	ldr	r3, [pc, #444]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a6e      	ldr	r2, [pc, #440]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	4b6c      	ldr	r3, [pc, #432]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a6b      	ldr	r2, [pc, #428]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006f92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d013      	beq.n	8006fc8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa0:	f7ff f894 	bl	80060cc <HAL_GetTick>
 8006fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fa6:	e008      	b.n	8006fba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fa8:	f7ff f890 	bl	80060cc <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b64      	cmp	r3, #100	@ 0x64
 8006fb4:	d901      	bls.n	8006fba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e21f      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fba:	4b61      	ldr	r3, [pc, #388]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0f0      	beq.n	8006fa8 <HAL_RCC_OscConfig+0xdc>
 8006fc6:	e014      	b.n	8006ff2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc8:	f7ff f880 	bl	80060cc <HAL_GetTick>
 8006fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fce:	e008      	b.n	8006fe2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fd0:	f7ff f87c 	bl	80060cc <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b64      	cmp	r3, #100	@ 0x64
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e20b      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fe2:	4b57      	ldr	r3, [pc, #348]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1f0      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x104>
 8006fee:	e000      	b.n	8006ff2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d06f      	beq.n	80070de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006ffe:	4b50      	ldr	r3, [pc, #320]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 030c 	and.w	r3, r3, #12
 8007006:	2b00      	cmp	r3, #0
 8007008:	d017      	beq.n	800703a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800700a:	4b4d      	ldr	r3, [pc, #308]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f003 030c 	and.w	r3, r3, #12
        || \
 8007012:	2b08      	cmp	r3, #8
 8007014:	d105      	bne.n	8007022 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007016:	4b4a      	ldr	r3, [pc, #296]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00b      	beq.n	800703a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007022:	4b47      	ldr	r3, [pc, #284]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800702a:	2b0c      	cmp	r3, #12
 800702c:	d11c      	bne.n	8007068 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800702e:	4b44      	ldr	r3, [pc, #272]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d116      	bne.n	8007068 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800703a:	4b41      	ldr	r3, [pc, #260]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d005      	beq.n	8007052 <HAL_RCC_OscConfig+0x186>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d001      	beq.n	8007052 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e1d3      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007052:	4b3b      	ldr	r3, [pc, #236]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	00db      	lsls	r3, r3, #3
 8007060:	4937      	ldr	r1, [pc, #220]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8007062:	4313      	orrs	r3, r2
 8007064:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007066:	e03a      	b.n	80070de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d020      	beq.n	80070b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007070:	4b34      	ldr	r3, [pc, #208]	@ (8007144 <HAL_RCC_OscConfig+0x278>)
 8007072:	2201      	movs	r2, #1
 8007074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007076:	f7ff f829 	bl	80060cc <HAL_GetTick>
 800707a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800707c:	e008      	b.n	8007090 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800707e:	f7ff f825 	bl	80060cc <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b02      	cmp	r3, #2
 800708a:	d901      	bls.n	8007090 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e1b4      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007090:	4b2b      	ldr	r3, [pc, #172]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0f0      	beq.n	800707e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800709c:	4b28      	ldr	r3, [pc, #160]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	4925      	ldr	r1, [pc, #148]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	600b      	str	r3, [r1, #0]
 80070b0:	e015      	b.n	80070de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070b2:	4b24      	ldr	r3, [pc, #144]	@ (8007144 <HAL_RCC_OscConfig+0x278>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b8:	f7ff f808 	bl	80060cc <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070c0:	f7ff f804 	bl	80060cc <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e193      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f0      	bne.n	80070c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d036      	beq.n	8007158 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d016      	beq.n	8007120 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070f2:	4b15      	ldr	r3, [pc, #84]	@ (8007148 <HAL_RCC_OscConfig+0x27c>)
 80070f4:	2201      	movs	r2, #1
 80070f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f8:	f7fe ffe8 	bl	80060cc <HAL_GetTick>
 80070fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070fe:	e008      	b.n	8007112 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007100:	f7fe ffe4 	bl	80060cc <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	2b02      	cmp	r3, #2
 800710c:	d901      	bls.n	8007112 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e173      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007112:	4b0b      	ldr	r3, [pc, #44]	@ (8007140 <HAL_RCC_OscConfig+0x274>)
 8007114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b00      	cmp	r3, #0
 800711c:	d0f0      	beq.n	8007100 <HAL_RCC_OscConfig+0x234>
 800711e:	e01b      	b.n	8007158 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007120:	4b09      	ldr	r3, [pc, #36]	@ (8007148 <HAL_RCC_OscConfig+0x27c>)
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007126:	f7fe ffd1 	bl	80060cc <HAL_GetTick>
 800712a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800712c:	e00e      	b.n	800714c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800712e:	f7fe ffcd 	bl	80060cc <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b02      	cmp	r3, #2
 800713a:	d907      	bls.n	800714c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e15c      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
 8007140:	40023800 	.word	0x40023800
 8007144:	42470000 	.word	0x42470000
 8007148:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800714c:	4b8a      	ldr	r3, [pc, #552]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 800714e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1ea      	bne.n	800712e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 8097 	beq.w	8007294 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007166:	2300      	movs	r3, #0
 8007168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800716a:	4b83      	ldr	r3, [pc, #524]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 800716c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10f      	bne.n	8007196 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007176:	2300      	movs	r3, #0
 8007178:	60bb      	str	r3, [r7, #8]
 800717a:	4b7f      	ldr	r3, [pc, #508]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 800717c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717e:	4a7e      	ldr	r2, [pc, #504]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 8007180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007184:	6413      	str	r3, [r2, #64]	@ 0x40
 8007186:	4b7c      	ldr	r3, [pc, #496]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 8007188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800718e:	60bb      	str	r3, [r7, #8]
 8007190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007192:	2301      	movs	r3, #1
 8007194:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007196:	4b79      	ldr	r3, [pc, #484]	@ (800737c <HAL_RCC_OscConfig+0x4b0>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d118      	bne.n	80071d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071a2:	4b76      	ldr	r3, [pc, #472]	@ (800737c <HAL_RCC_OscConfig+0x4b0>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a75      	ldr	r2, [pc, #468]	@ (800737c <HAL_RCC_OscConfig+0x4b0>)
 80071a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071ae:	f7fe ff8d 	bl	80060cc <HAL_GetTick>
 80071b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071b4:	e008      	b.n	80071c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071b6:	f7fe ff89 	bl	80060cc <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d901      	bls.n	80071c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e118      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c8:	4b6c      	ldr	r3, [pc, #432]	@ (800737c <HAL_RCC_OscConfig+0x4b0>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0f0      	beq.n	80071b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d106      	bne.n	80071ea <HAL_RCC_OscConfig+0x31e>
 80071dc:	4b66      	ldr	r3, [pc, #408]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 80071de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071e0:	4a65      	ldr	r2, [pc, #404]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 80071e2:	f043 0301 	orr.w	r3, r3, #1
 80071e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80071e8:	e01c      	b.n	8007224 <HAL_RCC_OscConfig+0x358>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	2b05      	cmp	r3, #5
 80071f0:	d10c      	bne.n	800720c <HAL_RCC_OscConfig+0x340>
 80071f2:	4b61      	ldr	r3, [pc, #388]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 80071f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071f6:	4a60      	ldr	r2, [pc, #384]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 80071f8:	f043 0304 	orr.w	r3, r3, #4
 80071fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80071fe:	4b5e      	ldr	r3, [pc, #376]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 8007200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007202:	4a5d      	ldr	r2, [pc, #372]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 8007204:	f043 0301 	orr.w	r3, r3, #1
 8007208:	6713      	str	r3, [r2, #112]	@ 0x70
 800720a:	e00b      	b.n	8007224 <HAL_RCC_OscConfig+0x358>
 800720c:	4b5a      	ldr	r3, [pc, #360]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 800720e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007210:	4a59      	ldr	r2, [pc, #356]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 8007212:	f023 0301 	bic.w	r3, r3, #1
 8007216:	6713      	str	r3, [r2, #112]	@ 0x70
 8007218:	4b57      	ldr	r3, [pc, #348]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 800721a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800721c:	4a56      	ldr	r2, [pc, #344]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 800721e:	f023 0304 	bic.w	r3, r3, #4
 8007222:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d015      	beq.n	8007258 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800722c:	f7fe ff4e 	bl	80060cc <HAL_GetTick>
 8007230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007232:	e00a      	b.n	800724a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007234:	f7fe ff4a 	bl	80060cc <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007242:	4293      	cmp	r3, r2
 8007244:	d901      	bls.n	800724a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e0d7      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800724a:	4b4b      	ldr	r3, [pc, #300]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 800724c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0ee      	beq.n	8007234 <HAL_RCC_OscConfig+0x368>
 8007256:	e014      	b.n	8007282 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007258:	f7fe ff38 	bl	80060cc <HAL_GetTick>
 800725c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800725e:	e00a      	b.n	8007276 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007260:	f7fe ff34 	bl	80060cc <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800726e:	4293      	cmp	r3, r2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e0c1      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007276:	4b40      	ldr	r3, [pc, #256]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 8007278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1ee      	bne.n	8007260 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d105      	bne.n	8007294 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007288:	4b3b      	ldr	r3, [pc, #236]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 800728a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728c:	4a3a      	ldr	r2, [pc, #232]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 800728e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007292:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 80ad 	beq.w	80073f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800729e:	4b36      	ldr	r3, [pc, #216]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f003 030c 	and.w	r3, r3, #12
 80072a6:	2b08      	cmp	r3, #8
 80072a8:	d060      	beq.n	800736c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d145      	bne.n	800733e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072b2:	4b33      	ldr	r3, [pc, #204]	@ (8007380 <HAL_RCC_OscConfig+0x4b4>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b8:	f7fe ff08 	bl	80060cc <HAL_GetTick>
 80072bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072be:	e008      	b.n	80072d2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072c0:	f7fe ff04 	bl	80060cc <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e093      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072d2:	4b29      	ldr	r3, [pc, #164]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1f0      	bne.n	80072c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	69da      	ldr	r2, [r3, #28]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ec:	019b      	lsls	r3, r3, #6
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f4:	085b      	lsrs	r3, r3, #1
 80072f6:	3b01      	subs	r3, #1
 80072f8:	041b      	lsls	r3, r3, #16
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007300:	061b      	lsls	r3, r3, #24
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007308:	071b      	lsls	r3, r3, #28
 800730a:	491b      	ldr	r1, [pc, #108]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 800730c:	4313      	orrs	r3, r2
 800730e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007310:	4b1b      	ldr	r3, [pc, #108]	@ (8007380 <HAL_RCC_OscConfig+0x4b4>)
 8007312:	2201      	movs	r2, #1
 8007314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007316:	f7fe fed9 	bl	80060cc <HAL_GetTick>
 800731a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800731c:	e008      	b.n	8007330 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800731e:	f7fe fed5 	bl	80060cc <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	2b02      	cmp	r3, #2
 800732a:	d901      	bls.n	8007330 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e064      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007330:	4b11      	ldr	r3, [pc, #68]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0f0      	beq.n	800731e <HAL_RCC_OscConfig+0x452>
 800733c:	e05c      	b.n	80073f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800733e:	4b10      	ldr	r3, [pc, #64]	@ (8007380 <HAL_RCC_OscConfig+0x4b4>)
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007344:	f7fe fec2 	bl	80060cc <HAL_GetTick>
 8007348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800734a:	e008      	b.n	800735e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800734c:	f7fe febe 	bl	80060cc <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b02      	cmp	r3, #2
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e04d      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800735e:	4b06      	ldr	r3, [pc, #24]	@ (8007378 <HAL_RCC_OscConfig+0x4ac>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1f0      	bne.n	800734c <HAL_RCC_OscConfig+0x480>
 800736a:	e045      	b.n	80073f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d107      	bne.n	8007384 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e040      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
 8007378:	40023800 	.word	0x40023800
 800737c:	40007000 	.word	0x40007000
 8007380:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007384:	4b1f      	ldr	r3, [pc, #124]	@ (8007404 <HAL_RCC_OscConfig+0x538>)
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d030      	beq.n	80073f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800739c:	429a      	cmp	r2, r3
 800739e:	d129      	bne.n	80073f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d122      	bne.n	80073f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80073b4:	4013      	ands	r3, r2
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80073ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073bc:	4293      	cmp	r3, r2
 80073be:	d119      	bne.n	80073f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ca:	085b      	lsrs	r3, r3, #1
 80073cc:	3b01      	subs	r3, #1
 80073ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d10f      	bne.n	80073f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d107      	bne.n	80073f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d001      	beq.n	80073f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e000      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3718      	adds	r7, #24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	40023800 	.word	0x40023800

08007408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e042      	b.n	80074a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d106      	bne.n	8007434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7fa fb00 	bl	8001a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2224      	movs	r2, #36	@ 0x24
 8007438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800744a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fdbd 	bl	8007fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	691a      	ldr	r2, [r3, #16]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	695a      	ldr	r2, [r3, #20]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68da      	ldr	r2, [r3, #12]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2220      	movs	r2, #32
 800748c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2220      	movs	r2, #32
 8007494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08a      	sub	sp, #40	@ 0x28
 80074ac:	af02      	add	r7, sp, #8
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	603b      	str	r3, [r7, #0]
 80074b4:	4613      	mov	r3, r2
 80074b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	d175      	bne.n	80075b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <HAL_UART_Transmit+0x2c>
 80074ce:	88fb      	ldrh	r3, [r7, #6]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e06e      	b.n	80075b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2221      	movs	r2, #33	@ 0x21
 80074e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074e6:	f7fe fdf1 	bl	80060cc <HAL_GetTick>
 80074ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	88fa      	ldrh	r2, [r7, #6]
 80074f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	88fa      	ldrh	r2, [r7, #6]
 80074f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007500:	d108      	bne.n	8007514 <HAL_UART_Transmit+0x6c>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d104      	bne.n	8007514 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800750a:	2300      	movs	r3, #0
 800750c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	61bb      	str	r3, [r7, #24]
 8007512:	e003      	b.n	800751c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007518:	2300      	movs	r3, #0
 800751a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800751c:	e02e      	b.n	800757c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2200      	movs	r2, #0
 8007526:	2180      	movs	r1, #128	@ 0x80
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 fb1f 	bl	8007b6c <UART_WaitOnFlagUntilTimeout>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d005      	beq.n	8007540 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2220      	movs	r2, #32
 8007538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e03a      	b.n	80075b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10b      	bne.n	800755e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007554:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	3302      	adds	r3, #2
 800755a:	61bb      	str	r3, [r7, #24]
 800755c:	e007      	b.n	800756e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	781a      	ldrb	r2, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	3301      	adds	r3, #1
 800756c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b01      	subs	r3, #1
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007580:	b29b      	uxth	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1cb      	bne.n	800751e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2200      	movs	r2, #0
 800758e:	2140      	movs	r1, #64	@ 0x40
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 faeb 	bl	8007b6c <UART_WaitOnFlagUntilTimeout>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d005      	beq.n	80075a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2220      	movs	r2, #32
 80075a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e006      	b.n	80075b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2220      	movs	r2, #32
 80075ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	e000      	b.n	80075b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80075b4:	2302      	movs	r3, #2
  }
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3720      	adds	r7, #32
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	4613      	mov	r3, r2
 80075ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b20      	cmp	r3, #32
 80075d6:	d112      	bne.n	80075fe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <HAL_UART_Receive_IT+0x26>
 80075de:	88fb      	ldrh	r3, [r7, #6]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e00b      	b.n	8007600 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80075ee:	88fb      	ldrh	r3, [r7, #6]
 80075f0:	461a      	mov	r2, r3
 80075f2:	68b9      	ldr	r1, [r7, #8]
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 fb12 	bl	8007c1e <UART_Start_Receive_IT>
 80075fa:	4603      	mov	r3, r0
 80075fc:	e000      	b.n	8007600 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80075fe:	2302      	movs	r3, #2
  }
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b0ba      	sub	sp, #232	@ 0xe8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800762e:	2300      	movs	r3, #0
 8007630:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007634:	2300      	movs	r3, #0
 8007636:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800763a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800763e:	f003 030f 	and.w	r3, r3, #15
 8007642:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10f      	bne.n	800766e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800764e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b00      	cmp	r3, #0
 8007658:	d009      	beq.n	800766e <HAL_UART_IRQHandler+0x66>
 800765a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fbf2 	bl	8007e50 <UART_Receive_IT>
      return;
 800766c:	e25b      	b.n	8007b26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800766e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 80de 	beq.w	8007834 <HAL_UART_IRQHandler+0x22c>
 8007678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	2b00      	cmp	r3, #0
 8007682:	d106      	bne.n	8007692 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007688:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 80d1 	beq.w	8007834 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <HAL_UART_IRQHandler+0xae>
 800769e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d005      	beq.n	80076b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ae:	f043 0201 	orr.w	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076ba:	f003 0304 	and.w	r3, r3, #4
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00b      	beq.n	80076da <HAL_UART_IRQHandler+0xd2>
 80076c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d005      	beq.n	80076da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076d2:	f043 0202 	orr.w	r2, r3, #2
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00b      	beq.n	80076fe <HAL_UART_IRQHandler+0xf6>
 80076e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076f6:	f043 0204 	orr.w	r2, r3, #4
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80076fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007702:	f003 0308 	and.w	r3, r3, #8
 8007706:	2b00      	cmp	r3, #0
 8007708:	d011      	beq.n	800772e <HAL_UART_IRQHandler+0x126>
 800770a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800770e:	f003 0320 	and.w	r3, r3, #32
 8007712:	2b00      	cmp	r3, #0
 8007714:	d105      	bne.n	8007722 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d005      	beq.n	800772e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007726:	f043 0208 	orr.w	r2, r3, #8
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007732:	2b00      	cmp	r3, #0
 8007734:	f000 81f2 	beq.w	8007b1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800773c:	f003 0320 	and.w	r3, r3, #32
 8007740:	2b00      	cmp	r3, #0
 8007742:	d008      	beq.n	8007756 <HAL_UART_IRQHandler+0x14e>
 8007744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007748:	f003 0320 	and.w	r3, r3, #32
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fb7d 	bl	8007e50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007760:	2b40      	cmp	r3, #64	@ 0x40
 8007762:	bf0c      	ite	eq
 8007764:	2301      	moveq	r3, #1
 8007766:	2300      	movne	r3, #0
 8007768:	b2db      	uxtb	r3, r3
 800776a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007772:	f003 0308 	and.w	r3, r3, #8
 8007776:	2b00      	cmp	r3, #0
 8007778:	d103      	bne.n	8007782 <HAL_UART_IRQHandler+0x17a>
 800777a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800777e:	2b00      	cmp	r3, #0
 8007780:	d04f      	beq.n	8007822 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa85 	bl	8007c92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007792:	2b40      	cmp	r3, #64	@ 0x40
 8007794:	d141      	bne.n	800781a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3314      	adds	r3, #20
 800779c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80077ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3314      	adds	r3, #20
 80077be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80077c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80077c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80077ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80077da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1d9      	bne.n	8007796 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d013      	beq.n	8007812 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ee:	4a7e      	ldr	r2, [pc, #504]	@ (80079e8 <HAL_UART_IRQHandler+0x3e0>)
 80077f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe fe33 	bl	8006462 <HAL_DMA_Abort_IT>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d016      	beq.n	8007830 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800780c:	4610      	mov	r0, r2
 800780e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007810:	e00e      	b.n	8007830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f994 	bl	8007b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007818:	e00a      	b.n	8007830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f990 	bl	8007b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007820:	e006      	b.n	8007830 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f98c 	bl	8007b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800782e:	e175      	b.n	8007b1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007830:	bf00      	nop
    return;
 8007832:	e173      	b.n	8007b1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007838:	2b01      	cmp	r3, #1
 800783a:	f040 814f 	bne.w	8007adc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800783e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007842:	f003 0310 	and.w	r3, r3, #16
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 8148 	beq.w	8007adc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800784c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007850:	f003 0310 	and.w	r3, r3, #16
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 8141 	beq.w	8007adc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800785a:	2300      	movs	r3, #0
 800785c:	60bb      	str	r3, [r7, #8]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60bb      	str	r3, [r7, #8]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	60bb      	str	r3, [r7, #8]
 800786e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800787a:	2b40      	cmp	r3, #64	@ 0x40
 800787c:	f040 80b6 	bne.w	80079ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800788c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 8145 	beq.w	8007b20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800789a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800789e:	429a      	cmp	r2, r3
 80078a0:	f080 813e 	bcs.w	8007b20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078b6:	f000 8088 	beq.w	80079ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	330c      	adds	r3, #12
 80078c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80078d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	330c      	adds	r3, #12
 80078e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80078e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80078ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80078f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80078fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1d9      	bne.n	80078ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3314      	adds	r3, #20
 800790c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007910:	e853 3f00 	ldrex	r3, [r3]
 8007914:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007916:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007918:	f023 0301 	bic.w	r3, r3, #1
 800791c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3314      	adds	r3, #20
 8007926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800792a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800792e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007930:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007932:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800793c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1e1      	bne.n	8007906 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3314      	adds	r3, #20
 8007948:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007952:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007954:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007958:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3314      	adds	r3, #20
 8007962:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007966:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007968:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800796c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007974:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e3      	bne.n	8007942 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2220      	movs	r2, #32
 800797e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	330c      	adds	r3, #12
 800798e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007992:	e853 3f00 	ldrex	r3, [r3]
 8007996:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007998:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800799a:	f023 0310 	bic.w	r3, r3, #16
 800799e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	330c      	adds	r3, #12
 80079a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80079ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80079ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079b4:	e841 2300 	strex	r3, r2, [r1]
 80079b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80079ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1e3      	bne.n	8007988 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fe fcdc 	bl	8006382 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2202      	movs	r2, #2
 80079ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079d8:	b29b      	uxth	r3, r3
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	b29b      	uxth	r3, r3
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f8b7 	bl	8007b54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079e6:	e09b      	b.n	8007b20 <HAL_UART_IRQHandler+0x518>
 80079e8:	08007d59 	.word	0x08007d59
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 808e 	beq.w	8007b24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007a08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 8089 	beq.w	8007b24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	330c      	adds	r3, #12
 8007a18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1c:	e853 3f00 	ldrex	r3, [r3]
 8007a20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	330c      	adds	r3, #12
 8007a32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007a36:	647a      	str	r2, [r7, #68]	@ 0x44
 8007a38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e3      	bne.n	8007a12 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3314      	adds	r3, #20
 8007a50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a54:	e853 3f00 	ldrex	r3, [r3]
 8007a58:	623b      	str	r3, [r7, #32]
   return(result);
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	f023 0301 	bic.w	r3, r3, #1
 8007a60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3314      	adds	r3, #20
 8007a6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007a6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e3      	bne.n	8007a4a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	330c      	adds	r3, #12
 8007a96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f023 0310 	bic.w	r3, r3, #16
 8007aa6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	330c      	adds	r3, #12
 8007ab0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007ab4:	61fa      	str	r2, [r7, #28]
 8007ab6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	69b9      	ldr	r1, [r7, #24]
 8007aba:	69fa      	ldr	r2, [r7, #28]
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e3      	bne.n	8007a90 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2202      	movs	r2, #2
 8007acc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ace:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f83d 	bl	8007b54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ada:	e023      	b.n	8007b24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d009      	beq.n	8007afc <HAL_UART_IRQHandler+0x4f4>
 8007ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f943 	bl	8007d80 <UART_Transmit_IT>
    return;
 8007afa:	e014      	b.n	8007b26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00e      	beq.n	8007b26 <HAL_UART_IRQHandler+0x51e>
 8007b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d008      	beq.n	8007b26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f983 	bl	8007e20 <UART_EndTransmit_IT>
    return;
 8007b1a:	e004      	b.n	8007b26 <HAL_UART_IRQHandler+0x51e>
    return;
 8007b1c:	bf00      	nop
 8007b1e:	e002      	b.n	8007b26 <HAL_UART_IRQHandler+0x51e>
      return;
 8007b20:	bf00      	nop
 8007b22:	e000      	b.n	8007b26 <HAL_UART_IRQHandler+0x51e>
      return;
 8007b24:	bf00      	nop
  }
}
 8007b26:	37e8      	adds	r7, #232	@ 0xe8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	603b      	str	r3, [r7, #0]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b7c:	e03b      	b.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b84:	d037      	beq.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b86:	f7fe faa1 	bl	80060cc <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	6a3a      	ldr	r2, [r7, #32]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d302      	bcc.n	8007b9c <UART_WaitOnFlagUntilTimeout+0x30>
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e03a      	b.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d023      	beq.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2b80      	cmp	r3, #128	@ 0x80
 8007bb2:	d020      	beq.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2b40      	cmp	r3, #64	@ 0x40
 8007bb8:	d01d      	beq.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b08      	cmp	r3, #8
 8007bc6:	d116      	bne.n	8007bf6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007bc8:	2300      	movs	r3, #0
 8007bca:	617b      	str	r3, [r7, #20]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	617b      	str	r3, [r7, #20]
 8007bdc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 f857 	bl	8007c92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2208      	movs	r2, #8
 8007be8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e00f      	b.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	bf0c      	ite	eq
 8007c06:	2301      	moveq	r3, #1
 8007c08:	2300      	movne	r3, #0
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d0b4      	beq.n	8007b7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	88fa      	ldrh	r2, [r7, #6]
 8007c36:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	88fa      	ldrh	r2, [r7, #6]
 8007c3c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2222      	movs	r2, #34	@ 0x22
 8007c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d007      	beq.n	8007c64 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68da      	ldr	r2, [r3, #12]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c62:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	695a      	ldr	r2, [r3, #20]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f042 0201 	orr.w	r2, r2, #1
 8007c72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f042 0220 	orr.w	r2, r2, #32
 8007c82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b095      	sub	sp, #84	@ 0x54
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	330c      	adds	r3, #12
 8007ca0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	330c      	adds	r3, #12
 8007cb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007cba:	643a      	str	r2, [r7, #64]	@ 0x40
 8007cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e5      	bne.n	8007c9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3314      	adds	r3, #20
 8007cd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	f023 0301 	bic.w	r3, r3, #1
 8007ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3314      	adds	r3, #20
 8007cec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e5      	bne.n	8007cce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d119      	bne.n	8007d3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	330c      	adds	r3, #12
 8007d10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	e853 3f00 	ldrex	r3, [r3]
 8007d18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	f023 0310 	bic.w	r3, r3, #16
 8007d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	330c      	adds	r3, #12
 8007d28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d2a:	61ba      	str	r2, [r7, #24]
 8007d2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	6979      	ldr	r1, [r7, #20]
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	613b      	str	r3, [r7, #16]
   return(result);
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1e5      	bne.n	8007d0a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2220      	movs	r2, #32
 8007d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007d4c:	bf00      	nop
 8007d4e:	3754      	adds	r7, #84	@ 0x54
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f7ff fee4 	bl	8007b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d78:	bf00      	nop
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b21      	cmp	r3, #33	@ 0x21
 8007d92:	d13e      	bne.n	8007e12 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d9c:	d114      	bne.n	8007dc8 <UART_Transmit_IT+0x48>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d110      	bne.n	8007dc8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	881b      	ldrh	r3, [r3, #0]
 8007db0:	461a      	mov	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	1c9a      	adds	r2, r3, #2
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	621a      	str	r2, [r3, #32]
 8007dc6:	e008      	b.n	8007dda <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a1b      	ldr	r3, [r3, #32]
 8007dcc:	1c59      	adds	r1, r3, #1
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	6211      	str	r1, [r2, #32]
 8007dd2:	781a      	ldrb	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	3b01      	subs	r3, #1
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	4619      	mov	r1, r3
 8007de8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10f      	bne.n	8007e0e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68da      	ldr	r2, [r3, #12]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007dfc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68da      	ldr	r2, [r3, #12]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	e000      	b.n	8007e14 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e12:	2302      	movs	r3, #2
  }
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7ff fe73 	bl	8007b2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08c      	sub	sp, #48	@ 0x30
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b22      	cmp	r3, #34	@ 0x22
 8007e62:	f040 80ae 	bne.w	8007fc2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e6e:	d117      	bne.n	8007ea0 <UART_Receive_IT+0x50>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d113      	bne.n	8007ea0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e80:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e92:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e98:	1c9a      	adds	r2, r3, #2
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e9e:	e026      	b.n	8007eee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eb2:	d007      	beq.n	8007ec4 <UART_Receive_IT+0x74>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10a      	bne.n	8007ed2 <UART_Receive_IT+0x82>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d106      	bne.n	8007ed2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ece:	701a      	strb	r2, [r3, #0]
 8007ed0:	e008      	b.n	8007ee4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee8:	1c5a      	adds	r2, r3, #1
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	4619      	mov	r1, r3
 8007efc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d15d      	bne.n	8007fbe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68da      	ldr	r2, [r3, #12]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 0220 	bic.w	r2, r2, #32
 8007f10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	695a      	ldr	r2, [r3, #20]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f022 0201 	bic.w	r2, r2, #1
 8007f30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d135      	bne.n	8007fb4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	330c      	adds	r3, #12
 8007f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f023 0310 	bic.w	r3, r3, #16
 8007f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	330c      	adds	r3, #12
 8007f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f6e:	623a      	str	r2, [r7, #32]
 8007f70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	69f9      	ldr	r1, [r7, #28]
 8007f74:	6a3a      	ldr	r2, [r7, #32]
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e5      	bne.n	8007f4e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0310 	and.w	r3, r3, #16
 8007f8c:	2b10      	cmp	r3, #16
 8007f8e:	d10a      	bne.n	8007fa6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f90:	2300      	movs	r3, #0
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff fdd1 	bl	8007b54 <HAL_UARTEx_RxEventCallback>
 8007fb2:	e002      	b.n	8007fba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7f9 f9b7 	bl	8001328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	e002      	b.n	8007fc4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	e000      	b.n	8007fc4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007fc2:	2302      	movs	r3, #2
  }
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3730      	adds	r7, #48	@ 0x30
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fd0:	b0c0      	sub	sp, #256	@ 0x100
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fe8:	68d9      	ldr	r1, [r3, #12]
 8007fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	ea40 0301 	orr.w	r3, r0, r1
 8007ff4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	431a      	orrs	r2, r3
 8008004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	431a      	orrs	r2, r3
 800800c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008010:	69db      	ldr	r3, [r3, #28]
 8008012:	4313      	orrs	r3, r2
 8008014:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008024:	f021 010c 	bic.w	r1, r1, #12
 8008028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008032:	430b      	orrs	r3, r1
 8008034:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008046:	6999      	ldr	r1, [r3, #24]
 8008048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	ea40 0301 	orr.w	r3, r0, r1
 8008052:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	4b8f      	ldr	r3, [pc, #572]	@ (8008298 <UART_SetConfig+0x2cc>)
 800805c:	429a      	cmp	r2, r3
 800805e:	d005      	beq.n	800806c <UART_SetConfig+0xa0>
 8008060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	4b8d      	ldr	r3, [pc, #564]	@ (800829c <UART_SetConfig+0x2d0>)
 8008068:	429a      	cmp	r2, r3
 800806a:	d104      	bne.n	8008076 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800806c:	f7fe fcea 	bl	8006a44 <HAL_RCC_GetPCLK2Freq>
 8008070:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008074:	e003      	b.n	800807e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008076:	f7fe fcd1 	bl	8006a1c <HAL_RCC_GetPCLK1Freq>
 800807a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800807e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008088:	f040 810c 	bne.w	80082a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800808c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008090:	2200      	movs	r2, #0
 8008092:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008096:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800809a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800809e:	4622      	mov	r2, r4
 80080a0:	462b      	mov	r3, r5
 80080a2:	1891      	adds	r1, r2, r2
 80080a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80080a6:	415b      	adcs	r3, r3
 80080a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80080ae:	4621      	mov	r1, r4
 80080b0:	eb12 0801 	adds.w	r8, r2, r1
 80080b4:	4629      	mov	r1, r5
 80080b6:	eb43 0901 	adc.w	r9, r3, r1
 80080ba:	f04f 0200 	mov.w	r2, #0
 80080be:	f04f 0300 	mov.w	r3, #0
 80080c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080ce:	4690      	mov	r8, r2
 80080d0:	4699      	mov	r9, r3
 80080d2:	4623      	mov	r3, r4
 80080d4:	eb18 0303 	adds.w	r3, r8, r3
 80080d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80080dc:	462b      	mov	r3, r5
 80080de:	eb49 0303 	adc.w	r3, r9, r3
 80080e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80080f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80080f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80080fa:	460b      	mov	r3, r1
 80080fc:	18db      	adds	r3, r3, r3
 80080fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8008100:	4613      	mov	r3, r2
 8008102:	eb42 0303 	adc.w	r3, r2, r3
 8008106:	657b      	str	r3, [r7, #84]	@ 0x54
 8008108:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800810c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008110:	f7f8 fdea 	bl	8000ce8 <__aeabi_uldivmod>
 8008114:	4602      	mov	r2, r0
 8008116:	460b      	mov	r3, r1
 8008118:	4b61      	ldr	r3, [pc, #388]	@ (80082a0 <UART_SetConfig+0x2d4>)
 800811a:	fba3 2302 	umull	r2, r3, r3, r2
 800811e:	095b      	lsrs	r3, r3, #5
 8008120:	011c      	lsls	r4, r3, #4
 8008122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008126:	2200      	movs	r2, #0
 8008128:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800812c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008130:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008134:	4642      	mov	r2, r8
 8008136:	464b      	mov	r3, r9
 8008138:	1891      	adds	r1, r2, r2
 800813a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800813c:	415b      	adcs	r3, r3
 800813e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008140:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008144:	4641      	mov	r1, r8
 8008146:	eb12 0a01 	adds.w	sl, r2, r1
 800814a:	4649      	mov	r1, r9
 800814c:	eb43 0b01 	adc.w	fp, r3, r1
 8008150:	f04f 0200 	mov.w	r2, #0
 8008154:	f04f 0300 	mov.w	r3, #0
 8008158:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800815c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008160:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008164:	4692      	mov	sl, r2
 8008166:	469b      	mov	fp, r3
 8008168:	4643      	mov	r3, r8
 800816a:	eb1a 0303 	adds.w	r3, sl, r3
 800816e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008172:	464b      	mov	r3, r9
 8008174:	eb4b 0303 	adc.w	r3, fp, r3
 8008178:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800817c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008188:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800818c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008190:	460b      	mov	r3, r1
 8008192:	18db      	adds	r3, r3, r3
 8008194:	643b      	str	r3, [r7, #64]	@ 0x40
 8008196:	4613      	mov	r3, r2
 8008198:	eb42 0303 	adc.w	r3, r2, r3
 800819c:	647b      	str	r3, [r7, #68]	@ 0x44
 800819e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80081a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80081a6:	f7f8 fd9f 	bl	8000ce8 <__aeabi_uldivmod>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4611      	mov	r1, r2
 80081b0:	4b3b      	ldr	r3, [pc, #236]	@ (80082a0 <UART_SetConfig+0x2d4>)
 80081b2:	fba3 2301 	umull	r2, r3, r3, r1
 80081b6:	095b      	lsrs	r3, r3, #5
 80081b8:	2264      	movs	r2, #100	@ 0x64
 80081ba:	fb02 f303 	mul.w	r3, r2, r3
 80081be:	1acb      	subs	r3, r1, r3
 80081c0:	00db      	lsls	r3, r3, #3
 80081c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80081c6:	4b36      	ldr	r3, [pc, #216]	@ (80082a0 <UART_SetConfig+0x2d4>)
 80081c8:	fba3 2302 	umull	r2, r3, r3, r2
 80081cc:	095b      	lsrs	r3, r3, #5
 80081ce:	005b      	lsls	r3, r3, #1
 80081d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80081d4:	441c      	add	r4, r3
 80081d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081da:	2200      	movs	r2, #0
 80081dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80081e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80081e8:	4642      	mov	r2, r8
 80081ea:	464b      	mov	r3, r9
 80081ec:	1891      	adds	r1, r2, r2
 80081ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80081f0:	415b      	adcs	r3, r3
 80081f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80081f8:	4641      	mov	r1, r8
 80081fa:	1851      	adds	r1, r2, r1
 80081fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80081fe:	4649      	mov	r1, r9
 8008200:	414b      	adcs	r3, r1
 8008202:	637b      	str	r3, [r7, #52]	@ 0x34
 8008204:	f04f 0200 	mov.w	r2, #0
 8008208:	f04f 0300 	mov.w	r3, #0
 800820c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008210:	4659      	mov	r1, fp
 8008212:	00cb      	lsls	r3, r1, #3
 8008214:	4651      	mov	r1, sl
 8008216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800821a:	4651      	mov	r1, sl
 800821c:	00ca      	lsls	r2, r1, #3
 800821e:	4610      	mov	r0, r2
 8008220:	4619      	mov	r1, r3
 8008222:	4603      	mov	r3, r0
 8008224:	4642      	mov	r2, r8
 8008226:	189b      	adds	r3, r3, r2
 8008228:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800822c:	464b      	mov	r3, r9
 800822e:	460a      	mov	r2, r1
 8008230:	eb42 0303 	adc.w	r3, r2, r3
 8008234:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008244:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008248:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800824c:	460b      	mov	r3, r1
 800824e:	18db      	adds	r3, r3, r3
 8008250:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008252:	4613      	mov	r3, r2
 8008254:	eb42 0303 	adc.w	r3, r2, r3
 8008258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800825a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800825e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008262:	f7f8 fd41 	bl	8000ce8 <__aeabi_uldivmod>
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	4b0d      	ldr	r3, [pc, #52]	@ (80082a0 <UART_SetConfig+0x2d4>)
 800826c:	fba3 1302 	umull	r1, r3, r3, r2
 8008270:	095b      	lsrs	r3, r3, #5
 8008272:	2164      	movs	r1, #100	@ 0x64
 8008274:	fb01 f303 	mul.w	r3, r1, r3
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	00db      	lsls	r3, r3, #3
 800827c:	3332      	adds	r3, #50	@ 0x32
 800827e:	4a08      	ldr	r2, [pc, #32]	@ (80082a0 <UART_SetConfig+0x2d4>)
 8008280:	fba2 2303 	umull	r2, r3, r2, r3
 8008284:	095b      	lsrs	r3, r3, #5
 8008286:	f003 0207 	and.w	r2, r3, #7
 800828a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4422      	add	r2, r4
 8008292:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008294:	e106      	b.n	80084a4 <UART_SetConfig+0x4d8>
 8008296:	bf00      	nop
 8008298:	40011000 	.word	0x40011000
 800829c:	40011400 	.word	0x40011400
 80082a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082a8:	2200      	movs	r2, #0
 80082aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80082ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80082b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80082b6:	4642      	mov	r2, r8
 80082b8:	464b      	mov	r3, r9
 80082ba:	1891      	adds	r1, r2, r2
 80082bc:	6239      	str	r1, [r7, #32]
 80082be:	415b      	adcs	r3, r3
 80082c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80082c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082c6:	4641      	mov	r1, r8
 80082c8:	1854      	adds	r4, r2, r1
 80082ca:	4649      	mov	r1, r9
 80082cc:	eb43 0501 	adc.w	r5, r3, r1
 80082d0:	f04f 0200 	mov.w	r2, #0
 80082d4:	f04f 0300 	mov.w	r3, #0
 80082d8:	00eb      	lsls	r3, r5, #3
 80082da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082de:	00e2      	lsls	r2, r4, #3
 80082e0:	4614      	mov	r4, r2
 80082e2:	461d      	mov	r5, r3
 80082e4:	4643      	mov	r3, r8
 80082e6:	18e3      	adds	r3, r4, r3
 80082e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80082ec:	464b      	mov	r3, r9
 80082ee:	eb45 0303 	adc.w	r3, r5, r3
 80082f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80082f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008302:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008306:	f04f 0200 	mov.w	r2, #0
 800830a:	f04f 0300 	mov.w	r3, #0
 800830e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008312:	4629      	mov	r1, r5
 8008314:	008b      	lsls	r3, r1, #2
 8008316:	4621      	mov	r1, r4
 8008318:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800831c:	4621      	mov	r1, r4
 800831e:	008a      	lsls	r2, r1, #2
 8008320:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008324:	f7f8 fce0 	bl	8000ce8 <__aeabi_uldivmod>
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	4b60      	ldr	r3, [pc, #384]	@ (80084b0 <UART_SetConfig+0x4e4>)
 800832e:	fba3 2302 	umull	r2, r3, r3, r2
 8008332:	095b      	lsrs	r3, r3, #5
 8008334:	011c      	lsls	r4, r3, #4
 8008336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800833a:	2200      	movs	r2, #0
 800833c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008340:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008344:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008348:	4642      	mov	r2, r8
 800834a:	464b      	mov	r3, r9
 800834c:	1891      	adds	r1, r2, r2
 800834e:	61b9      	str	r1, [r7, #24]
 8008350:	415b      	adcs	r3, r3
 8008352:	61fb      	str	r3, [r7, #28]
 8008354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008358:	4641      	mov	r1, r8
 800835a:	1851      	adds	r1, r2, r1
 800835c:	6139      	str	r1, [r7, #16]
 800835e:	4649      	mov	r1, r9
 8008360:	414b      	adcs	r3, r1
 8008362:	617b      	str	r3, [r7, #20]
 8008364:	f04f 0200 	mov.w	r2, #0
 8008368:	f04f 0300 	mov.w	r3, #0
 800836c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008370:	4659      	mov	r1, fp
 8008372:	00cb      	lsls	r3, r1, #3
 8008374:	4651      	mov	r1, sl
 8008376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800837a:	4651      	mov	r1, sl
 800837c:	00ca      	lsls	r2, r1, #3
 800837e:	4610      	mov	r0, r2
 8008380:	4619      	mov	r1, r3
 8008382:	4603      	mov	r3, r0
 8008384:	4642      	mov	r2, r8
 8008386:	189b      	adds	r3, r3, r2
 8008388:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800838c:	464b      	mov	r3, r9
 800838e:	460a      	mov	r2, r1
 8008390:	eb42 0303 	adc.w	r3, r2, r3
 8008394:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80083a4:	f04f 0200 	mov.w	r2, #0
 80083a8:	f04f 0300 	mov.w	r3, #0
 80083ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80083b0:	4649      	mov	r1, r9
 80083b2:	008b      	lsls	r3, r1, #2
 80083b4:	4641      	mov	r1, r8
 80083b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083ba:	4641      	mov	r1, r8
 80083bc:	008a      	lsls	r2, r1, #2
 80083be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80083c2:	f7f8 fc91 	bl	8000ce8 <__aeabi_uldivmod>
 80083c6:	4602      	mov	r2, r0
 80083c8:	460b      	mov	r3, r1
 80083ca:	4611      	mov	r1, r2
 80083cc:	4b38      	ldr	r3, [pc, #224]	@ (80084b0 <UART_SetConfig+0x4e4>)
 80083ce:	fba3 2301 	umull	r2, r3, r3, r1
 80083d2:	095b      	lsrs	r3, r3, #5
 80083d4:	2264      	movs	r2, #100	@ 0x64
 80083d6:	fb02 f303 	mul.w	r3, r2, r3
 80083da:	1acb      	subs	r3, r1, r3
 80083dc:	011b      	lsls	r3, r3, #4
 80083de:	3332      	adds	r3, #50	@ 0x32
 80083e0:	4a33      	ldr	r2, [pc, #204]	@ (80084b0 <UART_SetConfig+0x4e4>)
 80083e2:	fba2 2303 	umull	r2, r3, r2, r3
 80083e6:	095b      	lsrs	r3, r3, #5
 80083e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80083ec:	441c      	add	r4, r3
 80083ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083f2:	2200      	movs	r2, #0
 80083f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80083f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80083f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80083fc:	4642      	mov	r2, r8
 80083fe:	464b      	mov	r3, r9
 8008400:	1891      	adds	r1, r2, r2
 8008402:	60b9      	str	r1, [r7, #8]
 8008404:	415b      	adcs	r3, r3
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800840c:	4641      	mov	r1, r8
 800840e:	1851      	adds	r1, r2, r1
 8008410:	6039      	str	r1, [r7, #0]
 8008412:	4649      	mov	r1, r9
 8008414:	414b      	adcs	r3, r1
 8008416:	607b      	str	r3, [r7, #4]
 8008418:	f04f 0200 	mov.w	r2, #0
 800841c:	f04f 0300 	mov.w	r3, #0
 8008420:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008424:	4659      	mov	r1, fp
 8008426:	00cb      	lsls	r3, r1, #3
 8008428:	4651      	mov	r1, sl
 800842a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800842e:	4651      	mov	r1, sl
 8008430:	00ca      	lsls	r2, r1, #3
 8008432:	4610      	mov	r0, r2
 8008434:	4619      	mov	r1, r3
 8008436:	4603      	mov	r3, r0
 8008438:	4642      	mov	r2, r8
 800843a:	189b      	adds	r3, r3, r2
 800843c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800843e:	464b      	mov	r3, r9
 8008440:	460a      	mov	r2, r1
 8008442:	eb42 0303 	adc.w	r3, r2, r3
 8008446:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	663b      	str	r3, [r7, #96]	@ 0x60
 8008452:	667a      	str	r2, [r7, #100]	@ 0x64
 8008454:	f04f 0200 	mov.w	r2, #0
 8008458:	f04f 0300 	mov.w	r3, #0
 800845c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008460:	4649      	mov	r1, r9
 8008462:	008b      	lsls	r3, r1, #2
 8008464:	4641      	mov	r1, r8
 8008466:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800846a:	4641      	mov	r1, r8
 800846c:	008a      	lsls	r2, r1, #2
 800846e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008472:	f7f8 fc39 	bl	8000ce8 <__aeabi_uldivmod>
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	4b0d      	ldr	r3, [pc, #52]	@ (80084b0 <UART_SetConfig+0x4e4>)
 800847c:	fba3 1302 	umull	r1, r3, r3, r2
 8008480:	095b      	lsrs	r3, r3, #5
 8008482:	2164      	movs	r1, #100	@ 0x64
 8008484:	fb01 f303 	mul.w	r3, r1, r3
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	011b      	lsls	r3, r3, #4
 800848c:	3332      	adds	r3, #50	@ 0x32
 800848e:	4a08      	ldr	r2, [pc, #32]	@ (80084b0 <UART_SetConfig+0x4e4>)
 8008490:	fba2 2303 	umull	r2, r3, r2, r3
 8008494:	095b      	lsrs	r3, r3, #5
 8008496:	f003 020f 	and.w	r2, r3, #15
 800849a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4422      	add	r2, r4
 80084a2:	609a      	str	r2, [r3, #8]
}
 80084a4:	bf00      	nop
 80084a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80084aa:	46bd      	mov	sp, r7
 80084ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084b0:	51eb851f 	.word	0x51eb851f

080084b4 <__NVIC_SetPriority>:
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	4603      	mov	r3, r0
 80084bc:	6039      	str	r1, [r7, #0]
 80084be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	db0a      	blt.n	80084de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	490c      	ldr	r1, [pc, #48]	@ (8008500 <__NVIC_SetPriority+0x4c>)
 80084ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084d2:	0112      	lsls	r2, r2, #4
 80084d4:	b2d2      	uxtb	r2, r2
 80084d6:	440b      	add	r3, r1
 80084d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80084dc:	e00a      	b.n	80084f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	4908      	ldr	r1, [pc, #32]	@ (8008504 <__NVIC_SetPriority+0x50>)
 80084e4:	79fb      	ldrb	r3, [r7, #7]
 80084e6:	f003 030f 	and.w	r3, r3, #15
 80084ea:	3b04      	subs	r3, #4
 80084ec:	0112      	lsls	r2, r2, #4
 80084ee:	b2d2      	uxtb	r2, r2
 80084f0:	440b      	add	r3, r1
 80084f2:	761a      	strb	r2, [r3, #24]
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	e000e100 	.word	0xe000e100
 8008504:	e000ed00 	.word	0xe000ed00

08008508 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008508:	b580      	push	{r7, lr}
 800850a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800850c:	2100      	movs	r1, #0
 800850e:	f06f 0004 	mvn.w	r0, #4
 8008512:	f7ff ffcf 	bl	80084b4 <__NVIC_SetPriority>
#endif
}
 8008516:	bf00      	nop
 8008518:	bd80      	pop	{r7, pc}
	...

0800851c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008522:	f3ef 8305 	mrs	r3, IPSR
 8008526:	603b      	str	r3, [r7, #0]
  return(result);
 8008528:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800852e:	f06f 0305 	mvn.w	r3, #5
 8008532:	607b      	str	r3, [r7, #4]
 8008534:	e00c      	b.n	8008550 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008536:	4b0a      	ldr	r3, [pc, #40]	@ (8008560 <osKernelInitialize+0x44>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d105      	bne.n	800854a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800853e:	4b08      	ldr	r3, [pc, #32]	@ (8008560 <osKernelInitialize+0x44>)
 8008540:	2201      	movs	r2, #1
 8008542:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008544:	2300      	movs	r3, #0
 8008546:	607b      	str	r3, [r7, #4]
 8008548:	e002      	b.n	8008550 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800854a:	f04f 33ff 	mov.w	r3, #4294967295
 800854e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008550:	687b      	ldr	r3, [r7, #4]
}
 8008552:	4618      	mov	r0, r3
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	20000694 	.word	0x20000694

08008564 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800856a:	f3ef 8305 	mrs	r3, IPSR
 800856e:	603b      	str	r3, [r7, #0]
  return(result);
 8008570:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008572:	2b00      	cmp	r3, #0
 8008574:	d003      	beq.n	800857e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008576:	f06f 0305 	mvn.w	r3, #5
 800857a:	607b      	str	r3, [r7, #4]
 800857c:	e010      	b.n	80085a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800857e:	4b0b      	ldr	r3, [pc, #44]	@ (80085ac <osKernelStart+0x48>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d109      	bne.n	800859a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008586:	f7ff ffbf 	bl	8008508 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800858a:	4b08      	ldr	r3, [pc, #32]	@ (80085ac <osKernelStart+0x48>)
 800858c:	2202      	movs	r2, #2
 800858e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008590:	f001 f87a 	bl	8009688 <vTaskStartScheduler>
      stat = osOK;
 8008594:	2300      	movs	r3, #0
 8008596:	607b      	str	r3, [r7, #4]
 8008598:	e002      	b.n	80085a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800859a:	f04f 33ff 	mov.w	r3, #4294967295
 800859e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80085a0:	687b      	ldr	r3, [r7, #4]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	20000694 	.word	0x20000694

080085b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08e      	sub	sp, #56	@ 0x38
 80085b4:	af04      	add	r7, sp, #16
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80085bc:	2300      	movs	r3, #0
 80085be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085c0:	f3ef 8305 	mrs	r3, IPSR
 80085c4:	617b      	str	r3, [r7, #20]
  return(result);
 80085c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d17e      	bne.n	80086ca <osThreadNew+0x11a>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d07b      	beq.n	80086ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80085d2:	2380      	movs	r3, #128	@ 0x80
 80085d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80085d6:	2318      	movs	r3, #24
 80085d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80085da:	2300      	movs	r3, #0
 80085dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80085de:	f04f 33ff 	mov.w	r3, #4294967295
 80085e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d045      	beq.n	8008676 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <osThreadNew+0x48>
        name = attr->name;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d008      	beq.n	800861e <osThreadNew+0x6e>
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	2b38      	cmp	r3, #56	@ 0x38
 8008610:	d805      	bhi.n	800861e <osThreadNew+0x6e>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <osThreadNew+0x72>
        return (NULL);
 800861e:	2300      	movs	r3, #0
 8008620:	e054      	b.n	80086cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d003      	beq.n	8008632 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	089b      	lsrs	r3, r3, #2
 8008630:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00e      	beq.n	8008658 <osThreadNew+0xa8>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	2b5b      	cmp	r3, #91	@ 0x5b
 8008640:	d90a      	bls.n	8008658 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008646:	2b00      	cmp	r3, #0
 8008648:	d006      	beq.n	8008658 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d002      	beq.n	8008658 <osThreadNew+0xa8>
        mem = 1;
 8008652:	2301      	movs	r3, #1
 8008654:	61bb      	str	r3, [r7, #24]
 8008656:	e010      	b.n	800867a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10c      	bne.n	800867a <osThreadNew+0xca>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d108      	bne.n	800867a <osThreadNew+0xca>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d104      	bne.n	800867a <osThreadNew+0xca>
          mem = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	61bb      	str	r3, [r7, #24]
 8008674:	e001      	b.n	800867a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d110      	bne.n	80086a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008688:	9202      	str	r2, [sp, #8]
 800868a:	9301      	str	r3, [sp, #4]
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	6a3a      	ldr	r2, [r7, #32]
 8008694:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f000 fe1a 	bl	80092d0 <xTaskCreateStatic>
 800869c:	4603      	mov	r3, r0
 800869e:	613b      	str	r3, [r7, #16]
 80086a0:	e013      	b.n	80086ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d110      	bne.n	80086ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	f107 0310 	add.w	r3, r7, #16
 80086b0:	9301      	str	r3, [sp, #4]
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 fe68 	bl	8009390 <xTaskCreate>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d001      	beq.n	80086ca <osThreadNew+0x11a>
            hTask = NULL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80086ca:	693b      	ldr	r3, [r7, #16]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3728      	adds	r7, #40	@ 0x28
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086dc:	f3ef 8305 	mrs	r3, IPSR
 80086e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80086e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d003      	beq.n	80086f0 <osDelay+0x1c>
    stat = osErrorISR;
 80086e8:	f06f 0305 	mvn.w	r3, #5
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	e007      	b.n	8008700 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d002      	beq.n	8008700 <osDelay+0x2c>
      vTaskDelay(ticks);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 ff8e 	bl	800961c <vTaskDelay>
    }
  }

  return (stat);
 8008700:	68fb      	ldr	r3, [r7, #12]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
	...

0800870c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4a07      	ldr	r2, [pc, #28]	@ (8008738 <vApplicationGetIdleTaskMemory+0x2c>)
 800871c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	4a06      	ldr	r2, [pc, #24]	@ (800873c <vApplicationGetIdleTaskMemory+0x30>)
 8008722:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2280      	movs	r2, #128	@ 0x80
 8008728:	601a      	str	r2, [r3, #0]
}
 800872a:	bf00      	nop
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	20000698 	.word	0x20000698
 800873c:	200006f4 	.word	0x200006f4

08008740 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4a07      	ldr	r2, [pc, #28]	@ (800876c <vApplicationGetTimerTaskMemory+0x2c>)
 8008750:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	4a06      	ldr	r2, [pc, #24]	@ (8008770 <vApplicationGetTimerTaskMemory+0x30>)
 8008756:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800875e:	601a      	str	r2, [r3, #0]
}
 8008760:	bf00      	nop
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	200008f4 	.word	0x200008f4
 8008770:	20000950 	.word	0x20000950

08008774 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f103 0208 	add.w	r2, r3, #8
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f04f 32ff 	mov.w	r2, #4294967295
 800878c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f103 0208 	add.w	r2, r3, #8
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f103 0208 	add.w	r2, r3, #8
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80087c2:	bf00      	nop
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087ce:	b480      	push	{r7}
 80087d0:	b085      	sub	sp, #20
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	689a      	ldr	r2, [r3, #8]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	683a      	ldr	r2, [r7, #0]
 80087f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	1c5a      	adds	r2, r3, #1
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	601a      	str	r2, [r3, #0]
}
 800880a:	bf00      	nop
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008816:	b480      	push	{r7}
 8008818:	b085      	sub	sp, #20
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882c:	d103      	bne.n	8008836 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	e00c      	b.n	8008850 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	3308      	adds	r3, #8
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	e002      	b.n	8008844 <vListInsert+0x2e>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	429a      	cmp	r2, r3
 800884e:	d2f6      	bcs.n	800883e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	685a      	ldr	r2, [r3, #4]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	601a      	str	r2, [r3, #0]
}
 800887c:	bf00      	nop
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	6892      	ldr	r2, [r2, #8]
 800889e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	6852      	ldr	r2, [r2, #4]
 80088a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d103      	bne.n	80088bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	689a      	ldr	r2, [r3, #8]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	1e5a      	subs	r2, r3, #1
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10b      	bne.n	8008908 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008902:	bf00      	nop
 8008904:	bf00      	nop
 8008906:	e7fd      	b.n	8008904 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008908:	f002 f876 	bl	800a9f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008914:	68f9      	ldr	r1, [r7, #12]
 8008916:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008918:	fb01 f303 	mul.w	r3, r1, r3
 800891c:	441a      	add	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008938:	3b01      	subs	r3, #1
 800893a:	68f9      	ldr	r1, [r7, #12]
 800893c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800893e:	fb01 f303 	mul.w	r3, r1, r3
 8008942:	441a      	add	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	22ff      	movs	r2, #255	@ 0xff
 800894c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	22ff      	movs	r2, #255	@ 0xff
 8008954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d114      	bne.n	8008988 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d01a      	beq.n	800899c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3310      	adds	r3, #16
 800896a:	4618      	mov	r0, r3
 800896c:	f001 f91a 	bl	8009ba4 <xTaskRemoveFromEventList>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d012      	beq.n	800899c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008976:	4b0d      	ldr	r3, [pc, #52]	@ (80089ac <xQueueGenericReset+0xd0>)
 8008978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	e009      	b.n	800899c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	3310      	adds	r3, #16
 800898c:	4618      	mov	r0, r3
 800898e:	f7ff fef1 	bl	8008774 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	3324      	adds	r3, #36	@ 0x24
 8008996:	4618      	mov	r0, r3
 8008998:	f7ff feec 	bl	8008774 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800899c:	f002 f85e 	bl	800aa5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80089a0:	2301      	movs	r3, #1
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	e000ed04 	.word	0xe000ed04

080089b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b08e      	sub	sp, #56	@ 0x38
 80089b4:	af02      	add	r7, sp, #8
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
 80089bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10b      	bne.n	80089dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80089c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089d6:	bf00      	nop
 80089d8:	bf00      	nop
 80089da:	e7fd      	b.n	80089d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10b      	bne.n	80089fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop
 80089f8:	e7fd      	b.n	80089f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <xQueueGenericCreateStatic+0x56>
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <xQueueGenericCreateStatic+0x5a>
 8008a06:	2301      	movs	r3, #1
 8008a08:	e000      	b.n	8008a0c <xQueueGenericCreateStatic+0x5c>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10b      	bne.n	8008a28 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	623b      	str	r3, [r7, #32]
}
 8008a22:	bf00      	nop
 8008a24:	bf00      	nop
 8008a26:	e7fd      	b.n	8008a24 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d102      	bne.n	8008a34 <xQueueGenericCreateStatic+0x84>
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <xQueueGenericCreateStatic+0x88>
 8008a34:	2301      	movs	r3, #1
 8008a36:	e000      	b.n	8008a3a <xQueueGenericCreateStatic+0x8a>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10b      	bne.n	8008a56 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	61fb      	str	r3, [r7, #28]
}
 8008a50:	bf00      	nop
 8008a52:	bf00      	nop
 8008a54:	e7fd      	b.n	8008a52 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a56:	2350      	movs	r3, #80	@ 0x50
 8008a58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2b50      	cmp	r3, #80	@ 0x50
 8008a5e:	d00b      	beq.n	8008a78 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	61bb      	str	r3, [r7, #24]
}
 8008a72:	bf00      	nop
 8008a74:	bf00      	nop
 8008a76:	e7fd      	b.n	8008a74 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008a78:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00d      	beq.n	8008aa0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a8c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	4613      	mov	r3, r2
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	68b9      	ldr	r1, [r7, #8]
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f000 f805 	bl	8008aaa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3730      	adds	r7, #48	@ 0x30
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	607a      	str	r2, [r7, #4]
 8008ab6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d103      	bne.n	8008ac6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	69ba      	ldr	r2, [r7, #24]
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	e002      	b.n	8008acc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ad8:	2101      	movs	r1, #1
 8008ada:	69b8      	ldr	r0, [r7, #24]
 8008adc:	f7ff fefe 	bl	80088dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	78fa      	ldrb	r2, [r7, #3]
 8008ae4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ae8:	bf00      	nop
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b08e      	sub	sp, #56	@ 0x38
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
 8008afc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008afe:	2300      	movs	r3, #0
 8008b00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10b      	bne.n	8008b24 <xQueueGenericSend+0x34>
	__asm volatile
 8008b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008b1e:	bf00      	nop
 8008b20:	bf00      	nop
 8008b22:	e7fd      	b.n	8008b20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d103      	bne.n	8008b32 <xQueueGenericSend+0x42>
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d101      	bne.n	8008b36 <xQueueGenericSend+0x46>
 8008b32:	2301      	movs	r3, #1
 8008b34:	e000      	b.n	8008b38 <xQueueGenericSend+0x48>
 8008b36:	2300      	movs	r3, #0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10b      	bne.n	8008b54 <xQueueGenericSend+0x64>
	__asm volatile
 8008b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b4e:	bf00      	nop
 8008b50:	bf00      	nop
 8008b52:	e7fd      	b.n	8008b50 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d103      	bne.n	8008b62 <xQueueGenericSend+0x72>
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d101      	bne.n	8008b66 <xQueueGenericSend+0x76>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e000      	b.n	8008b68 <xQueueGenericSend+0x78>
 8008b66:	2300      	movs	r3, #0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10b      	bne.n	8008b84 <xQueueGenericSend+0x94>
	__asm volatile
 8008b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	623b      	str	r3, [r7, #32]
}
 8008b7e:	bf00      	nop
 8008b80:	bf00      	nop
 8008b82:	e7fd      	b.n	8008b80 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b84:	f001 f9ce 	bl	8009f24 <xTaskGetSchedulerState>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d102      	bne.n	8008b94 <xQueueGenericSend+0xa4>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <xQueueGenericSend+0xa8>
 8008b94:	2301      	movs	r3, #1
 8008b96:	e000      	b.n	8008b9a <xQueueGenericSend+0xaa>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10b      	bne.n	8008bb6 <xQueueGenericSend+0xc6>
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	61fb      	str	r3, [r7, #28]
}
 8008bb0:	bf00      	nop
 8008bb2:	bf00      	nop
 8008bb4:	e7fd      	b.n	8008bb2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bb6:	f001 ff1f 	bl	800a9f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d302      	bcc.n	8008bcc <xQueueGenericSend+0xdc>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d129      	bne.n	8008c20 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	68b9      	ldr	r1, [r7, #8]
 8008bd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bd2:	f000 fa0f 	bl	8008ff4 <prvCopyDataToQueue>
 8008bd6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d010      	beq.n	8008c02 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be2:	3324      	adds	r3, #36	@ 0x24
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 ffdd 	bl	8009ba4 <xTaskRemoveFromEventList>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d013      	beq.n	8008c18 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008bf0:	4b3f      	ldr	r3, [pc, #252]	@ (8008cf0 <xQueueGenericSend+0x200>)
 8008bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bf6:	601a      	str	r2, [r3, #0]
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	e00a      	b.n	8008c18 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d007      	beq.n	8008c18 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c08:	4b39      	ldr	r3, [pc, #228]	@ (8008cf0 <xQueueGenericSend+0x200>)
 8008c0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c0e:	601a      	str	r2, [r3, #0]
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c18:	f001 ff20 	bl	800aa5c <vPortExitCritical>
				return pdPASS;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e063      	b.n	8008ce8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d103      	bne.n	8008c2e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c26:	f001 ff19 	bl	800aa5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	e05c      	b.n	8008ce8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d106      	bne.n	8008c42 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c34:	f107 0314 	add.w	r3, r7, #20
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f001 f817 	bl	8009c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c42:	f001 ff0b 	bl	800aa5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c46:	f000 fd87 	bl	8009758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c4a:	f001 fed5 	bl	800a9f8 <vPortEnterCritical>
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c54:	b25b      	sxtb	r3, r3
 8008c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5a:	d103      	bne.n	8008c64 <xQueueGenericSend+0x174>
 8008c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c6a:	b25b      	sxtb	r3, r3
 8008c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c70:	d103      	bne.n	8008c7a <xQueueGenericSend+0x18a>
 8008c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c74:	2200      	movs	r2, #0
 8008c76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c7a:	f001 feef 	bl	800aa5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c7e:	1d3a      	adds	r2, r7, #4
 8008c80:	f107 0314 	add.w	r3, r7, #20
 8008c84:	4611      	mov	r1, r2
 8008c86:	4618      	mov	r0, r3
 8008c88:	f001 f806 	bl	8009c98 <xTaskCheckForTimeOut>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d124      	bne.n	8008cdc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c94:	f000 faa6 	bl	80091e4 <prvIsQueueFull>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d018      	beq.n	8008cd0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca0:	3310      	adds	r3, #16
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 ff2a 	bl	8009b00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008cac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cae:	f000 fa31 	bl	8009114 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008cb2:	f000 fd5f 	bl	8009774 <xTaskResumeAll>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f47f af7c 	bne.w	8008bb6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf0 <xQueueGenericSend+0x200>)
 8008cc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cc4:	601a      	str	r2, [r3, #0]
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	e772      	b.n	8008bb6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008cd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cd2:	f000 fa1f 	bl	8009114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cd6:	f000 fd4d 	bl	8009774 <xTaskResumeAll>
 8008cda:	e76c      	b.n	8008bb6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008cdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cde:	f000 fa19 	bl	8009114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ce2:	f000 fd47 	bl	8009774 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ce6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3738      	adds	r7, #56	@ 0x38
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	e000ed04 	.word	0xe000ed04

08008cf4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b090      	sub	sp, #64	@ 0x40
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
 8008d00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10b      	bne.n	8008d24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d1e:	bf00      	nop
 8008d20:	bf00      	nop
 8008d22:	e7fd      	b.n	8008d20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d103      	bne.n	8008d32 <xQueueGenericSendFromISR+0x3e>
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d101      	bne.n	8008d36 <xQueueGenericSendFromISR+0x42>
 8008d32:	2301      	movs	r3, #1
 8008d34:	e000      	b.n	8008d38 <xQueueGenericSendFromISR+0x44>
 8008d36:	2300      	movs	r3, #0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10b      	bne.n	8008d54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d40:	f383 8811 	msr	BASEPRI, r3
 8008d44:	f3bf 8f6f 	isb	sy
 8008d48:	f3bf 8f4f 	dsb	sy
 8008d4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008d4e:	bf00      	nop
 8008d50:	bf00      	nop
 8008d52:	e7fd      	b.n	8008d50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d103      	bne.n	8008d62 <xQueueGenericSendFromISR+0x6e>
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d101      	bne.n	8008d66 <xQueueGenericSendFromISR+0x72>
 8008d62:	2301      	movs	r3, #1
 8008d64:	e000      	b.n	8008d68 <xQueueGenericSendFromISR+0x74>
 8008d66:	2300      	movs	r3, #0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10b      	bne.n	8008d84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	623b      	str	r3, [r7, #32]
}
 8008d7e:	bf00      	nop
 8008d80:	bf00      	nop
 8008d82:	e7fd      	b.n	8008d80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d84:	f001 ff18 	bl	800abb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008d88:	f3ef 8211 	mrs	r2, BASEPRI
 8008d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	61fa      	str	r2, [r7, #28]
 8008d9e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008da0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008da2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d302      	bcc.n	8008db6 <xQueueGenericSendFromISR+0xc2>
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d12f      	bne.n	8008e16 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008dbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008dc6:	683a      	ldr	r2, [r7, #0]
 8008dc8:	68b9      	ldr	r1, [r7, #8]
 8008dca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008dcc:	f000 f912 	bl	8008ff4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008dd0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd8:	d112      	bne.n	8008e00 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d016      	beq.n	8008e10 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de4:	3324      	adds	r3, #36	@ 0x24
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 fedc 	bl	8009ba4 <xTaskRemoveFromEventList>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00e      	beq.n	8008e10 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00b      	beq.n	8008e10 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	e007      	b.n	8008e10 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008e04:	3301      	adds	r3, #1
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	b25a      	sxtb	r2, r3
 8008e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008e10:	2301      	movs	r3, #1
 8008e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008e14:	e001      	b.n	8008e1a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e16:	2300      	movs	r3, #0
 8008e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e1c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008e24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3740      	adds	r7, #64	@ 0x40
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b08c      	sub	sp, #48	@ 0x30
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10b      	bne.n	8008e62 <xQueueReceive+0x32>
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	623b      	str	r3, [r7, #32]
}
 8008e5c:	bf00      	nop
 8008e5e:	bf00      	nop
 8008e60:	e7fd      	b.n	8008e5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d103      	bne.n	8008e70 <xQueueReceive+0x40>
 8008e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <xQueueReceive+0x44>
 8008e70:	2301      	movs	r3, #1
 8008e72:	e000      	b.n	8008e76 <xQueueReceive+0x46>
 8008e74:	2300      	movs	r3, #0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <xQueueReceive+0x62>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	61fb      	str	r3, [r7, #28]
}
 8008e8c:	bf00      	nop
 8008e8e:	bf00      	nop
 8008e90:	e7fd      	b.n	8008e8e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e92:	f001 f847 	bl	8009f24 <xTaskGetSchedulerState>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d102      	bne.n	8008ea2 <xQueueReceive+0x72>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <xQueueReceive+0x76>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e000      	b.n	8008ea8 <xQueueReceive+0x78>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10b      	bne.n	8008ec4 <xQueueReceive+0x94>
	__asm volatile
 8008eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	61bb      	str	r3, [r7, #24]
}
 8008ebe:	bf00      	nop
 8008ec0:	bf00      	nop
 8008ec2:	e7fd      	b.n	8008ec0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ec4:	f001 fd98 	bl	800a9f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ecc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d01f      	beq.n	8008f14 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ed4:	68b9      	ldr	r1, [r7, #8]
 8008ed6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ed8:	f000 f8f6 	bl	80090c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ede:	1e5a      	subs	r2, r3, #1
 8008ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00f      	beq.n	8008f0c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eee:	3310      	adds	r3, #16
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 fe57 	bl	8009ba4 <xTaskRemoveFromEventList>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d007      	beq.n	8008f0c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008efc:	4b3c      	ldr	r3, [pc, #240]	@ (8008ff0 <xQueueReceive+0x1c0>)
 8008efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f0c:	f001 fda6 	bl	800aa5c <vPortExitCritical>
				return pdPASS;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e069      	b.n	8008fe8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d103      	bne.n	8008f22 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f1a:	f001 fd9f 	bl	800aa5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	e062      	b.n	8008fe8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d106      	bne.n	8008f36 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f28:	f107 0310 	add.w	r3, r7, #16
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 fe9d 	bl	8009c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f32:	2301      	movs	r3, #1
 8008f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f36:	f001 fd91 	bl	800aa5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f3a:	f000 fc0d 	bl	8009758 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f3e:	f001 fd5b 	bl	800a9f8 <vPortEnterCritical>
 8008f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f48:	b25b      	sxtb	r3, r3
 8008f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4e:	d103      	bne.n	8008f58 <xQueueReceive+0x128>
 8008f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f5e:	b25b      	sxtb	r3, r3
 8008f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f64:	d103      	bne.n	8008f6e <xQueueReceive+0x13e>
 8008f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f6e:	f001 fd75 	bl	800aa5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f72:	1d3a      	adds	r2, r7, #4
 8008f74:	f107 0310 	add.w	r3, r7, #16
 8008f78:	4611      	mov	r1, r2
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 fe8c 	bl	8009c98 <xTaskCheckForTimeOut>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d123      	bne.n	8008fce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f88:	f000 f916 	bl	80091b8 <prvIsQueueEmpty>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d017      	beq.n	8008fc2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f94:	3324      	adds	r3, #36	@ 0x24
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	4611      	mov	r1, r2
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 fdb0 	bl	8009b00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008fa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fa2:	f000 f8b7 	bl	8009114 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008fa6:	f000 fbe5 	bl	8009774 <xTaskResumeAll>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d189      	bne.n	8008ec4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8008ff0 <xQueueReceive+0x1c0>)
 8008fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	f3bf 8f6f 	isb	sy
 8008fc0:	e780      	b.n	8008ec4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008fc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fc4:	f000 f8a6 	bl	8009114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fc8:	f000 fbd4 	bl	8009774 <xTaskResumeAll>
 8008fcc:	e77a      	b.n	8008ec4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008fce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fd0:	f000 f8a0 	bl	8009114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fd4:	f000 fbce 	bl	8009774 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fda:	f000 f8ed 	bl	80091b8 <prvIsQueueEmpty>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f43f af6f 	beq.w	8008ec4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fe6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3730      	adds	r7, #48	@ 0x30
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	e000ed04 	.word	0xe000ed04

08008ff4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009000:	2300      	movs	r3, #0
 8009002:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009008:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10d      	bne.n	800902e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d14d      	bne.n	80090b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	4618      	mov	r0, r3
 8009020:	f000 ff9e 	bl	8009f60 <xTaskPriorityDisinherit>
 8009024:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	609a      	str	r2, [r3, #8]
 800902c:	e043      	b.n	80090b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d119      	bne.n	8009068 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6858      	ldr	r0, [r3, #4]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800903c:	461a      	mov	r2, r3
 800903e:	68b9      	ldr	r1, [r7, #8]
 8009040:	f004 f865 	bl	800d10e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	685a      	ldr	r2, [r3, #4]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800904c:	441a      	add	r2, r3
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	429a      	cmp	r2, r3
 800905c:	d32b      	bcc.n	80090b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	605a      	str	r2, [r3, #4]
 8009066:	e026      	b.n	80090b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	68d8      	ldr	r0, [r3, #12]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009070:	461a      	mov	r2, r3
 8009072:	68b9      	ldr	r1, [r7, #8]
 8009074:	f004 f84b 	bl	800d10e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	68da      	ldr	r2, [r3, #12]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009080:	425b      	negs	r3, r3
 8009082:	441a      	add	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	68da      	ldr	r2, [r3, #12]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	429a      	cmp	r2, r3
 8009092:	d207      	bcs.n	80090a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	689a      	ldr	r2, [r3, #8]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800909c:	425b      	negs	r3, r3
 800909e:	441a      	add	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d105      	bne.n	80090b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	1c5a      	adds	r2, r3, #1
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80090be:	697b      	ldr	r3, [r7, #20]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3718      	adds	r7, #24
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d018      	beq.n	800910c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68da      	ldr	r2, [r3, #12]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090e2:	441a      	add	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68da      	ldr	r2, [r3, #12]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d303      	bcc.n	80090fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	68d9      	ldr	r1, [r3, #12]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009104:	461a      	mov	r2, r3
 8009106:	6838      	ldr	r0, [r7, #0]
 8009108:	f004 f801 	bl	800d10e <memcpy>
	}
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800911c:	f001 fc6c 	bl	800a9f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009126:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009128:	e011      	b.n	800914e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800912e:	2b00      	cmp	r3, #0
 8009130:	d012      	beq.n	8009158 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	3324      	adds	r3, #36	@ 0x24
 8009136:	4618      	mov	r0, r3
 8009138:	f000 fd34 	bl	8009ba4 <xTaskRemoveFromEventList>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d001      	beq.n	8009146 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009142:	f000 fe0d 	bl	8009d60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009146:	7bfb      	ldrb	r3, [r7, #15]
 8009148:	3b01      	subs	r3, #1
 800914a:	b2db      	uxtb	r3, r3
 800914c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800914e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009152:	2b00      	cmp	r3, #0
 8009154:	dce9      	bgt.n	800912a <prvUnlockQueue+0x16>
 8009156:	e000      	b.n	800915a <prvUnlockQueue+0x46>
					break;
 8009158:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	22ff      	movs	r2, #255	@ 0xff
 800915e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009162:	f001 fc7b 	bl	800aa5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009166:	f001 fc47 	bl	800a9f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009170:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009172:	e011      	b.n	8009198 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d012      	beq.n	80091a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3310      	adds	r3, #16
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fd0f 	bl	8009ba4 <xTaskRemoveFromEventList>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800918c:	f000 fde8 	bl	8009d60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009190:	7bbb      	ldrb	r3, [r7, #14]
 8009192:	3b01      	subs	r3, #1
 8009194:	b2db      	uxtb	r3, r3
 8009196:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800919c:	2b00      	cmp	r3, #0
 800919e:	dce9      	bgt.n	8009174 <prvUnlockQueue+0x60>
 80091a0:	e000      	b.n	80091a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80091a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	22ff      	movs	r2, #255	@ 0xff
 80091a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80091ac:	f001 fc56 	bl	800aa5c <vPortExitCritical>
}
 80091b0:	bf00      	nop
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091c0:	f001 fc1a 	bl	800a9f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d102      	bne.n	80091d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80091cc:	2301      	movs	r3, #1
 80091ce:	60fb      	str	r3, [r7, #12]
 80091d0:	e001      	b.n	80091d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80091d2:	2300      	movs	r3, #0
 80091d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091d6:	f001 fc41 	bl	800aa5c <vPortExitCritical>

	return xReturn;
 80091da:	68fb      	ldr	r3, [r7, #12]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091ec:	f001 fc04 	bl	800a9f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d102      	bne.n	8009202 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091fc:	2301      	movs	r3, #1
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	e001      	b.n	8009206 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009206:	f001 fc29 	bl	800aa5c <vPortExitCritical>

	return xReturn;
 800920a:	68fb      	ldr	r3, [r7, #12]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800921e:	2300      	movs	r3, #0
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	e014      	b.n	800924e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009224:	4a0f      	ldr	r2, [pc, #60]	@ (8009264 <vQueueAddToRegistry+0x50>)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10b      	bne.n	8009248 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009230:	490c      	ldr	r1, [pc, #48]	@ (8009264 <vQueueAddToRegistry+0x50>)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800923a:	4a0a      	ldr	r2, [pc, #40]	@ (8009264 <vQueueAddToRegistry+0x50>)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	00db      	lsls	r3, r3, #3
 8009240:	4413      	add	r3, r2
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009246:	e006      	b.n	8009256 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	3301      	adds	r3, #1
 800924c:	60fb      	str	r3, [r7, #12]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2b07      	cmp	r3, #7
 8009252:	d9e7      	bls.n	8009224 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009254:	bf00      	nop
 8009256:	bf00      	nop
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	20000d50 	.word	0x20000d50

08009268 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009278:	f001 fbbe 	bl	800a9f8 <vPortEnterCritical>
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009282:	b25b      	sxtb	r3, r3
 8009284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009288:	d103      	bne.n	8009292 <vQueueWaitForMessageRestricted+0x2a>
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009298:	b25b      	sxtb	r3, r3
 800929a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929e:	d103      	bne.n	80092a8 <vQueueWaitForMessageRestricted+0x40>
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092a8:	f001 fbd8 	bl	800aa5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d106      	bne.n	80092c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	3324      	adds	r3, #36	@ 0x24
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	68b9      	ldr	r1, [r7, #8]
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 fc45 	bl	8009b4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80092c2:	6978      	ldr	r0, [r7, #20]
 80092c4:	f7ff ff26 	bl	8009114 <prvUnlockQueue>
	}
 80092c8:	bf00      	nop
 80092ca:	3718      	adds	r7, #24
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b08e      	sub	sp, #56	@ 0x38
 80092d4:	af04      	add	r7, sp, #16
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80092de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10b      	bne.n	80092fc <xTaskCreateStatic+0x2c>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	623b      	str	r3, [r7, #32]
}
 80092f6:	bf00      	nop
 80092f8:	bf00      	nop
 80092fa:	e7fd      	b.n	80092f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80092fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10b      	bne.n	800931a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	61fb      	str	r3, [r7, #28]
}
 8009314:	bf00      	nop
 8009316:	bf00      	nop
 8009318:	e7fd      	b.n	8009316 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800931a:	235c      	movs	r3, #92	@ 0x5c
 800931c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	2b5c      	cmp	r3, #92	@ 0x5c
 8009322:	d00b      	beq.n	800933c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	61bb      	str	r3, [r7, #24]
}
 8009336:	bf00      	nop
 8009338:	bf00      	nop
 800933a:	e7fd      	b.n	8009338 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800933c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800933e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009340:	2b00      	cmp	r3, #0
 8009342:	d01e      	beq.n	8009382 <xTaskCreateStatic+0xb2>
 8009344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009346:	2b00      	cmp	r3, #0
 8009348:	d01b      	beq.n	8009382 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800934a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800934e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009350:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009352:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009356:	2202      	movs	r2, #2
 8009358:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800935c:	2300      	movs	r3, #0
 800935e:	9303      	str	r3, [sp, #12]
 8009360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009362:	9302      	str	r3, [sp, #8]
 8009364:	f107 0314 	add.w	r3, r7, #20
 8009368:	9301      	str	r3, [sp, #4]
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	68b9      	ldr	r1, [r7, #8]
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f000 f850 	bl	800941a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800937a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800937c:	f000 f8de 	bl	800953c <prvAddNewTaskToReadyList>
 8009380:	e001      	b.n	8009386 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009382:	2300      	movs	r3, #0
 8009384:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009386:	697b      	ldr	r3, [r7, #20]
	}
 8009388:	4618      	mov	r0, r3
 800938a:	3728      	adds	r7, #40	@ 0x28
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009390:	b580      	push	{r7, lr}
 8009392:	b08c      	sub	sp, #48	@ 0x30
 8009394:	af04      	add	r7, sp, #16
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	603b      	str	r3, [r7, #0]
 800939c:	4613      	mov	r3, r2
 800939e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80093a0:	88fb      	ldrh	r3, [r7, #6]
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4618      	mov	r0, r3
 80093a6:	f001 fc49 	bl	800ac3c <pvPortMalloc>
 80093aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00e      	beq.n	80093d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80093b2:	205c      	movs	r0, #92	@ 0x5c
 80093b4:	f001 fc42 	bl	800ac3c <pvPortMalloc>
 80093b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d003      	beq.n	80093c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80093c6:	e005      	b.n	80093d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80093c8:	6978      	ldr	r0, [r7, #20]
 80093ca:	f001 fd05 	bl	800add8 <vPortFree>
 80093ce:	e001      	b.n	80093d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80093d0:	2300      	movs	r3, #0
 80093d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d017      	beq.n	800940a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80093e2:	88fa      	ldrh	r2, [r7, #6]
 80093e4:	2300      	movs	r3, #0
 80093e6:	9303      	str	r3, [sp, #12]
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	9302      	str	r3, [sp, #8]
 80093ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ee:	9301      	str	r3, [sp, #4]
 80093f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	68b9      	ldr	r1, [r7, #8]
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f000 f80e 	bl	800941a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093fe:	69f8      	ldr	r0, [r7, #28]
 8009400:	f000 f89c 	bl	800953c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009404:	2301      	movs	r3, #1
 8009406:	61bb      	str	r3, [r7, #24]
 8009408:	e002      	b.n	8009410 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800940a:	f04f 33ff 	mov.w	r3, #4294967295
 800940e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009410:	69bb      	ldr	r3, [r7, #24]
	}
 8009412:	4618      	mov	r0, r3
 8009414:	3720      	adds	r7, #32
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b088      	sub	sp, #32
 800941e:	af00      	add	r7, sp, #0
 8009420:	60f8      	str	r0, [r7, #12]
 8009422:	60b9      	str	r1, [r7, #8]
 8009424:	607a      	str	r2, [r7, #4]
 8009426:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	461a      	mov	r2, r3
 8009432:	21a5      	movs	r1, #165	@ 0xa5
 8009434:	f003 fd7e 	bl	800cf34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009442:	3b01      	subs	r3, #1
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	f023 0307 	bic.w	r3, r3, #7
 8009450:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	f003 0307 	and.w	r3, r3, #7
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00b      	beq.n	8009474 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800945c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009460:	f383 8811 	msr	BASEPRI, r3
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	617b      	str	r3, [r7, #20]
}
 800946e:	bf00      	nop
 8009470:	bf00      	nop
 8009472:	e7fd      	b.n	8009470 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d01f      	beq.n	80094ba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800947a:	2300      	movs	r3, #0
 800947c:	61fb      	str	r3, [r7, #28]
 800947e:	e012      	b.n	80094a6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	4413      	add	r3, r2
 8009486:	7819      	ldrb	r1, [r3, #0]
 8009488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	4413      	add	r3, r2
 800948e:	3334      	adds	r3, #52	@ 0x34
 8009490:	460a      	mov	r2, r1
 8009492:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	4413      	add	r3, r2
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d006      	beq.n	80094ae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	3301      	adds	r3, #1
 80094a4:	61fb      	str	r3, [r7, #28]
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	2b0f      	cmp	r3, #15
 80094aa:	d9e9      	bls.n	8009480 <prvInitialiseNewTask+0x66>
 80094ac:	e000      	b.n	80094b0 <prvInitialiseNewTask+0x96>
			{
				break;
 80094ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80094b8:	e003      	b.n	80094c2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80094ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80094c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c4:	2b37      	cmp	r3, #55	@ 0x37
 80094c6:	d901      	bls.n	80094cc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80094c8:	2337      	movs	r3, #55	@ 0x37
 80094ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80094cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80094d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094d6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80094d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094da:	2200      	movs	r2, #0
 80094dc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80094de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e0:	3304      	adds	r3, #4
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7ff f966 	bl	80087b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80094e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ea:	3318      	adds	r3, #24
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7ff f961 	bl	80087b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80094f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80094fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009500:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009506:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950a:	2200      	movs	r2, #0
 800950c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800950e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	68f9      	ldr	r1, [r7, #12]
 800951a:	69b8      	ldr	r0, [r7, #24]
 800951c:	f001 f93e 	bl	800a79c <pxPortInitialiseStack>
 8009520:	4602      	mov	r2, r0
 8009522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009524:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009528:	2b00      	cmp	r3, #0
 800952a:	d002      	beq.n	8009532 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800952c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009532:	bf00      	nop
 8009534:	3720      	adds	r7, #32
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
	...

0800953c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009544:	f001 fa58 	bl	800a9f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009548:	4b2d      	ldr	r3, [pc, #180]	@ (8009600 <prvAddNewTaskToReadyList+0xc4>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	4a2c      	ldr	r2, [pc, #176]	@ (8009600 <prvAddNewTaskToReadyList+0xc4>)
 8009550:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009552:	4b2c      	ldr	r3, [pc, #176]	@ (8009604 <prvAddNewTaskToReadyList+0xc8>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d109      	bne.n	800956e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800955a:	4a2a      	ldr	r2, [pc, #168]	@ (8009604 <prvAddNewTaskToReadyList+0xc8>)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009560:	4b27      	ldr	r3, [pc, #156]	@ (8009600 <prvAddNewTaskToReadyList+0xc4>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d110      	bne.n	800958a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009568:	f000 fc1e 	bl	8009da8 <prvInitialiseTaskLists>
 800956c:	e00d      	b.n	800958a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800956e:	4b26      	ldr	r3, [pc, #152]	@ (8009608 <prvAddNewTaskToReadyList+0xcc>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d109      	bne.n	800958a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009576:	4b23      	ldr	r3, [pc, #140]	@ (8009604 <prvAddNewTaskToReadyList+0xc8>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009580:	429a      	cmp	r2, r3
 8009582:	d802      	bhi.n	800958a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009584:	4a1f      	ldr	r2, [pc, #124]	@ (8009604 <prvAddNewTaskToReadyList+0xc8>)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800958a:	4b20      	ldr	r3, [pc, #128]	@ (800960c <prvAddNewTaskToReadyList+0xd0>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3301      	adds	r3, #1
 8009590:	4a1e      	ldr	r2, [pc, #120]	@ (800960c <prvAddNewTaskToReadyList+0xd0>)
 8009592:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009594:	4b1d      	ldr	r3, [pc, #116]	@ (800960c <prvAddNewTaskToReadyList+0xd0>)
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095a0:	4b1b      	ldr	r3, [pc, #108]	@ (8009610 <prvAddNewTaskToReadyList+0xd4>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d903      	bls.n	80095b0 <prvAddNewTaskToReadyList+0x74>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ac:	4a18      	ldr	r2, [pc, #96]	@ (8009610 <prvAddNewTaskToReadyList+0xd4>)
 80095ae:	6013      	str	r3, [r2, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095b4:	4613      	mov	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4a15      	ldr	r2, [pc, #84]	@ (8009614 <prvAddNewTaskToReadyList+0xd8>)
 80095be:	441a      	add	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3304      	adds	r3, #4
 80095c4:	4619      	mov	r1, r3
 80095c6:	4610      	mov	r0, r2
 80095c8:	f7ff f901 	bl	80087ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80095cc:	f001 fa46 	bl	800aa5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80095d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009608 <prvAddNewTaskToReadyList+0xcc>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00e      	beq.n	80095f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80095d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009604 <prvAddNewTaskToReadyList+0xc8>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d207      	bcs.n	80095f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80095e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009618 <prvAddNewTaskToReadyList+0xdc>)
 80095e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095f6:	bf00      	nop
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	20001264 	.word	0x20001264
 8009604:	20000d90 	.word	0x20000d90
 8009608:	20001270 	.word	0x20001270
 800960c:	20001280 	.word	0x20001280
 8009610:	2000126c 	.word	0x2000126c
 8009614:	20000d94 	.word	0x20000d94
 8009618:	e000ed04 	.word	0xe000ed04

0800961c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009624:	2300      	movs	r3, #0
 8009626:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d018      	beq.n	8009660 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800962e:	4b14      	ldr	r3, [pc, #80]	@ (8009680 <vTaskDelay+0x64>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00b      	beq.n	800964e <vTaskDelay+0x32>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	60bb      	str	r3, [r7, #8]
}
 8009648:	bf00      	nop
 800964a:	bf00      	nop
 800964c:	e7fd      	b.n	800964a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800964e:	f000 f883 	bl	8009758 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009652:	2100      	movs	r1, #0
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fcf3 	bl	800a040 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800965a:	f000 f88b 	bl	8009774 <xTaskResumeAll>
 800965e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d107      	bne.n	8009676 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009666:	4b07      	ldr	r3, [pc, #28]	@ (8009684 <vTaskDelay+0x68>)
 8009668:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800966c:	601a      	str	r2, [r3, #0]
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009676:	bf00      	nop
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	2000128c 	.word	0x2000128c
 8009684:	e000ed04 	.word	0xe000ed04

08009688 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08a      	sub	sp, #40	@ 0x28
 800968c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800968e:	2300      	movs	r3, #0
 8009690:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009692:	2300      	movs	r3, #0
 8009694:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009696:	463a      	mov	r2, r7
 8009698:	1d39      	adds	r1, r7, #4
 800969a:	f107 0308 	add.w	r3, r7, #8
 800969e:	4618      	mov	r0, r3
 80096a0:	f7ff f834 	bl	800870c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	9202      	str	r2, [sp, #8]
 80096ac:	9301      	str	r3, [sp, #4]
 80096ae:	2300      	movs	r3, #0
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	2300      	movs	r3, #0
 80096b4:	460a      	mov	r2, r1
 80096b6:	4922      	ldr	r1, [pc, #136]	@ (8009740 <vTaskStartScheduler+0xb8>)
 80096b8:	4822      	ldr	r0, [pc, #136]	@ (8009744 <vTaskStartScheduler+0xbc>)
 80096ba:	f7ff fe09 	bl	80092d0 <xTaskCreateStatic>
 80096be:	4603      	mov	r3, r0
 80096c0:	4a21      	ldr	r2, [pc, #132]	@ (8009748 <vTaskStartScheduler+0xc0>)
 80096c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096c4:	4b20      	ldr	r3, [pc, #128]	@ (8009748 <vTaskStartScheduler+0xc0>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096cc:	2301      	movs	r3, #1
 80096ce:	617b      	str	r3, [r7, #20]
 80096d0:	e001      	b.n	80096d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d102      	bne.n	80096e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80096dc:	f000 fd04 	bl	800a0e8 <xTimerCreateTimerTask>
 80096e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d116      	bne.n	8009716 <vTaskStartScheduler+0x8e>
	__asm volatile
 80096e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	613b      	str	r3, [r7, #16]
}
 80096fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096fc:	4b13      	ldr	r3, [pc, #76]	@ (800974c <vTaskStartScheduler+0xc4>)
 80096fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009702:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009704:	4b12      	ldr	r3, [pc, #72]	@ (8009750 <vTaskStartScheduler+0xc8>)
 8009706:	2201      	movs	r2, #1
 8009708:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800970a:	4b12      	ldr	r3, [pc, #72]	@ (8009754 <vTaskStartScheduler+0xcc>)
 800970c:	2200      	movs	r2, #0
 800970e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009710:	f001 f8ce 	bl	800a8b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009714:	e00f      	b.n	8009736 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800971c:	d10b      	bne.n	8009736 <vTaskStartScheduler+0xae>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	60fb      	str	r3, [r7, #12]
}
 8009730:	bf00      	nop
 8009732:	bf00      	nop
 8009734:	e7fd      	b.n	8009732 <vTaskStartScheduler+0xaa>
}
 8009736:	bf00      	nop
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	0800fe24 	.word	0x0800fe24
 8009744:	08009d79 	.word	0x08009d79
 8009748:	20001288 	.word	0x20001288
 800974c:	20001284 	.word	0x20001284
 8009750:	20001270 	.word	0x20001270
 8009754:	20001268 	.word	0x20001268

08009758 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009758:	b480      	push	{r7}
 800975a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800975c:	4b04      	ldr	r3, [pc, #16]	@ (8009770 <vTaskSuspendAll+0x18>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	3301      	adds	r3, #1
 8009762:	4a03      	ldr	r2, [pc, #12]	@ (8009770 <vTaskSuspendAll+0x18>)
 8009764:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009766:	bf00      	nop
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr
 8009770:	2000128c 	.word	0x2000128c

08009774 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800977a:	2300      	movs	r3, #0
 800977c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800977e:	2300      	movs	r3, #0
 8009780:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009782:	4b42      	ldr	r3, [pc, #264]	@ (800988c <xTaskResumeAll+0x118>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10b      	bne.n	80097a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800978a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	603b      	str	r3, [r7, #0]
}
 800979c:	bf00      	nop
 800979e:	bf00      	nop
 80097a0:	e7fd      	b.n	800979e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097a2:	f001 f929 	bl	800a9f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097a6:	4b39      	ldr	r3, [pc, #228]	@ (800988c <xTaskResumeAll+0x118>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	4a37      	ldr	r2, [pc, #220]	@ (800988c <xTaskResumeAll+0x118>)
 80097ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097b0:	4b36      	ldr	r3, [pc, #216]	@ (800988c <xTaskResumeAll+0x118>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d162      	bne.n	800987e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097b8:	4b35      	ldr	r3, [pc, #212]	@ (8009890 <xTaskResumeAll+0x11c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d05e      	beq.n	800987e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097c0:	e02f      	b.n	8009822 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c2:	4b34      	ldr	r3, [pc, #208]	@ (8009894 <xTaskResumeAll+0x120>)
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	3318      	adds	r3, #24
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7ff f85a 	bl	8008888 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	3304      	adds	r3, #4
 80097d8:	4618      	mov	r0, r3
 80097da:	f7ff f855 	bl	8008888 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097e2:	4b2d      	ldr	r3, [pc, #180]	@ (8009898 <xTaskResumeAll+0x124>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d903      	bls.n	80097f2 <xTaskResumeAll+0x7e>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ee:	4a2a      	ldr	r2, [pc, #168]	@ (8009898 <xTaskResumeAll+0x124>)
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097f6:	4613      	mov	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4a27      	ldr	r2, [pc, #156]	@ (800989c <xTaskResumeAll+0x128>)
 8009800:	441a      	add	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3304      	adds	r3, #4
 8009806:	4619      	mov	r1, r3
 8009808:	4610      	mov	r0, r2
 800980a:	f7fe ffe0 	bl	80087ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009812:	4b23      	ldr	r3, [pc, #140]	@ (80098a0 <xTaskResumeAll+0x12c>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009818:	429a      	cmp	r2, r3
 800981a:	d302      	bcc.n	8009822 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800981c:	4b21      	ldr	r3, [pc, #132]	@ (80098a4 <xTaskResumeAll+0x130>)
 800981e:	2201      	movs	r2, #1
 8009820:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009822:	4b1c      	ldr	r3, [pc, #112]	@ (8009894 <xTaskResumeAll+0x120>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1cb      	bne.n	80097c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009830:	f000 fb58 	bl	8009ee4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009834:	4b1c      	ldr	r3, [pc, #112]	@ (80098a8 <xTaskResumeAll+0x134>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d010      	beq.n	8009862 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009840:	f000 f846 	bl	80098d0 <xTaskIncrementTick>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d002      	beq.n	8009850 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800984a:	4b16      	ldr	r3, [pc, #88]	@ (80098a4 <xTaskResumeAll+0x130>)
 800984c:	2201      	movs	r2, #1
 800984e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	3b01      	subs	r3, #1
 8009854:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1f1      	bne.n	8009840 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800985c:	4b12      	ldr	r3, [pc, #72]	@ (80098a8 <xTaskResumeAll+0x134>)
 800985e:	2200      	movs	r2, #0
 8009860:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009862:	4b10      	ldr	r3, [pc, #64]	@ (80098a4 <xTaskResumeAll+0x130>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d009      	beq.n	800987e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800986a:	2301      	movs	r3, #1
 800986c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800986e:	4b0f      	ldr	r3, [pc, #60]	@ (80098ac <xTaskResumeAll+0x138>)
 8009870:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	f3bf 8f4f 	dsb	sy
 800987a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800987e:	f001 f8ed 	bl	800aa5c <vPortExitCritical>

	return xAlreadyYielded;
 8009882:	68bb      	ldr	r3, [r7, #8]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	2000128c 	.word	0x2000128c
 8009890:	20001264 	.word	0x20001264
 8009894:	20001224 	.word	0x20001224
 8009898:	2000126c 	.word	0x2000126c
 800989c:	20000d94 	.word	0x20000d94
 80098a0:	20000d90 	.word	0x20000d90
 80098a4:	20001278 	.word	0x20001278
 80098a8:	20001274 	.word	0x20001274
 80098ac:	e000ed04 	.word	0xe000ed04

080098b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098b6:	4b05      	ldr	r3, [pc, #20]	@ (80098cc <xTaskGetTickCount+0x1c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80098bc:	687b      	ldr	r3, [r7, #4]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	370c      	adds	r7, #12
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	20001268 	.word	0x20001268

080098d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098d6:	2300      	movs	r3, #0
 80098d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098da:	4b4f      	ldr	r3, [pc, #316]	@ (8009a18 <xTaskIncrementTick+0x148>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f040 8090 	bne.w	8009a04 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098e4:	4b4d      	ldr	r3, [pc, #308]	@ (8009a1c <xTaskIncrementTick+0x14c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	3301      	adds	r3, #1
 80098ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098ec:	4a4b      	ldr	r2, [pc, #300]	@ (8009a1c <xTaskIncrementTick+0x14c>)
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d121      	bne.n	800993c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80098f8:	4b49      	ldr	r3, [pc, #292]	@ (8009a20 <xTaskIncrementTick+0x150>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00b      	beq.n	800991a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	603b      	str	r3, [r7, #0]
}
 8009914:	bf00      	nop
 8009916:	bf00      	nop
 8009918:	e7fd      	b.n	8009916 <xTaskIncrementTick+0x46>
 800991a:	4b41      	ldr	r3, [pc, #260]	@ (8009a20 <xTaskIncrementTick+0x150>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	60fb      	str	r3, [r7, #12]
 8009920:	4b40      	ldr	r3, [pc, #256]	@ (8009a24 <xTaskIncrementTick+0x154>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a3e      	ldr	r2, [pc, #248]	@ (8009a20 <xTaskIncrementTick+0x150>)
 8009926:	6013      	str	r3, [r2, #0]
 8009928:	4a3e      	ldr	r2, [pc, #248]	@ (8009a24 <xTaskIncrementTick+0x154>)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	4b3e      	ldr	r3, [pc, #248]	@ (8009a28 <xTaskIncrementTick+0x158>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3301      	adds	r3, #1
 8009934:	4a3c      	ldr	r2, [pc, #240]	@ (8009a28 <xTaskIncrementTick+0x158>)
 8009936:	6013      	str	r3, [r2, #0]
 8009938:	f000 fad4 	bl	8009ee4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800993c:	4b3b      	ldr	r3, [pc, #236]	@ (8009a2c <xTaskIncrementTick+0x15c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	693a      	ldr	r2, [r7, #16]
 8009942:	429a      	cmp	r2, r3
 8009944:	d349      	bcc.n	80099da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009946:	4b36      	ldr	r3, [pc, #216]	@ (8009a20 <xTaskIncrementTick+0x150>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d104      	bne.n	800995a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009950:	4b36      	ldr	r3, [pc, #216]	@ (8009a2c <xTaskIncrementTick+0x15c>)
 8009952:	f04f 32ff 	mov.w	r2, #4294967295
 8009956:	601a      	str	r2, [r3, #0]
					break;
 8009958:	e03f      	b.n	80099da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800995a:	4b31      	ldr	r3, [pc, #196]	@ (8009a20 <xTaskIncrementTick+0x150>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800996a:	693a      	ldr	r2, [r7, #16]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	429a      	cmp	r2, r3
 8009970:	d203      	bcs.n	800997a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009972:	4a2e      	ldr	r2, [pc, #184]	@ (8009a2c <xTaskIncrementTick+0x15c>)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009978:	e02f      	b.n	80099da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	3304      	adds	r3, #4
 800997e:	4618      	mov	r0, r3
 8009980:	f7fe ff82 	bl	8008888 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009988:	2b00      	cmp	r3, #0
 800998a:	d004      	beq.n	8009996 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	3318      	adds	r3, #24
 8009990:	4618      	mov	r0, r3
 8009992:	f7fe ff79 	bl	8008888 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800999a:	4b25      	ldr	r3, [pc, #148]	@ (8009a30 <xTaskIncrementTick+0x160>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d903      	bls.n	80099aa <xTaskIncrementTick+0xda>
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a6:	4a22      	ldr	r2, [pc, #136]	@ (8009a30 <xTaskIncrementTick+0x160>)
 80099a8:	6013      	str	r3, [r2, #0]
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099ae:	4613      	mov	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4a1f      	ldr	r2, [pc, #124]	@ (8009a34 <xTaskIncrementTick+0x164>)
 80099b8:	441a      	add	r2, r3
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	3304      	adds	r3, #4
 80099be:	4619      	mov	r1, r3
 80099c0:	4610      	mov	r0, r2
 80099c2:	f7fe ff04 	bl	80087ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099ca:	4b1b      	ldr	r3, [pc, #108]	@ (8009a38 <xTaskIncrementTick+0x168>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d3b8      	bcc.n	8009946 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80099d4:	2301      	movs	r3, #1
 80099d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099d8:	e7b5      	b.n	8009946 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099da:	4b17      	ldr	r3, [pc, #92]	@ (8009a38 <xTaskIncrementTick+0x168>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099e0:	4914      	ldr	r1, [pc, #80]	@ (8009a34 <xTaskIncrementTick+0x164>)
 80099e2:	4613      	mov	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	440b      	add	r3, r1
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d901      	bls.n	80099f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80099f2:	2301      	movs	r3, #1
 80099f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80099f6:	4b11      	ldr	r3, [pc, #68]	@ (8009a3c <xTaskIncrementTick+0x16c>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d007      	beq.n	8009a0e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80099fe:	2301      	movs	r3, #1
 8009a00:	617b      	str	r3, [r7, #20]
 8009a02:	e004      	b.n	8009a0e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a04:	4b0e      	ldr	r3, [pc, #56]	@ (8009a40 <xTaskIncrementTick+0x170>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8009a40 <xTaskIncrementTick+0x170>)
 8009a0c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a0e:	697b      	ldr	r3, [r7, #20]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	2000128c 	.word	0x2000128c
 8009a1c:	20001268 	.word	0x20001268
 8009a20:	2000121c 	.word	0x2000121c
 8009a24:	20001220 	.word	0x20001220
 8009a28:	2000127c 	.word	0x2000127c
 8009a2c:	20001284 	.word	0x20001284
 8009a30:	2000126c 	.word	0x2000126c
 8009a34:	20000d94 	.word	0x20000d94
 8009a38:	20000d90 	.word	0x20000d90
 8009a3c:	20001278 	.word	0x20001278
 8009a40:	20001274 	.word	0x20001274

08009a44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a4a:	4b28      	ldr	r3, [pc, #160]	@ (8009aec <vTaskSwitchContext+0xa8>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d003      	beq.n	8009a5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a52:	4b27      	ldr	r3, [pc, #156]	@ (8009af0 <vTaskSwitchContext+0xac>)
 8009a54:	2201      	movs	r2, #1
 8009a56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a58:	e042      	b.n	8009ae0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009a5a:	4b25      	ldr	r3, [pc, #148]	@ (8009af0 <vTaskSwitchContext+0xac>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a60:	4b24      	ldr	r3, [pc, #144]	@ (8009af4 <vTaskSwitchContext+0xb0>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	60fb      	str	r3, [r7, #12]
 8009a66:	e011      	b.n	8009a8c <vTaskSwitchContext+0x48>
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10b      	bne.n	8009a86 <vTaskSwitchContext+0x42>
	__asm volatile
 8009a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a72:	f383 8811 	msr	BASEPRI, r3
 8009a76:	f3bf 8f6f 	isb	sy
 8009a7a:	f3bf 8f4f 	dsb	sy
 8009a7e:	607b      	str	r3, [r7, #4]
}
 8009a80:	bf00      	nop
 8009a82:	bf00      	nop
 8009a84:	e7fd      	b.n	8009a82 <vTaskSwitchContext+0x3e>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	491a      	ldr	r1, [pc, #104]	@ (8009af8 <vTaskSwitchContext+0xb4>)
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	4613      	mov	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4413      	add	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	440b      	add	r3, r1
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d0e3      	beq.n	8009a68 <vTaskSwitchContext+0x24>
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	4413      	add	r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4a13      	ldr	r2, [pc, #76]	@ (8009af8 <vTaskSwitchContext+0xb4>)
 8009aac:	4413      	add	r3, r2
 8009aae:	60bb      	str	r3, [r7, #8]
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	685a      	ldr	r2, [r3, #4]
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	605a      	str	r2, [r3, #4]
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d104      	bne.n	8009ad0 <vTaskSwitchContext+0x8c>
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	605a      	str	r2, [r3, #4]
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	4a09      	ldr	r2, [pc, #36]	@ (8009afc <vTaskSwitchContext+0xb8>)
 8009ad8:	6013      	str	r3, [r2, #0]
 8009ada:	4a06      	ldr	r2, [pc, #24]	@ (8009af4 <vTaskSwitchContext+0xb0>)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6013      	str	r3, [r2, #0]
}
 8009ae0:	bf00      	nop
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr
 8009aec:	2000128c 	.word	0x2000128c
 8009af0:	20001278 	.word	0x20001278
 8009af4:	2000126c 	.word	0x2000126c
 8009af8:	20000d94 	.word	0x20000d94
 8009afc:	20000d90 	.word	0x20000d90

08009b00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10b      	bne.n	8009b28 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	60fb      	str	r3, [r7, #12]
}
 8009b22:	bf00      	nop
 8009b24:	bf00      	nop
 8009b26:	e7fd      	b.n	8009b24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b28:	4b07      	ldr	r3, [pc, #28]	@ (8009b48 <vTaskPlaceOnEventList+0x48>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	3318      	adds	r3, #24
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f7fe fe70 	bl	8008816 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b36:	2101      	movs	r1, #1
 8009b38:	6838      	ldr	r0, [r7, #0]
 8009b3a:	f000 fa81 	bl	800a040 <prvAddCurrentTaskToDelayedList>
}
 8009b3e:	bf00      	nop
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	20000d90 	.word	0x20000d90

08009b4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10b      	bne.n	8009b76 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	617b      	str	r3, [r7, #20]
}
 8009b70:	bf00      	nop
 8009b72:	bf00      	nop
 8009b74:	e7fd      	b.n	8009b72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b76:	4b0a      	ldr	r3, [pc, #40]	@ (8009ba0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3318      	adds	r3, #24
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f7fe fe25 	bl	80087ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d002      	beq.n	8009b90 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b90:	6879      	ldr	r1, [r7, #4]
 8009b92:	68b8      	ldr	r0, [r7, #8]
 8009b94:	f000 fa54 	bl	800a040 <prvAddCurrentTaskToDelayedList>
	}
 8009b98:	bf00      	nop
 8009b9a:	3718      	adds	r7, #24
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20000d90 	.word	0x20000d90

08009ba4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10b      	bne.n	8009bd2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	60fb      	str	r3, [r7, #12]
}
 8009bcc:	bf00      	nop
 8009bce:	bf00      	nop
 8009bd0:	e7fd      	b.n	8009bce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	3318      	adds	r3, #24
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7fe fe56 	bl	8008888 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8009c54 <xTaskRemoveFromEventList+0xb0>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d11d      	bne.n	8009c20 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	3304      	adds	r3, #4
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7fe fe4d 	bl	8008888 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bf2:	4b19      	ldr	r3, [pc, #100]	@ (8009c58 <xTaskRemoveFromEventList+0xb4>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d903      	bls.n	8009c02 <xTaskRemoveFromEventList+0x5e>
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bfe:	4a16      	ldr	r2, [pc, #88]	@ (8009c58 <xTaskRemoveFromEventList+0xb4>)
 8009c00:	6013      	str	r3, [r2, #0]
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4a13      	ldr	r2, [pc, #76]	@ (8009c5c <xTaskRemoveFromEventList+0xb8>)
 8009c10:	441a      	add	r2, r3
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	3304      	adds	r3, #4
 8009c16:	4619      	mov	r1, r3
 8009c18:	4610      	mov	r0, r2
 8009c1a:	f7fe fdd8 	bl	80087ce <vListInsertEnd>
 8009c1e:	e005      	b.n	8009c2c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	3318      	adds	r3, #24
 8009c24:	4619      	mov	r1, r3
 8009c26:	480e      	ldr	r0, [pc, #56]	@ (8009c60 <xTaskRemoveFromEventList+0xbc>)
 8009c28:	f7fe fdd1 	bl	80087ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c30:	4b0c      	ldr	r3, [pc, #48]	@ (8009c64 <xTaskRemoveFromEventList+0xc0>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d905      	bls.n	8009c46 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8009c68 <xTaskRemoveFromEventList+0xc4>)
 8009c40:	2201      	movs	r2, #1
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	e001      	b.n	8009c4a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009c46:	2300      	movs	r3, #0
 8009c48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c4a:	697b      	ldr	r3, [r7, #20]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3718      	adds	r7, #24
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	2000128c 	.word	0x2000128c
 8009c58:	2000126c 	.word	0x2000126c
 8009c5c:	20000d94 	.word	0x20000d94
 8009c60:	20001224 	.word	0x20001224
 8009c64:	20000d90 	.word	0x20000d90
 8009c68:	20001278 	.word	0x20001278

08009c6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c74:	4b06      	ldr	r3, [pc, #24]	@ (8009c90 <vTaskInternalSetTimeOutState+0x24>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c7c:	4b05      	ldr	r3, [pc, #20]	@ (8009c94 <vTaskInternalSetTimeOutState+0x28>)
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	605a      	str	r2, [r3, #4]
}
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr
 8009c90:	2000127c 	.word	0x2000127c
 8009c94:	20001268 	.word	0x20001268

08009c98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b088      	sub	sp, #32
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10b      	bne.n	8009cc0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	613b      	str	r3, [r7, #16]
}
 8009cba:	bf00      	nop
 8009cbc:	bf00      	nop
 8009cbe:	e7fd      	b.n	8009cbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10b      	bne.n	8009cde <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	60fb      	str	r3, [r7, #12]
}
 8009cd8:	bf00      	nop
 8009cda:	bf00      	nop
 8009cdc:	e7fd      	b.n	8009cda <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009cde:	f000 fe8b 	bl	800a9f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8009d58 <xTaskCheckForTimeOut+0xc0>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfa:	d102      	bne.n	8009d02 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	61fb      	str	r3, [r7, #28]
 8009d00:	e023      	b.n	8009d4a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	4b15      	ldr	r3, [pc, #84]	@ (8009d5c <xTaskCheckForTimeOut+0xc4>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d007      	beq.n	8009d1e <xTaskCheckForTimeOut+0x86>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	69ba      	ldr	r2, [r7, #24]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d302      	bcc.n	8009d1e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	61fb      	str	r3, [r7, #28]
 8009d1c:	e015      	b.n	8009d4a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d20b      	bcs.n	8009d40 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	1ad2      	subs	r2, r2, r3
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7ff ff99 	bl	8009c6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	61fb      	str	r3, [r7, #28]
 8009d3e:	e004      	b.n	8009d4a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2200      	movs	r2, #0
 8009d44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d46:	2301      	movs	r3, #1
 8009d48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d4a:	f000 fe87 	bl	800aa5c <vPortExitCritical>

	return xReturn;
 8009d4e:	69fb      	ldr	r3, [r7, #28]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3720      	adds	r7, #32
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	20001268 	.word	0x20001268
 8009d5c:	2000127c 	.word	0x2000127c

08009d60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d60:	b480      	push	{r7}
 8009d62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d64:	4b03      	ldr	r3, [pc, #12]	@ (8009d74 <vTaskMissedYield+0x14>)
 8009d66:	2201      	movs	r2, #1
 8009d68:	601a      	str	r2, [r3, #0]
}
 8009d6a:	bf00      	nop
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr
 8009d74:	20001278 	.word	0x20001278

08009d78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d80:	f000 f852 	bl	8009e28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d84:	4b06      	ldr	r3, [pc, #24]	@ (8009da0 <prvIdleTask+0x28>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d9f9      	bls.n	8009d80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d8c:	4b05      	ldr	r3, [pc, #20]	@ (8009da4 <prvIdleTask+0x2c>)
 8009d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d9c:	e7f0      	b.n	8009d80 <prvIdleTask+0x8>
 8009d9e:	bf00      	nop
 8009da0:	20000d94 	.word	0x20000d94
 8009da4:	e000ed04 	.word	0xe000ed04

08009da8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dae:	2300      	movs	r3, #0
 8009db0:	607b      	str	r3, [r7, #4]
 8009db2:	e00c      	b.n	8009dce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	4613      	mov	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4413      	add	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4a12      	ldr	r2, [pc, #72]	@ (8009e08 <prvInitialiseTaskLists+0x60>)
 8009dc0:	4413      	add	r3, r2
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe fcd6 	bl	8008774 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	607b      	str	r3, [r7, #4]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b37      	cmp	r3, #55	@ 0x37
 8009dd2:	d9ef      	bls.n	8009db4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009dd4:	480d      	ldr	r0, [pc, #52]	@ (8009e0c <prvInitialiseTaskLists+0x64>)
 8009dd6:	f7fe fccd 	bl	8008774 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009dda:	480d      	ldr	r0, [pc, #52]	@ (8009e10 <prvInitialiseTaskLists+0x68>)
 8009ddc:	f7fe fcca 	bl	8008774 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009de0:	480c      	ldr	r0, [pc, #48]	@ (8009e14 <prvInitialiseTaskLists+0x6c>)
 8009de2:	f7fe fcc7 	bl	8008774 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009de6:	480c      	ldr	r0, [pc, #48]	@ (8009e18 <prvInitialiseTaskLists+0x70>)
 8009de8:	f7fe fcc4 	bl	8008774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009dec:	480b      	ldr	r0, [pc, #44]	@ (8009e1c <prvInitialiseTaskLists+0x74>)
 8009dee:	f7fe fcc1 	bl	8008774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009df2:	4b0b      	ldr	r3, [pc, #44]	@ (8009e20 <prvInitialiseTaskLists+0x78>)
 8009df4:	4a05      	ldr	r2, [pc, #20]	@ (8009e0c <prvInitialiseTaskLists+0x64>)
 8009df6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009df8:	4b0a      	ldr	r3, [pc, #40]	@ (8009e24 <prvInitialiseTaskLists+0x7c>)
 8009dfa:	4a05      	ldr	r2, [pc, #20]	@ (8009e10 <prvInitialiseTaskLists+0x68>)
 8009dfc:	601a      	str	r2, [r3, #0]
}
 8009dfe:	bf00      	nop
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20000d94 	.word	0x20000d94
 8009e0c:	200011f4 	.word	0x200011f4
 8009e10:	20001208 	.word	0x20001208
 8009e14:	20001224 	.word	0x20001224
 8009e18:	20001238 	.word	0x20001238
 8009e1c:	20001250 	.word	0x20001250
 8009e20:	2000121c 	.word	0x2000121c
 8009e24:	20001220 	.word	0x20001220

08009e28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e2e:	e019      	b.n	8009e64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e30:	f000 fde2 	bl	800a9f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e34:	4b10      	ldr	r3, [pc, #64]	@ (8009e78 <prvCheckTasksWaitingTermination+0x50>)
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3304      	adds	r3, #4
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7fe fd21 	bl	8008888 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e46:	4b0d      	ldr	r3, [pc, #52]	@ (8009e7c <prvCheckTasksWaitingTermination+0x54>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8009e7c <prvCheckTasksWaitingTermination+0x54>)
 8009e4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e50:	4b0b      	ldr	r3, [pc, #44]	@ (8009e80 <prvCheckTasksWaitingTermination+0x58>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3b01      	subs	r3, #1
 8009e56:	4a0a      	ldr	r2, [pc, #40]	@ (8009e80 <prvCheckTasksWaitingTermination+0x58>)
 8009e58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e5a:	f000 fdff 	bl	800aa5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f810 	bl	8009e84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e64:	4b06      	ldr	r3, [pc, #24]	@ (8009e80 <prvCheckTasksWaitingTermination+0x58>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1e1      	bne.n	8009e30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e6c:	bf00      	nop
 8009e6e:	bf00      	nop
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	20001238 	.word	0x20001238
 8009e7c:	20001264 	.word	0x20001264
 8009e80:	2000124c 	.word	0x2000124c

08009e84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d108      	bne.n	8009ea8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 ff9c 	bl	800add8 <vPortFree>
				vPortFree( pxTCB );
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 ff99 	bl	800add8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ea6:	e019      	b.n	8009edc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d103      	bne.n	8009eba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 ff90 	bl	800add8 <vPortFree>
	}
 8009eb8:	e010      	b.n	8009edc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d00b      	beq.n	8009edc <prvDeleteTCB+0x58>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	60fb      	str	r3, [r7, #12]
}
 8009ed6:	bf00      	nop
 8009ed8:	bf00      	nop
 8009eda:	e7fd      	b.n	8009ed8 <prvDeleteTCB+0x54>
	}
 8009edc:	bf00      	nop
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eea:	4b0c      	ldr	r3, [pc, #48]	@ (8009f1c <prvResetNextTaskUnblockTime+0x38>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d104      	bne.n	8009efe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8009f20 <prvResetNextTaskUnblockTime+0x3c>)
 8009ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8009efa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009efc:	e008      	b.n	8009f10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009efe:	4b07      	ldr	r3, [pc, #28]	@ (8009f1c <prvResetNextTaskUnblockTime+0x38>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	4a04      	ldr	r2, [pc, #16]	@ (8009f20 <prvResetNextTaskUnblockTime+0x3c>)
 8009f0e:	6013      	str	r3, [r2, #0]
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	2000121c 	.word	0x2000121c
 8009f20:	20001284 	.word	0x20001284

08009f24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8009f58 <xTaskGetSchedulerState+0x34>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d102      	bne.n	8009f38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f32:	2301      	movs	r3, #1
 8009f34:	607b      	str	r3, [r7, #4]
 8009f36:	e008      	b.n	8009f4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f38:	4b08      	ldr	r3, [pc, #32]	@ (8009f5c <xTaskGetSchedulerState+0x38>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d102      	bne.n	8009f46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f40:	2302      	movs	r3, #2
 8009f42:	607b      	str	r3, [r7, #4]
 8009f44:	e001      	b.n	8009f4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f46:	2300      	movs	r3, #0
 8009f48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f4a:	687b      	ldr	r3, [r7, #4]
	}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	20001270 	.word	0x20001270
 8009f5c:	2000128c 	.word	0x2000128c

08009f60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d058      	beq.n	800a028 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f76:	4b2f      	ldr	r3, [pc, #188]	@ (800a034 <xTaskPriorityDisinherit+0xd4>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d00b      	beq.n	8009f98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	60fb      	str	r3, [r7, #12]
}
 8009f92:	bf00      	nop
 8009f94:	bf00      	nop
 8009f96:	e7fd      	b.n	8009f94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10b      	bne.n	8009fb8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	60bb      	str	r3, [r7, #8]
}
 8009fb2:	bf00      	nop
 8009fb4:	bf00      	nop
 8009fb6:	e7fd      	b.n	8009fb4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fbc:	1e5a      	subs	r2, r3, #1
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d02c      	beq.n	800a028 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d128      	bne.n	800a028 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	3304      	adds	r3, #4
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fe fc54 	bl	8008888 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ff8:	4b0f      	ldr	r3, [pc, #60]	@ (800a038 <xTaskPriorityDisinherit+0xd8>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d903      	bls.n	800a008 <xTaskPriorityDisinherit+0xa8>
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a004:	4a0c      	ldr	r2, [pc, #48]	@ (800a038 <xTaskPriorityDisinherit+0xd8>)
 800a006:	6013      	str	r3, [r2, #0]
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a00c:	4613      	mov	r3, r2
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4413      	add	r3, r2
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	4a09      	ldr	r2, [pc, #36]	@ (800a03c <xTaskPriorityDisinherit+0xdc>)
 800a016:	441a      	add	r2, r3
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	3304      	adds	r3, #4
 800a01c:	4619      	mov	r1, r3
 800a01e:	4610      	mov	r0, r2
 800a020:	f7fe fbd5 	bl	80087ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a024:	2301      	movs	r3, #1
 800a026:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a028:	697b      	ldr	r3, [r7, #20]
	}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3718      	adds	r7, #24
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	20000d90 	.word	0x20000d90
 800a038:	2000126c 	.word	0x2000126c
 800a03c:	20000d94 	.word	0x20000d94

0800a040 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a04a:	4b21      	ldr	r3, [pc, #132]	@ (800a0d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a050:	4b20      	ldr	r3, [pc, #128]	@ (800a0d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	3304      	adds	r3, #4
 800a056:	4618      	mov	r0, r3
 800a058:	f7fe fc16 	bl	8008888 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a062:	d10a      	bne.n	800a07a <prvAddCurrentTaskToDelayedList+0x3a>
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d007      	beq.n	800a07a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a06a:	4b1a      	ldr	r3, [pc, #104]	@ (800a0d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	3304      	adds	r3, #4
 800a070:	4619      	mov	r1, r3
 800a072:	4819      	ldr	r0, [pc, #100]	@ (800a0d8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a074:	f7fe fbab 	bl	80087ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a078:	e026      	b.n	800a0c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4413      	add	r3, r2
 800a080:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a082:	4b14      	ldr	r3, [pc, #80]	@ (800a0d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d209      	bcs.n	800a0a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a092:	4b12      	ldr	r3, [pc, #72]	@ (800a0dc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	4b0f      	ldr	r3, [pc, #60]	@ (800a0d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3304      	adds	r3, #4
 800a09c:	4619      	mov	r1, r3
 800a09e:	4610      	mov	r0, r2
 800a0a0:	f7fe fbb9 	bl	8008816 <vListInsert>
}
 800a0a4:	e010      	b.n	800a0c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0a6:	4b0e      	ldr	r3, [pc, #56]	@ (800a0e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	4b0a      	ldr	r3, [pc, #40]	@ (800a0d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	f7fe fbaf 	bl	8008816 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a0b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a0e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d202      	bcs.n	800a0c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a0c2:	4a08      	ldr	r2, [pc, #32]	@ (800a0e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	6013      	str	r3, [r2, #0]
}
 800a0c8:	bf00      	nop
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	20001268 	.word	0x20001268
 800a0d4:	20000d90 	.word	0x20000d90
 800a0d8:	20001250 	.word	0x20001250
 800a0dc:	20001220 	.word	0x20001220
 800a0e0:	2000121c 	.word	0x2000121c
 800a0e4:	20001284 	.word	0x20001284

0800a0e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b08a      	sub	sp, #40	@ 0x28
 800a0ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a0f2:	f000 fb13 	bl	800a71c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a0f6:	4b1d      	ldr	r3, [pc, #116]	@ (800a16c <xTimerCreateTimerTask+0x84>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d021      	beq.n	800a142 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a0fe:	2300      	movs	r3, #0
 800a100:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a102:	2300      	movs	r3, #0
 800a104:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a106:	1d3a      	adds	r2, r7, #4
 800a108:	f107 0108 	add.w	r1, r7, #8
 800a10c:	f107 030c 	add.w	r3, r7, #12
 800a110:	4618      	mov	r0, r3
 800a112:	f7fe fb15 	bl	8008740 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a116:	6879      	ldr	r1, [r7, #4]
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	9202      	str	r2, [sp, #8]
 800a11e:	9301      	str	r3, [sp, #4]
 800a120:	2302      	movs	r3, #2
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	2300      	movs	r3, #0
 800a126:	460a      	mov	r2, r1
 800a128:	4911      	ldr	r1, [pc, #68]	@ (800a170 <xTimerCreateTimerTask+0x88>)
 800a12a:	4812      	ldr	r0, [pc, #72]	@ (800a174 <xTimerCreateTimerTask+0x8c>)
 800a12c:	f7ff f8d0 	bl	80092d0 <xTaskCreateStatic>
 800a130:	4603      	mov	r3, r0
 800a132:	4a11      	ldr	r2, [pc, #68]	@ (800a178 <xTimerCreateTimerTask+0x90>)
 800a134:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a136:	4b10      	ldr	r3, [pc, #64]	@ (800a178 <xTimerCreateTimerTask+0x90>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d001      	beq.n	800a142 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a13e:	2301      	movs	r3, #1
 800a140:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10b      	bne.n	800a160 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	613b      	str	r3, [r7, #16]
}
 800a15a:	bf00      	nop
 800a15c:	bf00      	nop
 800a15e:	e7fd      	b.n	800a15c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a160:	697b      	ldr	r3, [r7, #20]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	200012c0 	.word	0x200012c0
 800a170:	0800fe2c 	.word	0x0800fe2c
 800a174:	0800a2b5 	.word	0x0800a2b5
 800a178:	200012c4 	.word	0x200012c4

0800a17c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b08a      	sub	sp, #40	@ 0x28
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]
 800a188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a18a:	2300      	movs	r3, #0
 800a18c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10b      	bne.n	800a1ac <xTimerGenericCommand+0x30>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	623b      	str	r3, [r7, #32]
}
 800a1a6:	bf00      	nop
 800a1a8:	bf00      	nop
 800a1aa:	e7fd      	b.n	800a1a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a1ac:	4b19      	ldr	r3, [pc, #100]	@ (800a214 <xTimerGenericCommand+0x98>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d02a      	beq.n	800a20a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	2b05      	cmp	r3, #5
 800a1c4:	dc18      	bgt.n	800a1f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a1c6:	f7ff fead 	bl	8009f24 <xTaskGetSchedulerState>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d109      	bne.n	800a1e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a1d0:	4b10      	ldr	r3, [pc, #64]	@ (800a214 <xTimerGenericCommand+0x98>)
 800a1d2:	6818      	ldr	r0, [r3, #0]
 800a1d4:	f107 0110 	add.w	r1, r7, #16
 800a1d8:	2300      	movs	r3, #0
 800a1da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1dc:	f7fe fc88 	bl	8008af0 <xQueueGenericSend>
 800a1e0:	6278      	str	r0, [r7, #36]	@ 0x24
 800a1e2:	e012      	b.n	800a20a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a1e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a214 <xTimerGenericCommand+0x98>)
 800a1e6:	6818      	ldr	r0, [r3, #0]
 800a1e8:	f107 0110 	add.w	r1, r7, #16
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f7fe fc7e 	bl	8008af0 <xQueueGenericSend>
 800a1f4:	6278      	str	r0, [r7, #36]	@ 0x24
 800a1f6:	e008      	b.n	800a20a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a1f8:	4b06      	ldr	r3, [pc, #24]	@ (800a214 <xTimerGenericCommand+0x98>)
 800a1fa:	6818      	ldr	r0, [r3, #0]
 800a1fc:	f107 0110 	add.w	r1, r7, #16
 800a200:	2300      	movs	r3, #0
 800a202:	683a      	ldr	r2, [r7, #0]
 800a204:	f7fe fd76 	bl	8008cf4 <xQueueGenericSendFromISR>
 800a208:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3728      	adds	r7, #40	@ 0x28
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	200012c0 	.word	0x200012c0

0800a218 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b088      	sub	sp, #32
 800a21c:	af02      	add	r7, sp, #8
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a222:	4b23      	ldr	r3, [pc, #140]	@ (800a2b0 <prvProcessExpiredTimer+0x98>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	3304      	adds	r3, #4
 800a230:	4618      	mov	r0, r3
 800a232:	f7fe fb29 	bl	8008888 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a23c:	f003 0304 	and.w	r3, r3, #4
 800a240:	2b00      	cmp	r3, #0
 800a242:	d023      	beq.n	800a28c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	699a      	ldr	r2, [r3, #24]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	18d1      	adds	r1, r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	6978      	ldr	r0, [r7, #20]
 800a252:	f000 f8d5 	bl	800a400 <prvInsertTimerInActiveList>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d020      	beq.n	800a29e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a25c:	2300      	movs	r3, #0
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	2300      	movs	r3, #0
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	2100      	movs	r1, #0
 800a266:	6978      	ldr	r0, [r7, #20]
 800a268:	f7ff ff88 	bl	800a17c <xTimerGenericCommand>
 800a26c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d114      	bne.n	800a29e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	60fb      	str	r3, [r7, #12]
}
 800a286:	bf00      	nop
 800a288:	bf00      	nop
 800a28a:	e7fd      	b.n	800a288 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a292:	f023 0301 	bic.w	r3, r3, #1
 800a296:	b2da      	uxtb	r2, r3
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	6978      	ldr	r0, [r7, #20]
 800a2a4:	4798      	blx	r3
}
 800a2a6:	bf00      	nop
 800a2a8:	3718      	adds	r7, #24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	200012b8 	.word	0x200012b8

0800a2b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2bc:	f107 0308 	add.w	r3, r7, #8
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f000 f859 	bl	800a378 <prvGetNextExpireTime>
 800a2c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f000 f805 	bl	800a2dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a2d2:	f000 f8d7 	bl	800a484 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2d6:	bf00      	nop
 800a2d8:	e7f0      	b.n	800a2bc <prvTimerTask+0x8>
	...

0800a2dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a2e6:	f7ff fa37 	bl	8009758 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2ea:	f107 0308 	add.w	r3, r7, #8
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f000 f866 	bl	800a3c0 <prvSampleTimeNow>
 800a2f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d130      	bne.n	800a35e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10a      	bne.n	800a318 <prvProcessTimerOrBlockTask+0x3c>
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	429a      	cmp	r2, r3
 800a308:	d806      	bhi.n	800a318 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a30a:	f7ff fa33 	bl	8009774 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a30e:	68f9      	ldr	r1, [r7, #12]
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f7ff ff81 	bl	800a218 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a316:	e024      	b.n	800a362 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d008      	beq.n	800a330 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a31e:	4b13      	ldr	r3, [pc, #76]	@ (800a36c <prvProcessTimerOrBlockTask+0x90>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <prvProcessTimerOrBlockTask+0x50>
 800a328:	2301      	movs	r3, #1
 800a32a:	e000      	b.n	800a32e <prvProcessTimerOrBlockTask+0x52>
 800a32c:	2300      	movs	r3, #0
 800a32e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a330:	4b0f      	ldr	r3, [pc, #60]	@ (800a370 <prvProcessTimerOrBlockTask+0x94>)
 800a332:	6818      	ldr	r0, [r3, #0]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	4619      	mov	r1, r3
 800a33e:	f7fe ff93 	bl	8009268 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a342:	f7ff fa17 	bl	8009774 <xTaskResumeAll>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10a      	bne.n	800a362 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a34c:	4b09      	ldr	r3, [pc, #36]	@ (800a374 <prvProcessTimerOrBlockTask+0x98>)
 800a34e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	f3bf 8f4f 	dsb	sy
 800a358:	f3bf 8f6f 	isb	sy
}
 800a35c:	e001      	b.n	800a362 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a35e:	f7ff fa09 	bl	8009774 <xTaskResumeAll>
}
 800a362:	bf00      	nop
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	200012bc 	.word	0x200012bc
 800a370:	200012c0 	.word	0x200012c0
 800a374:	e000ed04 	.word	0xe000ed04

0800a378 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a380:	4b0e      	ldr	r3, [pc, #56]	@ (800a3bc <prvGetNextExpireTime+0x44>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <prvGetNextExpireTime+0x16>
 800a38a:	2201      	movs	r2, #1
 800a38c:	e000      	b.n	800a390 <prvGetNextExpireTime+0x18>
 800a38e:	2200      	movs	r2, #0
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d105      	bne.n	800a3a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a39c:	4b07      	ldr	r3, [pc, #28]	@ (800a3bc <prvGetNextExpireTime+0x44>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	60fb      	str	r3, [r7, #12]
 800a3a6:	e001      	b.n	800a3ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3714      	adds	r7, #20
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	200012b8 	.word	0x200012b8

0800a3c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a3c8:	f7ff fa72 	bl	80098b0 <xTaskGetTickCount>
 800a3cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a3ce:	4b0b      	ldr	r3, [pc, #44]	@ (800a3fc <prvSampleTimeNow+0x3c>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d205      	bcs.n	800a3e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a3d8:	f000 f93a 	bl	800a650 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	e002      	b.n	800a3ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a3ea:	4a04      	ldr	r2, [pc, #16]	@ (800a3fc <prvSampleTimeNow+0x3c>)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	200012c8 	.word	0x200012c8

0800a400 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
 800a40c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a40e:	2300      	movs	r3, #0
 800a410:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a41e:	68ba      	ldr	r2, [r7, #8]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	429a      	cmp	r2, r3
 800a424:	d812      	bhi.n	800a44c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	1ad2      	subs	r2, r2, r3
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	699b      	ldr	r3, [r3, #24]
 800a430:	429a      	cmp	r2, r3
 800a432:	d302      	bcc.n	800a43a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a434:	2301      	movs	r3, #1
 800a436:	617b      	str	r3, [r7, #20]
 800a438:	e01b      	b.n	800a472 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a43a:	4b10      	ldr	r3, [pc, #64]	@ (800a47c <prvInsertTimerInActiveList+0x7c>)
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3304      	adds	r3, #4
 800a442:	4619      	mov	r1, r3
 800a444:	4610      	mov	r0, r2
 800a446:	f7fe f9e6 	bl	8008816 <vListInsert>
 800a44a:	e012      	b.n	800a472 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	429a      	cmp	r2, r3
 800a452:	d206      	bcs.n	800a462 <prvInsertTimerInActiveList+0x62>
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d302      	bcc.n	800a462 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a45c:	2301      	movs	r3, #1
 800a45e:	617b      	str	r3, [r7, #20]
 800a460:	e007      	b.n	800a472 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a462:	4b07      	ldr	r3, [pc, #28]	@ (800a480 <prvInsertTimerInActiveList+0x80>)
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	3304      	adds	r3, #4
 800a46a:	4619      	mov	r1, r3
 800a46c:	4610      	mov	r0, r2
 800a46e:	f7fe f9d2 	bl	8008816 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a472:	697b      	ldr	r3, [r7, #20]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	200012bc 	.word	0x200012bc
 800a480:	200012b8 	.word	0x200012b8

0800a484 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b08e      	sub	sp, #56	@ 0x38
 800a488:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a48a:	e0ce      	b.n	800a62a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	da19      	bge.n	800a4c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a492:	1d3b      	adds	r3, r7, #4
 800a494:	3304      	adds	r3, #4
 800a496:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10b      	bne.n	800a4b6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	61fb      	str	r3, [r7, #28]
}
 800a4b0:	bf00      	nop
 800a4b2:	bf00      	nop
 800a4b4:	e7fd      	b.n	800a4b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4bc:	6850      	ldr	r0, [r2, #4]
 800a4be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4c0:	6892      	ldr	r2, [r2, #8]
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f2c0 80ae 	blt.w	800a62a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d004      	beq.n	800a4e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4dc:	3304      	adds	r3, #4
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fe f9d2 	bl	8008888 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4e4:	463b      	mov	r3, r7
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7ff ff6a 	bl	800a3c0 <prvSampleTimeNow>
 800a4ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2b09      	cmp	r3, #9
 800a4f2:	f200 8097 	bhi.w	800a624 <prvProcessReceivedCommands+0x1a0>
 800a4f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4fc <prvProcessReceivedCommands+0x78>)
 800a4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fc:	0800a525 	.word	0x0800a525
 800a500:	0800a525 	.word	0x0800a525
 800a504:	0800a525 	.word	0x0800a525
 800a508:	0800a59b 	.word	0x0800a59b
 800a50c:	0800a5af 	.word	0x0800a5af
 800a510:	0800a5fb 	.word	0x0800a5fb
 800a514:	0800a525 	.word	0x0800a525
 800a518:	0800a525 	.word	0x0800a525
 800a51c:	0800a59b 	.word	0x0800a59b
 800a520:	0800a5af 	.word	0x0800a5af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a526:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a52a:	f043 0301 	orr.w	r3, r3, #1
 800a52e:	b2da      	uxtb	r2, r3
 800a530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a532:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a536:	68ba      	ldr	r2, [r7, #8]
 800a538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	18d1      	adds	r1, r2, r3
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a544:	f7ff ff5c 	bl	800a400 <prvInsertTimerInActiveList>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d06c      	beq.n	800a628 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a554:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a558:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a55c:	f003 0304 	and.w	r3, r3, #4
 800a560:	2b00      	cmp	r3, #0
 800a562:	d061      	beq.n	800a628 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a568:	699b      	ldr	r3, [r3, #24]
 800a56a:	441a      	add	r2, r3
 800a56c:	2300      	movs	r3, #0
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	2300      	movs	r3, #0
 800a572:	2100      	movs	r1, #0
 800a574:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a576:	f7ff fe01 	bl	800a17c <xTimerGenericCommand>
 800a57a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a57c:	6a3b      	ldr	r3, [r7, #32]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d152      	bne.n	800a628 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	61bb      	str	r3, [r7, #24]
}
 800a594:	bf00      	nop
 800a596:	bf00      	nop
 800a598:	e7fd      	b.n	800a596 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5a0:	f023 0301 	bic.w	r3, r3, #1
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a5ac:	e03d      	b.n	800a62a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5b4:	f043 0301 	orr.w	r3, r3, #1
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c8:	699b      	ldr	r3, [r3, #24]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10b      	bne.n	800a5e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	617b      	str	r3, [r7, #20]
}
 800a5e0:	bf00      	nop
 800a5e2:	bf00      	nop
 800a5e4:	e7fd      	b.n	800a5e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e8:	699a      	ldr	r2, [r3, #24]
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ec:	18d1      	adds	r1, r2, r3
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5f4:	f7ff ff04 	bl	800a400 <prvInsertTimerInActiveList>
					break;
 800a5f8:	e017      	b.n	800a62a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a600:	f003 0302 	and.w	r3, r3, #2
 800a604:	2b00      	cmp	r3, #0
 800a606:	d103      	bne.n	800a610 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a608:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a60a:	f000 fbe5 	bl	800add8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a60e:	e00c      	b.n	800a62a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a612:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a616:	f023 0301 	bic.w	r3, r3, #1
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a622:	e002      	b.n	800a62a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a624:	bf00      	nop
 800a626:	e000      	b.n	800a62a <prvProcessReceivedCommands+0x1a6>
					break;
 800a628:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a62a:	4b08      	ldr	r3, [pc, #32]	@ (800a64c <prvProcessReceivedCommands+0x1c8>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	1d39      	adds	r1, r7, #4
 800a630:	2200      	movs	r2, #0
 800a632:	4618      	mov	r0, r3
 800a634:	f7fe fbfc 	bl	8008e30 <xQueueReceive>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	f47f af26 	bne.w	800a48c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a640:	bf00      	nop
 800a642:	bf00      	nop
 800a644:	3730      	adds	r7, #48	@ 0x30
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	200012c0 	.word	0x200012c0

0800a650 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b088      	sub	sp, #32
 800a654:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a656:	e049      	b.n	800a6ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a658:	4b2e      	ldr	r3, [pc, #184]	@ (800a714 <prvSwitchTimerLists+0xc4>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a662:	4b2c      	ldr	r3, [pc, #176]	@ (800a714 <prvSwitchTimerLists+0xc4>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	3304      	adds	r3, #4
 800a670:	4618      	mov	r0, r3
 800a672:	f7fe f909 	bl	8008888 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a684:	f003 0304 	and.w	r3, r3, #4
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d02f      	beq.n	800a6ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	693a      	ldr	r2, [r7, #16]
 800a692:	4413      	add	r3, r2
 800a694:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d90e      	bls.n	800a6bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6aa:	4b1a      	ldr	r3, [pc, #104]	@ (800a714 <prvSwitchTimerLists+0xc4>)
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	3304      	adds	r3, #4
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	f7fe f8ae 	bl	8008816 <vListInsert>
 800a6ba:	e017      	b.n	800a6ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6bc:	2300      	movs	r3, #0
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	693a      	ldr	r2, [r7, #16]
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f7ff fd58 	bl	800a17c <xTimerGenericCommand>
 800a6cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10b      	bne.n	800a6ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d8:	f383 8811 	msr	BASEPRI, r3
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	f3bf 8f4f 	dsb	sy
 800a6e4:	603b      	str	r3, [r7, #0]
}
 800a6e6:	bf00      	nop
 800a6e8:	bf00      	nop
 800a6ea:	e7fd      	b.n	800a6e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6ec:	4b09      	ldr	r3, [pc, #36]	@ (800a714 <prvSwitchTimerLists+0xc4>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1b0      	bne.n	800a658 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a6f6:	4b07      	ldr	r3, [pc, #28]	@ (800a714 <prvSwitchTimerLists+0xc4>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a6fc:	4b06      	ldr	r3, [pc, #24]	@ (800a718 <prvSwitchTimerLists+0xc8>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a04      	ldr	r2, [pc, #16]	@ (800a714 <prvSwitchTimerLists+0xc4>)
 800a702:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a704:	4a04      	ldr	r2, [pc, #16]	@ (800a718 <prvSwitchTimerLists+0xc8>)
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	6013      	str	r3, [r2, #0]
}
 800a70a:	bf00      	nop
 800a70c:	3718      	adds	r7, #24
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	200012b8 	.word	0x200012b8
 800a718:	200012bc 	.word	0x200012bc

0800a71c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a722:	f000 f969 	bl	800a9f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a726:	4b15      	ldr	r3, [pc, #84]	@ (800a77c <prvCheckForValidListAndQueue+0x60>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d120      	bne.n	800a770 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a72e:	4814      	ldr	r0, [pc, #80]	@ (800a780 <prvCheckForValidListAndQueue+0x64>)
 800a730:	f7fe f820 	bl	8008774 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a734:	4813      	ldr	r0, [pc, #76]	@ (800a784 <prvCheckForValidListAndQueue+0x68>)
 800a736:	f7fe f81d 	bl	8008774 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a73a:	4b13      	ldr	r3, [pc, #76]	@ (800a788 <prvCheckForValidListAndQueue+0x6c>)
 800a73c:	4a10      	ldr	r2, [pc, #64]	@ (800a780 <prvCheckForValidListAndQueue+0x64>)
 800a73e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a740:	4b12      	ldr	r3, [pc, #72]	@ (800a78c <prvCheckForValidListAndQueue+0x70>)
 800a742:	4a10      	ldr	r2, [pc, #64]	@ (800a784 <prvCheckForValidListAndQueue+0x68>)
 800a744:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a746:	2300      	movs	r3, #0
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	4b11      	ldr	r3, [pc, #68]	@ (800a790 <prvCheckForValidListAndQueue+0x74>)
 800a74c:	4a11      	ldr	r2, [pc, #68]	@ (800a794 <prvCheckForValidListAndQueue+0x78>)
 800a74e:	2110      	movs	r1, #16
 800a750:	200a      	movs	r0, #10
 800a752:	f7fe f92d 	bl	80089b0 <xQueueGenericCreateStatic>
 800a756:	4603      	mov	r3, r0
 800a758:	4a08      	ldr	r2, [pc, #32]	@ (800a77c <prvCheckForValidListAndQueue+0x60>)
 800a75a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a75c:	4b07      	ldr	r3, [pc, #28]	@ (800a77c <prvCheckForValidListAndQueue+0x60>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d005      	beq.n	800a770 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a764:	4b05      	ldr	r3, [pc, #20]	@ (800a77c <prvCheckForValidListAndQueue+0x60>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	490b      	ldr	r1, [pc, #44]	@ (800a798 <prvCheckForValidListAndQueue+0x7c>)
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fe fd52 	bl	8009214 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a770:	f000 f974 	bl	800aa5c <vPortExitCritical>
}
 800a774:	bf00      	nop
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	200012c0 	.word	0x200012c0
 800a780:	20001290 	.word	0x20001290
 800a784:	200012a4 	.word	0x200012a4
 800a788:	200012b8 	.word	0x200012b8
 800a78c:	200012bc 	.word	0x200012bc
 800a790:	2000136c 	.word	0x2000136c
 800a794:	200012cc 	.word	0x200012cc
 800a798:	0800fe34 	.word	0x0800fe34

0800a79c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3b04      	subs	r3, #4
 800a7ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a7b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	3b04      	subs	r3, #4
 800a7ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	f023 0201 	bic.w	r2, r3, #1
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	3b04      	subs	r3, #4
 800a7ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7cc:	4a0c      	ldr	r2, [pc, #48]	@ (800a800 <pxPortInitialiseStack+0x64>)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	3b14      	subs	r3, #20
 800a7d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3b04      	subs	r3, #4
 800a7e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f06f 0202 	mvn.w	r2, #2
 800a7ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	3b20      	subs	r3, #32
 800a7f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3714      	adds	r7, #20
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr
 800a800:	0800a805 	.word	0x0800a805

0800a804 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a80e:	4b13      	ldr	r3, [pc, #76]	@ (800a85c <prvTaskExitError+0x58>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a816:	d00b      	beq.n	800a830 <prvTaskExitError+0x2c>
	__asm volatile
 800a818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a81c:	f383 8811 	msr	BASEPRI, r3
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	60fb      	str	r3, [r7, #12]
}
 800a82a:	bf00      	nop
 800a82c:	bf00      	nop
 800a82e:	e7fd      	b.n	800a82c <prvTaskExitError+0x28>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	60bb      	str	r3, [r7, #8]
}
 800a842:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a844:	bf00      	nop
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d0fc      	beq.n	800a846 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a84c:	bf00      	nop
 800a84e:	bf00      	nop
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	200000d0 	.word	0x200000d0

0800a860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a860:	4b07      	ldr	r3, [pc, #28]	@ (800a880 <pxCurrentTCBConst2>)
 800a862:	6819      	ldr	r1, [r3, #0]
 800a864:	6808      	ldr	r0, [r1, #0]
 800a866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86a:	f380 8809 	msr	PSP, r0
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f04f 0000 	mov.w	r0, #0
 800a876:	f380 8811 	msr	BASEPRI, r0
 800a87a:	4770      	bx	lr
 800a87c:	f3af 8000 	nop.w

0800a880 <pxCurrentTCBConst2>:
 800a880:	20000d90 	.word	0x20000d90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a884:	bf00      	nop
 800a886:	bf00      	nop

0800a888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a888:	4808      	ldr	r0, [pc, #32]	@ (800a8ac <prvPortStartFirstTask+0x24>)
 800a88a:	6800      	ldr	r0, [r0, #0]
 800a88c:	6800      	ldr	r0, [r0, #0]
 800a88e:	f380 8808 	msr	MSP, r0
 800a892:	f04f 0000 	mov.w	r0, #0
 800a896:	f380 8814 	msr	CONTROL, r0
 800a89a:	b662      	cpsie	i
 800a89c:	b661      	cpsie	f
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	df00      	svc	0
 800a8a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a8aa:	bf00      	nop
 800a8ac:	e000ed08 	.word	0xe000ed08

0800a8b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b086      	sub	sp, #24
 800a8b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a8b6:	4b47      	ldr	r3, [pc, #284]	@ (800a9d4 <xPortStartScheduler+0x124>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a47      	ldr	r2, [pc, #284]	@ (800a9d8 <xPortStartScheduler+0x128>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d10b      	bne.n	800a8d8 <xPortStartScheduler+0x28>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	613b      	str	r3, [r7, #16]
}
 800a8d2:	bf00      	nop
 800a8d4:	bf00      	nop
 800a8d6:	e7fd      	b.n	800a8d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a8d8:	4b3e      	ldr	r3, [pc, #248]	@ (800a9d4 <xPortStartScheduler+0x124>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a3f      	ldr	r2, [pc, #252]	@ (800a9dc <xPortStartScheduler+0x12c>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d10b      	bne.n	800a8fa <xPortStartScheduler+0x4a>
	__asm volatile
 800a8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e6:	f383 8811 	msr	BASEPRI, r3
 800a8ea:	f3bf 8f6f 	isb	sy
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	60fb      	str	r3, [r7, #12]
}
 800a8f4:	bf00      	nop
 800a8f6:	bf00      	nop
 800a8f8:	e7fd      	b.n	800a8f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a8fa:	4b39      	ldr	r3, [pc, #228]	@ (800a9e0 <xPortStartScheduler+0x130>)
 800a8fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	b2db      	uxtb	r3, r3
 800a904:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	22ff      	movs	r2, #255	@ 0xff
 800a90a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	781b      	ldrb	r3, [r3, #0]
 800a910:	b2db      	uxtb	r3, r3
 800a912:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a914:	78fb      	ldrb	r3, [r7, #3]
 800a916:	b2db      	uxtb	r3, r3
 800a918:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	4b31      	ldr	r3, [pc, #196]	@ (800a9e4 <xPortStartScheduler+0x134>)
 800a920:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a922:	4b31      	ldr	r3, [pc, #196]	@ (800a9e8 <xPortStartScheduler+0x138>)
 800a924:	2207      	movs	r2, #7
 800a926:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a928:	e009      	b.n	800a93e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a92a:	4b2f      	ldr	r3, [pc, #188]	@ (800a9e8 <xPortStartScheduler+0x138>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3b01      	subs	r3, #1
 800a930:	4a2d      	ldr	r2, [pc, #180]	@ (800a9e8 <xPortStartScheduler+0x138>)
 800a932:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a934:	78fb      	ldrb	r3, [r7, #3]
 800a936:	b2db      	uxtb	r3, r3
 800a938:	005b      	lsls	r3, r3, #1
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a93e:	78fb      	ldrb	r3, [r7, #3]
 800a940:	b2db      	uxtb	r3, r3
 800a942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a946:	2b80      	cmp	r3, #128	@ 0x80
 800a948:	d0ef      	beq.n	800a92a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a94a:	4b27      	ldr	r3, [pc, #156]	@ (800a9e8 <xPortStartScheduler+0x138>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f1c3 0307 	rsb	r3, r3, #7
 800a952:	2b04      	cmp	r3, #4
 800a954:	d00b      	beq.n	800a96e <xPortStartScheduler+0xbe>
	__asm volatile
 800a956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	60bb      	str	r3, [r7, #8]
}
 800a968:	bf00      	nop
 800a96a:	bf00      	nop
 800a96c:	e7fd      	b.n	800a96a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a96e:	4b1e      	ldr	r3, [pc, #120]	@ (800a9e8 <xPortStartScheduler+0x138>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	021b      	lsls	r3, r3, #8
 800a974:	4a1c      	ldr	r2, [pc, #112]	@ (800a9e8 <xPortStartScheduler+0x138>)
 800a976:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a978:	4b1b      	ldr	r3, [pc, #108]	@ (800a9e8 <xPortStartScheduler+0x138>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a980:	4a19      	ldr	r2, [pc, #100]	@ (800a9e8 <xPortStartScheduler+0x138>)
 800a982:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	b2da      	uxtb	r2, r3
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a98c:	4b17      	ldr	r3, [pc, #92]	@ (800a9ec <xPortStartScheduler+0x13c>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a16      	ldr	r2, [pc, #88]	@ (800a9ec <xPortStartScheduler+0x13c>)
 800a992:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a996:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a998:	4b14      	ldr	r3, [pc, #80]	@ (800a9ec <xPortStartScheduler+0x13c>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a13      	ldr	r2, [pc, #76]	@ (800a9ec <xPortStartScheduler+0x13c>)
 800a99e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a9a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a9a4:	f000 f8da 	bl	800ab5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a9a8:	4b11      	ldr	r3, [pc, #68]	@ (800a9f0 <xPortStartScheduler+0x140>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a9ae:	f000 f8f9 	bl	800aba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a9b2:	4b10      	ldr	r3, [pc, #64]	@ (800a9f4 <xPortStartScheduler+0x144>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a0f      	ldr	r2, [pc, #60]	@ (800a9f4 <xPortStartScheduler+0x144>)
 800a9b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a9bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a9be:	f7ff ff63 	bl	800a888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a9c2:	f7ff f83f 	bl	8009a44 <vTaskSwitchContext>
	prvTaskExitError();
 800a9c6:	f7ff ff1d 	bl	800a804 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3718      	adds	r7, #24
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	e000ed00 	.word	0xe000ed00
 800a9d8:	410fc271 	.word	0x410fc271
 800a9dc:	410fc270 	.word	0x410fc270
 800a9e0:	e000e400 	.word	0xe000e400
 800a9e4:	200013bc 	.word	0x200013bc
 800a9e8:	200013c0 	.word	0x200013c0
 800a9ec:	e000ed20 	.word	0xe000ed20
 800a9f0:	200000d0 	.word	0x200000d0
 800a9f4:	e000ef34 	.word	0xe000ef34

0800a9f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	607b      	str	r3, [r7, #4]
}
 800aa10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa12:	4b10      	ldr	r3, [pc, #64]	@ (800aa54 <vPortEnterCritical+0x5c>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	3301      	adds	r3, #1
 800aa18:	4a0e      	ldr	r2, [pc, #56]	@ (800aa54 <vPortEnterCritical+0x5c>)
 800aa1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa1c:	4b0d      	ldr	r3, [pc, #52]	@ (800aa54 <vPortEnterCritical+0x5c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d110      	bne.n	800aa46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa24:	4b0c      	ldr	r3, [pc, #48]	@ (800aa58 <vPortEnterCritical+0x60>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00b      	beq.n	800aa46 <vPortEnterCritical+0x4e>
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	603b      	str	r3, [r7, #0]
}
 800aa40:	bf00      	nop
 800aa42:	bf00      	nop
 800aa44:	e7fd      	b.n	800aa42 <vPortEnterCritical+0x4a>
	}
}
 800aa46:	bf00      	nop
 800aa48:	370c      	adds	r7, #12
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	200000d0 	.word	0x200000d0
 800aa58:	e000ed04 	.word	0xe000ed04

0800aa5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa62:	4b12      	ldr	r3, [pc, #72]	@ (800aaac <vPortExitCritical+0x50>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d10b      	bne.n	800aa82 <vPortExitCritical+0x26>
	__asm volatile
 800aa6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa6e:	f383 8811 	msr	BASEPRI, r3
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	f3bf 8f4f 	dsb	sy
 800aa7a:	607b      	str	r3, [r7, #4]
}
 800aa7c:	bf00      	nop
 800aa7e:	bf00      	nop
 800aa80:	e7fd      	b.n	800aa7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa82:	4b0a      	ldr	r3, [pc, #40]	@ (800aaac <vPortExitCritical+0x50>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	3b01      	subs	r3, #1
 800aa88:	4a08      	ldr	r2, [pc, #32]	@ (800aaac <vPortExitCritical+0x50>)
 800aa8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa8c:	4b07      	ldr	r3, [pc, #28]	@ (800aaac <vPortExitCritical+0x50>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d105      	bne.n	800aaa0 <vPortExitCritical+0x44>
 800aa94:	2300      	movs	r3, #0
 800aa96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	f383 8811 	msr	BASEPRI, r3
}
 800aa9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aaa0:	bf00      	nop
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	200000d0 	.word	0x200000d0

0800aab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aab0:	f3ef 8009 	mrs	r0, PSP
 800aab4:	f3bf 8f6f 	isb	sy
 800aab8:	4b15      	ldr	r3, [pc, #84]	@ (800ab10 <pxCurrentTCBConst>)
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	f01e 0f10 	tst.w	lr, #16
 800aac0:	bf08      	it	eq
 800aac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaca:	6010      	str	r0, [r2, #0]
 800aacc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aad0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aad4:	f380 8811 	msr	BASEPRI, r0
 800aad8:	f3bf 8f4f 	dsb	sy
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f7fe ffb0 	bl	8009a44 <vTaskSwitchContext>
 800aae4:	f04f 0000 	mov.w	r0, #0
 800aae8:	f380 8811 	msr	BASEPRI, r0
 800aaec:	bc09      	pop	{r0, r3}
 800aaee:	6819      	ldr	r1, [r3, #0]
 800aaf0:	6808      	ldr	r0, [r1, #0]
 800aaf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf6:	f01e 0f10 	tst.w	lr, #16
 800aafa:	bf08      	it	eq
 800aafc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab00:	f380 8809 	msr	PSP, r0
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	f3af 8000 	nop.w

0800ab10 <pxCurrentTCBConst>:
 800ab10:	20000d90 	.word	0x20000d90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab14:	bf00      	nop
 800ab16:	bf00      	nop

0800ab18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	607b      	str	r3, [r7, #4]
}
 800ab30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab32:	f7fe fecd 	bl	80098d0 <xTaskIncrementTick>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d003      	beq.n	800ab44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab3c:	4b06      	ldr	r3, [pc, #24]	@ (800ab58 <xPortSysTickHandler+0x40>)
 800ab3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab42:	601a      	str	r2, [r3, #0]
 800ab44:	2300      	movs	r3, #0
 800ab46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	f383 8811 	msr	BASEPRI, r3
}
 800ab4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab50:	bf00      	nop
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	e000ed04 	.word	0xe000ed04

0800ab5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab60:	4b0b      	ldr	r3, [pc, #44]	@ (800ab90 <vPortSetupTimerInterrupt+0x34>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab66:	4b0b      	ldr	r3, [pc, #44]	@ (800ab94 <vPortSetupTimerInterrupt+0x38>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab98 <vPortSetupTimerInterrupt+0x3c>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a0a      	ldr	r2, [pc, #40]	@ (800ab9c <vPortSetupTimerInterrupt+0x40>)
 800ab72:	fba2 2303 	umull	r2, r3, r2, r3
 800ab76:	099b      	lsrs	r3, r3, #6
 800ab78:	4a09      	ldr	r2, [pc, #36]	@ (800aba0 <vPortSetupTimerInterrupt+0x44>)
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab7e:	4b04      	ldr	r3, [pc, #16]	@ (800ab90 <vPortSetupTimerInterrupt+0x34>)
 800ab80:	2207      	movs	r2, #7
 800ab82:	601a      	str	r2, [r3, #0]
}
 800ab84:	bf00      	nop
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	e000e010 	.word	0xe000e010
 800ab94:	e000e018 	.word	0xe000e018
 800ab98:	2000007c 	.word	0x2000007c
 800ab9c:	10624dd3 	.word	0x10624dd3
 800aba0:	e000e014 	.word	0xe000e014

0800aba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aba4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800abb4 <vPortEnableVFP+0x10>
 800aba8:	6801      	ldr	r1, [r0, #0]
 800abaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800abae:	6001      	str	r1, [r0, #0]
 800abb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800abb2:	bf00      	nop
 800abb4:	e000ed88 	.word	0xe000ed88

0800abb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800abbe:	f3ef 8305 	mrs	r3, IPSR
 800abc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2b0f      	cmp	r3, #15
 800abc8:	d915      	bls.n	800abf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800abca:	4a18      	ldr	r2, [pc, #96]	@ (800ac2c <vPortValidateInterruptPriority+0x74>)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	4413      	add	r3, r2
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800abd4:	4b16      	ldr	r3, [pc, #88]	@ (800ac30 <vPortValidateInterruptPriority+0x78>)
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	7afa      	ldrb	r2, [r7, #11]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d20b      	bcs.n	800abf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	607b      	str	r3, [r7, #4]
}
 800abf0:	bf00      	nop
 800abf2:	bf00      	nop
 800abf4:	e7fd      	b.n	800abf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800abf6:	4b0f      	ldr	r3, [pc, #60]	@ (800ac34 <vPortValidateInterruptPriority+0x7c>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800abfe:	4b0e      	ldr	r3, [pc, #56]	@ (800ac38 <vPortValidateInterruptPriority+0x80>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d90b      	bls.n	800ac1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ac06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac0a:	f383 8811 	msr	BASEPRI, r3
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	f3bf 8f4f 	dsb	sy
 800ac16:	603b      	str	r3, [r7, #0]
}
 800ac18:	bf00      	nop
 800ac1a:	bf00      	nop
 800ac1c:	e7fd      	b.n	800ac1a <vPortValidateInterruptPriority+0x62>
	}
 800ac1e:	bf00      	nop
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	e000e3f0 	.word	0xe000e3f0
 800ac30:	200013bc 	.word	0x200013bc
 800ac34:	e000ed0c 	.word	0xe000ed0c
 800ac38:	200013c0 	.word	0x200013c0

0800ac3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b08a      	sub	sp, #40	@ 0x28
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac44:	2300      	movs	r3, #0
 800ac46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac48:	f7fe fd86 	bl	8009758 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac4c:	4b5c      	ldr	r3, [pc, #368]	@ (800adc0 <pvPortMalloc+0x184>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d101      	bne.n	800ac58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac54:	f000 f924 	bl	800aea0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac58:	4b5a      	ldr	r3, [pc, #360]	@ (800adc4 <pvPortMalloc+0x188>)
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4013      	ands	r3, r2
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f040 8095 	bne.w	800ad90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d01e      	beq.n	800acaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ac6c:	2208      	movs	r2, #8
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	4413      	add	r3, r2
 800ac72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f003 0307 	and.w	r3, r3, #7
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d015      	beq.n	800acaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f023 0307 	bic.w	r3, r3, #7
 800ac84:	3308      	adds	r3, #8
 800ac86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f003 0307 	and.w	r3, r3, #7
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00b      	beq.n	800acaa <pvPortMalloc+0x6e>
	__asm volatile
 800ac92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac96:	f383 8811 	msr	BASEPRI, r3
 800ac9a:	f3bf 8f6f 	isb	sy
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	617b      	str	r3, [r7, #20]
}
 800aca4:	bf00      	nop
 800aca6:	bf00      	nop
 800aca8:	e7fd      	b.n	800aca6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d06f      	beq.n	800ad90 <pvPortMalloc+0x154>
 800acb0:	4b45      	ldr	r3, [pc, #276]	@ (800adc8 <pvPortMalloc+0x18c>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d86a      	bhi.n	800ad90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800acba:	4b44      	ldr	r3, [pc, #272]	@ (800adcc <pvPortMalloc+0x190>)
 800acbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800acbe:	4b43      	ldr	r3, [pc, #268]	@ (800adcc <pvPortMalloc+0x190>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800acc4:	e004      	b.n	800acd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800acc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800acca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800acd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d903      	bls.n	800ace2 <pvPortMalloc+0xa6>
 800acda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1f1      	bne.n	800acc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ace2:	4b37      	ldr	r3, [pc, #220]	@ (800adc0 <pvPortMalloc+0x184>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ace8:	429a      	cmp	r2, r3
 800acea:	d051      	beq.n	800ad90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800acec:	6a3b      	ldr	r3, [r7, #32]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2208      	movs	r2, #8
 800acf2:	4413      	add	r3, r2
 800acf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800acf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800acfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	1ad2      	subs	r2, r2, r3
 800ad06:	2308      	movs	r3, #8
 800ad08:	005b      	lsls	r3, r3, #1
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d920      	bls.n	800ad50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ad0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4413      	add	r3, r2
 800ad14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	f003 0307 	and.w	r3, r3, #7
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00b      	beq.n	800ad38 <pvPortMalloc+0xfc>
	__asm volatile
 800ad20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	613b      	str	r3, [r7, #16]
}
 800ad32:	bf00      	nop
 800ad34:	bf00      	nop
 800ad36:	e7fd      	b.n	800ad34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad3a:	685a      	ldr	r2, [r3, #4]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	1ad2      	subs	r2, r2, r3
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad4a:	69b8      	ldr	r0, [r7, #24]
 800ad4c:	f000 f90a 	bl	800af64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad50:	4b1d      	ldr	r3, [pc, #116]	@ (800adc8 <pvPortMalloc+0x18c>)
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	1ad3      	subs	r3, r2, r3
 800ad5a:	4a1b      	ldr	r2, [pc, #108]	@ (800adc8 <pvPortMalloc+0x18c>)
 800ad5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad5e:	4b1a      	ldr	r3, [pc, #104]	@ (800adc8 <pvPortMalloc+0x18c>)
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	4b1b      	ldr	r3, [pc, #108]	@ (800add0 <pvPortMalloc+0x194>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d203      	bcs.n	800ad72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad6a:	4b17      	ldr	r3, [pc, #92]	@ (800adc8 <pvPortMalloc+0x18c>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a18      	ldr	r2, [pc, #96]	@ (800add0 <pvPortMalloc+0x194>)
 800ad70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad74:	685a      	ldr	r2, [r3, #4]
 800ad76:	4b13      	ldr	r3, [pc, #76]	@ (800adc4 <pvPortMalloc+0x188>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	431a      	orrs	r2, r3
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad82:	2200      	movs	r2, #0
 800ad84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ad86:	4b13      	ldr	r3, [pc, #76]	@ (800add4 <pvPortMalloc+0x198>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	4a11      	ldr	r2, [pc, #68]	@ (800add4 <pvPortMalloc+0x198>)
 800ad8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad90:	f7fe fcf0 	bl	8009774 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	f003 0307 	and.w	r3, r3, #7
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00b      	beq.n	800adb6 <pvPortMalloc+0x17a>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	60fb      	str	r3, [r7, #12]
}
 800adb0:	bf00      	nop
 800adb2:	bf00      	nop
 800adb4:	e7fd      	b.n	800adb2 <pvPortMalloc+0x176>
	return pvReturn;
 800adb6:	69fb      	ldr	r3, [r7, #28]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3728      	adds	r7, #40	@ 0x28
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	20004fcc 	.word	0x20004fcc
 800adc4:	20004fe0 	.word	0x20004fe0
 800adc8:	20004fd0 	.word	0x20004fd0
 800adcc:	20004fc4 	.word	0x20004fc4
 800add0:	20004fd4 	.word	0x20004fd4
 800add4:	20004fd8 	.word	0x20004fd8

0800add8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d04f      	beq.n	800ae8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800adea:	2308      	movs	r3, #8
 800adec:	425b      	negs	r3, r3
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	4413      	add	r3, r2
 800adf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	685a      	ldr	r2, [r3, #4]
 800adfc:	4b25      	ldr	r3, [pc, #148]	@ (800ae94 <vPortFree+0xbc>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4013      	ands	r3, r2
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10b      	bne.n	800ae1e <vPortFree+0x46>
	__asm volatile
 800ae06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	60fb      	str	r3, [r7, #12]
}
 800ae18:	bf00      	nop
 800ae1a:	bf00      	nop
 800ae1c:	e7fd      	b.n	800ae1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00b      	beq.n	800ae3e <vPortFree+0x66>
	__asm volatile
 800ae26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae2a:	f383 8811 	msr	BASEPRI, r3
 800ae2e:	f3bf 8f6f 	isb	sy
 800ae32:	f3bf 8f4f 	dsb	sy
 800ae36:	60bb      	str	r3, [r7, #8]
}
 800ae38:	bf00      	nop
 800ae3a:	bf00      	nop
 800ae3c:	e7fd      	b.n	800ae3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	685a      	ldr	r2, [r3, #4]
 800ae42:	4b14      	ldr	r3, [pc, #80]	@ (800ae94 <vPortFree+0xbc>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4013      	ands	r3, r2
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d01e      	beq.n	800ae8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d11a      	bne.n	800ae8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	685a      	ldr	r2, [r3, #4]
 800ae58:	4b0e      	ldr	r3, [pc, #56]	@ (800ae94 <vPortFree+0xbc>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	43db      	mvns	r3, r3
 800ae5e:	401a      	ands	r2, r3
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae64:	f7fe fc78 	bl	8009758 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ae98 <vPortFree+0xc0>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4413      	add	r3, r2
 800ae72:	4a09      	ldr	r2, [pc, #36]	@ (800ae98 <vPortFree+0xc0>)
 800ae74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae76:	6938      	ldr	r0, [r7, #16]
 800ae78:	f000 f874 	bl	800af64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ae7c:	4b07      	ldr	r3, [pc, #28]	@ (800ae9c <vPortFree+0xc4>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	3301      	adds	r3, #1
 800ae82:	4a06      	ldr	r2, [pc, #24]	@ (800ae9c <vPortFree+0xc4>)
 800ae84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ae86:	f7fe fc75 	bl	8009774 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae8a:	bf00      	nop
 800ae8c:	3718      	adds	r7, #24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	20004fe0 	.word	0x20004fe0
 800ae98:	20004fd0 	.word	0x20004fd0
 800ae9c:	20004fdc 	.word	0x20004fdc

0800aea0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aea6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800aeaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aeac:	4b27      	ldr	r3, [pc, #156]	@ (800af4c <prvHeapInit+0xac>)
 800aeae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f003 0307 	and.w	r3, r3, #7
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00c      	beq.n	800aed4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	3307      	adds	r3, #7
 800aebe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f023 0307 	bic.w	r3, r3, #7
 800aec6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	1ad3      	subs	r3, r2, r3
 800aece:	4a1f      	ldr	r2, [pc, #124]	@ (800af4c <prvHeapInit+0xac>)
 800aed0:	4413      	add	r3, r2
 800aed2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aed8:	4a1d      	ldr	r2, [pc, #116]	@ (800af50 <prvHeapInit+0xb0>)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aede:	4b1c      	ldr	r3, [pc, #112]	@ (800af50 <prvHeapInit+0xb0>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	68ba      	ldr	r2, [r7, #8]
 800aee8:	4413      	add	r3, r2
 800aeea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aeec:	2208      	movs	r2, #8
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	1a9b      	subs	r3, r3, r2
 800aef2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f023 0307 	bic.w	r3, r3, #7
 800aefa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4a15      	ldr	r2, [pc, #84]	@ (800af54 <prvHeapInit+0xb4>)
 800af00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af02:	4b14      	ldr	r3, [pc, #80]	@ (800af54 <prvHeapInit+0xb4>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2200      	movs	r2, #0
 800af08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af0a:	4b12      	ldr	r3, [pc, #72]	@ (800af54 <prvHeapInit+0xb4>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2200      	movs	r2, #0
 800af10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	1ad2      	subs	r2, r2, r3
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800af20:	4b0c      	ldr	r3, [pc, #48]	@ (800af54 <prvHeapInit+0xb4>)
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	4a0a      	ldr	r2, [pc, #40]	@ (800af58 <prvHeapInit+0xb8>)
 800af2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	4a09      	ldr	r2, [pc, #36]	@ (800af5c <prvHeapInit+0xbc>)
 800af36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800af38:	4b09      	ldr	r3, [pc, #36]	@ (800af60 <prvHeapInit+0xc0>)
 800af3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800af3e:	601a      	str	r2, [r3, #0]
}
 800af40:	bf00      	nop
 800af42:	3714      	adds	r7, #20
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr
 800af4c:	200013c4 	.word	0x200013c4
 800af50:	20004fc4 	.word	0x20004fc4
 800af54:	20004fcc 	.word	0x20004fcc
 800af58:	20004fd4 	.word	0x20004fd4
 800af5c:	20004fd0 	.word	0x20004fd0
 800af60:	20004fe0 	.word	0x20004fe0

0800af64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af64:	b480      	push	{r7}
 800af66:	b085      	sub	sp, #20
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af6c:	4b28      	ldr	r3, [pc, #160]	@ (800b010 <prvInsertBlockIntoFreeList+0xac>)
 800af6e:	60fb      	str	r3, [r7, #12]
 800af70:	e002      	b.n	800af78 <prvInsertBlockIntoFreeList+0x14>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	60fb      	str	r3, [r7, #12]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d8f7      	bhi.n	800af72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	68ba      	ldr	r2, [r7, #8]
 800af8c:	4413      	add	r3, r2
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	429a      	cmp	r2, r3
 800af92:	d108      	bne.n	800afa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	685a      	ldr	r2, [r3, #4]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	441a      	add	r2, r3
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	441a      	add	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d118      	bne.n	800afec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	4b15      	ldr	r3, [pc, #84]	@ (800b014 <prvInsertBlockIntoFreeList+0xb0>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d00d      	beq.n	800afe2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	685a      	ldr	r2, [r3, #4]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	441a      	add	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	601a      	str	r2, [r3, #0]
 800afe0:	e008      	b.n	800aff4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800afe2:	4b0c      	ldr	r3, [pc, #48]	@ (800b014 <prvInsertBlockIntoFreeList+0xb0>)
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	601a      	str	r2, [r3, #0]
 800afea:	e003      	b.n	800aff4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d002      	beq.n	800b002 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b002:	bf00      	nop
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	20004fc4 	.word	0x20004fc4
 800b014:	20004fcc 	.word	0x20004fcc

0800b018 <atoi>:
 800b018:	220a      	movs	r2, #10
 800b01a:	2100      	movs	r1, #0
 800b01c:	f000 beea 	b.w	800bdf4 <strtol>

0800b020 <sulp>:
 800b020:	b570      	push	{r4, r5, r6, lr}
 800b022:	4604      	mov	r4, r0
 800b024:	460d      	mov	r5, r1
 800b026:	ec45 4b10 	vmov	d0, r4, r5
 800b02a:	4616      	mov	r6, r2
 800b02c:	f003 feb8 	bl	800eda0 <__ulp>
 800b030:	ec51 0b10 	vmov	r0, r1, d0
 800b034:	b17e      	cbz	r6, 800b056 <sulp+0x36>
 800b036:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b03a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b03e:	2b00      	cmp	r3, #0
 800b040:	dd09      	ble.n	800b056 <sulp+0x36>
 800b042:	051b      	lsls	r3, r3, #20
 800b044:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b048:	2400      	movs	r4, #0
 800b04a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b04e:	4622      	mov	r2, r4
 800b050:	462b      	mov	r3, r5
 800b052:	f7f5 fb01 	bl	8000658 <__aeabi_dmul>
 800b056:	ec41 0b10 	vmov	d0, r0, r1
 800b05a:	bd70      	pop	{r4, r5, r6, pc}
 800b05c:	0000      	movs	r0, r0
	...

0800b060 <_strtod_l>:
 800b060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b064:	b09f      	sub	sp, #124	@ 0x7c
 800b066:	460c      	mov	r4, r1
 800b068:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b06a:	2200      	movs	r2, #0
 800b06c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b06e:	9005      	str	r0, [sp, #20]
 800b070:	f04f 0a00 	mov.w	sl, #0
 800b074:	f04f 0b00 	mov.w	fp, #0
 800b078:	460a      	mov	r2, r1
 800b07a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b07c:	7811      	ldrb	r1, [r2, #0]
 800b07e:	292b      	cmp	r1, #43	@ 0x2b
 800b080:	d04a      	beq.n	800b118 <_strtod_l+0xb8>
 800b082:	d838      	bhi.n	800b0f6 <_strtod_l+0x96>
 800b084:	290d      	cmp	r1, #13
 800b086:	d832      	bhi.n	800b0ee <_strtod_l+0x8e>
 800b088:	2908      	cmp	r1, #8
 800b08a:	d832      	bhi.n	800b0f2 <_strtod_l+0x92>
 800b08c:	2900      	cmp	r1, #0
 800b08e:	d03b      	beq.n	800b108 <_strtod_l+0xa8>
 800b090:	2200      	movs	r2, #0
 800b092:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b094:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b096:	782a      	ldrb	r2, [r5, #0]
 800b098:	2a30      	cmp	r2, #48	@ 0x30
 800b09a:	f040 80b3 	bne.w	800b204 <_strtod_l+0x1a4>
 800b09e:	786a      	ldrb	r2, [r5, #1]
 800b0a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b0a4:	2a58      	cmp	r2, #88	@ 0x58
 800b0a6:	d16e      	bne.n	800b186 <_strtod_l+0x126>
 800b0a8:	9302      	str	r3, [sp, #8]
 800b0aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0ac:	9301      	str	r3, [sp, #4]
 800b0ae:	ab1a      	add	r3, sp, #104	@ 0x68
 800b0b0:	9300      	str	r3, [sp, #0]
 800b0b2:	4a8e      	ldr	r2, [pc, #568]	@ (800b2ec <_strtod_l+0x28c>)
 800b0b4:	9805      	ldr	r0, [sp, #20]
 800b0b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b0b8:	a919      	add	r1, sp, #100	@ 0x64
 800b0ba:	f002 ff63 	bl	800df84 <__gethex>
 800b0be:	f010 060f 	ands.w	r6, r0, #15
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	d005      	beq.n	800b0d2 <_strtod_l+0x72>
 800b0c6:	2e06      	cmp	r6, #6
 800b0c8:	d128      	bne.n	800b11c <_strtod_l+0xbc>
 800b0ca:	3501      	adds	r5, #1
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	9519      	str	r5, [sp, #100]	@ 0x64
 800b0d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f040 858e 	bne.w	800bbf6 <_strtod_l+0xb96>
 800b0da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0dc:	b1cb      	cbz	r3, 800b112 <_strtod_l+0xb2>
 800b0de:	4652      	mov	r2, sl
 800b0e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b0e4:	ec43 2b10 	vmov	d0, r2, r3
 800b0e8:	b01f      	add	sp, #124	@ 0x7c
 800b0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ee:	2920      	cmp	r1, #32
 800b0f0:	d1ce      	bne.n	800b090 <_strtod_l+0x30>
 800b0f2:	3201      	adds	r2, #1
 800b0f4:	e7c1      	b.n	800b07a <_strtod_l+0x1a>
 800b0f6:	292d      	cmp	r1, #45	@ 0x2d
 800b0f8:	d1ca      	bne.n	800b090 <_strtod_l+0x30>
 800b0fa:	2101      	movs	r1, #1
 800b0fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b0fe:	1c51      	adds	r1, r2, #1
 800b100:	9119      	str	r1, [sp, #100]	@ 0x64
 800b102:	7852      	ldrb	r2, [r2, #1]
 800b104:	2a00      	cmp	r2, #0
 800b106:	d1c5      	bne.n	800b094 <_strtod_l+0x34>
 800b108:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b10a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f040 8570 	bne.w	800bbf2 <_strtod_l+0xb92>
 800b112:	4652      	mov	r2, sl
 800b114:	465b      	mov	r3, fp
 800b116:	e7e5      	b.n	800b0e4 <_strtod_l+0x84>
 800b118:	2100      	movs	r1, #0
 800b11a:	e7ef      	b.n	800b0fc <_strtod_l+0x9c>
 800b11c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b11e:	b13a      	cbz	r2, 800b130 <_strtod_l+0xd0>
 800b120:	2135      	movs	r1, #53	@ 0x35
 800b122:	a81c      	add	r0, sp, #112	@ 0x70
 800b124:	f003 ff36 	bl	800ef94 <__copybits>
 800b128:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b12a:	9805      	ldr	r0, [sp, #20]
 800b12c:	f003 fb04 	bl	800e738 <_Bfree>
 800b130:	3e01      	subs	r6, #1
 800b132:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b134:	2e04      	cmp	r6, #4
 800b136:	d806      	bhi.n	800b146 <_strtod_l+0xe6>
 800b138:	e8df f006 	tbb	[pc, r6]
 800b13c:	201d0314 	.word	0x201d0314
 800b140:	14          	.byte	0x14
 800b141:	00          	.byte	0x00
 800b142:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b146:	05e1      	lsls	r1, r4, #23
 800b148:	bf48      	it	mi
 800b14a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b14e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b152:	0d1b      	lsrs	r3, r3, #20
 800b154:	051b      	lsls	r3, r3, #20
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1bb      	bne.n	800b0d2 <_strtod_l+0x72>
 800b15a:	f001 ffab 	bl	800d0b4 <__errno>
 800b15e:	2322      	movs	r3, #34	@ 0x22
 800b160:	6003      	str	r3, [r0, #0]
 800b162:	e7b6      	b.n	800b0d2 <_strtod_l+0x72>
 800b164:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b168:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b16c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b170:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b174:	e7e7      	b.n	800b146 <_strtod_l+0xe6>
 800b176:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b2f4 <_strtod_l+0x294>
 800b17a:	e7e4      	b.n	800b146 <_strtod_l+0xe6>
 800b17c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b180:	f04f 3aff 	mov.w	sl, #4294967295
 800b184:	e7df      	b.n	800b146 <_strtod_l+0xe6>
 800b186:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b188:	1c5a      	adds	r2, r3, #1
 800b18a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b18c:	785b      	ldrb	r3, [r3, #1]
 800b18e:	2b30      	cmp	r3, #48	@ 0x30
 800b190:	d0f9      	beq.n	800b186 <_strtod_l+0x126>
 800b192:	2b00      	cmp	r3, #0
 800b194:	d09d      	beq.n	800b0d2 <_strtod_l+0x72>
 800b196:	2301      	movs	r3, #1
 800b198:	9309      	str	r3, [sp, #36]	@ 0x24
 800b19a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b19c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b19e:	2300      	movs	r3, #0
 800b1a0:	9308      	str	r3, [sp, #32]
 800b1a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1a4:	461f      	mov	r7, r3
 800b1a6:	220a      	movs	r2, #10
 800b1a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b1aa:	7805      	ldrb	r5, [r0, #0]
 800b1ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b1b0:	b2d9      	uxtb	r1, r3
 800b1b2:	2909      	cmp	r1, #9
 800b1b4:	d928      	bls.n	800b208 <_strtod_l+0x1a8>
 800b1b6:	494e      	ldr	r1, [pc, #312]	@ (800b2f0 <_strtod_l+0x290>)
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	f001 fec3 	bl	800cf44 <strncmp>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	d032      	beq.n	800b228 <_strtod_l+0x1c8>
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	462a      	mov	r2, r5
 800b1c6:	4681      	mov	r9, r0
 800b1c8:	463d      	mov	r5, r7
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2a65      	cmp	r2, #101	@ 0x65
 800b1ce:	d001      	beq.n	800b1d4 <_strtod_l+0x174>
 800b1d0:	2a45      	cmp	r2, #69	@ 0x45
 800b1d2:	d114      	bne.n	800b1fe <_strtod_l+0x19e>
 800b1d4:	b91d      	cbnz	r5, 800b1de <_strtod_l+0x17e>
 800b1d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1d8:	4302      	orrs	r2, r0
 800b1da:	d095      	beq.n	800b108 <_strtod_l+0xa8>
 800b1dc:	2500      	movs	r5, #0
 800b1de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b1e0:	1c62      	adds	r2, r4, #1
 800b1e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b1e4:	7862      	ldrb	r2, [r4, #1]
 800b1e6:	2a2b      	cmp	r2, #43	@ 0x2b
 800b1e8:	d077      	beq.n	800b2da <_strtod_l+0x27a>
 800b1ea:	2a2d      	cmp	r2, #45	@ 0x2d
 800b1ec:	d07b      	beq.n	800b2e6 <_strtod_l+0x286>
 800b1ee:	f04f 0c00 	mov.w	ip, #0
 800b1f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b1f6:	2909      	cmp	r1, #9
 800b1f8:	f240 8082 	bls.w	800b300 <_strtod_l+0x2a0>
 800b1fc:	9419      	str	r4, [sp, #100]	@ 0x64
 800b1fe:	f04f 0800 	mov.w	r8, #0
 800b202:	e0a2      	b.n	800b34a <_strtod_l+0x2ea>
 800b204:	2300      	movs	r3, #0
 800b206:	e7c7      	b.n	800b198 <_strtod_l+0x138>
 800b208:	2f08      	cmp	r7, #8
 800b20a:	bfd5      	itete	le
 800b20c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b20e:	9908      	ldrgt	r1, [sp, #32]
 800b210:	fb02 3301 	mlale	r3, r2, r1, r3
 800b214:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b218:	f100 0001 	add.w	r0, r0, #1
 800b21c:	bfd4      	ite	le
 800b21e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b220:	9308      	strgt	r3, [sp, #32]
 800b222:	3701      	adds	r7, #1
 800b224:	9019      	str	r0, [sp, #100]	@ 0x64
 800b226:	e7bf      	b.n	800b1a8 <_strtod_l+0x148>
 800b228:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b22a:	1c5a      	adds	r2, r3, #1
 800b22c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b22e:	785a      	ldrb	r2, [r3, #1]
 800b230:	b37f      	cbz	r7, 800b292 <_strtod_l+0x232>
 800b232:	4681      	mov	r9, r0
 800b234:	463d      	mov	r5, r7
 800b236:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b23a:	2b09      	cmp	r3, #9
 800b23c:	d912      	bls.n	800b264 <_strtod_l+0x204>
 800b23e:	2301      	movs	r3, #1
 800b240:	e7c4      	b.n	800b1cc <_strtod_l+0x16c>
 800b242:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b244:	1c5a      	adds	r2, r3, #1
 800b246:	9219      	str	r2, [sp, #100]	@ 0x64
 800b248:	785a      	ldrb	r2, [r3, #1]
 800b24a:	3001      	adds	r0, #1
 800b24c:	2a30      	cmp	r2, #48	@ 0x30
 800b24e:	d0f8      	beq.n	800b242 <_strtod_l+0x1e2>
 800b250:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b254:	2b08      	cmp	r3, #8
 800b256:	f200 84d3 	bhi.w	800bc00 <_strtod_l+0xba0>
 800b25a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b25c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b25e:	4681      	mov	r9, r0
 800b260:	2000      	movs	r0, #0
 800b262:	4605      	mov	r5, r0
 800b264:	3a30      	subs	r2, #48	@ 0x30
 800b266:	f100 0301 	add.w	r3, r0, #1
 800b26a:	d02a      	beq.n	800b2c2 <_strtod_l+0x262>
 800b26c:	4499      	add	r9, r3
 800b26e:	eb00 0c05 	add.w	ip, r0, r5
 800b272:	462b      	mov	r3, r5
 800b274:	210a      	movs	r1, #10
 800b276:	4563      	cmp	r3, ip
 800b278:	d10d      	bne.n	800b296 <_strtod_l+0x236>
 800b27a:	1c69      	adds	r1, r5, #1
 800b27c:	4401      	add	r1, r0
 800b27e:	4428      	add	r0, r5
 800b280:	2808      	cmp	r0, #8
 800b282:	dc16      	bgt.n	800b2b2 <_strtod_l+0x252>
 800b284:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b286:	230a      	movs	r3, #10
 800b288:	fb03 2300 	mla	r3, r3, r0, r2
 800b28c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b28e:	2300      	movs	r3, #0
 800b290:	e018      	b.n	800b2c4 <_strtod_l+0x264>
 800b292:	4638      	mov	r0, r7
 800b294:	e7da      	b.n	800b24c <_strtod_l+0x1ec>
 800b296:	2b08      	cmp	r3, #8
 800b298:	f103 0301 	add.w	r3, r3, #1
 800b29c:	dc03      	bgt.n	800b2a6 <_strtod_l+0x246>
 800b29e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b2a0:	434e      	muls	r6, r1
 800b2a2:	960a      	str	r6, [sp, #40]	@ 0x28
 800b2a4:	e7e7      	b.n	800b276 <_strtod_l+0x216>
 800b2a6:	2b10      	cmp	r3, #16
 800b2a8:	bfde      	ittt	le
 800b2aa:	9e08      	ldrle	r6, [sp, #32]
 800b2ac:	434e      	mulle	r6, r1
 800b2ae:	9608      	strle	r6, [sp, #32]
 800b2b0:	e7e1      	b.n	800b276 <_strtod_l+0x216>
 800b2b2:	280f      	cmp	r0, #15
 800b2b4:	dceb      	bgt.n	800b28e <_strtod_l+0x22e>
 800b2b6:	9808      	ldr	r0, [sp, #32]
 800b2b8:	230a      	movs	r3, #10
 800b2ba:	fb03 2300 	mla	r3, r3, r0, r2
 800b2be:	9308      	str	r3, [sp, #32]
 800b2c0:	e7e5      	b.n	800b28e <_strtod_l+0x22e>
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b2c6:	1c50      	adds	r0, r2, #1
 800b2c8:	9019      	str	r0, [sp, #100]	@ 0x64
 800b2ca:	7852      	ldrb	r2, [r2, #1]
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	460d      	mov	r5, r1
 800b2d0:	e7b1      	b.n	800b236 <_strtod_l+0x1d6>
 800b2d2:	f04f 0900 	mov.w	r9, #0
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e77d      	b.n	800b1d6 <_strtod_l+0x176>
 800b2da:	f04f 0c00 	mov.w	ip, #0
 800b2de:	1ca2      	adds	r2, r4, #2
 800b2e0:	9219      	str	r2, [sp, #100]	@ 0x64
 800b2e2:	78a2      	ldrb	r2, [r4, #2]
 800b2e4:	e785      	b.n	800b1f2 <_strtod_l+0x192>
 800b2e6:	f04f 0c01 	mov.w	ip, #1
 800b2ea:	e7f8      	b.n	800b2de <_strtod_l+0x27e>
 800b2ec:	0800fec4 	.word	0x0800fec4
 800b2f0:	0800feac 	.word	0x0800feac
 800b2f4:	7ff00000 	.word	0x7ff00000
 800b2f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b2fa:	1c51      	adds	r1, r2, #1
 800b2fc:	9119      	str	r1, [sp, #100]	@ 0x64
 800b2fe:	7852      	ldrb	r2, [r2, #1]
 800b300:	2a30      	cmp	r2, #48	@ 0x30
 800b302:	d0f9      	beq.n	800b2f8 <_strtod_l+0x298>
 800b304:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b308:	2908      	cmp	r1, #8
 800b30a:	f63f af78 	bhi.w	800b1fe <_strtod_l+0x19e>
 800b30e:	3a30      	subs	r2, #48	@ 0x30
 800b310:	920e      	str	r2, [sp, #56]	@ 0x38
 800b312:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b314:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b316:	f04f 080a 	mov.w	r8, #10
 800b31a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b31c:	1c56      	adds	r6, r2, #1
 800b31e:	9619      	str	r6, [sp, #100]	@ 0x64
 800b320:	7852      	ldrb	r2, [r2, #1]
 800b322:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b326:	f1be 0f09 	cmp.w	lr, #9
 800b32a:	d939      	bls.n	800b3a0 <_strtod_l+0x340>
 800b32c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b32e:	1a76      	subs	r6, r6, r1
 800b330:	2e08      	cmp	r6, #8
 800b332:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b336:	dc03      	bgt.n	800b340 <_strtod_l+0x2e0>
 800b338:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b33a:	4588      	cmp	r8, r1
 800b33c:	bfa8      	it	ge
 800b33e:	4688      	movge	r8, r1
 800b340:	f1bc 0f00 	cmp.w	ip, #0
 800b344:	d001      	beq.n	800b34a <_strtod_l+0x2ea>
 800b346:	f1c8 0800 	rsb	r8, r8, #0
 800b34a:	2d00      	cmp	r5, #0
 800b34c:	d14e      	bne.n	800b3ec <_strtod_l+0x38c>
 800b34e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b350:	4308      	orrs	r0, r1
 800b352:	f47f aebe 	bne.w	800b0d2 <_strtod_l+0x72>
 800b356:	2b00      	cmp	r3, #0
 800b358:	f47f aed6 	bne.w	800b108 <_strtod_l+0xa8>
 800b35c:	2a69      	cmp	r2, #105	@ 0x69
 800b35e:	d028      	beq.n	800b3b2 <_strtod_l+0x352>
 800b360:	dc25      	bgt.n	800b3ae <_strtod_l+0x34e>
 800b362:	2a49      	cmp	r2, #73	@ 0x49
 800b364:	d025      	beq.n	800b3b2 <_strtod_l+0x352>
 800b366:	2a4e      	cmp	r2, #78	@ 0x4e
 800b368:	f47f aece 	bne.w	800b108 <_strtod_l+0xa8>
 800b36c:	499b      	ldr	r1, [pc, #620]	@ (800b5dc <_strtod_l+0x57c>)
 800b36e:	a819      	add	r0, sp, #100	@ 0x64
 800b370:	f003 f82a 	bl	800e3c8 <__match>
 800b374:	2800      	cmp	r0, #0
 800b376:	f43f aec7 	beq.w	800b108 <_strtod_l+0xa8>
 800b37a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	2b28      	cmp	r3, #40	@ 0x28
 800b380:	d12e      	bne.n	800b3e0 <_strtod_l+0x380>
 800b382:	4997      	ldr	r1, [pc, #604]	@ (800b5e0 <_strtod_l+0x580>)
 800b384:	aa1c      	add	r2, sp, #112	@ 0x70
 800b386:	a819      	add	r0, sp, #100	@ 0x64
 800b388:	f003 f832 	bl	800e3f0 <__hexnan>
 800b38c:	2805      	cmp	r0, #5
 800b38e:	d127      	bne.n	800b3e0 <_strtod_l+0x380>
 800b390:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b392:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b396:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b39a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b39e:	e698      	b.n	800b0d2 <_strtod_l+0x72>
 800b3a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b3a2:	fb08 2101 	mla	r1, r8, r1, r2
 800b3a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b3aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3ac:	e7b5      	b.n	800b31a <_strtod_l+0x2ba>
 800b3ae:	2a6e      	cmp	r2, #110	@ 0x6e
 800b3b0:	e7da      	b.n	800b368 <_strtod_l+0x308>
 800b3b2:	498c      	ldr	r1, [pc, #560]	@ (800b5e4 <_strtod_l+0x584>)
 800b3b4:	a819      	add	r0, sp, #100	@ 0x64
 800b3b6:	f003 f807 	bl	800e3c8 <__match>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	f43f aea4 	beq.w	800b108 <_strtod_l+0xa8>
 800b3c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3c2:	4989      	ldr	r1, [pc, #548]	@ (800b5e8 <_strtod_l+0x588>)
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	a819      	add	r0, sp, #100	@ 0x64
 800b3c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800b3ca:	f002 fffd 	bl	800e3c8 <__match>
 800b3ce:	b910      	cbnz	r0, 800b3d6 <_strtod_l+0x376>
 800b3d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b3d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b5f8 <_strtod_l+0x598>
 800b3da:	f04f 0a00 	mov.w	sl, #0
 800b3de:	e678      	b.n	800b0d2 <_strtod_l+0x72>
 800b3e0:	4882      	ldr	r0, [pc, #520]	@ (800b5ec <_strtod_l+0x58c>)
 800b3e2:	f001 fea5 	bl	800d130 <nan>
 800b3e6:	ec5b ab10 	vmov	sl, fp, d0
 800b3ea:	e672      	b.n	800b0d2 <_strtod_l+0x72>
 800b3ec:	eba8 0309 	sub.w	r3, r8, r9
 800b3f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b3f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3f4:	2f00      	cmp	r7, #0
 800b3f6:	bf08      	it	eq
 800b3f8:	462f      	moveq	r7, r5
 800b3fa:	2d10      	cmp	r5, #16
 800b3fc:	462c      	mov	r4, r5
 800b3fe:	bfa8      	it	ge
 800b400:	2410      	movge	r4, #16
 800b402:	f7f5 f8af 	bl	8000564 <__aeabi_ui2d>
 800b406:	2d09      	cmp	r5, #9
 800b408:	4682      	mov	sl, r0
 800b40a:	468b      	mov	fp, r1
 800b40c:	dc13      	bgt.n	800b436 <_strtod_l+0x3d6>
 800b40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b410:	2b00      	cmp	r3, #0
 800b412:	f43f ae5e 	beq.w	800b0d2 <_strtod_l+0x72>
 800b416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b418:	dd78      	ble.n	800b50c <_strtod_l+0x4ac>
 800b41a:	2b16      	cmp	r3, #22
 800b41c:	dc5f      	bgt.n	800b4de <_strtod_l+0x47e>
 800b41e:	4974      	ldr	r1, [pc, #464]	@ (800b5f0 <_strtod_l+0x590>)
 800b420:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b424:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b428:	4652      	mov	r2, sl
 800b42a:	465b      	mov	r3, fp
 800b42c:	f7f5 f914 	bl	8000658 <__aeabi_dmul>
 800b430:	4682      	mov	sl, r0
 800b432:	468b      	mov	fp, r1
 800b434:	e64d      	b.n	800b0d2 <_strtod_l+0x72>
 800b436:	4b6e      	ldr	r3, [pc, #440]	@ (800b5f0 <_strtod_l+0x590>)
 800b438:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b43c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b440:	f7f5 f90a 	bl	8000658 <__aeabi_dmul>
 800b444:	4682      	mov	sl, r0
 800b446:	9808      	ldr	r0, [sp, #32]
 800b448:	468b      	mov	fp, r1
 800b44a:	f7f5 f88b 	bl	8000564 <__aeabi_ui2d>
 800b44e:	4602      	mov	r2, r0
 800b450:	460b      	mov	r3, r1
 800b452:	4650      	mov	r0, sl
 800b454:	4659      	mov	r1, fp
 800b456:	f7f4 ff49 	bl	80002ec <__adddf3>
 800b45a:	2d0f      	cmp	r5, #15
 800b45c:	4682      	mov	sl, r0
 800b45e:	468b      	mov	fp, r1
 800b460:	ddd5      	ble.n	800b40e <_strtod_l+0x3ae>
 800b462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b464:	1b2c      	subs	r4, r5, r4
 800b466:	441c      	add	r4, r3
 800b468:	2c00      	cmp	r4, #0
 800b46a:	f340 8096 	ble.w	800b59a <_strtod_l+0x53a>
 800b46e:	f014 030f 	ands.w	r3, r4, #15
 800b472:	d00a      	beq.n	800b48a <_strtod_l+0x42a>
 800b474:	495e      	ldr	r1, [pc, #376]	@ (800b5f0 <_strtod_l+0x590>)
 800b476:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b47a:	4652      	mov	r2, sl
 800b47c:	465b      	mov	r3, fp
 800b47e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b482:	f7f5 f8e9 	bl	8000658 <__aeabi_dmul>
 800b486:	4682      	mov	sl, r0
 800b488:	468b      	mov	fp, r1
 800b48a:	f034 040f 	bics.w	r4, r4, #15
 800b48e:	d073      	beq.n	800b578 <_strtod_l+0x518>
 800b490:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b494:	dd48      	ble.n	800b528 <_strtod_l+0x4c8>
 800b496:	2400      	movs	r4, #0
 800b498:	46a0      	mov	r8, r4
 800b49a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b49c:	46a1      	mov	r9, r4
 800b49e:	9a05      	ldr	r2, [sp, #20]
 800b4a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b5f8 <_strtod_l+0x598>
 800b4a4:	2322      	movs	r3, #34	@ 0x22
 800b4a6:	6013      	str	r3, [r2, #0]
 800b4a8:	f04f 0a00 	mov.w	sl, #0
 800b4ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	f43f ae0f 	beq.w	800b0d2 <_strtod_l+0x72>
 800b4b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4b6:	9805      	ldr	r0, [sp, #20]
 800b4b8:	f003 f93e 	bl	800e738 <_Bfree>
 800b4bc:	9805      	ldr	r0, [sp, #20]
 800b4be:	4649      	mov	r1, r9
 800b4c0:	f003 f93a 	bl	800e738 <_Bfree>
 800b4c4:	9805      	ldr	r0, [sp, #20]
 800b4c6:	4641      	mov	r1, r8
 800b4c8:	f003 f936 	bl	800e738 <_Bfree>
 800b4cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b4ce:	9805      	ldr	r0, [sp, #20]
 800b4d0:	f003 f932 	bl	800e738 <_Bfree>
 800b4d4:	9805      	ldr	r0, [sp, #20]
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	f003 f92e 	bl	800e738 <_Bfree>
 800b4dc:	e5f9      	b.n	800b0d2 <_strtod_l+0x72>
 800b4de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	dbbc      	blt.n	800b462 <_strtod_l+0x402>
 800b4e8:	4c41      	ldr	r4, [pc, #260]	@ (800b5f0 <_strtod_l+0x590>)
 800b4ea:	f1c5 050f 	rsb	r5, r5, #15
 800b4ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b4f2:	4652      	mov	r2, sl
 800b4f4:	465b      	mov	r3, fp
 800b4f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4fa:	f7f5 f8ad 	bl	8000658 <__aeabi_dmul>
 800b4fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b500:	1b5d      	subs	r5, r3, r5
 800b502:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b506:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b50a:	e78f      	b.n	800b42c <_strtod_l+0x3cc>
 800b50c:	3316      	adds	r3, #22
 800b50e:	dba8      	blt.n	800b462 <_strtod_l+0x402>
 800b510:	4b37      	ldr	r3, [pc, #220]	@ (800b5f0 <_strtod_l+0x590>)
 800b512:	eba9 0808 	sub.w	r8, r9, r8
 800b516:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b51a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b51e:	4650      	mov	r0, sl
 800b520:	4659      	mov	r1, fp
 800b522:	f7f5 f9c3 	bl	80008ac <__aeabi_ddiv>
 800b526:	e783      	b.n	800b430 <_strtod_l+0x3d0>
 800b528:	4b32      	ldr	r3, [pc, #200]	@ (800b5f4 <_strtod_l+0x594>)
 800b52a:	9308      	str	r3, [sp, #32]
 800b52c:	2300      	movs	r3, #0
 800b52e:	1124      	asrs	r4, r4, #4
 800b530:	4650      	mov	r0, sl
 800b532:	4659      	mov	r1, fp
 800b534:	461e      	mov	r6, r3
 800b536:	2c01      	cmp	r4, #1
 800b538:	dc21      	bgt.n	800b57e <_strtod_l+0x51e>
 800b53a:	b10b      	cbz	r3, 800b540 <_strtod_l+0x4e0>
 800b53c:	4682      	mov	sl, r0
 800b53e:	468b      	mov	fp, r1
 800b540:	492c      	ldr	r1, [pc, #176]	@ (800b5f4 <_strtod_l+0x594>)
 800b542:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b546:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b54a:	4652      	mov	r2, sl
 800b54c:	465b      	mov	r3, fp
 800b54e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b552:	f7f5 f881 	bl	8000658 <__aeabi_dmul>
 800b556:	4b28      	ldr	r3, [pc, #160]	@ (800b5f8 <_strtod_l+0x598>)
 800b558:	460a      	mov	r2, r1
 800b55a:	400b      	ands	r3, r1
 800b55c:	4927      	ldr	r1, [pc, #156]	@ (800b5fc <_strtod_l+0x59c>)
 800b55e:	428b      	cmp	r3, r1
 800b560:	4682      	mov	sl, r0
 800b562:	d898      	bhi.n	800b496 <_strtod_l+0x436>
 800b564:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b568:	428b      	cmp	r3, r1
 800b56a:	bf86      	itte	hi
 800b56c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b600 <_strtod_l+0x5a0>
 800b570:	f04f 3aff 	movhi.w	sl, #4294967295
 800b574:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b578:	2300      	movs	r3, #0
 800b57a:	9308      	str	r3, [sp, #32]
 800b57c:	e07a      	b.n	800b674 <_strtod_l+0x614>
 800b57e:	07e2      	lsls	r2, r4, #31
 800b580:	d505      	bpl.n	800b58e <_strtod_l+0x52e>
 800b582:	9b08      	ldr	r3, [sp, #32]
 800b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b588:	f7f5 f866 	bl	8000658 <__aeabi_dmul>
 800b58c:	2301      	movs	r3, #1
 800b58e:	9a08      	ldr	r2, [sp, #32]
 800b590:	3208      	adds	r2, #8
 800b592:	3601      	adds	r6, #1
 800b594:	1064      	asrs	r4, r4, #1
 800b596:	9208      	str	r2, [sp, #32]
 800b598:	e7cd      	b.n	800b536 <_strtod_l+0x4d6>
 800b59a:	d0ed      	beq.n	800b578 <_strtod_l+0x518>
 800b59c:	4264      	negs	r4, r4
 800b59e:	f014 020f 	ands.w	r2, r4, #15
 800b5a2:	d00a      	beq.n	800b5ba <_strtod_l+0x55a>
 800b5a4:	4b12      	ldr	r3, [pc, #72]	@ (800b5f0 <_strtod_l+0x590>)
 800b5a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5aa:	4650      	mov	r0, sl
 800b5ac:	4659      	mov	r1, fp
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	f7f5 f97b 	bl	80008ac <__aeabi_ddiv>
 800b5b6:	4682      	mov	sl, r0
 800b5b8:	468b      	mov	fp, r1
 800b5ba:	1124      	asrs	r4, r4, #4
 800b5bc:	d0dc      	beq.n	800b578 <_strtod_l+0x518>
 800b5be:	2c1f      	cmp	r4, #31
 800b5c0:	dd20      	ble.n	800b604 <_strtod_l+0x5a4>
 800b5c2:	2400      	movs	r4, #0
 800b5c4:	46a0      	mov	r8, r4
 800b5c6:	940a      	str	r4, [sp, #40]	@ 0x28
 800b5c8:	46a1      	mov	r9, r4
 800b5ca:	9a05      	ldr	r2, [sp, #20]
 800b5cc:	2322      	movs	r3, #34	@ 0x22
 800b5ce:	f04f 0a00 	mov.w	sl, #0
 800b5d2:	f04f 0b00 	mov.w	fp, #0
 800b5d6:	6013      	str	r3, [r2, #0]
 800b5d8:	e768      	b.n	800b4ac <_strtod_l+0x44c>
 800b5da:	bf00      	nop
 800b5dc:	0801000e 	.word	0x0801000e
 800b5e0:	0800feb0 	.word	0x0800feb0
 800b5e4:	08010006 	.word	0x08010006
 800b5e8:	080100f2 	.word	0x080100f2
 800b5ec:	080100ee 	.word	0x080100ee
 800b5f0:	08010258 	.word	0x08010258
 800b5f4:	08010230 	.word	0x08010230
 800b5f8:	7ff00000 	.word	0x7ff00000
 800b5fc:	7ca00000 	.word	0x7ca00000
 800b600:	7fefffff 	.word	0x7fefffff
 800b604:	f014 0310 	ands.w	r3, r4, #16
 800b608:	bf18      	it	ne
 800b60a:	236a      	movne	r3, #106	@ 0x6a
 800b60c:	4ea9      	ldr	r6, [pc, #676]	@ (800b8b4 <_strtod_l+0x854>)
 800b60e:	9308      	str	r3, [sp, #32]
 800b610:	4650      	mov	r0, sl
 800b612:	4659      	mov	r1, fp
 800b614:	2300      	movs	r3, #0
 800b616:	07e2      	lsls	r2, r4, #31
 800b618:	d504      	bpl.n	800b624 <_strtod_l+0x5c4>
 800b61a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b61e:	f7f5 f81b 	bl	8000658 <__aeabi_dmul>
 800b622:	2301      	movs	r3, #1
 800b624:	1064      	asrs	r4, r4, #1
 800b626:	f106 0608 	add.w	r6, r6, #8
 800b62a:	d1f4      	bne.n	800b616 <_strtod_l+0x5b6>
 800b62c:	b10b      	cbz	r3, 800b632 <_strtod_l+0x5d2>
 800b62e:	4682      	mov	sl, r0
 800b630:	468b      	mov	fp, r1
 800b632:	9b08      	ldr	r3, [sp, #32]
 800b634:	b1b3      	cbz	r3, 800b664 <_strtod_l+0x604>
 800b636:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b63a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b63e:	2b00      	cmp	r3, #0
 800b640:	4659      	mov	r1, fp
 800b642:	dd0f      	ble.n	800b664 <_strtod_l+0x604>
 800b644:	2b1f      	cmp	r3, #31
 800b646:	dd55      	ble.n	800b6f4 <_strtod_l+0x694>
 800b648:	2b34      	cmp	r3, #52	@ 0x34
 800b64a:	bfde      	ittt	le
 800b64c:	f04f 33ff 	movle.w	r3, #4294967295
 800b650:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b654:	4093      	lslle	r3, r2
 800b656:	f04f 0a00 	mov.w	sl, #0
 800b65a:	bfcc      	ite	gt
 800b65c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b660:	ea03 0b01 	andle.w	fp, r3, r1
 800b664:	2200      	movs	r2, #0
 800b666:	2300      	movs	r3, #0
 800b668:	4650      	mov	r0, sl
 800b66a:	4659      	mov	r1, fp
 800b66c:	f7f5 fa5c 	bl	8000b28 <__aeabi_dcmpeq>
 800b670:	2800      	cmp	r0, #0
 800b672:	d1a6      	bne.n	800b5c2 <_strtod_l+0x562>
 800b674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b676:	9300      	str	r3, [sp, #0]
 800b678:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b67a:	9805      	ldr	r0, [sp, #20]
 800b67c:	462b      	mov	r3, r5
 800b67e:	463a      	mov	r2, r7
 800b680:	f003 f8c2 	bl	800e808 <__s2b>
 800b684:	900a      	str	r0, [sp, #40]	@ 0x28
 800b686:	2800      	cmp	r0, #0
 800b688:	f43f af05 	beq.w	800b496 <_strtod_l+0x436>
 800b68c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b68e:	2a00      	cmp	r2, #0
 800b690:	eba9 0308 	sub.w	r3, r9, r8
 800b694:	bfa8      	it	ge
 800b696:	2300      	movge	r3, #0
 800b698:	9312      	str	r3, [sp, #72]	@ 0x48
 800b69a:	2400      	movs	r4, #0
 800b69c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b6a0:	9316      	str	r3, [sp, #88]	@ 0x58
 800b6a2:	46a0      	mov	r8, r4
 800b6a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6a6:	9805      	ldr	r0, [sp, #20]
 800b6a8:	6859      	ldr	r1, [r3, #4]
 800b6aa:	f003 f805 	bl	800e6b8 <_Balloc>
 800b6ae:	4681      	mov	r9, r0
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	f43f aef4 	beq.w	800b49e <_strtod_l+0x43e>
 800b6b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6b8:	691a      	ldr	r2, [r3, #16]
 800b6ba:	3202      	adds	r2, #2
 800b6bc:	f103 010c 	add.w	r1, r3, #12
 800b6c0:	0092      	lsls	r2, r2, #2
 800b6c2:	300c      	adds	r0, #12
 800b6c4:	f001 fd23 	bl	800d10e <memcpy>
 800b6c8:	ec4b ab10 	vmov	d0, sl, fp
 800b6cc:	9805      	ldr	r0, [sp, #20]
 800b6ce:	aa1c      	add	r2, sp, #112	@ 0x70
 800b6d0:	a91b      	add	r1, sp, #108	@ 0x6c
 800b6d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b6d6:	f003 fbd3 	bl	800ee80 <__d2b>
 800b6da:	901a      	str	r0, [sp, #104]	@ 0x68
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	f43f aede 	beq.w	800b49e <_strtod_l+0x43e>
 800b6e2:	9805      	ldr	r0, [sp, #20]
 800b6e4:	2101      	movs	r1, #1
 800b6e6:	f003 f925 	bl	800e934 <__i2b>
 800b6ea:	4680      	mov	r8, r0
 800b6ec:	b948      	cbnz	r0, 800b702 <_strtod_l+0x6a2>
 800b6ee:	f04f 0800 	mov.w	r8, #0
 800b6f2:	e6d4      	b.n	800b49e <_strtod_l+0x43e>
 800b6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6fc:	ea03 0a0a 	and.w	sl, r3, sl
 800b700:	e7b0      	b.n	800b664 <_strtod_l+0x604>
 800b702:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b704:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b706:	2d00      	cmp	r5, #0
 800b708:	bfab      	itete	ge
 800b70a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b70c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b70e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b710:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b712:	bfac      	ite	ge
 800b714:	18ef      	addge	r7, r5, r3
 800b716:	1b5e      	sublt	r6, r3, r5
 800b718:	9b08      	ldr	r3, [sp, #32]
 800b71a:	1aed      	subs	r5, r5, r3
 800b71c:	4415      	add	r5, r2
 800b71e:	4b66      	ldr	r3, [pc, #408]	@ (800b8b8 <_strtod_l+0x858>)
 800b720:	3d01      	subs	r5, #1
 800b722:	429d      	cmp	r5, r3
 800b724:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b728:	da50      	bge.n	800b7cc <_strtod_l+0x76c>
 800b72a:	1b5b      	subs	r3, r3, r5
 800b72c:	2b1f      	cmp	r3, #31
 800b72e:	eba2 0203 	sub.w	r2, r2, r3
 800b732:	f04f 0101 	mov.w	r1, #1
 800b736:	dc3d      	bgt.n	800b7b4 <_strtod_l+0x754>
 800b738:	fa01 f303 	lsl.w	r3, r1, r3
 800b73c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b73e:	2300      	movs	r3, #0
 800b740:	9310      	str	r3, [sp, #64]	@ 0x40
 800b742:	18bd      	adds	r5, r7, r2
 800b744:	9b08      	ldr	r3, [sp, #32]
 800b746:	42af      	cmp	r7, r5
 800b748:	4416      	add	r6, r2
 800b74a:	441e      	add	r6, r3
 800b74c:	463b      	mov	r3, r7
 800b74e:	bfa8      	it	ge
 800b750:	462b      	movge	r3, r5
 800b752:	42b3      	cmp	r3, r6
 800b754:	bfa8      	it	ge
 800b756:	4633      	movge	r3, r6
 800b758:	2b00      	cmp	r3, #0
 800b75a:	bfc2      	ittt	gt
 800b75c:	1aed      	subgt	r5, r5, r3
 800b75e:	1af6      	subgt	r6, r6, r3
 800b760:	1aff      	subgt	r7, r7, r3
 800b762:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b764:	2b00      	cmp	r3, #0
 800b766:	dd16      	ble.n	800b796 <_strtod_l+0x736>
 800b768:	4641      	mov	r1, r8
 800b76a:	9805      	ldr	r0, [sp, #20]
 800b76c:	461a      	mov	r2, r3
 800b76e:	f003 f9a1 	bl	800eab4 <__pow5mult>
 800b772:	4680      	mov	r8, r0
 800b774:	2800      	cmp	r0, #0
 800b776:	d0ba      	beq.n	800b6ee <_strtod_l+0x68e>
 800b778:	4601      	mov	r1, r0
 800b77a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b77c:	9805      	ldr	r0, [sp, #20]
 800b77e:	f003 f8ef 	bl	800e960 <__multiply>
 800b782:	900e      	str	r0, [sp, #56]	@ 0x38
 800b784:	2800      	cmp	r0, #0
 800b786:	f43f ae8a 	beq.w	800b49e <_strtod_l+0x43e>
 800b78a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b78c:	9805      	ldr	r0, [sp, #20]
 800b78e:	f002 ffd3 	bl	800e738 <_Bfree>
 800b792:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b794:	931a      	str	r3, [sp, #104]	@ 0x68
 800b796:	2d00      	cmp	r5, #0
 800b798:	dc1d      	bgt.n	800b7d6 <_strtod_l+0x776>
 800b79a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	dd23      	ble.n	800b7e8 <_strtod_l+0x788>
 800b7a0:	4649      	mov	r1, r9
 800b7a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b7a4:	9805      	ldr	r0, [sp, #20]
 800b7a6:	f003 f985 	bl	800eab4 <__pow5mult>
 800b7aa:	4681      	mov	r9, r0
 800b7ac:	b9e0      	cbnz	r0, 800b7e8 <_strtod_l+0x788>
 800b7ae:	f04f 0900 	mov.w	r9, #0
 800b7b2:	e674      	b.n	800b49e <_strtod_l+0x43e>
 800b7b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b7b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b7bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b7c0:	35e2      	adds	r5, #226	@ 0xe2
 800b7c2:	fa01 f305 	lsl.w	r3, r1, r5
 800b7c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b7c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b7ca:	e7ba      	b.n	800b742 <_strtod_l+0x6e2>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b7d4:	e7b5      	b.n	800b742 <_strtod_l+0x6e2>
 800b7d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b7d8:	9805      	ldr	r0, [sp, #20]
 800b7da:	462a      	mov	r2, r5
 800b7dc:	f003 f9c4 	bl	800eb68 <__lshift>
 800b7e0:	901a      	str	r0, [sp, #104]	@ 0x68
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d1d9      	bne.n	800b79a <_strtod_l+0x73a>
 800b7e6:	e65a      	b.n	800b49e <_strtod_l+0x43e>
 800b7e8:	2e00      	cmp	r6, #0
 800b7ea:	dd07      	ble.n	800b7fc <_strtod_l+0x79c>
 800b7ec:	4649      	mov	r1, r9
 800b7ee:	9805      	ldr	r0, [sp, #20]
 800b7f0:	4632      	mov	r2, r6
 800b7f2:	f003 f9b9 	bl	800eb68 <__lshift>
 800b7f6:	4681      	mov	r9, r0
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d0d8      	beq.n	800b7ae <_strtod_l+0x74e>
 800b7fc:	2f00      	cmp	r7, #0
 800b7fe:	dd08      	ble.n	800b812 <_strtod_l+0x7b2>
 800b800:	4641      	mov	r1, r8
 800b802:	9805      	ldr	r0, [sp, #20]
 800b804:	463a      	mov	r2, r7
 800b806:	f003 f9af 	bl	800eb68 <__lshift>
 800b80a:	4680      	mov	r8, r0
 800b80c:	2800      	cmp	r0, #0
 800b80e:	f43f ae46 	beq.w	800b49e <_strtod_l+0x43e>
 800b812:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b814:	9805      	ldr	r0, [sp, #20]
 800b816:	464a      	mov	r2, r9
 800b818:	f003 fa2e 	bl	800ec78 <__mdiff>
 800b81c:	4604      	mov	r4, r0
 800b81e:	2800      	cmp	r0, #0
 800b820:	f43f ae3d 	beq.w	800b49e <_strtod_l+0x43e>
 800b824:	68c3      	ldr	r3, [r0, #12]
 800b826:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b828:	2300      	movs	r3, #0
 800b82a:	60c3      	str	r3, [r0, #12]
 800b82c:	4641      	mov	r1, r8
 800b82e:	f003 fa07 	bl	800ec40 <__mcmp>
 800b832:	2800      	cmp	r0, #0
 800b834:	da46      	bge.n	800b8c4 <_strtod_l+0x864>
 800b836:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b838:	ea53 030a 	orrs.w	r3, r3, sl
 800b83c:	d16c      	bne.n	800b918 <_strtod_l+0x8b8>
 800b83e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b842:	2b00      	cmp	r3, #0
 800b844:	d168      	bne.n	800b918 <_strtod_l+0x8b8>
 800b846:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b84a:	0d1b      	lsrs	r3, r3, #20
 800b84c:	051b      	lsls	r3, r3, #20
 800b84e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b852:	d961      	bls.n	800b918 <_strtod_l+0x8b8>
 800b854:	6963      	ldr	r3, [r4, #20]
 800b856:	b913      	cbnz	r3, 800b85e <_strtod_l+0x7fe>
 800b858:	6923      	ldr	r3, [r4, #16]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	dd5c      	ble.n	800b918 <_strtod_l+0x8b8>
 800b85e:	4621      	mov	r1, r4
 800b860:	2201      	movs	r2, #1
 800b862:	9805      	ldr	r0, [sp, #20]
 800b864:	f003 f980 	bl	800eb68 <__lshift>
 800b868:	4641      	mov	r1, r8
 800b86a:	4604      	mov	r4, r0
 800b86c:	f003 f9e8 	bl	800ec40 <__mcmp>
 800b870:	2800      	cmp	r0, #0
 800b872:	dd51      	ble.n	800b918 <_strtod_l+0x8b8>
 800b874:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b878:	9a08      	ldr	r2, [sp, #32]
 800b87a:	0d1b      	lsrs	r3, r3, #20
 800b87c:	051b      	lsls	r3, r3, #20
 800b87e:	2a00      	cmp	r2, #0
 800b880:	d06b      	beq.n	800b95a <_strtod_l+0x8fa>
 800b882:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b886:	d868      	bhi.n	800b95a <_strtod_l+0x8fa>
 800b888:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b88c:	f67f ae9d 	bls.w	800b5ca <_strtod_l+0x56a>
 800b890:	4b0a      	ldr	r3, [pc, #40]	@ (800b8bc <_strtod_l+0x85c>)
 800b892:	4650      	mov	r0, sl
 800b894:	4659      	mov	r1, fp
 800b896:	2200      	movs	r2, #0
 800b898:	f7f4 fede 	bl	8000658 <__aeabi_dmul>
 800b89c:	4b08      	ldr	r3, [pc, #32]	@ (800b8c0 <_strtod_l+0x860>)
 800b89e:	400b      	ands	r3, r1
 800b8a0:	4682      	mov	sl, r0
 800b8a2:	468b      	mov	fp, r1
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	f47f ae05 	bne.w	800b4b4 <_strtod_l+0x454>
 800b8aa:	9a05      	ldr	r2, [sp, #20]
 800b8ac:	2322      	movs	r3, #34	@ 0x22
 800b8ae:	6013      	str	r3, [r2, #0]
 800b8b0:	e600      	b.n	800b4b4 <_strtod_l+0x454>
 800b8b2:	bf00      	nop
 800b8b4:	0800fed8 	.word	0x0800fed8
 800b8b8:	fffffc02 	.word	0xfffffc02
 800b8bc:	39500000 	.word	0x39500000
 800b8c0:	7ff00000 	.word	0x7ff00000
 800b8c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b8c8:	d165      	bne.n	800b996 <_strtod_l+0x936>
 800b8ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b8cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8d0:	b35a      	cbz	r2, 800b92a <_strtod_l+0x8ca>
 800b8d2:	4a9f      	ldr	r2, [pc, #636]	@ (800bb50 <_strtod_l+0xaf0>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d12b      	bne.n	800b930 <_strtod_l+0x8d0>
 800b8d8:	9b08      	ldr	r3, [sp, #32]
 800b8da:	4651      	mov	r1, sl
 800b8dc:	b303      	cbz	r3, 800b920 <_strtod_l+0x8c0>
 800b8de:	4b9d      	ldr	r3, [pc, #628]	@ (800bb54 <_strtod_l+0xaf4>)
 800b8e0:	465a      	mov	r2, fp
 800b8e2:	4013      	ands	r3, r2
 800b8e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b8e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ec:	d81b      	bhi.n	800b926 <_strtod_l+0x8c6>
 800b8ee:	0d1b      	lsrs	r3, r3, #20
 800b8f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f8:	4299      	cmp	r1, r3
 800b8fa:	d119      	bne.n	800b930 <_strtod_l+0x8d0>
 800b8fc:	4b96      	ldr	r3, [pc, #600]	@ (800bb58 <_strtod_l+0xaf8>)
 800b8fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b900:	429a      	cmp	r2, r3
 800b902:	d102      	bne.n	800b90a <_strtod_l+0x8aa>
 800b904:	3101      	adds	r1, #1
 800b906:	f43f adca 	beq.w	800b49e <_strtod_l+0x43e>
 800b90a:	4b92      	ldr	r3, [pc, #584]	@ (800bb54 <_strtod_l+0xaf4>)
 800b90c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b90e:	401a      	ands	r2, r3
 800b910:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b914:	f04f 0a00 	mov.w	sl, #0
 800b918:	9b08      	ldr	r3, [sp, #32]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1b8      	bne.n	800b890 <_strtod_l+0x830>
 800b91e:	e5c9      	b.n	800b4b4 <_strtod_l+0x454>
 800b920:	f04f 33ff 	mov.w	r3, #4294967295
 800b924:	e7e8      	b.n	800b8f8 <_strtod_l+0x898>
 800b926:	4613      	mov	r3, r2
 800b928:	e7e6      	b.n	800b8f8 <_strtod_l+0x898>
 800b92a:	ea53 030a 	orrs.w	r3, r3, sl
 800b92e:	d0a1      	beq.n	800b874 <_strtod_l+0x814>
 800b930:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b932:	b1db      	cbz	r3, 800b96c <_strtod_l+0x90c>
 800b934:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b936:	4213      	tst	r3, r2
 800b938:	d0ee      	beq.n	800b918 <_strtod_l+0x8b8>
 800b93a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b93c:	9a08      	ldr	r2, [sp, #32]
 800b93e:	4650      	mov	r0, sl
 800b940:	4659      	mov	r1, fp
 800b942:	b1bb      	cbz	r3, 800b974 <_strtod_l+0x914>
 800b944:	f7ff fb6c 	bl	800b020 <sulp>
 800b948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b94c:	ec53 2b10 	vmov	r2, r3, d0
 800b950:	f7f4 fccc 	bl	80002ec <__adddf3>
 800b954:	4682      	mov	sl, r0
 800b956:	468b      	mov	fp, r1
 800b958:	e7de      	b.n	800b918 <_strtod_l+0x8b8>
 800b95a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b95e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b962:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b966:	f04f 3aff 	mov.w	sl, #4294967295
 800b96a:	e7d5      	b.n	800b918 <_strtod_l+0x8b8>
 800b96c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b96e:	ea13 0f0a 	tst.w	r3, sl
 800b972:	e7e1      	b.n	800b938 <_strtod_l+0x8d8>
 800b974:	f7ff fb54 	bl	800b020 <sulp>
 800b978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b97c:	ec53 2b10 	vmov	r2, r3, d0
 800b980:	f7f4 fcb2 	bl	80002e8 <__aeabi_dsub>
 800b984:	2200      	movs	r2, #0
 800b986:	2300      	movs	r3, #0
 800b988:	4682      	mov	sl, r0
 800b98a:	468b      	mov	fp, r1
 800b98c:	f7f5 f8cc 	bl	8000b28 <__aeabi_dcmpeq>
 800b990:	2800      	cmp	r0, #0
 800b992:	d0c1      	beq.n	800b918 <_strtod_l+0x8b8>
 800b994:	e619      	b.n	800b5ca <_strtod_l+0x56a>
 800b996:	4641      	mov	r1, r8
 800b998:	4620      	mov	r0, r4
 800b99a:	f003 fac9 	bl	800ef30 <__ratio>
 800b99e:	ec57 6b10 	vmov	r6, r7, d0
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	4639      	mov	r1, r7
 800b9ac:	f7f5 f8d0 	bl	8000b50 <__aeabi_dcmple>
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d06f      	beq.n	800ba94 <_strtod_l+0xa34>
 800b9b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d17a      	bne.n	800bab0 <_strtod_l+0xa50>
 800b9ba:	f1ba 0f00 	cmp.w	sl, #0
 800b9be:	d158      	bne.n	800ba72 <_strtod_l+0xa12>
 800b9c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d15a      	bne.n	800ba80 <_strtod_l+0xa20>
 800b9ca:	4b64      	ldr	r3, [pc, #400]	@ (800bb5c <_strtod_l+0xafc>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	4639      	mov	r1, r7
 800b9d2:	f7f5 f8b3 	bl	8000b3c <__aeabi_dcmplt>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d159      	bne.n	800ba8e <_strtod_l+0xa2e>
 800b9da:	4630      	mov	r0, r6
 800b9dc:	4639      	mov	r1, r7
 800b9de:	4b60      	ldr	r3, [pc, #384]	@ (800bb60 <_strtod_l+0xb00>)
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f7f4 fe39 	bl	8000658 <__aeabi_dmul>
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	460f      	mov	r7, r1
 800b9ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b9ee:	9606      	str	r6, [sp, #24]
 800b9f0:	9307      	str	r3, [sp, #28]
 800b9f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b9f6:	4d57      	ldr	r5, [pc, #348]	@ (800bb54 <_strtod_l+0xaf4>)
 800b9f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b9fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9fe:	401d      	ands	r5, r3
 800ba00:	4b58      	ldr	r3, [pc, #352]	@ (800bb64 <_strtod_l+0xb04>)
 800ba02:	429d      	cmp	r5, r3
 800ba04:	f040 80b2 	bne.w	800bb6c <_strtod_l+0xb0c>
 800ba08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba0a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ba0e:	ec4b ab10 	vmov	d0, sl, fp
 800ba12:	f003 f9c5 	bl	800eda0 <__ulp>
 800ba16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba1a:	ec51 0b10 	vmov	r0, r1, d0
 800ba1e:	f7f4 fe1b 	bl	8000658 <__aeabi_dmul>
 800ba22:	4652      	mov	r2, sl
 800ba24:	465b      	mov	r3, fp
 800ba26:	f7f4 fc61 	bl	80002ec <__adddf3>
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	4949      	ldr	r1, [pc, #292]	@ (800bb54 <_strtod_l+0xaf4>)
 800ba2e:	4a4e      	ldr	r2, [pc, #312]	@ (800bb68 <_strtod_l+0xb08>)
 800ba30:	4019      	ands	r1, r3
 800ba32:	4291      	cmp	r1, r2
 800ba34:	4682      	mov	sl, r0
 800ba36:	d942      	bls.n	800babe <_strtod_l+0xa5e>
 800ba38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ba3a:	4b47      	ldr	r3, [pc, #284]	@ (800bb58 <_strtod_l+0xaf8>)
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d103      	bne.n	800ba48 <_strtod_l+0x9e8>
 800ba40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba42:	3301      	adds	r3, #1
 800ba44:	f43f ad2b 	beq.w	800b49e <_strtod_l+0x43e>
 800ba48:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bb58 <_strtod_l+0xaf8>
 800ba4c:	f04f 3aff 	mov.w	sl, #4294967295
 800ba50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba52:	9805      	ldr	r0, [sp, #20]
 800ba54:	f002 fe70 	bl	800e738 <_Bfree>
 800ba58:	9805      	ldr	r0, [sp, #20]
 800ba5a:	4649      	mov	r1, r9
 800ba5c:	f002 fe6c 	bl	800e738 <_Bfree>
 800ba60:	9805      	ldr	r0, [sp, #20]
 800ba62:	4641      	mov	r1, r8
 800ba64:	f002 fe68 	bl	800e738 <_Bfree>
 800ba68:	9805      	ldr	r0, [sp, #20]
 800ba6a:	4621      	mov	r1, r4
 800ba6c:	f002 fe64 	bl	800e738 <_Bfree>
 800ba70:	e618      	b.n	800b6a4 <_strtod_l+0x644>
 800ba72:	f1ba 0f01 	cmp.w	sl, #1
 800ba76:	d103      	bne.n	800ba80 <_strtod_l+0xa20>
 800ba78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	f43f ada5 	beq.w	800b5ca <_strtod_l+0x56a>
 800ba80:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bb30 <_strtod_l+0xad0>
 800ba84:	4f35      	ldr	r7, [pc, #212]	@ (800bb5c <_strtod_l+0xafc>)
 800ba86:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ba8a:	2600      	movs	r6, #0
 800ba8c:	e7b1      	b.n	800b9f2 <_strtod_l+0x992>
 800ba8e:	4f34      	ldr	r7, [pc, #208]	@ (800bb60 <_strtod_l+0xb00>)
 800ba90:	2600      	movs	r6, #0
 800ba92:	e7aa      	b.n	800b9ea <_strtod_l+0x98a>
 800ba94:	4b32      	ldr	r3, [pc, #200]	@ (800bb60 <_strtod_l+0xb00>)
 800ba96:	4630      	mov	r0, r6
 800ba98:	4639      	mov	r1, r7
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f7f4 fddc 	bl	8000658 <__aeabi_dmul>
 800baa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800baa2:	4606      	mov	r6, r0
 800baa4:	460f      	mov	r7, r1
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d09f      	beq.n	800b9ea <_strtod_l+0x98a>
 800baaa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800baae:	e7a0      	b.n	800b9f2 <_strtod_l+0x992>
 800bab0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bb38 <_strtod_l+0xad8>
 800bab4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bab8:	ec57 6b17 	vmov	r6, r7, d7
 800babc:	e799      	b.n	800b9f2 <_strtod_l+0x992>
 800babe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bac2:	9b08      	ldr	r3, [sp, #32]
 800bac4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1c1      	bne.n	800ba50 <_strtod_l+0x9f0>
 800bacc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bad0:	0d1b      	lsrs	r3, r3, #20
 800bad2:	051b      	lsls	r3, r3, #20
 800bad4:	429d      	cmp	r5, r3
 800bad6:	d1bb      	bne.n	800ba50 <_strtod_l+0x9f0>
 800bad8:	4630      	mov	r0, r6
 800bada:	4639      	mov	r1, r7
 800badc:	f7f5 f91c 	bl	8000d18 <__aeabi_d2lz>
 800bae0:	f7f4 fd8c 	bl	80005fc <__aeabi_l2d>
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	4630      	mov	r0, r6
 800baea:	4639      	mov	r1, r7
 800baec:	f7f4 fbfc 	bl	80002e8 <__aeabi_dsub>
 800baf0:	460b      	mov	r3, r1
 800baf2:	4602      	mov	r2, r0
 800baf4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800baf8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bafc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bafe:	ea46 060a 	orr.w	r6, r6, sl
 800bb02:	431e      	orrs	r6, r3
 800bb04:	d06f      	beq.n	800bbe6 <_strtod_l+0xb86>
 800bb06:	a30e      	add	r3, pc, #56	@ (adr r3, 800bb40 <_strtod_l+0xae0>)
 800bb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0c:	f7f5 f816 	bl	8000b3c <__aeabi_dcmplt>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	f47f accf 	bne.w	800b4b4 <_strtod_l+0x454>
 800bb16:	a30c      	add	r3, pc, #48	@ (adr r3, 800bb48 <_strtod_l+0xae8>)
 800bb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb20:	f7f5 f82a 	bl	8000b78 <__aeabi_dcmpgt>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d093      	beq.n	800ba50 <_strtod_l+0x9f0>
 800bb28:	e4c4      	b.n	800b4b4 <_strtod_l+0x454>
 800bb2a:	bf00      	nop
 800bb2c:	f3af 8000 	nop.w
 800bb30:	00000000 	.word	0x00000000
 800bb34:	bff00000 	.word	0xbff00000
 800bb38:	00000000 	.word	0x00000000
 800bb3c:	3ff00000 	.word	0x3ff00000
 800bb40:	94a03595 	.word	0x94a03595
 800bb44:	3fdfffff 	.word	0x3fdfffff
 800bb48:	35afe535 	.word	0x35afe535
 800bb4c:	3fe00000 	.word	0x3fe00000
 800bb50:	000fffff 	.word	0x000fffff
 800bb54:	7ff00000 	.word	0x7ff00000
 800bb58:	7fefffff 	.word	0x7fefffff
 800bb5c:	3ff00000 	.word	0x3ff00000
 800bb60:	3fe00000 	.word	0x3fe00000
 800bb64:	7fe00000 	.word	0x7fe00000
 800bb68:	7c9fffff 	.word	0x7c9fffff
 800bb6c:	9b08      	ldr	r3, [sp, #32]
 800bb6e:	b323      	cbz	r3, 800bbba <_strtod_l+0xb5a>
 800bb70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bb74:	d821      	bhi.n	800bbba <_strtod_l+0xb5a>
 800bb76:	a328      	add	r3, pc, #160	@ (adr r3, 800bc18 <_strtod_l+0xbb8>)
 800bb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7c:	4630      	mov	r0, r6
 800bb7e:	4639      	mov	r1, r7
 800bb80:	f7f4 ffe6 	bl	8000b50 <__aeabi_dcmple>
 800bb84:	b1a0      	cbz	r0, 800bbb0 <_strtod_l+0xb50>
 800bb86:	4639      	mov	r1, r7
 800bb88:	4630      	mov	r0, r6
 800bb8a:	f7f5 f83d 	bl	8000c08 <__aeabi_d2uiz>
 800bb8e:	2801      	cmp	r0, #1
 800bb90:	bf38      	it	cc
 800bb92:	2001      	movcc	r0, #1
 800bb94:	f7f4 fce6 	bl	8000564 <__aeabi_ui2d>
 800bb98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	460f      	mov	r7, r1
 800bb9e:	b9fb      	cbnz	r3, 800bbe0 <_strtod_l+0xb80>
 800bba0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bba4:	9014      	str	r0, [sp, #80]	@ 0x50
 800bba6:	9315      	str	r3, [sp, #84]	@ 0x54
 800bba8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bbac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bbb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bbb2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bbb6:	1b5b      	subs	r3, r3, r5
 800bbb8:	9311      	str	r3, [sp, #68]	@ 0x44
 800bbba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bbbe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bbc2:	f003 f8ed 	bl	800eda0 <__ulp>
 800bbc6:	4650      	mov	r0, sl
 800bbc8:	ec53 2b10 	vmov	r2, r3, d0
 800bbcc:	4659      	mov	r1, fp
 800bbce:	f7f4 fd43 	bl	8000658 <__aeabi_dmul>
 800bbd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bbd6:	f7f4 fb89 	bl	80002ec <__adddf3>
 800bbda:	4682      	mov	sl, r0
 800bbdc:	468b      	mov	fp, r1
 800bbde:	e770      	b.n	800bac2 <_strtod_l+0xa62>
 800bbe0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bbe4:	e7e0      	b.n	800bba8 <_strtod_l+0xb48>
 800bbe6:	a30e      	add	r3, pc, #56	@ (adr r3, 800bc20 <_strtod_l+0xbc0>)
 800bbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbec:	f7f4 ffa6 	bl	8000b3c <__aeabi_dcmplt>
 800bbf0:	e798      	b.n	800bb24 <_strtod_l+0xac4>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bbf6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bbf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bbfa:	6013      	str	r3, [r2, #0]
 800bbfc:	f7ff ba6d 	b.w	800b0da <_strtod_l+0x7a>
 800bc00:	2a65      	cmp	r2, #101	@ 0x65
 800bc02:	f43f ab66 	beq.w	800b2d2 <_strtod_l+0x272>
 800bc06:	2a45      	cmp	r2, #69	@ 0x45
 800bc08:	f43f ab63 	beq.w	800b2d2 <_strtod_l+0x272>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	f7ff bb9e 	b.w	800b34e <_strtod_l+0x2ee>
 800bc12:	bf00      	nop
 800bc14:	f3af 8000 	nop.w
 800bc18:	ffc00000 	.word	0xffc00000
 800bc1c:	41dfffff 	.word	0x41dfffff
 800bc20:	94a03595 	.word	0x94a03595
 800bc24:	3fcfffff 	.word	0x3fcfffff

0800bc28 <_strtod_r>:
 800bc28:	4b01      	ldr	r3, [pc, #4]	@ (800bc30 <_strtod_r+0x8>)
 800bc2a:	f7ff ba19 	b.w	800b060 <_strtod_l>
 800bc2e:	bf00      	nop
 800bc30:	200000e0 	.word	0x200000e0

0800bc34 <strtof>:
 800bc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc38:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800bcf8 <strtof+0xc4>
 800bc3c:	4b29      	ldr	r3, [pc, #164]	@ (800bce4 <strtof+0xb0>)
 800bc3e:	460a      	mov	r2, r1
 800bc40:	ed2d 8b02 	vpush	{d8}
 800bc44:	4601      	mov	r1, r0
 800bc46:	f8d8 0000 	ldr.w	r0, [r8]
 800bc4a:	f7ff fa09 	bl	800b060 <_strtod_l>
 800bc4e:	ec55 4b10 	vmov	r4, r5, d0
 800bc52:	4622      	mov	r2, r4
 800bc54:	462b      	mov	r3, r5
 800bc56:	4620      	mov	r0, r4
 800bc58:	4629      	mov	r1, r5
 800bc5a:	f7f4 ff97 	bl	8000b8c <__aeabi_dcmpun>
 800bc5e:	b190      	cbz	r0, 800bc86 <strtof+0x52>
 800bc60:	2d00      	cmp	r5, #0
 800bc62:	4821      	ldr	r0, [pc, #132]	@ (800bce8 <strtof+0xb4>)
 800bc64:	da09      	bge.n	800bc7a <strtof+0x46>
 800bc66:	f001 fa6b 	bl	800d140 <nanf>
 800bc6a:	eeb1 8a40 	vneg.f32	s16, s0
 800bc6e:	eeb0 0a48 	vmov.f32	s0, s16
 800bc72:	ecbd 8b02 	vpop	{d8}
 800bc76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc7a:	ecbd 8b02 	vpop	{d8}
 800bc7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc82:	f001 ba5d 	b.w	800d140 <nanf>
 800bc86:	4620      	mov	r0, r4
 800bc88:	4629      	mov	r1, r5
 800bc8a:	f7f4 ffdd 	bl	8000c48 <__aeabi_d2f>
 800bc8e:	ee08 0a10 	vmov	s16, r0
 800bc92:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800bcec <strtof+0xb8>
 800bc96:	eeb0 7ac8 	vabs.f32	s14, s16
 800bc9a:	eeb4 7a67 	vcmp.f32	s14, s15
 800bc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca2:	dd11      	ble.n	800bcc8 <strtof+0x94>
 800bca4:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800bca8:	4b11      	ldr	r3, [pc, #68]	@ (800bcf0 <strtof+0xbc>)
 800bcaa:	f04f 32ff 	mov.w	r2, #4294967295
 800bcae:	4620      	mov	r0, r4
 800bcb0:	4639      	mov	r1, r7
 800bcb2:	f7f4 ff6b 	bl	8000b8c <__aeabi_dcmpun>
 800bcb6:	b980      	cbnz	r0, 800bcda <strtof+0xa6>
 800bcb8:	4b0d      	ldr	r3, [pc, #52]	@ (800bcf0 <strtof+0xbc>)
 800bcba:	f04f 32ff 	mov.w	r2, #4294967295
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	4639      	mov	r1, r7
 800bcc2:	f7f4 ff45 	bl	8000b50 <__aeabi_dcmple>
 800bcc6:	b940      	cbnz	r0, 800bcda <strtof+0xa6>
 800bcc8:	ee18 3a10 	vmov	r3, s16
 800bccc:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800bcd0:	d1cd      	bne.n	800bc6e <strtof+0x3a>
 800bcd2:	4b08      	ldr	r3, [pc, #32]	@ (800bcf4 <strtof+0xc0>)
 800bcd4:	402b      	ands	r3, r5
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d0c9      	beq.n	800bc6e <strtof+0x3a>
 800bcda:	f8d8 3000 	ldr.w	r3, [r8]
 800bcde:	2222      	movs	r2, #34	@ 0x22
 800bce0:	601a      	str	r2, [r3, #0]
 800bce2:	e7c4      	b.n	800bc6e <strtof+0x3a>
 800bce4:	200000e0 	.word	0x200000e0
 800bce8:	080100ee 	.word	0x080100ee
 800bcec:	7f7fffff 	.word	0x7f7fffff
 800bcf0:	7fefffff 	.word	0x7fefffff
 800bcf4:	7ff00000 	.word	0x7ff00000
 800bcf8:	2000024c 	.word	0x2000024c

0800bcfc <_strtol_l.constprop.0>:
 800bcfc:	2b24      	cmp	r3, #36	@ 0x24
 800bcfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd02:	4686      	mov	lr, r0
 800bd04:	4690      	mov	r8, r2
 800bd06:	d801      	bhi.n	800bd0c <_strtol_l.constprop.0+0x10>
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d106      	bne.n	800bd1a <_strtol_l.constprop.0+0x1e>
 800bd0c:	f001 f9d2 	bl	800d0b4 <__errno>
 800bd10:	2316      	movs	r3, #22
 800bd12:	6003      	str	r3, [r0, #0]
 800bd14:	2000      	movs	r0, #0
 800bd16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd1a:	4834      	ldr	r0, [pc, #208]	@ (800bdec <_strtol_l.constprop.0+0xf0>)
 800bd1c:	460d      	mov	r5, r1
 800bd1e:	462a      	mov	r2, r5
 800bd20:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd24:	5d06      	ldrb	r6, [r0, r4]
 800bd26:	f016 0608 	ands.w	r6, r6, #8
 800bd2a:	d1f8      	bne.n	800bd1e <_strtol_l.constprop.0+0x22>
 800bd2c:	2c2d      	cmp	r4, #45	@ 0x2d
 800bd2e:	d12d      	bne.n	800bd8c <_strtol_l.constprop.0+0x90>
 800bd30:	782c      	ldrb	r4, [r5, #0]
 800bd32:	2601      	movs	r6, #1
 800bd34:	1c95      	adds	r5, r2, #2
 800bd36:	f033 0210 	bics.w	r2, r3, #16
 800bd3a:	d109      	bne.n	800bd50 <_strtol_l.constprop.0+0x54>
 800bd3c:	2c30      	cmp	r4, #48	@ 0x30
 800bd3e:	d12a      	bne.n	800bd96 <_strtol_l.constprop.0+0x9a>
 800bd40:	782a      	ldrb	r2, [r5, #0]
 800bd42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bd46:	2a58      	cmp	r2, #88	@ 0x58
 800bd48:	d125      	bne.n	800bd96 <_strtol_l.constprop.0+0x9a>
 800bd4a:	786c      	ldrb	r4, [r5, #1]
 800bd4c:	2310      	movs	r3, #16
 800bd4e:	3502      	adds	r5, #2
 800bd50:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bd54:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bd58:	2200      	movs	r2, #0
 800bd5a:	fbbc f9f3 	udiv	r9, ip, r3
 800bd5e:	4610      	mov	r0, r2
 800bd60:	fb03 ca19 	mls	sl, r3, r9, ip
 800bd64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bd68:	2f09      	cmp	r7, #9
 800bd6a:	d81b      	bhi.n	800bda4 <_strtol_l.constprop.0+0xa8>
 800bd6c:	463c      	mov	r4, r7
 800bd6e:	42a3      	cmp	r3, r4
 800bd70:	dd27      	ble.n	800bdc2 <_strtol_l.constprop.0+0xc6>
 800bd72:	1c57      	adds	r7, r2, #1
 800bd74:	d007      	beq.n	800bd86 <_strtol_l.constprop.0+0x8a>
 800bd76:	4581      	cmp	r9, r0
 800bd78:	d320      	bcc.n	800bdbc <_strtol_l.constprop.0+0xc0>
 800bd7a:	d101      	bne.n	800bd80 <_strtol_l.constprop.0+0x84>
 800bd7c:	45a2      	cmp	sl, r4
 800bd7e:	db1d      	blt.n	800bdbc <_strtol_l.constprop.0+0xc0>
 800bd80:	fb00 4003 	mla	r0, r0, r3, r4
 800bd84:	2201      	movs	r2, #1
 800bd86:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd8a:	e7eb      	b.n	800bd64 <_strtol_l.constprop.0+0x68>
 800bd8c:	2c2b      	cmp	r4, #43	@ 0x2b
 800bd8e:	bf04      	itt	eq
 800bd90:	782c      	ldrbeq	r4, [r5, #0]
 800bd92:	1c95      	addeq	r5, r2, #2
 800bd94:	e7cf      	b.n	800bd36 <_strtol_l.constprop.0+0x3a>
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1da      	bne.n	800bd50 <_strtol_l.constprop.0+0x54>
 800bd9a:	2c30      	cmp	r4, #48	@ 0x30
 800bd9c:	bf0c      	ite	eq
 800bd9e:	2308      	moveq	r3, #8
 800bda0:	230a      	movne	r3, #10
 800bda2:	e7d5      	b.n	800bd50 <_strtol_l.constprop.0+0x54>
 800bda4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bda8:	2f19      	cmp	r7, #25
 800bdaa:	d801      	bhi.n	800bdb0 <_strtol_l.constprop.0+0xb4>
 800bdac:	3c37      	subs	r4, #55	@ 0x37
 800bdae:	e7de      	b.n	800bd6e <_strtol_l.constprop.0+0x72>
 800bdb0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bdb4:	2f19      	cmp	r7, #25
 800bdb6:	d804      	bhi.n	800bdc2 <_strtol_l.constprop.0+0xc6>
 800bdb8:	3c57      	subs	r4, #87	@ 0x57
 800bdba:	e7d8      	b.n	800bd6e <_strtol_l.constprop.0+0x72>
 800bdbc:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc0:	e7e1      	b.n	800bd86 <_strtol_l.constprop.0+0x8a>
 800bdc2:	1c53      	adds	r3, r2, #1
 800bdc4:	d108      	bne.n	800bdd8 <_strtol_l.constprop.0+0xdc>
 800bdc6:	2322      	movs	r3, #34	@ 0x22
 800bdc8:	f8ce 3000 	str.w	r3, [lr]
 800bdcc:	4660      	mov	r0, ip
 800bdce:	f1b8 0f00 	cmp.w	r8, #0
 800bdd2:	d0a0      	beq.n	800bd16 <_strtol_l.constprop.0+0x1a>
 800bdd4:	1e69      	subs	r1, r5, #1
 800bdd6:	e006      	b.n	800bde6 <_strtol_l.constprop.0+0xea>
 800bdd8:	b106      	cbz	r6, 800bddc <_strtol_l.constprop.0+0xe0>
 800bdda:	4240      	negs	r0, r0
 800bddc:	f1b8 0f00 	cmp.w	r8, #0
 800bde0:	d099      	beq.n	800bd16 <_strtol_l.constprop.0+0x1a>
 800bde2:	2a00      	cmp	r2, #0
 800bde4:	d1f6      	bne.n	800bdd4 <_strtol_l.constprop.0+0xd8>
 800bde6:	f8c8 1000 	str.w	r1, [r8]
 800bdea:	e794      	b.n	800bd16 <_strtol_l.constprop.0+0x1a>
 800bdec:	0800ff01 	.word	0x0800ff01

0800bdf0 <_strtol_r>:
 800bdf0:	f7ff bf84 	b.w	800bcfc <_strtol_l.constprop.0>

0800bdf4 <strtol>:
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	460a      	mov	r2, r1
 800bdf8:	4601      	mov	r1, r0
 800bdfa:	4802      	ldr	r0, [pc, #8]	@ (800be04 <strtol+0x10>)
 800bdfc:	6800      	ldr	r0, [r0, #0]
 800bdfe:	f7ff bf7d 	b.w	800bcfc <_strtol_l.constprop.0>
 800be02:	bf00      	nop
 800be04:	2000024c 	.word	0x2000024c

0800be08 <__cvt>:
 800be08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be0c:	ec57 6b10 	vmov	r6, r7, d0
 800be10:	2f00      	cmp	r7, #0
 800be12:	460c      	mov	r4, r1
 800be14:	4619      	mov	r1, r3
 800be16:	463b      	mov	r3, r7
 800be18:	bfbb      	ittet	lt
 800be1a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800be1e:	461f      	movlt	r7, r3
 800be20:	2300      	movge	r3, #0
 800be22:	232d      	movlt	r3, #45	@ 0x2d
 800be24:	700b      	strb	r3, [r1, #0]
 800be26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be28:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800be2c:	4691      	mov	r9, r2
 800be2e:	f023 0820 	bic.w	r8, r3, #32
 800be32:	bfbc      	itt	lt
 800be34:	4632      	movlt	r2, r6
 800be36:	4616      	movlt	r6, r2
 800be38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800be3c:	d005      	beq.n	800be4a <__cvt+0x42>
 800be3e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800be42:	d100      	bne.n	800be46 <__cvt+0x3e>
 800be44:	3401      	adds	r4, #1
 800be46:	2102      	movs	r1, #2
 800be48:	e000      	b.n	800be4c <__cvt+0x44>
 800be4a:	2103      	movs	r1, #3
 800be4c:	ab03      	add	r3, sp, #12
 800be4e:	9301      	str	r3, [sp, #4]
 800be50:	ab02      	add	r3, sp, #8
 800be52:	9300      	str	r3, [sp, #0]
 800be54:	ec47 6b10 	vmov	d0, r6, r7
 800be58:	4653      	mov	r3, sl
 800be5a:	4622      	mov	r2, r4
 800be5c:	f001 fa1c 	bl	800d298 <_dtoa_r>
 800be60:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800be64:	4605      	mov	r5, r0
 800be66:	d119      	bne.n	800be9c <__cvt+0x94>
 800be68:	f019 0f01 	tst.w	r9, #1
 800be6c:	d00e      	beq.n	800be8c <__cvt+0x84>
 800be6e:	eb00 0904 	add.w	r9, r0, r4
 800be72:	2200      	movs	r2, #0
 800be74:	2300      	movs	r3, #0
 800be76:	4630      	mov	r0, r6
 800be78:	4639      	mov	r1, r7
 800be7a:	f7f4 fe55 	bl	8000b28 <__aeabi_dcmpeq>
 800be7e:	b108      	cbz	r0, 800be84 <__cvt+0x7c>
 800be80:	f8cd 900c 	str.w	r9, [sp, #12]
 800be84:	2230      	movs	r2, #48	@ 0x30
 800be86:	9b03      	ldr	r3, [sp, #12]
 800be88:	454b      	cmp	r3, r9
 800be8a:	d31e      	bcc.n	800beca <__cvt+0xc2>
 800be8c:	9b03      	ldr	r3, [sp, #12]
 800be8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be90:	1b5b      	subs	r3, r3, r5
 800be92:	4628      	mov	r0, r5
 800be94:	6013      	str	r3, [r2, #0]
 800be96:	b004      	add	sp, #16
 800be98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bea0:	eb00 0904 	add.w	r9, r0, r4
 800bea4:	d1e5      	bne.n	800be72 <__cvt+0x6a>
 800bea6:	7803      	ldrb	r3, [r0, #0]
 800bea8:	2b30      	cmp	r3, #48	@ 0x30
 800beaa:	d10a      	bne.n	800bec2 <__cvt+0xba>
 800beac:	2200      	movs	r2, #0
 800beae:	2300      	movs	r3, #0
 800beb0:	4630      	mov	r0, r6
 800beb2:	4639      	mov	r1, r7
 800beb4:	f7f4 fe38 	bl	8000b28 <__aeabi_dcmpeq>
 800beb8:	b918      	cbnz	r0, 800bec2 <__cvt+0xba>
 800beba:	f1c4 0401 	rsb	r4, r4, #1
 800bebe:	f8ca 4000 	str.w	r4, [sl]
 800bec2:	f8da 3000 	ldr.w	r3, [sl]
 800bec6:	4499      	add	r9, r3
 800bec8:	e7d3      	b.n	800be72 <__cvt+0x6a>
 800beca:	1c59      	adds	r1, r3, #1
 800becc:	9103      	str	r1, [sp, #12]
 800bece:	701a      	strb	r2, [r3, #0]
 800bed0:	e7d9      	b.n	800be86 <__cvt+0x7e>

0800bed2 <__exponent>:
 800bed2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bed4:	2900      	cmp	r1, #0
 800bed6:	bfba      	itte	lt
 800bed8:	4249      	neglt	r1, r1
 800beda:	232d      	movlt	r3, #45	@ 0x2d
 800bedc:	232b      	movge	r3, #43	@ 0x2b
 800bede:	2909      	cmp	r1, #9
 800bee0:	7002      	strb	r2, [r0, #0]
 800bee2:	7043      	strb	r3, [r0, #1]
 800bee4:	dd29      	ble.n	800bf3a <__exponent+0x68>
 800bee6:	f10d 0307 	add.w	r3, sp, #7
 800beea:	461d      	mov	r5, r3
 800beec:	270a      	movs	r7, #10
 800beee:	461a      	mov	r2, r3
 800bef0:	fbb1 f6f7 	udiv	r6, r1, r7
 800bef4:	fb07 1416 	mls	r4, r7, r6, r1
 800bef8:	3430      	adds	r4, #48	@ 0x30
 800befa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800befe:	460c      	mov	r4, r1
 800bf00:	2c63      	cmp	r4, #99	@ 0x63
 800bf02:	f103 33ff 	add.w	r3, r3, #4294967295
 800bf06:	4631      	mov	r1, r6
 800bf08:	dcf1      	bgt.n	800beee <__exponent+0x1c>
 800bf0a:	3130      	adds	r1, #48	@ 0x30
 800bf0c:	1e94      	subs	r4, r2, #2
 800bf0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bf12:	1c41      	adds	r1, r0, #1
 800bf14:	4623      	mov	r3, r4
 800bf16:	42ab      	cmp	r3, r5
 800bf18:	d30a      	bcc.n	800bf30 <__exponent+0x5e>
 800bf1a:	f10d 0309 	add.w	r3, sp, #9
 800bf1e:	1a9b      	subs	r3, r3, r2
 800bf20:	42ac      	cmp	r4, r5
 800bf22:	bf88      	it	hi
 800bf24:	2300      	movhi	r3, #0
 800bf26:	3302      	adds	r3, #2
 800bf28:	4403      	add	r3, r0
 800bf2a:	1a18      	subs	r0, r3, r0
 800bf2c:	b003      	add	sp, #12
 800bf2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf30:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bf34:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bf38:	e7ed      	b.n	800bf16 <__exponent+0x44>
 800bf3a:	2330      	movs	r3, #48	@ 0x30
 800bf3c:	3130      	adds	r1, #48	@ 0x30
 800bf3e:	7083      	strb	r3, [r0, #2]
 800bf40:	70c1      	strb	r1, [r0, #3]
 800bf42:	1d03      	adds	r3, r0, #4
 800bf44:	e7f1      	b.n	800bf2a <__exponent+0x58>
	...

0800bf48 <_printf_float>:
 800bf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4c:	b08d      	sub	sp, #52	@ 0x34
 800bf4e:	460c      	mov	r4, r1
 800bf50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bf54:	4616      	mov	r6, r2
 800bf56:	461f      	mov	r7, r3
 800bf58:	4605      	mov	r5, r0
 800bf5a:	f001 f861 	bl	800d020 <_localeconv_r>
 800bf5e:	6803      	ldr	r3, [r0, #0]
 800bf60:	9304      	str	r3, [sp, #16]
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7f4 f9b4 	bl	80002d0 <strlen>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf6c:	f8d8 3000 	ldr.w	r3, [r8]
 800bf70:	9005      	str	r0, [sp, #20]
 800bf72:	3307      	adds	r3, #7
 800bf74:	f023 0307 	bic.w	r3, r3, #7
 800bf78:	f103 0208 	add.w	r2, r3, #8
 800bf7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bf80:	f8d4 b000 	ldr.w	fp, [r4]
 800bf84:	f8c8 2000 	str.w	r2, [r8]
 800bf88:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bf90:	9307      	str	r3, [sp, #28]
 800bf92:	f8cd 8018 	str.w	r8, [sp, #24]
 800bf96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bf9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf9e:	4b9c      	ldr	r3, [pc, #624]	@ (800c210 <_printf_float+0x2c8>)
 800bfa0:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa4:	f7f4 fdf2 	bl	8000b8c <__aeabi_dcmpun>
 800bfa8:	bb70      	cbnz	r0, 800c008 <_printf_float+0xc0>
 800bfaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfae:	4b98      	ldr	r3, [pc, #608]	@ (800c210 <_printf_float+0x2c8>)
 800bfb0:	f04f 32ff 	mov.w	r2, #4294967295
 800bfb4:	f7f4 fdcc 	bl	8000b50 <__aeabi_dcmple>
 800bfb8:	bb30      	cbnz	r0, 800c008 <_printf_float+0xc0>
 800bfba:	2200      	movs	r2, #0
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	4640      	mov	r0, r8
 800bfc0:	4649      	mov	r1, r9
 800bfc2:	f7f4 fdbb 	bl	8000b3c <__aeabi_dcmplt>
 800bfc6:	b110      	cbz	r0, 800bfce <_printf_float+0x86>
 800bfc8:	232d      	movs	r3, #45	@ 0x2d
 800bfca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfce:	4a91      	ldr	r2, [pc, #580]	@ (800c214 <_printf_float+0x2cc>)
 800bfd0:	4b91      	ldr	r3, [pc, #580]	@ (800c218 <_printf_float+0x2d0>)
 800bfd2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bfd6:	bf94      	ite	ls
 800bfd8:	4690      	movls	r8, r2
 800bfda:	4698      	movhi	r8, r3
 800bfdc:	2303      	movs	r3, #3
 800bfde:	6123      	str	r3, [r4, #16]
 800bfe0:	f02b 0304 	bic.w	r3, fp, #4
 800bfe4:	6023      	str	r3, [r4, #0]
 800bfe6:	f04f 0900 	mov.w	r9, #0
 800bfea:	9700      	str	r7, [sp, #0]
 800bfec:	4633      	mov	r3, r6
 800bfee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bff0:	4621      	mov	r1, r4
 800bff2:	4628      	mov	r0, r5
 800bff4:	f000 f9d2 	bl	800c39c <_printf_common>
 800bff8:	3001      	adds	r0, #1
 800bffa:	f040 808d 	bne.w	800c118 <_printf_float+0x1d0>
 800bffe:	f04f 30ff 	mov.w	r0, #4294967295
 800c002:	b00d      	add	sp, #52	@ 0x34
 800c004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c008:	4642      	mov	r2, r8
 800c00a:	464b      	mov	r3, r9
 800c00c:	4640      	mov	r0, r8
 800c00e:	4649      	mov	r1, r9
 800c010:	f7f4 fdbc 	bl	8000b8c <__aeabi_dcmpun>
 800c014:	b140      	cbz	r0, 800c028 <_printf_float+0xe0>
 800c016:	464b      	mov	r3, r9
 800c018:	2b00      	cmp	r3, #0
 800c01a:	bfbc      	itt	lt
 800c01c:	232d      	movlt	r3, #45	@ 0x2d
 800c01e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c022:	4a7e      	ldr	r2, [pc, #504]	@ (800c21c <_printf_float+0x2d4>)
 800c024:	4b7e      	ldr	r3, [pc, #504]	@ (800c220 <_printf_float+0x2d8>)
 800c026:	e7d4      	b.n	800bfd2 <_printf_float+0x8a>
 800c028:	6863      	ldr	r3, [r4, #4]
 800c02a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c02e:	9206      	str	r2, [sp, #24]
 800c030:	1c5a      	adds	r2, r3, #1
 800c032:	d13b      	bne.n	800c0ac <_printf_float+0x164>
 800c034:	2306      	movs	r3, #6
 800c036:	6063      	str	r3, [r4, #4]
 800c038:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c03c:	2300      	movs	r3, #0
 800c03e:	6022      	str	r2, [r4, #0]
 800c040:	9303      	str	r3, [sp, #12]
 800c042:	ab0a      	add	r3, sp, #40	@ 0x28
 800c044:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c048:	ab09      	add	r3, sp, #36	@ 0x24
 800c04a:	9300      	str	r3, [sp, #0]
 800c04c:	6861      	ldr	r1, [r4, #4]
 800c04e:	ec49 8b10 	vmov	d0, r8, r9
 800c052:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c056:	4628      	mov	r0, r5
 800c058:	f7ff fed6 	bl	800be08 <__cvt>
 800c05c:	9b06      	ldr	r3, [sp, #24]
 800c05e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c060:	2b47      	cmp	r3, #71	@ 0x47
 800c062:	4680      	mov	r8, r0
 800c064:	d129      	bne.n	800c0ba <_printf_float+0x172>
 800c066:	1cc8      	adds	r0, r1, #3
 800c068:	db02      	blt.n	800c070 <_printf_float+0x128>
 800c06a:	6863      	ldr	r3, [r4, #4]
 800c06c:	4299      	cmp	r1, r3
 800c06e:	dd41      	ble.n	800c0f4 <_printf_float+0x1ac>
 800c070:	f1aa 0a02 	sub.w	sl, sl, #2
 800c074:	fa5f fa8a 	uxtb.w	sl, sl
 800c078:	3901      	subs	r1, #1
 800c07a:	4652      	mov	r2, sl
 800c07c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c080:	9109      	str	r1, [sp, #36]	@ 0x24
 800c082:	f7ff ff26 	bl	800bed2 <__exponent>
 800c086:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c088:	1813      	adds	r3, r2, r0
 800c08a:	2a01      	cmp	r2, #1
 800c08c:	4681      	mov	r9, r0
 800c08e:	6123      	str	r3, [r4, #16]
 800c090:	dc02      	bgt.n	800c098 <_printf_float+0x150>
 800c092:	6822      	ldr	r2, [r4, #0]
 800c094:	07d2      	lsls	r2, r2, #31
 800c096:	d501      	bpl.n	800c09c <_printf_float+0x154>
 800c098:	3301      	adds	r3, #1
 800c09a:	6123      	str	r3, [r4, #16]
 800c09c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d0a2      	beq.n	800bfea <_printf_float+0xa2>
 800c0a4:	232d      	movs	r3, #45	@ 0x2d
 800c0a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0aa:	e79e      	b.n	800bfea <_printf_float+0xa2>
 800c0ac:	9a06      	ldr	r2, [sp, #24]
 800c0ae:	2a47      	cmp	r2, #71	@ 0x47
 800c0b0:	d1c2      	bne.n	800c038 <_printf_float+0xf0>
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1c0      	bne.n	800c038 <_printf_float+0xf0>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e7bd      	b.n	800c036 <_printf_float+0xee>
 800c0ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c0be:	d9db      	bls.n	800c078 <_printf_float+0x130>
 800c0c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c0c4:	d118      	bne.n	800c0f8 <_printf_float+0x1b0>
 800c0c6:	2900      	cmp	r1, #0
 800c0c8:	6863      	ldr	r3, [r4, #4]
 800c0ca:	dd0b      	ble.n	800c0e4 <_printf_float+0x19c>
 800c0cc:	6121      	str	r1, [r4, #16]
 800c0ce:	b913      	cbnz	r3, 800c0d6 <_printf_float+0x18e>
 800c0d0:	6822      	ldr	r2, [r4, #0]
 800c0d2:	07d0      	lsls	r0, r2, #31
 800c0d4:	d502      	bpl.n	800c0dc <_printf_float+0x194>
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	440b      	add	r3, r1
 800c0da:	6123      	str	r3, [r4, #16]
 800c0dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c0de:	f04f 0900 	mov.w	r9, #0
 800c0e2:	e7db      	b.n	800c09c <_printf_float+0x154>
 800c0e4:	b913      	cbnz	r3, 800c0ec <_printf_float+0x1a4>
 800c0e6:	6822      	ldr	r2, [r4, #0]
 800c0e8:	07d2      	lsls	r2, r2, #31
 800c0ea:	d501      	bpl.n	800c0f0 <_printf_float+0x1a8>
 800c0ec:	3302      	adds	r3, #2
 800c0ee:	e7f4      	b.n	800c0da <_printf_float+0x192>
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	e7f2      	b.n	800c0da <_printf_float+0x192>
 800c0f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c0f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0fa:	4299      	cmp	r1, r3
 800c0fc:	db05      	blt.n	800c10a <_printf_float+0x1c2>
 800c0fe:	6823      	ldr	r3, [r4, #0]
 800c100:	6121      	str	r1, [r4, #16]
 800c102:	07d8      	lsls	r0, r3, #31
 800c104:	d5ea      	bpl.n	800c0dc <_printf_float+0x194>
 800c106:	1c4b      	adds	r3, r1, #1
 800c108:	e7e7      	b.n	800c0da <_printf_float+0x192>
 800c10a:	2900      	cmp	r1, #0
 800c10c:	bfd4      	ite	le
 800c10e:	f1c1 0202 	rsble	r2, r1, #2
 800c112:	2201      	movgt	r2, #1
 800c114:	4413      	add	r3, r2
 800c116:	e7e0      	b.n	800c0da <_printf_float+0x192>
 800c118:	6823      	ldr	r3, [r4, #0]
 800c11a:	055a      	lsls	r2, r3, #21
 800c11c:	d407      	bmi.n	800c12e <_printf_float+0x1e6>
 800c11e:	6923      	ldr	r3, [r4, #16]
 800c120:	4642      	mov	r2, r8
 800c122:	4631      	mov	r1, r6
 800c124:	4628      	mov	r0, r5
 800c126:	47b8      	blx	r7
 800c128:	3001      	adds	r0, #1
 800c12a:	d12b      	bne.n	800c184 <_printf_float+0x23c>
 800c12c:	e767      	b.n	800bffe <_printf_float+0xb6>
 800c12e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c132:	f240 80dd 	bls.w	800c2f0 <_printf_float+0x3a8>
 800c136:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c13a:	2200      	movs	r2, #0
 800c13c:	2300      	movs	r3, #0
 800c13e:	f7f4 fcf3 	bl	8000b28 <__aeabi_dcmpeq>
 800c142:	2800      	cmp	r0, #0
 800c144:	d033      	beq.n	800c1ae <_printf_float+0x266>
 800c146:	4a37      	ldr	r2, [pc, #220]	@ (800c224 <_printf_float+0x2dc>)
 800c148:	2301      	movs	r3, #1
 800c14a:	4631      	mov	r1, r6
 800c14c:	4628      	mov	r0, r5
 800c14e:	47b8      	blx	r7
 800c150:	3001      	adds	r0, #1
 800c152:	f43f af54 	beq.w	800bffe <_printf_float+0xb6>
 800c156:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c15a:	4543      	cmp	r3, r8
 800c15c:	db02      	blt.n	800c164 <_printf_float+0x21c>
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	07d8      	lsls	r0, r3, #31
 800c162:	d50f      	bpl.n	800c184 <_printf_float+0x23c>
 800c164:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c168:	4631      	mov	r1, r6
 800c16a:	4628      	mov	r0, r5
 800c16c:	47b8      	blx	r7
 800c16e:	3001      	adds	r0, #1
 800c170:	f43f af45 	beq.w	800bffe <_printf_float+0xb6>
 800c174:	f04f 0900 	mov.w	r9, #0
 800c178:	f108 38ff 	add.w	r8, r8, #4294967295
 800c17c:	f104 0a1a 	add.w	sl, r4, #26
 800c180:	45c8      	cmp	r8, r9
 800c182:	dc09      	bgt.n	800c198 <_printf_float+0x250>
 800c184:	6823      	ldr	r3, [r4, #0]
 800c186:	079b      	lsls	r3, r3, #30
 800c188:	f100 8103 	bmi.w	800c392 <_printf_float+0x44a>
 800c18c:	68e0      	ldr	r0, [r4, #12]
 800c18e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c190:	4298      	cmp	r0, r3
 800c192:	bfb8      	it	lt
 800c194:	4618      	movlt	r0, r3
 800c196:	e734      	b.n	800c002 <_printf_float+0xba>
 800c198:	2301      	movs	r3, #1
 800c19a:	4652      	mov	r2, sl
 800c19c:	4631      	mov	r1, r6
 800c19e:	4628      	mov	r0, r5
 800c1a0:	47b8      	blx	r7
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	f43f af2b 	beq.w	800bffe <_printf_float+0xb6>
 800c1a8:	f109 0901 	add.w	r9, r9, #1
 800c1ac:	e7e8      	b.n	800c180 <_printf_float+0x238>
 800c1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	dc39      	bgt.n	800c228 <_printf_float+0x2e0>
 800c1b4:	4a1b      	ldr	r2, [pc, #108]	@ (800c224 <_printf_float+0x2dc>)
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	4631      	mov	r1, r6
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	47b8      	blx	r7
 800c1be:	3001      	adds	r0, #1
 800c1c0:	f43f af1d 	beq.w	800bffe <_printf_float+0xb6>
 800c1c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c1c8:	ea59 0303 	orrs.w	r3, r9, r3
 800c1cc:	d102      	bne.n	800c1d4 <_printf_float+0x28c>
 800c1ce:	6823      	ldr	r3, [r4, #0]
 800c1d0:	07d9      	lsls	r1, r3, #31
 800c1d2:	d5d7      	bpl.n	800c184 <_printf_float+0x23c>
 800c1d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1d8:	4631      	mov	r1, r6
 800c1da:	4628      	mov	r0, r5
 800c1dc:	47b8      	blx	r7
 800c1de:	3001      	adds	r0, #1
 800c1e0:	f43f af0d 	beq.w	800bffe <_printf_float+0xb6>
 800c1e4:	f04f 0a00 	mov.w	sl, #0
 800c1e8:	f104 0b1a 	add.w	fp, r4, #26
 800c1ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1ee:	425b      	negs	r3, r3
 800c1f0:	4553      	cmp	r3, sl
 800c1f2:	dc01      	bgt.n	800c1f8 <_printf_float+0x2b0>
 800c1f4:	464b      	mov	r3, r9
 800c1f6:	e793      	b.n	800c120 <_printf_float+0x1d8>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	465a      	mov	r2, fp
 800c1fc:	4631      	mov	r1, r6
 800c1fe:	4628      	mov	r0, r5
 800c200:	47b8      	blx	r7
 800c202:	3001      	adds	r0, #1
 800c204:	f43f aefb 	beq.w	800bffe <_printf_float+0xb6>
 800c208:	f10a 0a01 	add.w	sl, sl, #1
 800c20c:	e7ee      	b.n	800c1ec <_printf_float+0x2a4>
 800c20e:	bf00      	nop
 800c210:	7fefffff 	.word	0x7fefffff
 800c214:	08010001 	.word	0x08010001
 800c218:	08010005 	.word	0x08010005
 800c21c:	08010009 	.word	0x08010009
 800c220:	0801000d 	.word	0x0801000d
 800c224:	08010011 	.word	0x08010011
 800c228:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c22a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c22e:	4553      	cmp	r3, sl
 800c230:	bfa8      	it	ge
 800c232:	4653      	movge	r3, sl
 800c234:	2b00      	cmp	r3, #0
 800c236:	4699      	mov	r9, r3
 800c238:	dc36      	bgt.n	800c2a8 <_printf_float+0x360>
 800c23a:	f04f 0b00 	mov.w	fp, #0
 800c23e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c242:	f104 021a 	add.w	r2, r4, #26
 800c246:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c248:	9306      	str	r3, [sp, #24]
 800c24a:	eba3 0309 	sub.w	r3, r3, r9
 800c24e:	455b      	cmp	r3, fp
 800c250:	dc31      	bgt.n	800c2b6 <_printf_float+0x36e>
 800c252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c254:	459a      	cmp	sl, r3
 800c256:	dc3a      	bgt.n	800c2ce <_printf_float+0x386>
 800c258:	6823      	ldr	r3, [r4, #0]
 800c25a:	07da      	lsls	r2, r3, #31
 800c25c:	d437      	bmi.n	800c2ce <_printf_float+0x386>
 800c25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c260:	ebaa 0903 	sub.w	r9, sl, r3
 800c264:	9b06      	ldr	r3, [sp, #24]
 800c266:	ebaa 0303 	sub.w	r3, sl, r3
 800c26a:	4599      	cmp	r9, r3
 800c26c:	bfa8      	it	ge
 800c26e:	4699      	movge	r9, r3
 800c270:	f1b9 0f00 	cmp.w	r9, #0
 800c274:	dc33      	bgt.n	800c2de <_printf_float+0x396>
 800c276:	f04f 0800 	mov.w	r8, #0
 800c27a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c27e:	f104 0b1a 	add.w	fp, r4, #26
 800c282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c284:	ebaa 0303 	sub.w	r3, sl, r3
 800c288:	eba3 0309 	sub.w	r3, r3, r9
 800c28c:	4543      	cmp	r3, r8
 800c28e:	f77f af79 	ble.w	800c184 <_printf_float+0x23c>
 800c292:	2301      	movs	r3, #1
 800c294:	465a      	mov	r2, fp
 800c296:	4631      	mov	r1, r6
 800c298:	4628      	mov	r0, r5
 800c29a:	47b8      	blx	r7
 800c29c:	3001      	adds	r0, #1
 800c29e:	f43f aeae 	beq.w	800bffe <_printf_float+0xb6>
 800c2a2:	f108 0801 	add.w	r8, r8, #1
 800c2a6:	e7ec      	b.n	800c282 <_printf_float+0x33a>
 800c2a8:	4642      	mov	r2, r8
 800c2aa:	4631      	mov	r1, r6
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	47b8      	blx	r7
 800c2b0:	3001      	adds	r0, #1
 800c2b2:	d1c2      	bne.n	800c23a <_printf_float+0x2f2>
 800c2b4:	e6a3      	b.n	800bffe <_printf_float+0xb6>
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	4631      	mov	r1, r6
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	9206      	str	r2, [sp, #24]
 800c2be:	47b8      	blx	r7
 800c2c0:	3001      	adds	r0, #1
 800c2c2:	f43f ae9c 	beq.w	800bffe <_printf_float+0xb6>
 800c2c6:	9a06      	ldr	r2, [sp, #24]
 800c2c8:	f10b 0b01 	add.w	fp, fp, #1
 800c2cc:	e7bb      	b.n	800c246 <_printf_float+0x2fe>
 800c2ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2d2:	4631      	mov	r1, r6
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	47b8      	blx	r7
 800c2d8:	3001      	adds	r0, #1
 800c2da:	d1c0      	bne.n	800c25e <_printf_float+0x316>
 800c2dc:	e68f      	b.n	800bffe <_printf_float+0xb6>
 800c2de:	9a06      	ldr	r2, [sp, #24]
 800c2e0:	464b      	mov	r3, r9
 800c2e2:	4442      	add	r2, r8
 800c2e4:	4631      	mov	r1, r6
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	47b8      	blx	r7
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	d1c3      	bne.n	800c276 <_printf_float+0x32e>
 800c2ee:	e686      	b.n	800bffe <_printf_float+0xb6>
 800c2f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c2f4:	f1ba 0f01 	cmp.w	sl, #1
 800c2f8:	dc01      	bgt.n	800c2fe <_printf_float+0x3b6>
 800c2fa:	07db      	lsls	r3, r3, #31
 800c2fc:	d536      	bpl.n	800c36c <_printf_float+0x424>
 800c2fe:	2301      	movs	r3, #1
 800c300:	4642      	mov	r2, r8
 800c302:	4631      	mov	r1, r6
 800c304:	4628      	mov	r0, r5
 800c306:	47b8      	blx	r7
 800c308:	3001      	adds	r0, #1
 800c30a:	f43f ae78 	beq.w	800bffe <_printf_float+0xb6>
 800c30e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c312:	4631      	mov	r1, r6
 800c314:	4628      	mov	r0, r5
 800c316:	47b8      	blx	r7
 800c318:	3001      	adds	r0, #1
 800c31a:	f43f ae70 	beq.w	800bffe <_printf_float+0xb6>
 800c31e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c322:	2200      	movs	r2, #0
 800c324:	2300      	movs	r3, #0
 800c326:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c32a:	f7f4 fbfd 	bl	8000b28 <__aeabi_dcmpeq>
 800c32e:	b9c0      	cbnz	r0, 800c362 <_printf_float+0x41a>
 800c330:	4653      	mov	r3, sl
 800c332:	f108 0201 	add.w	r2, r8, #1
 800c336:	4631      	mov	r1, r6
 800c338:	4628      	mov	r0, r5
 800c33a:	47b8      	blx	r7
 800c33c:	3001      	adds	r0, #1
 800c33e:	d10c      	bne.n	800c35a <_printf_float+0x412>
 800c340:	e65d      	b.n	800bffe <_printf_float+0xb6>
 800c342:	2301      	movs	r3, #1
 800c344:	465a      	mov	r2, fp
 800c346:	4631      	mov	r1, r6
 800c348:	4628      	mov	r0, r5
 800c34a:	47b8      	blx	r7
 800c34c:	3001      	adds	r0, #1
 800c34e:	f43f ae56 	beq.w	800bffe <_printf_float+0xb6>
 800c352:	f108 0801 	add.w	r8, r8, #1
 800c356:	45d0      	cmp	r8, sl
 800c358:	dbf3      	blt.n	800c342 <_printf_float+0x3fa>
 800c35a:	464b      	mov	r3, r9
 800c35c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c360:	e6df      	b.n	800c122 <_printf_float+0x1da>
 800c362:	f04f 0800 	mov.w	r8, #0
 800c366:	f104 0b1a 	add.w	fp, r4, #26
 800c36a:	e7f4      	b.n	800c356 <_printf_float+0x40e>
 800c36c:	2301      	movs	r3, #1
 800c36e:	4642      	mov	r2, r8
 800c370:	e7e1      	b.n	800c336 <_printf_float+0x3ee>
 800c372:	2301      	movs	r3, #1
 800c374:	464a      	mov	r2, r9
 800c376:	4631      	mov	r1, r6
 800c378:	4628      	mov	r0, r5
 800c37a:	47b8      	blx	r7
 800c37c:	3001      	adds	r0, #1
 800c37e:	f43f ae3e 	beq.w	800bffe <_printf_float+0xb6>
 800c382:	f108 0801 	add.w	r8, r8, #1
 800c386:	68e3      	ldr	r3, [r4, #12]
 800c388:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c38a:	1a5b      	subs	r3, r3, r1
 800c38c:	4543      	cmp	r3, r8
 800c38e:	dcf0      	bgt.n	800c372 <_printf_float+0x42a>
 800c390:	e6fc      	b.n	800c18c <_printf_float+0x244>
 800c392:	f04f 0800 	mov.w	r8, #0
 800c396:	f104 0919 	add.w	r9, r4, #25
 800c39a:	e7f4      	b.n	800c386 <_printf_float+0x43e>

0800c39c <_printf_common>:
 800c39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a0:	4616      	mov	r6, r2
 800c3a2:	4698      	mov	r8, r3
 800c3a4:	688a      	ldr	r2, [r1, #8]
 800c3a6:	690b      	ldr	r3, [r1, #16]
 800c3a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	bfb8      	it	lt
 800c3b0:	4613      	movlt	r3, r2
 800c3b2:	6033      	str	r3, [r6, #0]
 800c3b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c3b8:	4607      	mov	r7, r0
 800c3ba:	460c      	mov	r4, r1
 800c3bc:	b10a      	cbz	r2, 800c3c2 <_printf_common+0x26>
 800c3be:	3301      	adds	r3, #1
 800c3c0:	6033      	str	r3, [r6, #0]
 800c3c2:	6823      	ldr	r3, [r4, #0]
 800c3c4:	0699      	lsls	r1, r3, #26
 800c3c6:	bf42      	ittt	mi
 800c3c8:	6833      	ldrmi	r3, [r6, #0]
 800c3ca:	3302      	addmi	r3, #2
 800c3cc:	6033      	strmi	r3, [r6, #0]
 800c3ce:	6825      	ldr	r5, [r4, #0]
 800c3d0:	f015 0506 	ands.w	r5, r5, #6
 800c3d4:	d106      	bne.n	800c3e4 <_printf_common+0x48>
 800c3d6:	f104 0a19 	add.w	sl, r4, #25
 800c3da:	68e3      	ldr	r3, [r4, #12]
 800c3dc:	6832      	ldr	r2, [r6, #0]
 800c3de:	1a9b      	subs	r3, r3, r2
 800c3e0:	42ab      	cmp	r3, r5
 800c3e2:	dc26      	bgt.n	800c432 <_printf_common+0x96>
 800c3e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c3e8:	6822      	ldr	r2, [r4, #0]
 800c3ea:	3b00      	subs	r3, #0
 800c3ec:	bf18      	it	ne
 800c3ee:	2301      	movne	r3, #1
 800c3f0:	0692      	lsls	r2, r2, #26
 800c3f2:	d42b      	bmi.n	800c44c <_printf_common+0xb0>
 800c3f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c3f8:	4641      	mov	r1, r8
 800c3fa:	4638      	mov	r0, r7
 800c3fc:	47c8      	blx	r9
 800c3fe:	3001      	adds	r0, #1
 800c400:	d01e      	beq.n	800c440 <_printf_common+0xa4>
 800c402:	6823      	ldr	r3, [r4, #0]
 800c404:	6922      	ldr	r2, [r4, #16]
 800c406:	f003 0306 	and.w	r3, r3, #6
 800c40a:	2b04      	cmp	r3, #4
 800c40c:	bf02      	ittt	eq
 800c40e:	68e5      	ldreq	r5, [r4, #12]
 800c410:	6833      	ldreq	r3, [r6, #0]
 800c412:	1aed      	subeq	r5, r5, r3
 800c414:	68a3      	ldr	r3, [r4, #8]
 800c416:	bf0c      	ite	eq
 800c418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c41c:	2500      	movne	r5, #0
 800c41e:	4293      	cmp	r3, r2
 800c420:	bfc4      	itt	gt
 800c422:	1a9b      	subgt	r3, r3, r2
 800c424:	18ed      	addgt	r5, r5, r3
 800c426:	2600      	movs	r6, #0
 800c428:	341a      	adds	r4, #26
 800c42a:	42b5      	cmp	r5, r6
 800c42c:	d11a      	bne.n	800c464 <_printf_common+0xc8>
 800c42e:	2000      	movs	r0, #0
 800c430:	e008      	b.n	800c444 <_printf_common+0xa8>
 800c432:	2301      	movs	r3, #1
 800c434:	4652      	mov	r2, sl
 800c436:	4641      	mov	r1, r8
 800c438:	4638      	mov	r0, r7
 800c43a:	47c8      	blx	r9
 800c43c:	3001      	adds	r0, #1
 800c43e:	d103      	bne.n	800c448 <_printf_common+0xac>
 800c440:	f04f 30ff 	mov.w	r0, #4294967295
 800c444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c448:	3501      	adds	r5, #1
 800c44a:	e7c6      	b.n	800c3da <_printf_common+0x3e>
 800c44c:	18e1      	adds	r1, r4, r3
 800c44e:	1c5a      	adds	r2, r3, #1
 800c450:	2030      	movs	r0, #48	@ 0x30
 800c452:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c456:	4422      	add	r2, r4
 800c458:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c45c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c460:	3302      	adds	r3, #2
 800c462:	e7c7      	b.n	800c3f4 <_printf_common+0x58>
 800c464:	2301      	movs	r3, #1
 800c466:	4622      	mov	r2, r4
 800c468:	4641      	mov	r1, r8
 800c46a:	4638      	mov	r0, r7
 800c46c:	47c8      	blx	r9
 800c46e:	3001      	adds	r0, #1
 800c470:	d0e6      	beq.n	800c440 <_printf_common+0xa4>
 800c472:	3601      	adds	r6, #1
 800c474:	e7d9      	b.n	800c42a <_printf_common+0x8e>
	...

0800c478 <_printf_i>:
 800c478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c47c:	7e0f      	ldrb	r7, [r1, #24]
 800c47e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c480:	2f78      	cmp	r7, #120	@ 0x78
 800c482:	4691      	mov	r9, r2
 800c484:	4680      	mov	r8, r0
 800c486:	460c      	mov	r4, r1
 800c488:	469a      	mov	sl, r3
 800c48a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c48e:	d807      	bhi.n	800c4a0 <_printf_i+0x28>
 800c490:	2f62      	cmp	r7, #98	@ 0x62
 800c492:	d80a      	bhi.n	800c4aa <_printf_i+0x32>
 800c494:	2f00      	cmp	r7, #0
 800c496:	f000 80d2 	beq.w	800c63e <_printf_i+0x1c6>
 800c49a:	2f58      	cmp	r7, #88	@ 0x58
 800c49c:	f000 80b9 	beq.w	800c612 <_printf_i+0x19a>
 800c4a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c4a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c4a8:	e03a      	b.n	800c520 <_printf_i+0xa8>
 800c4aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c4ae:	2b15      	cmp	r3, #21
 800c4b0:	d8f6      	bhi.n	800c4a0 <_printf_i+0x28>
 800c4b2:	a101      	add	r1, pc, #4	@ (adr r1, 800c4b8 <_printf_i+0x40>)
 800c4b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c4b8:	0800c511 	.word	0x0800c511
 800c4bc:	0800c525 	.word	0x0800c525
 800c4c0:	0800c4a1 	.word	0x0800c4a1
 800c4c4:	0800c4a1 	.word	0x0800c4a1
 800c4c8:	0800c4a1 	.word	0x0800c4a1
 800c4cc:	0800c4a1 	.word	0x0800c4a1
 800c4d0:	0800c525 	.word	0x0800c525
 800c4d4:	0800c4a1 	.word	0x0800c4a1
 800c4d8:	0800c4a1 	.word	0x0800c4a1
 800c4dc:	0800c4a1 	.word	0x0800c4a1
 800c4e0:	0800c4a1 	.word	0x0800c4a1
 800c4e4:	0800c625 	.word	0x0800c625
 800c4e8:	0800c54f 	.word	0x0800c54f
 800c4ec:	0800c5df 	.word	0x0800c5df
 800c4f0:	0800c4a1 	.word	0x0800c4a1
 800c4f4:	0800c4a1 	.word	0x0800c4a1
 800c4f8:	0800c647 	.word	0x0800c647
 800c4fc:	0800c4a1 	.word	0x0800c4a1
 800c500:	0800c54f 	.word	0x0800c54f
 800c504:	0800c4a1 	.word	0x0800c4a1
 800c508:	0800c4a1 	.word	0x0800c4a1
 800c50c:	0800c5e7 	.word	0x0800c5e7
 800c510:	6833      	ldr	r3, [r6, #0]
 800c512:	1d1a      	adds	r2, r3, #4
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	6032      	str	r2, [r6, #0]
 800c518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c51c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c520:	2301      	movs	r3, #1
 800c522:	e09d      	b.n	800c660 <_printf_i+0x1e8>
 800c524:	6833      	ldr	r3, [r6, #0]
 800c526:	6820      	ldr	r0, [r4, #0]
 800c528:	1d19      	adds	r1, r3, #4
 800c52a:	6031      	str	r1, [r6, #0]
 800c52c:	0606      	lsls	r6, r0, #24
 800c52e:	d501      	bpl.n	800c534 <_printf_i+0xbc>
 800c530:	681d      	ldr	r5, [r3, #0]
 800c532:	e003      	b.n	800c53c <_printf_i+0xc4>
 800c534:	0645      	lsls	r5, r0, #25
 800c536:	d5fb      	bpl.n	800c530 <_printf_i+0xb8>
 800c538:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c53c:	2d00      	cmp	r5, #0
 800c53e:	da03      	bge.n	800c548 <_printf_i+0xd0>
 800c540:	232d      	movs	r3, #45	@ 0x2d
 800c542:	426d      	negs	r5, r5
 800c544:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c548:	4859      	ldr	r0, [pc, #356]	@ (800c6b0 <_printf_i+0x238>)
 800c54a:	230a      	movs	r3, #10
 800c54c:	e011      	b.n	800c572 <_printf_i+0xfa>
 800c54e:	6821      	ldr	r1, [r4, #0]
 800c550:	6833      	ldr	r3, [r6, #0]
 800c552:	0608      	lsls	r0, r1, #24
 800c554:	f853 5b04 	ldr.w	r5, [r3], #4
 800c558:	d402      	bmi.n	800c560 <_printf_i+0xe8>
 800c55a:	0649      	lsls	r1, r1, #25
 800c55c:	bf48      	it	mi
 800c55e:	b2ad      	uxthmi	r5, r5
 800c560:	2f6f      	cmp	r7, #111	@ 0x6f
 800c562:	4853      	ldr	r0, [pc, #332]	@ (800c6b0 <_printf_i+0x238>)
 800c564:	6033      	str	r3, [r6, #0]
 800c566:	bf14      	ite	ne
 800c568:	230a      	movne	r3, #10
 800c56a:	2308      	moveq	r3, #8
 800c56c:	2100      	movs	r1, #0
 800c56e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c572:	6866      	ldr	r6, [r4, #4]
 800c574:	60a6      	str	r6, [r4, #8]
 800c576:	2e00      	cmp	r6, #0
 800c578:	bfa2      	ittt	ge
 800c57a:	6821      	ldrge	r1, [r4, #0]
 800c57c:	f021 0104 	bicge.w	r1, r1, #4
 800c580:	6021      	strge	r1, [r4, #0]
 800c582:	b90d      	cbnz	r5, 800c588 <_printf_i+0x110>
 800c584:	2e00      	cmp	r6, #0
 800c586:	d04b      	beq.n	800c620 <_printf_i+0x1a8>
 800c588:	4616      	mov	r6, r2
 800c58a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c58e:	fb03 5711 	mls	r7, r3, r1, r5
 800c592:	5dc7      	ldrb	r7, [r0, r7]
 800c594:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c598:	462f      	mov	r7, r5
 800c59a:	42bb      	cmp	r3, r7
 800c59c:	460d      	mov	r5, r1
 800c59e:	d9f4      	bls.n	800c58a <_printf_i+0x112>
 800c5a0:	2b08      	cmp	r3, #8
 800c5a2:	d10b      	bne.n	800c5bc <_printf_i+0x144>
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	07df      	lsls	r7, r3, #31
 800c5a8:	d508      	bpl.n	800c5bc <_printf_i+0x144>
 800c5aa:	6923      	ldr	r3, [r4, #16]
 800c5ac:	6861      	ldr	r1, [r4, #4]
 800c5ae:	4299      	cmp	r1, r3
 800c5b0:	bfde      	ittt	le
 800c5b2:	2330      	movle	r3, #48	@ 0x30
 800c5b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c5b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c5bc:	1b92      	subs	r2, r2, r6
 800c5be:	6122      	str	r2, [r4, #16]
 800c5c0:	f8cd a000 	str.w	sl, [sp]
 800c5c4:	464b      	mov	r3, r9
 800c5c6:	aa03      	add	r2, sp, #12
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	4640      	mov	r0, r8
 800c5cc:	f7ff fee6 	bl	800c39c <_printf_common>
 800c5d0:	3001      	adds	r0, #1
 800c5d2:	d14a      	bne.n	800c66a <_printf_i+0x1f2>
 800c5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d8:	b004      	add	sp, #16
 800c5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5de:	6823      	ldr	r3, [r4, #0]
 800c5e0:	f043 0320 	orr.w	r3, r3, #32
 800c5e4:	6023      	str	r3, [r4, #0]
 800c5e6:	4833      	ldr	r0, [pc, #204]	@ (800c6b4 <_printf_i+0x23c>)
 800c5e8:	2778      	movs	r7, #120	@ 0x78
 800c5ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c5ee:	6823      	ldr	r3, [r4, #0]
 800c5f0:	6831      	ldr	r1, [r6, #0]
 800c5f2:	061f      	lsls	r7, r3, #24
 800c5f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c5f8:	d402      	bmi.n	800c600 <_printf_i+0x188>
 800c5fa:	065f      	lsls	r7, r3, #25
 800c5fc:	bf48      	it	mi
 800c5fe:	b2ad      	uxthmi	r5, r5
 800c600:	6031      	str	r1, [r6, #0]
 800c602:	07d9      	lsls	r1, r3, #31
 800c604:	bf44      	itt	mi
 800c606:	f043 0320 	orrmi.w	r3, r3, #32
 800c60a:	6023      	strmi	r3, [r4, #0]
 800c60c:	b11d      	cbz	r5, 800c616 <_printf_i+0x19e>
 800c60e:	2310      	movs	r3, #16
 800c610:	e7ac      	b.n	800c56c <_printf_i+0xf4>
 800c612:	4827      	ldr	r0, [pc, #156]	@ (800c6b0 <_printf_i+0x238>)
 800c614:	e7e9      	b.n	800c5ea <_printf_i+0x172>
 800c616:	6823      	ldr	r3, [r4, #0]
 800c618:	f023 0320 	bic.w	r3, r3, #32
 800c61c:	6023      	str	r3, [r4, #0]
 800c61e:	e7f6      	b.n	800c60e <_printf_i+0x196>
 800c620:	4616      	mov	r6, r2
 800c622:	e7bd      	b.n	800c5a0 <_printf_i+0x128>
 800c624:	6833      	ldr	r3, [r6, #0]
 800c626:	6825      	ldr	r5, [r4, #0]
 800c628:	6961      	ldr	r1, [r4, #20]
 800c62a:	1d18      	adds	r0, r3, #4
 800c62c:	6030      	str	r0, [r6, #0]
 800c62e:	062e      	lsls	r6, r5, #24
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	d501      	bpl.n	800c638 <_printf_i+0x1c0>
 800c634:	6019      	str	r1, [r3, #0]
 800c636:	e002      	b.n	800c63e <_printf_i+0x1c6>
 800c638:	0668      	lsls	r0, r5, #25
 800c63a:	d5fb      	bpl.n	800c634 <_printf_i+0x1bc>
 800c63c:	8019      	strh	r1, [r3, #0]
 800c63e:	2300      	movs	r3, #0
 800c640:	6123      	str	r3, [r4, #16]
 800c642:	4616      	mov	r6, r2
 800c644:	e7bc      	b.n	800c5c0 <_printf_i+0x148>
 800c646:	6833      	ldr	r3, [r6, #0]
 800c648:	1d1a      	adds	r2, r3, #4
 800c64a:	6032      	str	r2, [r6, #0]
 800c64c:	681e      	ldr	r6, [r3, #0]
 800c64e:	6862      	ldr	r2, [r4, #4]
 800c650:	2100      	movs	r1, #0
 800c652:	4630      	mov	r0, r6
 800c654:	f7f3 fdec 	bl	8000230 <memchr>
 800c658:	b108      	cbz	r0, 800c65e <_printf_i+0x1e6>
 800c65a:	1b80      	subs	r0, r0, r6
 800c65c:	6060      	str	r0, [r4, #4]
 800c65e:	6863      	ldr	r3, [r4, #4]
 800c660:	6123      	str	r3, [r4, #16]
 800c662:	2300      	movs	r3, #0
 800c664:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c668:	e7aa      	b.n	800c5c0 <_printf_i+0x148>
 800c66a:	6923      	ldr	r3, [r4, #16]
 800c66c:	4632      	mov	r2, r6
 800c66e:	4649      	mov	r1, r9
 800c670:	4640      	mov	r0, r8
 800c672:	47d0      	blx	sl
 800c674:	3001      	adds	r0, #1
 800c676:	d0ad      	beq.n	800c5d4 <_printf_i+0x15c>
 800c678:	6823      	ldr	r3, [r4, #0]
 800c67a:	079b      	lsls	r3, r3, #30
 800c67c:	d413      	bmi.n	800c6a6 <_printf_i+0x22e>
 800c67e:	68e0      	ldr	r0, [r4, #12]
 800c680:	9b03      	ldr	r3, [sp, #12]
 800c682:	4298      	cmp	r0, r3
 800c684:	bfb8      	it	lt
 800c686:	4618      	movlt	r0, r3
 800c688:	e7a6      	b.n	800c5d8 <_printf_i+0x160>
 800c68a:	2301      	movs	r3, #1
 800c68c:	4632      	mov	r2, r6
 800c68e:	4649      	mov	r1, r9
 800c690:	4640      	mov	r0, r8
 800c692:	47d0      	blx	sl
 800c694:	3001      	adds	r0, #1
 800c696:	d09d      	beq.n	800c5d4 <_printf_i+0x15c>
 800c698:	3501      	adds	r5, #1
 800c69a:	68e3      	ldr	r3, [r4, #12]
 800c69c:	9903      	ldr	r1, [sp, #12]
 800c69e:	1a5b      	subs	r3, r3, r1
 800c6a0:	42ab      	cmp	r3, r5
 800c6a2:	dcf2      	bgt.n	800c68a <_printf_i+0x212>
 800c6a4:	e7eb      	b.n	800c67e <_printf_i+0x206>
 800c6a6:	2500      	movs	r5, #0
 800c6a8:	f104 0619 	add.w	r6, r4, #25
 800c6ac:	e7f5      	b.n	800c69a <_printf_i+0x222>
 800c6ae:	bf00      	nop
 800c6b0:	08010013 	.word	0x08010013
 800c6b4:	08010024 	.word	0x08010024

0800c6b8 <_scanf_float>:
 800c6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6bc:	b087      	sub	sp, #28
 800c6be:	4617      	mov	r7, r2
 800c6c0:	9303      	str	r3, [sp, #12]
 800c6c2:	688b      	ldr	r3, [r1, #8]
 800c6c4:	1e5a      	subs	r2, r3, #1
 800c6c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c6ca:	bf81      	itttt	hi
 800c6cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c6d0:	eb03 0b05 	addhi.w	fp, r3, r5
 800c6d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c6d8:	608b      	strhi	r3, [r1, #8]
 800c6da:	680b      	ldr	r3, [r1, #0]
 800c6dc:	460a      	mov	r2, r1
 800c6de:	f04f 0500 	mov.w	r5, #0
 800c6e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c6e6:	f842 3b1c 	str.w	r3, [r2], #28
 800c6ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c6ee:	4680      	mov	r8, r0
 800c6f0:	460c      	mov	r4, r1
 800c6f2:	bf98      	it	ls
 800c6f4:	f04f 0b00 	movls.w	fp, #0
 800c6f8:	9201      	str	r2, [sp, #4]
 800c6fa:	4616      	mov	r6, r2
 800c6fc:	46aa      	mov	sl, r5
 800c6fe:	46a9      	mov	r9, r5
 800c700:	9502      	str	r5, [sp, #8]
 800c702:	68a2      	ldr	r2, [r4, #8]
 800c704:	b152      	cbz	r2, 800c71c <_scanf_float+0x64>
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	2b4e      	cmp	r3, #78	@ 0x4e
 800c70c:	d864      	bhi.n	800c7d8 <_scanf_float+0x120>
 800c70e:	2b40      	cmp	r3, #64	@ 0x40
 800c710:	d83c      	bhi.n	800c78c <_scanf_float+0xd4>
 800c712:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c716:	b2c8      	uxtb	r0, r1
 800c718:	280e      	cmp	r0, #14
 800c71a:	d93a      	bls.n	800c792 <_scanf_float+0xda>
 800c71c:	f1b9 0f00 	cmp.w	r9, #0
 800c720:	d003      	beq.n	800c72a <_scanf_float+0x72>
 800c722:	6823      	ldr	r3, [r4, #0]
 800c724:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c728:	6023      	str	r3, [r4, #0]
 800c72a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c72e:	f1ba 0f01 	cmp.w	sl, #1
 800c732:	f200 8117 	bhi.w	800c964 <_scanf_float+0x2ac>
 800c736:	9b01      	ldr	r3, [sp, #4]
 800c738:	429e      	cmp	r6, r3
 800c73a:	f200 8108 	bhi.w	800c94e <_scanf_float+0x296>
 800c73e:	2001      	movs	r0, #1
 800c740:	b007      	add	sp, #28
 800c742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c746:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c74a:	2a0d      	cmp	r2, #13
 800c74c:	d8e6      	bhi.n	800c71c <_scanf_float+0x64>
 800c74e:	a101      	add	r1, pc, #4	@ (adr r1, 800c754 <_scanf_float+0x9c>)
 800c750:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c754:	0800c89b 	.word	0x0800c89b
 800c758:	0800c71d 	.word	0x0800c71d
 800c75c:	0800c71d 	.word	0x0800c71d
 800c760:	0800c71d 	.word	0x0800c71d
 800c764:	0800c8fb 	.word	0x0800c8fb
 800c768:	0800c8d3 	.word	0x0800c8d3
 800c76c:	0800c71d 	.word	0x0800c71d
 800c770:	0800c71d 	.word	0x0800c71d
 800c774:	0800c8a9 	.word	0x0800c8a9
 800c778:	0800c71d 	.word	0x0800c71d
 800c77c:	0800c71d 	.word	0x0800c71d
 800c780:	0800c71d 	.word	0x0800c71d
 800c784:	0800c71d 	.word	0x0800c71d
 800c788:	0800c861 	.word	0x0800c861
 800c78c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c790:	e7db      	b.n	800c74a <_scanf_float+0x92>
 800c792:	290e      	cmp	r1, #14
 800c794:	d8c2      	bhi.n	800c71c <_scanf_float+0x64>
 800c796:	a001      	add	r0, pc, #4	@ (adr r0, 800c79c <_scanf_float+0xe4>)
 800c798:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c79c:	0800c851 	.word	0x0800c851
 800c7a0:	0800c71d 	.word	0x0800c71d
 800c7a4:	0800c851 	.word	0x0800c851
 800c7a8:	0800c8e7 	.word	0x0800c8e7
 800c7ac:	0800c71d 	.word	0x0800c71d
 800c7b0:	0800c7f9 	.word	0x0800c7f9
 800c7b4:	0800c837 	.word	0x0800c837
 800c7b8:	0800c837 	.word	0x0800c837
 800c7bc:	0800c837 	.word	0x0800c837
 800c7c0:	0800c837 	.word	0x0800c837
 800c7c4:	0800c837 	.word	0x0800c837
 800c7c8:	0800c837 	.word	0x0800c837
 800c7cc:	0800c837 	.word	0x0800c837
 800c7d0:	0800c837 	.word	0x0800c837
 800c7d4:	0800c837 	.word	0x0800c837
 800c7d8:	2b6e      	cmp	r3, #110	@ 0x6e
 800c7da:	d809      	bhi.n	800c7f0 <_scanf_float+0x138>
 800c7dc:	2b60      	cmp	r3, #96	@ 0x60
 800c7de:	d8b2      	bhi.n	800c746 <_scanf_float+0x8e>
 800c7e0:	2b54      	cmp	r3, #84	@ 0x54
 800c7e2:	d07b      	beq.n	800c8dc <_scanf_float+0x224>
 800c7e4:	2b59      	cmp	r3, #89	@ 0x59
 800c7e6:	d199      	bne.n	800c71c <_scanf_float+0x64>
 800c7e8:	2d07      	cmp	r5, #7
 800c7ea:	d197      	bne.n	800c71c <_scanf_float+0x64>
 800c7ec:	2508      	movs	r5, #8
 800c7ee:	e02c      	b.n	800c84a <_scanf_float+0x192>
 800c7f0:	2b74      	cmp	r3, #116	@ 0x74
 800c7f2:	d073      	beq.n	800c8dc <_scanf_float+0x224>
 800c7f4:	2b79      	cmp	r3, #121	@ 0x79
 800c7f6:	e7f6      	b.n	800c7e6 <_scanf_float+0x12e>
 800c7f8:	6821      	ldr	r1, [r4, #0]
 800c7fa:	05c8      	lsls	r0, r1, #23
 800c7fc:	d51b      	bpl.n	800c836 <_scanf_float+0x17e>
 800c7fe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c802:	6021      	str	r1, [r4, #0]
 800c804:	f109 0901 	add.w	r9, r9, #1
 800c808:	f1bb 0f00 	cmp.w	fp, #0
 800c80c:	d003      	beq.n	800c816 <_scanf_float+0x15e>
 800c80e:	3201      	adds	r2, #1
 800c810:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c814:	60a2      	str	r2, [r4, #8]
 800c816:	68a3      	ldr	r3, [r4, #8]
 800c818:	3b01      	subs	r3, #1
 800c81a:	60a3      	str	r3, [r4, #8]
 800c81c:	6923      	ldr	r3, [r4, #16]
 800c81e:	3301      	adds	r3, #1
 800c820:	6123      	str	r3, [r4, #16]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	3b01      	subs	r3, #1
 800c826:	2b00      	cmp	r3, #0
 800c828:	607b      	str	r3, [r7, #4]
 800c82a:	f340 8087 	ble.w	800c93c <_scanf_float+0x284>
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	3301      	adds	r3, #1
 800c832:	603b      	str	r3, [r7, #0]
 800c834:	e765      	b.n	800c702 <_scanf_float+0x4a>
 800c836:	eb1a 0105 	adds.w	r1, sl, r5
 800c83a:	f47f af6f 	bne.w	800c71c <_scanf_float+0x64>
 800c83e:	6822      	ldr	r2, [r4, #0]
 800c840:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c844:	6022      	str	r2, [r4, #0]
 800c846:	460d      	mov	r5, r1
 800c848:	468a      	mov	sl, r1
 800c84a:	f806 3b01 	strb.w	r3, [r6], #1
 800c84e:	e7e2      	b.n	800c816 <_scanf_float+0x15e>
 800c850:	6822      	ldr	r2, [r4, #0]
 800c852:	0610      	lsls	r0, r2, #24
 800c854:	f57f af62 	bpl.w	800c71c <_scanf_float+0x64>
 800c858:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c85c:	6022      	str	r2, [r4, #0]
 800c85e:	e7f4      	b.n	800c84a <_scanf_float+0x192>
 800c860:	f1ba 0f00 	cmp.w	sl, #0
 800c864:	d10e      	bne.n	800c884 <_scanf_float+0x1cc>
 800c866:	f1b9 0f00 	cmp.w	r9, #0
 800c86a:	d10e      	bne.n	800c88a <_scanf_float+0x1d2>
 800c86c:	6822      	ldr	r2, [r4, #0]
 800c86e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c872:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c876:	d108      	bne.n	800c88a <_scanf_float+0x1d2>
 800c878:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c87c:	6022      	str	r2, [r4, #0]
 800c87e:	f04f 0a01 	mov.w	sl, #1
 800c882:	e7e2      	b.n	800c84a <_scanf_float+0x192>
 800c884:	f1ba 0f02 	cmp.w	sl, #2
 800c888:	d055      	beq.n	800c936 <_scanf_float+0x27e>
 800c88a:	2d01      	cmp	r5, #1
 800c88c:	d002      	beq.n	800c894 <_scanf_float+0x1dc>
 800c88e:	2d04      	cmp	r5, #4
 800c890:	f47f af44 	bne.w	800c71c <_scanf_float+0x64>
 800c894:	3501      	adds	r5, #1
 800c896:	b2ed      	uxtb	r5, r5
 800c898:	e7d7      	b.n	800c84a <_scanf_float+0x192>
 800c89a:	f1ba 0f01 	cmp.w	sl, #1
 800c89e:	f47f af3d 	bne.w	800c71c <_scanf_float+0x64>
 800c8a2:	f04f 0a02 	mov.w	sl, #2
 800c8a6:	e7d0      	b.n	800c84a <_scanf_float+0x192>
 800c8a8:	b97d      	cbnz	r5, 800c8ca <_scanf_float+0x212>
 800c8aa:	f1b9 0f00 	cmp.w	r9, #0
 800c8ae:	f47f af38 	bne.w	800c722 <_scanf_float+0x6a>
 800c8b2:	6822      	ldr	r2, [r4, #0]
 800c8b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c8b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c8bc:	f040 8108 	bne.w	800cad0 <_scanf_float+0x418>
 800c8c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c8c4:	6022      	str	r2, [r4, #0]
 800c8c6:	2501      	movs	r5, #1
 800c8c8:	e7bf      	b.n	800c84a <_scanf_float+0x192>
 800c8ca:	2d03      	cmp	r5, #3
 800c8cc:	d0e2      	beq.n	800c894 <_scanf_float+0x1dc>
 800c8ce:	2d05      	cmp	r5, #5
 800c8d0:	e7de      	b.n	800c890 <_scanf_float+0x1d8>
 800c8d2:	2d02      	cmp	r5, #2
 800c8d4:	f47f af22 	bne.w	800c71c <_scanf_float+0x64>
 800c8d8:	2503      	movs	r5, #3
 800c8da:	e7b6      	b.n	800c84a <_scanf_float+0x192>
 800c8dc:	2d06      	cmp	r5, #6
 800c8de:	f47f af1d 	bne.w	800c71c <_scanf_float+0x64>
 800c8e2:	2507      	movs	r5, #7
 800c8e4:	e7b1      	b.n	800c84a <_scanf_float+0x192>
 800c8e6:	6822      	ldr	r2, [r4, #0]
 800c8e8:	0591      	lsls	r1, r2, #22
 800c8ea:	f57f af17 	bpl.w	800c71c <_scanf_float+0x64>
 800c8ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c8f2:	6022      	str	r2, [r4, #0]
 800c8f4:	f8cd 9008 	str.w	r9, [sp, #8]
 800c8f8:	e7a7      	b.n	800c84a <_scanf_float+0x192>
 800c8fa:	6822      	ldr	r2, [r4, #0]
 800c8fc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c900:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c904:	d006      	beq.n	800c914 <_scanf_float+0x25c>
 800c906:	0550      	lsls	r0, r2, #21
 800c908:	f57f af08 	bpl.w	800c71c <_scanf_float+0x64>
 800c90c:	f1b9 0f00 	cmp.w	r9, #0
 800c910:	f000 80de 	beq.w	800cad0 <_scanf_float+0x418>
 800c914:	0591      	lsls	r1, r2, #22
 800c916:	bf58      	it	pl
 800c918:	9902      	ldrpl	r1, [sp, #8]
 800c91a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c91e:	bf58      	it	pl
 800c920:	eba9 0101 	subpl.w	r1, r9, r1
 800c924:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c928:	bf58      	it	pl
 800c92a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c92e:	6022      	str	r2, [r4, #0]
 800c930:	f04f 0900 	mov.w	r9, #0
 800c934:	e789      	b.n	800c84a <_scanf_float+0x192>
 800c936:	f04f 0a03 	mov.w	sl, #3
 800c93a:	e786      	b.n	800c84a <_scanf_float+0x192>
 800c93c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c940:	4639      	mov	r1, r7
 800c942:	4640      	mov	r0, r8
 800c944:	4798      	blx	r3
 800c946:	2800      	cmp	r0, #0
 800c948:	f43f aedb 	beq.w	800c702 <_scanf_float+0x4a>
 800c94c:	e6e6      	b.n	800c71c <_scanf_float+0x64>
 800c94e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c952:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c956:	463a      	mov	r2, r7
 800c958:	4640      	mov	r0, r8
 800c95a:	4798      	blx	r3
 800c95c:	6923      	ldr	r3, [r4, #16]
 800c95e:	3b01      	subs	r3, #1
 800c960:	6123      	str	r3, [r4, #16]
 800c962:	e6e8      	b.n	800c736 <_scanf_float+0x7e>
 800c964:	1e6b      	subs	r3, r5, #1
 800c966:	2b06      	cmp	r3, #6
 800c968:	d824      	bhi.n	800c9b4 <_scanf_float+0x2fc>
 800c96a:	2d02      	cmp	r5, #2
 800c96c:	d836      	bhi.n	800c9dc <_scanf_float+0x324>
 800c96e:	9b01      	ldr	r3, [sp, #4]
 800c970:	429e      	cmp	r6, r3
 800c972:	f67f aee4 	bls.w	800c73e <_scanf_float+0x86>
 800c976:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c97a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c97e:	463a      	mov	r2, r7
 800c980:	4640      	mov	r0, r8
 800c982:	4798      	blx	r3
 800c984:	6923      	ldr	r3, [r4, #16]
 800c986:	3b01      	subs	r3, #1
 800c988:	6123      	str	r3, [r4, #16]
 800c98a:	e7f0      	b.n	800c96e <_scanf_float+0x2b6>
 800c98c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c990:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c994:	463a      	mov	r2, r7
 800c996:	4640      	mov	r0, r8
 800c998:	4798      	blx	r3
 800c99a:	6923      	ldr	r3, [r4, #16]
 800c99c:	3b01      	subs	r3, #1
 800c99e:	6123      	str	r3, [r4, #16]
 800c9a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c9a4:	fa5f fa8a 	uxtb.w	sl, sl
 800c9a8:	f1ba 0f02 	cmp.w	sl, #2
 800c9ac:	d1ee      	bne.n	800c98c <_scanf_float+0x2d4>
 800c9ae:	3d03      	subs	r5, #3
 800c9b0:	b2ed      	uxtb	r5, r5
 800c9b2:	1b76      	subs	r6, r6, r5
 800c9b4:	6823      	ldr	r3, [r4, #0]
 800c9b6:	05da      	lsls	r2, r3, #23
 800c9b8:	d530      	bpl.n	800ca1c <_scanf_float+0x364>
 800c9ba:	055b      	lsls	r3, r3, #21
 800c9bc:	d511      	bpl.n	800c9e2 <_scanf_float+0x32a>
 800c9be:	9b01      	ldr	r3, [sp, #4]
 800c9c0:	429e      	cmp	r6, r3
 800c9c2:	f67f aebc 	bls.w	800c73e <_scanf_float+0x86>
 800c9c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c9ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c9ce:	463a      	mov	r2, r7
 800c9d0:	4640      	mov	r0, r8
 800c9d2:	4798      	blx	r3
 800c9d4:	6923      	ldr	r3, [r4, #16]
 800c9d6:	3b01      	subs	r3, #1
 800c9d8:	6123      	str	r3, [r4, #16]
 800c9da:	e7f0      	b.n	800c9be <_scanf_float+0x306>
 800c9dc:	46aa      	mov	sl, r5
 800c9de:	46b3      	mov	fp, r6
 800c9e0:	e7de      	b.n	800c9a0 <_scanf_float+0x2e8>
 800c9e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c9e6:	6923      	ldr	r3, [r4, #16]
 800c9e8:	2965      	cmp	r1, #101	@ 0x65
 800c9ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800c9ee:	f106 35ff 	add.w	r5, r6, #4294967295
 800c9f2:	6123      	str	r3, [r4, #16]
 800c9f4:	d00c      	beq.n	800ca10 <_scanf_float+0x358>
 800c9f6:	2945      	cmp	r1, #69	@ 0x45
 800c9f8:	d00a      	beq.n	800ca10 <_scanf_float+0x358>
 800c9fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c9fe:	463a      	mov	r2, r7
 800ca00:	4640      	mov	r0, r8
 800ca02:	4798      	blx	r3
 800ca04:	6923      	ldr	r3, [r4, #16]
 800ca06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	1eb5      	subs	r5, r6, #2
 800ca0e:	6123      	str	r3, [r4, #16]
 800ca10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ca14:	463a      	mov	r2, r7
 800ca16:	4640      	mov	r0, r8
 800ca18:	4798      	blx	r3
 800ca1a:	462e      	mov	r6, r5
 800ca1c:	6822      	ldr	r2, [r4, #0]
 800ca1e:	f012 0210 	ands.w	r2, r2, #16
 800ca22:	d001      	beq.n	800ca28 <_scanf_float+0x370>
 800ca24:	2000      	movs	r0, #0
 800ca26:	e68b      	b.n	800c740 <_scanf_float+0x88>
 800ca28:	7032      	strb	r2, [r6, #0]
 800ca2a:	6823      	ldr	r3, [r4, #0]
 800ca2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ca30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca34:	d11c      	bne.n	800ca70 <_scanf_float+0x3b8>
 800ca36:	9b02      	ldr	r3, [sp, #8]
 800ca38:	454b      	cmp	r3, r9
 800ca3a:	eba3 0209 	sub.w	r2, r3, r9
 800ca3e:	d123      	bne.n	800ca88 <_scanf_float+0x3d0>
 800ca40:	9901      	ldr	r1, [sp, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	4640      	mov	r0, r8
 800ca46:	f7ff f8ef 	bl	800bc28 <_strtod_r>
 800ca4a:	9b03      	ldr	r3, [sp, #12]
 800ca4c:	6821      	ldr	r1, [r4, #0]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f011 0f02 	tst.w	r1, #2
 800ca54:	ec57 6b10 	vmov	r6, r7, d0
 800ca58:	f103 0204 	add.w	r2, r3, #4
 800ca5c:	d01f      	beq.n	800ca9e <_scanf_float+0x3e6>
 800ca5e:	9903      	ldr	r1, [sp, #12]
 800ca60:	600a      	str	r2, [r1, #0]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	e9c3 6700 	strd	r6, r7, [r3]
 800ca68:	68e3      	ldr	r3, [r4, #12]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	60e3      	str	r3, [r4, #12]
 800ca6e:	e7d9      	b.n	800ca24 <_scanf_float+0x36c>
 800ca70:	9b04      	ldr	r3, [sp, #16]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d0e4      	beq.n	800ca40 <_scanf_float+0x388>
 800ca76:	9905      	ldr	r1, [sp, #20]
 800ca78:	230a      	movs	r3, #10
 800ca7a:	3101      	adds	r1, #1
 800ca7c:	4640      	mov	r0, r8
 800ca7e:	f7ff f9b7 	bl	800bdf0 <_strtol_r>
 800ca82:	9b04      	ldr	r3, [sp, #16]
 800ca84:	9e05      	ldr	r6, [sp, #20]
 800ca86:	1ac2      	subs	r2, r0, r3
 800ca88:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ca8c:	429e      	cmp	r6, r3
 800ca8e:	bf28      	it	cs
 800ca90:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ca94:	4910      	ldr	r1, [pc, #64]	@ (800cad8 <_scanf_float+0x420>)
 800ca96:	4630      	mov	r0, r6
 800ca98:	f000 f954 	bl	800cd44 <siprintf>
 800ca9c:	e7d0      	b.n	800ca40 <_scanf_float+0x388>
 800ca9e:	f011 0f04 	tst.w	r1, #4
 800caa2:	9903      	ldr	r1, [sp, #12]
 800caa4:	600a      	str	r2, [r1, #0]
 800caa6:	d1dc      	bne.n	800ca62 <_scanf_float+0x3aa>
 800caa8:	681d      	ldr	r5, [r3, #0]
 800caaa:	4632      	mov	r2, r6
 800caac:	463b      	mov	r3, r7
 800caae:	4630      	mov	r0, r6
 800cab0:	4639      	mov	r1, r7
 800cab2:	f7f4 f86b 	bl	8000b8c <__aeabi_dcmpun>
 800cab6:	b128      	cbz	r0, 800cac4 <_scanf_float+0x40c>
 800cab8:	4808      	ldr	r0, [pc, #32]	@ (800cadc <_scanf_float+0x424>)
 800caba:	f000 fb41 	bl	800d140 <nanf>
 800cabe:	ed85 0a00 	vstr	s0, [r5]
 800cac2:	e7d1      	b.n	800ca68 <_scanf_float+0x3b0>
 800cac4:	4630      	mov	r0, r6
 800cac6:	4639      	mov	r1, r7
 800cac8:	f7f4 f8be 	bl	8000c48 <__aeabi_d2f>
 800cacc:	6028      	str	r0, [r5, #0]
 800cace:	e7cb      	b.n	800ca68 <_scanf_float+0x3b0>
 800cad0:	f04f 0900 	mov.w	r9, #0
 800cad4:	e629      	b.n	800c72a <_scanf_float+0x72>
 800cad6:	bf00      	nop
 800cad8:	08010035 	.word	0x08010035
 800cadc:	080100ee 	.word	0x080100ee

0800cae0 <std>:
 800cae0:	2300      	movs	r3, #0
 800cae2:	b510      	push	{r4, lr}
 800cae4:	4604      	mov	r4, r0
 800cae6:	e9c0 3300 	strd	r3, r3, [r0]
 800caea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800caee:	6083      	str	r3, [r0, #8]
 800caf0:	8181      	strh	r1, [r0, #12]
 800caf2:	6643      	str	r3, [r0, #100]	@ 0x64
 800caf4:	81c2      	strh	r2, [r0, #14]
 800caf6:	6183      	str	r3, [r0, #24]
 800caf8:	4619      	mov	r1, r3
 800cafa:	2208      	movs	r2, #8
 800cafc:	305c      	adds	r0, #92	@ 0x5c
 800cafe:	f000 fa19 	bl	800cf34 <memset>
 800cb02:	4b0d      	ldr	r3, [pc, #52]	@ (800cb38 <std+0x58>)
 800cb04:	6263      	str	r3, [r4, #36]	@ 0x24
 800cb06:	4b0d      	ldr	r3, [pc, #52]	@ (800cb3c <std+0x5c>)
 800cb08:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cb0a:	4b0d      	ldr	r3, [pc, #52]	@ (800cb40 <std+0x60>)
 800cb0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cb0e:	4b0d      	ldr	r3, [pc, #52]	@ (800cb44 <std+0x64>)
 800cb10:	6323      	str	r3, [r4, #48]	@ 0x30
 800cb12:	4b0d      	ldr	r3, [pc, #52]	@ (800cb48 <std+0x68>)
 800cb14:	6224      	str	r4, [r4, #32]
 800cb16:	429c      	cmp	r4, r3
 800cb18:	d006      	beq.n	800cb28 <std+0x48>
 800cb1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cb1e:	4294      	cmp	r4, r2
 800cb20:	d002      	beq.n	800cb28 <std+0x48>
 800cb22:	33d0      	adds	r3, #208	@ 0xd0
 800cb24:	429c      	cmp	r4, r3
 800cb26:	d105      	bne.n	800cb34 <std+0x54>
 800cb28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cb2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb30:	f000 baea 	b.w	800d108 <__retarget_lock_init_recursive>
 800cb34:	bd10      	pop	{r4, pc}
 800cb36:	bf00      	nop
 800cb38:	0800cd85 	.word	0x0800cd85
 800cb3c:	0800cda7 	.word	0x0800cda7
 800cb40:	0800cddf 	.word	0x0800cddf
 800cb44:	0800ce03 	.word	0x0800ce03
 800cb48:	20004fe4 	.word	0x20004fe4

0800cb4c <stdio_exit_handler>:
 800cb4c:	4a02      	ldr	r2, [pc, #8]	@ (800cb58 <stdio_exit_handler+0xc>)
 800cb4e:	4903      	ldr	r1, [pc, #12]	@ (800cb5c <stdio_exit_handler+0x10>)
 800cb50:	4803      	ldr	r0, [pc, #12]	@ (800cb60 <stdio_exit_handler+0x14>)
 800cb52:	f000 b869 	b.w	800cc28 <_fwalk_sglue>
 800cb56:	bf00      	nop
 800cb58:	200000d4 	.word	0x200000d4
 800cb5c:	0800f671 	.word	0x0800f671
 800cb60:	20000250 	.word	0x20000250

0800cb64 <cleanup_stdio>:
 800cb64:	6841      	ldr	r1, [r0, #4]
 800cb66:	4b0c      	ldr	r3, [pc, #48]	@ (800cb98 <cleanup_stdio+0x34>)
 800cb68:	4299      	cmp	r1, r3
 800cb6a:	b510      	push	{r4, lr}
 800cb6c:	4604      	mov	r4, r0
 800cb6e:	d001      	beq.n	800cb74 <cleanup_stdio+0x10>
 800cb70:	f002 fd7e 	bl	800f670 <_fflush_r>
 800cb74:	68a1      	ldr	r1, [r4, #8]
 800cb76:	4b09      	ldr	r3, [pc, #36]	@ (800cb9c <cleanup_stdio+0x38>)
 800cb78:	4299      	cmp	r1, r3
 800cb7a:	d002      	beq.n	800cb82 <cleanup_stdio+0x1e>
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	f002 fd77 	bl	800f670 <_fflush_r>
 800cb82:	68e1      	ldr	r1, [r4, #12]
 800cb84:	4b06      	ldr	r3, [pc, #24]	@ (800cba0 <cleanup_stdio+0x3c>)
 800cb86:	4299      	cmp	r1, r3
 800cb88:	d004      	beq.n	800cb94 <cleanup_stdio+0x30>
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb90:	f002 bd6e 	b.w	800f670 <_fflush_r>
 800cb94:	bd10      	pop	{r4, pc}
 800cb96:	bf00      	nop
 800cb98:	20004fe4 	.word	0x20004fe4
 800cb9c:	2000504c 	.word	0x2000504c
 800cba0:	200050b4 	.word	0x200050b4

0800cba4 <global_stdio_init.part.0>:
 800cba4:	b510      	push	{r4, lr}
 800cba6:	4b0b      	ldr	r3, [pc, #44]	@ (800cbd4 <global_stdio_init.part.0+0x30>)
 800cba8:	4c0b      	ldr	r4, [pc, #44]	@ (800cbd8 <global_stdio_init.part.0+0x34>)
 800cbaa:	4a0c      	ldr	r2, [pc, #48]	@ (800cbdc <global_stdio_init.part.0+0x38>)
 800cbac:	601a      	str	r2, [r3, #0]
 800cbae:	4620      	mov	r0, r4
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	2104      	movs	r1, #4
 800cbb4:	f7ff ff94 	bl	800cae0 <std>
 800cbb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	2109      	movs	r1, #9
 800cbc0:	f7ff ff8e 	bl	800cae0 <std>
 800cbc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cbc8:	2202      	movs	r2, #2
 800cbca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbce:	2112      	movs	r1, #18
 800cbd0:	f7ff bf86 	b.w	800cae0 <std>
 800cbd4:	2000511c 	.word	0x2000511c
 800cbd8:	20004fe4 	.word	0x20004fe4
 800cbdc:	0800cb4d 	.word	0x0800cb4d

0800cbe0 <__sfp_lock_acquire>:
 800cbe0:	4801      	ldr	r0, [pc, #4]	@ (800cbe8 <__sfp_lock_acquire+0x8>)
 800cbe2:	f000 ba92 	b.w	800d10a <__retarget_lock_acquire_recursive>
 800cbe6:	bf00      	nop
 800cbe8:	20005125 	.word	0x20005125

0800cbec <__sfp_lock_release>:
 800cbec:	4801      	ldr	r0, [pc, #4]	@ (800cbf4 <__sfp_lock_release+0x8>)
 800cbee:	f000 ba8d 	b.w	800d10c <__retarget_lock_release_recursive>
 800cbf2:	bf00      	nop
 800cbf4:	20005125 	.word	0x20005125

0800cbf8 <__sinit>:
 800cbf8:	b510      	push	{r4, lr}
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	f7ff fff0 	bl	800cbe0 <__sfp_lock_acquire>
 800cc00:	6a23      	ldr	r3, [r4, #32]
 800cc02:	b11b      	cbz	r3, 800cc0c <__sinit+0x14>
 800cc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc08:	f7ff bff0 	b.w	800cbec <__sfp_lock_release>
 800cc0c:	4b04      	ldr	r3, [pc, #16]	@ (800cc20 <__sinit+0x28>)
 800cc0e:	6223      	str	r3, [r4, #32]
 800cc10:	4b04      	ldr	r3, [pc, #16]	@ (800cc24 <__sinit+0x2c>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d1f5      	bne.n	800cc04 <__sinit+0xc>
 800cc18:	f7ff ffc4 	bl	800cba4 <global_stdio_init.part.0>
 800cc1c:	e7f2      	b.n	800cc04 <__sinit+0xc>
 800cc1e:	bf00      	nop
 800cc20:	0800cb65 	.word	0x0800cb65
 800cc24:	2000511c 	.word	0x2000511c

0800cc28 <_fwalk_sglue>:
 800cc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc2c:	4607      	mov	r7, r0
 800cc2e:	4688      	mov	r8, r1
 800cc30:	4614      	mov	r4, r2
 800cc32:	2600      	movs	r6, #0
 800cc34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc38:	f1b9 0901 	subs.w	r9, r9, #1
 800cc3c:	d505      	bpl.n	800cc4a <_fwalk_sglue+0x22>
 800cc3e:	6824      	ldr	r4, [r4, #0]
 800cc40:	2c00      	cmp	r4, #0
 800cc42:	d1f7      	bne.n	800cc34 <_fwalk_sglue+0xc>
 800cc44:	4630      	mov	r0, r6
 800cc46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc4a:	89ab      	ldrh	r3, [r5, #12]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d907      	bls.n	800cc60 <_fwalk_sglue+0x38>
 800cc50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc54:	3301      	adds	r3, #1
 800cc56:	d003      	beq.n	800cc60 <_fwalk_sglue+0x38>
 800cc58:	4629      	mov	r1, r5
 800cc5a:	4638      	mov	r0, r7
 800cc5c:	47c0      	blx	r8
 800cc5e:	4306      	orrs	r6, r0
 800cc60:	3568      	adds	r5, #104	@ 0x68
 800cc62:	e7e9      	b.n	800cc38 <_fwalk_sglue+0x10>

0800cc64 <iprintf>:
 800cc64:	b40f      	push	{r0, r1, r2, r3}
 800cc66:	b507      	push	{r0, r1, r2, lr}
 800cc68:	4906      	ldr	r1, [pc, #24]	@ (800cc84 <iprintf+0x20>)
 800cc6a:	ab04      	add	r3, sp, #16
 800cc6c:	6808      	ldr	r0, [r1, #0]
 800cc6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc72:	6881      	ldr	r1, [r0, #8]
 800cc74:	9301      	str	r3, [sp, #4]
 800cc76:	f002 fb5f 	bl	800f338 <_vfiprintf_r>
 800cc7a:	b003      	add	sp, #12
 800cc7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc80:	b004      	add	sp, #16
 800cc82:	4770      	bx	lr
 800cc84:	2000024c 	.word	0x2000024c

0800cc88 <_puts_r>:
 800cc88:	6a03      	ldr	r3, [r0, #32]
 800cc8a:	b570      	push	{r4, r5, r6, lr}
 800cc8c:	6884      	ldr	r4, [r0, #8]
 800cc8e:	4605      	mov	r5, r0
 800cc90:	460e      	mov	r6, r1
 800cc92:	b90b      	cbnz	r3, 800cc98 <_puts_r+0x10>
 800cc94:	f7ff ffb0 	bl	800cbf8 <__sinit>
 800cc98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc9a:	07db      	lsls	r3, r3, #31
 800cc9c:	d405      	bmi.n	800ccaa <_puts_r+0x22>
 800cc9e:	89a3      	ldrh	r3, [r4, #12]
 800cca0:	0598      	lsls	r0, r3, #22
 800cca2:	d402      	bmi.n	800ccaa <_puts_r+0x22>
 800cca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cca6:	f000 fa30 	bl	800d10a <__retarget_lock_acquire_recursive>
 800ccaa:	89a3      	ldrh	r3, [r4, #12]
 800ccac:	0719      	lsls	r1, r3, #28
 800ccae:	d502      	bpl.n	800ccb6 <_puts_r+0x2e>
 800ccb0:	6923      	ldr	r3, [r4, #16]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d135      	bne.n	800cd22 <_puts_r+0x9a>
 800ccb6:	4621      	mov	r1, r4
 800ccb8:	4628      	mov	r0, r5
 800ccba:	f000 f8e5 	bl	800ce88 <__swsetup_r>
 800ccbe:	b380      	cbz	r0, 800cd22 <_puts_r+0x9a>
 800ccc0:	f04f 35ff 	mov.w	r5, #4294967295
 800ccc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ccc6:	07da      	lsls	r2, r3, #31
 800ccc8:	d405      	bmi.n	800ccd6 <_puts_r+0x4e>
 800ccca:	89a3      	ldrh	r3, [r4, #12]
 800cccc:	059b      	lsls	r3, r3, #22
 800ccce:	d402      	bmi.n	800ccd6 <_puts_r+0x4e>
 800ccd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccd2:	f000 fa1b 	bl	800d10c <__retarget_lock_release_recursive>
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	bd70      	pop	{r4, r5, r6, pc}
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	da04      	bge.n	800cce8 <_puts_r+0x60>
 800ccde:	69a2      	ldr	r2, [r4, #24]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	dc17      	bgt.n	800cd14 <_puts_r+0x8c>
 800cce4:	290a      	cmp	r1, #10
 800cce6:	d015      	beq.n	800cd14 <_puts_r+0x8c>
 800cce8:	6823      	ldr	r3, [r4, #0]
 800ccea:	1c5a      	adds	r2, r3, #1
 800ccec:	6022      	str	r2, [r4, #0]
 800ccee:	7019      	strb	r1, [r3, #0]
 800ccf0:	68a3      	ldr	r3, [r4, #8]
 800ccf2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	60a3      	str	r3, [r4, #8]
 800ccfa:	2900      	cmp	r1, #0
 800ccfc:	d1ed      	bne.n	800ccda <_puts_r+0x52>
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	da11      	bge.n	800cd26 <_puts_r+0x9e>
 800cd02:	4622      	mov	r2, r4
 800cd04:	210a      	movs	r1, #10
 800cd06:	4628      	mov	r0, r5
 800cd08:	f000 f87f 	bl	800ce0a <__swbuf_r>
 800cd0c:	3001      	adds	r0, #1
 800cd0e:	d0d7      	beq.n	800ccc0 <_puts_r+0x38>
 800cd10:	250a      	movs	r5, #10
 800cd12:	e7d7      	b.n	800ccc4 <_puts_r+0x3c>
 800cd14:	4622      	mov	r2, r4
 800cd16:	4628      	mov	r0, r5
 800cd18:	f000 f877 	bl	800ce0a <__swbuf_r>
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	d1e7      	bne.n	800ccf0 <_puts_r+0x68>
 800cd20:	e7ce      	b.n	800ccc0 <_puts_r+0x38>
 800cd22:	3e01      	subs	r6, #1
 800cd24:	e7e4      	b.n	800ccf0 <_puts_r+0x68>
 800cd26:	6823      	ldr	r3, [r4, #0]
 800cd28:	1c5a      	adds	r2, r3, #1
 800cd2a:	6022      	str	r2, [r4, #0]
 800cd2c:	220a      	movs	r2, #10
 800cd2e:	701a      	strb	r2, [r3, #0]
 800cd30:	e7ee      	b.n	800cd10 <_puts_r+0x88>
	...

0800cd34 <puts>:
 800cd34:	4b02      	ldr	r3, [pc, #8]	@ (800cd40 <puts+0xc>)
 800cd36:	4601      	mov	r1, r0
 800cd38:	6818      	ldr	r0, [r3, #0]
 800cd3a:	f7ff bfa5 	b.w	800cc88 <_puts_r>
 800cd3e:	bf00      	nop
 800cd40:	2000024c 	.word	0x2000024c

0800cd44 <siprintf>:
 800cd44:	b40e      	push	{r1, r2, r3}
 800cd46:	b500      	push	{lr}
 800cd48:	b09c      	sub	sp, #112	@ 0x70
 800cd4a:	ab1d      	add	r3, sp, #116	@ 0x74
 800cd4c:	9002      	str	r0, [sp, #8]
 800cd4e:	9006      	str	r0, [sp, #24]
 800cd50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cd54:	4809      	ldr	r0, [pc, #36]	@ (800cd7c <siprintf+0x38>)
 800cd56:	9107      	str	r1, [sp, #28]
 800cd58:	9104      	str	r1, [sp, #16]
 800cd5a:	4909      	ldr	r1, [pc, #36]	@ (800cd80 <siprintf+0x3c>)
 800cd5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd60:	9105      	str	r1, [sp, #20]
 800cd62:	6800      	ldr	r0, [r0, #0]
 800cd64:	9301      	str	r3, [sp, #4]
 800cd66:	a902      	add	r1, sp, #8
 800cd68:	f002 f9c0 	bl	800f0ec <_svfiprintf_r>
 800cd6c:	9b02      	ldr	r3, [sp, #8]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	701a      	strb	r2, [r3, #0]
 800cd72:	b01c      	add	sp, #112	@ 0x70
 800cd74:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd78:	b003      	add	sp, #12
 800cd7a:	4770      	bx	lr
 800cd7c:	2000024c 	.word	0x2000024c
 800cd80:	ffff0208 	.word	0xffff0208

0800cd84 <__sread>:
 800cd84:	b510      	push	{r4, lr}
 800cd86:	460c      	mov	r4, r1
 800cd88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd8c:	f000 f96e 	bl	800d06c <_read_r>
 800cd90:	2800      	cmp	r0, #0
 800cd92:	bfab      	itete	ge
 800cd94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cd96:	89a3      	ldrhlt	r3, [r4, #12]
 800cd98:	181b      	addge	r3, r3, r0
 800cd9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cd9e:	bfac      	ite	ge
 800cda0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cda2:	81a3      	strhlt	r3, [r4, #12]
 800cda4:	bd10      	pop	{r4, pc}

0800cda6 <__swrite>:
 800cda6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdaa:	461f      	mov	r7, r3
 800cdac:	898b      	ldrh	r3, [r1, #12]
 800cdae:	05db      	lsls	r3, r3, #23
 800cdb0:	4605      	mov	r5, r0
 800cdb2:	460c      	mov	r4, r1
 800cdb4:	4616      	mov	r6, r2
 800cdb6:	d505      	bpl.n	800cdc4 <__swrite+0x1e>
 800cdb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdbc:	2302      	movs	r3, #2
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f000 f942 	bl	800d048 <_lseek_r>
 800cdc4:	89a3      	ldrh	r3, [r4, #12]
 800cdc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cdce:	81a3      	strh	r3, [r4, #12]
 800cdd0:	4632      	mov	r2, r6
 800cdd2:	463b      	mov	r3, r7
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdda:	f000 b959 	b.w	800d090 <_write_r>

0800cdde <__sseek>:
 800cdde:	b510      	push	{r4, lr}
 800cde0:	460c      	mov	r4, r1
 800cde2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cde6:	f000 f92f 	bl	800d048 <_lseek_r>
 800cdea:	1c43      	adds	r3, r0, #1
 800cdec:	89a3      	ldrh	r3, [r4, #12]
 800cdee:	bf15      	itete	ne
 800cdf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cdf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cdf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cdfa:	81a3      	strheq	r3, [r4, #12]
 800cdfc:	bf18      	it	ne
 800cdfe:	81a3      	strhne	r3, [r4, #12]
 800ce00:	bd10      	pop	{r4, pc}

0800ce02 <__sclose>:
 800ce02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce06:	f000 b90f 	b.w	800d028 <_close_r>

0800ce0a <__swbuf_r>:
 800ce0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0c:	460e      	mov	r6, r1
 800ce0e:	4614      	mov	r4, r2
 800ce10:	4605      	mov	r5, r0
 800ce12:	b118      	cbz	r0, 800ce1c <__swbuf_r+0x12>
 800ce14:	6a03      	ldr	r3, [r0, #32]
 800ce16:	b90b      	cbnz	r3, 800ce1c <__swbuf_r+0x12>
 800ce18:	f7ff feee 	bl	800cbf8 <__sinit>
 800ce1c:	69a3      	ldr	r3, [r4, #24]
 800ce1e:	60a3      	str	r3, [r4, #8]
 800ce20:	89a3      	ldrh	r3, [r4, #12]
 800ce22:	071a      	lsls	r2, r3, #28
 800ce24:	d501      	bpl.n	800ce2a <__swbuf_r+0x20>
 800ce26:	6923      	ldr	r3, [r4, #16]
 800ce28:	b943      	cbnz	r3, 800ce3c <__swbuf_r+0x32>
 800ce2a:	4621      	mov	r1, r4
 800ce2c:	4628      	mov	r0, r5
 800ce2e:	f000 f82b 	bl	800ce88 <__swsetup_r>
 800ce32:	b118      	cbz	r0, 800ce3c <__swbuf_r+0x32>
 800ce34:	f04f 37ff 	mov.w	r7, #4294967295
 800ce38:	4638      	mov	r0, r7
 800ce3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce3c:	6823      	ldr	r3, [r4, #0]
 800ce3e:	6922      	ldr	r2, [r4, #16]
 800ce40:	1a98      	subs	r0, r3, r2
 800ce42:	6963      	ldr	r3, [r4, #20]
 800ce44:	b2f6      	uxtb	r6, r6
 800ce46:	4283      	cmp	r3, r0
 800ce48:	4637      	mov	r7, r6
 800ce4a:	dc05      	bgt.n	800ce58 <__swbuf_r+0x4e>
 800ce4c:	4621      	mov	r1, r4
 800ce4e:	4628      	mov	r0, r5
 800ce50:	f002 fc0e 	bl	800f670 <_fflush_r>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	d1ed      	bne.n	800ce34 <__swbuf_r+0x2a>
 800ce58:	68a3      	ldr	r3, [r4, #8]
 800ce5a:	3b01      	subs	r3, #1
 800ce5c:	60a3      	str	r3, [r4, #8]
 800ce5e:	6823      	ldr	r3, [r4, #0]
 800ce60:	1c5a      	adds	r2, r3, #1
 800ce62:	6022      	str	r2, [r4, #0]
 800ce64:	701e      	strb	r6, [r3, #0]
 800ce66:	6962      	ldr	r2, [r4, #20]
 800ce68:	1c43      	adds	r3, r0, #1
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d004      	beq.n	800ce78 <__swbuf_r+0x6e>
 800ce6e:	89a3      	ldrh	r3, [r4, #12]
 800ce70:	07db      	lsls	r3, r3, #31
 800ce72:	d5e1      	bpl.n	800ce38 <__swbuf_r+0x2e>
 800ce74:	2e0a      	cmp	r6, #10
 800ce76:	d1df      	bne.n	800ce38 <__swbuf_r+0x2e>
 800ce78:	4621      	mov	r1, r4
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	f002 fbf8 	bl	800f670 <_fflush_r>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	d0d9      	beq.n	800ce38 <__swbuf_r+0x2e>
 800ce84:	e7d6      	b.n	800ce34 <__swbuf_r+0x2a>
	...

0800ce88 <__swsetup_r>:
 800ce88:	b538      	push	{r3, r4, r5, lr}
 800ce8a:	4b29      	ldr	r3, [pc, #164]	@ (800cf30 <__swsetup_r+0xa8>)
 800ce8c:	4605      	mov	r5, r0
 800ce8e:	6818      	ldr	r0, [r3, #0]
 800ce90:	460c      	mov	r4, r1
 800ce92:	b118      	cbz	r0, 800ce9c <__swsetup_r+0x14>
 800ce94:	6a03      	ldr	r3, [r0, #32]
 800ce96:	b90b      	cbnz	r3, 800ce9c <__swsetup_r+0x14>
 800ce98:	f7ff feae 	bl	800cbf8 <__sinit>
 800ce9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cea0:	0719      	lsls	r1, r3, #28
 800cea2:	d422      	bmi.n	800ceea <__swsetup_r+0x62>
 800cea4:	06da      	lsls	r2, r3, #27
 800cea6:	d407      	bmi.n	800ceb8 <__swsetup_r+0x30>
 800cea8:	2209      	movs	r2, #9
 800ceaa:	602a      	str	r2, [r5, #0]
 800ceac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ceb0:	81a3      	strh	r3, [r4, #12]
 800ceb2:	f04f 30ff 	mov.w	r0, #4294967295
 800ceb6:	e033      	b.n	800cf20 <__swsetup_r+0x98>
 800ceb8:	0758      	lsls	r0, r3, #29
 800ceba:	d512      	bpl.n	800cee2 <__swsetup_r+0x5a>
 800cebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cebe:	b141      	cbz	r1, 800ced2 <__swsetup_r+0x4a>
 800cec0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cec4:	4299      	cmp	r1, r3
 800cec6:	d002      	beq.n	800cece <__swsetup_r+0x46>
 800cec8:	4628      	mov	r0, r5
 800ceca:	f000 ffa9 	bl	800de20 <_free_r>
 800cece:	2300      	movs	r3, #0
 800ced0:	6363      	str	r3, [r4, #52]	@ 0x34
 800ced2:	89a3      	ldrh	r3, [r4, #12]
 800ced4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ced8:	81a3      	strh	r3, [r4, #12]
 800ceda:	2300      	movs	r3, #0
 800cedc:	6063      	str	r3, [r4, #4]
 800cede:	6923      	ldr	r3, [r4, #16]
 800cee0:	6023      	str	r3, [r4, #0]
 800cee2:	89a3      	ldrh	r3, [r4, #12]
 800cee4:	f043 0308 	orr.w	r3, r3, #8
 800cee8:	81a3      	strh	r3, [r4, #12]
 800ceea:	6923      	ldr	r3, [r4, #16]
 800ceec:	b94b      	cbnz	r3, 800cf02 <__swsetup_r+0x7a>
 800ceee:	89a3      	ldrh	r3, [r4, #12]
 800cef0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cef8:	d003      	beq.n	800cf02 <__swsetup_r+0x7a>
 800cefa:	4621      	mov	r1, r4
 800cefc:	4628      	mov	r0, r5
 800cefe:	f002 fc17 	bl	800f730 <__smakebuf_r>
 800cf02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf06:	f013 0201 	ands.w	r2, r3, #1
 800cf0a:	d00a      	beq.n	800cf22 <__swsetup_r+0x9a>
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	60a2      	str	r2, [r4, #8]
 800cf10:	6962      	ldr	r2, [r4, #20]
 800cf12:	4252      	negs	r2, r2
 800cf14:	61a2      	str	r2, [r4, #24]
 800cf16:	6922      	ldr	r2, [r4, #16]
 800cf18:	b942      	cbnz	r2, 800cf2c <__swsetup_r+0xa4>
 800cf1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cf1e:	d1c5      	bne.n	800ceac <__swsetup_r+0x24>
 800cf20:	bd38      	pop	{r3, r4, r5, pc}
 800cf22:	0799      	lsls	r1, r3, #30
 800cf24:	bf58      	it	pl
 800cf26:	6962      	ldrpl	r2, [r4, #20]
 800cf28:	60a2      	str	r2, [r4, #8]
 800cf2a:	e7f4      	b.n	800cf16 <__swsetup_r+0x8e>
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	e7f7      	b.n	800cf20 <__swsetup_r+0x98>
 800cf30:	2000024c 	.word	0x2000024c

0800cf34 <memset>:
 800cf34:	4402      	add	r2, r0
 800cf36:	4603      	mov	r3, r0
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d100      	bne.n	800cf3e <memset+0xa>
 800cf3c:	4770      	bx	lr
 800cf3e:	f803 1b01 	strb.w	r1, [r3], #1
 800cf42:	e7f9      	b.n	800cf38 <memset+0x4>

0800cf44 <strncmp>:
 800cf44:	b510      	push	{r4, lr}
 800cf46:	b16a      	cbz	r2, 800cf64 <strncmp+0x20>
 800cf48:	3901      	subs	r1, #1
 800cf4a:	1884      	adds	r4, r0, r2
 800cf4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf50:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d103      	bne.n	800cf60 <strncmp+0x1c>
 800cf58:	42a0      	cmp	r0, r4
 800cf5a:	d001      	beq.n	800cf60 <strncmp+0x1c>
 800cf5c:	2a00      	cmp	r2, #0
 800cf5e:	d1f5      	bne.n	800cf4c <strncmp+0x8>
 800cf60:	1ad0      	subs	r0, r2, r3
 800cf62:	bd10      	pop	{r4, pc}
 800cf64:	4610      	mov	r0, r2
 800cf66:	e7fc      	b.n	800cf62 <strncmp+0x1e>

0800cf68 <strtok>:
 800cf68:	4b16      	ldr	r3, [pc, #88]	@ (800cfc4 <strtok+0x5c>)
 800cf6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf6e:	681f      	ldr	r7, [r3, #0]
 800cf70:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800cf72:	4605      	mov	r5, r0
 800cf74:	460e      	mov	r6, r1
 800cf76:	b9ec      	cbnz	r4, 800cfb4 <strtok+0x4c>
 800cf78:	2050      	movs	r0, #80	@ 0x50
 800cf7a:	f001 fad5 	bl	800e528 <malloc>
 800cf7e:	4602      	mov	r2, r0
 800cf80:	6478      	str	r0, [r7, #68]	@ 0x44
 800cf82:	b920      	cbnz	r0, 800cf8e <strtok+0x26>
 800cf84:	4b10      	ldr	r3, [pc, #64]	@ (800cfc8 <strtok+0x60>)
 800cf86:	4811      	ldr	r0, [pc, #68]	@ (800cfcc <strtok+0x64>)
 800cf88:	215b      	movs	r1, #91	@ 0x5b
 800cf8a:	f000 f8df 	bl	800d14c <__assert_func>
 800cf8e:	e9c0 4400 	strd	r4, r4, [r0]
 800cf92:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800cf96:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800cf9a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800cf9e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800cfa2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800cfa6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800cfaa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800cfae:	6184      	str	r4, [r0, #24]
 800cfb0:	7704      	strb	r4, [r0, #28]
 800cfb2:	6244      	str	r4, [r0, #36]	@ 0x24
 800cfb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfb6:	4631      	mov	r1, r6
 800cfb8:	4628      	mov	r0, r5
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfc0:	f000 b806 	b.w	800cfd0 <__strtok_r>
 800cfc4:	2000024c 	.word	0x2000024c
 800cfc8:	0801003a 	.word	0x0801003a
 800cfcc:	08010051 	.word	0x08010051

0800cfd0 <__strtok_r>:
 800cfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	b908      	cbnz	r0, 800cfda <__strtok_r+0xa>
 800cfd6:	6814      	ldr	r4, [r2, #0]
 800cfd8:	b144      	cbz	r4, 800cfec <__strtok_r+0x1c>
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cfe0:	460f      	mov	r7, r1
 800cfe2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cfe6:	b91e      	cbnz	r6, 800cff0 <__strtok_r+0x20>
 800cfe8:	b965      	cbnz	r5, 800d004 <__strtok_r+0x34>
 800cfea:	6015      	str	r5, [r2, #0]
 800cfec:	2000      	movs	r0, #0
 800cfee:	e005      	b.n	800cffc <__strtok_r+0x2c>
 800cff0:	42b5      	cmp	r5, r6
 800cff2:	d1f6      	bne.n	800cfe2 <__strtok_r+0x12>
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d1f0      	bne.n	800cfda <__strtok_r+0xa>
 800cff8:	6014      	str	r4, [r2, #0]
 800cffa:	7003      	strb	r3, [r0, #0]
 800cffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cffe:	461c      	mov	r4, r3
 800d000:	e00c      	b.n	800d01c <__strtok_r+0x4c>
 800d002:	b915      	cbnz	r5, 800d00a <__strtok_r+0x3a>
 800d004:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d008:	460e      	mov	r6, r1
 800d00a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d00e:	42ab      	cmp	r3, r5
 800d010:	d1f7      	bne.n	800d002 <__strtok_r+0x32>
 800d012:	2b00      	cmp	r3, #0
 800d014:	d0f3      	beq.n	800cffe <__strtok_r+0x2e>
 800d016:	2300      	movs	r3, #0
 800d018:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d01c:	6014      	str	r4, [r2, #0]
 800d01e:	e7ed      	b.n	800cffc <__strtok_r+0x2c>

0800d020 <_localeconv_r>:
 800d020:	4800      	ldr	r0, [pc, #0]	@ (800d024 <_localeconv_r+0x4>)
 800d022:	4770      	bx	lr
 800d024:	200001d0 	.word	0x200001d0

0800d028 <_close_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	4d06      	ldr	r5, [pc, #24]	@ (800d044 <_close_r+0x1c>)
 800d02c:	2300      	movs	r3, #0
 800d02e:	4604      	mov	r4, r0
 800d030:	4608      	mov	r0, r1
 800d032:	602b      	str	r3, [r5, #0]
 800d034:	f7f4 fe70 	bl	8001d18 <_close>
 800d038:	1c43      	adds	r3, r0, #1
 800d03a:	d102      	bne.n	800d042 <_close_r+0x1a>
 800d03c:	682b      	ldr	r3, [r5, #0]
 800d03e:	b103      	cbz	r3, 800d042 <_close_r+0x1a>
 800d040:	6023      	str	r3, [r4, #0]
 800d042:	bd38      	pop	{r3, r4, r5, pc}
 800d044:	20005120 	.word	0x20005120

0800d048 <_lseek_r>:
 800d048:	b538      	push	{r3, r4, r5, lr}
 800d04a:	4d07      	ldr	r5, [pc, #28]	@ (800d068 <_lseek_r+0x20>)
 800d04c:	4604      	mov	r4, r0
 800d04e:	4608      	mov	r0, r1
 800d050:	4611      	mov	r1, r2
 800d052:	2200      	movs	r2, #0
 800d054:	602a      	str	r2, [r5, #0]
 800d056:	461a      	mov	r2, r3
 800d058:	f7f4 fe85 	bl	8001d66 <_lseek>
 800d05c:	1c43      	adds	r3, r0, #1
 800d05e:	d102      	bne.n	800d066 <_lseek_r+0x1e>
 800d060:	682b      	ldr	r3, [r5, #0]
 800d062:	b103      	cbz	r3, 800d066 <_lseek_r+0x1e>
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	bd38      	pop	{r3, r4, r5, pc}
 800d068:	20005120 	.word	0x20005120

0800d06c <_read_r>:
 800d06c:	b538      	push	{r3, r4, r5, lr}
 800d06e:	4d07      	ldr	r5, [pc, #28]	@ (800d08c <_read_r+0x20>)
 800d070:	4604      	mov	r4, r0
 800d072:	4608      	mov	r0, r1
 800d074:	4611      	mov	r1, r2
 800d076:	2200      	movs	r2, #0
 800d078:	602a      	str	r2, [r5, #0]
 800d07a:	461a      	mov	r2, r3
 800d07c:	f7f4 fe2f 	bl	8001cde <_read>
 800d080:	1c43      	adds	r3, r0, #1
 800d082:	d102      	bne.n	800d08a <_read_r+0x1e>
 800d084:	682b      	ldr	r3, [r5, #0]
 800d086:	b103      	cbz	r3, 800d08a <_read_r+0x1e>
 800d088:	6023      	str	r3, [r4, #0]
 800d08a:	bd38      	pop	{r3, r4, r5, pc}
 800d08c:	20005120 	.word	0x20005120

0800d090 <_write_r>:
 800d090:	b538      	push	{r3, r4, r5, lr}
 800d092:	4d07      	ldr	r5, [pc, #28]	@ (800d0b0 <_write_r+0x20>)
 800d094:	4604      	mov	r4, r0
 800d096:	4608      	mov	r0, r1
 800d098:	4611      	mov	r1, r2
 800d09a:	2200      	movs	r2, #0
 800d09c:	602a      	str	r2, [r5, #0]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	f7f4 fc70 	bl	8001984 <_write>
 800d0a4:	1c43      	adds	r3, r0, #1
 800d0a6:	d102      	bne.n	800d0ae <_write_r+0x1e>
 800d0a8:	682b      	ldr	r3, [r5, #0]
 800d0aa:	b103      	cbz	r3, 800d0ae <_write_r+0x1e>
 800d0ac:	6023      	str	r3, [r4, #0]
 800d0ae:	bd38      	pop	{r3, r4, r5, pc}
 800d0b0:	20005120 	.word	0x20005120

0800d0b4 <__errno>:
 800d0b4:	4b01      	ldr	r3, [pc, #4]	@ (800d0bc <__errno+0x8>)
 800d0b6:	6818      	ldr	r0, [r3, #0]
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop
 800d0bc:	2000024c 	.word	0x2000024c

0800d0c0 <__libc_init_array>:
 800d0c0:	b570      	push	{r4, r5, r6, lr}
 800d0c2:	4d0d      	ldr	r5, [pc, #52]	@ (800d0f8 <__libc_init_array+0x38>)
 800d0c4:	4c0d      	ldr	r4, [pc, #52]	@ (800d0fc <__libc_init_array+0x3c>)
 800d0c6:	1b64      	subs	r4, r4, r5
 800d0c8:	10a4      	asrs	r4, r4, #2
 800d0ca:	2600      	movs	r6, #0
 800d0cc:	42a6      	cmp	r6, r4
 800d0ce:	d109      	bne.n	800d0e4 <__libc_init_array+0x24>
 800d0d0:	4d0b      	ldr	r5, [pc, #44]	@ (800d100 <__libc_init_array+0x40>)
 800d0d2:	4c0c      	ldr	r4, [pc, #48]	@ (800d104 <__libc_init_array+0x44>)
 800d0d4:	f002 fd50 	bl	800fb78 <_init>
 800d0d8:	1b64      	subs	r4, r4, r5
 800d0da:	10a4      	asrs	r4, r4, #2
 800d0dc:	2600      	movs	r6, #0
 800d0de:	42a6      	cmp	r6, r4
 800d0e0:	d105      	bne.n	800d0ee <__libc_init_array+0x2e>
 800d0e2:	bd70      	pop	{r4, r5, r6, pc}
 800d0e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0e8:	4798      	blx	r3
 800d0ea:	3601      	adds	r6, #1
 800d0ec:	e7ee      	b.n	800d0cc <__libc_init_array+0xc>
 800d0ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0f2:	4798      	blx	r3
 800d0f4:	3601      	adds	r6, #1
 800d0f6:	e7f2      	b.n	800d0de <__libc_init_array+0x1e>
 800d0f8:	0801033c 	.word	0x0801033c
 800d0fc:	0801033c 	.word	0x0801033c
 800d100:	0801033c 	.word	0x0801033c
 800d104:	08010340 	.word	0x08010340

0800d108 <__retarget_lock_init_recursive>:
 800d108:	4770      	bx	lr

0800d10a <__retarget_lock_acquire_recursive>:
 800d10a:	4770      	bx	lr

0800d10c <__retarget_lock_release_recursive>:
 800d10c:	4770      	bx	lr

0800d10e <memcpy>:
 800d10e:	440a      	add	r2, r1
 800d110:	4291      	cmp	r1, r2
 800d112:	f100 33ff 	add.w	r3, r0, #4294967295
 800d116:	d100      	bne.n	800d11a <memcpy+0xc>
 800d118:	4770      	bx	lr
 800d11a:	b510      	push	{r4, lr}
 800d11c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d120:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d124:	4291      	cmp	r1, r2
 800d126:	d1f9      	bne.n	800d11c <memcpy+0xe>
 800d128:	bd10      	pop	{r4, pc}
 800d12a:	0000      	movs	r0, r0
 800d12c:	0000      	movs	r0, r0
	...

0800d130 <nan>:
 800d130:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d138 <nan+0x8>
 800d134:	4770      	bx	lr
 800d136:	bf00      	nop
 800d138:	00000000 	.word	0x00000000
 800d13c:	7ff80000 	.word	0x7ff80000

0800d140 <nanf>:
 800d140:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d148 <nanf+0x8>
 800d144:	4770      	bx	lr
 800d146:	bf00      	nop
 800d148:	7fc00000 	.word	0x7fc00000

0800d14c <__assert_func>:
 800d14c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d14e:	4614      	mov	r4, r2
 800d150:	461a      	mov	r2, r3
 800d152:	4b09      	ldr	r3, [pc, #36]	@ (800d178 <__assert_func+0x2c>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4605      	mov	r5, r0
 800d158:	68d8      	ldr	r0, [r3, #12]
 800d15a:	b954      	cbnz	r4, 800d172 <__assert_func+0x26>
 800d15c:	4b07      	ldr	r3, [pc, #28]	@ (800d17c <__assert_func+0x30>)
 800d15e:	461c      	mov	r4, r3
 800d160:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d164:	9100      	str	r1, [sp, #0]
 800d166:	462b      	mov	r3, r5
 800d168:	4905      	ldr	r1, [pc, #20]	@ (800d180 <__assert_func+0x34>)
 800d16a:	f002 faa9 	bl	800f6c0 <fiprintf>
 800d16e:	f002 fb67 	bl	800f840 <abort>
 800d172:	4b04      	ldr	r3, [pc, #16]	@ (800d184 <__assert_func+0x38>)
 800d174:	e7f4      	b.n	800d160 <__assert_func+0x14>
 800d176:	bf00      	nop
 800d178:	2000024c 	.word	0x2000024c
 800d17c:	080100ee 	.word	0x080100ee
 800d180:	080100c0 	.word	0x080100c0
 800d184:	080100b3 	.word	0x080100b3

0800d188 <quorem>:
 800d188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d18c:	6903      	ldr	r3, [r0, #16]
 800d18e:	690c      	ldr	r4, [r1, #16]
 800d190:	42a3      	cmp	r3, r4
 800d192:	4607      	mov	r7, r0
 800d194:	db7e      	blt.n	800d294 <quorem+0x10c>
 800d196:	3c01      	subs	r4, #1
 800d198:	f101 0814 	add.w	r8, r1, #20
 800d19c:	00a3      	lsls	r3, r4, #2
 800d19e:	f100 0514 	add.w	r5, r0, #20
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d1a8:	9301      	str	r3, [sp, #4]
 800d1aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d1ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d1ba:	fbb2 f6f3 	udiv	r6, r2, r3
 800d1be:	d32e      	bcc.n	800d21e <quorem+0x96>
 800d1c0:	f04f 0a00 	mov.w	sl, #0
 800d1c4:	46c4      	mov	ip, r8
 800d1c6:	46ae      	mov	lr, r5
 800d1c8:	46d3      	mov	fp, sl
 800d1ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d1ce:	b298      	uxth	r0, r3
 800d1d0:	fb06 a000 	mla	r0, r6, r0, sl
 800d1d4:	0c02      	lsrs	r2, r0, #16
 800d1d6:	0c1b      	lsrs	r3, r3, #16
 800d1d8:	fb06 2303 	mla	r3, r6, r3, r2
 800d1dc:	f8de 2000 	ldr.w	r2, [lr]
 800d1e0:	b280      	uxth	r0, r0
 800d1e2:	b292      	uxth	r2, r2
 800d1e4:	1a12      	subs	r2, r2, r0
 800d1e6:	445a      	add	r2, fp
 800d1e8:	f8de 0000 	ldr.w	r0, [lr]
 800d1ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d1f6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d1fa:	b292      	uxth	r2, r2
 800d1fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d200:	45e1      	cmp	r9, ip
 800d202:	f84e 2b04 	str.w	r2, [lr], #4
 800d206:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d20a:	d2de      	bcs.n	800d1ca <quorem+0x42>
 800d20c:	9b00      	ldr	r3, [sp, #0]
 800d20e:	58eb      	ldr	r3, [r5, r3]
 800d210:	b92b      	cbnz	r3, 800d21e <quorem+0x96>
 800d212:	9b01      	ldr	r3, [sp, #4]
 800d214:	3b04      	subs	r3, #4
 800d216:	429d      	cmp	r5, r3
 800d218:	461a      	mov	r2, r3
 800d21a:	d32f      	bcc.n	800d27c <quorem+0xf4>
 800d21c:	613c      	str	r4, [r7, #16]
 800d21e:	4638      	mov	r0, r7
 800d220:	f001 fd0e 	bl	800ec40 <__mcmp>
 800d224:	2800      	cmp	r0, #0
 800d226:	db25      	blt.n	800d274 <quorem+0xec>
 800d228:	4629      	mov	r1, r5
 800d22a:	2000      	movs	r0, #0
 800d22c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d230:	f8d1 c000 	ldr.w	ip, [r1]
 800d234:	fa1f fe82 	uxth.w	lr, r2
 800d238:	fa1f f38c 	uxth.w	r3, ip
 800d23c:	eba3 030e 	sub.w	r3, r3, lr
 800d240:	4403      	add	r3, r0
 800d242:	0c12      	lsrs	r2, r2, #16
 800d244:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d248:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d252:	45c1      	cmp	r9, r8
 800d254:	f841 3b04 	str.w	r3, [r1], #4
 800d258:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d25c:	d2e6      	bcs.n	800d22c <quorem+0xa4>
 800d25e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d262:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d266:	b922      	cbnz	r2, 800d272 <quorem+0xea>
 800d268:	3b04      	subs	r3, #4
 800d26a:	429d      	cmp	r5, r3
 800d26c:	461a      	mov	r2, r3
 800d26e:	d30b      	bcc.n	800d288 <quorem+0x100>
 800d270:	613c      	str	r4, [r7, #16]
 800d272:	3601      	adds	r6, #1
 800d274:	4630      	mov	r0, r6
 800d276:	b003      	add	sp, #12
 800d278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d27c:	6812      	ldr	r2, [r2, #0]
 800d27e:	3b04      	subs	r3, #4
 800d280:	2a00      	cmp	r2, #0
 800d282:	d1cb      	bne.n	800d21c <quorem+0x94>
 800d284:	3c01      	subs	r4, #1
 800d286:	e7c6      	b.n	800d216 <quorem+0x8e>
 800d288:	6812      	ldr	r2, [r2, #0]
 800d28a:	3b04      	subs	r3, #4
 800d28c:	2a00      	cmp	r2, #0
 800d28e:	d1ef      	bne.n	800d270 <quorem+0xe8>
 800d290:	3c01      	subs	r4, #1
 800d292:	e7ea      	b.n	800d26a <quorem+0xe2>
 800d294:	2000      	movs	r0, #0
 800d296:	e7ee      	b.n	800d276 <quorem+0xee>

0800d298 <_dtoa_r>:
 800d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d29c:	69c7      	ldr	r7, [r0, #28]
 800d29e:	b099      	sub	sp, #100	@ 0x64
 800d2a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d2a4:	ec55 4b10 	vmov	r4, r5, d0
 800d2a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d2aa:	9109      	str	r1, [sp, #36]	@ 0x24
 800d2ac:	4683      	mov	fp, r0
 800d2ae:	920e      	str	r2, [sp, #56]	@ 0x38
 800d2b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d2b2:	b97f      	cbnz	r7, 800d2d4 <_dtoa_r+0x3c>
 800d2b4:	2010      	movs	r0, #16
 800d2b6:	f001 f937 	bl	800e528 <malloc>
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	f8cb 001c 	str.w	r0, [fp, #28]
 800d2c0:	b920      	cbnz	r0, 800d2cc <_dtoa_r+0x34>
 800d2c2:	4ba7      	ldr	r3, [pc, #668]	@ (800d560 <_dtoa_r+0x2c8>)
 800d2c4:	21ef      	movs	r1, #239	@ 0xef
 800d2c6:	48a7      	ldr	r0, [pc, #668]	@ (800d564 <_dtoa_r+0x2cc>)
 800d2c8:	f7ff ff40 	bl	800d14c <__assert_func>
 800d2cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d2d0:	6007      	str	r7, [r0, #0]
 800d2d2:	60c7      	str	r7, [r0, #12]
 800d2d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d2d8:	6819      	ldr	r1, [r3, #0]
 800d2da:	b159      	cbz	r1, 800d2f4 <_dtoa_r+0x5c>
 800d2dc:	685a      	ldr	r2, [r3, #4]
 800d2de:	604a      	str	r2, [r1, #4]
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	4093      	lsls	r3, r2
 800d2e4:	608b      	str	r3, [r1, #8]
 800d2e6:	4658      	mov	r0, fp
 800d2e8:	f001 fa26 	bl	800e738 <_Bfree>
 800d2ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	601a      	str	r2, [r3, #0]
 800d2f4:	1e2b      	subs	r3, r5, #0
 800d2f6:	bfb9      	ittee	lt
 800d2f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d2fc:	9303      	strlt	r3, [sp, #12]
 800d2fe:	2300      	movge	r3, #0
 800d300:	6033      	strge	r3, [r6, #0]
 800d302:	9f03      	ldr	r7, [sp, #12]
 800d304:	4b98      	ldr	r3, [pc, #608]	@ (800d568 <_dtoa_r+0x2d0>)
 800d306:	bfbc      	itt	lt
 800d308:	2201      	movlt	r2, #1
 800d30a:	6032      	strlt	r2, [r6, #0]
 800d30c:	43bb      	bics	r3, r7
 800d30e:	d112      	bne.n	800d336 <_dtoa_r+0x9e>
 800d310:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d312:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d316:	6013      	str	r3, [r2, #0]
 800d318:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d31c:	4323      	orrs	r3, r4
 800d31e:	f000 854d 	beq.w	800ddbc <_dtoa_r+0xb24>
 800d322:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d324:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d57c <_dtoa_r+0x2e4>
 800d328:	2b00      	cmp	r3, #0
 800d32a:	f000 854f 	beq.w	800ddcc <_dtoa_r+0xb34>
 800d32e:	f10a 0303 	add.w	r3, sl, #3
 800d332:	f000 bd49 	b.w	800ddc8 <_dtoa_r+0xb30>
 800d336:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d33a:	2200      	movs	r2, #0
 800d33c:	ec51 0b17 	vmov	r0, r1, d7
 800d340:	2300      	movs	r3, #0
 800d342:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d346:	f7f3 fbef 	bl	8000b28 <__aeabi_dcmpeq>
 800d34a:	4680      	mov	r8, r0
 800d34c:	b158      	cbz	r0, 800d366 <_dtoa_r+0xce>
 800d34e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d350:	2301      	movs	r3, #1
 800d352:	6013      	str	r3, [r2, #0]
 800d354:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d356:	b113      	cbz	r3, 800d35e <_dtoa_r+0xc6>
 800d358:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d35a:	4b84      	ldr	r3, [pc, #528]	@ (800d56c <_dtoa_r+0x2d4>)
 800d35c:	6013      	str	r3, [r2, #0]
 800d35e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d580 <_dtoa_r+0x2e8>
 800d362:	f000 bd33 	b.w	800ddcc <_dtoa_r+0xb34>
 800d366:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d36a:	aa16      	add	r2, sp, #88	@ 0x58
 800d36c:	a917      	add	r1, sp, #92	@ 0x5c
 800d36e:	4658      	mov	r0, fp
 800d370:	f001 fd86 	bl	800ee80 <__d2b>
 800d374:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d378:	4681      	mov	r9, r0
 800d37a:	2e00      	cmp	r6, #0
 800d37c:	d077      	beq.n	800d46e <_dtoa_r+0x1d6>
 800d37e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d380:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d38c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d390:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d394:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d398:	4619      	mov	r1, r3
 800d39a:	2200      	movs	r2, #0
 800d39c:	4b74      	ldr	r3, [pc, #464]	@ (800d570 <_dtoa_r+0x2d8>)
 800d39e:	f7f2 ffa3 	bl	80002e8 <__aeabi_dsub>
 800d3a2:	a369      	add	r3, pc, #420	@ (adr r3, 800d548 <_dtoa_r+0x2b0>)
 800d3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a8:	f7f3 f956 	bl	8000658 <__aeabi_dmul>
 800d3ac:	a368      	add	r3, pc, #416	@ (adr r3, 800d550 <_dtoa_r+0x2b8>)
 800d3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b2:	f7f2 ff9b 	bl	80002ec <__adddf3>
 800d3b6:	4604      	mov	r4, r0
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	460d      	mov	r5, r1
 800d3bc:	f7f3 f8e2 	bl	8000584 <__aeabi_i2d>
 800d3c0:	a365      	add	r3, pc, #404	@ (adr r3, 800d558 <_dtoa_r+0x2c0>)
 800d3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c6:	f7f3 f947 	bl	8000658 <__aeabi_dmul>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	4629      	mov	r1, r5
 800d3d2:	f7f2 ff8b 	bl	80002ec <__adddf3>
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	460d      	mov	r5, r1
 800d3da:	f7f3 fbed 	bl	8000bb8 <__aeabi_d2iz>
 800d3de:	2200      	movs	r2, #0
 800d3e0:	4607      	mov	r7, r0
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	4629      	mov	r1, r5
 800d3e8:	f7f3 fba8 	bl	8000b3c <__aeabi_dcmplt>
 800d3ec:	b140      	cbz	r0, 800d400 <_dtoa_r+0x168>
 800d3ee:	4638      	mov	r0, r7
 800d3f0:	f7f3 f8c8 	bl	8000584 <__aeabi_i2d>
 800d3f4:	4622      	mov	r2, r4
 800d3f6:	462b      	mov	r3, r5
 800d3f8:	f7f3 fb96 	bl	8000b28 <__aeabi_dcmpeq>
 800d3fc:	b900      	cbnz	r0, 800d400 <_dtoa_r+0x168>
 800d3fe:	3f01      	subs	r7, #1
 800d400:	2f16      	cmp	r7, #22
 800d402:	d851      	bhi.n	800d4a8 <_dtoa_r+0x210>
 800d404:	4b5b      	ldr	r3, [pc, #364]	@ (800d574 <_dtoa_r+0x2dc>)
 800d406:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d412:	f7f3 fb93 	bl	8000b3c <__aeabi_dcmplt>
 800d416:	2800      	cmp	r0, #0
 800d418:	d048      	beq.n	800d4ac <_dtoa_r+0x214>
 800d41a:	3f01      	subs	r7, #1
 800d41c:	2300      	movs	r3, #0
 800d41e:	9312      	str	r3, [sp, #72]	@ 0x48
 800d420:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d422:	1b9b      	subs	r3, r3, r6
 800d424:	1e5a      	subs	r2, r3, #1
 800d426:	bf44      	itt	mi
 800d428:	f1c3 0801 	rsbmi	r8, r3, #1
 800d42c:	2300      	movmi	r3, #0
 800d42e:	9208      	str	r2, [sp, #32]
 800d430:	bf54      	ite	pl
 800d432:	f04f 0800 	movpl.w	r8, #0
 800d436:	9308      	strmi	r3, [sp, #32]
 800d438:	2f00      	cmp	r7, #0
 800d43a:	db39      	blt.n	800d4b0 <_dtoa_r+0x218>
 800d43c:	9b08      	ldr	r3, [sp, #32]
 800d43e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d440:	443b      	add	r3, r7
 800d442:	9308      	str	r3, [sp, #32]
 800d444:	2300      	movs	r3, #0
 800d446:	930a      	str	r3, [sp, #40]	@ 0x28
 800d448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d44a:	2b09      	cmp	r3, #9
 800d44c:	d864      	bhi.n	800d518 <_dtoa_r+0x280>
 800d44e:	2b05      	cmp	r3, #5
 800d450:	bfc4      	itt	gt
 800d452:	3b04      	subgt	r3, #4
 800d454:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d458:	f1a3 0302 	sub.w	r3, r3, #2
 800d45c:	bfcc      	ite	gt
 800d45e:	2400      	movgt	r4, #0
 800d460:	2401      	movle	r4, #1
 800d462:	2b03      	cmp	r3, #3
 800d464:	d863      	bhi.n	800d52e <_dtoa_r+0x296>
 800d466:	e8df f003 	tbb	[pc, r3]
 800d46a:	372a      	.short	0x372a
 800d46c:	5535      	.short	0x5535
 800d46e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d472:	441e      	add	r6, r3
 800d474:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d478:	2b20      	cmp	r3, #32
 800d47a:	bfc1      	itttt	gt
 800d47c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d480:	409f      	lslgt	r7, r3
 800d482:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d486:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d48a:	bfd6      	itet	le
 800d48c:	f1c3 0320 	rsble	r3, r3, #32
 800d490:	ea47 0003 	orrgt.w	r0, r7, r3
 800d494:	fa04 f003 	lslle.w	r0, r4, r3
 800d498:	f7f3 f864 	bl	8000564 <__aeabi_ui2d>
 800d49c:	2201      	movs	r2, #1
 800d49e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d4a2:	3e01      	subs	r6, #1
 800d4a4:	9214      	str	r2, [sp, #80]	@ 0x50
 800d4a6:	e777      	b.n	800d398 <_dtoa_r+0x100>
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	e7b8      	b.n	800d41e <_dtoa_r+0x186>
 800d4ac:	9012      	str	r0, [sp, #72]	@ 0x48
 800d4ae:	e7b7      	b.n	800d420 <_dtoa_r+0x188>
 800d4b0:	427b      	negs	r3, r7
 800d4b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	eba8 0807 	sub.w	r8, r8, r7
 800d4ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d4bc:	e7c4      	b.n	800d448 <_dtoa_r+0x1b0>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	dc35      	bgt.n	800d534 <_dtoa_r+0x29c>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	9300      	str	r3, [sp, #0]
 800d4cc:	9307      	str	r3, [sp, #28]
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d4d2:	e00b      	b.n	800d4ec <_dtoa_r+0x254>
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	e7f3      	b.n	800d4c0 <_dtoa_r+0x228>
 800d4d8:	2300      	movs	r3, #0
 800d4da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4de:	18fb      	adds	r3, r7, r3
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	9307      	str	r3, [sp, #28]
 800d4e8:	bfb8      	it	lt
 800d4ea:	2301      	movlt	r3, #1
 800d4ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d4f0:	2100      	movs	r1, #0
 800d4f2:	2204      	movs	r2, #4
 800d4f4:	f102 0514 	add.w	r5, r2, #20
 800d4f8:	429d      	cmp	r5, r3
 800d4fa:	d91f      	bls.n	800d53c <_dtoa_r+0x2a4>
 800d4fc:	6041      	str	r1, [r0, #4]
 800d4fe:	4658      	mov	r0, fp
 800d500:	f001 f8da 	bl	800e6b8 <_Balloc>
 800d504:	4682      	mov	sl, r0
 800d506:	2800      	cmp	r0, #0
 800d508:	d13c      	bne.n	800d584 <_dtoa_r+0x2ec>
 800d50a:	4b1b      	ldr	r3, [pc, #108]	@ (800d578 <_dtoa_r+0x2e0>)
 800d50c:	4602      	mov	r2, r0
 800d50e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d512:	e6d8      	b.n	800d2c6 <_dtoa_r+0x2e>
 800d514:	2301      	movs	r3, #1
 800d516:	e7e0      	b.n	800d4da <_dtoa_r+0x242>
 800d518:	2401      	movs	r4, #1
 800d51a:	2300      	movs	r3, #0
 800d51c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d51e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d520:	f04f 33ff 	mov.w	r3, #4294967295
 800d524:	9300      	str	r3, [sp, #0]
 800d526:	9307      	str	r3, [sp, #28]
 800d528:	2200      	movs	r2, #0
 800d52a:	2312      	movs	r3, #18
 800d52c:	e7d0      	b.n	800d4d0 <_dtoa_r+0x238>
 800d52e:	2301      	movs	r3, #1
 800d530:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d532:	e7f5      	b.n	800d520 <_dtoa_r+0x288>
 800d534:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d536:	9300      	str	r3, [sp, #0]
 800d538:	9307      	str	r3, [sp, #28]
 800d53a:	e7d7      	b.n	800d4ec <_dtoa_r+0x254>
 800d53c:	3101      	adds	r1, #1
 800d53e:	0052      	lsls	r2, r2, #1
 800d540:	e7d8      	b.n	800d4f4 <_dtoa_r+0x25c>
 800d542:	bf00      	nop
 800d544:	f3af 8000 	nop.w
 800d548:	636f4361 	.word	0x636f4361
 800d54c:	3fd287a7 	.word	0x3fd287a7
 800d550:	8b60c8b3 	.word	0x8b60c8b3
 800d554:	3fc68a28 	.word	0x3fc68a28
 800d558:	509f79fb 	.word	0x509f79fb
 800d55c:	3fd34413 	.word	0x3fd34413
 800d560:	0801003a 	.word	0x0801003a
 800d564:	080100fc 	.word	0x080100fc
 800d568:	7ff00000 	.word	0x7ff00000
 800d56c:	08010012 	.word	0x08010012
 800d570:	3ff80000 	.word	0x3ff80000
 800d574:	08010258 	.word	0x08010258
 800d578:	08010154 	.word	0x08010154
 800d57c:	080100f8 	.word	0x080100f8
 800d580:	08010011 	.word	0x08010011
 800d584:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d588:	6018      	str	r0, [r3, #0]
 800d58a:	9b07      	ldr	r3, [sp, #28]
 800d58c:	2b0e      	cmp	r3, #14
 800d58e:	f200 80a4 	bhi.w	800d6da <_dtoa_r+0x442>
 800d592:	2c00      	cmp	r4, #0
 800d594:	f000 80a1 	beq.w	800d6da <_dtoa_r+0x442>
 800d598:	2f00      	cmp	r7, #0
 800d59a:	dd33      	ble.n	800d604 <_dtoa_r+0x36c>
 800d59c:	4bad      	ldr	r3, [pc, #692]	@ (800d854 <_dtoa_r+0x5bc>)
 800d59e:	f007 020f 	and.w	r2, r7, #15
 800d5a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5a6:	ed93 7b00 	vldr	d7, [r3]
 800d5aa:	05f8      	lsls	r0, r7, #23
 800d5ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d5b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d5b4:	d516      	bpl.n	800d5e4 <_dtoa_r+0x34c>
 800d5b6:	4ba8      	ldr	r3, [pc, #672]	@ (800d858 <_dtoa_r+0x5c0>)
 800d5b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d5c0:	f7f3 f974 	bl	80008ac <__aeabi_ddiv>
 800d5c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5c8:	f004 040f 	and.w	r4, r4, #15
 800d5cc:	2603      	movs	r6, #3
 800d5ce:	4da2      	ldr	r5, [pc, #648]	@ (800d858 <_dtoa_r+0x5c0>)
 800d5d0:	b954      	cbnz	r4, 800d5e8 <_dtoa_r+0x350>
 800d5d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5da:	f7f3 f967 	bl	80008ac <__aeabi_ddiv>
 800d5de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5e2:	e028      	b.n	800d636 <_dtoa_r+0x39e>
 800d5e4:	2602      	movs	r6, #2
 800d5e6:	e7f2      	b.n	800d5ce <_dtoa_r+0x336>
 800d5e8:	07e1      	lsls	r1, r4, #31
 800d5ea:	d508      	bpl.n	800d5fe <_dtoa_r+0x366>
 800d5ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d5f4:	f7f3 f830 	bl	8000658 <__aeabi_dmul>
 800d5f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5fc:	3601      	adds	r6, #1
 800d5fe:	1064      	asrs	r4, r4, #1
 800d600:	3508      	adds	r5, #8
 800d602:	e7e5      	b.n	800d5d0 <_dtoa_r+0x338>
 800d604:	f000 80d2 	beq.w	800d7ac <_dtoa_r+0x514>
 800d608:	427c      	negs	r4, r7
 800d60a:	4b92      	ldr	r3, [pc, #584]	@ (800d854 <_dtoa_r+0x5bc>)
 800d60c:	4d92      	ldr	r5, [pc, #584]	@ (800d858 <_dtoa_r+0x5c0>)
 800d60e:	f004 020f 	and.w	r2, r4, #15
 800d612:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d61a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d61e:	f7f3 f81b 	bl	8000658 <__aeabi_dmul>
 800d622:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d626:	1124      	asrs	r4, r4, #4
 800d628:	2300      	movs	r3, #0
 800d62a:	2602      	movs	r6, #2
 800d62c:	2c00      	cmp	r4, #0
 800d62e:	f040 80b2 	bne.w	800d796 <_dtoa_r+0x4fe>
 800d632:	2b00      	cmp	r3, #0
 800d634:	d1d3      	bne.n	800d5de <_dtoa_r+0x346>
 800d636:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d638:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	f000 80b7 	beq.w	800d7b0 <_dtoa_r+0x518>
 800d642:	4b86      	ldr	r3, [pc, #536]	@ (800d85c <_dtoa_r+0x5c4>)
 800d644:	2200      	movs	r2, #0
 800d646:	4620      	mov	r0, r4
 800d648:	4629      	mov	r1, r5
 800d64a:	f7f3 fa77 	bl	8000b3c <__aeabi_dcmplt>
 800d64e:	2800      	cmp	r0, #0
 800d650:	f000 80ae 	beq.w	800d7b0 <_dtoa_r+0x518>
 800d654:	9b07      	ldr	r3, [sp, #28]
 800d656:	2b00      	cmp	r3, #0
 800d658:	f000 80aa 	beq.w	800d7b0 <_dtoa_r+0x518>
 800d65c:	9b00      	ldr	r3, [sp, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	dd37      	ble.n	800d6d2 <_dtoa_r+0x43a>
 800d662:	1e7b      	subs	r3, r7, #1
 800d664:	9304      	str	r3, [sp, #16]
 800d666:	4620      	mov	r0, r4
 800d668:	4b7d      	ldr	r3, [pc, #500]	@ (800d860 <_dtoa_r+0x5c8>)
 800d66a:	2200      	movs	r2, #0
 800d66c:	4629      	mov	r1, r5
 800d66e:	f7f2 fff3 	bl	8000658 <__aeabi_dmul>
 800d672:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d676:	9c00      	ldr	r4, [sp, #0]
 800d678:	3601      	adds	r6, #1
 800d67a:	4630      	mov	r0, r6
 800d67c:	f7f2 ff82 	bl	8000584 <__aeabi_i2d>
 800d680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d684:	f7f2 ffe8 	bl	8000658 <__aeabi_dmul>
 800d688:	4b76      	ldr	r3, [pc, #472]	@ (800d864 <_dtoa_r+0x5cc>)
 800d68a:	2200      	movs	r2, #0
 800d68c:	f7f2 fe2e 	bl	80002ec <__adddf3>
 800d690:	4605      	mov	r5, r0
 800d692:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d696:	2c00      	cmp	r4, #0
 800d698:	f040 808d 	bne.w	800d7b6 <_dtoa_r+0x51e>
 800d69c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6a0:	4b71      	ldr	r3, [pc, #452]	@ (800d868 <_dtoa_r+0x5d0>)
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f7f2 fe20 	bl	80002e8 <__aeabi_dsub>
 800d6a8:	4602      	mov	r2, r0
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d6b0:	462a      	mov	r2, r5
 800d6b2:	4633      	mov	r3, r6
 800d6b4:	f7f3 fa60 	bl	8000b78 <__aeabi_dcmpgt>
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	f040 828b 	bne.w	800dbd4 <_dtoa_r+0x93c>
 800d6be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6c2:	462a      	mov	r2, r5
 800d6c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d6c8:	f7f3 fa38 	bl	8000b3c <__aeabi_dcmplt>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	f040 8128 	bne.w	800d922 <_dtoa_r+0x68a>
 800d6d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d6d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d6da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	f2c0 815a 	blt.w	800d996 <_dtoa_r+0x6fe>
 800d6e2:	2f0e      	cmp	r7, #14
 800d6e4:	f300 8157 	bgt.w	800d996 <_dtoa_r+0x6fe>
 800d6e8:	4b5a      	ldr	r3, [pc, #360]	@ (800d854 <_dtoa_r+0x5bc>)
 800d6ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d6ee:	ed93 7b00 	vldr	d7, [r3]
 800d6f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	ed8d 7b00 	vstr	d7, [sp]
 800d6fa:	da03      	bge.n	800d704 <_dtoa_r+0x46c>
 800d6fc:	9b07      	ldr	r3, [sp, #28]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	f340 8101 	ble.w	800d906 <_dtoa_r+0x66e>
 800d704:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d708:	4656      	mov	r6, sl
 800d70a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d70e:	4620      	mov	r0, r4
 800d710:	4629      	mov	r1, r5
 800d712:	f7f3 f8cb 	bl	80008ac <__aeabi_ddiv>
 800d716:	f7f3 fa4f 	bl	8000bb8 <__aeabi_d2iz>
 800d71a:	4680      	mov	r8, r0
 800d71c:	f7f2 ff32 	bl	8000584 <__aeabi_i2d>
 800d720:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d724:	f7f2 ff98 	bl	8000658 <__aeabi_dmul>
 800d728:	4602      	mov	r2, r0
 800d72a:	460b      	mov	r3, r1
 800d72c:	4620      	mov	r0, r4
 800d72e:	4629      	mov	r1, r5
 800d730:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d734:	f7f2 fdd8 	bl	80002e8 <__aeabi_dsub>
 800d738:	f806 4b01 	strb.w	r4, [r6], #1
 800d73c:	9d07      	ldr	r5, [sp, #28]
 800d73e:	eba6 040a 	sub.w	r4, r6, sl
 800d742:	42a5      	cmp	r5, r4
 800d744:	4602      	mov	r2, r0
 800d746:	460b      	mov	r3, r1
 800d748:	f040 8117 	bne.w	800d97a <_dtoa_r+0x6e2>
 800d74c:	f7f2 fdce 	bl	80002ec <__adddf3>
 800d750:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d754:	4604      	mov	r4, r0
 800d756:	460d      	mov	r5, r1
 800d758:	f7f3 fa0e 	bl	8000b78 <__aeabi_dcmpgt>
 800d75c:	2800      	cmp	r0, #0
 800d75e:	f040 80f9 	bne.w	800d954 <_dtoa_r+0x6bc>
 800d762:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d766:	4620      	mov	r0, r4
 800d768:	4629      	mov	r1, r5
 800d76a:	f7f3 f9dd 	bl	8000b28 <__aeabi_dcmpeq>
 800d76e:	b118      	cbz	r0, 800d778 <_dtoa_r+0x4e0>
 800d770:	f018 0f01 	tst.w	r8, #1
 800d774:	f040 80ee 	bne.w	800d954 <_dtoa_r+0x6bc>
 800d778:	4649      	mov	r1, r9
 800d77a:	4658      	mov	r0, fp
 800d77c:	f000 ffdc 	bl	800e738 <_Bfree>
 800d780:	2300      	movs	r3, #0
 800d782:	7033      	strb	r3, [r6, #0]
 800d784:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d786:	3701      	adds	r7, #1
 800d788:	601f      	str	r7, [r3, #0]
 800d78a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	f000 831d 	beq.w	800ddcc <_dtoa_r+0xb34>
 800d792:	601e      	str	r6, [r3, #0]
 800d794:	e31a      	b.n	800ddcc <_dtoa_r+0xb34>
 800d796:	07e2      	lsls	r2, r4, #31
 800d798:	d505      	bpl.n	800d7a6 <_dtoa_r+0x50e>
 800d79a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d79e:	f7f2 ff5b 	bl	8000658 <__aeabi_dmul>
 800d7a2:	3601      	adds	r6, #1
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	1064      	asrs	r4, r4, #1
 800d7a8:	3508      	adds	r5, #8
 800d7aa:	e73f      	b.n	800d62c <_dtoa_r+0x394>
 800d7ac:	2602      	movs	r6, #2
 800d7ae:	e742      	b.n	800d636 <_dtoa_r+0x39e>
 800d7b0:	9c07      	ldr	r4, [sp, #28]
 800d7b2:	9704      	str	r7, [sp, #16]
 800d7b4:	e761      	b.n	800d67a <_dtoa_r+0x3e2>
 800d7b6:	4b27      	ldr	r3, [pc, #156]	@ (800d854 <_dtoa_r+0x5bc>)
 800d7b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d7ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d7be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d7c2:	4454      	add	r4, sl
 800d7c4:	2900      	cmp	r1, #0
 800d7c6:	d053      	beq.n	800d870 <_dtoa_r+0x5d8>
 800d7c8:	4928      	ldr	r1, [pc, #160]	@ (800d86c <_dtoa_r+0x5d4>)
 800d7ca:	2000      	movs	r0, #0
 800d7cc:	f7f3 f86e 	bl	80008ac <__aeabi_ddiv>
 800d7d0:	4633      	mov	r3, r6
 800d7d2:	462a      	mov	r2, r5
 800d7d4:	f7f2 fd88 	bl	80002e8 <__aeabi_dsub>
 800d7d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d7dc:	4656      	mov	r6, sl
 800d7de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7e2:	f7f3 f9e9 	bl	8000bb8 <__aeabi_d2iz>
 800d7e6:	4605      	mov	r5, r0
 800d7e8:	f7f2 fecc 	bl	8000584 <__aeabi_i2d>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7f4:	f7f2 fd78 	bl	80002e8 <__aeabi_dsub>
 800d7f8:	3530      	adds	r5, #48	@ 0x30
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d802:	f806 5b01 	strb.w	r5, [r6], #1
 800d806:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d80a:	f7f3 f997 	bl	8000b3c <__aeabi_dcmplt>
 800d80e:	2800      	cmp	r0, #0
 800d810:	d171      	bne.n	800d8f6 <_dtoa_r+0x65e>
 800d812:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d816:	4911      	ldr	r1, [pc, #68]	@ (800d85c <_dtoa_r+0x5c4>)
 800d818:	2000      	movs	r0, #0
 800d81a:	f7f2 fd65 	bl	80002e8 <__aeabi_dsub>
 800d81e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d822:	f7f3 f98b 	bl	8000b3c <__aeabi_dcmplt>
 800d826:	2800      	cmp	r0, #0
 800d828:	f040 8095 	bne.w	800d956 <_dtoa_r+0x6be>
 800d82c:	42a6      	cmp	r6, r4
 800d82e:	f43f af50 	beq.w	800d6d2 <_dtoa_r+0x43a>
 800d832:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d836:	4b0a      	ldr	r3, [pc, #40]	@ (800d860 <_dtoa_r+0x5c8>)
 800d838:	2200      	movs	r2, #0
 800d83a:	f7f2 ff0d 	bl	8000658 <__aeabi_dmul>
 800d83e:	4b08      	ldr	r3, [pc, #32]	@ (800d860 <_dtoa_r+0x5c8>)
 800d840:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d844:	2200      	movs	r2, #0
 800d846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d84a:	f7f2 ff05 	bl	8000658 <__aeabi_dmul>
 800d84e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d852:	e7c4      	b.n	800d7de <_dtoa_r+0x546>
 800d854:	08010258 	.word	0x08010258
 800d858:	08010230 	.word	0x08010230
 800d85c:	3ff00000 	.word	0x3ff00000
 800d860:	40240000 	.word	0x40240000
 800d864:	401c0000 	.word	0x401c0000
 800d868:	40140000 	.word	0x40140000
 800d86c:	3fe00000 	.word	0x3fe00000
 800d870:	4631      	mov	r1, r6
 800d872:	4628      	mov	r0, r5
 800d874:	f7f2 fef0 	bl	8000658 <__aeabi_dmul>
 800d878:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d87c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d87e:	4656      	mov	r6, sl
 800d880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d884:	f7f3 f998 	bl	8000bb8 <__aeabi_d2iz>
 800d888:	4605      	mov	r5, r0
 800d88a:	f7f2 fe7b 	bl	8000584 <__aeabi_i2d>
 800d88e:	4602      	mov	r2, r0
 800d890:	460b      	mov	r3, r1
 800d892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d896:	f7f2 fd27 	bl	80002e8 <__aeabi_dsub>
 800d89a:	3530      	adds	r5, #48	@ 0x30
 800d89c:	f806 5b01 	strb.w	r5, [r6], #1
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	42a6      	cmp	r6, r4
 800d8a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d8aa:	f04f 0200 	mov.w	r2, #0
 800d8ae:	d124      	bne.n	800d8fa <_dtoa_r+0x662>
 800d8b0:	4bac      	ldr	r3, [pc, #688]	@ (800db64 <_dtoa_r+0x8cc>)
 800d8b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d8b6:	f7f2 fd19 	bl	80002ec <__adddf3>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	460b      	mov	r3, r1
 800d8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8c2:	f7f3 f959 	bl	8000b78 <__aeabi_dcmpgt>
 800d8c6:	2800      	cmp	r0, #0
 800d8c8:	d145      	bne.n	800d956 <_dtoa_r+0x6be>
 800d8ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d8ce:	49a5      	ldr	r1, [pc, #660]	@ (800db64 <_dtoa_r+0x8cc>)
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	f7f2 fd09 	bl	80002e8 <__aeabi_dsub>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	460b      	mov	r3, r1
 800d8da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8de:	f7f3 f92d 	bl	8000b3c <__aeabi_dcmplt>
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	f43f aef5 	beq.w	800d6d2 <_dtoa_r+0x43a>
 800d8e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d8ea:	1e73      	subs	r3, r6, #1
 800d8ec:	9315      	str	r3, [sp, #84]	@ 0x54
 800d8ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d8f2:	2b30      	cmp	r3, #48	@ 0x30
 800d8f4:	d0f8      	beq.n	800d8e8 <_dtoa_r+0x650>
 800d8f6:	9f04      	ldr	r7, [sp, #16]
 800d8f8:	e73e      	b.n	800d778 <_dtoa_r+0x4e0>
 800d8fa:	4b9b      	ldr	r3, [pc, #620]	@ (800db68 <_dtoa_r+0x8d0>)
 800d8fc:	f7f2 feac 	bl	8000658 <__aeabi_dmul>
 800d900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d904:	e7bc      	b.n	800d880 <_dtoa_r+0x5e8>
 800d906:	d10c      	bne.n	800d922 <_dtoa_r+0x68a>
 800d908:	4b98      	ldr	r3, [pc, #608]	@ (800db6c <_dtoa_r+0x8d4>)
 800d90a:	2200      	movs	r2, #0
 800d90c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d910:	f7f2 fea2 	bl	8000658 <__aeabi_dmul>
 800d914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d918:	f7f3 f924 	bl	8000b64 <__aeabi_dcmpge>
 800d91c:	2800      	cmp	r0, #0
 800d91e:	f000 8157 	beq.w	800dbd0 <_dtoa_r+0x938>
 800d922:	2400      	movs	r4, #0
 800d924:	4625      	mov	r5, r4
 800d926:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d928:	43db      	mvns	r3, r3
 800d92a:	9304      	str	r3, [sp, #16]
 800d92c:	4656      	mov	r6, sl
 800d92e:	2700      	movs	r7, #0
 800d930:	4621      	mov	r1, r4
 800d932:	4658      	mov	r0, fp
 800d934:	f000 ff00 	bl	800e738 <_Bfree>
 800d938:	2d00      	cmp	r5, #0
 800d93a:	d0dc      	beq.n	800d8f6 <_dtoa_r+0x65e>
 800d93c:	b12f      	cbz	r7, 800d94a <_dtoa_r+0x6b2>
 800d93e:	42af      	cmp	r7, r5
 800d940:	d003      	beq.n	800d94a <_dtoa_r+0x6b2>
 800d942:	4639      	mov	r1, r7
 800d944:	4658      	mov	r0, fp
 800d946:	f000 fef7 	bl	800e738 <_Bfree>
 800d94a:	4629      	mov	r1, r5
 800d94c:	4658      	mov	r0, fp
 800d94e:	f000 fef3 	bl	800e738 <_Bfree>
 800d952:	e7d0      	b.n	800d8f6 <_dtoa_r+0x65e>
 800d954:	9704      	str	r7, [sp, #16]
 800d956:	4633      	mov	r3, r6
 800d958:	461e      	mov	r6, r3
 800d95a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d95e:	2a39      	cmp	r2, #57	@ 0x39
 800d960:	d107      	bne.n	800d972 <_dtoa_r+0x6da>
 800d962:	459a      	cmp	sl, r3
 800d964:	d1f8      	bne.n	800d958 <_dtoa_r+0x6c0>
 800d966:	9a04      	ldr	r2, [sp, #16]
 800d968:	3201      	adds	r2, #1
 800d96a:	9204      	str	r2, [sp, #16]
 800d96c:	2230      	movs	r2, #48	@ 0x30
 800d96e:	f88a 2000 	strb.w	r2, [sl]
 800d972:	781a      	ldrb	r2, [r3, #0]
 800d974:	3201      	adds	r2, #1
 800d976:	701a      	strb	r2, [r3, #0]
 800d978:	e7bd      	b.n	800d8f6 <_dtoa_r+0x65e>
 800d97a:	4b7b      	ldr	r3, [pc, #492]	@ (800db68 <_dtoa_r+0x8d0>)
 800d97c:	2200      	movs	r2, #0
 800d97e:	f7f2 fe6b 	bl	8000658 <__aeabi_dmul>
 800d982:	2200      	movs	r2, #0
 800d984:	2300      	movs	r3, #0
 800d986:	4604      	mov	r4, r0
 800d988:	460d      	mov	r5, r1
 800d98a:	f7f3 f8cd 	bl	8000b28 <__aeabi_dcmpeq>
 800d98e:	2800      	cmp	r0, #0
 800d990:	f43f aebb 	beq.w	800d70a <_dtoa_r+0x472>
 800d994:	e6f0      	b.n	800d778 <_dtoa_r+0x4e0>
 800d996:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d998:	2a00      	cmp	r2, #0
 800d99a:	f000 80db 	beq.w	800db54 <_dtoa_r+0x8bc>
 800d99e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9a0:	2a01      	cmp	r2, #1
 800d9a2:	f300 80bf 	bgt.w	800db24 <_dtoa_r+0x88c>
 800d9a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d9a8:	2a00      	cmp	r2, #0
 800d9aa:	f000 80b7 	beq.w	800db1c <_dtoa_r+0x884>
 800d9ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d9b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d9b4:	4646      	mov	r6, r8
 800d9b6:	9a08      	ldr	r2, [sp, #32]
 800d9b8:	2101      	movs	r1, #1
 800d9ba:	441a      	add	r2, r3
 800d9bc:	4658      	mov	r0, fp
 800d9be:	4498      	add	r8, r3
 800d9c0:	9208      	str	r2, [sp, #32]
 800d9c2:	f000 ffb7 	bl	800e934 <__i2b>
 800d9c6:	4605      	mov	r5, r0
 800d9c8:	b15e      	cbz	r6, 800d9e2 <_dtoa_r+0x74a>
 800d9ca:	9b08      	ldr	r3, [sp, #32]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	dd08      	ble.n	800d9e2 <_dtoa_r+0x74a>
 800d9d0:	42b3      	cmp	r3, r6
 800d9d2:	9a08      	ldr	r2, [sp, #32]
 800d9d4:	bfa8      	it	ge
 800d9d6:	4633      	movge	r3, r6
 800d9d8:	eba8 0803 	sub.w	r8, r8, r3
 800d9dc:	1af6      	subs	r6, r6, r3
 800d9de:	1ad3      	subs	r3, r2, r3
 800d9e0:	9308      	str	r3, [sp, #32]
 800d9e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9e4:	b1f3      	cbz	r3, 800da24 <_dtoa_r+0x78c>
 800d9e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	f000 80b7 	beq.w	800db5c <_dtoa_r+0x8c4>
 800d9ee:	b18c      	cbz	r4, 800da14 <_dtoa_r+0x77c>
 800d9f0:	4629      	mov	r1, r5
 800d9f2:	4622      	mov	r2, r4
 800d9f4:	4658      	mov	r0, fp
 800d9f6:	f001 f85d 	bl	800eab4 <__pow5mult>
 800d9fa:	464a      	mov	r2, r9
 800d9fc:	4601      	mov	r1, r0
 800d9fe:	4605      	mov	r5, r0
 800da00:	4658      	mov	r0, fp
 800da02:	f000 ffad 	bl	800e960 <__multiply>
 800da06:	4649      	mov	r1, r9
 800da08:	9004      	str	r0, [sp, #16]
 800da0a:	4658      	mov	r0, fp
 800da0c:	f000 fe94 	bl	800e738 <_Bfree>
 800da10:	9b04      	ldr	r3, [sp, #16]
 800da12:	4699      	mov	r9, r3
 800da14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da16:	1b1a      	subs	r2, r3, r4
 800da18:	d004      	beq.n	800da24 <_dtoa_r+0x78c>
 800da1a:	4649      	mov	r1, r9
 800da1c:	4658      	mov	r0, fp
 800da1e:	f001 f849 	bl	800eab4 <__pow5mult>
 800da22:	4681      	mov	r9, r0
 800da24:	2101      	movs	r1, #1
 800da26:	4658      	mov	r0, fp
 800da28:	f000 ff84 	bl	800e934 <__i2b>
 800da2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da2e:	4604      	mov	r4, r0
 800da30:	2b00      	cmp	r3, #0
 800da32:	f000 81cf 	beq.w	800ddd4 <_dtoa_r+0xb3c>
 800da36:	461a      	mov	r2, r3
 800da38:	4601      	mov	r1, r0
 800da3a:	4658      	mov	r0, fp
 800da3c:	f001 f83a 	bl	800eab4 <__pow5mult>
 800da40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da42:	2b01      	cmp	r3, #1
 800da44:	4604      	mov	r4, r0
 800da46:	f300 8095 	bgt.w	800db74 <_dtoa_r+0x8dc>
 800da4a:	9b02      	ldr	r3, [sp, #8]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	f040 8087 	bne.w	800db60 <_dtoa_r+0x8c8>
 800da52:	9b03      	ldr	r3, [sp, #12]
 800da54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da58:	2b00      	cmp	r3, #0
 800da5a:	f040 8089 	bne.w	800db70 <_dtoa_r+0x8d8>
 800da5e:	9b03      	ldr	r3, [sp, #12]
 800da60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800da64:	0d1b      	lsrs	r3, r3, #20
 800da66:	051b      	lsls	r3, r3, #20
 800da68:	b12b      	cbz	r3, 800da76 <_dtoa_r+0x7de>
 800da6a:	9b08      	ldr	r3, [sp, #32]
 800da6c:	3301      	adds	r3, #1
 800da6e:	9308      	str	r3, [sp, #32]
 800da70:	f108 0801 	add.w	r8, r8, #1
 800da74:	2301      	movs	r3, #1
 800da76:	930a      	str	r3, [sp, #40]	@ 0x28
 800da78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	f000 81b0 	beq.w	800dde0 <_dtoa_r+0xb48>
 800da80:	6923      	ldr	r3, [r4, #16]
 800da82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800da86:	6918      	ldr	r0, [r3, #16]
 800da88:	f000 ff08 	bl	800e89c <__hi0bits>
 800da8c:	f1c0 0020 	rsb	r0, r0, #32
 800da90:	9b08      	ldr	r3, [sp, #32]
 800da92:	4418      	add	r0, r3
 800da94:	f010 001f 	ands.w	r0, r0, #31
 800da98:	d077      	beq.n	800db8a <_dtoa_r+0x8f2>
 800da9a:	f1c0 0320 	rsb	r3, r0, #32
 800da9e:	2b04      	cmp	r3, #4
 800daa0:	dd6b      	ble.n	800db7a <_dtoa_r+0x8e2>
 800daa2:	9b08      	ldr	r3, [sp, #32]
 800daa4:	f1c0 001c 	rsb	r0, r0, #28
 800daa8:	4403      	add	r3, r0
 800daaa:	4480      	add	r8, r0
 800daac:	4406      	add	r6, r0
 800daae:	9308      	str	r3, [sp, #32]
 800dab0:	f1b8 0f00 	cmp.w	r8, #0
 800dab4:	dd05      	ble.n	800dac2 <_dtoa_r+0x82a>
 800dab6:	4649      	mov	r1, r9
 800dab8:	4642      	mov	r2, r8
 800daba:	4658      	mov	r0, fp
 800dabc:	f001 f854 	bl	800eb68 <__lshift>
 800dac0:	4681      	mov	r9, r0
 800dac2:	9b08      	ldr	r3, [sp, #32]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	dd05      	ble.n	800dad4 <_dtoa_r+0x83c>
 800dac8:	4621      	mov	r1, r4
 800daca:	461a      	mov	r2, r3
 800dacc:	4658      	mov	r0, fp
 800dace:	f001 f84b 	bl	800eb68 <__lshift>
 800dad2:	4604      	mov	r4, r0
 800dad4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d059      	beq.n	800db8e <_dtoa_r+0x8f6>
 800dada:	4621      	mov	r1, r4
 800dadc:	4648      	mov	r0, r9
 800dade:	f001 f8af 	bl	800ec40 <__mcmp>
 800dae2:	2800      	cmp	r0, #0
 800dae4:	da53      	bge.n	800db8e <_dtoa_r+0x8f6>
 800dae6:	1e7b      	subs	r3, r7, #1
 800dae8:	9304      	str	r3, [sp, #16]
 800daea:	4649      	mov	r1, r9
 800daec:	2300      	movs	r3, #0
 800daee:	220a      	movs	r2, #10
 800daf0:	4658      	mov	r0, fp
 800daf2:	f000 fe43 	bl	800e77c <__multadd>
 800daf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800daf8:	4681      	mov	r9, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	f000 8172 	beq.w	800dde4 <_dtoa_r+0xb4c>
 800db00:	2300      	movs	r3, #0
 800db02:	4629      	mov	r1, r5
 800db04:	220a      	movs	r2, #10
 800db06:	4658      	mov	r0, fp
 800db08:	f000 fe38 	bl	800e77c <__multadd>
 800db0c:	9b00      	ldr	r3, [sp, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	4605      	mov	r5, r0
 800db12:	dc67      	bgt.n	800dbe4 <_dtoa_r+0x94c>
 800db14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db16:	2b02      	cmp	r3, #2
 800db18:	dc41      	bgt.n	800db9e <_dtoa_r+0x906>
 800db1a:	e063      	b.n	800dbe4 <_dtoa_r+0x94c>
 800db1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800db1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800db22:	e746      	b.n	800d9b2 <_dtoa_r+0x71a>
 800db24:	9b07      	ldr	r3, [sp, #28]
 800db26:	1e5c      	subs	r4, r3, #1
 800db28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db2a:	42a3      	cmp	r3, r4
 800db2c:	bfbf      	itttt	lt
 800db2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800db30:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800db32:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800db34:	1ae3      	sublt	r3, r4, r3
 800db36:	bfb4      	ite	lt
 800db38:	18d2      	addlt	r2, r2, r3
 800db3a:	1b1c      	subge	r4, r3, r4
 800db3c:	9b07      	ldr	r3, [sp, #28]
 800db3e:	bfbc      	itt	lt
 800db40:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800db42:	2400      	movlt	r4, #0
 800db44:	2b00      	cmp	r3, #0
 800db46:	bfb5      	itete	lt
 800db48:	eba8 0603 	sublt.w	r6, r8, r3
 800db4c:	9b07      	ldrge	r3, [sp, #28]
 800db4e:	2300      	movlt	r3, #0
 800db50:	4646      	movge	r6, r8
 800db52:	e730      	b.n	800d9b6 <_dtoa_r+0x71e>
 800db54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800db58:	4646      	mov	r6, r8
 800db5a:	e735      	b.n	800d9c8 <_dtoa_r+0x730>
 800db5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db5e:	e75c      	b.n	800da1a <_dtoa_r+0x782>
 800db60:	2300      	movs	r3, #0
 800db62:	e788      	b.n	800da76 <_dtoa_r+0x7de>
 800db64:	3fe00000 	.word	0x3fe00000
 800db68:	40240000 	.word	0x40240000
 800db6c:	40140000 	.word	0x40140000
 800db70:	9b02      	ldr	r3, [sp, #8]
 800db72:	e780      	b.n	800da76 <_dtoa_r+0x7de>
 800db74:	2300      	movs	r3, #0
 800db76:	930a      	str	r3, [sp, #40]	@ 0x28
 800db78:	e782      	b.n	800da80 <_dtoa_r+0x7e8>
 800db7a:	d099      	beq.n	800dab0 <_dtoa_r+0x818>
 800db7c:	9a08      	ldr	r2, [sp, #32]
 800db7e:	331c      	adds	r3, #28
 800db80:	441a      	add	r2, r3
 800db82:	4498      	add	r8, r3
 800db84:	441e      	add	r6, r3
 800db86:	9208      	str	r2, [sp, #32]
 800db88:	e792      	b.n	800dab0 <_dtoa_r+0x818>
 800db8a:	4603      	mov	r3, r0
 800db8c:	e7f6      	b.n	800db7c <_dtoa_r+0x8e4>
 800db8e:	9b07      	ldr	r3, [sp, #28]
 800db90:	9704      	str	r7, [sp, #16]
 800db92:	2b00      	cmp	r3, #0
 800db94:	dc20      	bgt.n	800dbd8 <_dtoa_r+0x940>
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db9a:	2b02      	cmp	r3, #2
 800db9c:	dd1e      	ble.n	800dbdc <_dtoa_r+0x944>
 800db9e:	9b00      	ldr	r3, [sp, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	f47f aec0 	bne.w	800d926 <_dtoa_r+0x68e>
 800dba6:	4621      	mov	r1, r4
 800dba8:	2205      	movs	r2, #5
 800dbaa:	4658      	mov	r0, fp
 800dbac:	f000 fde6 	bl	800e77c <__multadd>
 800dbb0:	4601      	mov	r1, r0
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	4648      	mov	r0, r9
 800dbb6:	f001 f843 	bl	800ec40 <__mcmp>
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	f77f aeb3 	ble.w	800d926 <_dtoa_r+0x68e>
 800dbc0:	4656      	mov	r6, sl
 800dbc2:	2331      	movs	r3, #49	@ 0x31
 800dbc4:	f806 3b01 	strb.w	r3, [r6], #1
 800dbc8:	9b04      	ldr	r3, [sp, #16]
 800dbca:	3301      	adds	r3, #1
 800dbcc:	9304      	str	r3, [sp, #16]
 800dbce:	e6ae      	b.n	800d92e <_dtoa_r+0x696>
 800dbd0:	9c07      	ldr	r4, [sp, #28]
 800dbd2:	9704      	str	r7, [sp, #16]
 800dbd4:	4625      	mov	r5, r4
 800dbd6:	e7f3      	b.n	800dbc0 <_dtoa_r+0x928>
 800dbd8:	9b07      	ldr	r3, [sp, #28]
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	f000 8104 	beq.w	800ddec <_dtoa_r+0xb54>
 800dbe4:	2e00      	cmp	r6, #0
 800dbe6:	dd05      	ble.n	800dbf4 <_dtoa_r+0x95c>
 800dbe8:	4629      	mov	r1, r5
 800dbea:	4632      	mov	r2, r6
 800dbec:	4658      	mov	r0, fp
 800dbee:	f000 ffbb 	bl	800eb68 <__lshift>
 800dbf2:	4605      	mov	r5, r0
 800dbf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d05a      	beq.n	800dcb0 <_dtoa_r+0xa18>
 800dbfa:	6869      	ldr	r1, [r5, #4]
 800dbfc:	4658      	mov	r0, fp
 800dbfe:	f000 fd5b 	bl	800e6b8 <_Balloc>
 800dc02:	4606      	mov	r6, r0
 800dc04:	b928      	cbnz	r0, 800dc12 <_dtoa_r+0x97a>
 800dc06:	4b84      	ldr	r3, [pc, #528]	@ (800de18 <_dtoa_r+0xb80>)
 800dc08:	4602      	mov	r2, r0
 800dc0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dc0e:	f7ff bb5a 	b.w	800d2c6 <_dtoa_r+0x2e>
 800dc12:	692a      	ldr	r2, [r5, #16]
 800dc14:	3202      	adds	r2, #2
 800dc16:	0092      	lsls	r2, r2, #2
 800dc18:	f105 010c 	add.w	r1, r5, #12
 800dc1c:	300c      	adds	r0, #12
 800dc1e:	f7ff fa76 	bl	800d10e <memcpy>
 800dc22:	2201      	movs	r2, #1
 800dc24:	4631      	mov	r1, r6
 800dc26:	4658      	mov	r0, fp
 800dc28:	f000 ff9e 	bl	800eb68 <__lshift>
 800dc2c:	f10a 0301 	add.w	r3, sl, #1
 800dc30:	9307      	str	r3, [sp, #28]
 800dc32:	9b00      	ldr	r3, [sp, #0]
 800dc34:	4453      	add	r3, sl
 800dc36:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc38:	9b02      	ldr	r3, [sp, #8]
 800dc3a:	f003 0301 	and.w	r3, r3, #1
 800dc3e:	462f      	mov	r7, r5
 800dc40:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc42:	4605      	mov	r5, r0
 800dc44:	9b07      	ldr	r3, [sp, #28]
 800dc46:	4621      	mov	r1, r4
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	4648      	mov	r0, r9
 800dc4c:	9300      	str	r3, [sp, #0]
 800dc4e:	f7ff fa9b 	bl	800d188 <quorem>
 800dc52:	4639      	mov	r1, r7
 800dc54:	9002      	str	r0, [sp, #8]
 800dc56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dc5a:	4648      	mov	r0, r9
 800dc5c:	f000 fff0 	bl	800ec40 <__mcmp>
 800dc60:	462a      	mov	r2, r5
 800dc62:	9008      	str	r0, [sp, #32]
 800dc64:	4621      	mov	r1, r4
 800dc66:	4658      	mov	r0, fp
 800dc68:	f001 f806 	bl	800ec78 <__mdiff>
 800dc6c:	68c2      	ldr	r2, [r0, #12]
 800dc6e:	4606      	mov	r6, r0
 800dc70:	bb02      	cbnz	r2, 800dcb4 <_dtoa_r+0xa1c>
 800dc72:	4601      	mov	r1, r0
 800dc74:	4648      	mov	r0, r9
 800dc76:	f000 ffe3 	bl	800ec40 <__mcmp>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	4631      	mov	r1, r6
 800dc7e:	4658      	mov	r0, fp
 800dc80:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc82:	f000 fd59 	bl	800e738 <_Bfree>
 800dc86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc8a:	9e07      	ldr	r6, [sp, #28]
 800dc8c:	ea43 0102 	orr.w	r1, r3, r2
 800dc90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc92:	4319      	orrs	r1, r3
 800dc94:	d110      	bne.n	800dcb8 <_dtoa_r+0xa20>
 800dc96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dc9a:	d029      	beq.n	800dcf0 <_dtoa_r+0xa58>
 800dc9c:	9b08      	ldr	r3, [sp, #32]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	dd02      	ble.n	800dca8 <_dtoa_r+0xa10>
 800dca2:	9b02      	ldr	r3, [sp, #8]
 800dca4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dca8:	9b00      	ldr	r3, [sp, #0]
 800dcaa:	f883 8000 	strb.w	r8, [r3]
 800dcae:	e63f      	b.n	800d930 <_dtoa_r+0x698>
 800dcb0:	4628      	mov	r0, r5
 800dcb2:	e7bb      	b.n	800dc2c <_dtoa_r+0x994>
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	e7e1      	b.n	800dc7c <_dtoa_r+0x9e4>
 800dcb8:	9b08      	ldr	r3, [sp, #32]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	db04      	blt.n	800dcc8 <_dtoa_r+0xa30>
 800dcbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dcc0:	430b      	orrs	r3, r1
 800dcc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dcc4:	430b      	orrs	r3, r1
 800dcc6:	d120      	bne.n	800dd0a <_dtoa_r+0xa72>
 800dcc8:	2a00      	cmp	r2, #0
 800dcca:	dded      	ble.n	800dca8 <_dtoa_r+0xa10>
 800dccc:	4649      	mov	r1, r9
 800dcce:	2201      	movs	r2, #1
 800dcd0:	4658      	mov	r0, fp
 800dcd2:	f000 ff49 	bl	800eb68 <__lshift>
 800dcd6:	4621      	mov	r1, r4
 800dcd8:	4681      	mov	r9, r0
 800dcda:	f000 ffb1 	bl	800ec40 <__mcmp>
 800dcde:	2800      	cmp	r0, #0
 800dce0:	dc03      	bgt.n	800dcea <_dtoa_r+0xa52>
 800dce2:	d1e1      	bne.n	800dca8 <_dtoa_r+0xa10>
 800dce4:	f018 0f01 	tst.w	r8, #1
 800dce8:	d0de      	beq.n	800dca8 <_dtoa_r+0xa10>
 800dcea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dcee:	d1d8      	bne.n	800dca2 <_dtoa_r+0xa0a>
 800dcf0:	9a00      	ldr	r2, [sp, #0]
 800dcf2:	2339      	movs	r3, #57	@ 0x39
 800dcf4:	7013      	strb	r3, [r2, #0]
 800dcf6:	4633      	mov	r3, r6
 800dcf8:	461e      	mov	r6, r3
 800dcfa:	3b01      	subs	r3, #1
 800dcfc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dd00:	2a39      	cmp	r2, #57	@ 0x39
 800dd02:	d052      	beq.n	800ddaa <_dtoa_r+0xb12>
 800dd04:	3201      	adds	r2, #1
 800dd06:	701a      	strb	r2, [r3, #0]
 800dd08:	e612      	b.n	800d930 <_dtoa_r+0x698>
 800dd0a:	2a00      	cmp	r2, #0
 800dd0c:	dd07      	ble.n	800dd1e <_dtoa_r+0xa86>
 800dd0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dd12:	d0ed      	beq.n	800dcf0 <_dtoa_r+0xa58>
 800dd14:	9a00      	ldr	r2, [sp, #0]
 800dd16:	f108 0301 	add.w	r3, r8, #1
 800dd1a:	7013      	strb	r3, [r2, #0]
 800dd1c:	e608      	b.n	800d930 <_dtoa_r+0x698>
 800dd1e:	9b07      	ldr	r3, [sp, #28]
 800dd20:	9a07      	ldr	r2, [sp, #28]
 800dd22:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dd26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d028      	beq.n	800dd7e <_dtoa_r+0xae6>
 800dd2c:	4649      	mov	r1, r9
 800dd2e:	2300      	movs	r3, #0
 800dd30:	220a      	movs	r2, #10
 800dd32:	4658      	mov	r0, fp
 800dd34:	f000 fd22 	bl	800e77c <__multadd>
 800dd38:	42af      	cmp	r7, r5
 800dd3a:	4681      	mov	r9, r0
 800dd3c:	f04f 0300 	mov.w	r3, #0
 800dd40:	f04f 020a 	mov.w	r2, #10
 800dd44:	4639      	mov	r1, r7
 800dd46:	4658      	mov	r0, fp
 800dd48:	d107      	bne.n	800dd5a <_dtoa_r+0xac2>
 800dd4a:	f000 fd17 	bl	800e77c <__multadd>
 800dd4e:	4607      	mov	r7, r0
 800dd50:	4605      	mov	r5, r0
 800dd52:	9b07      	ldr	r3, [sp, #28]
 800dd54:	3301      	adds	r3, #1
 800dd56:	9307      	str	r3, [sp, #28]
 800dd58:	e774      	b.n	800dc44 <_dtoa_r+0x9ac>
 800dd5a:	f000 fd0f 	bl	800e77c <__multadd>
 800dd5e:	4629      	mov	r1, r5
 800dd60:	4607      	mov	r7, r0
 800dd62:	2300      	movs	r3, #0
 800dd64:	220a      	movs	r2, #10
 800dd66:	4658      	mov	r0, fp
 800dd68:	f000 fd08 	bl	800e77c <__multadd>
 800dd6c:	4605      	mov	r5, r0
 800dd6e:	e7f0      	b.n	800dd52 <_dtoa_r+0xaba>
 800dd70:	9b00      	ldr	r3, [sp, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	bfcc      	ite	gt
 800dd76:	461e      	movgt	r6, r3
 800dd78:	2601      	movle	r6, #1
 800dd7a:	4456      	add	r6, sl
 800dd7c:	2700      	movs	r7, #0
 800dd7e:	4649      	mov	r1, r9
 800dd80:	2201      	movs	r2, #1
 800dd82:	4658      	mov	r0, fp
 800dd84:	f000 fef0 	bl	800eb68 <__lshift>
 800dd88:	4621      	mov	r1, r4
 800dd8a:	4681      	mov	r9, r0
 800dd8c:	f000 ff58 	bl	800ec40 <__mcmp>
 800dd90:	2800      	cmp	r0, #0
 800dd92:	dcb0      	bgt.n	800dcf6 <_dtoa_r+0xa5e>
 800dd94:	d102      	bne.n	800dd9c <_dtoa_r+0xb04>
 800dd96:	f018 0f01 	tst.w	r8, #1
 800dd9a:	d1ac      	bne.n	800dcf6 <_dtoa_r+0xa5e>
 800dd9c:	4633      	mov	r3, r6
 800dd9e:	461e      	mov	r6, r3
 800dda0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dda4:	2a30      	cmp	r2, #48	@ 0x30
 800dda6:	d0fa      	beq.n	800dd9e <_dtoa_r+0xb06>
 800dda8:	e5c2      	b.n	800d930 <_dtoa_r+0x698>
 800ddaa:	459a      	cmp	sl, r3
 800ddac:	d1a4      	bne.n	800dcf8 <_dtoa_r+0xa60>
 800ddae:	9b04      	ldr	r3, [sp, #16]
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	9304      	str	r3, [sp, #16]
 800ddb4:	2331      	movs	r3, #49	@ 0x31
 800ddb6:	f88a 3000 	strb.w	r3, [sl]
 800ddba:	e5b9      	b.n	800d930 <_dtoa_r+0x698>
 800ddbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ddbe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800de1c <_dtoa_r+0xb84>
 800ddc2:	b11b      	cbz	r3, 800ddcc <_dtoa_r+0xb34>
 800ddc4:	f10a 0308 	add.w	r3, sl, #8
 800ddc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ddca:	6013      	str	r3, [r2, #0]
 800ddcc:	4650      	mov	r0, sl
 800ddce:	b019      	add	sp, #100	@ 0x64
 800ddd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	f77f ae37 	ble.w	800da4a <_dtoa_r+0x7b2>
 800dddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddde:	930a      	str	r3, [sp, #40]	@ 0x28
 800dde0:	2001      	movs	r0, #1
 800dde2:	e655      	b.n	800da90 <_dtoa_r+0x7f8>
 800dde4:	9b00      	ldr	r3, [sp, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	f77f aed6 	ble.w	800db98 <_dtoa_r+0x900>
 800ddec:	4656      	mov	r6, sl
 800ddee:	4621      	mov	r1, r4
 800ddf0:	4648      	mov	r0, r9
 800ddf2:	f7ff f9c9 	bl	800d188 <quorem>
 800ddf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ddfa:	f806 8b01 	strb.w	r8, [r6], #1
 800ddfe:	9b00      	ldr	r3, [sp, #0]
 800de00:	eba6 020a 	sub.w	r2, r6, sl
 800de04:	4293      	cmp	r3, r2
 800de06:	ddb3      	ble.n	800dd70 <_dtoa_r+0xad8>
 800de08:	4649      	mov	r1, r9
 800de0a:	2300      	movs	r3, #0
 800de0c:	220a      	movs	r2, #10
 800de0e:	4658      	mov	r0, fp
 800de10:	f000 fcb4 	bl	800e77c <__multadd>
 800de14:	4681      	mov	r9, r0
 800de16:	e7ea      	b.n	800ddee <_dtoa_r+0xb56>
 800de18:	08010154 	.word	0x08010154
 800de1c:	080100ef 	.word	0x080100ef

0800de20 <_free_r>:
 800de20:	b538      	push	{r3, r4, r5, lr}
 800de22:	4605      	mov	r5, r0
 800de24:	2900      	cmp	r1, #0
 800de26:	d041      	beq.n	800deac <_free_r+0x8c>
 800de28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de2c:	1f0c      	subs	r4, r1, #4
 800de2e:	2b00      	cmp	r3, #0
 800de30:	bfb8      	it	lt
 800de32:	18e4      	addlt	r4, r4, r3
 800de34:	f000 fc34 	bl	800e6a0 <__malloc_lock>
 800de38:	4a1d      	ldr	r2, [pc, #116]	@ (800deb0 <_free_r+0x90>)
 800de3a:	6813      	ldr	r3, [r2, #0]
 800de3c:	b933      	cbnz	r3, 800de4c <_free_r+0x2c>
 800de3e:	6063      	str	r3, [r4, #4]
 800de40:	6014      	str	r4, [r2, #0]
 800de42:	4628      	mov	r0, r5
 800de44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de48:	f000 bc30 	b.w	800e6ac <__malloc_unlock>
 800de4c:	42a3      	cmp	r3, r4
 800de4e:	d908      	bls.n	800de62 <_free_r+0x42>
 800de50:	6820      	ldr	r0, [r4, #0]
 800de52:	1821      	adds	r1, r4, r0
 800de54:	428b      	cmp	r3, r1
 800de56:	bf01      	itttt	eq
 800de58:	6819      	ldreq	r1, [r3, #0]
 800de5a:	685b      	ldreq	r3, [r3, #4]
 800de5c:	1809      	addeq	r1, r1, r0
 800de5e:	6021      	streq	r1, [r4, #0]
 800de60:	e7ed      	b.n	800de3e <_free_r+0x1e>
 800de62:	461a      	mov	r2, r3
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	b10b      	cbz	r3, 800de6c <_free_r+0x4c>
 800de68:	42a3      	cmp	r3, r4
 800de6a:	d9fa      	bls.n	800de62 <_free_r+0x42>
 800de6c:	6811      	ldr	r1, [r2, #0]
 800de6e:	1850      	adds	r0, r2, r1
 800de70:	42a0      	cmp	r0, r4
 800de72:	d10b      	bne.n	800de8c <_free_r+0x6c>
 800de74:	6820      	ldr	r0, [r4, #0]
 800de76:	4401      	add	r1, r0
 800de78:	1850      	adds	r0, r2, r1
 800de7a:	4283      	cmp	r3, r0
 800de7c:	6011      	str	r1, [r2, #0]
 800de7e:	d1e0      	bne.n	800de42 <_free_r+0x22>
 800de80:	6818      	ldr	r0, [r3, #0]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	6053      	str	r3, [r2, #4]
 800de86:	4408      	add	r0, r1
 800de88:	6010      	str	r0, [r2, #0]
 800de8a:	e7da      	b.n	800de42 <_free_r+0x22>
 800de8c:	d902      	bls.n	800de94 <_free_r+0x74>
 800de8e:	230c      	movs	r3, #12
 800de90:	602b      	str	r3, [r5, #0]
 800de92:	e7d6      	b.n	800de42 <_free_r+0x22>
 800de94:	6820      	ldr	r0, [r4, #0]
 800de96:	1821      	adds	r1, r4, r0
 800de98:	428b      	cmp	r3, r1
 800de9a:	bf04      	itt	eq
 800de9c:	6819      	ldreq	r1, [r3, #0]
 800de9e:	685b      	ldreq	r3, [r3, #4]
 800dea0:	6063      	str	r3, [r4, #4]
 800dea2:	bf04      	itt	eq
 800dea4:	1809      	addeq	r1, r1, r0
 800dea6:	6021      	streq	r1, [r4, #0]
 800dea8:	6054      	str	r4, [r2, #4]
 800deaa:	e7ca      	b.n	800de42 <_free_r+0x22>
 800deac:	bd38      	pop	{r3, r4, r5, pc}
 800deae:	bf00      	nop
 800deb0:	2000512c 	.word	0x2000512c

0800deb4 <rshift>:
 800deb4:	6903      	ldr	r3, [r0, #16]
 800deb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800deba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800debe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dec2:	f100 0414 	add.w	r4, r0, #20
 800dec6:	dd45      	ble.n	800df54 <rshift+0xa0>
 800dec8:	f011 011f 	ands.w	r1, r1, #31
 800decc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ded0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ded4:	d10c      	bne.n	800def0 <rshift+0x3c>
 800ded6:	f100 0710 	add.w	r7, r0, #16
 800deda:	4629      	mov	r1, r5
 800dedc:	42b1      	cmp	r1, r6
 800dede:	d334      	bcc.n	800df4a <rshift+0x96>
 800dee0:	1a9b      	subs	r3, r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	1eea      	subs	r2, r5, #3
 800dee6:	4296      	cmp	r6, r2
 800dee8:	bf38      	it	cc
 800deea:	2300      	movcc	r3, #0
 800deec:	4423      	add	r3, r4
 800deee:	e015      	b.n	800df1c <rshift+0x68>
 800def0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800def4:	f1c1 0820 	rsb	r8, r1, #32
 800def8:	40cf      	lsrs	r7, r1
 800defa:	f105 0e04 	add.w	lr, r5, #4
 800defe:	46a1      	mov	r9, r4
 800df00:	4576      	cmp	r6, lr
 800df02:	46f4      	mov	ip, lr
 800df04:	d815      	bhi.n	800df32 <rshift+0x7e>
 800df06:	1a9a      	subs	r2, r3, r2
 800df08:	0092      	lsls	r2, r2, #2
 800df0a:	3a04      	subs	r2, #4
 800df0c:	3501      	adds	r5, #1
 800df0e:	42ae      	cmp	r6, r5
 800df10:	bf38      	it	cc
 800df12:	2200      	movcc	r2, #0
 800df14:	18a3      	adds	r3, r4, r2
 800df16:	50a7      	str	r7, [r4, r2]
 800df18:	b107      	cbz	r7, 800df1c <rshift+0x68>
 800df1a:	3304      	adds	r3, #4
 800df1c:	1b1a      	subs	r2, r3, r4
 800df1e:	42a3      	cmp	r3, r4
 800df20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800df24:	bf08      	it	eq
 800df26:	2300      	moveq	r3, #0
 800df28:	6102      	str	r2, [r0, #16]
 800df2a:	bf08      	it	eq
 800df2c:	6143      	streq	r3, [r0, #20]
 800df2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df32:	f8dc c000 	ldr.w	ip, [ip]
 800df36:	fa0c fc08 	lsl.w	ip, ip, r8
 800df3a:	ea4c 0707 	orr.w	r7, ip, r7
 800df3e:	f849 7b04 	str.w	r7, [r9], #4
 800df42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800df46:	40cf      	lsrs	r7, r1
 800df48:	e7da      	b.n	800df00 <rshift+0x4c>
 800df4a:	f851 cb04 	ldr.w	ip, [r1], #4
 800df4e:	f847 cf04 	str.w	ip, [r7, #4]!
 800df52:	e7c3      	b.n	800dedc <rshift+0x28>
 800df54:	4623      	mov	r3, r4
 800df56:	e7e1      	b.n	800df1c <rshift+0x68>

0800df58 <__hexdig_fun>:
 800df58:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800df5c:	2b09      	cmp	r3, #9
 800df5e:	d802      	bhi.n	800df66 <__hexdig_fun+0xe>
 800df60:	3820      	subs	r0, #32
 800df62:	b2c0      	uxtb	r0, r0
 800df64:	4770      	bx	lr
 800df66:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800df6a:	2b05      	cmp	r3, #5
 800df6c:	d801      	bhi.n	800df72 <__hexdig_fun+0x1a>
 800df6e:	3847      	subs	r0, #71	@ 0x47
 800df70:	e7f7      	b.n	800df62 <__hexdig_fun+0xa>
 800df72:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800df76:	2b05      	cmp	r3, #5
 800df78:	d801      	bhi.n	800df7e <__hexdig_fun+0x26>
 800df7a:	3827      	subs	r0, #39	@ 0x27
 800df7c:	e7f1      	b.n	800df62 <__hexdig_fun+0xa>
 800df7e:	2000      	movs	r0, #0
 800df80:	4770      	bx	lr
	...

0800df84 <__gethex>:
 800df84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df88:	b085      	sub	sp, #20
 800df8a:	468a      	mov	sl, r1
 800df8c:	9302      	str	r3, [sp, #8]
 800df8e:	680b      	ldr	r3, [r1, #0]
 800df90:	9001      	str	r0, [sp, #4]
 800df92:	4690      	mov	r8, r2
 800df94:	1c9c      	adds	r4, r3, #2
 800df96:	46a1      	mov	r9, r4
 800df98:	f814 0b01 	ldrb.w	r0, [r4], #1
 800df9c:	2830      	cmp	r0, #48	@ 0x30
 800df9e:	d0fa      	beq.n	800df96 <__gethex+0x12>
 800dfa0:	eba9 0303 	sub.w	r3, r9, r3
 800dfa4:	f1a3 0b02 	sub.w	fp, r3, #2
 800dfa8:	f7ff ffd6 	bl	800df58 <__hexdig_fun>
 800dfac:	4605      	mov	r5, r0
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	d168      	bne.n	800e084 <__gethex+0x100>
 800dfb2:	49a0      	ldr	r1, [pc, #640]	@ (800e234 <__gethex+0x2b0>)
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	4648      	mov	r0, r9
 800dfb8:	f7fe ffc4 	bl	800cf44 <strncmp>
 800dfbc:	4607      	mov	r7, r0
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	d167      	bne.n	800e092 <__gethex+0x10e>
 800dfc2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dfc6:	4626      	mov	r6, r4
 800dfc8:	f7ff ffc6 	bl	800df58 <__hexdig_fun>
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	d062      	beq.n	800e096 <__gethex+0x112>
 800dfd0:	4623      	mov	r3, r4
 800dfd2:	7818      	ldrb	r0, [r3, #0]
 800dfd4:	2830      	cmp	r0, #48	@ 0x30
 800dfd6:	4699      	mov	r9, r3
 800dfd8:	f103 0301 	add.w	r3, r3, #1
 800dfdc:	d0f9      	beq.n	800dfd2 <__gethex+0x4e>
 800dfde:	f7ff ffbb 	bl	800df58 <__hexdig_fun>
 800dfe2:	fab0 f580 	clz	r5, r0
 800dfe6:	096d      	lsrs	r5, r5, #5
 800dfe8:	f04f 0b01 	mov.w	fp, #1
 800dfec:	464a      	mov	r2, r9
 800dfee:	4616      	mov	r6, r2
 800dff0:	3201      	adds	r2, #1
 800dff2:	7830      	ldrb	r0, [r6, #0]
 800dff4:	f7ff ffb0 	bl	800df58 <__hexdig_fun>
 800dff8:	2800      	cmp	r0, #0
 800dffa:	d1f8      	bne.n	800dfee <__gethex+0x6a>
 800dffc:	498d      	ldr	r1, [pc, #564]	@ (800e234 <__gethex+0x2b0>)
 800dffe:	2201      	movs	r2, #1
 800e000:	4630      	mov	r0, r6
 800e002:	f7fe ff9f 	bl	800cf44 <strncmp>
 800e006:	2800      	cmp	r0, #0
 800e008:	d13f      	bne.n	800e08a <__gethex+0x106>
 800e00a:	b944      	cbnz	r4, 800e01e <__gethex+0x9a>
 800e00c:	1c74      	adds	r4, r6, #1
 800e00e:	4622      	mov	r2, r4
 800e010:	4616      	mov	r6, r2
 800e012:	3201      	adds	r2, #1
 800e014:	7830      	ldrb	r0, [r6, #0]
 800e016:	f7ff ff9f 	bl	800df58 <__hexdig_fun>
 800e01a:	2800      	cmp	r0, #0
 800e01c:	d1f8      	bne.n	800e010 <__gethex+0x8c>
 800e01e:	1ba4      	subs	r4, r4, r6
 800e020:	00a7      	lsls	r7, r4, #2
 800e022:	7833      	ldrb	r3, [r6, #0]
 800e024:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e028:	2b50      	cmp	r3, #80	@ 0x50
 800e02a:	d13e      	bne.n	800e0aa <__gethex+0x126>
 800e02c:	7873      	ldrb	r3, [r6, #1]
 800e02e:	2b2b      	cmp	r3, #43	@ 0x2b
 800e030:	d033      	beq.n	800e09a <__gethex+0x116>
 800e032:	2b2d      	cmp	r3, #45	@ 0x2d
 800e034:	d034      	beq.n	800e0a0 <__gethex+0x11c>
 800e036:	1c71      	adds	r1, r6, #1
 800e038:	2400      	movs	r4, #0
 800e03a:	7808      	ldrb	r0, [r1, #0]
 800e03c:	f7ff ff8c 	bl	800df58 <__hexdig_fun>
 800e040:	1e43      	subs	r3, r0, #1
 800e042:	b2db      	uxtb	r3, r3
 800e044:	2b18      	cmp	r3, #24
 800e046:	d830      	bhi.n	800e0aa <__gethex+0x126>
 800e048:	f1a0 0210 	sub.w	r2, r0, #16
 800e04c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e050:	f7ff ff82 	bl	800df58 <__hexdig_fun>
 800e054:	f100 3cff 	add.w	ip, r0, #4294967295
 800e058:	fa5f fc8c 	uxtb.w	ip, ip
 800e05c:	f1bc 0f18 	cmp.w	ip, #24
 800e060:	f04f 030a 	mov.w	r3, #10
 800e064:	d91e      	bls.n	800e0a4 <__gethex+0x120>
 800e066:	b104      	cbz	r4, 800e06a <__gethex+0xe6>
 800e068:	4252      	negs	r2, r2
 800e06a:	4417      	add	r7, r2
 800e06c:	f8ca 1000 	str.w	r1, [sl]
 800e070:	b1ed      	cbz	r5, 800e0ae <__gethex+0x12a>
 800e072:	f1bb 0f00 	cmp.w	fp, #0
 800e076:	bf0c      	ite	eq
 800e078:	2506      	moveq	r5, #6
 800e07a:	2500      	movne	r5, #0
 800e07c:	4628      	mov	r0, r5
 800e07e:	b005      	add	sp, #20
 800e080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e084:	2500      	movs	r5, #0
 800e086:	462c      	mov	r4, r5
 800e088:	e7b0      	b.n	800dfec <__gethex+0x68>
 800e08a:	2c00      	cmp	r4, #0
 800e08c:	d1c7      	bne.n	800e01e <__gethex+0x9a>
 800e08e:	4627      	mov	r7, r4
 800e090:	e7c7      	b.n	800e022 <__gethex+0x9e>
 800e092:	464e      	mov	r6, r9
 800e094:	462f      	mov	r7, r5
 800e096:	2501      	movs	r5, #1
 800e098:	e7c3      	b.n	800e022 <__gethex+0x9e>
 800e09a:	2400      	movs	r4, #0
 800e09c:	1cb1      	adds	r1, r6, #2
 800e09e:	e7cc      	b.n	800e03a <__gethex+0xb6>
 800e0a0:	2401      	movs	r4, #1
 800e0a2:	e7fb      	b.n	800e09c <__gethex+0x118>
 800e0a4:	fb03 0002 	mla	r0, r3, r2, r0
 800e0a8:	e7ce      	b.n	800e048 <__gethex+0xc4>
 800e0aa:	4631      	mov	r1, r6
 800e0ac:	e7de      	b.n	800e06c <__gethex+0xe8>
 800e0ae:	eba6 0309 	sub.w	r3, r6, r9
 800e0b2:	3b01      	subs	r3, #1
 800e0b4:	4629      	mov	r1, r5
 800e0b6:	2b07      	cmp	r3, #7
 800e0b8:	dc0a      	bgt.n	800e0d0 <__gethex+0x14c>
 800e0ba:	9801      	ldr	r0, [sp, #4]
 800e0bc:	f000 fafc 	bl	800e6b8 <_Balloc>
 800e0c0:	4604      	mov	r4, r0
 800e0c2:	b940      	cbnz	r0, 800e0d6 <__gethex+0x152>
 800e0c4:	4b5c      	ldr	r3, [pc, #368]	@ (800e238 <__gethex+0x2b4>)
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	21e4      	movs	r1, #228	@ 0xe4
 800e0ca:	485c      	ldr	r0, [pc, #368]	@ (800e23c <__gethex+0x2b8>)
 800e0cc:	f7ff f83e 	bl	800d14c <__assert_func>
 800e0d0:	3101      	adds	r1, #1
 800e0d2:	105b      	asrs	r3, r3, #1
 800e0d4:	e7ef      	b.n	800e0b6 <__gethex+0x132>
 800e0d6:	f100 0a14 	add.w	sl, r0, #20
 800e0da:	2300      	movs	r3, #0
 800e0dc:	4655      	mov	r5, sl
 800e0de:	469b      	mov	fp, r3
 800e0e0:	45b1      	cmp	r9, r6
 800e0e2:	d337      	bcc.n	800e154 <__gethex+0x1d0>
 800e0e4:	f845 bb04 	str.w	fp, [r5], #4
 800e0e8:	eba5 050a 	sub.w	r5, r5, sl
 800e0ec:	10ad      	asrs	r5, r5, #2
 800e0ee:	6125      	str	r5, [r4, #16]
 800e0f0:	4658      	mov	r0, fp
 800e0f2:	f000 fbd3 	bl	800e89c <__hi0bits>
 800e0f6:	016d      	lsls	r5, r5, #5
 800e0f8:	f8d8 6000 	ldr.w	r6, [r8]
 800e0fc:	1a2d      	subs	r5, r5, r0
 800e0fe:	42b5      	cmp	r5, r6
 800e100:	dd54      	ble.n	800e1ac <__gethex+0x228>
 800e102:	1bad      	subs	r5, r5, r6
 800e104:	4629      	mov	r1, r5
 800e106:	4620      	mov	r0, r4
 800e108:	f000 ff67 	bl	800efda <__any_on>
 800e10c:	4681      	mov	r9, r0
 800e10e:	b178      	cbz	r0, 800e130 <__gethex+0x1ac>
 800e110:	1e6b      	subs	r3, r5, #1
 800e112:	1159      	asrs	r1, r3, #5
 800e114:	f003 021f 	and.w	r2, r3, #31
 800e118:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e11c:	f04f 0901 	mov.w	r9, #1
 800e120:	fa09 f202 	lsl.w	r2, r9, r2
 800e124:	420a      	tst	r2, r1
 800e126:	d003      	beq.n	800e130 <__gethex+0x1ac>
 800e128:	454b      	cmp	r3, r9
 800e12a:	dc36      	bgt.n	800e19a <__gethex+0x216>
 800e12c:	f04f 0902 	mov.w	r9, #2
 800e130:	4629      	mov	r1, r5
 800e132:	4620      	mov	r0, r4
 800e134:	f7ff febe 	bl	800deb4 <rshift>
 800e138:	442f      	add	r7, r5
 800e13a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e13e:	42bb      	cmp	r3, r7
 800e140:	da42      	bge.n	800e1c8 <__gethex+0x244>
 800e142:	9801      	ldr	r0, [sp, #4]
 800e144:	4621      	mov	r1, r4
 800e146:	f000 faf7 	bl	800e738 <_Bfree>
 800e14a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e14c:	2300      	movs	r3, #0
 800e14e:	6013      	str	r3, [r2, #0]
 800e150:	25a3      	movs	r5, #163	@ 0xa3
 800e152:	e793      	b.n	800e07c <__gethex+0xf8>
 800e154:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e158:	2a2e      	cmp	r2, #46	@ 0x2e
 800e15a:	d012      	beq.n	800e182 <__gethex+0x1fe>
 800e15c:	2b20      	cmp	r3, #32
 800e15e:	d104      	bne.n	800e16a <__gethex+0x1e6>
 800e160:	f845 bb04 	str.w	fp, [r5], #4
 800e164:	f04f 0b00 	mov.w	fp, #0
 800e168:	465b      	mov	r3, fp
 800e16a:	7830      	ldrb	r0, [r6, #0]
 800e16c:	9303      	str	r3, [sp, #12]
 800e16e:	f7ff fef3 	bl	800df58 <__hexdig_fun>
 800e172:	9b03      	ldr	r3, [sp, #12]
 800e174:	f000 000f 	and.w	r0, r0, #15
 800e178:	4098      	lsls	r0, r3
 800e17a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e17e:	3304      	adds	r3, #4
 800e180:	e7ae      	b.n	800e0e0 <__gethex+0x15c>
 800e182:	45b1      	cmp	r9, r6
 800e184:	d8ea      	bhi.n	800e15c <__gethex+0x1d8>
 800e186:	492b      	ldr	r1, [pc, #172]	@ (800e234 <__gethex+0x2b0>)
 800e188:	9303      	str	r3, [sp, #12]
 800e18a:	2201      	movs	r2, #1
 800e18c:	4630      	mov	r0, r6
 800e18e:	f7fe fed9 	bl	800cf44 <strncmp>
 800e192:	9b03      	ldr	r3, [sp, #12]
 800e194:	2800      	cmp	r0, #0
 800e196:	d1e1      	bne.n	800e15c <__gethex+0x1d8>
 800e198:	e7a2      	b.n	800e0e0 <__gethex+0x15c>
 800e19a:	1ea9      	subs	r1, r5, #2
 800e19c:	4620      	mov	r0, r4
 800e19e:	f000 ff1c 	bl	800efda <__any_on>
 800e1a2:	2800      	cmp	r0, #0
 800e1a4:	d0c2      	beq.n	800e12c <__gethex+0x1a8>
 800e1a6:	f04f 0903 	mov.w	r9, #3
 800e1aa:	e7c1      	b.n	800e130 <__gethex+0x1ac>
 800e1ac:	da09      	bge.n	800e1c2 <__gethex+0x23e>
 800e1ae:	1b75      	subs	r5, r6, r5
 800e1b0:	4621      	mov	r1, r4
 800e1b2:	9801      	ldr	r0, [sp, #4]
 800e1b4:	462a      	mov	r2, r5
 800e1b6:	f000 fcd7 	bl	800eb68 <__lshift>
 800e1ba:	1b7f      	subs	r7, r7, r5
 800e1bc:	4604      	mov	r4, r0
 800e1be:	f100 0a14 	add.w	sl, r0, #20
 800e1c2:	f04f 0900 	mov.w	r9, #0
 800e1c6:	e7b8      	b.n	800e13a <__gethex+0x1b6>
 800e1c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e1cc:	42bd      	cmp	r5, r7
 800e1ce:	dd6f      	ble.n	800e2b0 <__gethex+0x32c>
 800e1d0:	1bed      	subs	r5, r5, r7
 800e1d2:	42ae      	cmp	r6, r5
 800e1d4:	dc34      	bgt.n	800e240 <__gethex+0x2bc>
 800e1d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e1da:	2b02      	cmp	r3, #2
 800e1dc:	d022      	beq.n	800e224 <__gethex+0x2a0>
 800e1de:	2b03      	cmp	r3, #3
 800e1e0:	d024      	beq.n	800e22c <__gethex+0x2a8>
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d115      	bne.n	800e212 <__gethex+0x28e>
 800e1e6:	42ae      	cmp	r6, r5
 800e1e8:	d113      	bne.n	800e212 <__gethex+0x28e>
 800e1ea:	2e01      	cmp	r6, #1
 800e1ec:	d10b      	bne.n	800e206 <__gethex+0x282>
 800e1ee:	9a02      	ldr	r2, [sp, #8]
 800e1f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e1f4:	6013      	str	r3, [r2, #0]
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	6123      	str	r3, [r4, #16]
 800e1fa:	f8ca 3000 	str.w	r3, [sl]
 800e1fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e200:	2562      	movs	r5, #98	@ 0x62
 800e202:	601c      	str	r4, [r3, #0]
 800e204:	e73a      	b.n	800e07c <__gethex+0xf8>
 800e206:	1e71      	subs	r1, r6, #1
 800e208:	4620      	mov	r0, r4
 800e20a:	f000 fee6 	bl	800efda <__any_on>
 800e20e:	2800      	cmp	r0, #0
 800e210:	d1ed      	bne.n	800e1ee <__gethex+0x26a>
 800e212:	9801      	ldr	r0, [sp, #4]
 800e214:	4621      	mov	r1, r4
 800e216:	f000 fa8f 	bl	800e738 <_Bfree>
 800e21a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e21c:	2300      	movs	r3, #0
 800e21e:	6013      	str	r3, [r2, #0]
 800e220:	2550      	movs	r5, #80	@ 0x50
 800e222:	e72b      	b.n	800e07c <__gethex+0xf8>
 800e224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e226:	2b00      	cmp	r3, #0
 800e228:	d1f3      	bne.n	800e212 <__gethex+0x28e>
 800e22a:	e7e0      	b.n	800e1ee <__gethex+0x26a>
 800e22c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d1dd      	bne.n	800e1ee <__gethex+0x26a>
 800e232:	e7ee      	b.n	800e212 <__gethex+0x28e>
 800e234:	0800feac 	.word	0x0800feac
 800e238:	08010154 	.word	0x08010154
 800e23c:	08010165 	.word	0x08010165
 800e240:	1e6f      	subs	r7, r5, #1
 800e242:	f1b9 0f00 	cmp.w	r9, #0
 800e246:	d130      	bne.n	800e2aa <__gethex+0x326>
 800e248:	b127      	cbz	r7, 800e254 <__gethex+0x2d0>
 800e24a:	4639      	mov	r1, r7
 800e24c:	4620      	mov	r0, r4
 800e24e:	f000 fec4 	bl	800efda <__any_on>
 800e252:	4681      	mov	r9, r0
 800e254:	117a      	asrs	r2, r7, #5
 800e256:	2301      	movs	r3, #1
 800e258:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e25c:	f007 071f 	and.w	r7, r7, #31
 800e260:	40bb      	lsls	r3, r7
 800e262:	4213      	tst	r3, r2
 800e264:	4629      	mov	r1, r5
 800e266:	4620      	mov	r0, r4
 800e268:	bf18      	it	ne
 800e26a:	f049 0902 	orrne.w	r9, r9, #2
 800e26e:	f7ff fe21 	bl	800deb4 <rshift>
 800e272:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e276:	1b76      	subs	r6, r6, r5
 800e278:	2502      	movs	r5, #2
 800e27a:	f1b9 0f00 	cmp.w	r9, #0
 800e27e:	d047      	beq.n	800e310 <__gethex+0x38c>
 800e280:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e284:	2b02      	cmp	r3, #2
 800e286:	d015      	beq.n	800e2b4 <__gethex+0x330>
 800e288:	2b03      	cmp	r3, #3
 800e28a:	d017      	beq.n	800e2bc <__gethex+0x338>
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d109      	bne.n	800e2a4 <__gethex+0x320>
 800e290:	f019 0f02 	tst.w	r9, #2
 800e294:	d006      	beq.n	800e2a4 <__gethex+0x320>
 800e296:	f8da 3000 	ldr.w	r3, [sl]
 800e29a:	ea49 0903 	orr.w	r9, r9, r3
 800e29e:	f019 0f01 	tst.w	r9, #1
 800e2a2:	d10e      	bne.n	800e2c2 <__gethex+0x33e>
 800e2a4:	f045 0510 	orr.w	r5, r5, #16
 800e2a8:	e032      	b.n	800e310 <__gethex+0x38c>
 800e2aa:	f04f 0901 	mov.w	r9, #1
 800e2ae:	e7d1      	b.n	800e254 <__gethex+0x2d0>
 800e2b0:	2501      	movs	r5, #1
 800e2b2:	e7e2      	b.n	800e27a <__gethex+0x2f6>
 800e2b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2b6:	f1c3 0301 	rsb	r3, r3, #1
 800e2ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e2bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d0f0      	beq.n	800e2a4 <__gethex+0x320>
 800e2c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e2c6:	f104 0314 	add.w	r3, r4, #20
 800e2ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e2ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e2d2:	f04f 0c00 	mov.w	ip, #0
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e2e0:	d01b      	beq.n	800e31a <__gethex+0x396>
 800e2e2:	3201      	adds	r2, #1
 800e2e4:	6002      	str	r2, [r0, #0]
 800e2e6:	2d02      	cmp	r5, #2
 800e2e8:	f104 0314 	add.w	r3, r4, #20
 800e2ec:	d13c      	bne.n	800e368 <__gethex+0x3e4>
 800e2ee:	f8d8 2000 	ldr.w	r2, [r8]
 800e2f2:	3a01      	subs	r2, #1
 800e2f4:	42b2      	cmp	r2, r6
 800e2f6:	d109      	bne.n	800e30c <__gethex+0x388>
 800e2f8:	1171      	asrs	r1, r6, #5
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e300:	f006 061f 	and.w	r6, r6, #31
 800e304:	fa02 f606 	lsl.w	r6, r2, r6
 800e308:	421e      	tst	r6, r3
 800e30a:	d13a      	bne.n	800e382 <__gethex+0x3fe>
 800e30c:	f045 0520 	orr.w	r5, r5, #32
 800e310:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e312:	601c      	str	r4, [r3, #0]
 800e314:	9b02      	ldr	r3, [sp, #8]
 800e316:	601f      	str	r7, [r3, #0]
 800e318:	e6b0      	b.n	800e07c <__gethex+0xf8>
 800e31a:	4299      	cmp	r1, r3
 800e31c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e320:	d8d9      	bhi.n	800e2d6 <__gethex+0x352>
 800e322:	68a3      	ldr	r3, [r4, #8]
 800e324:	459b      	cmp	fp, r3
 800e326:	db17      	blt.n	800e358 <__gethex+0x3d4>
 800e328:	6861      	ldr	r1, [r4, #4]
 800e32a:	9801      	ldr	r0, [sp, #4]
 800e32c:	3101      	adds	r1, #1
 800e32e:	f000 f9c3 	bl	800e6b8 <_Balloc>
 800e332:	4681      	mov	r9, r0
 800e334:	b918      	cbnz	r0, 800e33e <__gethex+0x3ba>
 800e336:	4b1a      	ldr	r3, [pc, #104]	@ (800e3a0 <__gethex+0x41c>)
 800e338:	4602      	mov	r2, r0
 800e33a:	2184      	movs	r1, #132	@ 0x84
 800e33c:	e6c5      	b.n	800e0ca <__gethex+0x146>
 800e33e:	6922      	ldr	r2, [r4, #16]
 800e340:	3202      	adds	r2, #2
 800e342:	f104 010c 	add.w	r1, r4, #12
 800e346:	0092      	lsls	r2, r2, #2
 800e348:	300c      	adds	r0, #12
 800e34a:	f7fe fee0 	bl	800d10e <memcpy>
 800e34e:	4621      	mov	r1, r4
 800e350:	9801      	ldr	r0, [sp, #4]
 800e352:	f000 f9f1 	bl	800e738 <_Bfree>
 800e356:	464c      	mov	r4, r9
 800e358:	6923      	ldr	r3, [r4, #16]
 800e35a:	1c5a      	adds	r2, r3, #1
 800e35c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e360:	6122      	str	r2, [r4, #16]
 800e362:	2201      	movs	r2, #1
 800e364:	615a      	str	r2, [r3, #20]
 800e366:	e7be      	b.n	800e2e6 <__gethex+0x362>
 800e368:	6922      	ldr	r2, [r4, #16]
 800e36a:	455a      	cmp	r2, fp
 800e36c:	dd0b      	ble.n	800e386 <__gethex+0x402>
 800e36e:	2101      	movs	r1, #1
 800e370:	4620      	mov	r0, r4
 800e372:	f7ff fd9f 	bl	800deb4 <rshift>
 800e376:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e37a:	3701      	adds	r7, #1
 800e37c:	42bb      	cmp	r3, r7
 800e37e:	f6ff aee0 	blt.w	800e142 <__gethex+0x1be>
 800e382:	2501      	movs	r5, #1
 800e384:	e7c2      	b.n	800e30c <__gethex+0x388>
 800e386:	f016 061f 	ands.w	r6, r6, #31
 800e38a:	d0fa      	beq.n	800e382 <__gethex+0x3fe>
 800e38c:	4453      	add	r3, sl
 800e38e:	f1c6 0620 	rsb	r6, r6, #32
 800e392:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e396:	f000 fa81 	bl	800e89c <__hi0bits>
 800e39a:	42b0      	cmp	r0, r6
 800e39c:	dbe7      	blt.n	800e36e <__gethex+0x3ea>
 800e39e:	e7f0      	b.n	800e382 <__gethex+0x3fe>
 800e3a0:	08010154 	.word	0x08010154

0800e3a4 <L_shift>:
 800e3a4:	f1c2 0208 	rsb	r2, r2, #8
 800e3a8:	0092      	lsls	r2, r2, #2
 800e3aa:	b570      	push	{r4, r5, r6, lr}
 800e3ac:	f1c2 0620 	rsb	r6, r2, #32
 800e3b0:	6843      	ldr	r3, [r0, #4]
 800e3b2:	6804      	ldr	r4, [r0, #0]
 800e3b4:	fa03 f506 	lsl.w	r5, r3, r6
 800e3b8:	432c      	orrs	r4, r5
 800e3ba:	40d3      	lsrs	r3, r2
 800e3bc:	6004      	str	r4, [r0, #0]
 800e3be:	f840 3f04 	str.w	r3, [r0, #4]!
 800e3c2:	4288      	cmp	r0, r1
 800e3c4:	d3f4      	bcc.n	800e3b0 <L_shift+0xc>
 800e3c6:	bd70      	pop	{r4, r5, r6, pc}

0800e3c8 <__match>:
 800e3c8:	b530      	push	{r4, r5, lr}
 800e3ca:	6803      	ldr	r3, [r0, #0]
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3d2:	b914      	cbnz	r4, 800e3da <__match+0x12>
 800e3d4:	6003      	str	r3, [r0, #0]
 800e3d6:	2001      	movs	r0, #1
 800e3d8:	bd30      	pop	{r4, r5, pc}
 800e3da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e3e2:	2d19      	cmp	r5, #25
 800e3e4:	bf98      	it	ls
 800e3e6:	3220      	addls	r2, #32
 800e3e8:	42a2      	cmp	r2, r4
 800e3ea:	d0f0      	beq.n	800e3ce <__match+0x6>
 800e3ec:	2000      	movs	r0, #0
 800e3ee:	e7f3      	b.n	800e3d8 <__match+0x10>

0800e3f0 <__hexnan>:
 800e3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f4:	680b      	ldr	r3, [r1, #0]
 800e3f6:	6801      	ldr	r1, [r0, #0]
 800e3f8:	115e      	asrs	r6, r3, #5
 800e3fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e3fe:	f013 031f 	ands.w	r3, r3, #31
 800e402:	b087      	sub	sp, #28
 800e404:	bf18      	it	ne
 800e406:	3604      	addne	r6, #4
 800e408:	2500      	movs	r5, #0
 800e40a:	1f37      	subs	r7, r6, #4
 800e40c:	4682      	mov	sl, r0
 800e40e:	4690      	mov	r8, r2
 800e410:	9301      	str	r3, [sp, #4]
 800e412:	f846 5c04 	str.w	r5, [r6, #-4]
 800e416:	46b9      	mov	r9, r7
 800e418:	463c      	mov	r4, r7
 800e41a:	9502      	str	r5, [sp, #8]
 800e41c:	46ab      	mov	fp, r5
 800e41e:	784a      	ldrb	r2, [r1, #1]
 800e420:	1c4b      	adds	r3, r1, #1
 800e422:	9303      	str	r3, [sp, #12]
 800e424:	b342      	cbz	r2, 800e478 <__hexnan+0x88>
 800e426:	4610      	mov	r0, r2
 800e428:	9105      	str	r1, [sp, #20]
 800e42a:	9204      	str	r2, [sp, #16]
 800e42c:	f7ff fd94 	bl	800df58 <__hexdig_fun>
 800e430:	2800      	cmp	r0, #0
 800e432:	d151      	bne.n	800e4d8 <__hexnan+0xe8>
 800e434:	9a04      	ldr	r2, [sp, #16]
 800e436:	9905      	ldr	r1, [sp, #20]
 800e438:	2a20      	cmp	r2, #32
 800e43a:	d818      	bhi.n	800e46e <__hexnan+0x7e>
 800e43c:	9b02      	ldr	r3, [sp, #8]
 800e43e:	459b      	cmp	fp, r3
 800e440:	dd13      	ble.n	800e46a <__hexnan+0x7a>
 800e442:	454c      	cmp	r4, r9
 800e444:	d206      	bcs.n	800e454 <__hexnan+0x64>
 800e446:	2d07      	cmp	r5, #7
 800e448:	dc04      	bgt.n	800e454 <__hexnan+0x64>
 800e44a:	462a      	mov	r2, r5
 800e44c:	4649      	mov	r1, r9
 800e44e:	4620      	mov	r0, r4
 800e450:	f7ff ffa8 	bl	800e3a4 <L_shift>
 800e454:	4544      	cmp	r4, r8
 800e456:	d952      	bls.n	800e4fe <__hexnan+0x10e>
 800e458:	2300      	movs	r3, #0
 800e45a:	f1a4 0904 	sub.w	r9, r4, #4
 800e45e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e462:	f8cd b008 	str.w	fp, [sp, #8]
 800e466:	464c      	mov	r4, r9
 800e468:	461d      	mov	r5, r3
 800e46a:	9903      	ldr	r1, [sp, #12]
 800e46c:	e7d7      	b.n	800e41e <__hexnan+0x2e>
 800e46e:	2a29      	cmp	r2, #41	@ 0x29
 800e470:	d157      	bne.n	800e522 <__hexnan+0x132>
 800e472:	3102      	adds	r1, #2
 800e474:	f8ca 1000 	str.w	r1, [sl]
 800e478:	f1bb 0f00 	cmp.w	fp, #0
 800e47c:	d051      	beq.n	800e522 <__hexnan+0x132>
 800e47e:	454c      	cmp	r4, r9
 800e480:	d206      	bcs.n	800e490 <__hexnan+0xa0>
 800e482:	2d07      	cmp	r5, #7
 800e484:	dc04      	bgt.n	800e490 <__hexnan+0xa0>
 800e486:	462a      	mov	r2, r5
 800e488:	4649      	mov	r1, r9
 800e48a:	4620      	mov	r0, r4
 800e48c:	f7ff ff8a 	bl	800e3a4 <L_shift>
 800e490:	4544      	cmp	r4, r8
 800e492:	d936      	bls.n	800e502 <__hexnan+0x112>
 800e494:	f1a8 0204 	sub.w	r2, r8, #4
 800e498:	4623      	mov	r3, r4
 800e49a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e49e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e4a2:	429f      	cmp	r7, r3
 800e4a4:	d2f9      	bcs.n	800e49a <__hexnan+0xaa>
 800e4a6:	1b3b      	subs	r3, r7, r4
 800e4a8:	f023 0303 	bic.w	r3, r3, #3
 800e4ac:	3304      	adds	r3, #4
 800e4ae:	3401      	adds	r4, #1
 800e4b0:	3e03      	subs	r6, #3
 800e4b2:	42b4      	cmp	r4, r6
 800e4b4:	bf88      	it	hi
 800e4b6:	2304      	movhi	r3, #4
 800e4b8:	4443      	add	r3, r8
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	f843 2b04 	str.w	r2, [r3], #4
 800e4c0:	429f      	cmp	r7, r3
 800e4c2:	d2fb      	bcs.n	800e4bc <__hexnan+0xcc>
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	b91b      	cbnz	r3, 800e4d0 <__hexnan+0xe0>
 800e4c8:	4547      	cmp	r7, r8
 800e4ca:	d128      	bne.n	800e51e <__hexnan+0x12e>
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	603b      	str	r3, [r7, #0]
 800e4d0:	2005      	movs	r0, #5
 800e4d2:	b007      	add	sp, #28
 800e4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d8:	3501      	adds	r5, #1
 800e4da:	2d08      	cmp	r5, #8
 800e4dc:	f10b 0b01 	add.w	fp, fp, #1
 800e4e0:	dd06      	ble.n	800e4f0 <__hexnan+0x100>
 800e4e2:	4544      	cmp	r4, r8
 800e4e4:	d9c1      	bls.n	800e46a <__hexnan+0x7a>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e4ec:	2501      	movs	r5, #1
 800e4ee:	3c04      	subs	r4, #4
 800e4f0:	6822      	ldr	r2, [r4, #0]
 800e4f2:	f000 000f 	and.w	r0, r0, #15
 800e4f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e4fa:	6020      	str	r0, [r4, #0]
 800e4fc:	e7b5      	b.n	800e46a <__hexnan+0x7a>
 800e4fe:	2508      	movs	r5, #8
 800e500:	e7b3      	b.n	800e46a <__hexnan+0x7a>
 800e502:	9b01      	ldr	r3, [sp, #4]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d0dd      	beq.n	800e4c4 <__hexnan+0xd4>
 800e508:	f1c3 0320 	rsb	r3, r3, #32
 800e50c:	f04f 32ff 	mov.w	r2, #4294967295
 800e510:	40da      	lsrs	r2, r3
 800e512:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e516:	4013      	ands	r3, r2
 800e518:	f846 3c04 	str.w	r3, [r6, #-4]
 800e51c:	e7d2      	b.n	800e4c4 <__hexnan+0xd4>
 800e51e:	3f04      	subs	r7, #4
 800e520:	e7d0      	b.n	800e4c4 <__hexnan+0xd4>
 800e522:	2004      	movs	r0, #4
 800e524:	e7d5      	b.n	800e4d2 <__hexnan+0xe2>
	...

0800e528 <malloc>:
 800e528:	4b02      	ldr	r3, [pc, #8]	@ (800e534 <malloc+0xc>)
 800e52a:	4601      	mov	r1, r0
 800e52c:	6818      	ldr	r0, [r3, #0]
 800e52e:	f000 b825 	b.w	800e57c <_malloc_r>
 800e532:	bf00      	nop
 800e534:	2000024c 	.word	0x2000024c

0800e538 <sbrk_aligned>:
 800e538:	b570      	push	{r4, r5, r6, lr}
 800e53a:	4e0f      	ldr	r6, [pc, #60]	@ (800e578 <sbrk_aligned+0x40>)
 800e53c:	460c      	mov	r4, r1
 800e53e:	6831      	ldr	r1, [r6, #0]
 800e540:	4605      	mov	r5, r0
 800e542:	b911      	cbnz	r1, 800e54a <sbrk_aligned+0x12>
 800e544:	f001 f96c 	bl	800f820 <_sbrk_r>
 800e548:	6030      	str	r0, [r6, #0]
 800e54a:	4621      	mov	r1, r4
 800e54c:	4628      	mov	r0, r5
 800e54e:	f001 f967 	bl	800f820 <_sbrk_r>
 800e552:	1c43      	adds	r3, r0, #1
 800e554:	d103      	bne.n	800e55e <sbrk_aligned+0x26>
 800e556:	f04f 34ff 	mov.w	r4, #4294967295
 800e55a:	4620      	mov	r0, r4
 800e55c:	bd70      	pop	{r4, r5, r6, pc}
 800e55e:	1cc4      	adds	r4, r0, #3
 800e560:	f024 0403 	bic.w	r4, r4, #3
 800e564:	42a0      	cmp	r0, r4
 800e566:	d0f8      	beq.n	800e55a <sbrk_aligned+0x22>
 800e568:	1a21      	subs	r1, r4, r0
 800e56a:	4628      	mov	r0, r5
 800e56c:	f001 f958 	bl	800f820 <_sbrk_r>
 800e570:	3001      	adds	r0, #1
 800e572:	d1f2      	bne.n	800e55a <sbrk_aligned+0x22>
 800e574:	e7ef      	b.n	800e556 <sbrk_aligned+0x1e>
 800e576:	bf00      	nop
 800e578:	20005128 	.word	0x20005128

0800e57c <_malloc_r>:
 800e57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e580:	1ccd      	adds	r5, r1, #3
 800e582:	f025 0503 	bic.w	r5, r5, #3
 800e586:	3508      	adds	r5, #8
 800e588:	2d0c      	cmp	r5, #12
 800e58a:	bf38      	it	cc
 800e58c:	250c      	movcc	r5, #12
 800e58e:	2d00      	cmp	r5, #0
 800e590:	4606      	mov	r6, r0
 800e592:	db01      	blt.n	800e598 <_malloc_r+0x1c>
 800e594:	42a9      	cmp	r1, r5
 800e596:	d904      	bls.n	800e5a2 <_malloc_r+0x26>
 800e598:	230c      	movs	r3, #12
 800e59a:	6033      	str	r3, [r6, #0]
 800e59c:	2000      	movs	r0, #0
 800e59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e678 <_malloc_r+0xfc>
 800e5a6:	f000 f87b 	bl	800e6a0 <__malloc_lock>
 800e5aa:	f8d8 3000 	ldr.w	r3, [r8]
 800e5ae:	461c      	mov	r4, r3
 800e5b0:	bb44      	cbnz	r4, 800e604 <_malloc_r+0x88>
 800e5b2:	4629      	mov	r1, r5
 800e5b4:	4630      	mov	r0, r6
 800e5b6:	f7ff ffbf 	bl	800e538 <sbrk_aligned>
 800e5ba:	1c43      	adds	r3, r0, #1
 800e5bc:	4604      	mov	r4, r0
 800e5be:	d158      	bne.n	800e672 <_malloc_r+0xf6>
 800e5c0:	f8d8 4000 	ldr.w	r4, [r8]
 800e5c4:	4627      	mov	r7, r4
 800e5c6:	2f00      	cmp	r7, #0
 800e5c8:	d143      	bne.n	800e652 <_malloc_r+0xd6>
 800e5ca:	2c00      	cmp	r4, #0
 800e5cc:	d04b      	beq.n	800e666 <_malloc_r+0xea>
 800e5ce:	6823      	ldr	r3, [r4, #0]
 800e5d0:	4639      	mov	r1, r7
 800e5d2:	4630      	mov	r0, r6
 800e5d4:	eb04 0903 	add.w	r9, r4, r3
 800e5d8:	f001 f922 	bl	800f820 <_sbrk_r>
 800e5dc:	4581      	cmp	r9, r0
 800e5de:	d142      	bne.n	800e666 <_malloc_r+0xea>
 800e5e0:	6821      	ldr	r1, [r4, #0]
 800e5e2:	1a6d      	subs	r5, r5, r1
 800e5e4:	4629      	mov	r1, r5
 800e5e6:	4630      	mov	r0, r6
 800e5e8:	f7ff ffa6 	bl	800e538 <sbrk_aligned>
 800e5ec:	3001      	adds	r0, #1
 800e5ee:	d03a      	beq.n	800e666 <_malloc_r+0xea>
 800e5f0:	6823      	ldr	r3, [r4, #0]
 800e5f2:	442b      	add	r3, r5
 800e5f4:	6023      	str	r3, [r4, #0]
 800e5f6:	f8d8 3000 	ldr.w	r3, [r8]
 800e5fa:	685a      	ldr	r2, [r3, #4]
 800e5fc:	bb62      	cbnz	r2, 800e658 <_malloc_r+0xdc>
 800e5fe:	f8c8 7000 	str.w	r7, [r8]
 800e602:	e00f      	b.n	800e624 <_malloc_r+0xa8>
 800e604:	6822      	ldr	r2, [r4, #0]
 800e606:	1b52      	subs	r2, r2, r5
 800e608:	d420      	bmi.n	800e64c <_malloc_r+0xd0>
 800e60a:	2a0b      	cmp	r2, #11
 800e60c:	d917      	bls.n	800e63e <_malloc_r+0xc2>
 800e60e:	1961      	adds	r1, r4, r5
 800e610:	42a3      	cmp	r3, r4
 800e612:	6025      	str	r5, [r4, #0]
 800e614:	bf18      	it	ne
 800e616:	6059      	strne	r1, [r3, #4]
 800e618:	6863      	ldr	r3, [r4, #4]
 800e61a:	bf08      	it	eq
 800e61c:	f8c8 1000 	streq.w	r1, [r8]
 800e620:	5162      	str	r2, [r4, r5]
 800e622:	604b      	str	r3, [r1, #4]
 800e624:	4630      	mov	r0, r6
 800e626:	f000 f841 	bl	800e6ac <__malloc_unlock>
 800e62a:	f104 000b 	add.w	r0, r4, #11
 800e62e:	1d23      	adds	r3, r4, #4
 800e630:	f020 0007 	bic.w	r0, r0, #7
 800e634:	1ac2      	subs	r2, r0, r3
 800e636:	bf1c      	itt	ne
 800e638:	1a1b      	subne	r3, r3, r0
 800e63a:	50a3      	strne	r3, [r4, r2]
 800e63c:	e7af      	b.n	800e59e <_malloc_r+0x22>
 800e63e:	6862      	ldr	r2, [r4, #4]
 800e640:	42a3      	cmp	r3, r4
 800e642:	bf0c      	ite	eq
 800e644:	f8c8 2000 	streq.w	r2, [r8]
 800e648:	605a      	strne	r2, [r3, #4]
 800e64a:	e7eb      	b.n	800e624 <_malloc_r+0xa8>
 800e64c:	4623      	mov	r3, r4
 800e64e:	6864      	ldr	r4, [r4, #4]
 800e650:	e7ae      	b.n	800e5b0 <_malloc_r+0x34>
 800e652:	463c      	mov	r4, r7
 800e654:	687f      	ldr	r7, [r7, #4]
 800e656:	e7b6      	b.n	800e5c6 <_malloc_r+0x4a>
 800e658:	461a      	mov	r2, r3
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	42a3      	cmp	r3, r4
 800e65e:	d1fb      	bne.n	800e658 <_malloc_r+0xdc>
 800e660:	2300      	movs	r3, #0
 800e662:	6053      	str	r3, [r2, #4]
 800e664:	e7de      	b.n	800e624 <_malloc_r+0xa8>
 800e666:	230c      	movs	r3, #12
 800e668:	6033      	str	r3, [r6, #0]
 800e66a:	4630      	mov	r0, r6
 800e66c:	f000 f81e 	bl	800e6ac <__malloc_unlock>
 800e670:	e794      	b.n	800e59c <_malloc_r+0x20>
 800e672:	6005      	str	r5, [r0, #0]
 800e674:	e7d6      	b.n	800e624 <_malloc_r+0xa8>
 800e676:	bf00      	nop
 800e678:	2000512c 	.word	0x2000512c

0800e67c <__ascii_mbtowc>:
 800e67c:	b082      	sub	sp, #8
 800e67e:	b901      	cbnz	r1, 800e682 <__ascii_mbtowc+0x6>
 800e680:	a901      	add	r1, sp, #4
 800e682:	b142      	cbz	r2, 800e696 <__ascii_mbtowc+0x1a>
 800e684:	b14b      	cbz	r3, 800e69a <__ascii_mbtowc+0x1e>
 800e686:	7813      	ldrb	r3, [r2, #0]
 800e688:	600b      	str	r3, [r1, #0]
 800e68a:	7812      	ldrb	r2, [r2, #0]
 800e68c:	1e10      	subs	r0, r2, #0
 800e68e:	bf18      	it	ne
 800e690:	2001      	movne	r0, #1
 800e692:	b002      	add	sp, #8
 800e694:	4770      	bx	lr
 800e696:	4610      	mov	r0, r2
 800e698:	e7fb      	b.n	800e692 <__ascii_mbtowc+0x16>
 800e69a:	f06f 0001 	mvn.w	r0, #1
 800e69e:	e7f8      	b.n	800e692 <__ascii_mbtowc+0x16>

0800e6a0 <__malloc_lock>:
 800e6a0:	4801      	ldr	r0, [pc, #4]	@ (800e6a8 <__malloc_lock+0x8>)
 800e6a2:	f7fe bd32 	b.w	800d10a <__retarget_lock_acquire_recursive>
 800e6a6:	bf00      	nop
 800e6a8:	20005124 	.word	0x20005124

0800e6ac <__malloc_unlock>:
 800e6ac:	4801      	ldr	r0, [pc, #4]	@ (800e6b4 <__malloc_unlock+0x8>)
 800e6ae:	f7fe bd2d 	b.w	800d10c <__retarget_lock_release_recursive>
 800e6b2:	bf00      	nop
 800e6b4:	20005124 	.word	0x20005124

0800e6b8 <_Balloc>:
 800e6b8:	b570      	push	{r4, r5, r6, lr}
 800e6ba:	69c6      	ldr	r6, [r0, #28]
 800e6bc:	4604      	mov	r4, r0
 800e6be:	460d      	mov	r5, r1
 800e6c0:	b976      	cbnz	r6, 800e6e0 <_Balloc+0x28>
 800e6c2:	2010      	movs	r0, #16
 800e6c4:	f7ff ff30 	bl	800e528 <malloc>
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	61e0      	str	r0, [r4, #28]
 800e6cc:	b920      	cbnz	r0, 800e6d8 <_Balloc+0x20>
 800e6ce:	4b18      	ldr	r3, [pc, #96]	@ (800e730 <_Balloc+0x78>)
 800e6d0:	4818      	ldr	r0, [pc, #96]	@ (800e734 <_Balloc+0x7c>)
 800e6d2:	216b      	movs	r1, #107	@ 0x6b
 800e6d4:	f7fe fd3a 	bl	800d14c <__assert_func>
 800e6d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e6dc:	6006      	str	r6, [r0, #0]
 800e6de:	60c6      	str	r6, [r0, #12]
 800e6e0:	69e6      	ldr	r6, [r4, #28]
 800e6e2:	68f3      	ldr	r3, [r6, #12]
 800e6e4:	b183      	cbz	r3, 800e708 <_Balloc+0x50>
 800e6e6:	69e3      	ldr	r3, [r4, #28]
 800e6e8:	68db      	ldr	r3, [r3, #12]
 800e6ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e6ee:	b9b8      	cbnz	r0, 800e720 <_Balloc+0x68>
 800e6f0:	2101      	movs	r1, #1
 800e6f2:	fa01 f605 	lsl.w	r6, r1, r5
 800e6f6:	1d72      	adds	r2, r6, #5
 800e6f8:	0092      	lsls	r2, r2, #2
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f001 f8a7 	bl	800f84e <_calloc_r>
 800e700:	b160      	cbz	r0, 800e71c <_Balloc+0x64>
 800e702:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e706:	e00e      	b.n	800e726 <_Balloc+0x6e>
 800e708:	2221      	movs	r2, #33	@ 0x21
 800e70a:	2104      	movs	r1, #4
 800e70c:	4620      	mov	r0, r4
 800e70e:	f001 f89e 	bl	800f84e <_calloc_r>
 800e712:	69e3      	ldr	r3, [r4, #28]
 800e714:	60f0      	str	r0, [r6, #12]
 800e716:	68db      	ldr	r3, [r3, #12]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d1e4      	bne.n	800e6e6 <_Balloc+0x2e>
 800e71c:	2000      	movs	r0, #0
 800e71e:	bd70      	pop	{r4, r5, r6, pc}
 800e720:	6802      	ldr	r2, [r0, #0]
 800e722:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e726:	2300      	movs	r3, #0
 800e728:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e72c:	e7f7      	b.n	800e71e <_Balloc+0x66>
 800e72e:	bf00      	nop
 800e730:	0801003a 	.word	0x0801003a
 800e734:	080101c5 	.word	0x080101c5

0800e738 <_Bfree>:
 800e738:	b570      	push	{r4, r5, r6, lr}
 800e73a:	69c6      	ldr	r6, [r0, #28]
 800e73c:	4605      	mov	r5, r0
 800e73e:	460c      	mov	r4, r1
 800e740:	b976      	cbnz	r6, 800e760 <_Bfree+0x28>
 800e742:	2010      	movs	r0, #16
 800e744:	f7ff fef0 	bl	800e528 <malloc>
 800e748:	4602      	mov	r2, r0
 800e74a:	61e8      	str	r0, [r5, #28]
 800e74c:	b920      	cbnz	r0, 800e758 <_Bfree+0x20>
 800e74e:	4b09      	ldr	r3, [pc, #36]	@ (800e774 <_Bfree+0x3c>)
 800e750:	4809      	ldr	r0, [pc, #36]	@ (800e778 <_Bfree+0x40>)
 800e752:	218f      	movs	r1, #143	@ 0x8f
 800e754:	f7fe fcfa 	bl	800d14c <__assert_func>
 800e758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e75c:	6006      	str	r6, [r0, #0]
 800e75e:	60c6      	str	r6, [r0, #12]
 800e760:	b13c      	cbz	r4, 800e772 <_Bfree+0x3a>
 800e762:	69eb      	ldr	r3, [r5, #28]
 800e764:	6862      	ldr	r2, [r4, #4]
 800e766:	68db      	ldr	r3, [r3, #12]
 800e768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e76c:	6021      	str	r1, [r4, #0]
 800e76e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e772:	bd70      	pop	{r4, r5, r6, pc}
 800e774:	0801003a 	.word	0x0801003a
 800e778:	080101c5 	.word	0x080101c5

0800e77c <__multadd>:
 800e77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e780:	690d      	ldr	r5, [r1, #16]
 800e782:	4607      	mov	r7, r0
 800e784:	460c      	mov	r4, r1
 800e786:	461e      	mov	r6, r3
 800e788:	f101 0c14 	add.w	ip, r1, #20
 800e78c:	2000      	movs	r0, #0
 800e78e:	f8dc 3000 	ldr.w	r3, [ip]
 800e792:	b299      	uxth	r1, r3
 800e794:	fb02 6101 	mla	r1, r2, r1, r6
 800e798:	0c1e      	lsrs	r6, r3, #16
 800e79a:	0c0b      	lsrs	r3, r1, #16
 800e79c:	fb02 3306 	mla	r3, r2, r6, r3
 800e7a0:	b289      	uxth	r1, r1
 800e7a2:	3001      	adds	r0, #1
 800e7a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e7a8:	4285      	cmp	r5, r0
 800e7aa:	f84c 1b04 	str.w	r1, [ip], #4
 800e7ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e7b2:	dcec      	bgt.n	800e78e <__multadd+0x12>
 800e7b4:	b30e      	cbz	r6, 800e7fa <__multadd+0x7e>
 800e7b6:	68a3      	ldr	r3, [r4, #8]
 800e7b8:	42ab      	cmp	r3, r5
 800e7ba:	dc19      	bgt.n	800e7f0 <__multadd+0x74>
 800e7bc:	6861      	ldr	r1, [r4, #4]
 800e7be:	4638      	mov	r0, r7
 800e7c0:	3101      	adds	r1, #1
 800e7c2:	f7ff ff79 	bl	800e6b8 <_Balloc>
 800e7c6:	4680      	mov	r8, r0
 800e7c8:	b928      	cbnz	r0, 800e7d6 <__multadd+0x5a>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	4b0c      	ldr	r3, [pc, #48]	@ (800e800 <__multadd+0x84>)
 800e7ce:	480d      	ldr	r0, [pc, #52]	@ (800e804 <__multadd+0x88>)
 800e7d0:	21ba      	movs	r1, #186	@ 0xba
 800e7d2:	f7fe fcbb 	bl	800d14c <__assert_func>
 800e7d6:	6922      	ldr	r2, [r4, #16]
 800e7d8:	3202      	adds	r2, #2
 800e7da:	f104 010c 	add.w	r1, r4, #12
 800e7de:	0092      	lsls	r2, r2, #2
 800e7e0:	300c      	adds	r0, #12
 800e7e2:	f7fe fc94 	bl	800d10e <memcpy>
 800e7e6:	4621      	mov	r1, r4
 800e7e8:	4638      	mov	r0, r7
 800e7ea:	f7ff ffa5 	bl	800e738 <_Bfree>
 800e7ee:	4644      	mov	r4, r8
 800e7f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e7f4:	3501      	adds	r5, #1
 800e7f6:	615e      	str	r6, [r3, #20]
 800e7f8:	6125      	str	r5, [r4, #16]
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e800:	08010154 	.word	0x08010154
 800e804:	080101c5 	.word	0x080101c5

0800e808 <__s2b>:
 800e808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e80c:	460c      	mov	r4, r1
 800e80e:	4615      	mov	r5, r2
 800e810:	461f      	mov	r7, r3
 800e812:	2209      	movs	r2, #9
 800e814:	3308      	adds	r3, #8
 800e816:	4606      	mov	r6, r0
 800e818:	fb93 f3f2 	sdiv	r3, r3, r2
 800e81c:	2100      	movs	r1, #0
 800e81e:	2201      	movs	r2, #1
 800e820:	429a      	cmp	r2, r3
 800e822:	db09      	blt.n	800e838 <__s2b+0x30>
 800e824:	4630      	mov	r0, r6
 800e826:	f7ff ff47 	bl	800e6b8 <_Balloc>
 800e82a:	b940      	cbnz	r0, 800e83e <__s2b+0x36>
 800e82c:	4602      	mov	r2, r0
 800e82e:	4b19      	ldr	r3, [pc, #100]	@ (800e894 <__s2b+0x8c>)
 800e830:	4819      	ldr	r0, [pc, #100]	@ (800e898 <__s2b+0x90>)
 800e832:	21d3      	movs	r1, #211	@ 0xd3
 800e834:	f7fe fc8a 	bl	800d14c <__assert_func>
 800e838:	0052      	lsls	r2, r2, #1
 800e83a:	3101      	adds	r1, #1
 800e83c:	e7f0      	b.n	800e820 <__s2b+0x18>
 800e83e:	9b08      	ldr	r3, [sp, #32]
 800e840:	6143      	str	r3, [r0, #20]
 800e842:	2d09      	cmp	r5, #9
 800e844:	f04f 0301 	mov.w	r3, #1
 800e848:	6103      	str	r3, [r0, #16]
 800e84a:	dd16      	ble.n	800e87a <__s2b+0x72>
 800e84c:	f104 0909 	add.w	r9, r4, #9
 800e850:	46c8      	mov	r8, r9
 800e852:	442c      	add	r4, r5
 800e854:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e858:	4601      	mov	r1, r0
 800e85a:	3b30      	subs	r3, #48	@ 0x30
 800e85c:	220a      	movs	r2, #10
 800e85e:	4630      	mov	r0, r6
 800e860:	f7ff ff8c 	bl	800e77c <__multadd>
 800e864:	45a0      	cmp	r8, r4
 800e866:	d1f5      	bne.n	800e854 <__s2b+0x4c>
 800e868:	f1a5 0408 	sub.w	r4, r5, #8
 800e86c:	444c      	add	r4, r9
 800e86e:	1b2d      	subs	r5, r5, r4
 800e870:	1963      	adds	r3, r4, r5
 800e872:	42bb      	cmp	r3, r7
 800e874:	db04      	blt.n	800e880 <__s2b+0x78>
 800e876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e87a:	340a      	adds	r4, #10
 800e87c:	2509      	movs	r5, #9
 800e87e:	e7f6      	b.n	800e86e <__s2b+0x66>
 800e880:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e884:	4601      	mov	r1, r0
 800e886:	3b30      	subs	r3, #48	@ 0x30
 800e888:	220a      	movs	r2, #10
 800e88a:	4630      	mov	r0, r6
 800e88c:	f7ff ff76 	bl	800e77c <__multadd>
 800e890:	e7ee      	b.n	800e870 <__s2b+0x68>
 800e892:	bf00      	nop
 800e894:	08010154 	.word	0x08010154
 800e898:	080101c5 	.word	0x080101c5

0800e89c <__hi0bits>:
 800e89c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	bf36      	itet	cc
 800e8a4:	0403      	lslcc	r3, r0, #16
 800e8a6:	2000      	movcs	r0, #0
 800e8a8:	2010      	movcc	r0, #16
 800e8aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e8ae:	bf3c      	itt	cc
 800e8b0:	021b      	lslcc	r3, r3, #8
 800e8b2:	3008      	addcc	r0, #8
 800e8b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e8b8:	bf3c      	itt	cc
 800e8ba:	011b      	lslcc	r3, r3, #4
 800e8bc:	3004      	addcc	r0, #4
 800e8be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e8c2:	bf3c      	itt	cc
 800e8c4:	009b      	lslcc	r3, r3, #2
 800e8c6:	3002      	addcc	r0, #2
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	db05      	blt.n	800e8d8 <__hi0bits+0x3c>
 800e8cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e8d0:	f100 0001 	add.w	r0, r0, #1
 800e8d4:	bf08      	it	eq
 800e8d6:	2020      	moveq	r0, #32
 800e8d8:	4770      	bx	lr

0800e8da <__lo0bits>:
 800e8da:	6803      	ldr	r3, [r0, #0]
 800e8dc:	4602      	mov	r2, r0
 800e8de:	f013 0007 	ands.w	r0, r3, #7
 800e8e2:	d00b      	beq.n	800e8fc <__lo0bits+0x22>
 800e8e4:	07d9      	lsls	r1, r3, #31
 800e8e6:	d421      	bmi.n	800e92c <__lo0bits+0x52>
 800e8e8:	0798      	lsls	r0, r3, #30
 800e8ea:	bf49      	itett	mi
 800e8ec:	085b      	lsrmi	r3, r3, #1
 800e8ee:	089b      	lsrpl	r3, r3, #2
 800e8f0:	2001      	movmi	r0, #1
 800e8f2:	6013      	strmi	r3, [r2, #0]
 800e8f4:	bf5c      	itt	pl
 800e8f6:	6013      	strpl	r3, [r2, #0]
 800e8f8:	2002      	movpl	r0, #2
 800e8fa:	4770      	bx	lr
 800e8fc:	b299      	uxth	r1, r3
 800e8fe:	b909      	cbnz	r1, 800e904 <__lo0bits+0x2a>
 800e900:	0c1b      	lsrs	r3, r3, #16
 800e902:	2010      	movs	r0, #16
 800e904:	b2d9      	uxtb	r1, r3
 800e906:	b909      	cbnz	r1, 800e90c <__lo0bits+0x32>
 800e908:	3008      	adds	r0, #8
 800e90a:	0a1b      	lsrs	r3, r3, #8
 800e90c:	0719      	lsls	r1, r3, #28
 800e90e:	bf04      	itt	eq
 800e910:	091b      	lsreq	r3, r3, #4
 800e912:	3004      	addeq	r0, #4
 800e914:	0799      	lsls	r1, r3, #30
 800e916:	bf04      	itt	eq
 800e918:	089b      	lsreq	r3, r3, #2
 800e91a:	3002      	addeq	r0, #2
 800e91c:	07d9      	lsls	r1, r3, #31
 800e91e:	d403      	bmi.n	800e928 <__lo0bits+0x4e>
 800e920:	085b      	lsrs	r3, r3, #1
 800e922:	f100 0001 	add.w	r0, r0, #1
 800e926:	d003      	beq.n	800e930 <__lo0bits+0x56>
 800e928:	6013      	str	r3, [r2, #0]
 800e92a:	4770      	bx	lr
 800e92c:	2000      	movs	r0, #0
 800e92e:	4770      	bx	lr
 800e930:	2020      	movs	r0, #32
 800e932:	4770      	bx	lr

0800e934 <__i2b>:
 800e934:	b510      	push	{r4, lr}
 800e936:	460c      	mov	r4, r1
 800e938:	2101      	movs	r1, #1
 800e93a:	f7ff febd 	bl	800e6b8 <_Balloc>
 800e93e:	4602      	mov	r2, r0
 800e940:	b928      	cbnz	r0, 800e94e <__i2b+0x1a>
 800e942:	4b05      	ldr	r3, [pc, #20]	@ (800e958 <__i2b+0x24>)
 800e944:	4805      	ldr	r0, [pc, #20]	@ (800e95c <__i2b+0x28>)
 800e946:	f240 1145 	movw	r1, #325	@ 0x145
 800e94a:	f7fe fbff 	bl	800d14c <__assert_func>
 800e94e:	2301      	movs	r3, #1
 800e950:	6144      	str	r4, [r0, #20]
 800e952:	6103      	str	r3, [r0, #16]
 800e954:	bd10      	pop	{r4, pc}
 800e956:	bf00      	nop
 800e958:	08010154 	.word	0x08010154
 800e95c:	080101c5 	.word	0x080101c5

0800e960 <__multiply>:
 800e960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e964:	4614      	mov	r4, r2
 800e966:	690a      	ldr	r2, [r1, #16]
 800e968:	6923      	ldr	r3, [r4, #16]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	bfa8      	it	ge
 800e96e:	4623      	movge	r3, r4
 800e970:	460f      	mov	r7, r1
 800e972:	bfa4      	itt	ge
 800e974:	460c      	movge	r4, r1
 800e976:	461f      	movge	r7, r3
 800e978:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e97c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e980:	68a3      	ldr	r3, [r4, #8]
 800e982:	6861      	ldr	r1, [r4, #4]
 800e984:	eb0a 0609 	add.w	r6, sl, r9
 800e988:	42b3      	cmp	r3, r6
 800e98a:	b085      	sub	sp, #20
 800e98c:	bfb8      	it	lt
 800e98e:	3101      	addlt	r1, #1
 800e990:	f7ff fe92 	bl	800e6b8 <_Balloc>
 800e994:	b930      	cbnz	r0, 800e9a4 <__multiply+0x44>
 800e996:	4602      	mov	r2, r0
 800e998:	4b44      	ldr	r3, [pc, #272]	@ (800eaac <__multiply+0x14c>)
 800e99a:	4845      	ldr	r0, [pc, #276]	@ (800eab0 <__multiply+0x150>)
 800e99c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e9a0:	f7fe fbd4 	bl	800d14c <__assert_func>
 800e9a4:	f100 0514 	add.w	r5, r0, #20
 800e9a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e9ac:	462b      	mov	r3, r5
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	4543      	cmp	r3, r8
 800e9b2:	d321      	bcc.n	800e9f8 <__multiply+0x98>
 800e9b4:	f107 0114 	add.w	r1, r7, #20
 800e9b8:	f104 0214 	add.w	r2, r4, #20
 800e9bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e9c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e9c4:	9302      	str	r3, [sp, #8]
 800e9c6:	1b13      	subs	r3, r2, r4
 800e9c8:	3b15      	subs	r3, #21
 800e9ca:	f023 0303 	bic.w	r3, r3, #3
 800e9ce:	3304      	adds	r3, #4
 800e9d0:	f104 0715 	add.w	r7, r4, #21
 800e9d4:	42ba      	cmp	r2, r7
 800e9d6:	bf38      	it	cc
 800e9d8:	2304      	movcc	r3, #4
 800e9da:	9301      	str	r3, [sp, #4]
 800e9dc:	9b02      	ldr	r3, [sp, #8]
 800e9de:	9103      	str	r1, [sp, #12]
 800e9e0:	428b      	cmp	r3, r1
 800e9e2:	d80c      	bhi.n	800e9fe <__multiply+0x9e>
 800e9e4:	2e00      	cmp	r6, #0
 800e9e6:	dd03      	ble.n	800e9f0 <__multiply+0x90>
 800e9e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d05b      	beq.n	800eaa8 <__multiply+0x148>
 800e9f0:	6106      	str	r6, [r0, #16]
 800e9f2:	b005      	add	sp, #20
 800e9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f8:	f843 2b04 	str.w	r2, [r3], #4
 800e9fc:	e7d8      	b.n	800e9b0 <__multiply+0x50>
 800e9fe:	f8b1 a000 	ldrh.w	sl, [r1]
 800ea02:	f1ba 0f00 	cmp.w	sl, #0
 800ea06:	d024      	beq.n	800ea52 <__multiply+0xf2>
 800ea08:	f104 0e14 	add.w	lr, r4, #20
 800ea0c:	46a9      	mov	r9, r5
 800ea0e:	f04f 0c00 	mov.w	ip, #0
 800ea12:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ea16:	f8d9 3000 	ldr.w	r3, [r9]
 800ea1a:	fa1f fb87 	uxth.w	fp, r7
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	fb0a 330b 	mla	r3, sl, fp, r3
 800ea24:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ea28:	f8d9 7000 	ldr.w	r7, [r9]
 800ea2c:	4463      	add	r3, ip
 800ea2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ea32:	fb0a c70b 	mla	r7, sl, fp, ip
 800ea36:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ea40:	4572      	cmp	r2, lr
 800ea42:	f849 3b04 	str.w	r3, [r9], #4
 800ea46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ea4a:	d8e2      	bhi.n	800ea12 <__multiply+0xb2>
 800ea4c:	9b01      	ldr	r3, [sp, #4]
 800ea4e:	f845 c003 	str.w	ip, [r5, r3]
 800ea52:	9b03      	ldr	r3, [sp, #12]
 800ea54:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ea58:	3104      	adds	r1, #4
 800ea5a:	f1b9 0f00 	cmp.w	r9, #0
 800ea5e:	d021      	beq.n	800eaa4 <__multiply+0x144>
 800ea60:	682b      	ldr	r3, [r5, #0]
 800ea62:	f104 0c14 	add.w	ip, r4, #20
 800ea66:	46ae      	mov	lr, r5
 800ea68:	f04f 0a00 	mov.w	sl, #0
 800ea6c:	f8bc b000 	ldrh.w	fp, [ip]
 800ea70:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ea74:	fb09 770b 	mla	r7, r9, fp, r7
 800ea78:	4457      	add	r7, sl
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ea80:	f84e 3b04 	str.w	r3, [lr], #4
 800ea84:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ea88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea8c:	f8be 3000 	ldrh.w	r3, [lr]
 800ea90:	fb09 330a 	mla	r3, r9, sl, r3
 800ea94:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ea98:	4562      	cmp	r2, ip
 800ea9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea9e:	d8e5      	bhi.n	800ea6c <__multiply+0x10c>
 800eaa0:	9f01      	ldr	r7, [sp, #4]
 800eaa2:	51eb      	str	r3, [r5, r7]
 800eaa4:	3504      	adds	r5, #4
 800eaa6:	e799      	b.n	800e9dc <__multiply+0x7c>
 800eaa8:	3e01      	subs	r6, #1
 800eaaa:	e79b      	b.n	800e9e4 <__multiply+0x84>
 800eaac:	08010154 	.word	0x08010154
 800eab0:	080101c5 	.word	0x080101c5

0800eab4 <__pow5mult>:
 800eab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eab8:	4615      	mov	r5, r2
 800eaba:	f012 0203 	ands.w	r2, r2, #3
 800eabe:	4607      	mov	r7, r0
 800eac0:	460e      	mov	r6, r1
 800eac2:	d007      	beq.n	800ead4 <__pow5mult+0x20>
 800eac4:	4c25      	ldr	r4, [pc, #148]	@ (800eb5c <__pow5mult+0xa8>)
 800eac6:	3a01      	subs	r2, #1
 800eac8:	2300      	movs	r3, #0
 800eaca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eace:	f7ff fe55 	bl	800e77c <__multadd>
 800ead2:	4606      	mov	r6, r0
 800ead4:	10ad      	asrs	r5, r5, #2
 800ead6:	d03d      	beq.n	800eb54 <__pow5mult+0xa0>
 800ead8:	69fc      	ldr	r4, [r7, #28]
 800eada:	b97c      	cbnz	r4, 800eafc <__pow5mult+0x48>
 800eadc:	2010      	movs	r0, #16
 800eade:	f7ff fd23 	bl	800e528 <malloc>
 800eae2:	4602      	mov	r2, r0
 800eae4:	61f8      	str	r0, [r7, #28]
 800eae6:	b928      	cbnz	r0, 800eaf4 <__pow5mult+0x40>
 800eae8:	4b1d      	ldr	r3, [pc, #116]	@ (800eb60 <__pow5mult+0xac>)
 800eaea:	481e      	ldr	r0, [pc, #120]	@ (800eb64 <__pow5mult+0xb0>)
 800eaec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800eaf0:	f7fe fb2c 	bl	800d14c <__assert_func>
 800eaf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eaf8:	6004      	str	r4, [r0, #0]
 800eafa:	60c4      	str	r4, [r0, #12]
 800eafc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800eb00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eb04:	b94c      	cbnz	r4, 800eb1a <__pow5mult+0x66>
 800eb06:	f240 2171 	movw	r1, #625	@ 0x271
 800eb0a:	4638      	mov	r0, r7
 800eb0c:	f7ff ff12 	bl	800e934 <__i2b>
 800eb10:	2300      	movs	r3, #0
 800eb12:	f8c8 0008 	str.w	r0, [r8, #8]
 800eb16:	4604      	mov	r4, r0
 800eb18:	6003      	str	r3, [r0, #0]
 800eb1a:	f04f 0900 	mov.w	r9, #0
 800eb1e:	07eb      	lsls	r3, r5, #31
 800eb20:	d50a      	bpl.n	800eb38 <__pow5mult+0x84>
 800eb22:	4631      	mov	r1, r6
 800eb24:	4622      	mov	r2, r4
 800eb26:	4638      	mov	r0, r7
 800eb28:	f7ff ff1a 	bl	800e960 <__multiply>
 800eb2c:	4631      	mov	r1, r6
 800eb2e:	4680      	mov	r8, r0
 800eb30:	4638      	mov	r0, r7
 800eb32:	f7ff fe01 	bl	800e738 <_Bfree>
 800eb36:	4646      	mov	r6, r8
 800eb38:	106d      	asrs	r5, r5, #1
 800eb3a:	d00b      	beq.n	800eb54 <__pow5mult+0xa0>
 800eb3c:	6820      	ldr	r0, [r4, #0]
 800eb3e:	b938      	cbnz	r0, 800eb50 <__pow5mult+0x9c>
 800eb40:	4622      	mov	r2, r4
 800eb42:	4621      	mov	r1, r4
 800eb44:	4638      	mov	r0, r7
 800eb46:	f7ff ff0b 	bl	800e960 <__multiply>
 800eb4a:	6020      	str	r0, [r4, #0]
 800eb4c:	f8c0 9000 	str.w	r9, [r0]
 800eb50:	4604      	mov	r4, r0
 800eb52:	e7e4      	b.n	800eb1e <__pow5mult+0x6a>
 800eb54:	4630      	mov	r0, r6
 800eb56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb5a:	bf00      	nop
 800eb5c:	08010220 	.word	0x08010220
 800eb60:	0801003a 	.word	0x0801003a
 800eb64:	080101c5 	.word	0x080101c5

0800eb68 <__lshift>:
 800eb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb6c:	460c      	mov	r4, r1
 800eb6e:	6849      	ldr	r1, [r1, #4]
 800eb70:	6923      	ldr	r3, [r4, #16]
 800eb72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eb76:	68a3      	ldr	r3, [r4, #8]
 800eb78:	4607      	mov	r7, r0
 800eb7a:	4691      	mov	r9, r2
 800eb7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eb80:	f108 0601 	add.w	r6, r8, #1
 800eb84:	42b3      	cmp	r3, r6
 800eb86:	db0b      	blt.n	800eba0 <__lshift+0x38>
 800eb88:	4638      	mov	r0, r7
 800eb8a:	f7ff fd95 	bl	800e6b8 <_Balloc>
 800eb8e:	4605      	mov	r5, r0
 800eb90:	b948      	cbnz	r0, 800eba6 <__lshift+0x3e>
 800eb92:	4602      	mov	r2, r0
 800eb94:	4b28      	ldr	r3, [pc, #160]	@ (800ec38 <__lshift+0xd0>)
 800eb96:	4829      	ldr	r0, [pc, #164]	@ (800ec3c <__lshift+0xd4>)
 800eb98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800eb9c:	f7fe fad6 	bl	800d14c <__assert_func>
 800eba0:	3101      	adds	r1, #1
 800eba2:	005b      	lsls	r3, r3, #1
 800eba4:	e7ee      	b.n	800eb84 <__lshift+0x1c>
 800eba6:	2300      	movs	r3, #0
 800eba8:	f100 0114 	add.w	r1, r0, #20
 800ebac:	f100 0210 	add.w	r2, r0, #16
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	4553      	cmp	r3, sl
 800ebb4:	db33      	blt.n	800ec1e <__lshift+0xb6>
 800ebb6:	6920      	ldr	r0, [r4, #16]
 800ebb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ebbc:	f104 0314 	add.w	r3, r4, #20
 800ebc0:	f019 091f 	ands.w	r9, r9, #31
 800ebc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ebc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ebcc:	d02b      	beq.n	800ec26 <__lshift+0xbe>
 800ebce:	f1c9 0e20 	rsb	lr, r9, #32
 800ebd2:	468a      	mov	sl, r1
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	6818      	ldr	r0, [r3, #0]
 800ebd8:	fa00 f009 	lsl.w	r0, r0, r9
 800ebdc:	4310      	orrs	r0, r2
 800ebde:	f84a 0b04 	str.w	r0, [sl], #4
 800ebe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebe6:	459c      	cmp	ip, r3
 800ebe8:	fa22 f20e 	lsr.w	r2, r2, lr
 800ebec:	d8f3      	bhi.n	800ebd6 <__lshift+0x6e>
 800ebee:	ebac 0304 	sub.w	r3, ip, r4
 800ebf2:	3b15      	subs	r3, #21
 800ebf4:	f023 0303 	bic.w	r3, r3, #3
 800ebf8:	3304      	adds	r3, #4
 800ebfa:	f104 0015 	add.w	r0, r4, #21
 800ebfe:	4584      	cmp	ip, r0
 800ec00:	bf38      	it	cc
 800ec02:	2304      	movcc	r3, #4
 800ec04:	50ca      	str	r2, [r1, r3]
 800ec06:	b10a      	cbz	r2, 800ec0c <__lshift+0xa4>
 800ec08:	f108 0602 	add.w	r6, r8, #2
 800ec0c:	3e01      	subs	r6, #1
 800ec0e:	4638      	mov	r0, r7
 800ec10:	612e      	str	r6, [r5, #16]
 800ec12:	4621      	mov	r1, r4
 800ec14:	f7ff fd90 	bl	800e738 <_Bfree>
 800ec18:	4628      	mov	r0, r5
 800ec1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ec22:	3301      	adds	r3, #1
 800ec24:	e7c5      	b.n	800ebb2 <__lshift+0x4a>
 800ec26:	3904      	subs	r1, #4
 800ec28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec2c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ec30:	459c      	cmp	ip, r3
 800ec32:	d8f9      	bhi.n	800ec28 <__lshift+0xc0>
 800ec34:	e7ea      	b.n	800ec0c <__lshift+0xa4>
 800ec36:	bf00      	nop
 800ec38:	08010154 	.word	0x08010154
 800ec3c:	080101c5 	.word	0x080101c5

0800ec40 <__mcmp>:
 800ec40:	690a      	ldr	r2, [r1, #16]
 800ec42:	4603      	mov	r3, r0
 800ec44:	6900      	ldr	r0, [r0, #16]
 800ec46:	1a80      	subs	r0, r0, r2
 800ec48:	b530      	push	{r4, r5, lr}
 800ec4a:	d10e      	bne.n	800ec6a <__mcmp+0x2a>
 800ec4c:	3314      	adds	r3, #20
 800ec4e:	3114      	adds	r1, #20
 800ec50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ec54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ec58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ec5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ec60:	4295      	cmp	r5, r2
 800ec62:	d003      	beq.n	800ec6c <__mcmp+0x2c>
 800ec64:	d205      	bcs.n	800ec72 <__mcmp+0x32>
 800ec66:	f04f 30ff 	mov.w	r0, #4294967295
 800ec6a:	bd30      	pop	{r4, r5, pc}
 800ec6c:	42a3      	cmp	r3, r4
 800ec6e:	d3f3      	bcc.n	800ec58 <__mcmp+0x18>
 800ec70:	e7fb      	b.n	800ec6a <__mcmp+0x2a>
 800ec72:	2001      	movs	r0, #1
 800ec74:	e7f9      	b.n	800ec6a <__mcmp+0x2a>
	...

0800ec78 <__mdiff>:
 800ec78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec7c:	4689      	mov	r9, r1
 800ec7e:	4606      	mov	r6, r0
 800ec80:	4611      	mov	r1, r2
 800ec82:	4648      	mov	r0, r9
 800ec84:	4614      	mov	r4, r2
 800ec86:	f7ff ffdb 	bl	800ec40 <__mcmp>
 800ec8a:	1e05      	subs	r5, r0, #0
 800ec8c:	d112      	bne.n	800ecb4 <__mdiff+0x3c>
 800ec8e:	4629      	mov	r1, r5
 800ec90:	4630      	mov	r0, r6
 800ec92:	f7ff fd11 	bl	800e6b8 <_Balloc>
 800ec96:	4602      	mov	r2, r0
 800ec98:	b928      	cbnz	r0, 800eca6 <__mdiff+0x2e>
 800ec9a:	4b3f      	ldr	r3, [pc, #252]	@ (800ed98 <__mdiff+0x120>)
 800ec9c:	f240 2137 	movw	r1, #567	@ 0x237
 800eca0:	483e      	ldr	r0, [pc, #248]	@ (800ed9c <__mdiff+0x124>)
 800eca2:	f7fe fa53 	bl	800d14c <__assert_func>
 800eca6:	2301      	movs	r3, #1
 800eca8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ecac:	4610      	mov	r0, r2
 800ecae:	b003      	add	sp, #12
 800ecb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb4:	bfbc      	itt	lt
 800ecb6:	464b      	movlt	r3, r9
 800ecb8:	46a1      	movlt	r9, r4
 800ecba:	4630      	mov	r0, r6
 800ecbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ecc0:	bfba      	itte	lt
 800ecc2:	461c      	movlt	r4, r3
 800ecc4:	2501      	movlt	r5, #1
 800ecc6:	2500      	movge	r5, #0
 800ecc8:	f7ff fcf6 	bl	800e6b8 <_Balloc>
 800eccc:	4602      	mov	r2, r0
 800ecce:	b918      	cbnz	r0, 800ecd8 <__mdiff+0x60>
 800ecd0:	4b31      	ldr	r3, [pc, #196]	@ (800ed98 <__mdiff+0x120>)
 800ecd2:	f240 2145 	movw	r1, #581	@ 0x245
 800ecd6:	e7e3      	b.n	800eca0 <__mdiff+0x28>
 800ecd8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ecdc:	6926      	ldr	r6, [r4, #16]
 800ecde:	60c5      	str	r5, [r0, #12]
 800ece0:	f109 0310 	add.w	r3, r9, #16
 800ece4:	f109 0514 	add.w	r5, r9, #20
 800ece8:	f104 0e14 	add.w	lr, r4, #20
 800ecec:	f100 0b14 	add.w	fp, r0, #20
 800ecf0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ecf4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ecf8:	9301      	str	r3, [sp, #4]
 800ecfa:	46d9      	mov	r9, fp
 800ecfc:	f04f 0c00 	mov.w	ip, #0
 800ed00:	9b01      	ldr	r3, [sp, #4]
 800ed02:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ed06:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ed0a:	9301      	str	r3, [sp, #4]
 800ed0c:	fa1f f38a 	uxth.w	r3, sl
 800ed10:	4619      	mov	r1, r3
 800ed12:	b283      	uxth	r3, r0
 800ed14:	1acb      	subs	r3, r1, r3
 800ed16:	0c00      	lsrs	r0, r0, #16
 800ed18:	4463      	add	r3, ip
 800ed1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ed1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ed28:	4576      	cmp	r6, lr
 800ed2a:	f849 3b04 	str.w	r3, [r9], #4
 800ed2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ed32:	d8e5      	bhi.n	800ed00 <__mdiff+0x88>
 800ed34:	1b33      	subs	r3, r6, r4
 800ed36:	3b15      	subs	r3, #21
 800ed38:	f023 0303 	bic.w	r3, r3, #3
 800ed3c:	3415      	adds	r4, #21
 800ed3e:	3304      	adds	r3, #4
 800ed40:	42a6      	cmp	r6, r4
 800ed42:	bf38      	it	cc
 800ed44:	2304      	movcc	r3, #4
 800ed46:	441d      	add	r5, r3
 800ed48:	445b      	add	r3, fp
 800ed4a:	461e      	mov	r6, r3
 800ed4c:	462c      	mov	r4, r5
 800ed4e:	4544      	cmp	r4, r8
 800ed50:	d30e      	bcc.n	800ed70 <__mdiff+0xf8>
 800ed52:	f108 0103 	add.w	r1, r8, #3
 800ed56:	1b49      	subs	r1, r1, r5
 800ed58:	f021 0103 	bic.w	r1, r1, #3
 800ed5c:	3d03      	subs	r5, #3
 800ed5e:	45a8      	cmp	r8, r5
 800ed60:	bf38      	it	cc
 800ed62:	2100      	movcc	r1, #0
 800ed64:	440b      	add	r3, r1
 800ed66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ed6a:	b191      	cbz	r1, 800ed92 <__mdiff+0x11a>
 800ed6c:	6117      	str	r7, [r2, #16]
 800ed6e:	e79d      	b.n	800ecac <__mdiff+0x34>
 800ed70:	f854 1b04 	ldr.w	r1, [r4], #4
 800ed74:	46e6      	mov	lr, ip
 800ed76:	0c08      	lsrs	r0, r1, #16
 800ed78:	fa1c fc81 	uxtah	ip, ip, r1
 800ed7c:	4471      	add	r1, lr
 800ed7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ed82:	b289      	uxth	r1, r1
 800ed84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ed88:	f846 1b04 	str.w	r1, [r6], #4
 800ed8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ed90:	e7dd      	b.n	800ed4e <__mdiff+0xd6>
 800ed92:	3f01      	subs	r7, #1
 800ed94:	e7e7      	b.n	800ed66 <__mdiff+0xee>
 800ed96:	bf00      	nop
 800ed98:	08010154 	.word	0x08010154
 800ed9c:	080101c5 	.word	0x080101c5

0800eda0 <__ulp>:
 800eda0:	b082      	sub	sp, #8
 800eda2:	ed8d 0b00 	vstr	d0, [sp]
 800eda6:	9a01      	ldr	r2, [sp, #4]
 800eda8:	4b0f      	ldr	r3, [pc, #60]	@ (800ede8 <__ulp+0x48>)
 800edaa:	4013      	ands	r3, r2
 800edac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	dc08      	bgt.n	800edc6 <__ulp+0x26>
 800edb4:	425b      	negs	r3, r3
 800edb6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800edba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800edbe:	da04      	bge.n	800edca <__ulp+0x2a>
 800edc0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800edc4:	4113      	asrs	r3, r2
 800edc6:	2200      	movs	r2, #0
 800edc8:	e008      	b.n	800eddc <__ulp+0x3c>
 800edca:	f1a2 0314 	sub.w	r3, r2, #20
 800edce:	2b1e      	cmp	r3, #30
 800edd0:	bfda      	itte	le
 800edd2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800edd6:	40da      	lsrle	r2, r3
 800edd8:	2201      	movgt	r2, #1
 800edda:	2300      	movs	r3, #0
 800eddc:	4619      	mov	r1, r3
 800edde:	4610      	mov	r0, r2
 800ede0:	ec41 0b10 	vmov	d0, r0, r1
 800ede4:	b002      	add	sp, #8
 800ede6:	4770      	bx	lr
 800ede8:	7ff00000 	.word	0x7ff00000

0800edec <__b2d>:
 800edec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf0:	6906      	ldr	r6, [r0, #16]
 800edf2:	f100 0814 	add.w	r8, r0, #20
 800edf6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800edfa:	1f37      	subs	r7, r6, #4
 800edfc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ee00:	4610      	mov	r0, r2
 800ee02:	f7ff fd4b 	bl	800e89c <__hi0bits>
 800ee06:	f1c0 0320 	rsb	r3, r0, #32
 800ee0a:	280a      	cmp	r0, #10
 800ee0c:	600b      	str	r3, [r1, #0]
 800ee0e:	491b      	ldr	r1, [pc, #108]	@ (800ee7c <__b2d+0x90>)
 800ee10:	dc15      	bgt.n	800ee3e <__b2d+0x52>
 800ee12:	f1c0 0c0b 	rsb	ip, r0, #11
 800ee16:	fa22 f30c 	lsr.w	r3, r2, ip
 800ee1a:	45b8      	cmp	r8, r7
 800ee1c:	ea43 0501 	orr.w	r5, r3, r1
 800ee20:	bf34      	ite	cc
 800ee22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ee26:	2300      	movcs	r3, #0
 800ee28:	3015      	adds	r0, #21
 800ee2a:	fa02 f000 	lsl.w	r0, r2, r0
 800ee2e:	fa23 f30c 	lsr.w	r3, r3, ip
 800ee32:	4303      	orrs	r3, r0
 800ee34:	461c      	mov	r4, r3
 800ee36:	ec45 4b10 	vmov	d0, r4, r5
 800ee3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee3e:	45b8      	cmp	r8, r7
 800ee40:	bf3a      	itte	cc
 800ee42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ee46:	f1a6 0708 	subcc.w	r7, r6, #8
 800ee4a:	2300      	movcs	r3, #0
 800ee4c:	380b      	subs	r0, #11
 800ee4e:	d012      	beq.n	800ee76 <__b2d+0x8a>
 800ee50:	f1c0 0120 	rsb	r1, r0, #32
 800ee54:	fa23 f401 	lsr.w	r4, r3, r1
 800ee58:	4082      	lsls	r2, r0
 800ee5a:	4322      	orrs	r2, r4
 800ee5c:	4547      	cmp	r7, r8
 800ee5e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ee62:	bf8c      	ite	hi
 800ee64:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ee68:	2200      	movls	r2, #0
 800ee6a:	4083      	lsls	r3, r0
 800ee6c:	40ca      	lsrs	r2, r1
 800ee6e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ee72:	4313      	orrs	r3, r2
 800ee74:	e7de      	b.n	800ee34 <__b2d+0x48>
 800ee76:	ea42 0501 	orr.w	r5, r2, r1
 800ee7a:	e7db      	b.n	800ee34 <__b2d+0x48>
 800ee7c:	3ff00000 	.word	0x3ff00000

0800ee80 <__d2b>:
 800ee80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee84:	460f      	mov	r7, r1
 800ee86:	2101      	movs	r1, #1
 800ee88:	ec59 8b10 	vmov	r8, r9, d0
 800ee8c:	4616      	mov	r6, r2
 800ee8e:	f7ff fc13 	bl	800e6b8 <_Balloc>
 800ee92:	4604      	mov	r4, r0
 800ee94:	b930      	cbnz	r0, 800eea4 <__d2b+0x24>
 800ee96:	4602      	mov	r2, r0
 800ee98:	4b23      	ldr	r3, [pc, #140]	@ (800ef28 <__d2b+0xa8>)
 800ee9a:	4824      	ldr	r0, [pc, #144]	@ (800ef2c <__d2b+0xac>)
 800ee9c:	f240 310f 	movw	r1, #783	@ 0x30f
 800eea0:	f7fe f954 	bl	800d14c <__assert_func>
 800eea4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eea8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eeac:	b10d      	cbz	r5, 800eeb2 <__d2b+0x32>
 800eeae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eeb2:	9301      	str	r3, [sp, #4]
 800eeb4:	f1b8 0300 	subs.w	r3, r8, #0
 800eeb8:	d023      	beq.n	800ef02 <__d2b+0x82>
 800eeba:	4668      	mov	r0, sp
 800eebc:	9300      	str	r3, [sp, #0]
 800eebe:	f7ff fd0c 	bl	800e8da <__lo0bits>
 800eec2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eec6:	b1d0      	cbz	r0, 800eefe <__d2b+0x7e>
 800eec8:	f1c0 0320 	rsb	r3, r0, #32
 800eecc:	fa02 f303 	lsl.w	r3, r2, r3
 800eed0:	430b      	orrs	r3, r1
 800eed2:	40c2      	lsrs	r2, r0
 800eed4:	6163      	str	r3, [r4, #20]
 800eed6:	9201      	str	r2, [sp, #4]
 800eed8:	9b01      	ldr	r3, [sp, #4]
 800eeda:	61a3      	str	r3, [r4, #24]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	bf0c      	ite	eq
 800eee0:	2201      	moveq	r2, #1
 800eee2:	2202      	movne	r2, #2
 800eee4:	6122      	str	r2, [r4, #16]
 800eee6:	b1a5      	cbz	r5, 800ef12 <__d2b+0x92>
 800eee8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800eeec:	4405      	add	r5, r0
 800eeee:	603d      	str	r5, [r7, #0]
 800eef0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800eef4:	6030      	str	r0, [r6, #0]
 800eef6:	4620      	mov	r0, r4
 800eef8:	b003      	add	sp, #12
 800eefa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eefe:	6161      	str	r1, [r4, #20]
 800ef00:	e7ea      	b.n	800eed8 <__d2b+0x58>
 800ef02:	a801      	add	r0, sp, #4
 800ef04:	f7ff fce9 	bl	800e8da <__lo0bits>
 800ef08:	9b01      	ldr	r3, [sp, #4]
 800ef0a:	6163      	str	r3, [r4, #20]
 800ef0c:	3020      	adds	r0, #32
 800ef0e:	2201      	movs	r2, #1
 800ef10:	e7e8      	b.n	800eee4 <__d2b+0x64>
 800ef12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ef16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ef1a:	6038      	str	r0, [r7, #0]
 800ef1c:	6918      	ldr	r0, [r3, #16]
 800ef1e:	f7ff fcbd 	bl	800e89c <__hi0bits>
 800ef22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ef26:	e7e5      	b.n	800eef4 <__d2b+0x74>
 800ef28:	08010154 	.word	0x08010154
 800ef2c:	080101c5 	.word	0x080101c5

0800ef30 <__ratio>:
 800ef30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef34:	b085      	sub	sp, #20
 800ef36:	e9cd 1000 	strd	r1, r0, [sp]
 800ef3a:	a902      	add	r1, sp, #8
 800ef3c:	f7ff ff56 	bl	800edec <__b2d>
 800ef40:	9800      	ldr	r0, [sp, #0]
 800ef42:	a903      	add	r1, sp, #12
 800ef44:	ec55 4b10 	vmov	r4, r5, d0
 800ef48:	f7ff ff50 	bl	800edec <__b2d>
 800ef4c:	9b01      	ldr	r3, [sp, #4]
 800ef4e:	6919      	ldr	r1, [r3, #16]
 800ef50:	9b00      	ldr	r3, [sp, #0]
 800ef52:	691b      	ldr	r3, [r3, #16]
 800ef54:	1ac9      	subs	r1, r1, r3
 800ef56:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ef5a:	1a9b      	subs	r3, r3, r2
 800ef5c:	ec5b ab10 	vmov	sl, fp, d0
 800ef60:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	bfce      	itee	gt
 800ef68:	462a      	movgt	r2, r5
 800ef6a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ef6e:	465a      	movle	r2, fp
 800ef70:	462f      	mov	r7, r5
 800ef72:	46d9      	mov	r9, fp
 800ef74:	bfcc      	ite	gt
 800ef76:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ef7a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ef7e:	464b      	mov	r3, r9
 800ef80:	4652      	mov	r2, sl
 800ef82:	4620      	mov	r0, r4
 800ef84:	4639      	mov	r1, r7
 800ef86:	f7f1 fc91 	bl	80008ac <__aeabi_ddiv>
 800ef8a:	ec41 0b10 	vmov	d0, r0, r1
 800ef8e:	b005      	add	sp, #20
 800ef90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef94 <__copybits>:
 800ef94:	3901      	subs	r1, #1
 800ef96:	b570      	push	{r4, r5, r6, lr}
 800ef98:	1149      	asrs	r1, r1, #5
 800ef9a:	6914      	ldr	r4, [r2, #16]
 800ef9c:	3101      	adds	r1, #1
 800ef9e:	f102 0314 	add.w	r3, r2, #20
 800efa2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800efa6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800efaa:	1f05      	subs	r5, r0, #4
 800efac:	42a3      	cmp	r3, r4
 800efae:	d30c      	bcc.n	800efca <__copybits+0x36>
 800efb0:	1aa3      	subs	r3, r4, r2
 800efb2:	3b11      	subs	r3, #17
 800efb4:	f023 0303 	bic.w	r3, r3, #3
 800efb8:	3211      	adds	r2, #17
 800efba:	42a2      	cmp	r2, r4
 800efbc:	bf88      	it	hi
 800efbe:	2300      	movhi	r3, #0
 800efc0:	4418      	add	r0, r3
 800efc2:	2300      	movs	r3, #0
 800efc4:	4288      	cmp	r0, r1
 800efc6:	d305      	bcc.n	800efd4 <__copybits+0x40>
 800efc8:	bd70      	pop	{r4, r5, r6, pc}
 800efca:	f853 6b04 	ldr.w	r6, [r3], #4
 800efce:	f845 6f04 	str.w	r6, [r5, #4]!
 800efd2:	e7eb      	b.n	800efac <__copybits+0x18>
 800efd4:	f840 3b04 	str.w	r3, [r0], #4
 800efd8:	e7f4      	b.n	800efc4 <__copybits+0x30>

0800efda <__any_on>:
 800efda:	f100 0214 	add.w	r2, r0, #20
 800efde:	6900      	ldr	r0, [r0, #16]
 800efe0:	114b      	asrs	r3, r1, #5
 800efe2:	4298      	cmp	r0, r3
 800efe4:	b510      	push	{r4, lr}
 800efe6:	db11      	blt.n	800f00c <__any_on+0x32>
 800efe8:	dd0a      	ble.n	800f000 <__any_on+0x26>
 800efea:	f011 011f 	ands.w	r1, r1, #31
 800efee:	d007      	beq.n	800f000 <__any_on+0x26>
 800eff0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eff4:	fa24 f001 	lsr.w	r0, r4, r1
 800eff8:	fa00 f101 	lsl.w	r1, r0, r1
 800effc:	428c      	cmp	r4, r1
 800effe:	d10b      	bne.n	800f018 <__any_on+0x3e>
 800f000:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f004:	4293      	cmp	r3, r2
 800f006:	d803      	bhi.n	800f010 <__any_on+0x36>
 800f008:	2000      	movs	r0, #0
 800f00a:	bd10      	pop	{r4, pc}
 800f00c:	4603      	mov	r3, r0
 800f00e:	e7f7      	b.n	800f000 <__any_on+0x26>
 800f010:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f014:	2900      	cmp	r1, #0
 800f016:	d0f5      	beq.n	800f004 <__any_on+0x2a>
 800f018:	2001      	movs	r0, #1
 800f01a:	e7f6      	b.n	800f00a <__any_on+0x30>

0800f01c <__ascii_wctomb>:
 800f01c:	4603      	mov	r3, r0
 800f01e:	4608      	mov	r0, r1
 800f020:	b141      	cbz	r1, 800f034 <__ascii_wctomb+0x18>
 800f022:	2aff      	cmp	r2, #255	@ 0xff
 800f024:	d904      	bls.n	800f030 <__ascii_wctomb+0x14>
 800f026:	228a      	movs	r2, #138	@ 0x8a
 800f028:	601a      	str	r2, [r3, #0]
 800f02a:	f04f 30ff 	mov.w	r0, #4294967295
 800f02e:	4770      	bx	lr
 800f030:	700a      	strb	r2, [r1, #0]
 800f032:	2001      	movs	r0, #1
 800f034:	4770      	bx	lr

0800f036 <__ssputs_r>:
 800f036:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f03a:	688e      	ldr	r6, [r1, #8]
 800f03c:	461f      	mov	r7, r3
 800f03e:	42be      	cmp	r6, r7
 800f040:	680b      	ldr	r3, [r1, #0]
 800f042:	4682      	mov	sl, r0
 800f044:	460c      	mov	r4, r1
 800f046:	4690      	mov	r8, r2
 800f048:	d82d      	bhi.n	800f0a6 <__ssputs_r+0x70>
 800f04a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f04e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f052:	d026      	beq.n	800f0a2 <__ssputs_r+0x6c>
 800f054:	6965      	ldr	r5, [r4, #20]
 800f056:	6909      	ldr	r1, [r1, #16]
 800f058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f05c:	eba3 0901 	sub.w	r9, r3, r1
 800f060:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f064:	1c7b      	adds	r3, r7, #1
 800f066:	444b      	add	r3, r9
 800f068:	106d      	asrs	r5, r5, #1
 800f06a:	429d      	cmp	r5, r3
 800f06c:	bf38      	it	cc
 800f06e:	461d      	movcc	r5, r3
 800f070:	0553      	lsls	r3, r2, #21
 800f072:	d527      	bpl.n	800f0c4 <__ssputs_r+0x8e>
 800f074:	4629      	mov	r1, r5
 800f076:	f7ff fa81 	bl	800e57c <_malloc_r>
 800f07a:	4606      	mov	r6, r0
 800f07c:	b360      	cbz	r0, 800f0d8 <__ssputs_r+0xa2>
 800f07e:	6921      	ldr	r1, [r4, #16]
 800f080:	464a      	mov	r2, r9
 800f082:	f7fe f844 	bl	800d10e <memcpy>
 800f086:	89a3      	ldrh	r3, [r4, #12]
 800f088:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f08c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f090:	81a3      	strh	r3, [r4, #12]
 800f092:	6126      	str	r6, [r4, #16]
 800f094:	6165      	str	r5, [r4, #20]
 800f096:	444e      	add	r6, r9
 800f098:	eba5 0509 	sub.w	r5, r5, r9
 800f09c:	6026      	str	r6, [r4, #0]
 800f09e:	60a5      	str	r5, [r4, #8]
 800f0a0:	463e      	mov	r6, r7
 800f0a2:	42be      	cmp	r6, r7
 800f0a4:	d900      	bls.n	800f0a8 <__ssputs_r+0x72>
 800f0a6:	463e      	mov	r6, r7
 800f0a8:	6820      	ldr	r0, [r4, #0]
 800f0aa:	4632      	mov	r2, r6
 800f0ac:	4641      	mov	r1, r8
 800f0ae:	f000 fb7b 	bl	800f7a8 <memmove>
 800f0b2:	68a3      	ldr	r3, [r4, #8]
 800f0b4:	1b9b      	subs	r3, r3, r6
 800f0b6:	60a3      	str	r3, [r4, #8]
 800f0b8:	6823      	ldr	r3, [r4, #0]
 800f0ba:	4433      	add	r3, r6
 800f0bc:	6023      	str	r3, [r4, #0]
 800f0be:	2000      	movs	r0, #0
 800f0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0c4:	462a      	mov	r2, r5
 800f0c6:	f000 fbd6 	bl	800f876 <_realloc_r>
 800f0ca:	4606      	mov	r6, r0
 800f0cc:	2800      	cmp	r0, #0
 800f0ce:	d1e0      	bne.n	800f092 <__ssputs_r+0x5c>
 800f0d0:	6921      	ldr	r1, [r4, #16]
 800f0d2:	4650      	mov	r0, sl
 800f0d4:	f7fe fea4 	bl	800de20 <_free_r>
 800f0d8:	230c      	movs	r3, #12
 800f0da:	f8ca 3000 	str.w	r3, [sl]
 800f0de:	89a3      	ldrh	r3, [r4, #12]
 800f0e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0e4:	81a3      	strh	r3, [r4, #12]
 800f0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ea:	e7e9      	b.n	800f0c0 <__ssputs_r+0x8a>

0800f0ec <_svfiprintf_r>:
 800f0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f0:	4698      	mov	r8, r3
 800f0f2:	898b      	ldrh	r3, [r1, #12]
 800f0f4:	061b      	lsls	r3, r3, #24
 800f0f6:	b09d      	sub	sp, #116	@ 0x74
 800f0f8:	4607      	mov	r7, r0
 800f0fa:	460d      	mov	r5, r1
 800f0fc:	4614      	mov	r4, r2
 800f0fe:	d510      	bpl.n	800f122 <_svfiprintf_r+0x36>
 800f100:	690b      	ldr	r3, [r1, #16]
 800f102:	b973      	cbnz	r3, 800f122 <_svfiprintf_r+0x36>
 800f104:	2140      	movs	r1, #64	@ 0x40
 800f106:	f7ff fa39 	bl	800e57c <_malloc_r>
 800f10a:	6028      	str	r0, [r5, #0]
 800f10c:	6128      	str	r0, [r5, #16]
 800f10e:	b930      	cbnz	r0, 800f11e <_svfiprintf_r+0x32>
 800f110:	230c      	movs	r3, #12
 800f112:	603b      	str	r3, [r7, #0]
 800f114:	f04f 30ff 	mov.w	r0, #4294967295
 800f118:	b01d      	add	sp, #116	@ 0x74
 800f11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f11e:	2340      	movs	r3, #64	@ 0x40
 800f120:	616b      	str	r3, [r5, #20]
 800f122:	2300      	movs	r3, #0
 800f124:	9309      	str	r3, [sp, #36]	@ 0x24
 800f126:	2320      	movs	r3, #32
 800f128:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f12c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f130:	2330      	movs	r3, #48	@ 0x30
 800f132:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f2d0 <_svfiprintf_r+0x1e4>
 800f136:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f13a:	f04f 0901 	mov.w	r9, #1
 800f13e:	4623      	mov	r3, r4
 800f140:	469a      	mov	sl, r3
 800f142:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f146:	b10a      	cbz	r2, 800f14c <_svfiprintf_r+0x60>
 800f148:	2a25      	cmp	r2, #37	@ 0x25
 800f14a:	d1f9      	bne.n	800f140 <_svfiprintf_r+0x54>
 800f14c:	ebba 0b04 	subs.w	fp, sl, r4
 800f150:	d00b      	beq.n	800f16a <_svfiprintf_r+0x7e>
 800f152:	465b      	mov	r3, fp
 800f154:	4622      	mov	r2, r4
 800f156:	4629      	mov	r1, r5
 800f158:	4638      	mov	r0, r7
 800f15a:	f7ff ff6c 	bl	800f036 <__ssputs_r>
 800f15e:	3001      	adds	r0, #1
 800f160:	f000 80a7 	beq.w	800f2b2 <_svfiprintf_r+0x1c6>
 800f164:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f166:	445a      	add	r2, fp
 800f168:	9209      	str	r2, [sp, #36]	@ 0x24
 800f16a:	f89a 3000 	ldrb.w	r3, [sl]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	f000 809f 	beq.w	800f2b2 <_svfiprintf_r+0x1c6>
 800f174:	2300      	movs	r3, #0
 800f176:	f04f 32ff 	mov.w	r2, #4294967295
 800f17a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f17e:	f10a 0a01 	add.w	sl, sl, #1
 800f182:	9304      	str	r3, [sp, #16]
 800f184:	9307      	str	r3, [sp, #28]
 800f186:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f18a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f18c:	4654      	mov	r4, sl
 800f18e:	2205      	movs	r2, #5
 800f190:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f194:	484e      	ldr	r0, [pc, #312]	@ (800f2d0 <_svfiprintf_r+0x1e4>)
 800f196:	f7f1 f84b 	bl	8000230 <memchr>
 800f19a:	9a04      	ldr	r2, [sp, #16]
 800f19c:	b9d8      	cbnz	r0, 800f1d6 <_svfiprintf_r+0xea>
 800f19e:	06d0      	lsls	r0, r2, #27
 800f1a0:	bf44      	itt	mi
 800f1a2:	2320      	movmi	r3, #32
 800f1a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f1a8:	0711      	lsls	r1, r2, #28
 800f1aa:	bf44      	itt	mi
 800f1ac:	232b      	movmi	r3, #43	@ 0x2b
 800f1ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f1b2:	f89a 3000 	ldrb.w	r3, [sl]
 800f1b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1b8:	d015      	beq.n	800f1e6 <_svfiprintf_r+0xfa>
 800f1ba:	9a07      	ldr	r2, [sp, #28]
 800f1bc:	4654      	mov	r4, sl
 800f1be:	2000      	movs	r0, #0
 800f1c0:	f04f 0c0a 	mov.w	ip, #10
 800f1c4:	4621      	mov	r1, r4
 800f1c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1ca:	3b30      	subs	r3, #48	@ 0x30
 800f1cc:	2b09      	cmp	r3, #9
 800f1ce:	d94b      	bls.n	800f268 <_svfiprintf_r+0x17c>
 800f1d0:	b1b0      	cbz	r0, 800f200 <_svfiprintf_r+0x114>
 800f1d2:	9207      	str	r2, [sp, #28]
 800f1d4:	e014      	b.n	800f200 <_svfiprintf_r+0x114>
 800f1d6:	eba0 0308 	sub.w	r3, r0, r8
 800f1da:	fa09 f303 	lsl.w	r3, r9, r3
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	9304      	str	r3, [sp, #16]
 800f1e2:	46a2      	mov	sl, r4
 800f1e4:	e7d2      	b.n	800f18c <_svfiprintf_r+0xa0>
 800f1e6:	9b03      	ldr	r3, [sp, #12]
 800f1e8:	1d19      	adds	r1, r3, #4
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	9103      	str	r1, [sp, #12]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	bfbb      	ittet	lt
 800f1f2:	425b      	neglt	r3, r3
 800f1f4:	f042 0202 	orrlt.w	r2, r2, #2
 800f1f8:	9307      	strge	r3, [sp, #28]
 800f1fa:	9307      	strlt	r3, [sp, #28]
 800f1fc:	bfb8      	it	lt
 800f1fe:	9204      	strlt	r2, [sp, #16]
 800f200:	7823      	ldrb	r3, [r4, #0]
 800f202:	2b2e      	cmp	r3, #46	@ 0x2e
 800f204:	d10a      	bne.n	800f21c <_svfiprintf_r+0x130>
 800f206:	7863      	ldrb	r3, [r4, #1]
 800f208:	2b2a      	cmp	r3, #42	@ 0x2a
 800f20a:	d132      	bne.n	800f272 <_svfiprintf_r+0x186>
 800f20c:	9b03      	ldr	r3, [sp, #12]
 800f20e:	1d1a      	adds	r2, r3, #4
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	9203      	str	r2, [sp, #12]
 800f214:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f218:	3402      	adds	r4, #2
 800f21a:	9305      	str	r3, [sp, #20]
 800f21c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f2e0 <_svfiprintf_r+0x1f4>
 800f220:	7821      	ldrb	r1, [r4, #0]
 800f222:	2203      	movs	r2, #3
 800f224:	4650      	mov	r0, sl
 800f226:	f7f1 f803 	bl	8000230 <memchr>
 800f22a:	b138      	cbz	r0, 800f23c <_svfiprintf_r+0x150>
 800f22c:	9b04      	ldr	r3, [sp, #16]
 800f22e:	eba0 000a 	sub.w	r0, r0, sl
 800f232:	2240      	movs	r2, #64	@ 0x40
 800f234:	4082      	lsls	r2, r0
 800f236:	4313      	orrs	r3, r2
 800f238:	3401      	adds	r4, #1
 800f23a:	9304      	str	r3, [sp, #16]
 800f23c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f240:	4824      	ldr	r0, [pc, #144]	@ (800f2d4 <_svfiprintf_r+0x1e8>)
 800f242:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f246:	2206      	movs	r2, #6
 800f248:	f7f0 fff2 	bl	8000230 <memchr>
 800f24c:	2800      	cmp	r0, #0
 800f24e:	d036      	beq.n	800f2be <_svfiprintf_r+0x1d2>
 800f250:	4b21      	ldr	r3, [pc, #132]	@ (800f2d8 <_svfiprintf_r+0x1ec>)
 800f252:	bb1b      	cbnz	r3, 800f29c <_svfiprintf_r+0x1b0>
 800f254:	9b03      	ldr	r3, [sp, #12]
 800f256:	3307      	adds	r3, #7
 800f258:	f023 0307 	bic.w	r3, r3, #7
 800f25c:	3308      	adds	r3, #8
 800f25e:	9303      	str	r3, [sp, #12]
 800f260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f262:	4433      	add	r3, r6
 800f264:	9309      	str	r3, [sp, #36]	@ 0x24
 800f266:	e76a      	b.n	800f13e <_svfiprintf_r+0x52>
 800f268:	fb0c 3202 	mla	r2, ip, r2, r3
 800f26c:	460c      	mov	r4, r1
 800f26e:	2001      	movs	r0, #1
 800f270:	e7a8      	b.n	800f1c4 <_svfiprintf_r+0xd8>
 800f272:	2300      	movs	r3, #0
 800f274:	3401      	adds	r4, #1
 800f276:	9305      	str	r3, [sp, #20]
 800f278:	4619      	mov	r1, r3
 800f27a:	f04f 0c0a 	mov.w	ip, #10
 800f27e:	4620      	mov	r0, r4
 800f280:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f284:	3a30      	subs	r2, #48	@ 0x30
 800f286:	2a09      	cmp	r2, #9
 800f288:	d903      	bls.n	800f292 <_svfiprintf_r+0x1a6>
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d0c6      	beq.n	800f21c <_svfiprintf_r+0x130>
 800f28e:	9105      	str	r1, [sp, #20]
 800f290:	e7c4      	b.n	800f21c <_svfiprintf_r+0x130>
 800f292:	fb0c 2101 	mla	r1, ip, r1, r2
 800f296:	4604      	mov	r4, r0
 800f298:	2301      	movs	r3, #1
 800f29a:	e7f0      	b.n	800f27e <_svfiprintf_r+0x192>
 800f29c:	ab03      	add	r3, sp, #12
 800f29e:	9300      	str	r3, [sp, #0]
 800f2a0:	462a      	mov	r2, r5
 800f2a2:	4b0e      	ldr	r3, [pc, #56]	@ (800f2dc <_svfiprintf_r+0x1f0>)
 800f2a4:	a904      	add	r1, sp, #16
 800f2a6:	4638      	mov	r0, r7
 800f2a8:	f7fc fe4e 	bl	800bf48 <_printf_float>
 800f2ac:	1c42      	adds	r2, r0, #1
 800f2ae:	4606      	mov	r6, r0
 800f2b0:	d1d6      	bne.n	800f260 <_svfiprintf_r+0x174>
 800f2b2:	89ab      	ldrh	r3, [r5, #12]
 800f2b4:	065b      	lsls	r3, r3, #25
 800f2b6:	f53f af2d 	bmi.w	800f114 <_svfiprintf_r+0x28>
 800f2ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f2bc:	e72c      	b.n	800f118 <_svfiprintf_r+0x2c>
 800f2be:	ab03      	add	r3, sp, #12
 800f2c0:	9300      	str	r3, [sp, #0]
 800f2c2:	462a      	mov	r2, r5
 800f2c4:	4b05      	ldr	r3, [pc, #20]	@ (800f2dc <_svfiprintf_r+0x1f0>)
 800f2c6:	a904      	add	r1, sp, #16
 800f2c8:	4638      	mov	r0, r7
 800f2ca:	f7fd f8d5 	bl	800c478 <_printf_i>
 800f2ce:	e7ed      	b.n	800f2ac <_svfiprintf_r+0x1c0>
 800f2d0:	08010320 	.word	0x08010320
 800f2d4:	0801032a 	.word	0x0801032a
 800f2d8:	0800bf49 	.word	0x0800bf49
 800f2dc:	0800f037 	.word	0x0800f037
 800f2e0:	08010326 	.word	0x08010326

0800f2e4 <__sfputc_r>:
 800f2e4:	6893      	ldr	r3, [r2, #8]
 800f2e6:	3b01      	subs	r3, #1
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	b410      	push	{r4}
 800f2ec:	6093      	str	r3, [r2, #8]
 800f2ee:	da08      	bge.n	800f302 <__sfputc_r+0x1e>
 800f2f0:	6994      	ldr	r4, [r2, #24]
 800f2f2:	42a3      	cmp	r3, r4
 800f2f4:	db01      	blt.n	800f2fa <__sfputc_r+0x16>
 800f2f6:	290a      	cmp	r1, #10
 800f2f8:	d103      	bne.n	800f302 <__sfputc_r+0x1e>
 800f2fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2fe:	f7fd bd84 	b.w	800ce0a <__swbuf_r>
 800f302:	6813      	ldr	r3, [r2, #0]
 800f304:	1c58      	adds	r0, r3, #1
 800f306:	6010      	str	r0, [r2, #0]
 800f308:	7019      	strb	r1, [r3, #0]
 800f30a:	4608      	mov	r0, r1
 800f30c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f310:	4770      	bx	lr

0800f312 <__sfputs_r>:
 800f312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f314:	4606      	mov	r6, r0
 800f316:	460f      	mov	r7, r1
 800f318:	4614      	mov	r4, r2
 800f31a:	18d5      	adds	r5, r2, r3
 800f31c:	42ac      	cmp	r4, r5
 800f31e:	d101      	bne.n	800f324 <__sfputs_r+0x12>
 800f320:	2000      	movs	r0, #0
 800f322:	e007      	b.n	800f334 <__sfputs_r+0x22>
 800f324:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f328:	463a      	mov	r2, r7
 800f32a:	4630      	mov	r0, r6
 800f32c:	f7ff ffda 	bl	800f2e4 <__sfputc_r>
 800f330:	1c43      	adds	r3, r0, #1
 800f332:	d1f3      	bne.n	800f31c <__sfputs_r+0xa>
 800f334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f338 <_vfiprintf_r>:
 800f338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f33c:	460d      	mov	r5, r1
 800f33e:	b09d      	sub	sp, #116	@ 0x74
 800f340:	4614      	mov	r4, r2
 800f342:	4698      	mov	r8, r3
 800f344:	4606      	mov	r6, r0
 800f346:	b118      	cbz	r0, 800f350 <_vfiprintf_r+0x18>
 800f348:	6a03      	ldr	r3, [r0, #32]
 800f34a:	b90b      	cbnz	r3, 800f350 <_vfiprintf_r+0x18>
 800f34c:	f7fd fc54 	bl	800cbf8 <__sinit>
 800f350:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f352:	07d9      	lsls	r1, r3, #31
 800f354:	d405      	bmi.n	800f362 <_vfiprintf_r+0x2a>
 800f356:	89ab      	ldrh	r3, [r5, #12]
 800f358:	059a      	lsls	r2, r3, #22
 800f35a:	d402      	bmi.n	800f362 <_vfiprintf_r+0x2a>
 800f35c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f35e:	f7fd fed4 	bl	800d10a <__retarget_lock_acquire_recursive>
 800f362:	89ab      	ldrh	r3, [r5, #12]
 800f364:	071b      	lsls	r3, r3, #28
 800f366:	d501      	bpl.n	800f36c <_vfiprintf_r+0x34>
 800f368:	692b      	ldr	r3, [r5, #16]
 800f36a:	b99b      	cbnz	r3, 800f394 <_vfiprintf_r+0x5c>
 800f36c:	4629      	mov	r1, r5
 800f36e:	4630      	mov	r0, r6
 800f370:	f7fd fd8a 	bl	800ce88 <__swsetup_r>
 800f374:	b170      	cbz	r0, 800f394 <_vfiprintf_r+0x5c>
 800f376:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f378:	07dc      	lsls	r4, r3, #31
 800f37a:	d504      	bpl.n	800f386 <_vfiprintf_r+0x4e>
 800f37c:	f04f 30ff 	mov.w	r0, #4294967295
 800f380:	b01d      	add	sp, #116	@ 0x74
 800f382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f386:	89ab      	ldrh	r3, [r5, #12]
 800f388:	0598      	lsls	r0, r3, #22
 800f38a:	d4f7      	bmi.n	800f37c <_vfiprintf_r+0x44>
 800f38c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f38e:	f7fd febd 	bl	800d10c <__retarget_lock_release_recursive>
 800f392:	e7f3      	b.n	800f37c <_vfiprintf_r+0x44>
 800f394:	2300      	movs	r3, #0
 800f396:	9309      	str	r3, [sp, #36]	@ 0x24
 800f398:	2320      	movs	r3, #32
 800f39a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f39e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3a2:	2330      	movs	r3, #48	@ 0x30
 800f3a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f554 <_vfiprintf_r+0x21c>
 800f3a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f3ac:	f04f 0901 	mov.w	r9, #1
 800f3b0:	4623      	mov	r3, r4
 800f3b2:	469a      	mov	sl, r3
 800f3b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3b8:	b10a      	cbz	r2, 800f3be <_vfiprintf_r+0x86>
 800f3ba:	2a25      	cmp	r2, #37	@ 0x25
 800f3bc:	d1f9      	bne.n	800f3b2 <_vfiprintf_r+0x7a>
 800f3be:	ebba 0b04 	subs.w	fp, sl, r4
 800f3c2:	d00b      	beq.n	800f3dc <_vfiprintf_r+0xa4>
 800f3c4:	465b      	mov	r3, fp
 800f3c6:	4622      	mov	r2, r4
 800f3c8:	4629      	mov	r1, r5
 800f3ca:	4630      	mov	r0, r6
 800f3cc:	f7ff ffa1 	bl	800f312 <__sfputs_r>
 800f3d0:	3001      	adds	r0, #1
 800f3d2:	f000 80a7 	beq.w	800f524 <_vfiprintf_r+0x1ec>
 800f3d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3d8:	445a      	add	r2, fp
 800f3da:	9209      	str	r2, [sp, #36]	@ 0x24
 800f3dc:	f89a 3000 	ldrb.w	r3, [sl]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	f000 809f 	beq.w	800f524 <_vfiprintf_r+0x1ec>
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	f04f 32ff 	mov.w	r2, #4294967295
 800f3ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3f0:	f10a 0a01 	add.w	sl, sl, #1
 800f3f4:	9304      	str	r3, [sp, #16]
 800f3f6:	9307      	str	r3, [sp, #28]
 800f3f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f3fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800f3fe:	4654      	mov	r4, sl
 800f400:	2205      	movs	r2, #5
 800f402:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f406:	4853      	ldr	r0, [pc, #332]	@ (800f554 <_vfiprintf_r+0x21c>)
 800f408:	f7f0 ff12 	bl	8000230 <memchr>
 800f40c:	9a04      	ldr	r2, [sp, #16]
 800f40e:	b9d8      	cbnz	r0, 800f448 <_vfiprintf_r+0x110>
 800f410:	06d1      	lsls	r1, r2, #27
 800f412:	bf44      	itt	mi
 800f414:	2320      	movmi	r3, #32
 800f416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f41a:	0713      	lsls	r3, r2, #28
 800f41c:	bf44      	itt	mi
 800f41e:	232b      	movmi	r3, #43	@ 0x2b
 800f420:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f424:	f89a 3000 	ldrb.w	r3, [sl]
 800f428:	2b2a      	cmp	r3, #42	@ 0x2a
 800f42a:	d015      	beq.n	800f458 <_vfiprintf_r+0x120>
 800f42c:	9a07      	ldr	r2, [sp, #28]
 800f42e:	4654      	mov	r4, sl
 800f430:	2000      	movs	r0, #0
 800f432:	f04f 0c0a 	mov.w	ip, #10
 800f436:	4621      	mov	r1, r4
 800f438:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f43c:	3b30      	subs	r3, #48	@ 0x30
 800f43e:	2b09      	cmp	r3, #9
 800f440:	d94b      	bls.n	800f4da <_vfiprintf_r+0x1a2>
 800f442:	b1b0      	cbz	r0, 800f472 <_vfiprintf_r+0x13a>
 800f444:	9207      	str	r2, [sp, #28]
 800f446:	e014      	b.n	800f472 <_vfiprintf_r+0x13a>
 800f448:	eba0 0308 	sub.w	r3, r0, r8
 800f44c:	fa09 f303 	lsl.w	r3, r9, r3
 800f450:	4313      	orrs	r3, r2
 800f452:	9304      	str	r3, [sp, #16]
 800f454:	46a2      	mov	sl, r4
 800f456:	e7d2      	b.n	800f3fe <_vfiprintf_r+0xc6>
 800f458:	9b03      	ldr	r3, [sp, #12]
 800f45a:	1d19      	adds	r1, r3, #4
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	9103      	str	r1, [sp, #12]
 800f460:	2b00      	cmp	r3, #0
 800f462:	bfbb      	ittet	lt
 800f464:	425b      	neglt	r3, r3
 800f466:	f042 0202 	orrlt.w	r2, r2, #2
 800f46a:	9307      	strge	r3, [sp, #28]
 800f46c:	9307      	strlt	r3, [sp, #28]
 800f46e:	bfb8      	it	lt
 800f470:	9204      	strlt	r2, [sp, #16]
 800f472:	7823      	ldrb	r3, [r4, #0]
 800f474:	2b2e      	cmp	r3, #46	@ 0x2e
 800f476:	d10a      	bne.n	800f48e <_vfiprintf_r+0x156>
 800f478:	7863      	ldrb	r3, [r4, #1]
 800f47a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f47c:	d132      	bne.n	800f4e4 <_vfiprintf_r+0x1ac>
 800f47e:	9b03      	ldr	r3, [sp, #12]
 800f480:	1d1a      	adds	r2, r3, #4
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	9203      	str	r2, [sp, #12]
 800f486:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f48a:	3402      	adds	r4, #2
 800f48c:	9305      	str	r3, [sp, #20]
 800f48e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f564 <_vfiprintf_r+0x22c>
 800f492:	7821      	ldrb	r1, [r4, #0]
 800f494:	2203      	movs	r2, #3
 800f496:	4650      	mov	r0, sl
 800f498:	f7f0 feca 	bl	8000230 <memchr>
 800f49c:	b138      	cbz	r0, 800f4ae <_vfiprintf_r+0x176>
 800f49e:	9b04      	ldr	r3, [sp, #16]
 800f4a0:	eba0 000a 	sub.w	r0, r0, sl
 800f4a4:	2240      	movs	r2, #64	@ 0x40
 800f4a6:	4082      	lsls	r2, r0
 800f4a8:	4313      	orrs	r3, r2
 800f4aa:	3401      	adds	r4, #1
 800f4ac:	9304      	str	r3, [sp, #16]
 800f4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4b2:	4829      	ldr	r0, [pc, #164]	@ (800f558 <_vfiprintf_r+0x220>)
 800f4b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f4b8:	2206      	movs	r2, #6
 800f4ba:	f7f0 feb9 	bl	8000230 <memchr>
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	d03f      	beq.n	800f542 <_vfiprintf_r+0x20a>
 800f4c2:	4b26      	ldr	r3, [pc, #152]	@ (800f55c <_vfiprintf_r+0x224>)
 800f4c4:	bb1b      	cbnz	r3, 800f50e <_vfiprintf_r+0x1d6>
 800f4c6:	9b03      	ldr	r3, [sp, #12]
 800f4c8:	3307      	adds	r3, #7
 800f4ca:	f023 0307 	bic.w	r3, r3, #7
 800f4ce:	3308      	adds	r3, #8
 800f4d0:	9303      	str	r3, [sp, #12]
 800f4d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4d4:	443b      	add	r3, r7
 800f4d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4d8:	e76a      	b.n	800f3b0 <_vfiprintf_r+0x78>
 800f4da:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4de:	460c      	mov	r4, r1
 800f4e0:	2001      	movs	r0, #1
 800f4e2:	e7a8      	b.n	800f436 <_vfiprintf_r+0xfe>
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	3401      	adds	r4, #1
 800f4e8:	9305      	str	r3, [sp, #20]
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	f04f 0c0a 	mov.w	ip, #10
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4f6:	3a30      	subs	r2, #48	@ 0x30
 800f4f8:	2a09      	cmp	r2, #9
 800f4fa:	d903      	bls.n	800f504 <_vfiprintf_r+0x1cc>
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d0c6      	beq.n	800f48e <_vfiprintf_r+0x156>
 800f500:	9105      	str	r1, [sp, #20]
 800f502:	e7c4      	b.n	800f48e <_vfiprintf_r+0x156>
 800f504:	fb0c 2101 	mla	r1, ip, r1, r2
 800f508:	4604      	mov	r4, r0
 800f50a:	2301      	movs	r3, #1
 800f50c:	e7f0      	b.n	800f4f0 <_vfiprintf_r+0x1b8>
 800f50e:	ab03      	add	r3, sp, #12
 800f510:	9300      	str	r3, [sp, #0]
 800f512:	462a      	mov	r2, r5
 800f514:	4b12      	ldr	r3, [pc, #72]	@ (800f560 <_vfiprintf_r+0x228>)
 800f516:	a904      	add	r1, sp, #16
 800f518:	4630      	mov	r0, r6
 800f51a:	f7fc fd15 	bl	800bf48 <_printf_float>
 800f51e:	4607      	mov	r7, r0
 800f520:	1c78      	adds	r0, r7, #1
 800f522:	d1d6      	bne.n	800f4d2 <_vfiprintf_r+0x19a>
 800f524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f526:	07d9      	lsls	r1, r3, #31
 800f528:	d405      	bmi.n	800f536 <_vfiprintf_r+0x1fe>
 800f52a:	89ab      	ldrh	r3, [r5, #12]
 800f52c:	059a      	lsls	r2, r3, #22
 800f52e:	d402      	bmi.n	800f536 <_vfiprintf_r+0x1fe>
 800f530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f532:	f7fd fdeb 	bl	800d10c <__retarget_lock_release_recursive>
 800f536:	89ab      	ldrh	r3, [r5, #12]
 800f538:	065b      	lsls	r3, r3, #25
 800f53a:	f53f af1f 	bmi.w	800f37c <_vfiprintf_r+0x44>
 800f53e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f540:	e71e      	b.n	800f380 <_vfiprintf_r+0x48>
 800f542:	ab03      	add	r3, sp, #12
 800f544:	9300      	str	r3, [sp, #0]
 800f546:	462a      	mov	r2, r5
 800f548:	4b05      	ldr	r3, [pc, #20]	@ (800f560 <_vfiprintf_r+0x228>)
 800f54a:	a904      	add	r1, sp, #16
 800f54c:	4630      	mov	r0, r6
 800f54e:	f7fc ff93 	bl	800c478 <_printf_i>
 800f552:	e7e4      	b.n	800f51e <_vfiprintf_r+0x1e6>
 800f554:	08010320 	.word	0x08010320
 800f558:	0801032a 	.word	0x0801032a
 800f55c:	0800bf49 	.word	0x0800bf49
 800f560:	0800f313 	.word	0x0800f313
 800f564:	08010326 	.word	0x08010326

0800f568 <__sflush_r>:
 800f568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f570:	0716      	lsls	r6, r2, #28
 800f572:	4605      	mov	r5, r0
 800f574:	460c      	mov	r4, r1
 800f576:	d454      	bmi.n	800f622 <__sflush_r+0xba>
 800f578:	684b      	ldr	r3, [r1, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	dc02      	bgt.n	800f584 <__sflush_r+0x1c>
 800f57e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f580:	2b00      	cmp	r3, #0
 800f582:	dd48      	ble.n	800f616 <__sflush_r+0xae>
 800f584:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f586:	2e00      	cmp	r6, #0
 800f588:	d045      	beq.n	800f616 <__sflush_r+0xae>
 800f58a:	2300      	movs	r3, #0
 800f58c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f590:	682f      	ldr	r7, [r5, #0]
 800f592:	6a21      	ldr	r1, [r4, #32]
 800f594:	602b      	str	r3, [r5, #0]
 800f596:	d030      	beq.n	800f5fa <__sflush_r+0x92>
 800f598:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f59a:	89a3      	ldrh	r3, [r4, #12]
 800f59c:	0759      	lsls	r1, r3, #29
 800f59e:	d505      	bpl.n	800f5ac <__sflush_r+0x44>
 800f5a0:	6863      	ldr	r3, [r4, #4]
 800f5a2:	1ad2      	subs	r2, r2, r3
 800f5a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f5a6:	b10b      	cbz	r3, 800f5ac <__sflush_r+0x44>
 800f5a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f5aa:	1ad2      	subs	r2, r2, r3
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5b0:	6a21      	ldr	r1, [r4, #32]
 800f5b2:	4628      	mov	r0, r5
 800f5b4:	47b0      	blx	r6
 800f5b6:	1c43      	adds	r3, r0, #1
 800f5b8:	89a3      	ldrh	r3, [r4, #12]
 800f5ba:	d106      	bne.n	800f5ca <__sflush_r+0x62>
 800f5bc:	6829      	ldr	r1, [r5, #0]
 800f5be:	291d      	cmp	r1, #29
 800f5c0:	d82b      	bhi.n	800f61a <__sflush_r+0xb2>
 800f5c2:	4a2a      	ldr	r2, [pc, #168]	@ (800f66c <__sflush_r+0x104>)
 800f5c4:	410a      	asrs	r2, r1
 800f5c6:	07d6      	lsls	r6, r2, #31
 800f5c8:	d427      	bmi.n	800f61a <__sflush_r+0xb2>
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	6062      	str	r2, [r4, #4]
 800f5ce:	04d9      	lsls	r1, r3, #19
 800f5d0:	6922      	ldr	r2, [r4, #16]
 800f5d2:	6022      	str	r2, [r4, #0]
 800f5d4:	d504      	bpl.n	800f5e0 <__sflush_r+0x78>
 800f5d6:	1c42      	adds	r2, r0, #1
 800f5d8:	d101      	bne.n	800f5de <__sflush_r+0x76>
 800f5da:	682b      	ldr	r3, [r5, #0]
 800f5dc:	b903      	cbnz	r3, 800f5e0 <__sflush_r+0x78>
 800f5de:	6560      	str	r0, [r4, #84]	@ 0x54
 800f5e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f5e2:	602f      	str	r7, [r5, #0]
 800f5e4:	b1b9      	cbz	r1, 800f616 <__sflush_r+0xae>
 800f5e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f5ea:	4299      	cmp	r1, r3
 800f5ec:	d002      	beq.n	800f5f4 <__sflush_r+0x8c>
 800f5ee:	4628      	mov	r0, r5
 800f5f0:	f7fe fc16 	bl	800de20 <_free_r>
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800f5f8:	e00d      	b.n	800f616 <__sflush_r+0xae>
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	4628      	mov	r0, r5
 800f5fe:	47b0      	blx	r6
 800f600:	4602      	mov	r2, r0
 800f602:	1c50      	adds	r0, r2, #1
 800f604:	d1c9      	bne.n	800f59a <__sflush_r+0x32>
 800f606:	682b      	ldr	r3, [r5, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d0c6      	beq.n	800f59a <__sflush_r+0x32>
 800f60c:	2b1d      	cmp	r3, #29
 800f60e:	d001      	beq.n	800f614 <__sflush_r+0xac>
 800f610:	2b16      	cmp	r3, #22
 800f612:	d11e      	bne.n	800f652 <__sflush_r+0xea>
 800f614:	602f      	str	r7, [r5, #0]
 800f616:	2000      	movs	r0, #0
 800f618:	e022      	b.n	800f660 <__sflush_r+0xf8>
 800f61a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f61e:	b21b      	sxth	r3, r3
 800f620:	e01b      	b.n	800f65a <__sflush_r+0xf2>
 800f622:	690f      	ldr	r7, [r1, #16]
 800f624:	2f00      	cmp	r7, #0
 800f626:	d0f6      	beq.n	800f616 <__sflush_r+0xae>
 800f628:	0793      	lsls	r3, r2, #30
 800f62a:	680e      	ldr	r6, [r1, #0]
 800f62c:	bf08      	it	eq
 800f62e:	694b      	ldreq	r3, [r1, #20]
 800f630:	600f      	str	r7, [r1, #0]
 800f632:	bf18      	it	ne
 800f634:	2300      	movne	r3, #0
 800f636:	eba6 0807 	sub.w	r8, r6, r7
 800f63a:	608b      	str	r3, [r1, #8]
 800f63c:	f1b8 0f00 	cmp.w	r8, #0
 800f640:	dde9      	ble.n	800f616 <__sflush_r+0xae>
 800f642:	6a21      	ldr	r1, [r4, #32]
 800f644:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f646:	4643      	mov	r3, r8
 800f648:	463a      	mov	r2, r7
 800f64a:	4628      	mov	r0, r5
 800f64c:	47b0      	blx	r6
 800f64e:	2800      	cmp	r0, #0
 800f650:	dc08      	bgt.n	800f664 <__sflush_r+0xfc>
 800f652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f65a:	81a3      	strh	r3, [r4, #12]
 800f65c:	f04f 30ff 	mov.w	r0, #4294967295
 800f660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f664:	4407      	add	r7, r0
 800f666:	eba8 0800 	sub.w	r8, r8, r0
 800f66a:	e7e7      	b.n	800f63c <__sflush_r+0xd4>
 800f66c:	dfbffffe 	.word	0xdfbffffe

0800f670 <_fflush_r>:
 800f670:	b538      	push	{r3, r4, r5, lr}
 800f672:	690b      	ldr	r3, [r1, #16]
 800f674:	4605      	mov	r5, r0
 800f676:	460c      	mov	r4, r1
 800f678:	b913      	cbnz	r3, 800f680 <_fflush_r+0x10>
 800f67a:	2500      	movs	r5, #0
 800f67c:	4628      	mov	r0, r5
 800f67e:	bd38      	pop	{r3, r4, r5, pc}
 800f680:	b118      	cbz	r0, 800f68a <_fflush_r+0x1a>
 800f682:	6a03      	ldr	r3, [r0, #32]
 800f684:	b90b      	cbnz	r3, 800f68a <_fflush_r+0x1a>
 800f686:	f7fd fab7 	bl	800cbf8 <__sinit>
 800f68a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d0f3      	beq.n	800f67a <_fflush_r+0xa>
 800f692:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f694:	07d0      	lsls	r0, r2, #31
 800f696:	d404      	bmi.n	800f6a2 <_fflush_r+0x32>
 800f698:	0599      	lsls	r1, r3, #22
 800f69a:	d402      	bmi.n	800f6a2 <_fflush_r+0x32>
 800f69c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f69e:	f7fd fd34 	bl	800d10a <__retarget_lock_acquire_recursive>
 800f6a2:	4628      	mov	r0, r5
 800f6a4:	4621      	mov	r1, r4
 800f6a6:	f7ff ff5f 	bl	800f568 <__sflush_r>
 800f6aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6ac:	07da      	lsls	r2, r3, #31
 800f6ae:	4605      	mov	r5, r0
 800f6b0:	d4e4      	bmi.n	800f67c <_fflush_r+0xc>
 800f6b2:	89a3      	ldrh	r3, [r4, #12]
 800f6b4:	059b      	lsls	r3, r3, #22
 800f6b6:	d4e1      	bmi.n	800f67c <_fflush_r+0xc>
 800f6b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6ba:	f7fd fd27 	bl	800d10c <__retarget_lock_release_recursive>
 800f6be:	e7dd      	b.n	800f67c <_fflush_r+0xc>

0800f6c0 <fiprintf>:
 800f6c0:	b40e      	push	{r1, r2, r3}
 800f6c2:	b503      	push	{r0, r1, lr}
 800f6c4:	4601      	mov	r1, r0
 800f6c6:	ab03      	add	r3, sp, #12
 800f6c8:	4805      	ldr	r0, [pc, #20]	@ (800f6e0 <fiprintf+0x20>)
 800f6ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6ce:	6800      	ldr	r0, [r0, #0]
 800f6d0:	9301      	str	r3, [sp, #4]
 800f6d2:	f7ff fe31 	bl	800f338 <_vfiprintf_r>
 800f6d6:	b002      	add	sp, #8
 800f6d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6dc:	b003      	add	sp, #12
 800f6de:	4770      	bx	lr
 800f6e0:	2000024c 	.word	0x2000024c

0800f6e4 <__swhatbuf_r>:
 800f6e4:	b570      	push	{r4, r5, r6, lr}
 800f6e6:	460c      	mov	r4, r1
 800f6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ec:	2900      	cmp	r1, #0
 800f6ee:	b096      	sub	sp, #88	@ 0x58
 800f6f0:	4615      	mov	r5, r2
 800f6f2:	461e      	mov	r6, r3
 800f6f4:	da0d      	bge.n	800f712 <__swhatbuf_r+0x2e>
 800f6f6:	89a3      	ldrh	r3, [r4, #12]
 800f6f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f6fc:	f04f 0100 	mov.w	r1, #0
 800f700:	bf14      	ite	ne
 800f702:	2340      	movne	r3, #64	@ 0x40
 800f704:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f708:	2000      	movs	r0, #0
 800f70a:	6031      	str	r1, [r6, #0]
 800f70c:	602b      	str	r3, [r5, #0]
 800f70e:	b016      	add	sp, #88	@ 0x58
 800f710:	bd70      	pop	{r4, r5, r6, pc}
 800f712:	466a      	mov	r2, sp
 800f714:	f000 f862 	bl	800f7dc <_fstat_r>
 800f718:	2800      	cmp	r0, #0
 800f71a:	dbec      	blt.n	800f6f6 <__swhatbuf_r+0x12>
 800f71c:	9901      	ldr	r1, [sp, #4]
 800f71e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f722:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f726:	4259      	negs	r1, r3
 800f728:	4159      	adcs	r1, r3
 800f72a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f72e:	e7eb      	b.n	800f708 <__swhatbuf_r+0x24>

0800f730 <__smakebuf_r>:
 800f730:	898b      	ldrh	r3, [r1, #12]
 800f732:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f734:	079d      	lsls	r5, r3, #30
 800f736:	4606      	mov	r6, r0
 800f738:	460c      	mov	r4, r1
 800f73a:	d507      	bpl.n	800f74c <__smakebuf_r+0x1c>
 800f73c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f740:	6023      	str	r3, [r4, #0]
 800f742:	6123      	str	r3, [r4, #16]
 800f744:	2301      	movs	r3, #1
 800f746:	6163      	str	r3, [r4, #20]
 800f748:	b003      	add	sp, #12
 800f74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f74c:	ab01      	add	r3, sp, #4
 800f74e:	466a      	mov	r2, sp
 800f750:	f7ff ffc8 	bl	800f6e4 <__swhatbuf_r>
 800f754:	9f00      	ldr	r7, [sp, #0]
 800f756:	4605      	mov	r5, r0
 800f758:	4639      	mov	r1, r7
 800f75a:	4630      	mov	r0, r6
 800f75c:	f7fe ff0e 	bl	800e57c <_malloc_r>
 800f760:	b948      	cbnz	r0, 800f776 <__smakebuf_r+0x46>
 800f762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f766:	059a      	lsls	r2, r3, #22
 800f768:	d4ee      	bmi.n	800f748 <__smakebuf_r+0x18>
 800f76a:	f023 0303 	bic.w	r3, r3, #3
 800f76e:	f043 0302 	orr.w	r3, r3, #2
 800f772:	81a3      	strh	r3, [r4, #12]
 800f774:	e7e2      	b.n	800f73c <__smakebuf_r+0xc>
 800f776:	89a3      	ldrh	r3, [r4, #12]
 800f778:	6020      	str	r0, [r4, #0]
 800f77a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f77e:	81a3      	strh	r3, [r4, #12]
 800f780:	9b01      	ldr	r3, [sp, #4]
 800f782:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f786:	b15b      	cbz	r3, 800f7a0 <__smakebuf_r+0x70>
 800f788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f78c:	4630      	mov	r0, r6
 800f78e:	f000 f837 	bl	800f800 <_isatty_r>
 800f792:	b128      	cbz	r0, 800f7a0 <__smakebuf_r+0x70>
 800f794:	89a3      	ldrh	r3, [r4, #12]
 800f796:	f023 0303 	bic.w	r3, r3, #3
 800f79a:	f043 0301 	orr.w	r3, r3, #1
 800f79e:	81a3      	strh	r3, [r4, #12]
 800f7a0:	89a3      	ldrh	r3, [r4, #12]
 800f7a2:	431d      	orrs	r5, r3
 800f7a4:	81a5      	strh	r5, [r4, #12]
 800f7a6:	e7cf      	b.n	800f748 <__smakebuf_r+0x18>

0800f7a8 <memmove>:
 800f7a8:	4288      	cmp	r0, r1
 800f7aa:	b510      	push	{r4, lr}
 800f7ac:	eb01 0402 	add.w	r4, r1, r2
 800f7b0:	d902      	bls.n	800f7b8 <memmove+0x10>
 800f7b2:	4284      	cmp	r4, r0
 800f7b4:	4623      	mov	r3, r4
 800f7b6:	d807      	bhi.n	800f7c8 <memmove+0x20>
 800f7b8:	1e43      	subs	r3, r0, #1
 800f7ba:	42a1      	cmp	r1, r4
 800f7bc:	d008      	beq.n	800f7d0 <memmove+0x28>
 800f7be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f7c6:	e7f8      	b.n	800f7ba <memmove+0x12>
 800f7c8:	4402      	add	r2, r0
 800f7ca:	4601      	mov	r1, r0
 800f7cc:	428a      	cmp	r2, r1
 800f7ce:	d100      	bne.n	800f7d2 <memmove+0x2a>
 800f7d0:	bd10      	pop	{r4, pc}
 800f7d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f7da:	e7f7      	b.n	800f7cc <memmove+0x24>

0800f7dc <_fstat_r>:
 800f7dc:	b538      	push	{r3, r4, r5, lr}
 800f7de:	4d07      	ldr	r5, [pc, #28]	@ (800f7fc <_fstat_r+0x20>)
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	4608      	mov	r0, r1
 800f7e6:	4611      	mov	r1, r2
 800f7e8:	602b      	str	r3, [r5, #0]
 800f7ea:	f7f2 faa1 	bl	8001d30 <_fstat>
 800f7ee:	1c43      	adds	r3, r0, #1
 800f7f0:	d102      	bne.n	800f7f8 <_fstat_r+0x1c>
 800f7f2:	682b      	ldr	r3, [r5, #0]
 800f7f4:	b103      	cbz	r3, 800f7f8 <_fstat_r+0x1c>
 800f7f6:	6023      	str	r3, [r4, #0]
 800f7f8:	bd38      	pop	{r3, r4, r5, pc}
 800f7fa:	bf00      	nop
 800f7fc:	20005120 	.word	0x20005120

0800f800 <_isatty_r>:
 800f800:	b538      	push	{r3, r4, r5, lr}
 800f802:	4d06      	ldr	r5, [pc, #24]	@ (800f81c <_isatty_r+0x1c>)
 800f804:	2300      	movs	r3, #0
 800f806:	4604      	mov	r4, r0
 800f808:	4608      	mov	r0, r1
 800f80a:	602b      	str	r3, [r5, #0]
 800f80c:	f7f2 faa0 	bl	8001d50 <_isatty>
 800f810:	1c43      	adds	r3, r0, #1
 800f812:	d102      	bne.n	800f81a <_isatty_r+0x1a>
 800f814:	682b      	ldr	r3, [r5, #0]
 800f816:	b103      	cbz	r3, 800f81a <_isatty_r+0x1a>
 800f818:	6023      	str	r3, [r4, #0]
 800f81a:	bd38      	pop	{r3, r4, r5, pc}
 800f81c:	20005120 	.word	0x20005120

0800f820 <_sbrk_r>:
 800f820:	b538      	push	{r3, r4, r5, lr}
 800f822:	4d06      	ldr	r5, [pc, #24]	@ (800f83c <_sbrk_r+0x1c>)
 800f824:	2300      	movs	r3, #0
 800f826:	4604      	mov	r4, r0
 800f828:	4608      	mov	r0, r1
 800f82a:	602b      	str	r3, [r5, #0]
 800f82c:	f7f2 faa8 	bl	8001d80 <_sbrk>
 800f830:	1c43      	adds	r3, r0, #1
 800f832:	d102      	bne.n	800f83a <_sbrk_r+0x1a>
 800f834:	682b      	ldr	r3, [r5, #0]
 800f836:	b103      	cbz	r3, 800f83a <_sbrk_r+0x1a>
 800f838:	6023      	str	r3, [r4, #0]
 800f83a:	bd38      	pop	{r3, r4, r5, pc}
 800f83c:	20005120 	.word	0x20005120

0800f840 <abort>:
 800f840:	b508      	push	{r3, lr}
 800f842:	2006      	movs	r0, #6
 800f844:	f000 f86e 	bl	800f924 <raise>
 800f848:	2001      	movs	r0, #1
 800f84a:	f7f2 fa3d 	bl	8001cc8 <_exit>

0800f84e <_calloc_r>:
 800f84e:	b570      	push	{r4, r5, r6, lr}
 800f850:	fba1 5402 	umull	r5, r4, r1, r2
 800f854:	b93c      	cbnz	r4, 800f866 <_calloc_r+0x18>
 800f856:	4629      	mov	r1, r5
 800f858:	f7fe fe90 	bl	800e57c <_malloc_r>
 800f85c:	4606      	mov	r6, r0
 800f85e:	b928      	cbnz	r0, 800f86c <_calloc_r+0x1e>
 800f860:	2600      	movs	r6, #0
 800f862:	4630      	mov	r0, r6
 800f864:	bd70      	pop	{r4, r5, r6, pc}
 800f866:	220c      	movs	r2, #12
 800f868:	6002      	str	r2, [r0, #0]
 800f86a:	e7f9      	b.n	800f860 <_calloc_r+0x12>
 800f86c:	462a      	mov	r2, r5
 800f86e:	4621      	mov	r1, r4
 800f870:	f7fd fb60 	bl	800cf34 <memset>
 800f874:	e7f5      	b.n	800f862 <_calloc_r+0x14>

0800f876 <_realloc_r>:
 800f876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f87a:	4680      	mov	r8, r0
 800f87c:	4615      	mov	r5, r2
 800f87e:	460c      	mov	r4, r1
 800f880:	b921      	cbnz	r1, 800f88c <_realloc_r+0x16>
 800f882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f886:	4611      	mov	r1, r2
 800f888:	f7fe be78 	b.w	800e57c <_malloc_r>
 800f88c:	b92a      	cbnz	r2, 800f89a <_realloc_r+0x24>
 800f88e:	f7fe fac7 	bl	800de20 <_free_r>
 800f892:	2400      	movs	r4, #0
 800f894:	4620      	mov	r0, r4
 800f896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f89a:	f000 f85f 	bl	800f95c <_malloc_usable_size_r>
 800f89e:	4285      	cmp	r5, r0
 800f8a0:	4606      	mov	r6, r0
 800f8a2:	d802      	bhi.n	800f8aa <_realloc_r+0x34>
 800f8a4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f8a8:	d8f4      	bhi.n	800f894 <_realloc_r+0x1e>
 800f8aa:	4629      	mov	r1, r5
 800f8ac:	4640      	mov	r0, r8
 800f8ae:	f7fe fe65 	bl	800e57c <_malloc_r>
 800f8b2:	4607      	mov	r7, r0
 800f8b4:	2800      	cmp	r0, #0
 800f8b6:	d0ec      	beq.n	800f892 <_realloc_r+0x1c>
 800f8b8:	42b5      	cmp	r5, r6
 800f8ba:	462a      	mov	r2, r5
 800f8bc:	4621      	mov	r1, r4
 800f8be:	bf28      	it	cs
 800f8c0:	4632      	movcs	r2, r6
 800f8c2:	f7fd fc24 	bl	800d10e <memcpy>
 800f8c6:	4621      	mov	r1, r4
 800f8c8:	4640      	mov	r0, r8
 800f8ca:	f7fe faa9 	bl	800de20 <_free_r>
 800f8ce:	463c      	mov	r4, r7
 800f8d0:	e7e0      	b.n	800f894 <_realloc_r+0x1e>

0800f8d2 <_raise_r>:
 800f8d2:	291f      	cmp	r1, #31
 800f8d4:	b538      	push	{r3, r4, r5, lr}
 800f8d6:	4605      	mov	r5, r0
 800f8d8:	460c      	mov	r4, r1
 800f8da:	d904      	bls.n	800f8e6 <_raise_r+0x14>
 800f8dc:	2316      	movs	r3, #22
 800f8de:	6003      	str	r3, [r0, #0]
 800f8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f8e4:	bd38      	pop	{r3, r4, r5, pc}
 800f8e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f8e8:	b112      	cbz	r2, 800f8f0 <_raise_r+0x1e>
 800f8ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f8ee:	b94b      	cbnz	r3, 800f904 <_raise_r+0x32>
 800f8f0:	4628      	mov	r0, r5
 800f8f2:	f000 f831 	bl	800f958 <_getpid_r>
 800f8f6:	4622      	mov	r2, r4
 800f8f8:	4601      	mov	r1, r0
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f900:	f000 b818 	b.w	800f934 <_kill_r>
 800f904:	2b01      	cmp	r3, #1
 800f906:	d00a      	beq.n	800f91e <_raise_r+0x4c>
 800f908:	1c59      	adds	r1, r3, #1
 800f90a:	d103      	bne.n	800f914 <_raise_r+0x42>
 800f90c:	2316      	movs	r3, #22
 800f90e:	6003      	str	r3, [r0, #0]
 800f910:	2001      	movs	r0, #1
 800f912:	e7e7      	b.n	800f8e4 <_raise_r+0x12>
 800f914:	2100      	movs	r1, #0
 800f916:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f91a:	4620      	mov	r0, r4
 800f91c:	4798      	blx	r3
 800f91e:	2000      	movs	r0, #0
 800f920:	e7e0      	b.n	800f8e4 <_raise_r+0x12>
	...

0800f924 <raise>:
 800f924:	4b02      	ldr	r3, [pc, #8]	@ (800f930 <raise+0xc>)
 800f926:	4601      	mov	r1, r0
 800f928:	6818      	ldr	r0, [r3, #0]
 800f92a:	f7ff bfd2 	b.w	800f8d2 <_raise_r>
 800f92e:	bf00      	nop
 800f930:	2000024c 	.word	0x2000024c

0800f934 <_kill_r>:
 800f934:	b538      	push	{r3, r4, r5, lr}
 800f936:	4d07      	ldr	r5, [pc, #28]	@ (800f954 <_kill_r+0x20>)
 800f938:	2300      	movs	r3, #0
 800f93a:	4604      	mov	r4, r0
 800f93c:	4608      	mov	r0, r1
 800f93e:	4611      	mov	r1, r2
 800f940:	602b      	str	r3, [r5, #0]
 800f942:	f7f2 f9b1 	bl	8001ca8 <_kill>
 800f946:	1c43      	adds	r3, r0, #1
 800f948:	d102      	bne.n	800f950 <_kill_r+0x1c>
 800f94a:	682b      	ldr	r3, [r5, #0]
 800f94c:	b103      	cbz	r3, 800f950 <_kill_r+0x1c>
 800f94e:	6023      	str	r3, [r4, #0]
 800f950:	bd38      	pop	{r3, r4, r5, pc}
 800f952:	bf00      	nop
 800f954:	20005120 	.word	0x20005120

0800f958 <_getpid_r>:
 800f958:	f7f2 b99e 	b.w	8001c98 <_getpid>

0800f95c <_malloc_usable_size_r>:
 800f95c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f960:	1f18      	subs	r0, r3, #4
 800f962:	2b00      	cmp	r3, #0
 800f964:	bfbc      	itt	lt
 800f966:	580b      	ldrlt	r3, [r1, r0]
 800f968:	18c0      	addlt	r0, r0, r3
 800f96a:	4770      	bx	lr

0800f96c <sqrt>:
 800f96c:	b538      	push	{r3, r4, r5, lr}
 800f96e:	ed2d 8b02 	vpush	{d8}
 800f972:	ec55 4b10 	vmov	r4, r5, d0
 800f976:	f000 f825 	bl	800f9c4 <__ieee754_sqrt>
 800f97a:	4622      	mov	r2, r4
 800f97c:	462b      	mov	r3, r5
 800f97e:	4620      	mov	r0, r4
 800f980:	4629      	mov	r1, r5
 800f982:	eeb0 8a40 	vmov.f32	s16, s0
 800f986:	eef0 8a60 	vmov.f32	s17, s1
 800f98a:	f7f1 f8ff 	bl	8000b8c <__aeabi_dcmpun>
 800f98e:	b990      	cbnz	r0, 800f9b6 <sqrt+0x4a>
 800f990:	2200      	movs	r2, #0
 800f992:	2300      	movs	r3, #0
 800f994:	4620      	mov	r0, r4
 800f996:	4629      	mov	r1, r5
 800f998:	f7f1 f8d0 	bl	8000b3c <__aeabi_dcmplt>
 800f99c:	b158      	cbz	r0, 800f9b6 <sqrt+0x4a>
 800f99e:	f7fd fb89 	bl	800d0b4 <__errno>
 800f9a2:	2321      	movs	r3, #33	@ 0x21
 800f9a4:	6003      	str	r3, [r0, #0]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	4610      	mov	r0, r2
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	f7f0 ff7d 	bl	80008ac <__aeabi_ddiv>
 800f9b2:	ec41 0b18 	vmov	d8, r0, r1
 800f9b6:	eeb0 0a48 	vmov.f32	s0, s16
 800f9ba:	eef0 0a68 	vmov.f32	s1, s17
 800f9be:	ecbd 8b02 	vpop	{d8}
 800f9c2:	bd38      	pop	{r3, r4, r5, pc}

0800f9c4 <__ieee754_sqrt>:
 800f9c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c8:	4a68      	ldr	r2, [pc, #416]	@ (800fb6c <__ieee754_sqrt+0x1a8>)
 800f9ca:	ec55 4b10 	vmov	r4, r5, d0
 800f9ce:	43aa      	bics	r2, r5
 800f9d0:	462b      	mov	r3, r5
 800f9d2:	4621      	mov	r1, r4
 800f9d4:	d110      	bne.n	800f9f8 <__ieee754_sqrt+0x34>
 800f9d6:	4622      	mov	r2, r4
 800f9d8:	4620      	mov	r0, r4
 800f9da:	4629      	mov	r1, r5
 800f9dc:	f7f0 fe3c 	bl	8000658 <__aeabi_dmul>
 800f9e0:	4602      	mov	r2, r0
 800f9e2:	460b      	mov	r3, r1
 800f9e4:	4620      	mov	r0, r4
 800f9e6:	4629      	mov	r1, r5
 800f9e8:	f7f0 fc80 	bl	80002ec <__adddf3>
 800f9ec:	4604      	mov	r4, r0
 800f9ee:	460d      	mov	r5, r1
 800f9f0:	ec45 4b10 	vmov	d0, r4, r5
 800f9f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9f8:	2d00      	cmp	r5, #0
 800f9fa:	dc0e      	bgt.n	800fa1a <__ieee754_sqrt+0x56>
 800f9fc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800fa00:	4322      	orrs	r2, r4
 800fa02:	d0f5      	beq.n	800f9f0 <__ieee754_sqrt+0x2c>
 800fa04:	b19d      	cbz	r5, 800fa2e <__ieee754_sqrt+0x6a>
 800fa06:	4622      	mov	r2, r4
 800fa08:	4620      	mov	r0, r4
 800fa0a:	4629      	mov	r1, r5
 800fa0c:	f7f0 fc6c 	bl	80002e8 <__aeabi_dsub>
 800fa10:	4602      	mov	r2, r0
 800fa12:	460b      	mov	r3, r1
 800fa14:	f7f0 ff4a 	bl	80008ac <__aeabi_ddiv>
 800fa18:	e7e8      	b.n	800f9ec <__ieee754_sqrt+0x28>
 800fa1a:	152a      	asrs	r2, r5, #20
 800fa1c:	d115      	bne.n	800fa4a <__ieee754_sqrt+0x86>
 800fa1e:	2000      	movs	r0, #0
 800fa20:	e009      	b.n	800fa36 <__ieee754_sqrt+0x72>
 800fa22:	0acb      	lsrs	r3, r1, #11
 800fa24:	3a15      	subs	r2, #21
 800fa26:	0549      	lsls	r1, r1, #21
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d0fa      	beq.n	800fa22 <__ieee754_sqrt+0x5e>
 800fa2c:	e7f7      	b.n	800fa1e <__ieee754_sqrt+0x5a>
 800fa2e:	462a      	mov	r2, r5
 800fa30:	e7fa      	b.n	800fa28 <__ieee754_sqrt+0x64>
 800fa32:	005b      	lsls	r3, r3, #1
 800fa34:	3001      	adds	r0, #1
 800fa36:	02dc      	lsls	r4, r3, #11
 800fa38:	d5fb      	bpl.n	800fa32 <__ieee754_sqrt+0x6e>
 800fa3a:	1e44      	subs	r4, r0, #1
 800fa3c:	1b12      	subs	r2, r2, r4
 800fa3e:	f1c0 0420 	rsb	r4, r0, #32
 800fa42:	fa21 f404 	lsr.w	r4, r1, r4
 800fa46:	4323      	orrs	r3, r4
 800fa48:	4081      	lsls	r1, r0
 800fa4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa4e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800fa52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fa56:	07d2      	lsls	r2, r2, #31
 800fa58:	bf5c      	itt	pl
 800fa5a:	005b      	lslpl	r3, r3, #1
 800fa5c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800fa60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fa64:	bf58      	it	pl
 800fa66:	0049      	lslpl	r1, r1, #1
 800fa68:	2600      	movs	r6, #0
 800fa6a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800fa6e:	106d      	asrs	r5, r5, #1
 800fa70:	0049      	lsls	r1, r1, #1
 800fa72:	2016      	movs	r0, #22
 800fa74:	4632      	mov	r2, r6
 800fa76:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800fa7a:	1917      	adds	r7, r2, r4
 800fa7c:	429f      	cmp	r7, r3
 800fa7e:	bfde      	ittt	le
 800fa80:	193a      	addle	r2, r7, r4
 800fa82:	1bdb      	suble	r3, r3, r7
 800fa84:	1936      	addle	r6, r6, r4
 800fa86:	0fcf      	lsrs	r7, r1, #31
 800fa88:	3801      	subs	r0, #1
 800fa8a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800fa8e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fa92:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fa96:	d1f0      	bne.n	800fa7a <__ieee754_sqrt+0xb6>
 800fa98:	4604      	mov	r4, r0
 800fa9a:	2720      	movs	r7, #32
 800fa9c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800faa0:	429a      	cmp	r2, r3
 800faa2:	eb00 0e0c 	add.w	lr, r0, ip
 800faa6:	db02      	blt.n	800faae <__ieee754_sqrt+0xea>
 800faa8:	d113      	bne.n	800fad2 <__ieee754_sqrt+0x10e>
 800faaa:	458e      	cmp	lr, r1
 800faac:	d811      	bhi.n	800fad2 <__ieee754_sqrt+0x10e>
 800faae:	f1be 0f00 	cmp.w	lr, #0
 800fab2:	eb0e 000c 	add.w	r0, lr, ip
 800fab6:	da42      	bge.n	800fb3e <__ieee754_sqrt+0x17a>
 800fab8:	2800      	cmp	r0, #0
 800faba:	db40      	blt.n	800fb3e <__ieee754_sqrt+0x17a>
 800fabc:	f102 0801 	add.w	r8, r2, #1
 800fac0:	1a9b      	subs	r3, r3, r2
 800fac2:	458e      	cmp	lr, r1
 800fac4:	bf88      	it	hi
 800fac6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800faca:	eba1 010e 	sub.w	r1, r1, lr
 800face:	4464      	add	r4, ip
 800fad0:	4642      	mov	r2, r8
 800fad2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800fad6:	3f01      	subs	r7, #1
 800fad8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800fadc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fae0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800fae4:	d1dc      	bne.n	800faa0 <__ieee754_sqrt+0xdc>
 800fae6:	4319      	orrs	r1, r3
 800fae8:	d01b      	beq.n	800fb22 <__ieee754_sqrt+0x15e>
 800faea:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800fb70 <__ieee754_sqrt+0x1ac>
 800faee:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800fb74 <__ieee754_sqrt+0x1b0>
 800faf2:	e9da 0100 	ldrd	r0, r1, [sl]
 800faf6:	e9db 2300 	ldrd	r2, r3, [fp]
 800fafa:	f7f0 fbf5 	bl	80002e8 <__aeabi_dsub>
 800fafe:	e9da 8900 	ldrd	r8, r9, [sl]
 800fb02:	4602      	mov	r2, r0
 800fb04:	460b      	mov	r3, r1
 800fb06:	4640      	mov	r0, r8
 800fb08:	4649      	mov	r1, r9
 800fb0a:	f7f1 f821 	bl	8000b50 <__aeabi_dcmple>
 800fb0e:	b140      	cbz	r0, 800fb22 <__ieee754_sqrt+0x15e>
 800fb10:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fb14:	e9da 0100 	ldrd	r0, r1, [sl]
 800fb18:	e9db 2300 	ldrd	r2, r3, [fp]
 800fb1c:	d111      	bne.n	800fb42 <__ieee754_sqrt+0x17e>
 800fb1e:	3601      	adds	r6, #1
 800fb20:	463c      	mov	r4, r7
 800fb22:	1072      	asrs	r2, r6, #1
 800fb24:	0863      	lsrs	r3, r4, #1
 800fb26:	07f1      	lsls	r1, r6, #31
 800fb28:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800fb2c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800fb30:	bf48      	it	mi
 800fb32:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800fb36:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	e756      	b.n	800f9ec <__ieee754_sqrt+0x28>
 800fb3e:	4690      	mov	r8, r2
 800fb40:	e7be      	b.n	800fac0 <__ieee754_sqrt+0xfc>
 800fb42:	f7f0 fbd3 	bl	80002ec <__adddf3>
 800fb46:	e9da 8900 	ldrd	r8, r9, [sl]
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	4640      	mov	r0, r8
 800fb50:	4649      	mov	r1, r9
 800fb52:	f7f0 fff3 	bl	8000b3c <__aeabi_dcmplt>
 800fb56:	b120      	cbz	r0, 800fb62 <__ieee754_sqrt+0x19e>
 800fb58:	1ca0      	adds	r0, r4, #2
 800fb5a:	bf08      	it	eq
 800fb5c:	3601      	addeq	r6, #1
 800fb5e:	3402      	adds	r4, #2
 800fb60:	e7df      	b.n	800fb22 <__ieee754_sqrt+0x15e>
 800fb62:	1c63      	adds	r3, r4, #1
 800fb64:	f023 0401 	bic.w	r4, r3, #1
 800fb68:	e7db      	b.n	800fb22 <__ieee754_sqrt+0x15e>
 800fb6a:	bf00      	nop
 800fb6c:	7ff00000 	.word	0x7ff00000
 800fb70:	200002a8 	.word	0x200002a8
 800fb74:	200002a0 	.word	0x200002a0

0800fb78 <_init>:
 800fb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb7a:	bf00      	nop
 800fb7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb7e:	bc08      	pop	{r3}
 800fb80:	469e      	mov	lr, r3
 800fb82:	4770      	bx	lr

0800fb84 <_fini>:
 800fb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb86:	bf00      	nop
 800fb88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb8a:	bc08      	pop	{r3}
 800fb8c:	469e      	mov	lr, r3
 800fb8e:	4770      	bx	lr
